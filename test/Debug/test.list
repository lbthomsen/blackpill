
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c24  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007ebc  08007ebc  00017ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007ef4  08007ef4  00017ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007efc  08007efc  00017efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007f00  08007f00  00017f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000580  24000010  08007f14  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000590  08007f14  00020590  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000160ea  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002958  00000000  00000000  00036128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011b0  00000000  00000000  00038a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010b8  00000000  00000000  00039c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003724c  00000000  00000000  0003ace8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014715  00000000  00000000  00071f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015d4a7  00000000  00000000  00086649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e3af0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004b60  00000000  00000000  001e3b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007ea4 	.word	0x08007ea4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08007ea4 	.word	0x08007ea4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fd50 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f80c 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f94e 	bl	8000888 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80005ec:	f000 f882 	bl	80006f4 <MX_QUADSPI_Init>
  MX_SDMMC2_SD_Init();
 80005f0:	f000 f8a8 	bl	8000744 <MX_SDMMC2_SD_Init>
  MX_USART1_UART_Init();
 80005f4:	f000 f8ca 	bl	800078c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 f914 	bl	8000824 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x20>
	...

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b09c      	sub	sp, #112	; 0x70
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060a:	224c      	movs	r2, #76	; 0x4c
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f007 fc40 	bl	8007e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2220      	movs	r2, #32
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f007 fc3a 	bl	8007e94 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000620:	2002      	movs	r0, #2
 8000622:	f001 f9cd 	bl	80019c0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000626:	2300      	movs	r3, #0
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	4b30      	ldr	r3, [pc, #192]	; (80006ec <SystemClock_Config+0xec>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a2f      	ldr	r2, [pc, #188]	; (80006ec <SystemClock_Config+0xec>)
 8000630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000634:	6193      	str	r3, [r2, #24]
 8000636:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <SystemClock_Config+0xec>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <SystemClock_Config+0xf0>)
 8000642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000644:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <SystemClock_Config+0xf0>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <SystemClock_Config+0xf0>)
 800064e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000658:	bf00      	nop
 800065a:	4b24      	ldr	r3, [pc, #144]	; (80006ec <SystemClock_Config+0xec>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000666:	d1f8      	bne.n	800065a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	2302      	movs	r3, #2
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 800067e:	2320      	movs	r3, #32
 8000680:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000686:	2306      	movs	r3, #6
 8000688:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800068e:	230c      	movs	r3, #12
 8000690:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000692:	2300      	movs	r3, #0
 8000694:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fa92 	bl	8001bc8 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006aa:	f000 f953 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	233f      	movs	r3, #63	; 0x3f
 80006b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2303      	movs	r3, #3
 80006b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006be:	2340      	movs	r3, #64	; 0x40
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006c2:	2340      	movs	r3, #64	; 0x40
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2102      	movs	r1, #2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fe85 	bl	80023e4 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006e0:	f000 f938 	bl	8000954 <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3770      	adds	r7, #112	; 0x70
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	58024800 	.word	0x58024800
 80006f0:	58000400 	.word	0x58000400

080006f4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_QUADSPI_Init+0x48>)
 80006fa:	4a11      	ldr	r2, [pc, #68]	; (8000740 <MX_QUADSPI_Init+0x4c>)
 80006fc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_QUADSPI_Init+0x48>)
 8000700:	22ff      	movs	r2, #255	; 0xff
 8000702:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_QUADSPI_Init+0x48>)
 8000706:	2201      	movs	r2, #1
 8000708:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_QUADSPI_Init+0x48>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_QUADSPI_Init+0x48>)
 8000712:	2201      	movs	r2, #1
 8000714:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_QUADSPI_Init+0x48>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_QUADSPI_Init+0x48>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_QUADSPI_Init+0x48>)
 8000724:	2240      	movs	r2, #64	; 0x40
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_QUADSPI_Init+0x48>)
 800072a:	f001 f993 	bl	8001a54 <HAL_QSPI_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 8000734:	f000 f90e 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2400002c 	.word	0x2400002c
 8000740:	52005000 	.word	0x52005000

08000744 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_SDMMC2_SD_Init+0x40>)
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <MX_SDMMC2_SD_Init+0x44>)
 800074c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_SDMMC2_SD_Init+0x40>)
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_SDMMC2_SD_Init+0x40>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_SDMMC2_SD_Init+0x40>)
 800075c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000760:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_SDMMC2_SD_Init+0x40>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_SDMMC2_SD_Init+0x40>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd2) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_SDMMC2_SD_Init+0x40>)
 8000770:	f004 fb50 	bl	8004e14 <HAL_SD_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_SDMMC2_SD_Init+0x3a>
  {
    Error_Handler();
 800077a:	f000 f8eb 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	24000078 	.word	0x24000078
 8000788:	48022400 	.word	0x48022400

0800078c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_USART1_UART_Init+0x90>)
 8000792:	4a23      	ldr	r2, [pc, #140]	; (8000820 <MX_USART1_UART_Init+0x94>)
 8000794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_USART1_UART_Init+0x90>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d4:	4811      	ldr	r0, [pc, #68]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007d6:	f005 fb63 	bl	8005ea0 <HAL_UART_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007e0:	f000 f8b8 	bl	8000954 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e4:	2100      	movs	r1, #0
 80007e6:	480d      	ldr	r0, [pc, #52]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007e8:	f006 faba 	bl	8006d60 <HAL_UARTEx_SetTxFifoThreshold>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007f2:	f000 f8af 	bl	8000954 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4808      	ldr	r0, [pc, #32]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007fa:	f006 faef 	bl	8006ddc <HAL_UARTEx_SetRxFifoThreshold>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000804:	f000 f8a6 	bl	8000954 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_USART1_UART_Init+0x90>)
 800080a:	f006 fa70 	bl	8006cee <HAL_UARTEx_DisableFifoMode>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000814:	f000 f89e 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	240000f4 	.word	0x240000f4
 8000820:	40011000 	.word	0x40011000

08000824 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800082c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000830:	2209      	movs	r2, #9
 8000832:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000836:	2202      	movs	r2, #2
 8000838:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000842:	2202      	movs	r2, #2
 8000844:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800085a:	2200      	movs	r2, #0
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000860:	2200      	movs	r2, #0
 8000862:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000866:	2200      	movs	r2, #0
 8000868:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800086c:	f000 ff60 	bl	8001730 <HAL_PCD_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000876:	f000 f86d 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	24000184 	.word	0x24000184
 8000884:	40080000 	.word	0x40080000

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <MX_GPIO_Init+0xc8>)
 8000890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000894:	4a2e      	ldr	r2, [pc, #184]	; (8000950 <MX_GPIO_Init+0xc8>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a4:	f003 0310 	and.w	r3, r3, #16
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b2:	4a27      	ldr	r2, [pc, #156]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008bc:	4b24      	ldr	r3, [pc, #144]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d0:	4a1f      	ldr	r2, [pc, #124]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ee:	4a18      	ldr	r2, [pc, #96]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_GPIO_Init+0xc8>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	4a10      	ldr	r2, [pc, #64]	; (8000950 <MX_GPIO_Init+0xc8>)
 800090e:	f043 0302 	orr.w	r3, r3, #2
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_GPIO_Init+0xc8>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_GPIO_Init+0xc8>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092a:	4a09      	ldr	r2, [pc, #36]	; (8000950 <MX_GPIO_Init+0xc8>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_GPIO_Init+0xc8>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

}
 8000942:	bf00      	nop
 8000944:	371c      	adds	r7, #28
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	58024400 	.word	0x58024400

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_MspInit+0x30>)
 8000968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800096c:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_MspInit+0x30>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_MspInit+0x30>)
 8000978:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	58024400 	.word	0x58024400

08000994 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b0bc      	sub	sp, #240	; 0xf0
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ac:	f107 0320 	add.w	r3, r7, #32
 80009b0:	22bc      	movs	r2, #188	; 0xbc
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f007 fa6d 	bl	8007e94 <memset>
  if(hqspi->Instance==QUADSPI)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a79      	ldr	r2, [pc, #484]	; (8000ba4 <HAL_QSPI_MspInit+0x210>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	f040 80eb 	bne.w	8000b9c <HAL_QSPI_MspInit+0x208>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80009c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009ca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d0:	f107 0320 	add.w	r3, r7, #32
 80009d4:	4618      	mov	r0, r3
 80009d6:	f002 f891 	bl	8002afc <HAL_RCCEx_PeriphCLKConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 80009e0:	f7ff ffb8 	bl	8000954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80009e4:	4b70      	ldr	r3, [pc, #448]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 80009e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80009ea:	4a6f      	ldr	r2, [pc, #444]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80009f4:	4b6c      	ldr	r3, [pc, #432]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 80009f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a02:	4b69      	ldr	r3, [pc, #420]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	4a67      	ldr	r2, [pc, #412]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a12:	4b65      	ldr	r3, [pc, #404]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a18:	f003 0310 	and.w	r3, r3, #16
 8000a1c:	61bb      	str	r3, [r7, #24]
 8000a1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b61      	ldr	r3, [pc, #388]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a26:	4a60      	ldr	r2, [pc, #384]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a30:	4b5d      	ldr	r3, [pc, #372]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	4b5a      	ldr	r3, [pc, #360]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	4a58      	ldr	r2, [pc, #352]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 8000a46:	f043 0302 	orr.w	r3, r3, #2
 8000a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4e:	4b56      	ldr	r3, [pc, #344]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5c:	4b52      	ldr	r3, [pc, #328]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a62:	4a51      	ldr	r2, [pc, #324]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6c:	4b4e      	ldr	r3, [pc, #312]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	4a49      	ldr	r2, [pc, #292]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8a:	4b47      	ldr	r3, [pc, #284]	; (8000ba8 <HAL_QSPI_MspInit+0x214>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
    PB10     ------> QUADSPI_BK1_NCS
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ab0:	2309      	movs	r3, #9
 8000ab2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000aba:	4619      	mov	r1, r3
 8000abc:	483b      	ldr	r0, [pc, #236]	; (8000bac <HAL_QSPI_MspInit+0x218>)
 8000abe:	f000 fc87 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ada:	2309      	movs	r3, #9
 8000adc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4832      	ldr	r0, [pc, #200]	; (8000bb0 <HAL_QSPI_MspInit+0x21c>)
 8000ae8:	f000 fc72 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000aec:	f240 4304 	movw	r3, #1028	; 0x404
 8000af0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b06:	2309      	movs	r3, #9
 8000b08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b10:	4619      	mov	r1, r3
 8000b12:	4828      	ldr	r0, [pc, #160]	; (8000bb4 <HAL_QSPI_MspInit+0x220>)
 8000b14:	f000 fc5c 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000b18:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000b1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b32:	230a      	movs	r3, #10
 8000b34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481b      	ldr	r0, [pc, #108]	; (8000bac <HAL_QSPI_MspInit+0x218>)
 8000b40:	f000 fc46 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b5e:	2309      	movs	r3, #9
 8000b60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4813      	ldr	r0, [pc, #76]	; (8000bb8 <HAL_QSPI_MspInit+0x224>)
 8000b6c:	f000 fc30 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b8a:	2309      	movs	r3, #9
 8000b8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b94:	4619      	mov	r1, r3
 8000b96:	4809      	ldr	r0, [pc, #36]	; (8000bbc <HAL_QSPI_MspInit+0x228>)
 8000b98:	f000 fc1a 	bl	80013d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000b9c:	bf00      	nop
 8000b9e:	37f0      	adds	r7, #240	; 0xf0
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	52005000 	.word	0x52005000
 8000ba8:	58024400 	.word	0x58024400
 8000bac:	58021000 	.word	0x58021000
 8000bb0:	58020000 	.word	0x58020000
 8000bb4:	58020400 	.word	0x58020400
 8000bb8:	58020c00 	.word	0x58020c00
 8000bbc:	58020800 	.word	0x58020800

08000bc0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b0ba      	sub	sp, #232	; 0xe8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	22bc      	movs	r2, #188	; 0xbc
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f007 f957 	bl	8007e94 <memset>
  if(hsd->Instance==SDMMC2)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a49      	ldr	r2, [pc, #292]	; (8000d10 <HAL_SD_MspInit+0x150>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	f040 808b 	bne.w	8000d08 <HAL_SD_MspInit+0x148>
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000bf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 ff7b 	bl	8002afc <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8000c0c:	f7ff fea2 	bl	8000954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8000c10:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <HAL_SD_MspInit+0x154>)
 8000c12:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000c16:	4a3f      	ldr	r2, [pc, #252]	; (8000d14 <HAL_SD_MspInit+0x154>)
 8000c18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000c20:	4b3c      	ldr	r3, [pc, #240]	; (8000d14 <HAL_SD_MspInit+0x154>)
 8000c22:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <HAL_SD_MspInit+0x154>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a37      	ldr	r2, [pc, #220]	; (8000d14 <HAL_SD_MspInit+0x154>)
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b35      	ldr	r3, [pc, #212]	; (8000d14 <HAL_SD_MspInit+0x154>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <HAL_SD_MspInit+0x154>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	4a30      	ldr	r2, [pc, #192]	; (8000d14 <HAL_SD_MspInit+0x154>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5c:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <HAL_SD_MspInit+0x154>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <HAL_SD_MspInit+0x154>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	4a28      	ldr	r2, [pc, #160]	; (8000d14 <HAL_SD_MspInit+0x154>)
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <HAL_SD_MspInit+0x154>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> SDMMC2_D0
    PB15     ------> SDMMC2_D1
    PB3 (JTDO/TRACESWO)     ------> SDMMC2_D2
    PB4 (NJTRST)     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000ca0:	2309      	movs	r3, #9
 8000ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000caa:	4619      	mov	r1, r3
 8000cac:	481a      	ldr	r0, [pc, #104]	; (8000d18 <HAL_SD_MspInit+0x158>)
 8000cae:	f000 fb8f 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000cca:	2309      	movs	r3, #9
 8000ccc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4811      	ldr	r0, [pc, #68]	; (8000d1c <HAL_SD_MspInit+0x15c>)
 8000cd8:	f000 fb7a 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4;
 8000cdc:	f24c 0318 	movw	r3, #49176	; 0xc018
 8000ce0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000cf6:	2309      	movs	r3, #9
 8000cf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d00:	4619      	mov	r1, r3
 8000d02:	4807      	ldr	r0, [pc, #28]	; (8000d20 <HAL_SD_MspInit+0x160>)
 8000d04:	f000 fb64 	bl	80013d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8000d08:	bf00      	nop
 8000d0a:	37e8      	adds	r7, #232	; 0xe8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	48022400 	.word	0x48022400
 8000d14:	58024400 	.word	0x58024400
 8000d18:	58020800 	.word	0x58020800
 8000d1c:	58020000 	.word	0x58020000
 8000d20:	58020400 	.word	0x58020400

08000d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b0b8      	sub	sp, #224	; 0xe0
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	22bc      	movs	r2, #188	; 0xbc
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f007 f8a5 	bl	8007e94 <memset>
  if(huart->Instance==USART1)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a25      	ldr	r2, [pc, #148]	; (8000de4 <HAL_UART_MspInit+0xc0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d142      	bne.n	8000dda <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	4618      	mov	r0, r3
 8000d64:	f001 feca 	bl	8002afc <HAL_RCCEx_PeriphCLKConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d6e:	f7ff fdf1 	bl	8000954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d72:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <HAL_UART_MspInit+0xc4>)
 8000d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d78:	4a1b      	ldr	r2, [pc, #108]	; (8000de8 <HAL_UART_MspInit+0xc4>)
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_UART_MspInit+0xc4>)
 8000d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d88:	f003 0310 	and.w	r3, r3, #16
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_UART_MspInit+0xc4>)
 8000d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d96:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <HAL_UART_MspInit+0xc4>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_UART_MspInit+0xc4>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000db2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <HAL_UART_MspInit+0xc8>)
 8000dd6:	f000 fafb 	bl	80013d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	37e0      	adds	r7, #224	; 0xe0
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40011000 	.word	0x40011000
 8000de8:	58024400 	.word	0x58024400
 8000dec:	58020000 	.word	0x58020000

08000df0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0b8      	sub	sp, #224	; 0xe0
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	22bc      	movs	r2, #188	; 0xbc
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f007 f83f 	bl	8007e94 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a27      	ldr	r2, [pc, #156]	; (8000eb8 <HAL_PCD_MspInit+0xc8>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d146      	bne.n	8000eae <HAL_PCD_MspInit+0xbe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e24:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fe62 	bl	8002afc <HAL_RCCEx_PeriphCLKConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000e3e:	f7ff fd89 	bl	8000954 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e42:	f000 fdf7 	bl	8001a34 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <HAL_PCD_MspInit+0xcc>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <HAL_PCD_MspInit+0xcc>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <HAL_PCD_MspInit+0xcc>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e64:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e7e:	230a      	movs	r3, #10
 8000e80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <HAL_PCD_MspInit+0xd0>)
 8000e8c:	f000 faa0 	bl	80013d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_PCD_MspInit+0xcc>)
 8000e92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e96:	4a09      	ldr	r2, [pc, #36]	; (8000ebc <HAL_PCD_MspInit+0xcc>)
 8000e98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_PCD_MspInit+0xcc>)
 8000ea2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	37e0      	adds	r7, #224	; 0xe0
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40080000 	.word	0x40080000
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58020000 	.word	0x58020000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f92a 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b39      	ldr	r3, [pc, #228]	; (8001004 <SystemInit+0xec>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a38      	ldr	r2, [pc, #224]	; (8001004 <SystemInit+0xec>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f2c:	4b36      	ldr	r3, [pc, #216]	; (8001008 <SystemInit+0xf0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 030f 	and.w	r3, r3, #15
 8000f34:	2b06      	cmp	r3, #6
 8000f36:	d807      	bhi.n	8000f48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f38:	4b33      	ldr	r3, [pc, #204]	; (8001008 <SystemInit+0xf0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f023 030f 	bic.w	r3, r3, #15
 8000f40:	4a31      	ldr	r2, [pc, #196]	; (8001008 <SystemInit+0xf0>)
 8000f42:	f043 0307 	orr.w	r3, r3, #7
 8000f46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f48:	4b30      	ldr	r3, [pc, #192]	; (800100c <SystemInit+0xf4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a2f      	ldr	r2, [pc, #188]	; (800100c <SystemInit+0xf4>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <SystemInit+0xf4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f5a:	4b2c      	ldr	r3, [pc, #176]	; (800100c <SystemInit+0xf4>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	492b      	ldr	r1, [pc, #172]	; (800100c <SystemInit+0xf4>)
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <SystemInit+0xf8>)
 8000f62:	4013      	ands	r3, r2
 8000f64:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f66:	4b28      	ldr	r3, [pc, #160]	; (8001008 <SystemInit+0xf0>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f72:	4b25      	ldr	r3, [pc, #148]	; (8001008 <SystemInit+0xf0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f023 030f 	bic.w	r3, r3, #15
 8000f7a:	4a23      	ldr	r2, [pc, #140]	; (8001008 <SystemInit+0xf0>)
 8000f7c:	f043 0307 	orr.w	r3, r3, #7
 8000f80:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <SystemInit+0xf4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <SystemInit+0xf4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <SystemInit+0xf4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <SystemInit+0xf4>)
 8000f96:	4a1f      	ldr	r2, [pc, #124]	; (8001014 <SystemInit+0xfc>)
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <SystemInit+0xf4>)
 8000f9c:	4a1e      	ldr	r2, [pc, #120]	; (8001018 <SystemInit+0x100>)
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <SystemInit+0xf4>)
 8000fa2:	4a1e      	ldr	r2, [pc, #120]	; (800101c <SystemInit+0x104>)
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	; (800100c <SystemInit+0xf4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <SystemInit+0xf4>)
 8000fae:	4a1b      	ldr	r2, [pc, #108]	; (800101c <SystemInit+0x104>)
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <SystemInit+0xf4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <SystemInit+0xf4>)
 8000fba:	4a18      	ldr	r2, [pc, #96]	; (800101c <SystemInit+0x104>)
 8000fbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <SystemInit+0xf4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <SystemInit+0xf4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a10      	ldr	r2, [pc, #64]	; (800100c <SystemInit+0xf4>)
 8000fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <SystemInit+0xf4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <SystemInit+0x108>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <SystemInit+0x10c>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fe2:	d202      	bcs.n	8000fea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <SystemInit+0x110>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <SystemInit+0x114>)
 8000fec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ff0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SystemInit+0xec>)
 8000ff4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ff8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00
 8001008:	52002000 	.word	0x52002000
 800100c:	58024400 	.word	0x58024400
 8001010:	eaf6ed7f 	.word	0xeaf6ed7f
 8001014:	02020200 	.word	0x02020200
 8001018:	01ff0000 	.word	0x01ff0000
 800101c:	01010280 	.word	0x01010280
 8001020:	5c001000 	.word	0x5c001000
 8001024:	ffff0000 	.word	0xffff0000
 8001028:	51008108 	.word	0x51008108
 800102c:	52004000 	.word	0x52004000

08001030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001068 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001034:	f7ff ff70 	bl	8000f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800103a:	490d      	ldr	r1, [pc, #52]	; (8001070 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001050:	4c0a      	ldr	r4, [pc, #40]	; (800107c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105e:	f006 fef5 	bl	8007e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001062:	f7ff fabb 	bl	80005dc <main>
  bx  lr
 8001066:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001068:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800106c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001070:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001074:	08007f04 	.word	0x08007f04
  ldr r2, =_sbss
 8001078:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800107c:	24000590 	.word	0x24000590

08001080 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC3_IRQHandler>
	...

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108a:	2003      	movs	r0, #3
 800108c:	f000 f96e 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001090:	f001 fb5e 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 8001094:	4602      	mov	r2, r0
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_Init+0x68>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	4913      	ldr	r1, [pc, #76]	; (80010f0 <HAL_Init+0x6c>)
 80010a2:	5ccb      	ldrb	r3, [r1, r3]
 80010a4:	f003 031f 	and.w	r3, r3, #31
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_Init+0x68>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <HAL_Init+0x6c>)
 80010b8:	5cd3      	ldrb	r3, [r2, r3]
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	fa22 f303 	lsr.w	r3, r2, r3
 80010c4:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <HAL_Init+0x70>)
 80010c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010c8:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <HAL_Init+0x74>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ce:	200f      	movs	r0, #15
 80010d0:	f000 f814 	bl	80010fc <HAL_InitTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e002      	b.n	80010e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010de:	f7ff fc3f 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	58024400 	.word	0x58024400
 80010f0:	08007ebc 	.word	0x08007ebc
 80010f4:	24000004 	.word	0x24000004
 80010f8:	24000000 	.word	0x24000000

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_InitTick+0x60>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e021      	b.n	8001154 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <HAL_InitTick+0x64>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_InitTick+0x60>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f945 	bl	80013b6 <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001144:	f000 f91d 	bl	8001382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_InitTick+0x68>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2400000c 	.word	0x2400000c
 8001160:	24000000 	.word	0x24000000
 8001164:	24000008 	.word	0x24000008

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	2400000c 	.word	0x2400000c
 800118c:	2400058c 	.word	0x2400058c

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	2400058c 	.word	0x2400058c

080011a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff ffee 	bl	8001190 <HAL_GetTick>
 80011b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011c0:	d005      	beq.n	80011ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_Delay+0x44>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ce:	bf00      	nop
 80011d0:	f7ff ffde 	bl	8001190 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d8f7      	bhi.n	80011d0 <HAL_Delay+0x28>
  {
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2400000c 	.word	0x2400000c

080011f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_GetREVID+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	0c1b      	lsrs	r3, r3, #16
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	5c001000 	.word	0x5c001000

08001208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <__NVIC_SetPriorityGrouping+0x40>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	4313      	orrs	r3, r2
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x40>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00
 800124c:	05fa0000 	.word	0x05fa0000

08001250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <__NVIC_GetPriorityGrouping+0x18>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 0307 	and.w	r3, r3, #7
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff47 	bl	8001208 <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff5e 	bl	8001250 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff90 	bl	80012c0 <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5f 	bl	800126c <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffb2 	bl	8001328 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013de:	4b89      	ldr	r3, [pc, #548]	; (8001604 <HAL_GPIO_Init+0x234>)
 80013e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013e2:	e194      	b.n	800170e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	2101      	movs	r1, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8186 	beq.w	8001708 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d00b      	beq.n	800141c <HAL_GPIO_Init+0x4c>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d007      	beq.n	800141c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001410:	2b11      	cmp	r3, #17
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b12      	cmp	r3, #18
 800141a:	d130      	bne.n	800147e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001452:	2201      	movs	r2, #1
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	f003 0201 	and.w	r2, r3, #1
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0xee>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b12      	cmp	r3, #18
 80014bc:	d123      	bne.n	8001506 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	08da      	lsrs	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3208      	adds	r2, #8
 80014c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	220f      	movs	r2, #15
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	691a      	ldr	r2, [r3, #16]
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	08da      	lsrs	r2, r3, #3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3208      	adds	r2, #8
 8001500:	69b9      	ldr	r1, [r7, #24]
 8001502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	2203      	movs	r2, #3
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0203 	and.w	r2, r3, #3
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 80e0 	beq.w	8001708 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001548:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <HAL_GPIO_Init+0x238>)
 800154a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800154e:	4a2e      	ldr	r2, [pc, #184]	; (8001608 <HAL_GPIO_Init+0x238>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001558:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <HAL_GPIO_Init+0x238>)
 800155a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001566:	4a29      	ldr	r2, [pc, #164]	; (800160c <HAL_GPIO_Init+0x23c>)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	220f      	movs	r2, #15
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a20      	ldr	r2, [pc, #128]	; (8001610 <HAL_GPIO_Init+0x240>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d052      	beq.n	8001638 <HAL_GPIO_Init+0x268>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <HAL_GPIO_Init+0x244>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d031      	beq.n	80015fe <HAL_GPIO_Init+0x22e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <HAL_GPIO_Init+0x248>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d02b      	beq.n	80015fa <HAL_GPIO_Init+0x22a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a1d      	ldr	r2, [pc, #116]	; (800161c <HAL_GPIO_Init+0x24c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d025      	beq.n	80015f6 <HAL_GPIO_Init+0x226>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <HAL_GPIO_Init+0x250>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d01f      	beq.n	80015f2 <HAL_GPIO_Init+0x222>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <HAL_GPIO_Init+0x254>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d019      	beq.n	80015ee <HAL_GPIO_Init+0x21e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a1a      	ldr	r2, [pc, #104]	; (8001628 <HAL_GPIO_Init+0x258>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0x21a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a19      	ldr	r2, [pc, #100]	; (800162c <HAL_GPIO_Init+0x25c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d00d      	beq.n	80015e6 <HAL_GPIO_Init+0x216>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a18      	ldr	r2, [pc, #96]	; (8001630 <HAL_GPIO_Init+0x260>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d007      	beq.n	80015e2 <HAL_GPIO_Init+0x212>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a17      	ldr	r2, [pc, #92]	; (8001634 <HAL_GPIO_Init+0x264>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_GPIO_Init+0x20e>
 80015da:	2309      	movs	r3, #9
 80015dc:	e02d      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015de:	230a      	movs	r3, #10
 80015e0:	e02b      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015e2:	2308      	movs	r3, #8
 80015e4:	e029      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015e6:	2307      	movs	r3, #7
 80015e8:	e027      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015ea:	2306      	movs	r3, #6
 80015ec:	e025      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015ee:	2305      	movs	r3, #5
 80015f0:	e023      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015f2:	2304      	movs	r3, #4
 80015f4:	e021      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015f6:	2303      	movs	r3, #3
 80015f8:	e01f      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e01d      	b.n	800163a <HAL_GPIO_Init+0x26a>
 80015fe:	2301      	movs	r3, #1
 8001600:	e01b      	b.n	800163a <HAL_GPIO_Init+0x26a>
 8001602:	bf00      	nop
 8001604:	58000080 	.word	0x58000080
 8001608:	58024400 	.word	0x58024400
 800160c:	58000400 	.word	0x58000400
 8001610:	58020000 	.word	0x58020000
 8001614:	58020400 	.word	0x58020400
 8001618:	58020800 	.word	0x58020800
 800161c:	58020c00 	.word	0x58020c00
 8001620:	58021000 	.word	0x58021000
 8001624:	58021400 	.word	0x58021400
 8001628:	58021800 	.word	0x58021800
 800162c:	58021c00 	.word	0x58021c00
 8001630:	58022000 	.word	0x58022000
 8001634:	58022400 	.word	0x58022400
 8001638:	2300      	movs	r3, #0
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	f002 0203 	and.w	r2, r2, #3
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	4093      	lsls	r3, r2
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800164a:	4938      	ldr	r1, [pc, #224]	; (800172c <HAL_GPIO_Init+0x35c>)
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	3302      	adds	r3, #2
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80016d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	3301      	adds	r3, #1
 800170c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa22 f303 	lsr.w	r3, r2, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	f47f ae63 	bne.w	80013e4 <HAL_GPIO_Init+0x14>
  }
}
 800171e:	bf00      	nop
 8001720:	bf00      	nop
 8001722:	3724      	adds	r7, #36	; 0x24
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	58000400 	.word	0x58000400

08001730 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001732:	b08f      	sub	sp, #60	; 0x3c
 8001734:	af0a      	add	r7, sp, #40	; 0x28
 8001736:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e116      	b.n	8001970 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d106      	bne.n	8001762 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff fb47 	bl	8000df0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2203      	movs	r2, #3
 8001766:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f006 f913 	bl	80079ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	687e      	ldr	r6, [r7, #4]
 800178e:	466d      	mov	r5, sp
 8001790:	f106 0410 	add.w	r4, r6, #16
 8001794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800179c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80017a4:	1d33      	adds	r3, r6, #4
 80017a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017a8:	6838      	ldr	r0, [r7, #0]
 80017aa:	f006 f891 	bl	80078d0 <USB_CoreInit>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2202      	movs	r2, #2
 80017b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0d7      	b.n	8001970 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f006 f901 	bl	80079ce <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	e04a      	b.n	8001868 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017d2:	7bfa      	ldrb	r2, [r7, #15]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	1a9b      	subs	r3, r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	333d      	adds	r3, #61	; 0x3d
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017e6:	7bfa      	ldrb	r2, [r7, #15]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	1a9b      	subs	r3, r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	333c      	adds	r3, #60	; 0x3c
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	b298      	uxth	r0, r3
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	1a9b      	subs	r3, r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	3342      	adds	r3, #66	; 0x42
 800180e:	4602      	mov	r2, r0
 8001810:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	1a9b      	subs	r3, r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	333f      	adds	r3, #63	; 0x3f
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001826:	7bfa      	ldrb	r2, [r7, #15]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	1a9b      	subs	r3, r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	3344      	adds	r3, #68	; 0x44
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	1a9b      	subs	r3, r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	3348      	adds	r3, #72	; 0x48
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800184e:	7bfa      	ldrb	r2, [r7, #15]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	1a9b      	subs	r3, r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	3350      	adds	r3, #80	; 0x50
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	3301      	adds	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	d3af      	bcc.n	80017d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
 8001876:	e044      	b.n	8001902 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	1a9b      	subs	r3, r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	3301      	adds	r3, #1
 8001900:	73fb      	strb	r3, [r7, #15]
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	d3b5      	bcc.n	8001878 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	687e      	ldr	r6, [r7, #4]
 8001914:	466d      	mov	r5, sp
 8001916:	f106 0410 	add.w	r4, r6, #16
 800191a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001922:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001926:	e885 0003 	stmia.w	r5, {r0, r1}
 800192a:	1d33      	adds	r3, r6, #4
 800192c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800192e:	6838      	ldr	r0, [r7, #0]
 8001930:	f006 f878 	bl	8007a24 <USB_DevInit>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d005      	beq.n	8001946 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2202      	movs	r2, #2
 800193e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e014      	b.n	8001970 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	2b01      	cmp	r3, #1
 800195c:	d102      	bne.n	8001964 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f80a 	bl	8001978 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f006 fa1a 	bl	8007da2 <USB_DevDisconnect>

  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001978 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_PCDEx_ActivateLPM+0x44>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	10000003 	.word	0x10000003

080019c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_PWREx_ConfigSupply+0x70>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d00a      	beq.n	80019ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_PWREx_ConfigSupply+0x70>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d001      	beq.n	80019e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e01f      	b.n	8001a26 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e01d      	b.n	8001a26 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_PWREx_ConfigSupply+0x70>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f023 0207 	bic.w	r2, r3, #7
 80019f2:	490f      	ldr	r1, [pc, #60]	; (8001a30 <HAL_PWREx_ConfigSupply+0x70>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019fa:	f7ff fbc9 	bl	8001190 <HAL_GetTick>
 80019fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a00:	e009      	b.n	8001a16 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a02:	f7ff fbc5 	bl	8001190 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a10:	d901      	bls.n	8001a16 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e007      	b.n	8001a26 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_PWREx_ConfigSupply+0x70>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a22:	d1ee      	bne.n	8001a02 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	58024800 	.word	0x58024800

08001a34 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a42:	60d3      	str	r3, [r2, #12]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	58024800 	.word	0x58024800

08001a54 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001a5c:	f7ff fb98 	bl	8001190 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e05f      	b.n	8001b2c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d107      	bne.n	8001a88 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7fe ff8b 	bl	8000994 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001a7e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f85a 	bl	8001b3c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	021a      	lsls	r2, r3, #8
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2120      	movs	r1, #32
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f852 	bl	8001b58 <QSPI_WaitFlagStateUntilTimeout>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001ab8:	7afb      	ldrb	r3, [r7, #11]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d135      	bne.n	8001b2a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_QSPI_Init+0xe0>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6852      	ldr	r2, [r2, #4]
 8001acc:	0611      	lsls	r1, r2, #24
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68d2      	ldr	r2, [r2, #12]
 8001ad2:	4311      	orrs	r1, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	69d2      	ldr	r2, [r2, #28]
 8001ad8:	4311      	orrs	r1, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6a12      	ldr	r2, [r2, #32]
 8001ade:	4311      	orrs	r1, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_QSPI_Init+0xe4>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6912      	ldr	r2, [r2, #16]
 8001af6:	0411      	lsls	r1, r2, #16
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6952      	ldr	r2, [r2, #20]
 8001afc:	4311      	orrs	r1, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6992      	ldr	r2, [r2, #24]
 8001b02:	4311      	orrs	r1, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001b2a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	00ffff2f 	.word	0x00ffff2f
 8001b38:	ffe0f8fe 	.word	0xffe0f8fe

08001b3c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	4613      	mov	r3, r2
 8001b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001b68:	e01a      	b.n	8001ba0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b70:	d016      	beq.n	8001ba0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b72:	f7ff fb0d 	bl	8001190 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d302      	bcc.n	8001b88 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10b      	bne.n	8001ba0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e00e      	b.n	8001bbe <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	bf14      	ite	ne
 8001bae:	2301      	movne	r3, #1
 8001bb0:	2300      	moveq	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1d6      	bne.n	8001b6a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08c      	sub	sp, #48	; 0x30
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e3fd      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8087 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be8:	4b99      	ldr	r3, [pc, #612]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bf2:	4b97      	ldr	r3, [pc, #604]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfa:	2b10      	cmp	r3, #16
 8001bfc:	d007      	beq.n	8001c0e <HAL_RCC_OscConfig+0x46>
 8001bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c00:	2b18      	cmp	r3, #24
 8001c02:	d110      	bne.n	8001c26 <HAL_RCC_OscConfig+0x5e>
 8001c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d10b      	bne.n	8001c26 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0e:	4b90      	ldr	r3, [pc, #576]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d06c      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x12c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d168      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e3d7      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x76>
 8001c30:	4b87      	ldr	r3, [pc, #540]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a86      	ldr	r2, [pc, #536]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e02e      	b.n	8001c9c <HAL_RCC_OscConfig+0xd4>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x98>
 8001c46:	4b82      	ldr	r3, [pc, #520]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a81      	ldr	r2, [pc, #516]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b7f      	ldr	r3, [pc, #508]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a7e      	ldr	r2, [pc, #504]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e01d      	b.n	8001c9c <HAL_RCC_OscConfig+0xd4>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0xbc>
 8001c6a:	4b79      	ldr	r3, [pc, #484]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a78      	ldr	r2, [pc, #480]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b76      	ldr	r3, [pc, #472]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a75      	ldr	r2, [pc, #468]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e00b      	b.n	8001c9c <HAL_RCC_OscConfig+0xd4>
 8001c84:	4b72      	ldr	r3, [pc, #456]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a71      	ldr	r2, [pc, #452]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a6e      	ldr	r2, [pc, #440]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d013      	beq.n	8001ccc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fa74 	bl	8001190 <HAL_GetTick>
 8001ca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff fa70 	bl	8001190 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	; 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e38b      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cbe:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0xe4>
 8001cca:	e014      	b.n	8001cf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fa60 	bl	8001190 <HAL_GetTick>
 8001cd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd4:	f7ff fa5c 	bl	8001190 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b64      	cmp	r3, #100	; 0x64
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e377      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ce6:	4b5a      	ldr	r3, [pc, #360]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x10c>
 8001cf2:	e000      	b.n	8001cf6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80ae 	beq.w	8001e60 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d04:	4b52      	ldr	r3, [pc, #328]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d0c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d0e:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <HAL_RCC_OscConfig+0x162>
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	2b18      	cmp	r3, #24
 8001d1e:	d13a      	bne.n	8001d96 <HAL_RCC_OscConfig+0x1ce>
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d135      	bne.n	8001d96 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d2a:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_OscConfig+0x17a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e349      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	f7ff fa55 	bl	80011f0 <HAL_GetREVID>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d817      	bhi.n	8001d80 <HAL_RCC_OscConfig+0x1b8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2b40      	cmp	r3, #64	; 0x40
 8001d56:	d108      	bne.n	8001d6a <HAL_RCC_OscConfig+0x1a2>
 8001d58:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001d60:	4a3b      	ldr	r2, [pc, #236]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d66:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d68:	e07a      	b.n	8001e60 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6a:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	031b      	lsls	r3, r3, #12
 8001d78:	4935      	ldr	r1, [pc, #212]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d7e:	e06f      	b.n	8001e60 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d80:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	061b      	lsls	r3, r3, #24
 8001d8e:	4930      	ldr	r1, [pc, #192]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d94:	e064      	b.n	8001e60 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d045      	beq.n	8001e2a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d9e:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0219 	bic.w	r2, r3, #25
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	4929      	ldr	r1, [pc, #164]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff f9ee 	bl	8001190 <HAL_GetTick>
 8001db4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db8:	f7ff f9ea 	bl	8001190 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e305      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd6:	f7ff fa0b 	bl	80011f0 <HAL_GetREVID>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d817      	bhi.n	8001e14 <HAL_RCC_OscConfig+0x24c>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2b40      	cmp	r3, #64	; 0x40
 8001dea:	d108      	bne.n	8001dfe <HAL_RCC_OscConfig+0x236>
 8001dec:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001df4:	4a16      	ldr	r2, [pc, #88]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfa:	6053      	str	r3, [r2, #4]
 8001dfc:	e030      	b.n	8001e60 <HAL_RCC_OscConfig+0x298>
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	031b      	lsls	r3, r3, #12
 8001e0c:	4910      	ldr	r1, [pc, #64]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
 8001e12:	e025      	b.n	8001e60 <HAL_RCC_OscConfig+0x298>
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	490b      	ldr	r1, [pc, #44]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
 8001e28:	e01a      	b.n	8001e60 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <HAL_RCC_OscConfig+0x288>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7ff f9ab 	bl	8001190 <HAL_GetTick>
 8001e3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e3e:	f7ff f9a7 	bl	8001190 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d903      	bls.n	8001e54 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e2c2      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
 8001e50:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e54:	4b94      	ldr	r3, [pc, #592]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1ee      	bne.n	8001e3e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80a9 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e6e:	4b8e      	ldr	r3, [pc, #568]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e76:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e78:	4b8b      	ldr	r3, [pc, #556]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d007      	beq.n	8001e94 <HAL_RCC_OscConfig+0x2cc>
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2b18      	cmp	r3, #24
 8001e88:	d13a      	bne.n	8001f00 <HAL_RCC_OscConfig+0x338>
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d135      	bne.n	8001f00 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e94:	4b84      	ldr	r3, [pc, #528]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_OscConfig+0x2e4>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	2b80      	cmp	r3, #128	; 0x80
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e294      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001eac:	f7ff f9a0 	bl	80011f0 <HAL_GetREVID>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d817      	bhi.n	8001eea <HAL_RCC_OscConfig+0x322>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	2b20      	cmp	r3, #32
 8001ec0:	d108      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x30c>
 8001ec2:	4b79      	ldr	r3, [pc, #484]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001eca:	4a77      	ldr	r2, [pc, #476]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001ecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ed0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ed2:	e075      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ed4:	4b74      	ldr	r3, [pc, #464]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	069b      	lsls	r3, r3, #26
 8001ee2:	4971      	ldr	r1, [pc, #452]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ee8:	e06a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001eea:	4b6f      	ldr	r3, [pc, #444]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	061b      	lsls	r3, r3, #24
 8001ef8:	496b      	ldr	r1, [pc, #428]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001efe:	e05f      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d042      	beq.n	8001f8e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f08:	4b67      	ldr	r3, [pc, #412]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a66      	ldr	r2, [pc, #408]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7ff f93c 	bl	8001190 <HAL_GetTick>
 8001f18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f1c:	f7ff f938 	bl	8001190 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e253      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f2e:	4b5e      	ldr	r3, [pc, #376]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f3a:	f7ff f959 	bl	80011f0 <HAL_GetREVID>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d817      	bhi.n	8001f78 <HAL_RCC_OscConfig+0x3b0>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	2b20      	cmp	r3, #32
 8001f4e:	d108      	bne.n	8001f62 <HAL_RCC_OscConfig+0x39a>
 8001f50:	4b55      	ldr	r3, [pc, #340]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f58:	4a53      	ldr	r2, [pc, #332]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001f5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f5e:	6053      	str	r3, [r2, #4]
 8001f60:	e02e      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3f8>
 8001f62:	4b51      	ldr	r3, [pc, #324]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	069b      	lsls	r3, r3, #26
 8001f70:	494d      	ldr	r1, [pc, #308]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
 8001f76:	e023      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3f8>
 8001f78:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	061b      	lsls	r3, r3, #24
 8001f86:	4948      	ldr	r1, [pc, #288]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60cb      	str	r3, [r1, #12]
 8001f8c:	e018      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f8e:	4b46      	ldr	r3, [pc, #280]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a45      	ldr	r2, [pc, #276]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9a:	f7ff f8f9 	bl	8001190 <HAL_GetTick>
 8001f9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001fa2:	f7ff f8f5 	bl	8001190 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e210      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fb4:	4b3c      	ldr	r3, [pc, #240]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d036      	beq.n	800203a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d019      	beq.n	8002008 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd4:	4b34      	ldr	r3, [pc, #208]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd8:	4a33      	ldr	r2, [pc, #204]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7ff f8d6 	bl	8001190 <HAL_GetTick>
 8001fe4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe8:	f7ff f8d2 	bl	8001190 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1ed      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ffa:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8001ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x420>
 8002006:	e018      	b.n	800203a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002008:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 800200a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200c:	4a26      	ldr	r2, [pc, #152]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002014:	f7ff f8bc 	bl	8001190 <HAL_GetTick>
 8002018:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201c:	f7ff f8b8 	bl	8001190 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e1d3      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800202e:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8002030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b00      	cmp	r3, #0
 8002044:	d038      	beq.n	80020b8 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d019      	beq.n	8002082 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8002054:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002058:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800205a:	f7ff f899 	bl	8001190 <HAL_GetTick>
 800205e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002062:	f7ff f895 	bl	8001190 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e1b0      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x49a>
 8002080:	e01a      	b.n	80020b8 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <HAL_RCC_OscConfig+0x4e0>)
 8002088:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800208c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800208e:	f7ff f87f 	bl	8001190 <HAL_GetTick>
 8002092:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002096:	f7ff f87b 	bl	8001190 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d903      	bls.n	80020ac <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e196      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
 80020a8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020ac:	4b99      	ldr	r3, [pc, #612]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1ee      	bne.n	8002096 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8081 	beq.w	80021c8 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020c6:	4b94      	ldr	r3, [pc, #592]	; (8002318 <HAL_RCC_OscConfig+0x750>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a93      	ldr	r2, [pc, #588]	; (8002318 <HAL_RCC_OscConfig+0x750>)
 80020cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020d2:	f7ff f85d 	bl	8001190 <HAL_GetTick>
 80020d6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80020da:	f7ff f859 	bl	8001190 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b64      	cmp	r3, #100	; 0x64
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e174      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ec:	4b8a      	ldr	r3, [pc, #552]	; (8002318 <HAL_RCC_OscConfig+0x750>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x546>
 8002100:	4b84      	ldr	r3, [pc, #528]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002104:	4a83      	ldr	r2, [pc, #524]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6713      	str	r3, [r2, #112]	; 0x70
 800210c:	e02d      	b.n	800216a <HAL_RCC_OscConfig+0x5a2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x568>
 8002116:	4b7f      	ldr	r3, [pc, #508]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	4a7e      	ldr	r2, [pc, #504]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6713      	str	r3, [r2, #112]	; 0x70
 8002122:	4b7c      	ldr	r3, [pc, #496]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	4a7b      	ldr	r2, [pc, #492]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	6713      	str	r3, [r2, #112]	; 0x70
 800212e:	e01c      	b.n	800216a <HAL_RCC_OscConfig+0x5a2>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d10c      	bne.n	8002152 <HAL_RCC_OscConfig+0x58a>
 8002138:	4b76      	ldr	r3, [pc, #472]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	4a75      	ldr	r2, [pc, #468]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6713      	str	r3, [r2, #112]	; 0x70
 8002144:	4b73      	ldr	r3, [pc, #460]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	4a72      	ldr	r2, [pc, #456]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6713      	str	r3, [r2, #112]	; 0x70
 8002150:	e00b      	b.n	800216a <HAL_RCC_OscConfig+0x5a2>
 8002152:	4b70      	ldr	r3, [pc, #448]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002156:	4a6f      	ldr	r2, [pc, #444]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6713      	str	r3, [r2, #112]	; 0x70
 800215e:	4b6d      	ldr	r3, [pc, #436]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	4a6c      	ldr	r2, [pc, #432]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d015      	beq.n	800219e <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002172:	f7ff f80d 	bl	8001190 <HAL_GetTick>
 8002176:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7ff f809 	bl	8001190 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	; 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e122      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002190:	4b60      	ldr	r3, [pc, #384]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ee      	beq.n	800217a <HAL_RCC_OscConfig+0x5b2>
 800219c:	e014      	b.n	80021c8 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219e:	f7fe fff7 	bl	8001190 <HAL_GetTick>
 80021a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7fe fff3 	bl	8001190 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e10c      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021bc:	4b55      	ldr	r3, [pc, #340]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80021be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ee      	bne.n	80021a6 <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 8101 	beq.w	80023d4 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80021d2:	4b50      	ldr	r3, [pc, #320]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021da:	2b18      	cmp	r3, #24
 80021dc:	f000 80bc 	beq.w	8002358 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	f040 809d 	bne.w	8002324 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ea:	4b4a      	ldr	r3, [pc, #296]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a49      	ldr	r2, [pc, #292]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80021f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7fe ffcb 	bl	8001190 <HAL_GetTick>
 80021fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fe:	f7fe ffc7 	bl	8001190 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e0e2      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002210:	4b40      	ldr	r3, [pc, #256]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f0      	bne.n	80021fe <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800221c:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 800221e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002220:	4b3e      	ldr	r3, [pc, #248]	; (800231c <HAL_RCC_OscConfig+0x754>)
 8002222:	4013      	ands	r3, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800222c:	0112      	lsls	r2, r2, #4
 800222e:	430a      	orrs	r2, r1
 8002230:	4938      	ldr	r1, [pc, #224]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002232:	4313      	orrs	r3, r2
 8002234:	628b      	str	r3, [r1, #40]	; 0x28
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	3b01      	subs	r3, #1
 800223c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002244:	3b01      	subs	r3, #1
 8002246:	025b      	lsls	r3, r3, #9
 8002248:	b29b      	uxth	r3, r3
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	3b01      	subs	r3, #1
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	3b01      	subs	r3, #1
 8002260:	061b      	lsls	r3, r3, #24
 8002262:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002266:	492b      	ldr	r1, [pc, #172]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002268:	4313      	orrs	r3, r2
 800226a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800226c:	4b29      	ldr	r3, [pc, #164]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	4a28      	ldr	r2, [pc, #160]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002272:	f023 0301 	bic.w	r3, r3, #1
 8002276:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002278:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 800227a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800227c:	4b28      	ldr	r3, [pc, #160]	; (8002320 <HAL_RCC_OscConfig+0x758>)
 800227e:	4013      	ands	r3, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002284:	00d2      	lsls	r2, r2, #3
 8002286:	4923      	ldr	r1, [pc, #140]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002288:	4313      	orrs	r3, r2
 800228a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800228c:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	f023 020c 	bic.w	r2, r3, #12
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	491e      	ldr	r1, [pc, #120]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 800229a:	4313      	orrs	r3, r2
 800229c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	f023 0202 	bic.w	r2, r3, #2
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	491a      	ldr	r1, [pc, #104]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022b0:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	4a17      	ldr	r2, [pc, #92]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80022b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80022c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	4a11      	ldr	r2, [pc, #68]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80022ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80022d4:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e0:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0b      	ldr	r2, [pc, #44]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 80022e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7fe ff50 	bl	8001190 <HAL_GetTick>
 80022f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f4:	f7fe ff4c 	bl	8001190 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e067      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002306:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_RCC_OscConfig+0x74c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x72c>
 8002312:	e05f      	b.n	80023d4 <HAL_RCC_OscConfig+0x80c>
 8002314:	58024400 	.word	0x58024400
 8002318:	58024800 	.word	0x58024800
 800231c:	fffffc0c 	.word	0xfffffc0c
 8002320:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002324:	4b2e      	ldr	r3, [pc, #184]	; (80023e0 <HAL_RCC_OscConfig+0x818>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a2d      	ldr	r2, [pc, #180]	; (80023e0 <HAL_RCC_OscConfig+0x818>)
 800232a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800232e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7fe ff2e 	bl	8001190 <HAL_GetTick>
 8002334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002338:	f7fe ff2a 	bl	8001190 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e045      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800234a:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <HAL_RCC_OscConfig+0x818>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x770>
 8002356:	e03d      	b.n	80023d4 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002358:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <HAL_RCC_OscConfig+0x818>)
 800235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <HAL_RCC_OscConfig+0x818>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	2b01      	cmp	r3, #1
 800236a:	d031      	beq.n	80023d0 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	f003 0203 	and.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d12a      	bne.n	80023d0 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d122      	bne.n	80023d0 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d11a      	bne.n	80023d0 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	0a5b      	lsrs	r3, r3, #9
 800239e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d111      	bne.n	80023d0 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	0c1b      	lsrs	r3, r3, #16
 80023b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d108      	bne.n	80023d0 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	0e1b      	lsrs	r3, r3, #24
 80023c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3730      	adds	r7, #48	; 0x30
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	58024400 	.word	0x58024400

080023e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e19c      	b.n	8002732 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f8:	4b8a      	ldr	r3, [pc, #552]	; (8002624 <HAL_RCC_ClockConfig+0x240>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d910      	bls.n	8002428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b87      	ldr	r3, [pc, #540]	; (8002624 <HAL_RCC_ClockConfig+0x240>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 020f 	bic.w	r2, r3, #15
 800240e:	4985      	ldr	r1, [pc, #532]	; (8002624 <HAL_RCC_ClockConfig+0x240>)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b83      	ldr	r3, [pc, #524]	; (8002624 <HAL_RCC_ClockConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e184      	b.n	8002732 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d010      	beq.n	8002456 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	4b7b      	ldr	r3, [pc, #492]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002440:	429a      	cmp	r2, r3
 8002442:	d908      	bls.n	8002456 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002444:	4b78      	ldr	r3, [pc, #480]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	4975      	ldr	r1, [pc, #468]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 8002452:	4313      	orrs	r3, r2
 8002454:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d010      	beq.n	8002484 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	4b70      	ldr	r3, [pc, #448]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800246e:	429a      	cmp	r2, r3
 8002470:	d908      	bls.n	8002484 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002472:	4b6d      	ldr	r3, [pc, #436]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	496a      	ldr	r1, [pc, #424]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 8002480:	4313      	orrs	r3, r2
 8002482:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	d010      	beq.n	80024b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	4b64      	ldr	r3, [pc, #400]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800249c:	429a      	cmp	r2, r3
 800249e:	d908      	bls.n	80024b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024a0:	4b61      	ldr	r3, [pc, #388]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	495e      	ldr	r1, [pc, #376]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d010      	beq.n	80024e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	4b59      	ldr	r3, [pc, #356]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d908      	bls.n	80024e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80024ce:	4b56      	ldr	r3, [pc, #344]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4953      	ldr	r1, [pc, #332]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d010      	beq.n	800250e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	4b4d      	ldr	r3, [pc, #308]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d908      	bls.n	800250e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fc:	4b4a      	ldr	r3, [pc, #296]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f023 020f 	bic.w	r2, r3, #15
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4947      	ldr	r1, [pc, #284]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 800250a:	4313      	orrs	r3, r2
 800250c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d055      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800251a:	4b43      	ldr	r3, [pc, #268]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	4940      	ldr	r1, [pc, #256]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 8002528:	4313      	orrs	r3, r2
 800252a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d107      	bne.n	8002544 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002534:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d121      	bne.n	8002584 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0f6      	b.n	8002732 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d107      	bne.n	800255c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800254c:	4b36      	ldr	r3, [pc, #216]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d115      	bne.n	8002584 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0ea      	b.n	8002732 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d107      	bne.n	8002574 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002564:	4b30      	ldr	r3, [pc, #192]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0de      	b.n	8002732 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002574:	4b2c      	ldr	r3, [pc, #176]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0d6      	b.n	8002732 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002584:	4b28      	ldr	r3, [pc, #160]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	f023 0207 	bic.w	r2, r3, #7
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4925      	ldr	r1, [pc, #148]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 8002592:	4313      	orrs	r3, r2
 8002594:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002596:	f7fe fdfb 	bl	8001190 <HAL_GetTick>
 800259a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259e:	f7fe fdf7 	bl	8001190 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e0be      	b.n	8002732 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b4:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d1eb      	bne.n	800259e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d010      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	4b14      	ldr	r3, [pc, #80]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	429a      	cmp	r2, r3
 80025e0:	d208      	bcs.n	80025f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	f023 020f 	bic.w	r2, r3, #15
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	490e      	ldr	r1, [pc, #56]	; (8002628 <HAL_RCC_ClockConfig+0x244>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_RCC_ClockConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d214      	bcs.n	800262c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <HAL_RCC_ClockConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 020f 	bic.w	r2, r3, #15
 800260a:	4906      	ldr	r1, [pc, #24]	; (8002624 <HAL_RCC_ClockConfig+0x240>)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b04      	ldr	r3, [pc, #16]	; (8002624 <HAL_RCC_ClockConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e086      	b.n	8002732 <HAL_RCC_ClockConfig+0x34e>
 8002624:	52002000 	.word	0x52002000
 8002628:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d010      	beq.n	800265a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	4b3f      	ldr	r3, [pc, #252]	; (800273c <HAL_RCC_ClockConfig+0x358>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002644:	429a      	cmp	r2, r3
 8002646:	d208      	bcs.n	800265a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002648:	4b3c      	ldr	r3, [pc, #240]	; (800273c <HAL_RCC_ClockConfig+0x358>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	4939      	ldr	r1, [pc, #228]	; (800273c <HAL_RCC_ClockConfig+0x358>)
 8002656:	4313      	orrs	r3, r2
 8002658:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d010      	beq.n	8002688 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	4b34      	ldr	r3, [pc, #208]	; (800273c <HAL_RCC_ClockConfig+0x358>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002672:	429a      	cmp	r2, r3
 8002674:	d208      	bcs.n	8002688 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002676:	4b31      	ldr	r3, [pc, #196]	; (800273c <HAL_RCC_ClockConfig+0x358>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	492e      	ldr	r1, [pc, #184]	; (800273c <HAL_RCC_ClockConfig+0x358>)
 8002684:	4313      	orrs	r3, r2
 8002686:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b00      	cmp	r3, #0
 8002692:	d010      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699a      	ldr	r2, [r3, #24]
 8002698:	4b28      	ldr	r3, [pc, #160]	; (800273c <HAL_RCC_ClockConfig+0x358>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d208      	bcs.n	80026b6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026a4:	4b25      	ldr	r3, [pc, #148]	; (800273c <HAL_RCC_ClockConfig+0x358>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	4922      	ldr	r1, [pc, #136]	; (800273c <HAL_RCC_ClockConfig+0x358>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d010      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCC_ClockConfig+0x358>)
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d208      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80026d2:	4b1a      	ldr	r3, [pc, #104]	; (800273c <HAL_RCC_ClockConfig+0x358>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	4917      	ldr	r1, [pc, #92]	; (800273c <HAL_RCC_ClockConfig+0x358>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026e4:	f000 f834 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_RCC_ClockConfig+0x358>)
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	4912      	ldr	r1, [pc, #72]	; (8002740 <HAL_RCC_ClockConfig+0x35c>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002700:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <HAL_RCC_ClockConfig+0x358>)
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <HAL_RCC_ClockConfig+0x35c>)
 800270c:	5cd3      	ldrb	r3, [r2, r3]
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
 8002718:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <HAL_RCC_ClockConfig+0x360>)
 800271a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800271c:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <HAL_RCC_ClockConfig+0x364>)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_RCC_ClockConfig+0x368>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fce8 	bl	80010fc <HAL_InitTick>
 800272c:	4603      	mov	r3, r0
 800272e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002730:	7bfb      	ldrb	r3, [r7, #15]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	58024400 	.word	0x58024400
 8002740:	08007ebc 	.word	0x08007ebc
 8002744:	24000004 	.word	0x24000004
 8002748:	24000000 	.word	0x24000000
 800274c:	24000008 	.word	0x24000008

08002750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002756:	4bb3      	ldr	r3, [pc, #716]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800275e:	2b18      	cmp	r3, #24
 8002760:	f200 8155 	bhi.w	8002a0e <HAL_RCC_GetSysClockFreq+0x2be>
 8002764:	a201      	add	r2, pc, #4	; (adr r2, 800276c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276a:	bf00      	nop
 800276c:	080027d1 	.word	0x080027d1
 8002770:	08002a0f 	.word	0x08002a0f
 8002774:	08002a0f 	.word	0x08002a0f
 8002778:	08002a0f 	.word	0x08002a0f
 800277c:	08002a0f 	.word	0x08002a0f
 8002780:	08002a0f 	.word	0x08002a0f
 8002784:	08002a0f 	.word	0x08002a0f
 8002788:	08002a0f 	.word	0x08002a0f
 800278c:	080027f7 	.word	0x080027f7
 8002790:	08002a0f 	.word	0x08002a0f
 8002794:	08002a0f 	.word	0x08002a0f
 8002798:	08002a0f 	.word	0x08002a0f
 800279c:	08002a0f 	.word	0x08002a0f
 80027a0:	08002a0f 	.word	0x08002a0f
 80027a4:	08002a0f 	.word	0x08002a0f
 80027a8:	08002a0f 	.word	0x08002a0f
 80027ac:	080027fd 	.word	0x080027fd
 80027b0:	08002a0f 	.word	0x08002a0f
 80027b4:	08002a0f 	.word	0x08002a0f
 80027b8:	08002a0f 	.word	0x08002a0f
 80027bc:	08002a0f 	.word	0x08002a0f
 80027c0:	08002a0f 	.word	0x08002a0f
 80027c4:	08002a0f 	.word	0x08002a0f
 80027c8:	08002a0f 	.word	0x08002a0f
 80027cc:	08002803 	.word	0x08002803
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027d0:	4b94      	ldr	r3, [pc, #592]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d009      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80027dc:	4b91      	ldr	r3, [pc, #580]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	08db      	lsrs	r3, r3, #3
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	4a90      	ldr	r2, [pc, #576]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80027ee:	e111      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80027f0:	4b8d      	ldr	r3, [pc, #564]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027f2:	61bb      	str	r3, [r7, #24]
    break;
 80027f4:	e10e      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80027f6:	4b8d      	ldr	r3, [pc, #564]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027f8:	61bb      	str	r3, [r7, #24]
    break;
 80027fa:	e10b      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80027fc:	4b8c      	ldr	r3, [pc, #560]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80027fe:	61bb      	str	r3, [r7, #24]
    break;
 8002800:	e108      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002802:	4b88      	ldr	r3, [pc, #544]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800280c:	4b85      	ldr	r3, [pc, #532]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002816:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002818:	4b82      	ldr	r3, [pc, #520]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002822:	4b80      	ldr	r3, [pc, #512]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	08db      	lsrs	r3, r3, #3
 8002828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	fb02 f303 	mul.w	r3, r2, r3
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800283a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80e1 	beq.w	8002a08 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b02      	cmp	r3, #2
 800284a:	f000 8083 	beq.w	8002954 <HAL_RCC_GetSysClockFreq+0x204>
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b02      	cmp	r3, #2
 8002852:	f200 80a1 	bhi.w	8002998 <HAL_RCC_GetSysClockFreq+0x248>
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x114>
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d056      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002862:	e099      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002864:	4b6f      	ldr	r3, [pc, #444]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d02d      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002870:	4b6c      	ldr	r3, [pc, #432]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	08db      	lsrs	r3, r3, #3
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	4a6b      	ldr	r2, [pc, #428]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
 8002880:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	ee07 3a90 	vmov	s15, r3
 8002892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800289a:	4b62      	ldr	r3, [pc, #392]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a2:	ee07 3a90 	vmov	s15, r3
 80028a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80028ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002a34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80028ca:	e087      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	ee07 3a90 	vmov	s15, r3
 80028d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002a38 <HAL_RCC_GetSysClockFreq+0x2e8>
 80028da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028de:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e6:	ee07 3a90 	vmov	s15, r3
 80028ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80028f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002a34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800290e:	e065      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	ee07 3a90 	vmov	s15, r3
 8002916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002a3c <HAL_RCC_GetSysClockFreq+0x2ec>
 800291e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002922:	4b40      	ldr	r3, [pc, #256]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002932:	ed97 6a02 	vldr	s12, [r7, #8]
 8002936:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002a34 <HAL_RCC_GetSysClockFreq+0x2e4>
 800293a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800293e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800294a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002952:	e043      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002a40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002966:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800296e:	ee07 3a90 	vmov	s15, r3
 8002972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002976:	ed97 6a02 	vldr	s12, [r7, #8]
 800297a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002a34 <HAL_RCC_GetSysClockFreq+0x2e4>
 800297e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800298a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800298e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002996:	e021      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002a3c <HAL_RCC_GetSysClockFreq+0x2ec>
 80029a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029aa:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80029be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002a34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029da:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	0a5b      	lsrs	r3, r3, #9
 80029e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029e6:	3301      	adds	r3, #1
 80029e8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	ee07 3a90 	vmov	s15, r3
 80029f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80029f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a00:	ee17 3a90 	vmov	r3, s15
 8002a04:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002a06:	e005      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61bb      	str	r3, [r7, #24]
    break;
 8002a0c:	e002      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a10:	61bb      	str	r3, [r7, #24]
    break;
 8002a12:	bf00      	nop
  }

  return sysclockfreq;
 8002a14:	69bb      	ldr	r3, [r7, #24]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3724      	adds	r7, #36	; 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	58024400 	.word	0x58024400
 8002a28:	03d09000 	.word	0x03d09000
 8002a2c:	003d0900 	.word	0x003d0900
 8002a30:	0112a880 	.word	0x0112a880
 8002a34:	46000000 	.word	0x46000000
 8002a38:	4c742400 	.word	0x4c742400
 8002a3c:	4a742400 	.word	0x4a742400
 8002a40:	4b895440 	.word	0x4b895440

08002a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a4a:	f7ff fe81 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	490f      	ldr	r1, [pc, #60]	; (8002a98 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a5c:	5ccb      	ldrb	r3, [r1, r3]
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	fa22 f303 	lsr.w	r3, r2, r3
 8002a66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a68:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a72:	5cd3      	ldrb	r3, [r2, r3]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7e:	4a07      	ldr	r2, [pc, #28]	; (8002a9c <HAL_RCC_GetHCLKFreq+0x58>)
 8002a80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a82:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <HAL_RCC_GetHCLKFreq+0x58>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	58024400 	.word	0x58024400
 8002a98:	08007ebc 	.word	0x08007ebc
 8002a9c:	24000004 	.word	0x24000004
 8002aa0:	24000000 	.word	0x24000000

08002aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002aa8:	f7ff ffcc 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8002aac:	4602      	mov	r2, r0
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	4904      	ldr	r1, [pc, #16]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aba:	5ccb      	ldrb	r3, [r1, r3]
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	58024400 	.word	0x58024400
 8002acc:	08007ebc 	.word	0x08007ebc

08002ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002ad4:	f7ff ffb6 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4904      	ldr	r1, [pc, #16]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	58024400 	.word	0x58024400
 8002af8:	08007ebc 	.word	0x08007ebc

08002afc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b04:	2300      	movs	r3, #0
 8002b06:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b08:	2300      	movs	r3, #0
 8002b0a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d03f      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b20:	d02a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b26:	d824      	bhi.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b2c:	d018      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b32:	d81e      	bhi.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b3c:	d007      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b3e:	e018      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b40:	4ba3      	ldr	r3, [pc, #652]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	4aa2      	ldr	r2, [pc, #648]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b4c:	e015      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3304      	adds	r3, #4
 8002b52:	2102      	movs	r1, #2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f001 fff9 	bl	8004b4c <RCCEx_PLL2_Config>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b5e:	e00c      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3324      	adds	r3, #36	; 0x24
 8002b64:	2102      	movs	r1, #2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 f8a2 	bl	8004cb0 <RCCEx_PLL3_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b70:	e003      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	75fb      	strb	r3, [r7, #23]
      break;
 8002b76:	e000      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d109      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b80:	4b93      	ldr	r3, [pc, #588]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b8c:	4990      	ldr	r1, [pc, #576]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	650b      	str	r3, [r1, #80]	; 0x50
 8002b92:	e001      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d03d      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d826      	bhi.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002bac:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb2:	bf00      	nop
 8002bb4:	08002bc9 	.word	0x08002bc9
 8002bb8:	08002bd7 	.word	0x08002bd7
 8002bbc:	08002be9 	.word	0x08002be9
 8002bc0:	08002c01 	.word	0x08002c01
 8002bc4:	08002c01 	.word	0x08002c01
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc8:	4b81      	ldr	r3, [pc, #516]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	4a80      	ldr	r2, [pc, #512]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bd4:	e015      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2100      	movs	r1, #0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 ffb5 	bl	8004b4c <RCCEx_PLL2_Config>
 8002be2:	4603      	mov	r3, r0
 8002be4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002be6:	e00c      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3324      	adds	r3, #36	; 0x24
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 f85e 	bl	8004cb0 <RCCEx_PLL3_Config>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bf8:	e003      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8002bfe:	e000      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c08:	4b71      	ldr	r3, [pc, #452]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0c:	f023 0207 	bic.w	r2, r3, #7
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c14:	496e      	ldr	r1, [pc, #440]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	650b      	str	r3, [r1, #80]	; 0x50
 8002c1a:	e001      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d042      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c34:	d02b      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c3a:	d825      	bhi.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c3c:	2bc0      	cmp	r3, #192	; 0xc0
 8002c3e:	d028      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002c40:	2bc0      	cmp	r3, #192	; 0xc0
 8002c42:	d821      	bhi.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c44:	2b80      	cmp	r3, #128	; 0x80
 8002c46:	d016      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002c48:	2b80      	cmp	r3, #128	; 0x80
 8002c4a:	d81d      	bhi.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002c50:	2b40      	cmp	r3, #64	; 0x40
 8002c52:	d007      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002c54:	e018      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c56:	4b5e      	ldr	r3, [pc, #376]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	4a5d      	ldr	r2, [pc, #372]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c62:	e017      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3304      	adds	r3, #4
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f001 ff6e 	bl	8004b4c <RCCEx_PLL2_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c74:	e00e      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3324      	adds	r3, #36	; 0x24
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f002 f817 	bl	8004cb0 <RCCEx_PLL3_Config>
 8002c82:	4603      	mov	r3, r0
 8002c84:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c86:	e005      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c8c:	e002      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e000      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002c92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002c9a:	4b4d      	ldr	r3, [pc, #308]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca6:	494a      	ldr	r1, [pc, #296]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	650b      	str	r3, [r1, #80]	; 0x50
 8002cac:	e001      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
 8002cb0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d049      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002cc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cc8:	d030      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002cca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cce:	d82a      	bhi.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002cd0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002cd4:	d02c      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002cd6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002cda:	d824      	bhi.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce0:	d018      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce6:	d81e      	bhi.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002cec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cf0:	d007      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002cf2:	e018      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cf4:	4b36      	ldr	r3, [pc, #216]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	4a35      	ldr	r2, [pc, #212]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d00:	e017      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3304      	adds	r3, #4
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f001 ff1f 	bl	8004b4c <RCCEx_PLL2_Config>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002d12:	e00e      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3324      	adds	r3, #36	; 0x24
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 ffc8 	bl	8004cb0 <RCCEx_PLL3_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d24:	e005      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	75fb      	strb	r3, [r7, #23]
      break;
 8002d2a:	e002      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002d2c:	bf00      	nop
 8002d2e:	e000      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d32:	7dfb      	ldrb	r3, [r7, #23]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10a      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d38:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d46:	4922      	ldr	r1, [pc, #136]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	658b      	str	r3, [r1, #88]	; 0x58
 8002d4c:	e001      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d04b      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d68:	d030      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d6e:	d82a      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d74:	d02e      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002d76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d7a:	d824      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d80:	d018      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002d82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d86:	d81e      	bhi.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d90:	d007      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002d92:	e018      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d94:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	4a0d      	ldr	r2, [pc, #52]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002da0:	e019      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 fecf 	bl	8004b4c <RCCEx_PLL2_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002db2:	e010      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3324      	adds	r3, #36	; 0x24
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f001 ff78 	bl	8004cb0 <RCCEx_PLL3_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002dc4:	e007      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8002dca:	e004      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002dcc:	bf00      	nop
 8002dce:	e002      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002dd0:	58024400 	.word	0x58024400
      break;
 8002dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ddc:	4b99      	ldr	r3, [pc, #612]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002dea:	4996      	ldr	r1, [pc, #600]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	658b      	str	r3, [r1, #88]	; 0x58
 8002df0:	e001      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
 8002df4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d032      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e06:	2b30      	cmp	r3, #48	; 0x30
 8002e08:	d01c      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002e0a:	2b30      	cmp	r3, #48	; 0x30
 8002e0c:	d817      	bhi.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d00c      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d813      	bhi.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d016      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d10f      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e1e:	4b89      	ldr	r3, [pc, #548]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	4a88      	ldr	r2, [pc, #544]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002e2a:	e00e      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3304      	adds	r3, #4
 8002e30:	2102      	movs	r1, #2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f001 fe8a 	bl	8004b4c <RCCEx_PLL2_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002e3c:	e005      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	75fb      	strb	r3, [r7, #23]
      break;
 8002e42:	e002      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002e44:	bf00      	nop
 8002e46:	e000      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e4a:	7dfb      	ldrb	r3, [r7, #23]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d109      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e50:	4b7c      	ldr	r3, [pc, #496]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5c:	4979      	ldr	r1, [pc, #484]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e62:	e001      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e64:	7dfb      	ldrb	r3, [r7, #23]
 8002e66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d047      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e7c:	d030      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e82:	d82a      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002e84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e88:	d02c      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002e8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e8e:	d824      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e94:	d018      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e9a:	d81e      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea4:	d007      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002ea6:	e018      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ea8:	4b66      	ldr	r3, [pc, #408]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	4a65      	ldr	r2, [pc, #404]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002eb4:	e017      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	2100      	movs	r1, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f001 fe45 	bl	8004b4c <RCCEx_PLL2_Config>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ec6:	e00e      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3324      	adds	r3, #36	; 0x24
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f001 feee 	bl	8004cb0 <RCCEx_PLL3_Config>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ed8:	e005      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	75fb      	strb	r3, [r7, #23]
      break;
 8002ede:	e002      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002ee0:	bf00      	nop
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002eec:	4b55      	ldr	r3, [pc, #340]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	4952      	ldr	r1, [pc, #328]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	650b      	str	r3, [r1, #80]	; 0x50
 8002efe:	e001      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d049      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f18:	d02e      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f1e:	d828      	bhi.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f24:	d02a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002f26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f2a:	d822      	bhi.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f30:	d026      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002f32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f36:	d81c      	bhi.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f3c:	d010      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002f3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f42:	d816      	bhi.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01d      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4c:	d111      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3304      	adds	r3, #4
 8002f52:	2101      	movs	r1, #1
 8002f54:	4618      	mov	r0, r3
 8002f56:	f001 fdf9 	bl	8004b4c <RCCEx_PLL2_Config>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f5e:	e012      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3324      	adds	r3, #36	; 0x24
 8002f64:	2101      	movs	r1, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f001 fea2 	bl	8004cb0 <RCCEx_PLL3_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f70:	e009      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	75fb      	strb	r3, [r7, #23]
      break;
 8002f76:	e006      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f78:	bf00      	nop
 8002f7a:	e004      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f7c:	bf00      	nop
 8002f7e:	e002      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f80:	bf00      	nop
 8002f82:	e000      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f86:	7dfb      	ldrb	r3, [r7, #23]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f8c:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f90:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f98:	492a      	ldr	r1, [pc, #168]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	650b      	str	r3, [r1, #80]	; 0x50
 8002f9e:	e001      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
 8002fa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d04d      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fba:	d02e      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc0:	d828      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc6:	d02a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fcc:	d822      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002fce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fd2:	d026      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002fd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fd8:	d81c      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fde:	d010      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fe4:	d816      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d01d      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fee:	d111      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 fda8 	bl	8004b4c <RCCEx_PLL2_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003000:	e012      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3324      	adds	r3, #36	; 0x24
 8003006:	2101      	movs	r1, #1
 8003008:	4618      	mov	r0, r3
 800300a:	f001 fe51 	bl	8004cb0 <RCCEx_PLL3_Config>
 800300e:	4603      	mov	r3, r0
 8003010:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003012:	e009      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	75fb      	strb	r3, [r7, #23]
      break;
 8003018:	e006      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800301a:	bf00      	nop
 800301c:	e004      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800301e:	bf00      	nop
 8003020:	e002      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003022:	bf00      	nop
 8003024:	e000      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003028:	7dfb      	ldrb	r3, [r7, #23]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10c      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800302e:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003032:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800303c:	4901      	ldr	r1, [pc, #4]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800303e:	4313      	orrs	r3, r2
 8003040:	658b      	str	r3, [r1, #88]	; 0x58
 8003042:	e003      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d02f      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800305c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003060:	d00e      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003066:	d814      	bhi.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003068:	2b00      	cmp	r3, #0
 800306a:	d015      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800306c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003070:	d10f      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003072:	4baf      	ldr	r3, [pc, #700]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	4aae      	ldr	r2, [pc, #696]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800307c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800307e:	e00c      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3304      	adds	r3, #4
 8003084:	2101      	movs	r1, #1
 8003086:	4618      	mov	r0, r3
 8003088:	f001 fd60 	bl	8004b4c <RCCEx_PLL2_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003090:	e003      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	75fb      	strb	r3, [r7, #23]
      break;
 8003096:	e000      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800309a:	7dfb      	ldrb	r3, [r7, #23]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d109      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030a0:	4ba3      	ldr	r3, [pc, #652]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ac:	49a0      	ldr	r1, [pc, #640]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	650b      	str	r3, [r1, #80]	; 0x50
 80030b2:	e001      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d032      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d81b      	bhi.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80030cc:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	0800310b 	.word	0x0800310b
 80030d8:	080030e5 	.word	0x080030e5
 80030dc:	080030f3 	.word	0x080030f3
 80030e0:	0800310b 	.word	0x0800310b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030e4:	4b92      	ldr	r3, [pc, #584]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	4a91      	ldr	r2, [pc, #580]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80030f0:	e00c      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3304      	adds	r3, #4
 80030f6:	2102      	movs	r1, #2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f001 fd27 	bl	8004b4c <RCCEx_PLL2_Config>
 80030fe:	4603      	mov	r3, r0
 8003100:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003102:	e003      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	75fb      	strb	r3, [r7, #23]
      break;
 8003108:	e000      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800310a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800310c:	7dfb      	ldrb	r3, [r7, #23]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003112:	4b87      	ldr	r3, [pc, #540]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003116:	f023 0203 	bic.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	4984      	ldr	r1, [pc, #528]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003120:	4313      	orrs	r3, r2
 8003122:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003124:	e001      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003126:	7dfb      	ldrb	r3, [r7, #23]
 8003128:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8086 	beq.w	8003244 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003138:	4b7e      	ldr	r3, [pc, #504]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a7d      	ldr	r2, [pc, #500]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800313e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003142:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003144:	f7fe f824 	bl	8001190 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800314a:	e009      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314c:	f7fe f820 	bl	8001190 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	; 0x64
 8003158:	d902      	bls.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	75fb      	strb	r3, [r7, #23]
        break;
 800315e:	e005      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003160:	4b74      	ldr	r3, [pc, #464]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0ef      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800316c:	7dfb      	ldrb	r3, [r7, #23]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d166      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003172:	4b6f      	ldr	r3, [pc, #444]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003174:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800317c:	4053      	eors	r3, r2
 800317e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003182:	2b00      	cmp	r3, #0
 8003184:	d013      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003186:	4b6a      	ldr	r3, [pc, #424]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003190:	4b67      	ldr	r3, [pc, #412]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	4a66      	ldr	r2, [pc, #408]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800319c:	4b64      	ldr	r3, [pc, #400]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	4a63      	ldr	r2, [pc, #396]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80031a8:	4a61      	ldr	r2, [pc, #388]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b8:	d115      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ba:	f7fd ffe9 	bl	8001190 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031c0:	e00b      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c2:	f7fd ffe5 	bl	8001190 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d902      	bls.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	75fb      	strb	r3, [r7, #23]
            break;
 80031d8:	e005      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031da:	4b55      	ldr	r3, [pc, #340]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0ed      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d126      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031fa:	d10d      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80031fc:	4b4c      	ldr	r3, [pc, #304]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800320a:	0919      	lsrs	r1, r3, #4
 800320c:	4b4a      	ldr	r3, [pc, #296]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800320e:	400b      	ands	r3, r1
 8003210:	4947      	ldr	r1, [pc, #284]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003212:	4313      	orrs	r3, r2
 8003214:	610b      	str	r3, [r1, #16]
 8003216:	e005      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003218:	4b45      	ldr	r3, [pc, #276]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	4a44      	ldr	r2, [pc, #272]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800321e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003222:	6113      	str	r3, [r2, #16]
 8003224:	4b42      	ldr	r3, [pc, #264]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003226:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800322e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003232:	493f      	ldr	r1, [pc, #252]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003234:	4313      	orrs	r3, r2
 8003236:	670b      	str	r3, [r1, #112]	; 0x70
 8003238:	e004      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	75bb      	strb	r3, [r7, #22]
 800323e:	e001      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003240:	7dfb      	ldrb	r3, [r7, #23]
 8003242:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8085 	beq.w	800335c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003256:	2b28      	cmp	r3, #40	; 0x28
 8003258:	d866      	bhi.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800325a:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800325c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003260:	0800333d 	.word	0x0800333d
 8003264:	08003329 	.word	0x08003329
 8003268:	08003329 	.word	0x08003329
 800326c:	08003329 	.word	0x08003329
 8003270:	08003329 	.word	0x08003329
 8003274:	08003329 	.word	0x08003329
 8003278:	08003329 	.word	0x08003329
 800327c:	08003329 	.word	0x08003329
 8003280:	08003305 	.word	0x08003305
 8003284:	08003329 	.word	0x08003329
 8003288:	08003329 	.word	0x08003329
 800328c:	08003329 	.word	0x08003329
 8003290:	08003329 	.word	0x08003329
 8003294:	08003329 	.word	0x08003329
 8003298:	08003329 	.word	0x08003329
 800329c:	08003329 	.word	0x08003329
 80032a0:	08003317 	.word	0x08003317
 80032a4:	08003329 	.word	0x08003329
 80032a8:	08003329 	.word	0x08003329
 80032ac:	08003329 	.word	0x08003329
 80032b0:	08003329 	.word	0x08003329
 80032b4:	08003329 	.word	0x08003329
 80032b8:	08003329 	.word	0x08003329
 80032bc:	08003329 	.word	0x08003329
 80032c0:	0800333d 	.word	0x0800333d
 80032c4:	08003329 	.word	0x08003329
 80032c8:	08003329 	.word	0x08003329
 80032cc:	08003329 	.word	0x08003329
 80032d0:	08003329 	.word	0x08003329
 80032d4:	08003329 	.word	0x08003329
 80032d8:	08003329 	.word	0x08003329
 80032dc:	08003329 	.word	0x08003329
 80032e0:	0800333d 	.word	0x0800333d
 80032e4:	08003329 	.word	0x08003329
 80032e8:	08003329 	.word	0x08003329
 80032ec:	08003329 	.word	0x08003329
 80032f0:	08003329 	.word	0x08003329
 80032f4:	08003329 	.word	0x08003329
 80032f8:	08003329 	.word	0x08003329
 80032fc:	08003329 	.word	0x08003329
 8003300:	0800333d 	.word	0x0800333d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3304      	adds	r3, #4
 8003308:	2101      	movs	r1, #1
 800330a:	4618      	mov	r0, r3
 800330c:	f001 fc1e 	bl	8004b4c <RCCEx_PLL2_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003314:	e013      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3324      	adds	r3, #36	; 0x24
 800331a:	2101      	movs	r1, #1
 800331c:	4618      	mov	r0, r3
 800331e:	f001 fcc7 	bl	8004cb0 <RCCEx_PLL3_Config>
 8003322:	4603      	mov	r3, r0
 8003324:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003326:	e00a      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	75fb      	strb	r3, [r7, #23]
      break;
 800332c:	e007      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800332e:	bf00      	nop
 8003330:	58024400 	.word	0x58024400
 8003334:	58024800 	.word	0x58024800
 8003338:	00ffffcf 	.word	0x00ffffcf
      break;
 800333c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800333e:	7dfb      	ldrb	r3, [r7, #23]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d109      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003344:	4b96      	ldr	r3, [pc, #600]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003348:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003350:	4993      	ldr	r1, [pc, #588]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	654b      	str	r3, [r1, #84]	; 0x54
 8003356:	e001      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003358:	7dfb      	ldrb	r3, [r7, #23]
 800335a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d038      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336c:	2b05      	cmp	r3, #5
 800336e:	d821      	bhi.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003370:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003376:	bf00      	nop
 8003378:	080033bb 	.word	0x080033bb
 800337c:	08003391 	.word	0x08003391
 8003380:	080033a3 	.word	0x080033a3
 8003384:	080033bb 	.word	0x080033bb
 8003388:	080033bb 	.word	0x080033bb
 800338c:	080033bb 	.word	0x080033bb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	2101      	movs	r1, #1
 8003396:	4618      	mov	r0, r3
 8003398:	f001 fbd8 	bl	8004b4c <RCCEx_PLL2_Config>
 800339c:	4603      	mov	r3, r0
 800339e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80033a0:	e00c      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3324      	adds	r3, #36	; 0x24
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f001 fc81 	bl	8004cb0 <RCCEx_PLL3_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80033b2:	e003      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	75fb      	strb	r3, [r7, #23]
      break;
 80033b8:	e000      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80033ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80033c2:	4b77      	ldr	r3, [pc, #476]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c6:	f023 0207 	bic.w	r2, r3, #7
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ce:	4974      	ldr	r1, [pc, #464]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	654b      	str	r3, [r1, #84]	; 0x54
 80033d4:	e001      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
 80033d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d03a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	2b05      	cmp	r3, #5
 80033ee:	d821      	bhi.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	0800343b 	.word	0x0800343b
 80033fc:	08003411 	.word	0x08003411
 8003400:	08003423 	.word	0x08003423
 8003404:	0800343b 	.word	0x0800343b
 8003408:	0800343b 	.word	0x0800343b
 800340c:	0800343b 	.word	0x0800343b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3304      	adds	r3, #4
 8003414:	2101      	movs	r1, #1
 8003416:	4618      	mov	r0, r3
 8003418:	f001 fb98 	bl	8004b4c <RCCEx_PLL2_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003420:	e00c      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3324      	adds	r3, #36	; 0x24
 8003426:	2101      	movs	r1, #1
 8003428:	4618      	mov	r0, r3
 800342a:	f001 fc41 	bl	8004cb0 <RCCEx_PLL3_Config>
 800342e:	4603      	mov	r3, r0
 8003430:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003432:	e003      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	75fb      	strb	r3, [r7, #23]
      break;
 8003438:	e000      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800343a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003442:	4b57      	ldr	r3, [pc, #348]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	f023 0207 	bic.w	r2, r3, #7
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003450:	4953      	ldr	r1, [pc, #332]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003452:	4313      	orrs	r3, r2
 8003454:	658b      	str	r3, [r1, #88]	; 0x58
 8003456:	e001      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003458:	7dfb      	ldrb	r3, [r7, #23]
 800345a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b00      	cmp	r3, #0
 8003466:	d04b      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800346e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003472:	d02e      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003478:	d828      	bhi.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800347a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347e:	d02a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003484:	d822      	bhi.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003486:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800348a:	d026      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800348c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003490:	d81c      	bhi.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003496:	d010      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800349c:	d816      	bhi.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d01d      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80034a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034a6:	d111      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3304      	adds	r3, #4
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 fb4c 	bl	8004b4c <RCCEx_PLL2_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80034b8:	e012      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3324      	adds	r3, #36	; 0x24
 80034be:	2102      	movs	r1, #2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 fbf5 	bl	8004cb0 <RCCEx_PLL3_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80034ca:	e009      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	75fb      	strb	r3, [r7, #23]
      break;
 80034d0:	e006      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80034d2:	bf00      	nop
 80034d4:	e004      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80034d6:	bf00      	nop
 80034d8:	e002      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80034da:	bf00      	nop
 80034dc:	e000      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80034de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e0:	7dfb      	ldrb	r3, [r7, #23]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10a      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034e6:	4b2e      	ldr	r3, [pc, #184]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80034e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f4:	492a      	ldr	r1, [pc, #168]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	654b      	str	r3, [r1, #84]	; 0x54
 80034fa:	e001      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d04d      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003512:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003516:	d02e      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003518:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800351c:	d828      	bhi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800351e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003522:	d02a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003528:	d822      	bhi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800352a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800352e:	d026      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003530:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003534:	d81c      	bhi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800353a:	d010      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800353c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003540:	d816      	bhi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d01d      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354a:	d111      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3304      	adds	r3, #4
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f001 fafa 	bl	8004b4c <RCCEx_PLL2_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800355c:	e012      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3324      	adds	r3, #36	; 0x24
 8003562:	2102      	movs	r1, #2
 8003564:	4618      	mov	r0, r3
 8003566:	f001 fba3 	bl	8004cb0 <RCCEx_PLL3_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800356e:	e009      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	75fb      	strb	r3, [r7, #23]
      break;
 8003574:	e006      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003576:	bf00      	nop
 8003578:	e004      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800357a:	bf00      	nop
 800357c:	e002      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800357e:	bf00      	nop
 8003580:	e000      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10c      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800358c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003598:	4901      	ldr	r1, [pc, #4]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800359a:	4313      	orrs	r3, r2
 800359c:	658b      	str	r3, [r1, #88]	; 0x58
 800359e:	e003      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80035a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
 80035a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d04b      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80035be:	d02e      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80035c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80035c4:	d828      	bhi.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80035c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ca:	d02a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80035cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d0:	d822      	bhi.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80035d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035d6:	d026      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80035d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035dc:	d81c      	bhi.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80035de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035e2:	d010      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80035e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035e8:	d816      	bhi.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d01d      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80035ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f2:	d111      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3304      	adds	r3, #4
 80035f8:	2100      	movs	r1, #0
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 faa6 	bl	8004b4c <RCCEx_PLL2_Config>
 8003600:	4603      	mov	r3, r0
 8003602:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003604:	e012      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3324      	adds	r3, #36	; 0x24
 800360a:	2102      	movs	r1, #2
 800360c:	4618      	mov	r0, r3
 800360e:	f001 fb4f 	bl	8004cb0 <RCCEx_PLL3_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003616:	e009      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	75fb      	strb	r3, [r7, #23]
      break;
 800361c:	e006      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800361e:	bf00      	nop
 8003620:	e004      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003622:	bf00      	nop
 8003624:	e002      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003626:	bf00      	nop
 8003628:	e000      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800362a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800362c:	7dfb      	ldrb	r3, [r7, #23]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003632:	4b9d      	ldr	r3, [pc, #628]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003640:	4999      	ldr	r1, [pc, #612]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003642:	4313      	orrs	r3, r2
 8003644:	658b      	str	r3, [r1, #88]	; 0x58
 8003646:	e001      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003648:	7dfb      	ldrb	r3, [r7, #23]
 800364a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800365e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003662:	d10a      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3324      	adds	r3, #36	; 0x24
 8003668:	2102      	movs	r1, #2
 800366a:	4618      	mov	r0, r3
 800366c:	f001 fb20 	bl	8004cb0 <RCCEx_PLL3_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800367a:	4b8b      	ldr	r3, [pc, #556]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800367c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003688:	4987      	ldr	r1, [pc, #540]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800368a:	4313      	orrs	r3, r2
 800368c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a4:	d10a      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3324      	adds	r3, #36	; 0x24
 80036aa:	2102      	movs	r1, #2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 faff 	bl	8004cb0 <RCCEx_PLL3_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036bc:	4b7a      	ldr	r3, [pc, #488]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ca:	4977      	ldr	r1, [pc, #476]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d034      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036e6:	d01d      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80036e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036ec:	d817      	bhi.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80036f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f6:	d009      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80036f8:	e011      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3304      	adds	r3, #4
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f001 fa23 	bl	8004b4c <RCCEx_PLL2_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800370a:	e00c      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3324      	adds	r3, #36	; 0x24
 8003710:	2102      	movs	r1, #2
 8003712:	4618      	mov	r0, r3
 8003714:	f001 facc 	bl	8004cb0 <RCCEx_PLL3_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800371c:	e003      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	75fb      	strb	r3, [r7, #23]
      break;
 8003722:	e000      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003724:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003726:	7dfb      	ldrb	r3, [r7, #23]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10a      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800372c:	4b5e      	ldr	r3, [pc, #376]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800373a:	495b      	ldr	r1, [pc, #364]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800373c:	4313      	orrs	r3, r2
 800373e:	658b      	str	r3, [r1, #88]	; 0x58
 8003740:	e001      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d033      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003758:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800375c:	d01c      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800375e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003762:	d816      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003768:	d003      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800376a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800376e:	d007      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003770:	e00f      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003772:	4b4d      	ldr	r3, [pc, #308]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	4a4c      	ldr	r2, [pc, #304]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800377e:	e00c      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3324      	adds	r3, #36	; 0x24
 8003784:	2101      	movs	r1, #1
 8003786:	4618      	mov	r0, r3
 8003788:	f001 fa92 	bl	8004cb0 <RCCEx_PLL3_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003790:	e003      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
      break;
 8003796:	e000      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800379a:	7dfb      	ldrb	r3, [r7, #23]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037a0:	4b41      	ldr	r3, [pc, #260]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ae:	493e      	ldr	r1, [pc, #248]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	654b      	str	r3, [r1, #84]	; 0x54
 80037b4:	e001      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b6:	7dfb      	ldrb	r3, [r7, #23]
 80037b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d029      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80037ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d2:	d007      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80037d4:	e00f      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d6:	4b34      	ldr	r3, [pc, #208]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	4a33      	ldr	r2, [pc, #204]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80037e2:	e00b      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	2102      	movs	r1, #2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 f9ae 	bl	8004b4c <RCCEx_PLL2_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80037f4:	e002      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	75fb      	strb	r3, [r7, #23]
      break;
 80037fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003802:	4b29      	ldr	r3, [pc, #164]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003806:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380e:	4926      	ldr	r1, [pc, #152]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003810:	4313      	orrs	r3, r2
 8003812:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003814:	e001      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003816:	7dfb      	ldrb	r3, [r7, #23]
 8003818:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3324      	adds	r3, #36	; 0x24
 800382a:	2102      	movs	r1, #2
 800382c:	4618      	mov	r0, r3
 800382e:	f001 fa3f 	bl	8004cb0 <RCCEx_PLL3_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d033      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800384c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003850:	d017      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003852:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003856:	d811      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800385c:	d013      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800385e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003862:	d80b      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d010      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800386c:	d106      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800386e:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	4a0d      	ldr	r2, [pc, #52]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003878:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800387a:	e007      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	75fb      	strb	r3, [r7, #23]
      break;
 8003880:	e004      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003882:	bf00      	nop
 8003884:	e002      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003886:	bf00      	nop
 8003888:	e000      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800388a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800388c:	7dfb      	ldrb	r3, [r7, #23]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10c      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800389e:	4902      	ldr	r1, [pc, #8]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	654b      	str	r3, [r1, #84]	; 0x54
 80038a4:	e004      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80038a6:	bf00      	nop
 80038a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038bc:	4b31      	ldr	r3, [pc, #196]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c8:	492e      	ldr	r1, [pc, #184]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80038da:	4b2a      	ldr	r3, [pc, #168]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038e8:	4926      	ldr	r1, [pc, #152]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038fa:	4b22      	ldr	r3, [pc, #136]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003906:	491f      	ldr	r1, [pc, #124]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003908:	4313      	orrs	r3, r2
 800390a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00d      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003918:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	4a19      	ldr	r2, [pc, #100]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800391e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003922:	6113      	str	r3, [r2, #16]
 8003924:	4b17      	ldr	r3, [pc, #92]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800392e:	4915      	ldr	r1, [pc, #84]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003930:	4313      	orrs	r3, r2
 8003932:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	da08      	bge.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800393c:	4b11      	ldr	r3, [pc, #68]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800393e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003940:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003948:	490e      	ldr	r1, [pc, #56]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800394a:	4313      	orrs	r3, r2
 800394c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	4906      	ldr	r1, [pc, #24]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800396a:	4313      	orrs	r3, r2
 800396c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800396e:	7dbb      	ldrb	r3, [r7, #22]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e000      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	58024400 	.word	0x58024400

08003988 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b090      	sub	sp, #64	; 0x40
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003996:	f040 8095 	bne.w	8003ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800399a:	4b97      	ldr	r3, [pc, #604]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800399c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	f200 8088 	bhi.w	8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039c9 	.word	0x080039c9
 80039b8:	080039f1 	.word	0x080039f1
 80039bc:	08003a19 	.word	0x08003a19
 80039c0:	08003ab5 	.word	0x08003ab5
 80039c4:	08003a41 	.word	0x08003a41
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80039c8:	4b8b      	ldr	r3, [pc, #556]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d4:	d108      	bne.n	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80039d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 ff64 	bl	80048a8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80039e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80039e4:	f000 bc94 	b.w	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80039ec:	f000 bc90 	b.w	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80039f0:	4b81      	ldr	r3, [pc, #516]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039fc:	d108      	bne.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039fe:	f107 0318 	add.w	r3, r7, #24
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fca8 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003a0c:	f000 bc80 	b.w	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a14:	f000 bc7c 	b.w	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003a18:	4b77      	ldr	r3, [pc, #476]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a24:	d108      	bne.n	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a26:	f107 030c 	add.w	r3, r7, #12
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fde8 	bl	8004600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003a34:	f000 bc6c 	b.w	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a3c:	f000 bc68 	b.w	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003a40:	4b6d      	ldr	r3, [pc, #436]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a48:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003a4a:	4b6b      	ldr	r3, [pc, #428]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8003a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a5c:	4b66      	ldr	r3, [pc, #408]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	08db      	lsrs	r3, r3, #3
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	4a65      	ldr	r2, [pc, #404]	; (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6e:	e01f      	b.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003a70:	4b61      	ldr	r3, [pc, #388]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a7c:	d106      	bne.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a84:	d102      	bne.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003a86:	4b5e      	ldr	r3, [pc, #376]	; (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003a88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a8a:	e011      	b.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003a8c:	4b5a      	ldr	r3, [pc, #360]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a98:	d106      	bne.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa0:	d102      	bne.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003aa2:	4b58      	ldr	r3, [pc, #352]	; (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa6:	e003      	b.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003aac:	f000 bc30 	b.w	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003ab0:	f000 bc2e 	b.w	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003ab4:	4b54      	ldr	r3, [pc, #336]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8003ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003ab8:	f000 bc2a 	b.w	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003ac0:	f000 bc26 	b.w	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aca:	f040 809f 	bne.w	8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8003ace:	4b4a      	ldr	r3, [pc, #296]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ade:	d04d      	beq.n	8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae6:	f200 8084 	bhi.w	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	2bc0      	cmp	r3, #192	; 0xc0
 8003aee:	d07d      	beq.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	2bc0      	cmp	r3, #192	; 0xc0
 8003af4:	d87d      	bhi.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	2b80      	cmp	r3, #128	; 0x80
 8003afa:	d02d      	beq.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	2b80      	cmp	r3, #128	; 0x80
 8003b00:	d877      	bhi.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	2b40      	cmp	r3, #64	; 0x40
 8003b0c:	d012      	beq.n	8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8003b0e:	e070      	b.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003b10:	4b39      	ldr	r3, [pc, #228]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fec0 	bl	80048a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b2c:	e3f0      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b32:	e3ed      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003b34:	4b30      	ldr	r3, [pc, #192]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b40:	d107      	bne.n	8003b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b42:	f107 0318 	add.w	r3, r7, #24
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fc06 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b50:	e3de      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b56:	e3db      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003b58:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b64:	d107      	bne.n	8003b76 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b66:	f107 030c 	add.w	r3, r7, #12
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fd48 	bl	8004600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b74:	e3cc      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b7a:	e3c9      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003b7c:	4b1e      	ldr	r3, [pc, #120]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003b86:	4b1c      	ldr	r3, [pc, #112]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d10c      	bne.n	8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8003b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b98:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	08db      	lsrs	r3, r3, #3
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	4a16      	ldr	r2, [pc, #88]	; (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003baa:	e01e      	b.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003bac:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb8:	d106      	bne.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8003bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bc0:	d102      	bne.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003bc2:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc6:	e010      	b.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bd4:	d106      	bne.n	8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bdc:	d102      	bne.n	8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be2:	e002      	b.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003be8:	e392      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003bea:	e391      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8003bee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003bf0:	e38e      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003bf6:	e38b      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003bf8:	58024400 	.word	0x58024400
 8003bfc:	03d09000 	.word	0x03d09000
 8003c00:	003d0900 	.word	0x003d0900
 8003c04:	0112a880 	.word	0x0112a880
 8003c08:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c12:	f040 809c 	bne.w	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8003c16:	4b9d      	ldr	r3, [pc, #628]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8003c1e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c26:	d054      	beq.n	8003cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c2e:	f200 808b 	bhi.w	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c38:	f000 8083 	beq.w	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c42:	f200 8081 	bhi.w	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c4c:	d02f      	beq.n	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c54:	d878      	bhi.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c62:	d012      	beq.n	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8003c64:	e070      	b.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003c66:	4b89      	ldr	r3, [pc, #548]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c72:	d107      	bne.n	8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fe15 	bl	80048a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003c82:	e345      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c88:	e342      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003c8a:	4b80      	ldr	r3, [pc, #512]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c96:	d107      	bne.n	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c98:	f107 0318 	add.w	r3, r7, #24
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fb5b 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003ca6:	e333      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003cac:	e330      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003cae:	4b77      	ldr	r3, [pc, #476]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cba:	d107      	bne.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003cbc:	f107 030c 	add.w	r3, r7, #12
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fc9d 	bl	8004600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003cca:	e321      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003cd0:	e31e      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003cd2:	4b6e      	ldr	r3, [pc, #440]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cda:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003cdc:	4b6b      	ldr	r3, [pc, #428]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d10c      	bne.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8003ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003cee:	4b67      	ldr	r3, [pc, #412]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	08db      	lsrs	r3, r3, #3
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	4a65      	ldr	r2, [pc, #404]	; (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8003cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d00:	e01e      	b.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003d02:	4b62      	ldr	r3, [pc, #392]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0e:	d106      	bne.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8003d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d16:	d102      	bne.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003d18:	4b5e      	ldr	r3, [pc, #376]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8003d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d1c:	e010      	b.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003d1e:	4b5b      	ldr	r3, [pc, #364]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d2a:	d106      	bne.n	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8003d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d32:	d102      	bne.n	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003d34:	4b58      	ldr	r3, [pc, #352]	; (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d38:	e002      	b.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003d3e:	e2e7      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003d40:	e2e6      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003d42:	4b56      	ldr	r3, [pc, #344]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8003d44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d46:	e2e3      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d4c:	e2e0      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d54:	f040 80a7 	bne.w	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8003d58:	4b4c      	ldr	r3, [pc, #304]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003d60:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d68:	d055      	beq.n	8003e16 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d70:	f200 8096 	bhi.w	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d7a:	f000 8084 	beq.w	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d84:	f200 808c 	bhi.w	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d8e:	d030      	beq.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d96:	f200 8083 	bhi.w	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d004      	beq.n	8003daa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da6:	d012      	beq.n	8003dce <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8003da8:	e07a      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003daa:	4b38      	ldr	r3, [pc, #224]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fd73 	bl	80048a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003dc6:	e2a3      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003dcc:	e2a0      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003dce:	4b2f      	ldr	r3, [pc, #188]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dda:	d107      	bne.n	8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ddc:	f107 0318 	add.w	r3, r7, #24
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fab9 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8003dea:	e291      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003df0:	e28e      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003df2:	4b26      	ldr	r3, [pc, #152]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e00:	f107 030c 	add.w	r3, r7, #12
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fbfb 	bl	8004600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003e0e:	e27f      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e14:	e27c      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003e16:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e1e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003e20:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d10c      	bne.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8003e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e32:	4b16      	ldr	r3, [pc, #88]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	08db      	lsrs	r3, r3, #3
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8003e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e44:	e01e      	b.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003e46:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e52:	d106      	bne.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8003e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e5a:	d102      	bne.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003e5c:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8003e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e60:	e010      	b.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003e62:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e6e:	d106      	bne.n	8003e7e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8003e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e76:	d102      	bne.n	8003e7e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003e78:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8003e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e7c:	e002      	b.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003e82:	e245      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003e84:	e244      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8003e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e8a:	e241      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003e8c:	58024400 	.word	0x58024400
 8003e90:	03d09000 	.word	0x03d09000
 8003e94:	003d0900 	.word	0x003d0900
 8003e98:	0112a880 	.word	0x0112a880
 8003e9c:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003ea4:	e234      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eac:	f040 809c 	bne.w	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8003eb0:	4b9b      	ldr	r3, [pc, #620]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003eb8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec0:	d054      	beq.n	8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec8:	f200 808b 	bhi.w	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ece:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ed2:	f000 8083 	beq.w	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8003ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003edc:	f200 8081 	bhi.w	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee6:	d02f      	beq.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eee:	d878      	bhi.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d004      	beq.n	8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efc:	d012      	beq.n	8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8003efe:	e070      	b.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003f00:	4b87      	ldr	r3, [pc, #540]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fcc8 	bl	80048a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003f1c:	e1f8      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003f22:	e1f5      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003f24:	4b7e      	ldr	r3, [pc, #504]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f30:	d107      	bne.n	8003f42 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f32:	f107 0318 	add.w	r3, r7, #24
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fa0e 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003f40:	e1e6      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003f46:	e1e3      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003f48:	4b75      	ldr	r3, [pc, #468]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f54:	d107      	bne.n	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f56:	f107 030c 	add.w	r3, r7, #12
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fb50 	bl	8004600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003f64:	e1d4      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003f6a:	e1d1      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003f6c:	4b6c      	ldr	r3, [pc, #432]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003f76:	4b6a      	ldr	r3, [pc, #424]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d109      	bne.n	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f88:	4b65      	ldr	r3, [pc, #404]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	08db      	lsrs	r3, r3, #3
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	4a64      	ldr	r2, [pc, #400]	; (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8003f94:	fa22 f303 	lsr.w	r3, r2, r3
 8003f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f9a:	e01e      	b.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003f9c:	4b60      	ldr	r3, [pc, #384]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa8:	d106      	bne.n	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8003faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fb0:	d102      	bne.n	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003fb2:	4b5d      	ldr	r3, [pc, #372]	; (8004128 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8003fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fb6:	e010      	b.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003fb8:	4b59      	ldr	r3, [pc, #356]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fc4:	d106      	bne.n	8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fcc:	d102      	bne.n	8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003fce:	4b57      	ldr	r3, [pc, #348]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8003fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fd2:	e002      	b.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003fd8:	e19a      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003fda:	e199      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003fdc:	4b54      	ldr	r3, [pc, #336]	; (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003fde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003fe0:	e196      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003fe6:	e193      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fee:	d173      	bne.n	80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8003ff0:	4b4b      	ldr	r3, [pc, #300]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ff8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004000:	d02f      	beq.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8004002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004008:	d863      	bhi.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800400a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8004010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004016:	d012      	beq.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8004018:	e05b      	b.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800401a:	4b41      	ldr	r3, [pc, #260]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004026:	d107      	bne.n	8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004028:	f107 0318 	add.w	r3, r7, #24
 800402c:	4618      	mov	r0, r3
 800402e:	f000 f993 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004036:	e16b      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800403c:	e168      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800403e:	4b38      	ldr	r3, [pc, #224]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800404a:	d107      	bne.n	800405c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800404c:	f107 030c 	add.w	r3, r7, #12
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fad5 	bl	8004600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800405a:	e159      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004060:	e156      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004062:	4b2f      	ldr	r3, [pc, #188]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004066:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800406a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800406c:	4b2c      	ldr	r3, [pc, #176]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b04      	cmp	r3, #4
 8004076:	d10c      	bne.n	8004092 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8004078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800407e:	4b28      	ldr	r3, [pc, #160]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	08db      	lsrs	r3, r3, #3
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	4a26      	ldr	r2, [pc, #152]	; (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800408a:	fa22 f303 	lsr.w	r3, r2, r3
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004090:	e01e      	b.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004092:	4b23      	ldr	r3, [pc, #140]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409e:	d106      	bne.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80040a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040a6:	d102      	bne.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80040a8:	4b1f      	ldr	r3, [pc, #124]	; (8004128 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80040aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040ac:	e010      	b.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80040ae:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ba:	d106      	bne.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80040bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c2:	d102      	bne.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c8:	e002      	b.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80040ce:	e11f      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80040d0:	e11e      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80040d6:	e11b      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040de:	d13e      	bne.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80040e0:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80040e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f6:	d01d      	beq.n	8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80040f8:	e02e      	b.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80040fa:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004106:	d107      	bne.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fbcb 	bl	80048a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004116:	e0fb      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004118:	2300      	movs	r3, #0
 800411a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800411c:	e0f8      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800411e:	bf00      	nop
 8004120:	58024400 	.word	0x58024400
 8004124:	03d09000 	.word	0x03d09000
 8004128:	003d0900 	.word	0x003d0900
 800412c:	0112a880 	.word	0x0112a880
 8004130:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004134:	4b79      	ldr	r3, [pc, #484]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800413c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004140:	d107      	bne.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004142:	f107 0318 	add.w	r3, r7, #24
 8004146:	4618      	mov	r0, r3
 8004148:	f000 f906 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004150:	e0de      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004156:	e0db      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800415c:	e0d8      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004164:	f040 8085 	bne.w	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004168:	4b6c      	ldr	r3, [pc, #432]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800416a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004170:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004178:	d06b      	beq.n	8004252 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004180:	d874      	bhi.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004188:	d056      	beq.n	8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800418a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004190:	d86c      	bhi.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004198:	d03b      	beq.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041a0:	d864      	bhi.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a8:	d021      	beq.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b0:	d85c      	bhi.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d004      	beq.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80041b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041be:	d004      	beq.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80041c0:	e054      	b.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80041c2:	f000 f8b3 	bl	800432c <HAL_RCCEx_GetD3PCLK1Freq>
 80041c6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80041c8:	e0a2      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80041ca:	4b54      	ldr	r3, [pc, #336]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041d6:	d107      	bne.n	80041e8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041d8:	f107 0318 	add.w	r3, r7, #24
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 f8bb 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80041e6:	e093      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80041ec:	e090      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80041ee:	4b4b      	ldr	r3, [pc, #300]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041fa:	d107      	bne.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041fc:	f107 030c 	add.w	r3, r7, #12
 8004200:	4618      	mov	r0, r3
 8004202:	f000 f9fd 	bl	8004600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800420a:	e081      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004210:	e07e      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004212:	4b42      	ldr	r3, [pc, #264]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b04      	cmp	r3, #4
 800421c:	d109      	bne.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800421e:	4b3f      	ldr	r3, [pc, #252]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	08db      	lsrs	r3, r3, #3
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	4a3d      	ldr	r2, [pc, #244]	; (8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800422a:	fa22 f303 	lsr.w	r3, r2, r3
 800422e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004230:	e06e      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004232:	2300      	movs	r3, #0
 8004234:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004236:	e06b      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004238:	4b38      	ldr	r3, [pc, #224]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004244:	d102      	bne.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8004246:	4b37      	ldr	r3, [pc, #220]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004248:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800424a:	e061      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004250:	e05e      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004252:	4b32      	ldr	r3, [pc, #200]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800425e:	d102      	bne.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8004260:	4b31      	ldr	r3, [pc, #196]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004262:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004264:	e054      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800426a:	e051      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004270:	e04e      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004278:	d148      	bne.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800427a:	4b28      	ldr	r3, [pc, #160]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800427c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004282:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800428a:	d02a      	beq.n	80042e2 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004292:	d838      	bhi.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8004294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004296:	2b00      	cmp	r3, #0
 8004298:	d004      	beq.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042a0:	d00d      	beq.n	80042be <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80042a2:	e030      	b.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80042a4:	4b1d      	ldr	r3, [pc, #116]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042b0:	d102      	bne.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 80042b2:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80042b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80042b6:	e02b      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80042bc:	e028      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80042be:	4b17      	ldr	r3, [pc, #92]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042ca:	d107      	bne.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80042cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fae9 	bl	80048a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80042da:	e019      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80042e0:	e016      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80042e2:	4b0e      	ldr	r3, [pc, #56]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ee:	d107      	bne.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042f0:	f107 0318 	add.w	r3, r7, #24
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 f82f 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80042fe:	e007      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004304:	e004      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800430a:	e001      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004312:	4618      	mov	r0, r3
 8004314:	3740      	adds	r7, #64	; 0x40
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	58024400 	.word	0x58024400
 8004320:	03d09000 	.word	0x03d09000
 8004324:	003d0900 	.word	0x003d0900
 8004328:	0112a880 	.word	0x0112a880

0800432c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004330:	f7fe fb88 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4904      	ldr	r1, [pc, #16]	; (8004354 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}
 8004350:	58024400 	.word	0x58024400
 8004354:	08007ebc 	.word	0x08007ebc

08004358 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	; 0x24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004360:	4ba1      	ldr	r3, [pc, #644]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	f003 0303 	and.w	r3, r3, #3
 8004368:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800436a:	4b9f      	ldr	r3, [pc, #636]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	0b1b      	lsrs	r3, r3, #12
 8004370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004374:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004376:	4b9c      	ldr	r3, [pc, #624]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004382:	4b99      	ldr	r3, [pc, #612]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004386:	08db      	lsrs	r3, r3, #3
 8004388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8111 	beq.w	80045c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	f000 8083 	beq.w	80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	f200 80a1 	bhi.w	80044f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d056      	beq.n	8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80043c2:	e099      	b.n	80044f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043c4:	4b88      	ldr	r3, [pc, #544]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d02d      	beq.n	800442c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043d0:	4b85      	ldr	r3, [pc, #532]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	08db      	lsrs	r3, r3, #3
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	4a84      	ldr	r2, [pc, #528]	; (80045ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
 80043e0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	ee07 3a90 	vmov	s15, r3
 80043e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fa:	4b7b      	ldr	r3, [pc, #492]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440a:	ed97 6a03 	vldr	s12, [r7, #12]
 800440e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800441a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800441e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004426:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800442a:	e087      	b.n	800453c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004436:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800443a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800443e:	4b6a      	ldr	r3, [pc, #424]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800444e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004452:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800445e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800446e:	e065      	b.n	800453c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800447e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004482:	4b59      	ldr	r3, [pc, #356]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800448a:	ee07 3a90 	vmov	s15, r3
 800448e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004492:	ed97 6a03 	vldr	s12, [r7, #12]
 8004496:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800449a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800449e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044b2:	e043      	b.n	800453c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80044c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044c6:	4b48      	ldr	r3, [pc, #288]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ce:	ee07 3a90 	vmov	s15, r3
 80044d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044f6:	e021      	b.n	800453c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004502:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800450a:	4b37      	ldr	r3, [pc, #220]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800451a:	ed97 6a03 	vldr	s12, [r7, #12]
 800451e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800452a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800452e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004536:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800453a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800453c:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	0a5b      	lsrs	r3, r3, #9
 8004542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004552:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004556:	edd7 6a07 	vldr	s13, [r7, #28]
 800455a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800455e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004562:	ee17 2a90 	vmov	r2, s15
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800456a:	4b1f      	ldr	r3, [pc, #124]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	0c1b      	lsrs	r3, r3, #16
 8004570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004574:	ee07 3a90 	vmov	s15, r3
 8004578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004580:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004584:	edd7 6a07 	vldr	s13, [r7, #28]
 8004588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800458c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004590:	ee17 2a90 	vmov	r2, s15
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	0e1b      	lsrs	r3, r3, #24
 800459e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045be:	ee17 2a90 	vmov	r2, s15
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80045c6:	e008      	b.n	80045da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	609a      	str	r2, [r3, #8]
}
 80045da:	bf00      	nop
 80045dc:	3724      	adds	r7, #36	; 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	58024400 	.word	0x58024400
 80045ec:	03d09000 	.word	0x03d09000
 80045f0:	46000000 	.word	0x46000000
 80045f4:	4c742400 	.word	0x4c742400
 80045f8:	4a742400 	.word	0x4a742400
 80045fc:	4b895440 	.word	0x4b895440

08004600 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004600:	b480      	push	{r7}
 8004602:	b089      	sub	sp, #36	; 0x24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004608:	4ba1      	ldr	r3, [pc, #644]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004612:	4b9f      	ldr	r3, [pc, #636]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	0d1b      	lsrs	r3, r3, #20
 8004618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800461c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800461e:	4b9c      	ldr	r3, [pc, #624]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	0a1b      	lsrs	r3, r3, #8
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800462a:	4b99      	ldr	r3, [pc, #612]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	08db      	lsrs	r3, r3, #3
 8004630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004642:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8111 	beq.w	8004870 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b02      	cmp	r3, #2
 8004652:	f000 8083 	beq.w	800475c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2b02      	cmp	r3, #2
 800465a:	f200 80a1 	bhi.w	80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d056      	beq.n	8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800466a:	e099      	b.n	80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800466c:	4b88      	ldr	r3, [pc, #544]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b00      	cmp	r3, #0
 8004676:	d02d      	beq.n	80046d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004678:	4b85      	ldr	r3, [pc, #532]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	08db      	lsrs	r3, r3, #3
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	4a84      	ldr	r2, [pc, #528]	; (8004894 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
 8004688:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	ee07 3a90 	vmov	s15, r3
 8004690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a2:	4b7b      	ldr	r3, [pc, #492]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80046d2:	e087      	b.n	80047e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800489c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80046e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e6:	4b6a      	ldr	r3, [pc, #424]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800470a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800470e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004712:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004716:	e065      	b.n	80047e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004722:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472a:	4b59      	ldr	r3, [pc, #356]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473a:	ed97 6a03 	vldr	s12, [r7, #12]
 800473e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800474e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004756:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800475a:	e043      	b.n	80047e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004766:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800476a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800476e:	4b48      	ldr	r3, [pc, #288]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004782:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800478a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800478e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800479e:	e021      	b.n	80047e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b2:	4b37      	ldr	r3, [pc, #220]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004898 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80047e4:	4b2a      	ldr	r3, [pc, #168]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	0a5b      	lsrs	r3, r3, #9
 80047ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800480a:	ee17 2a90 	vmov	r2, s15
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004812:	4b1f      	ldr	r3, [pc, #124]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	0c1b      	lsrs	r3, r3, #16
 8004818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800481c:	ee07 3a90 	vmov	s15, r3
 8004820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004824:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004828:	ee37 7a87 	vadd.f32	s14, s15, s14
 800482c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004838:	ee17 2a90 	vmov	r2, s15
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004840:	4b13      	ldr	r3, [pc, #76]	; (8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	0e1b      	lsrs	r3, r3, #24
 8004846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004852:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004856:	ee37 7a87 	vadd.f32	s14, s15, s14
 800485a:	edd7 6a07 	vldr	s13, [r7, #28]
 800485e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004866:	ee17 2a90 	vmov	r2, s15
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800486e:	e008      	b.n	8004882 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	609a      	str	r2, [r3, #8]
}
 8004882:	bf00      	nop
 8004884:	3724      	adds	r7, #36	; 0x24
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	58024400 	.word	0x58024400
 8004894:	03d09000 	.word	0x03d09000
 8004898:	46000000 	.word	0x46000000
 800489c:	4c742400 	.word	0x4c742400
 80048a0:	4a742400 	.word	0x4a742400
 80048a4:	4b895440 	.word	0x4b895440

080048a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	; 0x24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048b0:	4ba0      	ldr	r3, [pc, #640]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80048ba:	4b9e      	ldr	r3, [pc, #632]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048be:	091b      	lsrs	r3, r3, #4
 80048c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80048c6:	4b9b      	ldr	r3, [pc, #620]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80048d0:	4b98      	ldr	r3, [pc, #608]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80048d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d4:	08db      	lsrs	r3, r3, #3
 80048d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	fb02 f303 	mul.w	r3, r2, r3
 80048e0:	ee07 3a90 	vmov	s15, r3
 80048e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 8111 	beq.w	8004b16 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	f000 8083 	beq.w	8004a02 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	f200 80a1 	bhi.w	8004a46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d056      	beq.n	80049be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8004910:	e099      	b.n	8004a46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004912:	4b88      	ldr	r3, [pc, #544]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d02d      	beq.n	800497a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800491e:	4b85      	ldr	r3, [pc, #532]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	08db      	lsrs	r3, r3, #3
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	4a83      	ldr	r2, [pc, #524]	; (8004b38 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800492a:	fa22 f303 	lsr.w	r3, r2, r3
 800492e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004944:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004948:	4b7a      	ldr	r3, [pc, #488]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004950:	ee07 3a90 	vmov	s15, r3
 8004954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004958:	ed97 6a03 	vldr	s12, [r7, #12]
 800495c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004b3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004960:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004964:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004968:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800496c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004974:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004978:	e087      	b.n	8004a8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	ee07 3a90 	vmov	s15, r3
 8004980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004984:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004b40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004988:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800498c:	4b69      	ldr	r3, [pc, #420]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004994:	ee07 3a90 	vmov	s15, r3
 8004998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499c:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004b3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80049a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049bc:	e065      	b.n	8004a8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	ee07 3a90 	vmov	s15, r3
 80049c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004b44 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80049cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d0:	4b58      	ldr	r3, [pc, #352]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80049d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d8:	ee07 3a90 	vmov	s15, r3
 80049dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80049e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004b3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80049e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a00:	e043      	b.n	8004a8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	ee07 3a90 	vmov	s15, r3
 8004a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004b48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8004a10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a14:	4b47      	ldr	r3, [pc, #284]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1c:	ee07 3a90 	vmov	s15, r3
 8004a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a24:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a28:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004b3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004a2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a44:	e021      	b.n	8004a8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	ee07 3a90 	vmov	s15, r3
 8004a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a50:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8004b40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004a54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a58:	4b36      	ldr	r3, [pc, #216]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a60:	ee07 3a90 	vmov	s15, r3
 8004a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a68:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a6c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004b3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004a70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a88:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004a8a:	4b2a      	ldr	r3, [pc, #168]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	0a5b      	lsrs	r3, r3, #9
 8004a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a94:	ee07 3a90 	vmov	s15, r3
 8004a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ab0:	ee17 2a90 	vmov	r2, s15
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004ab8:	4b1e      	ldr	r3, [pc, #120]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	0c1b      	lsrs	r3, r3, #16
 8004abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ace:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ad2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ade:	ee17 2a90 	vmov	r2, s15
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	0e1b      	lsrs	r3, r3, #24
 8004aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004af0:	ee07 3a90 	vmov	s15, r3
 8004af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004afc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b00:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b0c:	ee17 2a90 	vmov	r2, s15
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004b14:	e008      	b.n	8004b28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	609a      	str	r2, [r3, #8]
}
 8004b28:	bf00      	nop
 8004b2a:	3724      	adds	r7, #36	; 0x24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	58024400 	.word	0x58024400
 8004b38:	03d09000 	.word	0x03d09000
 8004b3c:	46000000 	.word	0x46000000
 8004b40:	4c742400 	.word	0x4c742400
 8004b44:	4a742400 	.word	0x4a742400
 8004b48:	4b895440 	.word	0x4b895440

08004b4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b5a:	4b53      	ldr	r3, [pc, #332]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d101      	bne.n	8004b6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e099      	b.n	8004c9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b6a:	4b4f      	ldr	r3, [pc, #316]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a4e      	ldr	r2, [pc, #312]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004b70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b76:	f7fc fb0b 	bl	8001190 <HAL_GetTick>
 8004b7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b7c:	e008      	b.n	8004b90 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b7e:	f7fc fb07 	bl	8001190 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e086      	b.n	8004c9e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b90:	4b45      	ldr	r3, [pc, #276]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f0      	bne.n	8004b7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b9c:	4b42      	ldr	r3, [pc, #264]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	031b      	lsls	r3, r3, #12
 8004baa:	493f      	ldr	r1, [pc, #252]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	628b      	str	r3, [r1, #40]	; 0x28
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	025b      	lsls	r3, r3, #9
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	041b      	lsls	r3, r3, #16
 8004bce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	061b      	lsls	r3, r3, #24
 8004bdc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004be0:	4931      	ldr	r1, [pc, #196]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004be6:	4b30      	ldr	r3, [pc, #192]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	492d      	ldr	r1, [pc, #180]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004bf8:	4b2b      	ldr	r3, [pc, #172]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	f023 0220 	bic.w	r2, r3, #32
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	4928      	ldr	r1, [pc, #160]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c0a:	4b27      	ldr	r3, [pc, #156]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	4a26      	ldr	r2, [pc, #152]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c10:	f023 0310 	bic.w	r3, r3, #16
 8004c14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c16:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c1a:	4b24      	ldr	r3, [pc, #144]	; (8004cac <RCCEx_PLL2_Config+0x160>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	69d2      	ldr	r2, [r2, #28]
 8004c22:	00d2      	lsls	r2, r2, #3
 8004c24:	4920      	ldr	r1, [pc, #128]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c2a:	4b1f      	ldr	r3, [pc, #124]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c30:	f043 0310 	orr.w	r3, r3, #16
 8004c34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d106      	bne.n	8004c4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	4a19      	ldr	r2, [pc, #100]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c48:	e00f      	b.n	8004c6a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d106      	bne.n	8004c5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c50:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	4a14      	ldr	r2, [pc, #80]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c5c:	e005      	b.n	8004c6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c5e:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	4a11      	ldr	r2, [pc, #68]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c76:	f7fc fa8b 	bl	8001190 <HAL_GetTick>
 8004c7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c7c:	e008      	b.n	8004c90 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c7e:	f7fc fa87 	bl	8001190 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e006      	b.n	8004c9e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	58024400 	.word	0x58024400
 8004cac:	ffff0007 	.word	0xffff0007

08004cb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cbe:	4b53      	ldr	r3, [pc, #332]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d101      	bne.n	8004cce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e099      	b.n	8004e02 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004cce:	4b4f      	ldr	r3, [pc, #316]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a4e      	ldr	r2, [pc, #312]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cda:	f7fc fa59 	bl	8001190 <HAL_GetTick>
 8004cde:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ce0:	e008      	b.n	8004cf4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004ce2:	f7fc fa55 	bl	8001190 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e086      	b.n	8004e02 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cf4:	4b45      	ldr	r3, [pc, #276]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f0      	bne.n	8004ce2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d00:	4b42      	ldr	r3, [pc, #264]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	051b      	lsls	r3, r3, #20
 8004d0e:	493f      	ldr	r1, [pc, #252]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	628b      	str	r3, [r1, #40]	; 0x28
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	025b      	lsls	r3, r3, #9
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	041b      	lsls	r3, r3, #16
 8004d32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	061b      	lsls	r3, r3, #24
 8004d40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d44:	4931      	ldr	r1, [pc, #196]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d4a:	4b30      	ldr	r3, [pc, #192]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	492d      	ldr	r1, [pc, #180]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d5c:	4b2b      	ldr	r3, [pc, #172]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	4928      	ldr	r1, [pc, #160]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d6e:	4b27      	ldr	r3, [pc, #156]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	4a26      	ldr	r2, [pc, #152]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d7a:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d7e:	4b24      	ldr	r3, [pc, #144]	; (8004e10 <RCCEx_PLL3_Config+0x160>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	69d2      	ldr	r2, [r2, #28]
 8004d86:	00d2      	lsls	r2, r2, #3
 8004d88:	4920      	ldr	r1, [pc, #128]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d8e:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	4a1e      	ldr	r2, [pc, #120]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d106      	bne.n	8004dae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004da0:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	4a19      	ldr	r2, [pc, #100]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004da6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004daa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004dac:	e00f      	b.n	8004dce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d106      	bne.n	8004dc2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004db4:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004dba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004dc0:	e005      	b.n	8004dce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004dc2:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	4a11      	ldr	r2, [pc, #68]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004dc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dcc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004dce:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a0e      	ldr	r2, [pc, #56]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dda:	f7fc f9d9 	bl	8001190 <HAL_GetTick>
 8004dde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004de0:	e008      	b.n	8004df4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004de2:	f7fc f9d5 	bl	8001190 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e006      	b.n	8004e02 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004df4:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f0      	beq.n	8004de2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	58024400 	.word	0x58024400
 8004e10:	ffff0007 	.word	0xffff0007

08004e14 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08a      	sub	sp, #40	; 0x28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e075      	b.n	8004f12 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d105      	bne.n	8004e3e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7fb fec1 	bl	8000bc0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2203      	movs	r2, #3
 8004e42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f868 	bl	8004f1c <HAL_SD_InitCard>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e05d      	b.n	8004f12 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8004e56:	f107 0308 	add.w	r3, r7, #8
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fa95 	bl	800538c <HAL_SD_GetCardStatus>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e052      	b.n	8004f12 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8004e6c:	7e3b      	ldrb	r3, [r7, #24]
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8004e72:	7e7b      	ldrb	r3, [r7, #25]
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d10a      	bne.n	8004e96 <HAL_SD_Init+0x82>
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d102      	bne.n	8004e8c <HAL_SD_Init+0x78>
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e92:	659a      	str	r2, [r3, #88]	; 0x58
 8004e94:	e00b      	b.n	8004eae <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d104      	bne.n	8004ea8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ea4:	659a      	str	r2, [r3, #88]	; 0x58
 8004ea6:	e002      	b.n	8004eae <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fb1f 	bl	80054f8 <HAL_SD_ConfigWideBusOperation>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e026      	b.n	8004f12 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8004ec4:	f7fc f964 	bl	8001190 <HAL_GetTick>
 8004ec8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004eca:	e011      	b.n	8004ef0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004ecc:	f7fc f960 	bl	8001190 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eda:	d109      	bne.n	8004ef0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ee2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e010      	b.n	8004f12 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fc11 	bl	8005718 <HAL_SD_GetCardState>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d1e7      	bne.n	8004ecc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3728      	adds	r7, #40	; 0x28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004f1c:	b590      	push	{r4, r7, lr}
 8004f1e:	b08d      	sub	sp, #52	; 0x34
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004f30:	2300      	movs	r3, #0
 8004f32:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004f34:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004f38:	f7fe fd26 	bl	8003988 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f3c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d109      	bne.n	8004f58 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f52:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e06a      	b.n	800502e <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	0a1b      	lsrs	r3, r3, #8
 8004f5c:	4a36      	ldr	r2, [pc, #216]	; (8005038 <HAL_SD_InitCard+0x11c>)
 8004f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f62:	091b      	lsrs	r3, r3, #4
 8004f64:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681c      	ldr	r4, [r3, #0]
 8004f6a:	466a      	mov	r2, sp
 8004f6c:	f107 0318 	add.w	r3, r7, #24
 8004f70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f74:	e882 0003 	stmia.w	r2, {r0, r1}
 8004f78:	f107 030c 	add.w	r3, r7, #12
 8004f7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f001 ffb8 	bl	8006ef4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f001 ffea 	bl	8006f62 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8004f9a:	4a28      	ldr	r2, [pc, #160]	; (800503c <HAL_SD_InitCard+0x120>)
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fc f8ff 	bl	80011a8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fc90 	bl	80058d0 <SD_PowerON>
 8004fb0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00b      	beq.n	8004fd0 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e02e      	b.n	800502e <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fbc1 	bl	8005758 <SD_InitCard>
 8004fd6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00b      	beq.n	8004ff6 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e01b      	b.n	800502e <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ffe:	4618      	mov	r0, r3
 8005000:	f002 f844 	bl	800708c <SDMMC_CmdBlockLength>
 8005004:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00f      	beq.n	800502c <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a0b      	ldr	r2, [pc, #44]	; (8005040 <HAL_SD_InitCard+0x124>)
 8005012:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e000      	b.n	800502e <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	372c      	adds	r7, #44	; 0x2c
 8005032:	46bd      	mov	sp, r7
 8005034:	bd90      	pop	{r4, r7, pc}
 8005036:	bf00      	nop
 8005038:	014f8b59 	.word	0x014f8b59
 800503c:	00012110 	.word	0x00012110
 8005040:	1fe00fff 	.word	0x1fe00fff

08005044 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005052:	0f9b      	lsrs	r3, r3, #30
 8005054:	b2da      	uxtb	r2, r3
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505e:	0e9b      	lsrs	r3, r3, #26
 8005060:	b2db      	uxtb	r3, r3
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	b2da      	uxtb	r2, r3
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005070:	0e1b      	lsrs	r3, r3, #24
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	b2da      	uxtb	r2, r3
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005082:	0c1b      	lsrs	r3, r3, #16
 8005084:	b2da      	uxtb	r2, r3
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508e:	0a1b      	lsrs	r3, r3, #8
 8005090:	b2da      	uxtb	r2, r3
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509a:	b2da      	uxtb	r2, r3
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a4:	0d1b      	lsrs	r3, r3, #20
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b0:	0c1b      	lsrs	r3, r3, #16
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c2:	0bdb      	lsrs	r3, r3, #15
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d4:	0b9b      	lsrs	r3, r3, #14
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e6:	0b5b      	lsrs	r3, r3, #13
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f8:	0b1b      	lsrs	r3, r3, #12
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	b2da      	uxtb	r2, r3
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2200      	movs	r2, #0
 800510a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	2b00      	cmp	r3, #0
 8005112:	d163      	bne.n	80051dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005118:	009a      	lsls	r2, r3, #2
 800511a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800511e:	4013      	ands	r3, r2
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005124:	0f92      	lsrs	r2, r2, #30
 8005126:	431a      	orrs	r2, r3
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005130:	0edb      	lsrs	r3, r3, #27
 8005132:	b2db      	uxtb	r3, r3
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	b2da      	uxtb	r2, r3
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005142:	0e1b      	lsrs	r3, r3, #24
 8005144:	b2db      	uxtb	r3, r3
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	b2da      	uxtb	r2, r3
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005154:	0d5b      	lsrs	r3, r3, #21
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	b2da      	uxtb	r2, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005166:	0c9b      	lsrs	r3, r3, #18
 8005168:	b2db      	uxtb	r3, r3
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	b2da      	uxtb	r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005178:	0bdb      	lsrs	r3, r3, #15
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	b2da      	uxtb	r2, r3
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	7e1b      	ldrb	r3, [r3, #24]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	3302      	adds	r3, #2
 800519c:	2201      	movs	r2, #1
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80051a6:	fb03 f202 	mul.w	r2, r3, r2
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	7a1b      	ldrb	r3, [r3, #8]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	2201      	movs	r2, #1
 80051ba:	409a      	lsls	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80051c8:	0a52      	lsrs	r2, r2, #9
 80051ca:	fb03 f202 	mul.w	r2, r3, r2
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051d8:	655a      	str	r2, [r3, #84]	; 0x54
 80051da:	e031      	b.n	8005240 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d11d      	bne.n	8005220 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e8:	041b      	lsls	r3, r3, #16
 80051ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051f2:	0c1b      	lsrs	r3, r3, #16
 80051f4:	431a      	orrs	r2, r3
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	3301      	adds	r3, #1
 8005200:	029a      	lsls	r2, r3, #10
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005214:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	655a      	str	r2, [r3, #84]	; 0x54
 800521e:	e00f      	b.n	8005240 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a58      	ldr	r2, [pc, #352]	; (8005388 <HAL_SD_GetCardCSD+0x344>)
 8005226:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e09d      	b.n	800537c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005244:	0b9b      	lsrs	r3, r3, #14
 8005246:	b2db      	uxtb	r3, r3
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	b2da      	uxtb	r2, r3
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005256:	09db      	lsrs	r3, r3, #7
 8005258:	b2db      	uxtb	r3, r3
 800525a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800525e:	b2da      	uxtb	r2, r3
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005268:	b2db      	uxtb	r3, r3
 800526a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800526e:	b2da      	uxtb	r2, r3
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005278:	0fdb      	lsrs	r3, r3, #31
 800527a:	b2da      	uxtb	r2, r3
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005284:	0f5b      	lsrs	r3, r3, #29
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	b2da      	uxtb	r2, r3
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005296:	0e9b      	lsrs	r3, r3, #26
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052a8:	0d9b      	lsrs	r3, r3, #22
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ba:	0d5b      	lsrs	r3, r3, #21
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052d6:	0c1b      	lsrs	r3, r3, #16
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ea:	0bdb      	lsrs	r3, r3, #15
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052fe:	0b9b      	lsrs	r3, r3, #14
 8005300:	b2db      	uxtb	r3, r3
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	b2da      	uxtb	r2, r3
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005312:	0b5b      	lsrs	r3, r3, #13
 8005314:	b2db      	uxtb	r3, r3
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	b2da      	uxtb	r2, r3
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005326:	0b1b      	lsrs	r3, r3, #12
 8005328:	b2db      	uxtb	r3, r3
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	b2da      	uxtb	r2, r3
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800533a:	0a9b      	lsrs	r3, r3, #10
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	b2da      	uxtb	r2, r3
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	b2db      	uxtb	r3, r3
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	b2da      	uxtb	r2, r3
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005362:	085b      	lsrs	r3, r3, #1
 8005364:	b2db      	uxtb	r3, r3
 8005366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800536a:	b2da      	uxtb	r2, r3
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	1fe00fff 	.word	0x1fe00fff

0800538c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b094      	sub	sp, #80	; 0x50
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800539c:	f107 0308 	add.w	r3, r7, #8
 80053a0:	4619      	mov	r1, r3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fb1e 	bl	80059e4 <SD_SendSDStatus>
 80053a8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80053aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d011      	beq.n	80053d4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a4f      	ldr	r2, [pc, #316]	; (80054f4 <HAL_SD_GetCardStatus+0x168>)
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80053d2:	e070      	b.n	80054b6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	099b      	lsrs	r3, r3, #6
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	0a1b      	lsrs	r3, r3, #8
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	0e1b      	lsrs	r3, r3, #24
 8005404:	b29b      	uxth	r3, r3
 8005406:	4313      	orrs	r3, r2
 8005408:	b29a      	uxth	r2, r3
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	061a      	lsls	r2, r3, #24
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800541a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	0a1b      	lsrs	r3, r3, #8
 8005420:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005424:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	0e1b      	lsrs	r3, r3, #24
 800542a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	b2da      	uxtb	r2, r3
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	0a1b      	lsrs	r3, r3, #8
 800543c:	b2da      	uxtb	r2, r3
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	0d1b      	lsrs	r3, r3, #20
 8005446:	b2db      	uxtb	r3, r3
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	b2da      	uxtb	r2, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	0c1b      	lsrs	r3, r3, #16
 8005456:	b29b      	uxth	r3, r3
 8005458:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800545c:	b29a      	uxth	r2, r3
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	b29b      	uxth	r3, r3
 8005462:	b2db      	uxtb	r3, r3
 8005464:	b29b      	uxth	r3, r3
 8005466:	4313      	orrs	r3, r2
 8005468:	b29a      	uxth	r2, r3
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	0a9b      	lsrs	r3, r3, #10
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005478:	b2da      	uxtb	r2, r3
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	0a1b      	lsrs	r3, r3, #8
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	b2da      	uxtb	r2, r3
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	b2db      	uxtb	r3, r3
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	b2da      	uxtb	r2, r3
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	0e1b      	lsrs	r3, r3, #24
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 fde4 	bl	800708c <SDMMC_CmdBlockLength>
 80054c4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80054c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00d      	beq.n	80054e8 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a08      	ldr	r2, [pc, #32]	; (80054f4 <HAL_SD_GetCardStatus+0x168>)
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054d8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80054e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3750      	adds	r7, #80	; 0x50
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	1fe00fff 	.word	0x1fe00fff

080054f8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80054f8:	b590      	push	{r4, r7, lr}
 80054fa:	b08d      	sub	sp, #52	; 0x34
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2203      	movs	r2, #3
 800550c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	2b03      	cmp	r3, #3
 8005516:	d02e      	beq.n	8005576 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800551e:	d106      	bne.n	800552e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005524:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	635a      	str	r2, [r3, #52]	; 0x34
 800552c:	e029      	b.n	8005582 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005534:	d10a      	bne.n	800554c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fb4c 	bl	8005bd4 <SD_WideBus_Enable>
 800553c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	635a      	str	r2, [r3, #52]	; 0x34
 800554a:	e01a      	b.n	8005582 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10a      	bne.n	8005568 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fb89 	bl	8005c6a <SD_WideBus_Disable>
 8005558:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	635a      	str	r2, [r3, #52]	; 0x34
 8005566:	e00c      	b.n	8005582 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	635a      	str	r2, [r3, #52]	; 0x34
 8005574:	e005      	b.n	8005582 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005586:	2b00      	cmp	r3, #0
 8005588:	d007      	beq.n	800559a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a5e      	ldr	r2, [pc, #376]	; (8005708 <HAL_SD_ConfigWideBusOperation+0x210>)
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005598:	e094      	b.n	80056c4 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800559a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800559e:	f7fe f9f3 	bl	8003988 <HAL_RCCEx_GetPeriphCLKFreq>
 80055a2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 8083 	beq.w	80056b2 <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695a      	ldr	r2, [r3, #20]
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4950      	ldr	r1, [pc, #320]	; (800570c <HAL_SD_ConfigWideBusOperation+0x214>)
 80055ca:	fba1 1303 	umull	r1, r3, r1, r3
 80055ce:	0e1b      	lsrs	r3, r3, #24
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d303      	bcc.n	80055dc <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	61bb      	str	r3, [r7, #24]
 80055da:	e05a      	b.n	8005692 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e4:	d103      	bne.n	80055ee <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	61bb      	str	r3, [r7, #24]
 80055ec:	e051      	b.n	8005692 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f6:	d126      	bne.n	8005646 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10e      	bne.n	800561e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	4a43      	ldr	r2, [pc, #268]	; (8005710 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d906      	bls.n	8005616 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	4a40      	ldr	r2, [pc, #256]	; (800570c <HAL_SD_ConfigWideBusOperation+0x214>)
 800560c:	fba2 2303 	umull	r2, r3, r2, r3
 8005610:	0e5b      	lsrs	r3, r3, #25
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	e03d      	b.n	8005692 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	61bb      	str	r3, [r7, #24]
 800561c:	e039      	b.n	8005692 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	fbb2 f3f3 	udiv	r3, r2, r3
 800562a:	4a39      	ldr	r2, [pc, #228]	; (8005710 <HAL_SD_ConfigWideBusOperation+0x218>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d906      	bls.n	800563e <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4a36      	ldr	r2, [pc, #216]	; (800570c <HAL_SD_ConfigWideBusOperation+0x214>)
 8005634:	fba2 2303 	umull	r2, r3, r2, r3
 8005638:	0e5b      	lsrs	r3, r3, #25
 800563a:	61bb      	str	r3, [r7, #24]
 800563c:	e029      	b.n	8005692 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	e025      	b.n	8005692 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10e      	bne.n	800566c <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	4a30      	ldr	r2, [pc, #192]	; (8005714 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d906      	bls.n	8005664 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	4a2c      	ldr	r2, [pc, #176]	; (800570c <HAL_SD_ConfigWideBusOperation+0x214>)
 800565a:	fba2 2303 	umull	r2, r3, r2, r3
 800565e:	0e1b      	lsrs	r3, r3, #24
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	e016      	b.n	8005692 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	e012      	b.n	8005692 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	fbb2 f3f3 	udiv	r3, r2, r3
 8005678:	4a26      	ldr	r2, [pc, #152]	; (8005714 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d906      	bls.n	800568c <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	4a22      	ldr	r2, [pc, #136]	; (800570c <HAL_SD_ConfigWideBusOperation+0x214>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	0e1b      	lsrs	r3, r3, #24
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	e002      	b.n	8005692 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681c      	ldr	r4, [r3, #0]
 8005696:	466a      	mov	r2, sp
 8005698:	f107 0314 	add.w	r3, r7, #20
 800569c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80056a0:	e882 0003 	stmia.w	r2, {r0, r1}
 80056a4:	f107 0308 	add.w	r3, r7, #8
 80056a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056aa:	4620      	mov	r0, r4
 80056ac:	f001 fc22 	bl	8006ef4 <SDMMC_Init>
 80056b0:	e008      	b.n	80056c4 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056cc:	4618      	mov	r0, r3
 80056ce:	f001 fcdd 	bl	800708c <SDMMC_CmdBlockLength>
 80056d2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00c      	beq.n	80056f4 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a0a      	ldr	r2, [pc, #40]	; (8005708 <HAL_SD_ConfigWideBusOperation+0x210>)
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80056fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005700:	4618      	mov	r0, r3
 8005702:	372c      	adds	r7, #44	; 0x2c
 8005704:	46bd      	mov	sp, r7
 8005706:	bd90      	pop	{r4, r7, pc}
 8005708:	1fe00fff 	.word	0x1fe00fff
 800570c:	55e63b89 	.word	0x55e63b89
 8005710:	02faf080 	.word	0x02faf080
 8005714:	017d7840 	.word	0x017d7840

08005718 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005720:	2300      	movs	r3, #0
 8005722:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005724:	f107 030c 	add.w	r3, r7, #12
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fa2a 	bl	8005b84 <SD_SendStatus>
 8005730:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	0a5b      	lsrs	r3, r3, #9
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800574e:	693b      	ldr	r3, [r7, #16]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b090      	sub	sp, #64	; 0x40
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005760:	2301      	movs	r3, #1
 8005762:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f001 fc0b 	bl	8006f84 <SDMMC_GetPowerState>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d102      	bne.n	800577a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005774:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005778:	e0a5      	b.n	80058c6 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	2b03      	cmp	r3, #3
 8005780:	d02e      	beq.n	80057e0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f001 fd8c 	bl	80072a4 <SDMMC_CmdSendCID>
 800578c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800578e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <SD_InitCard+0x40>
    {
      return errorstate;
 8005794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005796:	e096      	b.n	80058c6 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2100      	movs	r1, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 fc35 	bl	800700e <SDMMC_GetResponse>
 80057a4:	4602      	mov	r2, r0
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2104      	movs	r1, #4
 80057b0:	4618      	mov	r0, r3
 80057b2:	f001 fc2c 	bl	800700e <SDMMC_GetResponse>
 80057b6:	4602      	mov	r2, r0
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2108      	movs	r1, #8
 80057c2:	4618      	mov	r0, r3
 80057c4:	f001 fc23 	bl	800700e <SDMMC_GetResponse>
 80057c8:	4602      	mov	r2, r0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	210c      	movs	r1, #12
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 fc1a 	bl	800700e <SDMMC_GetResponse>
 80057da:	4602      	mov	r2, r0
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d00d      	beq.n	8005804 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f107 020e 	add.w	r2, r7, #14
 80057f0:	4611      	mov	r1, r2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f001 fd95 	bl	8007322 <SDMMC_CmdSetRelAdd>
 80057f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 80057fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <SD_InitCard+0xac>
    {
      return errorstate;
 8005800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005802:	e060      	b.n	80058c6 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	2b03      	cmp	r3, #3
 800580a:	d036      	beq.n	800587a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800580c:	89fb      	ldrh	r3, [r7, #14]
 800580e:	461a      	mov	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581c:	041b      	lsls	r3, r3, #16
 800581e:	4619      	mov	r1, r3
 8005820:	4610      	mov	r0, r2
 8005822:	f001 fd5e 	bl	80072e2 <SDMMC_CmdSendCSD>
 8005826:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8005828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <SD_InitCard+0xda>
    {
      return errorstate;
 800582e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005830:	e049      	b.n	80058c6 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2100      	movs	r1, #0
 8005838:	4618      	mov	r0, r3
 800583a:	f001 fbe8 	bl	800700e <SDMMC_GetResponse>
 800583e:	4602      	mov	r2, r0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2104      	movs	r1, #4
 800584a:	4618      	mov	r0, r3
 800584c:	f001 fbdf 	bl	800700e <SDMMC_GetResponse>
 8005850:	4602      	mov	r2, r0
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2108      	movs	r1, #8
 800585c:	4618      	mov	r0, r3
 800585e:	f001 fbd6 	bl	800700e <SDMMC_GetResponse>
 8005862:	4602      	mov	r2, r0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	210c      	movs	r1, #12
 800586e:	4618      	mov	r0, r3
 8005870:	f001 fbcd 	bl	800700e <SDMMC_GetResponse>
 8005874:	4602      	mov	r2, r0
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2104      	movs	r1, #4
 8005880:	4618      	mov	r0, r3
 8005882:	f001 fbc4 	bl	800700e <SDMMC_GetResponse>
 8005886:	4603      	mov	r3, r0
 8005888:	0d1a      	lsrs	r2, r3, #20
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800588e:	f107 0310 	add.w	r3, r7, #16
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff fbd5 	bl	8005044 <HAL_SD_GetCardCSD>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80058a4:	e00f      	b.n	80058c6 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ae:	041b      	lsls	r3, r3, #16
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f001 fc0d 	bl	80070d2 <SDMMC_CmdSelDesel>
 80058b8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 80058ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <SD_InitCard+0x16c>
  {
    return errorstate;
 80058c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c2:	e000      	b.n	80058c6 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3740      	adds	r7, #64	; 0x40
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f001 fc15 	bl	8007118 <SDMMC_CmdGoIdleState>
 80058ee:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <SD_PowerON+0x2a>
  {
    return errorstate;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	e06e      	b.n	80059d8 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f001 fc28 	bl	8007154 <SDMMC_CmdOperCond>
 8005904:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00d      	beq.n	8005928 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f001 fbfe 	bl	8007118 <SDMMC_CmdGoIdleState>
 800591c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d004      	beq.n	800592e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	e057      	b.n	80059d8 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	2b01      	cmp	r3, #1
 8005934:	d137      	bne.n	80059a6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2100      	movs	r1, #0
 800593c:	4618      	mov	r0, r3
 800593e:	f001 fc29 	bl	8007194 <SDMMC_CmdAppCommand>
 8005942:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d02d      	beq.n	80059a6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800594a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800594e:	e043      	b.n	80059d8 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2100      	movs	r1, #0
 8005956:	4618      	mov	r0, r3
 8005958:	f001 fc1c 	bl	8007194 <SDMMC_CmdAppCommand>
 800595c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <SD_PowerON+0x98>
    {
      return errorstate;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	e037      	b.n	80059d8 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	491c      	ldr	r1, [pc, #112]	; (80059e0 <SD_PowerON+0x110>)
 800596e:	4618      	mov	r0, r3
 8005970:	f001 fc33 	bl	80071da <SDMMC_CmdAppOperCommand>
 8005974:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800597c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005980:	e02a      	b.n	80059d8 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2100      	movs	r1, #0
 8005988:	4618      	mov	r0, r3
 800598a:	f001 fb40 	bl	800700e <SDMMC_GetResponse>
 800598e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	0fdb      	lsrs	r3, r3, #31
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <SD_PowerON+0xcc>
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <SD_PowerON+0xce>
 800599c:	2300      	movs	r3, #0
 800599e:	613b      	str	r3, [r7, #16]

    count++;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	3301      	adds	r3, #1
 80059a4:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d802      	bhi.n	80059b6 <SD_PowerON+0xe6>
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0cc      	beq.n	8005950 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80059bc:	4293      	cmp	r3, r2
 80059be:	d902      	bls.n	80059c6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80059c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059c4:	e008      	b.n	80059d8 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	c1100000 	.word	0xc1100000

080059e4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08c      	sub	sp, #48	; 0x30
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80059ee:	f7fb fbcf 	bl	8001190 <HAL_GetTick>
 80059f2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2100      	movs	r1, #0
 80059fe:	4618      	mov	r0, r3
 8005a00:	f001 fb05 	bl	800700e <SDMMC_GetResponse>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a0e:	d102      	bne.n	8005a16 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005a10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a14:	e0b0      	b.n	8005b78 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2140      	movs	r1, #64	; 0x40
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f001 fb35 	bl	800708c <SDMMC_CmdBlockLength>
 8005a22:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d005      	beq.n	8005a36 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	e0a0      	b.n	8005b78 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3e:	041b      	lsls	r3, r3, #16
 8005a40:	4619      	mov	r1, r3
 8005a42:	4610      	mov	r0, r2
 8005a44:	f001 fba6 	bl	8007194 <SDMMC_CmdAppCommand>
 8005a48:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	e08d      	b.n	8005b78 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a60:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8005a62:	2340      	movs	r3, #64	; 0x40
 8005a64:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005a66:	2360      	movs	r3, #96	; 0x60
 8005a68:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005a72:	2301      	movs	r3, #1
 8005a74:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f107 0208 	add.w	r2, r7, #8
 8005a7e:	4611      	mov	r1, r2
 8005a80:	4618      	mov	r0, r3
 8005a82:	f001 fad7 	bl	8007034 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f001 fc8e 	bl	80073ac <SDMMC_CmdStatusRegister>
 8005a90:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d02b      	beq.n	8005af0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	e069      	b.n	8005b78 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d013      	beq.n	8005ada <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ab6:	e00d      	b.n	8005ad4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 fa43 	bl	8006f48 <SDMMC_ReadFIFO>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac6:	601a      	str	r2, [r3, #0]
        pData++;
 8005ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aca:	3304      	adds	r3, #4
 8005acc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8005ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad6:	2b07      	cmp	r3, #7
 8005ad8:	d9ee      	bls.n	8005ab8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ada:	f7fb fb59 	bl	8001190 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ae8:	d102      	bne.n	8005af0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005aea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005aee:	e043      	b.n	8005b78 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0d2      	beq.n	8005aa4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005b0c:	2308      	movs	r3, #8
 8005b0e:	e033      	b.n	8005b78 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e02a      	b.n	8005b78 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d017      	beq.n	8005b60 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8005b30:	2320      	movs	r3, #32
 8005b32:	e021      	b.n	8005b78 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f001 fa05 	bl	8006f48 <SDMMC_ReadFIFO>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	601a      	str	r2, [r3, #0]
    pData++;
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	3304      	adds	r3, #4
 8005b48:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b4a:	f7fb fb21 	bl	8001190 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b58:	d102      	bne.n	8005b60 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005b5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b5e:	e00b      	b.n	8005b78 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e2      	bne.n	8005b34 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a03      	ldr	r2, [pc, #12]	; (8005b80 <SD_SendSDStatus+0x19c>)
 8005b74:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3730      	adds	r7, #48	; 0x30
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	18000f3a 	.word	0x18000f3a

08005b84 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d102      	bne.n	8005b9a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005b94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b98:	e018      	b.n	8005bcc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba2:	041b      	lsls	r3, r3, #16
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	f001 fbdd 	bl	8007366 <SDMMC_CmdSendStatus>
 8005bac:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	e009      	b.n	8005bcc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 fa25 	bl	800700e <SDMMC_GetResponse>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	2300      	movs	r3, #0
 8005be2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2100      	movs	r1, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	f001 fa0f 	bl	800700e <SDMMC_GetResponse>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bfa:	d102      	bne.n	8005c02 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005bfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c00:	e02f      	b.n	8005c62 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c02:	f107 030c 	add.w	r3, r7, #12
 8005c06:	4619      	mov	r1, r3
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f879 	bl	8005d00 <SD_FindSCR>
 8005c0e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	e023      	b.n	8005c62 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01c      	beq.n	8005c5e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2c:	041b      	lsls	r3, r3, #16
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4610      	mov	r0, r2
 8005c32:	f001 faaf 	bl	8007194 <SDMMC_CmdAppCommand>
 8005c36:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	e00f      	b.n	8005c62 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2102      	movs	r1, #2
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f001 fae6 	bl	800721a <SDMMC_CmdBusWidth>
 8005c4e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	e003      	b.n	8005c62 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e001      	b.n	8005c62 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b086      	sub	sp, #24
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	2300      	movs	r3, #0
 8005c78:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2100      	movs	r1, #0
 8005c80:	4618      	mov	r0, r3
 8005c82:	f001 f9c4 	bl	800700e <SDMMC_GetResponse>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c90:	d102      	bne.n	8005c98 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c96:	e02f      	b.n	8005cf8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c98:	f107 030c 	add.w	r3, r7, #12
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f82e 	bl	8005d00 <SD_FindSCR>
 8005ca4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	e023      	b.n	8005cf8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d01c      	beq.n	8005cf4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc2:	041b      	lsls	r3, r3, #16
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	f001 fa64 	bl	8007194 <SDMMC_CmdAppCommand>
 8005ccc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	e00f      	b.n	8005cf8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 fa9b 	bl	800721a <SDMMC_CmdBusWidth>
 8005ce4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	e003      	b.n	8005cf8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e001      	b.n	8005cf8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005cf4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08e      	sub	sp, #56	; 0x38
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d0a:	f7fb fa41 	bl	8001190 <HAL_GetTick>
 8005d0e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005d14:	2300      	movs	r3, #0
 8005d16:	60bb      	str	r3, [r7, #8]
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2108      	movs	r1, #8
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 f9b0 	bl	800708c <SDMMC_CmdBlockLength>
 8005d2c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	e0ad      	b.n	8005e94 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d40:	041b      	lsls	r3, r3, #16
 8005d42:	4619      	mov	r1, r3
 8005d44:	4610      	mov	r0, r2
 8005d46:	f001 fa25 	bl	8007194 <SDMMC_CmdAppCommand>
 8005d4a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	e09e      	b.n	8005e94 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d5a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005d5c:	2308      	movs	r3, #8
 8005d5e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005d60:	2330      	movs	r3, #48	; 0x30
 8005d62:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005d64:	2302      	movs	r3, #2
 8005d66:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f107 0210 	add.w	r2, r7, #16
 8005d78:	4611      	mov	r1, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 f95a 	bl	8007034 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f001 fa6b 	bl	8007260 <SDMMC_CmdSendSCR>
 8005d8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d027      	beq.n	8005de2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	e07e      	b.n	8005e94 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d113      	bne.n	8005dcc <SD_FindSCR+0xcc>
 8005da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d110      	bne.n	8005dcc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f001 f8ca 	bl	8006f48 <SDMMC_ReadFIFO>
 8005db4:	4603      	mov	r3, r0
 8005db6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f001 f8c3 	bl	8006f48 <SDMMC_ReadFIFO>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	60fb      	str	r3, [r7, #12]
      index++;
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc8:	3301      	adds	r3, #1
 8005dca:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005dcc:	f7fb f9e0 	bl	8001190 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dda:	d102      	bne.n	8005de2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005ddc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005de0:	e058      	b.n	8005e94 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de8:	f240 532a 	movw	r3, #1322	; 0x52a
 8005dec:	4013      	ands	r3, r2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0d1      	beq.n	8005d96 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df8:	f003 0308 	and.w	r3, r3, #8
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2208      	movs	r2, #8
 8005e06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005e08:	2308      	movs	r3, #8
 8005e0a:	e043      	b.n	8005e94 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e22:	2302      	movs	r3, #2
 8005e24:	e036      	b.n	8005e94 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005e3c:	2320      	movs	r3, #32
 8005e3e:	e029      	b.n	8005e94 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a15      	ldr	r2, [pc, #84]	; (8005e9c <SD_FindSCR+0x19c>)
 8005e46:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	061a      	lsls	r2, r3, #24
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e54:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	0a1b      	lsrs	r3, r3, #8
 8005e5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e5e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	0e1b      	lsrs	r3, r3, #24
 8005e64:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e68:	601a      	str	r2, [r3, #0]
    scr++;
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	061a      	lsls	r2, r3, #24
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e7c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	0a1b      	lsrs	r3, r3, #8
 8005e82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005e86:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	0e1b      	lsrs	r3, r3, #24
 8005e8c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3738      	adds	r7, #56	; 0x38
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	18000f3a 	.word	0x18000f3a

08005ea0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e042      	b.n	8005f38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d106      	bne.n	8005eca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7fa ff2d 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2224      	movs	r2, #36	; 0x24
 8005ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0201 	bic.w	r2, r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f82c 	bl	8005f40 <UART_SetConfig>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e022      	b.n	8005f38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fd8a 	bl	8006a14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0201 	orr.w	r2, r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fe11 	bl	8006b58 <UART_CheckIdleState>
 8005f36:	4603      	mov	r3, r0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f44:	b092      	sub	sp, #72	; 0x48
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	4bbe      	ldr	r3, [pc, #760]	; (8006268 <UART_SetConfig+0x328>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4ab3      	ldr	r2, [pc, #716]	; (800626c <UART_SetConfig+0x32c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d004      	beq.n	8005fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	4baf      	ldr	r3, [pc, #700]	; (8006270 <UART_SetConfig+0x330>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc6:	f023 010f 	bic.w	r1, r3, #15
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4aa6      	ldr	r2, [pc, #664]	; (8006274 <UART_SetConfig+0x334>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d177      	bne.n	80060d0 <UART_SetConfig+0x190>
 8005fe0:	4ba5      	ldr	r3, [pc, #660]	; (8006278 <UART_SetConfig+0x338>)
 8005fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fe8:	2b28      	cmp	r3, #40	; 0x28
 8005fea:	d86d      	bhi.n	80060c8 <UART_SetConfig+0x188>
 8005fec:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <UART_SetConfig+0xb4>)
 8005fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff2:	bf00      	nop
 8005ff4:	08006099 	.word	0x08006099
 8005ff8:	080060c9 	.word	0x080060c9
 8005ffc:	080060c9 	.word	0x080060c9
 8006000:	080060c9 	.word	0x080060c9
 8006004:	080060c9 	.word	0x080060c9
 8006008:	080060c9 	.word	0x080060c9
 800600c:	080060c9 	.word	0x080060c9
 8006010:	080060c9 	.word	0x080060c9
 8006014:	080060a1 	.word	0x080060a1
 8006018:	080060c9 	.word	0x080060c9
 800601c:	080060c9 	.word	0x080060c9
 8006020:	080060c9 	.word	0x080060c9
 8006024:	080060c9 	.word	0x080060c9
 8006028:	080060c9 	.word	0x080060c9
 800602c:	080060c9 	.word	0x080060c9
 8006030:	080060c9 	.word	0x080060c9
 8006034:	080060a9 	.word	0x080060a9
 8006038:	080060c9 	.word	0x080060c9
 800603c:	080060c9 	.word	0x080060c9
 8006040:	080060c9 	.word	0x080060c9
 8006044:	080060c9 	.word	0x080060c9
 8006048:	080060c9 	.word	0x080060c9
 800604c:	080060c9 	.word	0x080060c9
 8006050:	080060c9 	.word	0x080060c9
 8006054:	080060b1 	.word	0x080060b1
 8006058:	080060c9 	.word	0x080060c9
 800605c:	080060c9 	.word	0x080060c9
 8006060:	080060c9 	.word	0x080060c9
 8006064:	080060c9 	.word	0x080060c9
 8006068:	080060c9 	.word	0x080060c9
 800606c:	080060c9 	.word	0x080060c9
 8006070:	080060c9 	.word	0x080060c9
 8006074:	080060b9 	.word	0x080060b9
 8006078:	080060c9 	.word	0x080060c9
 800607c:	080060c9 	.word	0x080060c9
 8006080:	080060c9 	.word	0x080060c9
 8006084:	080060c9 	.word	0x080060c9
 8006088:	080060c9 	.word	0x080060c9
 800608c:	080060c9 	.word	0x080060c9
 8006090:	080060c9 	.word	0x080060c9
 8006094:	080060c1 	.word	0x080060c1
 8006098:	2301      	movs	r3, #1
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609e:	e222      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80060a0:	2304      	movs	r3, #4
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a6:	e21e      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80060a8:	2308      	movs	r3, #8
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ae:	e21a      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80060b0:	2310      	movs	r3, #16
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b6:	e216      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80060b8:	2320      	movs	r3, #32
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060be:	e212      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80060c0:	2340      	movs	r3, #64	; 0x40
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c6:	e20e      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80060c8:	2380      	movs	r3, #128	; 0x80
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ce:	e20a      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a69      	ldr	r2, [pc, #420]	; (800627c <UART_SetConfig+0x33c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d130      	bne.n	800613c <UART_SetConfig+0x1fc>
 80060da:	4b67      	ldr	r3, [pc, #412]	; (8006278 <UART_SetConfig+0x338>)
 80060dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060de:	f003 0307 	and.w	r3, r3, #7
 80060e2:	2b05      	cmp	r3, #5
 80060e4:	d826      	bhi.n	8006134 <UART_SetConfig+0x1f4>
 80060e6:	a201      	add	r2, pc, #4	; (adr r2, 80060ec <UART_SetConfig+0x1ac>)
 80060e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ec:	08006105 	.word	0x08006105
 80060f0:	0800610d 	.word	0x0800610d
 80060f4:	08006115 	.word	0x08006115
 80060f8:	0800611d 	.word	0x0800611d
 80060fc:	08006125 	.word	0x08006125
 8006100:	0800612d 	.word	0x0800612d
 8006104:	2300      	movs	r3, #0
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610a:	e1ec      	b.n	80064e6 <UART_SetConfig+0x5a6>
 800610c:	2304      	movs	r3, #4
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006112:	e1e8      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006114:	2308      	movs	r3, #8
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611a:	e1e4      	b.n	80064e6 <UART_SetConfig+0x5a6>
 800611c:	2310      	movs	r3, #16
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006122:	e1e0      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006124:	2320      	movs	r3, #32
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612a:	e1dc      	b.n	80064e6 <UART_SetConfig+0x5a6>
 800612c:	2340      	movs	r3, #64	; 0x40
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006132:	e1d8      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006134:	2380      	movs	r3, #128	; 0x80
 8006136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800613a:	e1d4      	b.n	80064e6 <UART_SetConfig+0x5a6>
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a4f      	ldr	r2, [pc, #316]	; (8006280 <UART_SetConfig+0x340>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d130      	bne.n	80061a8 <UART_SetConfig+0x268>
 8006146:	4b4c      	ldr	r3, [pc, #304]	; (8006278 <UART_SetConfig+0x338>)
 8006148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	2b05      	cmp	r3, #5
 8006150:	d826      	bhi.n	80061a0 <UART_SetConfig+0x260>
 8006152:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <UART_SetConfig+0x218>)
 8006154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006158:	08006171 	.word	0x08006171
 800615c:	08006179 	.word	0x08006179
 8006160:	08006181 	.word	0x08006181
 8006164:	08006189 	.word	0x08006189
 8006168:	08006191 	.word	0x08006191
 800616c:	08006199 	.word	0x08006199
 8006170:	2300      	movs	r3, #0
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006176:	e1b6      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006178:	2304      	movs	r3, #4
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617e:	e1b2      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006180:	2308      	movs	r3, #8
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006186:	e1ae      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006188:	2310      	movs	r3, #16
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800618e:	e1aa      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006190:	2320      	movs	r3, #32
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006196:	e1a6      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006198:	2340      	movs	r3, #64	; 0x40
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619e:	e1a2      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80061a0:	2380      	movs	r3, #128	; 0x80
 80061a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061a6:	e19e      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a35      	ldr	r2, [pc, #212]	; (8006284 <UART_SetConfig+0x344>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d130      	bne.n	8006214 <UART_SetConfig+0x2d4>
 80061b2:	4b31      	ldr	r3, [pc, #196]	; (8006278 <UART_SetConfig+0x338>)
 80061b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	2b05      	cmp	r3, #5
 80061bc:	d826      	bhi.n	800620c <UART_SetConfig+0x2cc>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <UART_SetConfig+0x284>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	080061dd 	.word	0x080061dd
 80061c8:	080061e5 	.word	0x080061e5
 80061cc:	080061ed 	.word	0x080061ed
 80061d0:	080061f5 	.word	0x080061f5
 80061d4:	080061fd 	.word	0x080061fd
 80061d8:	08006205 	.word	0x08006205
 80061dc:	2300      	movs	r3, #0
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e2:	e180      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80061e4:	2304      	movs	r3, #4
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ea:	e17c      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80061ec:	2308      	movs	r3, #8
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061f2:	e178      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80061f4:	2310      	movs	r3, #16
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fa:	e174      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80061fc:	2320      	movs	r3, #32
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006202:	e170      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006204:	2340      	movs	r3, #64	; 0x40
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620a:	e16c      	b.n	80064e6 <UART_SetConfig+0x5a6>
 800620c:	2380      	movs	r3, #128	; 0x80
 800620e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006212:	e168      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1b      	ldr	r2, [pc, #108]	; (8006288 <UART_SetConfig+0x348>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d142      	bne.n	80062a4 <UART_SetConfig+0x364>
 800621e:	4b16      	ldr	r3, [pc, #88]	; (8006278 <UART_SetConfig+0x338>)
 8006220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	2b05      	cmp	r3, #5
 8006228:	d838      	bhi.n	800629c <UART_SetConfig+0x35c>
 800622a:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <UART_SetConfig+0x2f0>)
 800622c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006230:	08006249 	.word	0x08006249
 8006234:	08006251 	.word	0x08006251
 8006238:	08006259 	.word	0x08006259
 800623c:	08006261 	.word	0x08006261
 8006240:	0800628d 	.word	0x0800628d
 8006244:	08006295 	.word	0x08006295
 8006248:	2300      	movs	r3, #0
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800624e:	e14a      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006250:	2304      	movs	r3, #4
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006256:	e146      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006258:	2308      	movs	r3, #8
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800625e:	e142      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006260:	2310      	movs	r3, #16
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006266:	e13e      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006268:	cfff69f3 	.word	0xcfff69f3
 800626c:	58000c00 	.word	0x58000c00
 8006270:	11fff4ff 	.word	0x11fff4ff
 8006274:	40011000 	.word	0x40011000
 8006278:	58024400 	.word	0x58024400
 800627c:	40004400 	.word	0x40004400
 8006280:	40004800 	.word	0x40004800
 8006284:	40004c00 	.word	0x40004c00
 8006288:	40005000 	.word	0x40005000
 800628c:	2320      	movs	r3, #32
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006292:	e128      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006294:	2340      	movs	r3, #64	; 0x40
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629a:	e124      	b.n	80064e6 <UART_SetConfig+0x5a6>
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a2:	e120      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4acb      	ldr	r2, [pc, #812]	; (80065d8 <UART_SetConfig+0x698>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d176      	bne.n	800639c <UART_SetConfig+0x45c>
 80062ae:	4bcb      	ldr	r3, [pc, #812]	; (80065dc <UART_SetConfig+0x69c>)
 80062b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062b6:	2b28      	cmp	r3, #40	; 0x28
 80062b8:	d86c      	bhi.n	8006394 <UART_SetConfig+0x454>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <UART_SetConfig+0x380>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	08006365 	.word	0x08006365
 80062c4:	08006395 	.word	0x08006395
 80062c8:	08006395 	.word	0x08006395
 80062cc:	08006395 	.word	0x08006395
 80062d0:	08006395 	.word	0x08006395
 80062d4:	08006395 	.word	0x08006395
 80062d8:	08006395 	.word	0x08006395
 80062dc:	08006395 	.word	0x08006395
 80062e0:	0800636d 	.word	0x0800636d
 80062e4:	08006395 	.word	0x08006395
 80062e8:	08006395 	.word	0x08006395
 80062ec:	08006395 	.word	0x08006395
 80062f0:	08006395 	.word	0x08006395
 80062f4:	08006395 	.word	0x08006395
 80062f8:	08006395 	.word	0x08006395
 80062fc:	08006395 	.word	0x08006395
 8006300:	08006375 	.word	0x08006375
 8006304:	08006395 	.word	0x08006395
 8006308:	08006395 	.word	0x08006395
 800630c:	08006395 	.word	0x08006395
 8006310:	08006395 	.word	0x08006395
 8006314:	08006395 	.word	0x08006395
 8006318:	08006395 	.word	0x08006395
 800631c:	08006395 	.word	0x08006395
 8006320:	0800637d 	.word	0x0800637d
 8006324:	08006395 	.word	0x08006395
 8006328:	08006395 	.word	0x08006395
 800632c:	08006395 	.word	0x08006395
 8006330:	08006395 	.word	0x08006395
 8006334:	08006395 	.word	0x08006395
 8006338:	08006395 	.word	0x08006395
 800633c:	08006395 	.word	0x08006395
 8006340:	08006385 	.word	0x08006385
 8006344:	08006395 	.word	0x08006395
 8006348:	08006395 	.word	0x08006395
 800634c:	08006395 	.word	0x08006395
 8006350:	08006395 	.word	0x08006395
 8006354:	08006395 	.word	0x08006395
 8006358:	08006395 	.word	0x08006395
 800635c:	08006395 	.word	0x08006395
 8006360:	0800638d 	.word	0x0800638d
 8006364:	2301      	movs	r3, #1
 8006366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800636a:	e0bc      	b.n	80064e6 <UART_SetConfig+0x5a6>
 800636c:	2304      	movs	r3, #4
 800636e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006372:	e0b8      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006374:	2308      	movs	r3, #8
 8006376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637a:	e0b4      	b.n	80064e6 <UART_SetConfig+0x5a6>
 800637c:	2310      	movs	r3, #16
 800637e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006382:	e0b0      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006384:	2320      	movs	r3, #32
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638a:	e0ac      	b.n	80064e6 <UART_SetConfig+0x5a6>
 800638c:	2340      	movs	r3, #64	; 0x40
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006392:	e0a8      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006394:	2380      	movs	r3, #128	; 0x80
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639a:	e0a4      	b.n	80064e6 <UART_SetConfig+0x5a6>
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a8f      	ldr	r2, [pc, #572]	; (80065e0 <UART_SetConfig+0x6a0>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d130      	bne.n	8006408 <UART_SetConfig+0x4c8>
 80063a6:	4b8d      	ldr	r3, [pc, #564]	; (80065dc <UART_SetConfig+0x69c>)
 80063a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	2b05      	cmp	r3, #5
 80063b0:	d826      	bhi.n	8006400 <UART_SetConfig+0x4c0>
 80063b2:	a201      	add	r2, pc, #4	; (adr r2, 80063b8 <UART_SetConfig+0x478>)
 80063b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b8:	080063d1 	.word	0x080063d1
 80063bc:	080063d9 	.word	0x080063d9
 80063c0:	080063e1 	.word	0x080063e1
 80063c4:	080063e9 	.word	0x080063e9
 80063c8:	080063f1 	.word	0x080063f1
 80063cc:	080063f9 	.word	0x080063f9
 80063d0:	2300      	movs	r3, #0
 80063d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d6:	e086      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80063d8:	2304      	movs	r3, #4
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063de:	e082      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80063e0:	2308      	movs	r3, #8
 80063e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e6:	e07e      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80063e8:	2310      	movs	r3, #16
 80063ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ee:	e07a      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80063f0:	2320      	movs	r3, #32
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063f6:	e076      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80063f8:	2340      	movs	r3, #64	; 0x40
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fe:	e072      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006400:	2380      	movs	r3, #128	; 0x80
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006406:	e06e      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a75      	ldr	r2, [pc, #468]	; (80065e4 <UART_SetConfig+0x6a4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d130      	bne.n	8006474 <UART_SetConfig+0x534>
 8006412:	4b72      	ldr	r3, [pc, #456]	; (80065dc <UART_SetConfig+0x69c>)
 8006414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	2b05      	cmp	r3, #5
 800641c:	d826      	bhi.n	800646c <UART_SetConfig+0x52c>
 800641e:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <UART_SetConfig+0x4e4>)
 8006420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006424:	0800643d 	.word	0x0800643d
 8006428:	08006445 	.word	0x08006445
 800642c:	0800644d 	.word	0x0800644d
 8006430:	08006455 	.word	0x08006455
 8006434:	0800645d 	.word	0x0800645d
 8006438:	08006465 	.word	0x08006465
 800643c:	2300      	movs	r3, #0
 800643e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006442:	e050      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006444:	2304      	movs	r3, #4
 8006446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800644a:	e04c      	b.n	80064e6 <UART_SetConfig+0x5a6>
 800644c:	2308      	movs	r3, #8
 800644e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006452:	e048      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006454:	2310      	movs	r3, #16
 8006456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800645a:	e044      	b.n	80064e6 <UART_SetConfig+0x5a6>
 800645c:	2320      	movs	r3, #32
 800645e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006462:	e040      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006464:	2340      	movs	r3, #64	; 0x40
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646a:	e03c      	b.n	80064e6 <UART_SetConfig+0x5a6>
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006472:	e038      	b.n	80064e6 <UART_SetConfig+0x5a6>
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a5b      	ldr	r2, [pc, #364]	; (80065e8 <UART_SetConfig+0x6a8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d130      	bne.n	80064e0 <UART_SetConfig+0x5a0>
 800647e:	4b57      	ldr	r3, [pc, #348]	; (80065dc <UART_SetConfig+0x69c>)
 8006480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	2b05      	cmp	r3, #5
 8006488:	d826      	bhi.n	80064d8 <UART_SetConfig+0x598>
 800648a:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <UART_SetConfig+0x550>)
 800648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006490:	080064a9 	.word	0x080064a9
 8006494:	080064b1 	.word	0x080064b1
 8006498:	080064b9 	.word	0x080064b9
 800649c:	080064c1 	.word	0x080064c1
 80064a0:	080064c9 	.word	0x080064c9
 80064a4:	080064d1 	.word	0x080064d1
 80064a8:	2302      	movs	r3, #2
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ae:	e01a      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80064b0:	2304      	movs	r3, #4
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e016      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80064b8:	2308      	movs	r3, #8
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064be:	e012      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80064c0:	2310      	movs	r3, #16
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c6:	e00e      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80064c8:	2320      	movs	r3, #32
 80064ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ce:	e00a      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80064d0:	2340      	movs	r3, #64	; 0x40
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d6:	e006      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80064d8:	2380      	movs	r3, #128	; 0x80
 80064da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064de:	e002      	b.n	80064e6 <UART_SetConfig+0x5a6>
 80064e0:	2380      	movs	r3, #128	; 0x80
 80064e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a3f      	ldr	r2, [pc, #252]	; (80065e8 <UART_SetConfig+0x6a8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	f040 80f8 	bne.w	80066e2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	dc46      	bgt.n	8006588 <UART_SetConfig+0x648>
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	f2c0 8082 	blt.w	8006604 <UART_SetConfig+0x6c4>
 8006500:	3b02      	subs	r3, #2
 8006502:	2b1e      	cmp	r3, #30
 8006504:	d87e      	bhi.n	8006604 <UART_SetConfig+0x6c4>
 8006506:	a201      	add	r2, pc, #4	; (adr r2, 800650c <UART_SetConfig+0x5cc>)
 8006508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650c:	0800658f 	.word	0x0800658f
 8006510:	08006605 	.word	0x08006605
 8006514:	08006597 	.word	0x08006597
 8006518:	08006605 	.word	0x08006605
 800651c:	08006605 	.word	0x08006605
 8006520:	08006605 	.word	0x08006605
 8006524:	080065a7 	.word	0x080065a7
 8006528:	08006605 	.word	0x08006605
 800652c:	08006605 	.word	0x08006605
 8006530:	08006605 	.word	0x08006605
 8006534:	08006605 	.word	0x08006605
 8006538:	08006605 	.word	0x08006605
 800653c:	08006605 	.word	0x08006605
 8006540:	08006605 	.word	0x08006605
 8006544:	080065b7 	.word	0x080065b7
 8006548:	08006605 	.word	0x08006605
 800654c:	08006605 	.word	0x08006605
 8006550:	08006605 	.word	0x08006605
 8006554:	08006605 	.word	0x08006605
 8006558:	08006605 	.word	0x08006605
 800655c:	08006605 	.word	0x08006605
 8006560:	08006605 	.word	0x08006605
 8006564:	08006605 	.word	0x08006605
 8006568:	08006605 	.word	0x08006605
 800656c:	08006605 	.word	0x08006605
 8006570:	08006605 	.word	0x08006605
 8006574:	08006605 	.word	0x08006605
 8006578:	08006605 	.word	0x08006605
 800657c:	08006605 	.word	0x08006605
 8006580:	08006605 	.word	0x08006605
 8006584:	080065f7 	.word	0x080065f7
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	d037      	beq.n	80065fc <UART_SetConfig+0x6bc>
 800658c:	e03a      	b.n	8006604 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800658e:	f7fd fecd 	bl	800432c <HAL_RCCEx_GetD3PCLK1Freq>
 8006592:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006594:	e03c      	b.n	8006610 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800659a:	4618      	mov	r0, r3
 800659c:	f7fd fedc 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065a4:	e034      	b.n	8006610 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065a6:	f107 0318 	add.w	r3, r7, #24
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fe f828 	bl	8004600 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065b4:	e02c      	b.n	8006610 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065b6:	4b09      	ldr	r3, [pc, #36]	; (80065dc <UART_SetConfig+0x69c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0320 	and.w	r3, r3, #32
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d016      	beq.n	80065f0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065c2:	4b06      	ldr	r3, [pc, #24]	; (80065dc <UART_SetConfig+0x69c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	08db      	lsrs	r3, r3, #3
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	4a07      	ldr	r2, [pc, #28]	; (80065ec <UART_SetConfig+0x6ac>)
 80065ce:	fa22 f303 	lsr.w	r3, r2, r3
 80065d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065d4:	e01c      	b.n	8006610 <UART_SetConfig+0x6d0>
 80065d6:	bf00      	nop
 80065d8:	40011400 	.word	0x40011400
 80065dc:	58024400 	.word	0x58024400
 80065e0:	40007800 	.word	0x40007800
 80065e4:	40007c00 	.word	0x40007c00
 80065e8:	58000c00 	.word	0x58000c00
 80065ec:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80065f0:	4b9e      	ldr	r3, [pc, #632]	; (800686c <UART_SetConfig+0x92c>)
 80065f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065f4:	e00c      	b.n	8006610 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065f6:	4b9e      	ldr	r3, [pc, #632]	; (8006870 <UART_SetConfig+0x930>)
 80065f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065fa:	e009      	b.n	8006610 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006602:	e005      	b.n	8006610 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800660e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 81e0 	beq.w	80069d8 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	4a95      	ldr	r2, [pc, #596]	; (8006874 <UART_SetConfig+0x934>)
 800661e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006622:	461a      	mov	r2, r3
 8006624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006626:	fbb3 f3f2 	udiv	r3, r3, r2
 800662a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	4613      	mov	r3, r2
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	4413      	add	r3, r2
 8006636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006638:	429a      	cmp	r2, r3
 800663a:	d305      	bcc.n	8006648 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006644:	429a      	cmp	r2, r3
 8006646:	d903      	bls.n	8006650 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800664e:	e1c3      	b.n	80069d8 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006652:	2200      	movs	r2, #0
 8006654:	60bb      	str	r3, [r7, #8]
 8006656:	60fa      	str	r2, [r7, #12]
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	4a85      	ldr	r2, [pc, #532]	; (8006874 <UART_SetConfig+0x934>)
 800665e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006662:	b29b      	uxth	r3, r3
 8006664:	2200      	movs	r2, #0
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	607a      	str	r2, [r7, #4]
 800666a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800666e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006672:	f7f9 fe31 	bl	80002d8 <__aeabi_uldivmod>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	4610      	mov	r0, r2
 800667c:	4619      	mov	r1, r3
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	020b      	lsls	r3, r1, #8
 8006688:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800668c:	0202      	lsls	r2, r0, #8
 800668e:	6979      	ldr	r1, [r7, #20]
 8006690:	6849      	ldr	r1, [r1, #4]
 8006692:	0849      	lsrs	r1, r1, #1
 8006694:	2000      	movs	r0, #0
 8006696:	460c      	mov	r4, r1
 8006698:	4605      	mov	r5, r0
 800669a:	eb12 0804 	adds.w	r8, r2, r4
 800669e:	eb43 0905 	adc.w	r9, r3, r5
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	469a      	mov	sl, r3
 80066aa:	4693      	mov	fp, r2
 80066ac:	4652      	mov	r2, sl
 80066ae:	465b      	mov	r3, fp
 80066b0:	4640      	mov	r0, r8
 80066b2:	4649      	mov	r1, r9
 80066b4:	f7f9 fe10 	bl	80002d8 <__aeabi_uldivmod>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4613      	mov	r3, r2
 80066be:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066c6:	d308      	bcc.n	80066da <UART_SetConfig+0x79a>
 80066c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ce:	d204      	bcs.n	80066da <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066d6:	60da      	str	r2, [r3, #12]
 80066d8:	e17e      	b.n	80069d8 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80066e0:	e17a      	b.n	80069d8 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ea:	f040 80c7 	bne.w	800687c <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 80066ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	dc48      	bgt.n	8006788 <UART_SetConfig+0x848>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	db7b      	blt.n	80067f2 <UART_SetConfig+0x8b2>
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	d879      	bhi.n	80067f2 <UART_SetConfig+0x8b2>
 80066fe:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <UART_SetConfig+0x7c4>)
 8006700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006704:	0800678f 	.word	0x0800678f
 8006708:	08006797 	.word	0x08006797
 800670c:	080067f3 	.word	0x080067f3
 8006710:	080067f3 	.word	0x080067f3
 8006714:	0800679f 	.word	0x0800679f
 8006718:	080067f3 	.word	0x080067f3
 800671c:	080067f3 	.word	0x080067f3
 8006720:	080067f3 	.word	0x080067f3
 8006724:	080067af 	.word	0x080067af
 8006728:	080067f3 	.word	0x080067f3
 800672c:	080067f3 	.word	0x080067f3
 8006730:	080067f3 	.word	0x080067f3
 8006734:	080067f3 	.word	0x080067f3
 8006738:	080067f3 	.word	0x080067f3
 800673c:	080067f3 	.word	0x080067f3
 8006740:	080067f3 	.word	0x080067f3
 8006744:	080067bf 	.word	0x080067bf
 8006748:	080067f3 	.word	0x080067f3
 800674c:	080067f3 	.word	0x080067f3
 8006750:	080067f3 	.word	0x080067f3
 8006754:	080067f3 	.word	0x080067f3
 8006758:	080067f3 	.word	0x080067f3
 800675c:	080067f3 	.word	0x080067f3
 8006760:	080067f3 	.word	0x080067f3
 8006764:	080067f3 	.word	0x080067f3
 8006768:	080067f3 	.word	0x080067f3
 800676c:	080067f3 	.word	0x080067f3
 8006770:	080067f3 	.word	0x080067f3
 8006774:	080067f3 	.word	0x080067f3
 8006778:	080067f3 	.word	0x080067f3
 800677c:	080067f3 	.word	0x080067f3
 8006780:	080067f3 	.word	0x080067f3
 8006784:	080067e5 	.word	0x080067e5
 8006788:	2b40      	cmp	r3, #64	; 0x40
 800678a:	d02e      	beq.n	80067ea <UART_SetConfig+0x8aa>
 800678c:	e031      	b.n	80067f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800678e:	f7fc f989 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 8006792:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006794:	e033      	b.n	80067fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006796:	f7fc f99b 	bl	8002ad0 <HAL_RCC_GetPCLK2Freq>
 800679a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800679c:	e02f      	b.n	80067fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800679e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fd fdd8 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ac:	e027      	b.n	80067fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ae:	f107 0318 	add.w	r3, r7, #24
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fd ff24 	bl	8004600 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067bc:	e01f      	b.n	80067fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067be:	4b2e      	ldr	r3, [pc, #184]	; (8006878 <UART_SetConfig+0x938>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d009      	beq.n	80067de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067ca:	4b2b      	ldr	r3, [pc, #172]	; (8006878 <UART_SetConfig+0x938>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	08db      	lsrs	r3, r3, #3
 80067d0:	f003 0303 	and.w	r3, r3, #3
 80067d4:	4a25      	ldr	r2, [pc, #148]	; (800686c <UART_SetConfig+0x92c>)
 80067d6:	fa22 f303 	lsr.w	r3, r2, r3
 80067da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067dc:	e00f      	b.n	80067fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80067de:	4b23      	ldr	r3, [pc, #140]	; (800686c <UART_SetConfig+0x92c>)
 80067e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067e2:	e00c      	b.n	80067fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067e4:	4b22      	ldr	r3, [pc, #136]	; (8006870 <UART_SetConfig+0x930>)
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067e8:	e009      	b.n	80067fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067f0:	e005      	b.n	80067fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80067fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 80e9 	beq.w	80069d8 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	4a1a      	ldr	r2, [pc, #104]	; (8006874 <UART_SetConfig+0x934>)
 800680c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006810:	461a      	mov	r2, r3
 8006812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006814:	fbb3 f3f2 	udiv	r3, r3, r2
 8006818:	005a      	lsls	r2, r3, #1
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	085b      	lsrs	r3, r3, #1
 8006820:	441a      	add	r2, r3
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	fbb2 f3f3 	udiv	r3, r2, r3
 800682a:	b29b      	uxth	r3, r3
 800682c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800682e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006830:	2b0f      	cmp	r3, #15
 8006832:	d916      	bls.n	8006862 <UART_SetConfig+0x922>
 8006834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683a:	d212      	bcs.n	8006862 <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683e:	b29b      	uxth	r3, r3
 8006840:	f023 030f 	bic.w	r3, r3, #15
 8006844:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	085b      	lsrs	r3, r3, #1
 800684a:	b29b      	uxth	r3, r3
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	b29a      	uxth	r2, r3
 8006852:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006854:	4313      	orrs	r3, r2
 8006856:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800685e:	60da      	str	r2, [r3, #12]
 8006860:	e0ba      	b.n	80069d8 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006868:	e0b6      	b.n	80069d8 <UART_SetConfig+0xa98>
 800686a:	bf00      	nop
 800686c:	03d09000 	.word	0x03d09000
 8006870:	003d0900 	.word	0x003d0900
 8006874:	08007ecc 	.word	0x08007ecc
 8006878:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800687c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006880:	2b20      	cmp	r3, #32
 8006882:	dc49      	bgt.n	8006918 <UART_SetConfig+0x9d8>
 8006884:	2b00      	cmp	r3, #0
 8006886:	db7c      	blt.n	8006982 <UART_SetConfig+0xa42>
 8006888:	2b20      	cmp	r3, #32
 800688a:	d87a      	bhi.n	8006982 <UART_SetConfig+0xa42>
 800688c:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <UART_SetConfig+0x954>)
 800688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006892:	bf00      	nop
 8006894:	0800691f 	.word	0x0800691f
 8006898:	08006927 	.word	0x08006927
 800689c:	08006983 	.word	0x08006983
 80068a0:	08006983 	.word	0x08006983
 80068a4:	0800692f 	.word	0x0800692f
 80068a8:	08006983 	.word	0x08006983
 80068ac:	08006983 	.word	0x08006983
 80068b0:	08006983 	.word	0x08006983
 80068b4:	0800693f 	.word	0x0800693f
 80068b8:	08006983 	.word	0x08006983
 80068bc:	08006983 	.word	0x08006983
 80068c0:	08006983 	.word	0x08006983
 80068c4:	08006983 	.word	0x08006983
 80068c8:	08006983 	.word	0x08006983
 80068cc:	08006983 	.word	0x08006983
 80068d0:	08006983 	.word	0x08006983
 80068d4:	0800694f 	.word	0x0800694f
 80068d8:	08006983 	.word	0x08006983
 80068dc:	08006983 	.word	0x08006983
 80068e0:	08006983 	.word	0x08006983
 80068e4:	08006983 	.word	0x08006983
 80068e8:	08006983 	.word	0x08006983
 80068ec:	08006983 	.word	0x08006983
 80068f0:	08006983 	.word	0x08006983
 80068f4:	08006983 	.word	0x08006983
 80068f8:	08006983 	.word	0x08006983
 80068fc:	08006983 	.word	0x08006983
 8006900:	08006983 	.word	0x08006983
 8006904:	08006983 	.word	0x08006983
 8006908:	08006983 	.word	0x08006983
 800690c:	08006983 	.word	0x08006983
 8006910:	08006983 	.word	0x08006983
 8006914:	08006975 	.word	0x08006975
 8006918:	2b40      	cmp	r3, #64	; 0x40
 800691a:	d02e      	beq.n	800697a <UART_SetConfig+0xa3a>
 800691c:	e031      	b.n	8006982 <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800691e:	f7fc f8c1 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 8006922:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006924:	e033      	b.n	800698e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006926:	f7fc f8d3 	bl	8002ad0 <HAL_RCC_GetPCLK2Freq>
 800692a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800692c:	e02f      	b.n	800698e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800692e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006932:	4618      	mov	r0, r3
 8006934:	f7fd fd10 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800693c:	e027      	b.n	800698e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800693e:	f107 0318 	add.w	r3, r7, #24
 8006942:	4618      	mov	r0, r3
 8006944:	f7fd fe5c 	bl	8004600 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800694c:	e01f      	b.n	800698e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800694e:	4b2d      	ldr	r3, [pc, #180]	; (8006a04 <UART_SetConfig+0xac4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b00      	cmp	r3, #0
 8006958:	d009      	beq.n	800696e <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800695a:	4b2a      	ldr	r3, [pc, #168]	; (8006a04 <UART_SetConfig+0xac4>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	08db      	lsrs	r3, r3, #3
 8006960:	f003 0303 	and.w	r3, r3, #3
 8006964:	4a28      	ldr	r2, [pc, #160]	; (8006a08 <UART_SetConfig+0xac8>)
 8006966:	fa22 f303 	lsr.w	r3, r2, r3
 800696a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800696c:	e00f      	b.n	800698e <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 800696e:	4b26      	ldr	r3, [pc, #152]	; (8006a08 <UART_SetConfig+0xac8>)
 8006970:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006972:	e00c      	b.n	800698e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006974:	4b25      	ldr	r3, [pc, #148]	; (8006a0c <UART_SetConfig+0xacc>)
 8006976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006978:	e009      	b.n	800698e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800697a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006980:	e005      	b.n	800698e <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800698c:	bf00      	nop
    }

    if (pclk != 0U)
 800698e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006990:	2b00      	cmp	r3, #0
 8006992:	d021      	beq.n	80069d8 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	4a1d      	ldr	r2, [pc, #116]	; (8006a10 <UART_SetConfig+0xad0>)
 800699a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800699e:	461a      	mov	r2, r3
 80069a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	085b      	lsrs	r3, r3, #1
 80069ac:	441a      	add	r2, r3
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	2b0f      	cmp	r3, #15
 80069be:	d908      	bls.n	80069d2 <UART_SetConfig+0xa92>
 80069c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069c6:	d204      	bcs.n	80069d2 <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069ce:	60da      	str	r2, [r3, #12]
 80069d0:	e002      	b.n	80069d8 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2201      	movs	r2, #1
 80069dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	2200      	movs	r2, #0
 80069ec:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2200      	movs	r2, #0
 80069f2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80069f4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3748      	adds	r7, #72	; 0x48
 80069fc:	46bd      	mov	sp, r7
 80069fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a02:	bf00      	nop
 8006a04:	58024400 	.word	0x58024400
 8006a08:	03d09000 	.word	0x03d09000
 8006a0c:	003d0900 	.word	0x003d0900
 8006a10:	08007ecc 	.word	0x08007ecc

08006a14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00a      	beq.n	8006a3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00a      	beq.n	8006a82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	f003 0308 	and.w	r3, r3, #8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00a      	beq.n	8006aa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa8:	f003 0310 	and.w	r3, r3, #16
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00a      	beq.n	8006ac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	f003 0320 	and.w	r3, r3, #32
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d01a      	beq.n	8006b2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b12:	d10a      	bne.n	8006b2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00a      	beq.n	8006b4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	605a      	str	r2, [r3, #4]
  }
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b68:	f7fa fb12 	bl	8001190 <HAL_GetTick>
 8006b6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d10e      	bne.n	8006b9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f82f 	bl	8006bee <UART_WaitOnFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e025      	b.n	8006be6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d10e      	bne.n	8006bc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f819 	bl	8006bee <UART_WaitOnFlagUntilTimeout>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e00f      	b.n	8006be6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	603b      	str	r3, [r7, #0]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bfe:	e062      	b.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c06:	d05e      	beq.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c08:	f7fa fac2 	bl	8001190 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d302      	bcc.n	8006c1e <UART_WaitOnFlagUntilTimeout+0x30>
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d11d      	bne.n	8006c5a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c2c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0201 	bic.w	r2, r2, #1
 8006c3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e045      	b.n	8006ce6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d02e      	beq.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c76:	d126      	bne.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c90:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0201 	bic.w	r2, r2, #1
 8006ca0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e00f      	b.n	8006ce6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69da      	ldr	r2, [r3, #28]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	bf0c      	ite	eq
 8006cd6:	2301      	moveq	r3, #1
 8006cd8:	2300      	movne	r3, #0
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d08d      	beq.n	8006c00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b085      	sub	sp, #20
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d101      	bne.n	8006d04 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d00:	2302      	movs	r3, #2
 8006d02:	e027      	b.n	8006d54 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2224      	movs	r2, #36	; 0x24
 8006d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0201 	bic.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d101      	bne.n	8006d78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d74:	2302      	movs	r3, #2
 8006d76:	e02d      	b.n	8006dd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2224      	movs	r2, #36	; 0x24
 8006d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0201 	bic.w	r2, r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f84f 	bl	8006e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d101      	bne.n	8006df4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006df0:	2302      	movs	r3, #2
 8006df2:	e02d      	b.n	8006e50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2224      	movs	r2, #36	; 0x24
 8006e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0201 	bic.w	r2, r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f811 	bl	8006e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d108      	bne.n	8006e7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e78:	e031      	b.n	8006ede <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e7a:	2310      	movs	r3, #16
 8006e7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e7e:	2310      	movs	r3, #16
 8006e80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	0e5b      	lsrs	r3, r3, #25
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	0f5b      	lsrs	r3, r3, #29
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	f003 0307 	and.w	r3, r3, #7
 8006ea0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ea2:	7bbb      	ldrb	r3, [r7, #14]
 8006ea4:	7b3a      	ldrb	r2, [r7, #12]
 8006ea6:	4911      	ldr	r1, [pc, #68]	; (8006eec <UARTEx_SetNbDataToProcess+0x94>)
 8006ea8:	5c8a      	ldrb	r2, [r1, r2]
 8006eaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006eae:	7b3a      	ldrb	r2, [r7, #12]
 8006eb0:	490f      	ldr	r1, [pc, #60]	; (8006ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8006eb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006eb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	7b7a      	ldrb	r2, [r7, #13]
 8006ec4:	4909      	ldr	r1, [pc, #36]	; (8006eec <UARTEx_SetNbDataToProcess+0x94>)
 8006ec6:	5c8a      	ldrb	r2, [r1, r2]
 8006ec8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ecc:	7b7a      	ldrb	r2, [r7, #13]
 8006ece:	4908      	ldr	r1, [pc, #32]	; (8006ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8006ed0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ed2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ede:	bf00      	nop
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	08007ee4 	.word	0x08007ee4
 8006ef0:	08007eec 	.word	0x08007eec

08006ef4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006ef4:	b084      	sub	sp, #16
 8006ef6:	b480      	push	{r7}
 8006ef8:	b085      	sub	sp, #20
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	f107 001c 	add.w	r0, r7, #28
 8006f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8006f0a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8006f0e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8006f12:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8006f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8006f16:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8006f1a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <SDMMC_Init+0x50>)
 8006f28:	4013      	ands	r3, r2
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	b004      	add	sp, #16
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	ffc02c00 	.word	0xffc02c00

08006f48 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f043 0203 	orr.w	r2, r3, #3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0303 	and.w	r3, r3, #3
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006fbe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8006fc4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8006fca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <SDMMC_SendCommand+0x50>)
 8006fd8:	4013      	ands	r3, r2
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	fffee0c0 	.word	0xfffee0c0

08006ff4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	b2db      	uxtb	r3, r3
}
 8007002:	4618      	mov	r0, r3
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800700e:	b480      	push	{r7}
 8007010:	b085      	sub	sp, #20
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3314      	adds	r3, #20
 800701c:	461a      	mov	r2, r3
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	4413      	add	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800705a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8007060:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8007066:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	431a      	orrs	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800707e:	2300      	movs	r3, #0

}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800709a:	2310      	movs	r3, #16
 800709c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800709e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80070a4:	2300      	movs	r3, #0
 80070a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80070a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80070ae:	f107 0308 	add.w	r3, r7, #8
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff ff73 	bl	8006fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80070ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80070be:	2110      	movs	r1, #16
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f995 	bl	80073f0 <SDMMC_GetCmdResp1>
 80070c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070c8:	69fb      	ldr	r3, [r7, #28]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3720      	adds	r7, #32
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b088      	sub	sp, #32
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80070e0:	2307      	movs	r3, #7
 80070e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80070e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80070ea:	2300      	movs	r3, #0
 80070ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80070ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80070f4:	f107 0308 	add.w	r3, r7, #8
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff ff50 	bl	8006fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007100:	f241 3288 	movw	r2, #5000	; 0x1388
 8007104:	2107      	movs	r1, #7
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f972 	bl	80073f0 <SDMMC_GetCmdResp1>
 800710c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800710e:	69fb      	ldr	r3, [r7, #28]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3720      	adds	r7, #32
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007124:	2300      	movs	r3, #0
 8007126:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007128:	2300      	movs	r3, #0
 800712a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800712c:	2300      	movs	r3, #0
 800712e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007134:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007136:	f107 0308 	add.w	r3, r7, #8
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7ff ff2f 	bl	8006fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fb96 	bl	8007874 <SDMMC_GetCmdError>
 8007148:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800714a:	69fb      	ldr	r3, [r7, #28]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3720      	adds	r7, #32
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800715c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007162:	2308      	movs	r3, #8
 8007164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800716a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007174:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007176:	f107 0308 	add.w	r3, r7, #8
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7ff ff0f 	bl	8006fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fb28 	bl	80077d8 <SDMMC_GetCmdResp7>
 8007188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800718a:	69fb      	ldr	r3, [r7, #28]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3720      	adds	r7, #32
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80071a2:	2337      	movs	r3, #55	; 0x37
 80071a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071ac:	2300      	movs	r3, #0
 80071ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071b6:	f107 0308 	add.w	r3, r7, #8
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff feef 	bl	8006fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80071c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c6:	2137      	movs	r1, #55	; 0x37
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f911 	bl	80073f0 <SDMMC_GetCmdResp1>
 80071ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071d0:	69fb      	ldr	r3, [r7, #28]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3720      	adds	r7, #32
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b088      	sub	sp, #32
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80071e8:	2329      	movs	r3, #41	; 0x29
 80071ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071f2:	2300      	movs	r3, #0
 80071f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071fc:	f107 0308 	add.w	r3, r7, #8
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7ff fecc 	bl	8006fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fa2d 	bl	8007668 <SDMMC_GetCmdResp3>
 800720e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007210:	69fb      	ldr	r3, [r7, #28]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3720      	adds	r7, #32
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b088      	sub	sp, #32
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007228:	2306      	movs	r3, #6
 800722a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800722c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007230:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007232:	2300      	movs	r3, #0
 8007234:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800723a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800723c:	f107 0308 	add.w	r3, r7, #8
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7ff feac 	bl	8006fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007248:	f241 3288 	movw	r2, #5000	; 0x1388
 800724c:	2106      	movs	r1, #6
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f8ce 	bl	80073f0 <SDMMC_GetCmdResp1>
 8007254:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007256:	69fb      	ldr	r3, [r7, #28]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3720      	adds	r7, #32
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800726c:	2333      	movs	r3, #51	; 0x33
 800726e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007270:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007274:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007276:	2300      	movs	r3, #0
 8007278:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800727a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800727e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007280:	f107 0308 	add.w	r3, r7, #8
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7ff fe8a 	bl	8006fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800728c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007290:	2133      	movs	r1, #51	; 0x33
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f8ac 	bl	80073f0 <SDMMC_GetCmdResp1>
 8007298:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800729a:	69fb      	ldr	r3, [r7, #28]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3720      	adds	r7, #32
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b088      	sub	sp, #32
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80072b0:	2302      	movs	r3, #2
 80072b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80072b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80072b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072ba:	2300      	movs	r3, #0
 80072bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072c4:	f107 0308 	add.w	r3, r7, #8
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff fe68 	bl	8006fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f97f 	bl	80075d4 <SDMMC_GetCmdResp2>
 80072d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072d8:	69fb      	ldr	r3, [r7, #28]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3720      	adds	r7, #32
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b088      	sub	sp, #32
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80072f0:	2309      	movs	r3, #9
 80072f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80072f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80072f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072fa:	2300      	movs	r3, #0
 80072fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007302:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007304:	f107 0308 	add.w	r3, r7, #8
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f7ff fe48 	bl	8006fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f95f 	bl	80075d4 <SDMMC_GetCmdResp2>
 8007316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007318:	69fb      	ldr	r3, [r7, #28]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3720      	adds	r7, #32
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b088      	sub	sp, #32
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007330:	2303      	movs	r3, #3
 8007332:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800733a:	2300      	movs	r3, #0
 800733c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800733e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007342:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007344:	f107 0308 	add.w	r3, r7, #8
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff fe28 	bl	8006fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	2103      	movs	r1, #3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f9c7 	bl	80076e8 <SDMMC_GetCmdResp6>
 800735a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800735c:	69fb      	ldr	r3, [r7, #28]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3720      	adds	r7, #32
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b088      	sub	sp, #32
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007374:	230d      	movs	r3, #13
 8007376:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007378:	f44f 7380 	mov.w	r3, #256	; 0x100
 800737c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007386:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007388:	f107 0308 	add.w	r3, r7, #8
 800738c:	4619      	mov	r1, r3
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7ff fe06 	bl	8006fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007394:	f241 3288 	movw	r2, #5000	; 0x1388
 8007398:	210d      	movs	r1, #13
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f828 	bl	80073f0 <SDMMC_GetCmdResp1>
 80073a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073a2:	69fb      	ldr	r3, [r7, #28]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3720      	adds	r7, #32
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b088      	sub	sp, #32
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80073b8:	230d      	movs	r3, #13
 80073ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073c2:	2300      	movs	r3, #0
 80073c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073cc:	f107 0308 	add.w	r3, r7, #8
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7ff fde4 	bl	8006fa0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80073d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073dc:	210d      	movs	r1, #13
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f806 	bl	80073f0 <SDMMC_GetCmdResp1>
 80073e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073e6:	69fb      	ldr	r3, [r7, #28]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3720      	adds	r7, #32
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	460b      	mov	r3, r1
 80073fa:	607a      	str	r2, [r7, #4]
 80073fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80073fe:	4b70      	ldr	r3, [pc, #448]	; (80075c0 <SDMMC_GetCmdResp1+0x1d0>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a70      	ldr	r2, [pc, #448]	; (80075c4 <SDMMC_GetCmdResp1+0x1d4>)
 8007404:	fba2 2303 	umull	r2, r3, r2, r3
 8007408:	0a5a      	lsrs	r2, r3, #9
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	fb02 f303 	mul.w	r3, r2, r3
 8007410:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	1e5a      	subs	r2, r3, #1
 8007416:	61fa      	str	r2, [r7, #28]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d102      	bne.n	8007422 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800741c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007420:	e0c9      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007426:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	4b67      	ldr	r3, [pc, #412]	; (80075c8 <SDMMC_GetCmdResp1+0x1d8>)
 800742c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0ef      	beq.n	8007412 <SDMMC_GetCmdResp1+0x22>
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1ea      	bne.n	8007412 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2204      	movs	r2, #4
 800744c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800744e:	2304      	movs	r3, #4
 8007450:	e0b1      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d004      	beq.n	8007468 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2201      	movs	r2, #1
 8007462:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007464:	2301      	movs	r3, #1
 8007466:	e0a6      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4a58      	ldr	r2, [pc, #352]	; (80075cc <SDMMC_GetCmdResp1+0x1dc>)
 800746c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f7ff fdc0 	bl	8006ff4 <SDMMC_GetCommandResponse>
 8007474:	4603      	mov	r3, r0
 8007476:	461a      	mov	r2, r3
 8007478:	7afb      	ldrb	r3, [r7, #11]
 800747a:	4293      	cmp	r3, r2
 800747c:	d001      	beq.n	8007482 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800747e:	2301      	movs	r3, #1
 8007480:	e099      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007482:	2100      	movs	r1, #0
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f7ff fdc2 	bl	800700e <SDMMC_GetResponse>
 800748a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	4b50      	ldr	r3, [pc, #320]	; (80075d0 <SDMMC_GetCmdResp1+0x1e0>)
 8007490:	4013      	ands	r3, r2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007496:	2300      	movs	r3, #0
 8007498:	e08d      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	da02      	bge.n	80074a6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80074a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074a4:	e087      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80074b0:	2340      	movs	r3, #64	; 0x40
 80074b2:	e080      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80074be:	2380      	movs	r3, #128	; 0x80
 80074c0:	e079      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80074cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074d0:	e071      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80074dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074e0:	e069      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80074ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074f0:	e061      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d002      	beq.n	8007502 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80074fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007500:	e059      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800750c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007510:	e051      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800751c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007520:	e049      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800752c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007530:	e041      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800753c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007540:	e039      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800754c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007550:	e031      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800755c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007560:	e029      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800756c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007570:	e021      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800757c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007580:	e019      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800758c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007590:	e011      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800759c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80075a0:	e009      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f003 0308 	and.w	r3, r3, #8
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80075ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80075b0:	e001      	b.n	80075b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80075b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3720      	adds	r7, #32
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	24000000 	.word	0x24000000
 80075c4:	10624dd3 	.word	0x10624dd3
 80075c8:	00200045 	.word	0x00200045
 80075cc:	002000c5 	.word	0x002000c5
 80075d0:	fdffe008 	.word	0xfdffe008

080075d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80075dc:	4b1f      	ldr	r3, [pc, #124]	; (800765c <SDMMC_GetCmdResp2+0x88>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a1f      	ldr	r2, [pc, #124]	; (8007660 <SDMMC_GetCmdResp2+0x8c>)
 80075e2:	fba2 2303 	umull	r2, r3, r2, r3
 80075e6:	0a5b      	lsrs	r3, r3, #9
 80075e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ec:	fb02 f303 	mul.w	r3, r2, r3
 80075f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1e5a      	subs	r2, r3, #1
 80075f6:	60fa      	str	r2, [r7, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d102      	bne.n	8007602 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80075fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007600:	e026      	b.n	8007650 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007606:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0ef      	beq.n	80075f2 <SDMMC_GetCmdResp2+0x1e>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1ea      	bne.n	80075f2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007620:	f003 0304 	and.w	r3, r3, #4
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2204      	movs	r2, #4
 800762c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800762e:	2304      	movs	r3, #4
 8007630:	e00e      	b.n	8007650 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d004      	beq.n	8007648 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007644:	2301      	movs	r3, #1
 8007646:	e003      	b.n	8007650 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a06      	ldr	r2, [pc, #24]	; (8007664 <SDMMC_GetCmdResp2+0x90>)
 800764c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	24000000 	.word	0x24000000
 8007660:	10624dd3 	.word	0x10624dd3
 8007664:	002000c5 	.word	0x002000c5

08007668 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007670:	4b1a      	ldr	r3, [pc, #104]	; (80076dc <SDMMC_GetCmdResp3+0x74>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a1a      	ldr	r2, [pc, #104]	; (80076e0 <SDMMC_GetCmdResp3+0x78>)
 8007676:	fba2 2303 	umull	r2, r3, r2, r3
 800767a:	0a5b      	lsrs	r3, r3, #9
 800767c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007680:	fb02 f303 	mul.w	r3, r2, r3
 8007684:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	1e5a      	subs	r2, r3, #1
 800768a:	60fa      	str	r2, [r7, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d102      	bne.n	8007696 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007690:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007694:	e01b      	b.n	80076ce <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0ef      	beq.n	8007686 <SDMMC_GetCmdResp3+0x1e>
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1ea      	bne.n	8007686 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d004      	beq.n	80076c6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2204      	movs	r2, #4
 80076c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076c2:	2304      	movs	r3, #4
 80076c4:	e003      	b.n	80076ce <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a06      	ldr	r2, [pc, #24]	; (80076e4 <SDMMC_GetCmdResp3+0x7c>)
 80076ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	24000000 	.word	0x24000000
 80076e0:	10624dd3 	.word	0x10624dd3
 80076e4:	002000c5 	.word	0x002000c5

080076e8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	460b      	mov	r3, r1
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80076f6:	4b35      	ldr	r3, [pc, #212]	; (80077cc <SDMMC_GetCmdResp6+0xe4>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a35      	ldr	r2, [pc, #212]	; (80077d0 <SDMMC_GetCmdResp6+0xe8>)
 80076fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007700:	0a5b      	lsrs	r3, r3, #9
 8007702:	f241 3288 	movw	r2, #5000	; 0x1388
 8007706:	fb02 f303 	mul.w	r3, r2, r3
 800770a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	1e5a      	subs	r2, r3, #1
 8007710:	61fa      	str	r2, [r7, #28]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d102      	bne.n	800771c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007716:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800771a:	e052      	b.n	80077c2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007720:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0ef      	beq.n	800770c <SDMMC_GetCmdResp6+0x24>
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1ea      	bne.n	800770c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800773a:	f003 0304 	and.w	r3, r3, #4
 800773e:	2b00      	cmp	r3, #0
 8007740:	d004      	beq.n	800774c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2204      	movs	r2, #4
 8007746:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007748:	2304      	movs	r3, #4
 800774a:	e03a      	b.n	80077c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	d004      	beq.n	8007762 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2201      	movs	r2, #1
 800775c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800775e:	2301      	movs	r3, #1
 8007760:	e02f      	b.n	80077c2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f7ff fc46 	bl	8006ff4 <SDMMC_GetCommandResponse>
 8007768:	4603      	mov	r3, r0
 800776a:	461a      	mov	r2, r3
 800776c:	7afb      	ldrb	r3, [r7, #11]
 800776e:	4293      	cmp	r3, r2
 8007770:	d001      	beq.n	8007776 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007772:	2301      	movs	r3, #1
 8007774:	e025      	b.n	80077c2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	4a16      	ldr	r2, [pc, #88]	; (80077d4 <SDMMC_GetCmdResp6+0xec>)
 800777a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800777c:	2100      	movs	r1, #0
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f7ff fc45 	bl	800700e <SDMMC_GetResponse>
 8007784:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d106      	bne.n	800779e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	0c1b      	lsrs	r3, r3, #16
 8007794:	b29a      	uxth	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800779a:	2300      	movs	r3, #0
 800779c:	e011      	b.n	80077c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80077a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077ac:	e009      	b.n	80077c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80077b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077bc:	e001      	b.n	80077c2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80077be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3720      	adds	r7, #32
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	24000000 	.word	0x24000000
 80077d0:	10624dd3 	.word	0x10624dd3
 80077d4:	002000c5 	.word	0x002000c5

080077d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80077e0:	4b22      	ldr	r3, [pc, #136]	; (800786c <SDMMC_GetCmdResp7+0x94>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a22      	ldr	r2, [pc, #136]	; (8007870 <SDMMC_GetCmdResp7+0x98>)
 80077e6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ea:	0a5b      	lsrs	r3, r3, #9
 80077ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f0:	fb02 f303 	mul.w	r3, r2, r3
 80077f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	1e5a      	subs	r2, r3, #1
 80077fa:	60fa      	str	r2, [r7, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d102      	bne.n	8007806 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007800:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007804:	e02c      	b.n	8007860 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007812:	2b00      	cmp	r3, #0
 8007814:	d0ef      	beq.n	80077f6 <SDMMC_GetCmdResp7+0x1e>
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1ea      	bne.n	80077f6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007824:	f003 0304 	and.w	r3, r3, #4
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2204      	movs	r2, #4
 8007830:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007832:	2304      	movs	r3, #4
 8007834:	e014      	b.n	8007860 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d004      	beq.n	800784c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007848:	2301      	movs	r3, #1
 800784a:	e009      	b.n	8007860 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2240      	movs	r2, #64	; 0x40
 800785c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800785e:	2300      	movs	r3, #0

}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	24000000 	.word	0x24000000
 8007870:	10624dd3 	.word	0x10624dd3

08007874 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800787c:	4b11      	ldr	r3, [pc, #68]	; (80078c4 <SDMMC_GetCmdError+0x50>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a11      	ldr	r2, [pc, #68]	; (80078c8 <SDMMC_GetCmdError+0x54>)
 8007882:	fba2 2303 	umull	r2, r3, r2, r3
 8007886:	0a5b      	lsrs	r3, r3, #9
 8007888:	f241 3288 	movw	r2, #5000	; 0x1388
 800788c:	fb02 f303 	mul.w	r3, r2, r3
 8007890:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	1e5a      	subs	r2, r3, #1
 8007896:	60fa      	str	r2, [r7, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d102      	bne.n	80078a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800789c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078a0:	e009      	b.n	80078b6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0f1      	beq.n	8007892 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a06      	ldr	r2, [pc, #24]	; (80078cc <SDMMC_GetCmdError+0x58>)
 80078b2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	24000000 	.word	0x24000000
 80078c8:	10624dd3 	.word	0x10624dd3
 80078cc:	002000c5 	.word	0x002000c5

080078d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078d0:	b084      	sub	sp, #16
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	f107 001c 	add.w	r0, r7, #28
 80078de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d120      	bne.n	800792a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	4b2a      	ldr	r3, [pc, #168]	; (80079a4 <USB_CoreInit+0xd4>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800790c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800790e:	2b01      	cmp	r3, #1
 8007910:	d105      	bne.n	800791e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fa60 	bl	8007de4 <USB_CoreReset>
 8007924:	4603      	mov	r3, r0
 8007926:	73fb      	strb	r3, [r7, #15]
 8007928:	e01a      	b.n	8007960 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fa54 	bl	8007de4 <USB_CoreReset>
 800793c:	4603      	mov	r3, r0
 800793e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d106      	bne.n	8007954 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	639a      	str	r2, [r3, #56]	; 0x38
 8007952:	e005      	b.n	8007960 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	2b01      	cmp	r3, #1
 8007964:	d116      	bne.n	8007994 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800796a:	b29a      	uxth	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007974:	4b0c      	ldr	r3, [pc, #48]	; (80079a8 <USB_CoreInit+0xd8>)
 8007976:	4313      	orrs	r3, r2
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f043 0206 	orr.w	r2, r3, #6
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f043 0220 	orr.w	r2, r3, #32
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007994:	7bfb      	ldrb	r3, [r7, #15]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079a0:	b004      	add	sp, #16
 80079a2:	4770      	bx	lr
 80079a4:	ffbdffbf 	.word	0xffbdffbf
 80079a8:	03ee0000 	.word	0x03ee0000

080079ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f023 0201 	bic.w	r2, r3, #1
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	460b      	mov	r3, r1
 80079d8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d106      	bne.n	80079fa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	60da      	str	r2, [r3, #12]
 80079f8:	e00b      	b.n	8007a12 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80079fa:	78fb      	ldrb	r3, [r7, #3]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d106      	bne.n	8007a0e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	60da      	str	r2, [r3, #12]
 8007a0c:	e001      	b.n	8007a12 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e003      	b.n	8007a1a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007a12:	2032      	movs	r0, #50	; 0x32
 8007a14:	f7f9 fbc8 	bl	80011a8 <HAL_Delay>

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
	...

08007a24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a24:	b084      	sub	sp, #16
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b086      	sub	sp, #24
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a3e:	2300      	movs	r3, #0
 8007a40:	613b      	str	r3, [r7, #16]
 8007a42:	e009      	b.n	8007a58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	3340      	adds	r3, #64	; 0x40
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	2200      	movs	r2, #0
 8007a50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	3301      	adds	r3, #1
 8007a56:	613b      	str	r3, [r7, #16]
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	2b0e      	cmp	r3, #14
 8007a5c:	d9f2      	bls.n	8007a44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d11c      	bne.n	8007a9e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a72:	f043 0302 	orr.w	r3, r3, #2
 8007a76:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	e005      	b.n	8007aaa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007abc:	4619      	mov	r1, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	680b      	ldr	r3, [r1, #0]
 8007ac8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d10c      	bne.n	8007aea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d104      	bne.n	8007ae0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f949 	bl	8007d70 <USB_SetDevSpeed>
 8007ade:	e008      	b.n	8007af2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f944 	bl	8007d70 <USB_SetDevSpeed>
 8007ae8:	e003      	b.n	8007af2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007aea:	2103      	movs	r1, #3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f93f 	bl	8007d70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007af2:	2110      	movs	r1, #16
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f8f3 	bl	8007ce0 <USB_FlushTxFifo>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f911 	bl	8007d2c <USB_FlushRxFifo>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b26:	461a      	mov	r2, r3
 8007b28:	2300      	movs	r3, #0
 8007b2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b32:	461a      	mov	r2, r3
 8007b34:	2300      	movs	r3, #0
 8007b36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b38:	2300      	movs	r3, #0
 8007b3a:	613b      	str	r3, [r7, #16]
 8007b3c:	e043      	b.n	8007bc6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b54:	d118      	bne.n	8007b88 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b68:	461a      	mov	r2, r3
 8007b6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	e013      	b.n	8007b9a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	e008      	b.n	8007b9a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b94:	461a      	mov	r2, r3
 8007b96:	2300      	movs	r3, #0
 8007b98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	2300      	movs	r3, #0
 8007baa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb8:	461a      	mov	r2, r3
 8007bba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	613b      	str	r3, [r7, #16]
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d3b7      	bcc.n	8007b3e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bce:	2300      	movs	r3, #0
 8007bd0:	613b      	str	r3, [r7, #16]
 8007bd2:	e043      	b.n	8007c5c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007be6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bea:	d118      	bne.n	8007c1e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	015a      	lsls	r2, r3, #5
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	e013      	b.n	8007c30 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c14:	461a      	mov	r2, r3
 8007c16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c1a:	6013      	str	r3, [r2, #0]
 8007c1c:	e008      	b.n	8007c30 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	2300      	movs	r3, #0
 8007c40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	613b      	str	r3, [r7, #16]
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d3b7      	bcc.n	8007bd4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007c84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d105      	bne.n	8007c98 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	f043 0210 	orr.w	r2, r3, #16
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699a      	ldr	r2, [r3, #24]
 8007c9c:	4b0e      	ldr	r3, [pc, #56]	; (8007cd8 <USB_DevInit+0x2b4>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d005      	beq.n	8007cb6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	f043 0208 	orr.w	r2, r3, #8
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d105      	bne.n	8007cc8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	699a      	ldr	r2, [r3, #24]
 8007cc0:	4b06      	ldr	r3, [pc, #24]	; (8007cdc <USB_DevInit+0x2b8>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cd4:	b004      	add	sp, #16
 8007cd6:	4770      	bx	lr
 8007cd8:	803c3800 	.word	0x803c3800
 8007cdc:	40000004 	.word	0x40000004

08007ce0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	019b      	lsls	r3, r3, #6
 8007cf2:	f043 0220 	orr.w	r2, r3, #32
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4a09      	ldr	r2, [pc, #36]	; (8007d28 <USB_FlushTxFifo+0x48>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d901      	bls.n	8007d0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e006      	b.n	8007d1a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	f003 0320 	and.w	r3, r3, #32
 8007d14:	2b20      	cmp	r3, #32
 8007d16:	d0f0      	beq.n	8007cfa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	00030d40 	.word	0x00030d40

08007d2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2210      	movs	r2, #16
 8007d3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	3301      	adds	r3, #1
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	4a09      	ldr	r2, [pc, #36]	; (8007d6c <USB_FlushRxFifo+0x40>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d901      	bls.n	8007d50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e006      	b.n	8007d5e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	f003 0310 	and.w	r3, r3, #16
 8007d58:	2b10      	cmp	r3, #16
 8007d5a:	d0f0      	beq.n	8007d3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	00030d40 	.word	0x00030d40

08007d70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	68f9      	ldr	r1, [r7, #12]
 8007d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d90:	4313      	orrs	r3, r2
 8007d92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b085      	sub	sp, #20
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007dbc:	f023 0303 	bic.w	r3, r3, #3
 8007dc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dd0:	f043 0302 	orr.w	r3, r3, #2
 8007dd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3301      	adds	r3, #1
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	4a13      	ldr	r2, [pc, #76]	; (8007e48 <USB_CoreReset+0x64>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d901      	bls.n	8007e02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e01b      	b.n	8007e3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	daf2      	bge.n	8007df0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f043 0201 	orr.w	r2, r3, #1
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4a09      	ldr	r2, [pc, #36]	; (8007e48 <USB_CoreReset+0x64>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d901      	bls.n	8007e2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e006      	b.n	8007e3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d0f0      	beq.n	8007e1a <USB_CoreReset+0x36>

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	00030d40 	.word	0x00030d40

08007e4c <__libc_init_array>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	4d0d      	ldr	r5, [pc, #52]	; (8007e84 <__libc_init_array+0x38>)
 8007e50:	4c0d      	ldr	r4, [pc, #52]	; (8007e88 <__libc_init_array+0x3c>)
 8007e52:	1b64      	subs	r4, r4, r5
 8007e54:	10a4      	asrs	r4, r4, #2
 8007e56:	2600      	movs	r6, #0
 8007e58:	42a6      	cmp	r6, r4
 8007e5a:	d109      	bne.n	8007e70 <__libc_init_array+0x24>
 8007e5c:	4d0b      	ldr	r5, [pc, #44]	; (8007e8c <__libc_init_array+0x40>)
 8007e5e:	4c0c      	ldr	r4, [pc, #48]	; (8007e90 <__libc_init_array+0x44>)
 8007e60:	f000 f820 	bl	8007ea4 <_init>
 8007e64:	1b64      	subs	r4, r4, r5
 8007e66:	10a4      	asrs	r4, r4, #2
 8007e68:	2600      	movs	r6, #0
 8007e6a:	42a6      	cmp	r6, r4
 8007e6c:	d105      	bne.n	8007e7a <__libc_init_array+0x2e>
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}
 8007e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e74:	4798      	blx	r3
 8007e76:	3601      	adds	r6, #1
 8007e78:	e7ee      	b.n	8007e58 <__libc_init_array+0xc>
 8007e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e7e:	4798      	blx	r3
 8007e80:	3601      	adds	r6, #1
 8007e82:	e7f2      	b.n	8007e6a <__libc_init_array+0x1e>
 8007e84:	08007efc 	.word	0x08007efc
 8007e88:	08007efc 	.word	0x08007efc
 8007e8c:	08007efc 	.word	0x08007efc
 8007e90:	08007f00 	.word	0x08007f00

08007e94 <memset>:
 8007e94:	4402      	add	r2, r0
 8007e96:	4603      	mov	r3, r0
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d100      	bne.n	8007e9e <memset+0xa>
 8007e9c:	4770      	bx	lr
 8007e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007ea2:	e7f9      	b.n	8007e98 <memset+0x4>

08007ea4 <_init>:
 8007ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea6:	bf00      	nop
 8007ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eaa:	bc08      	pop	{r3}
 8007eac:	469e      	mov	lr, r3
 8007eae:	4770      	bx	lr

08007eb0 <_fini>:
 8007eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb2:	bf00      	nop
 8007eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb6:	bc08      	pop	{r3}
 8007eb8:	469e      	mov	lr, r3
 8007eba:	4770      	bx	lr
