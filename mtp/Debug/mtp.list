
mtp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000684c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080069ec  080069ec  000169ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad0  08006ad0  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08006ad0  08006ad0  00016ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ad8  08006ad8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ad8  08006ad8  00016ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08006ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047bc  20000094  08006b74  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004850  08006b74  00024850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033880  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a11  00000000  00000000  00053944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  00059358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f0  00000000  00000000  0005ac00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d243  00000000  00000000  0005c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000281eb  00000000  00000000  00079733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fd11  00000000  00000000  000a191e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014162f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b8  00000000  00000000  00141684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001ba02  00000000  00000000  0014603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080069d4 	.word	0x080069d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	080069d4 	.word	0x080069d4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <vApplicationGetIdleTaskMemory+0x10>)
 80004da:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <vApplicationGetIdleTaskMemory+0x14>)
 80004de:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	200002b0 	.word	0x200002b0
 80004ec:	200000b0 	.word	0x200000b0

080004f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f4:	2400      	movs	r4, #0
 80004f6:	9403      	str	r4, [sp, #12]
 80004f8:	9404      	str	r4, [sp, #16]
 80004fa:	9405      	str	r4, [sp, #20]
 80004fc:	9406      	str	r4, [sp, #24]
 80004fe:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000500:	9400      	str	r4, [sp, #0]
 8000502:	4b26      	ldr	r3, [pc, #152]	; (800059c <MX_GPIO_Init+0xac>)
 8000504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000506:	f042 0204 	orr.w	r2, r2, #4
 800050a:	631a      	str	r2, [r3, #48]	; 0x30
 800050c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800050e:	f002 0204 	and.w	r2, r2, #4
 8000512:	9200      	str	r2, [sp, #0]
 8000514:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	9401      	str	r4, [sp, #4]
 8000518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800051a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800051e:	631a      	str	r2, [r3, #48]	; 0x30
 8000520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000522:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000526:	9201      	str	r2, [sp, #4]
 8000528:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	9402      	str	r4, [sp, #8]
 800052c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800052e:	f042 0201 	orr.w	r2, r2, #1
 8000532:	631a      	str	r2, [r3, #48]	; 0x30
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	9302      	str	r3, [sp, #8]
 800053c:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800053e:	4d18      	ldr	r5, [pc, #96]	; (80005a0 <MX_GPIO_Init+0xb0>)
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	4628      	mov	r0, r5
 8000548:	f000 fb42 	bl	8000bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800054c:	4622      	mov	r2, r4
 800054e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000552:	4628      	mov	r0, r5
 8000554:	f000 fb3c 	bl	8000bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800055c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800055e:	2311      	movs	r3, #17
 8000560:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000566:	a903      	add	r1, sp, #12
 8000568:	4628      	mov	r0, r5
 800056a:	f000 fa59 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800056e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000572:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000574:	2601      	movs	r6, #1
 8000576:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800057c:	a903      	add	r1, sp, #12
 800057e:	4628      	mov	r0, r5
 8000580:	f000 fa4e 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000584:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000586:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800058a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800058c:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800058e:	a903      	add	r1, sp, #12
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <MX_GPIO_Init+0xb4>)
 8000592:	f000 fa45 	bl	8000a20 <HAL_GPIO_Init>

}
 8000596:	b008      	add	sp, #32
 8000598:	bd70      	pop	{r4, r5, r6, pc}
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800
 80005a0:	40020800 	.word	0x40020800
 80005a4:	40020000 	.word	0x40020000

080005a8 <startMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startMainTask */
void startMainTask(void const * argument)
{
 80005a8:	b508      	push	{r3, lr}
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80005aa:	f005 ff3b 	bl	8006424 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005ae:	2001      	movs	r0, #1
 80005b0:	f004 faf3 	bl	8004b9a <osDelay>
  for(;;)
 80005b4:	e7fb      	b.n	80005ae <startMainTask+0x6>
	...

080005b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80005ba:	6802      	ldr	r2, [r0, #0]
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0x14>)
 80005be:	429a      	cmp	r2, r3
 80005c0:	d000      	beq.n	80005c4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005c2:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80005c4:	f000 f9b2 	bl	800092c <HAL_IncTick>
}
 80005c8:	e7fb      	b.n	80005c2 <HAL_TIM_PeriodElapsedCallback+0xa>
 80005ca:	bf00      	nop
 80005cc:	40014800 	.word	0x40014800

080005d0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <Error_Handler+0x2>

080005d4 <MX_USART1_UART_Init>:
{
 80005d4:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80005d6:	480a      	ldr	r0, [pc, #40]	; (8000600 <MX_USART1_UART_Init+0x2c>)
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MX_USART1_UART_Init+0x30>)
 80005da:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80005dc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80005e0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	2300      	movs	r3, #0
 80005e4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005e8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005ea:	220c      	movs	r2, #12
 80005ec:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005f2:	f001 fe3b 	bl	800226c <HAL_UART_Init>
 80005f6:	b900      	cbnz	r0, 80005fa <MX_USART1_UART_Init+0x26>
}
 80005f8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80005fa:	f7ff ffe9 	bl	80005d0 <Error_Handler>
 80005fe:	bf00      	nop
 8000600:	200040c8 	.word	0x200040c8
 8000604:	40011000 	.word	0x40011000

08000608 <SystemClock_Config>:
{
 8000608:	b500      	push	{lr}
 800060a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060c:	2230      	movs	r2, #48	; 0x30
 800060e:	2100      	movs	r1, #0
 8000610:	a808      	add	r0, sp, #32
 8000612:	f006 f8a7 	bl	8006764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000616:	2300      	movs	r3, #0
 8000618:	9303      	str	r3, [sp, #12]
 800061a:	9304      	str	r3, [sp, #16]
 800061c:	9305      	str	r3, [sp, #20]
 800061e:	9306      	str	r3, [sp, #24]
 8000620:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <SystemClock_Config+0x9c>)
 8000626:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000628:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800062c:	6411      	str	r1, [r2, #64]	; 0x40
 800062e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000630:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000634:	9201      	str	r2, [sp, #4]
 8000636:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	9302      	str	r3, [sp, #8]
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <SystemClock_Config+0xa0>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064a:	9302      	str	r3, [sp, #8]
 800064c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064e:	2301      	movs	r3, #1
 8000650:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000656:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000660:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000662:	2219      	movs	r2, #25
 8000664:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000666:	22c0      	movs	r2, #192	; 0xc0
 8000668:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	a808      	add	r0, sp, #32
 8000672:	f001 f8b1 	bl	80017d8 <HAL_RCC_OscConfig>
 8000676:	b988      	cbnz	r0, 800069c <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000688:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800068c:	2103      	movs	r1, #3
 800068e:	a803      	add	r0, sp, #12
 8000690:	f001 faee 	bl	8001c70 <HAL_RCC_ClockConfig>
 8000694:	b920      	cbnz	r0, 80006a0 <SystemClock_Config+0x98>
}
 8000696:	b015      	add	sp, #84	; 0x54
 8000698:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800069c:	f7ff ff98 	bl	80005d0 <Error_Handler>
    Error_Handler();
 80006a0:	f7ff ff96 	bl	80005d0 <Error_Handler>
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <main>:
{
 80006ac:	b530      	push	{r4, r5, lr}
 80006ae:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80006b0:	f000 f922 	bl	80008f8 <HAL_Init>
  SystemClock_Config();
 80006b4:	f7ff ffa8 	bl	8000608 <SystemClock_Config>
  MX_GPIO_Init();
 80006b8:	f7ff ff1a 	bl	80004f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006bc:	f7ff ff8a 	bl	80005d4 <MX_USART1_UART_Init>
  osThreadDef(mainTask, startMainTask, osPriorityNormal, 0, 128);
 80006c0:	ac01      	add	r4, sp, #4
 80006c2:	4d08      	ldr	r5, [pc, #32]	; (80006e4 <main+0x38>)
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 80006d0:	2100      	movs	r1, #0
 80006d2:	a801      	add	r0, sp, #4
 80006d4:	f004 fa2c 	bl	8004b30 <osThreadCreate>
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <main+0x3c>)
 80006da:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80006dc:	f004 fa23 	bl	8004b26 <osKernelStart>
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <main+0x34>
 80006e2:	bf00      	nop
 80006e4:	080069ec 	.word	0x080069ec
 80006e8:	200040c4 	.word	0x200040c4

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b500      	push	{lr}
 80006ee:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f0:	2200      	movs	r2, #0
 80006f2:	9200      	str	r2, [sp, #0]
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <HAL_MspInit+0x40>)
 80006f6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80006f8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80006fc:	6459      	str	r1, [r3, #68]	; 0x44
 80006fe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000700:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000704:	9100      	str	r1, [sp, #0]
 8000706:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	9201      	str	r2, [sp, #4]
 800070a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800070c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000710:	6419      	str	r1, [r3, #64]	; 0x40
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800071c:	210f      	movs	r1, #15
 800071e:	f06f 0001 	mvn.w	r0, #1
 8000722:	f000 f93b 	bl	800099c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	b003      	add	sp, #12
 8000728:	f85d fb04 	ldr.w	pc, [sp], #4
 800072c:	40023800 	.word	0x40023800

08000730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000730:	b500      	push	{lr}
 8000732:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	2300      	movs	r3, #0
 8000736:	9303      	str	r3, [sp, #12]
 8000738:	9304      	str	r3, [sp, #16]
 800073a:	9305      	str	r3, [sp, #20]
 800073c:	9306      	str	r3, [sp, #24]
 800073e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000740:	6802      	ldr	r2, [r0, #0]
 8000742:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000746:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800074a:	429a      	cmp	r2, r3
 800074c:	d002      	beq.n	8000754 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800074e:	b009      	add	sp, #36	; 0x24
 8000750:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000754:	2200      	movs	r2, #0
 8000756:	9201      	str	r2, [sp, #4]
 8000758:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800075c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800075e:	f041 0110 	orr.w	r1, r1, #16
 8000762:	6459      	str	r1, [r3, #68]	; 0x44
 8000764:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000766:	f001 0110 	and.w	r1, r1, #16
 800076a:	9101      	str	r1, [sp, #4]
 800076c:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	9202      	str	r2, [sp, #8]
 8000770:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000772:	f041 0101 	orr.w	r1, r1, #1
 8000776:	6319      	str	r1, [r3, #48]	; 0x30
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	9302      	str	r3, [sp, #8]
 8000780:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000782:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000786:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000792:	2307      	movs	r3, #7
 8000794:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	a903      	add	r1, sp, #12
 8000798:	4801      	ldr	r0, [pc, #4]	; (80007a0 <HAL_UART_MspInit+0x70>)
 800079a:	f000 f941 	bl	8000a20 <HAL_GPIO_Init>
}
 800079e:	e7d6      	b.n	800074e <HAL_UART_MspInit+0x1e>
 80007a0:	40020000 	.word	0x40020000

080007a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a4:	b510      	push	{r4, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	201a      	movs	r0, #26
 80007ae:	f000 f8f5 	bl	800099c <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80007b2:	201a      	movs	r0, #26
 80007b4:	f000 f926 	bl	8000a04 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80007b8:	2400      	movs	r4, #0
 80007ba:	9401      	str	r4, [sp, #4]
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <HAL_InitTick+0x68>)
 80007be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007c0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80007c4:	645a      	str	r2, [r3, #68]	; 0x44
 80007c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007cc:	9301      	str	r3, [sp, #4]
 80007ce:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007d0:	a902      	add	r1, sp, #8
 80007d2:	a803      	add	r0, sp, #12
 80007d4:	f001 fb22 	bl	8001e1c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007d8:	f001 fb10 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <HAL_InitTick+0x6c>)
 80007de:	fba3 2300 	umull	r2, r3, r3, r0
 80007e2:	0c9b      	lsrs	r3, r3, #18
 80007e4:	3b01      	subs	r3, #1

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80007e6:	480b      	ldr	r0, [pc, #44]	; (8000814 <HAL_InitTick+0x70>)
 80007e8:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <HAL_InitTick+0x74>)
 80007ea:	6002      	str	r2, [r0, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80007ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007f0:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80007f2:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 80007f4:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	6084      	str	r4, [r0, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80007f8:	f001 fc7c 	bl	80020f4 <HAL_TIM_Base_Init>
 80007fc:	b110      	cbz	r0, 8000804 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
  }

  /* Return function status */
  return HAL_ERROR;
 80007fe:	2001      	movs	r0, #1
}
 8000800:	b008      	add	sp, #32
 8000802:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim11);
 8000804:	4803      	ldr	r0, [pc, #12]	; (8000814 <HAL_InitTick+0x70>)
 8000806:	f001 fb29 	bl	8001e5c <HAL_TIM_Base_Start_IT>
 800080a:	e7f9      	b.n	8000800 <HAL_InitTick+0x5c>
 800080c:	40023800 	.word	0x40023800
 8000810:	431bde83 	.word	0x431bde83
 8000814:	2000410c 	.word	0x2000410c
 8000818:	40014800 	.word	0x40014800

0800081c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler>

0800081e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <HardFault_Handler>

08000820 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <MemManage_Handler>

08000822 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <BusFault_Handler>

08000824 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler>

08000826 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000826:	4770      	bx	lr

08000828 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000828:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800082a:	4802      	ldr	r0, [pc, #8]	; (8000834 <TIM1_TRG_COM_TIM11_IRQHandler+0xc>)
 800082c:	f001 fb56 	bl	8001edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000830:	bd08      	pop	{r3, pc}
 8000832:	bf00      	nop
 8000834:	2000410c 	.word	0x2000410c

08000838 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000838:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800083a:	4802      	ldr	r0, [pc, #8]	; (8000844 <OTG_FS_IRQHandler+0xc>)
 800083c:	f000 fedf 	bl	80015fe <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000840:	bd08      	pop	{r3, pc}
 8000842:	bf00      	nop
 8000844:	2000453c 	.word	0x2000453c

08000848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000848:	b510      	push	{r4, lr}
 800084a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800084c:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <_sbrk+0x38>)
 800084e:	490d      	ldr	r1, [pc, #52]	; (8000884 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <_sbrk+0x40>)
 8000852:	6800      	ldr	r0, [r0, #0]
 8000854:	b140      	cbz	r0, 8000868 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000856:	480c      	ldr	r0, [pc, #48]	; (8000888 <_sbrk+0x40>)
 8000858:	6800      	ldr	r0, [r0, #0]
 800085a:	4403      	add	r3, r0
 800085c:	1a52      	subs	r2, r2, r1
 800085e:	4293      	cmp	r3, r2
 8000860:	d806      	bhi.n	8000870 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000862:	4a09      	ldr	r2, [pc, #36]	; (8000888 <_sbrk+0x40>)
 8000864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000866:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <_sbrk+0x40>)
 800086a:	4c08      	ldr	r4, [pc, #32]	; (800088c <_sbrk+0x44>)
 800086c:	6004      	str	r4, [r0, #0]
 800086e:	e7f2      	b.n	8000856 <_sbrk+0xe>
    errno = ENOMEM;
 8000870:	f005 ff2e 	bl	80066d0 <__errno>
 8000874:	230c      	movs	r3, #12
 8000876:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800087c:	e7f3      	b.n	8000866 <_sbrk+0x1e>
 800087e:	bf00      	nop
 8000880:	20020000 	.word	0x20020000
 8000884:	00000400 	.word	0x00000400
 8000888:	20000364 	.word	0x20000364
 800088c:	20004850 	.word	0x20004850

08000890 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000890:	4a03      	ldr	r2, [pc, #12]	; (80008a0 <SystemInit+0x10>)
 8000892:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000896:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800089a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089e:	4770      	bx	lr
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008aa:	490e      	ldr	r1, [pc, #56]	; (80008e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008ac:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008c0:	4c0b      	ldr	r4, [pc, #44]	; (80008f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008ce:	f7ff ffdf 	bl	8000890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008d2:	f005 ff03 	bl	80066dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d6:	f7ff fee9 	bl	80006ac <main>
  bx  lr    
 80008da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80008e8:	08006ae0 	.word	0x08006ae0
  ldr r2, =_sbss
 80008ec:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80008f0:	20004850 	.word	0x20004850

080008f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_Init+0x30>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000902:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800090a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000912:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000914:	2003      	movs	r0, #3
 8000916:	f000 f82f 	bl	8000978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091a:	200f      	movs	r0, #15
 800091c:	f7ff ff42 	bl	80007a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000920:	f7ff fee4 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000924:	2000      	movs	r0, #0
 8000926:	bd08      	pop	{r3, pc}
 8000928:	40023c00 	.word	0x40023c00

0800092c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800092c:	4a03      	ldr	r2, [pc, #12]	; (800093c <HAL_IncTick+0x10>)
 800092e:	6811      	ldr	r1, [r2, #0]
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <HAL_IncTick+0x14>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	440b      	add	r3, r1
 8000936:	6013      	str	r3, [r2, #0]
}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20004154 	.word	0x20004154
 8000940:	20000004 	.word	0x20000004

08000944 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000944:	4b01      	ldr	r3, [pc, #4]	; (800094c <HAL_GetTick+0x8>)
 8000946:	6818      	ldr	r0, [r3, #0]
}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20004154 	.word	0x20004154

08000950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000950:	b538      	push	{r3, r4, r5, lr}
 8000952:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff fff6 	bl	8000944 <HAL_GetTick>
 8000958:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800095e:	d002      	beq.n	8000966 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <HAL_Delay+0x24>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000966:	f7ff ffed 	bl	8000944 <HAL_GetTick>
 800096a:	1b40      	subs	r0, r0, r5
 800096c:	42a0      	cmp	r0, r4
 800096e:	d3fa      	bcc.n	8000966 <HAL_Delay+0x16>
  {
  }
}
 8000970:	bd38      	pop	{r3, r4, r5, pc}
 8000972:	bf00      	nop
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800097a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000980:	041b      	lsls	r3, r3, #16
 8000982:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000984:	0200      	lsls	r0, r0, #8
 8000986:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800098a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000994:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000996:	4770      	bx	lr
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800099c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <HAL_NVIC_SetPriority+0x60>)
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a6:	f1c3 0407 	rsb	r4, r3, #7
 80009aa:	2c04      	cmp	r4, #4
 80009ac:	bf28      	it	cs
 80009ae:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b0:	1d1d      	adds	r5, r3, #4
 80009b2:	2d06      	cmp	r5, #6
 80009b4:	d918      	bls.n	80009e8 <HAL_NVIC_SetPriority+0x4c>
 80009b6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80009bc:	fa05 f404 	lsl.w	r4, r5, r4
 80009c0:	ea21 0104 	bic.w	r1, r1, r4
 80009c4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c6:	fa05 f303 	lsl.w	r3, r5, r3
 80009ca:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ce:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80009d0:	2800      	cmp	r0, #0
 80009d2:	db0b      	blt.n	80009ec <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d4:	0109      	lsls	r1, r1, #4
 80009d6:	b2c9      	uxtb	r1, r1
 80009d8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80009dc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80009e0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80009e4:	bc30      	pop	{r4, r5}
 80009e6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e8:	2300      	movs	r3, #0
 80009ea:	e7e5      	b.n	80009b8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	f000 000f 	and.w	r0, r0, #15
 80009f0:	0109      	lsls	r1, r1, #4
 80009f2:	b2c9      	uxtb	r1, r1
 80009f4:	4b02      	ldr	r3, [pc, #8]	; (8000a00 <HAL_NVIC_SetPriority+0x64>)
 80009f6:	5419      	strb	r1, [r3, r0]
 80009f8:	e7f4      	b.n	80009e4 <HAL_NVIC_SetPriority+0x48>
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00
 8000a00:	e000ed14 	.word	0xe000ed14

08000a04 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a04:	2800      	cmp	r0, #0
 8000a06:	db07      	blt.n	8000a18 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a08:	f000 021f 	and.w	r2, r0, #31
 8000a0c:	0940      	lsrs	r0, r0, #5
 8000a0e:	2301      	movs	r3, #1
 8000a10:	4093      	lsls	r3, r2
 8000a12:	4a02      	ldr	r2, [pc, #8]	; (8000a1c <HAL_NVIC_EnableIRQ+0x18>)
 8000a14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a20:	2300      	movs	r3, #0
 8000a22:	2b0f      	cmp	r3, #15
 8000a24:	f200 80cb 	bhi.w	8000bbe <HAL_GPIO_Init+0x19e>
{
 8000a28:	b4f0      	push	{r4, r5, r6, r7}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	e05d      	b.n	8000aea <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a2e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a30:	005f      	lsls	r7, r3, #1
 8000a32:	2403      	movs	r4, #3
 8000a34:	40bc      	lsls	r4, r7
 8000a36:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a3a:	68cc      	ldr	r4, [r1, #12]
 8000a3c:	40bc      	lsls	r4, r7
 8000a3e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000a40:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a42:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a44:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a48:	684c      	ldr	r4, [r1, #4]
 8000a4a:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000a4e:	409a      	lsls	r2, r3
 8000a50:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000a52:	6042      	str	r2, [r0, #4]
 8000a54:	e057      	b.n	8000b06 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a56:	08dc      	lsrs	r4, r3, #3
 8000a58:	3408      	adds	r4, #8
 8000a5a:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a5e:	f003 0207 	and.w	r2, r3, #7
 8000a62:	0096      	lsls	r6, r2, #2
 8000a64:	220f      	movs	r2, #15
 8000a66:	40b2      	lsls	r2, r6
 8000a68:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a6c:	690a      	ldr	r2, [r1, #16]
 8000a6e:	40b2      	lsls	r2, r6
 8000a70:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000a72:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000a76:	e05a      	b.n	8000b2e <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a78:	2204      	movs	r2, #4
 8000a7a:	e000      	b.n	8000a7e <HAL_GPIO_Init+0x5e>
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	40b2      	lsls	r2, r6
 8000a80:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a82:	3402      	adds	r4, #2
 8000a84:	4e4e      	ldr	r6, [pc, #312]	; (8000bc0 <HAL_GPIO_Init+0x1a0>)
 8000a86:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a8a:	4a4e      	ldr	r2, [pc, #312]	; (8000bc4 <HAL_GPIO_Init+0x1a4>)
 8000a8c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a8e:	43ea      	mvns	r2, r5
 8000a90:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a94:	684f      	ldr	r7, [r1, #4]
 8000a96:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000a9a:	d001      	beq.n	8000aa0 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8000a9c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000aa0:	4c48      	ldr	r4, [pc, #288]	; (8000bc4 <HAL_GPIO_Init+0x1a4>)
 8000aa2:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000aa4:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000aa6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000aaa:	684f      	ldr	r7, [r1, #4]
 8000aac:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000ab0:	d001      	beq.n	8000ab6 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8000ab2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000ab6:	4c43      	ldr	r4, [pc, #268]	; (8000bc4 <HAL_GPIO_Init+0x1a4>)
 8000ab8:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aba:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000abc:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ac0:	684f      	ldr	r7, [r1, #4]
 8000ac2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000ac6:	d001      	beq.n	8000acc <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8000ac8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000acc:	4c3d      	ldr	r4, [pc, #244]	; (8000bc4 <HAL_GPIO_Init+0x1a4>)
 8000ace:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000ad0:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000ad2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ad4:	684e      	ldr	r6, [r1, #4]
 8000ad6:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000ada:	d001      	beq.n	8000ae0 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8000adc:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000ae0:	4c38      	ldr	r4, [pc, #224]	; (8000bc4 <HAL_GPIO_Init+0x1a4>)
 8000ae2:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	2b0f      	cmp	r3, #15
 8000ae8:	d866      	bhi.n	8000bb8 <HAL_GPIO_Init+0x198>
    ioposition = 0x01U << position;
 8000aea:	2201      	movs	r2, #1
 8000aec:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aee:	680c      	ldr	r4, [r1, #0]
 8000af0:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000af4:	ea32 0404 	bics.w	r4, r2, r4
 8000af8:	d1f4      	bne.n	8000ae4 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000afa:	684c      	ldr	r4, [r1, #4]
 8000afc:	f004 0403 	and.w	r4, r4, #3
 8000b00:	3c01      	subs	r4, #1
 8000b02:	2c01      	cmp	r4, #1
 8000b04:	d993      	bls.n	8000a2e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b06:	684a      	ldr	r2, [r1, #4]
 8000b08:	f002 0203 	and.w	r2, r2, #3
 8000b0c:	2a03      	cmp	r2, #3
 8000b0e:	d009      	beq.n	8000b24 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 8000b10:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b12:	005e      	lsls	r6, r3, #1
 8000b14:	2203      	movs	r2, #3
 8000b16:	40b2      	lsls	r2, r6
 8000b18:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b1c:	688a      	ldr	r2, [r1, #8]
 8000b1e:	40b2      	lsls	r2, r6
 8000b20:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000b22:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b24:	684a      	ldr	r2, [r1, #4]
 8000b26:	f002 0203 	and.w	r2, r2, #3
 8000b2a:	2a02      	cmp	r2, #2
 8000b2c:	d093      	beq.n	8000a56 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8000b2e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b30:	005e      	lsls	r6, r3, #1
 8000b32:	2203      	movs	r2, #3
 8000b34:	40b2      	lsls	r2, r6
 8000b36:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b3a:	684a      	ldr	r2, [r1, #4]
 8000b3c:	f002 0203 	and.w	r2, r2, #3
 8000b40:	40b2      	lsls	r2, r6
 8000b42:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000b44:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b46:	684a      	ldr	r2, [r1, #4]
 8000b48:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8000b4c:	d0ca      	beq.n	8000ae4 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	2200      	movs	r2, #0
 8000b50:	9201      	str	r2, [sp, #4]
 8000b52:	4a1d      	ldr	r2, [pc, #116]	; (8000bc8 <HAL_GPIO_Init+0x1a8>)
 8000b54:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000b56:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000b5a:	6454      	str	r4, [r2, #68]	; 0x44
 8000b5c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b5e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000b62:	9201      	str	r2, [sp, #4]
 8000b64:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b66:	089c      	lsrs	r4, r3, #2
 8000b68:	1ca6      	adds	r6, r4, #2
 8000b6a:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <HAL_GPIO_Init+0x1a0>)
 8000b6c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b70:	f003 0203 	and.w	r2, r3, #3
 8000b74:	0096      	lsls	r6, r2, #2
 8000b76:	220f      	movs	r2, #15
 8000b78:	40b2      	lsls	r2, r6
 8000b7a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b7e:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <HAL_GPIO_Init+0x1ac>)
 8000b80:	4290      	cmp	r0, r2
 8000b82:	f43f af7b 	beq.w	8000a7c <HAL_GPIO_Init+0x5c>
 8000b86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	d00e      	beq.n	8000bac <HAL_GPIO_Init+0x18c>
 8000b8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b92:	4290      	cmp	r0, r2
 8000b94:	d00c      	beq.n	8000bb0 <HAL_GPIO_Init+0x190>
 8000b96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d00a      	beq.n	8000bb4 <HAL_GPIO_Init+0x194>
 8000b9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f43f af68 	beq.w	8000a78 <HAL_GPIO_Init+0x58>
 8000ba8:	2207      	movs	r2, #7
 8000baa:	e768      	b.n	8000a7e <HAL_GPIO_Init+0x5e>
 8000bac:	2201      	movs	r2, #1
 8000bae:	e766      	b.n	8000a7e <HAL_GPIO_Init+0x5e>
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	e764      	b.n	8000a7e <HAL_GPIO_Init+0x5e>
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	e762      	b.n	8000a7e <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8000bb8:	b002      	add	sp, #8
 8000bba:	bcf0      	pop	{r4, r5, r6, r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	4770      	bx	lr
 8000bc0:	40013800 	.word	0x40013800
 8000bc4:	40013c00 	.word	0x40013c00
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bd0:	b10a      	cbz	r2, 8000bd6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bd2:	6181      	str	r1, [r0, #24]
 8000bd4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bd6:	0409      	lsls	r1, r1, #16
 8000bd8:	6181      	str	r1, [r0, #24]
  }
}
 8000bda:	4770      	bx	lr

08000bdc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000bde:	6806      	ldr	r6, [r0, #0]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8000be0:	6a34      	ldr	r4, [r6, #32]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8000be2:	f004 070f 	and.w	r7, r4, #15
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8000be6:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000bea:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d000      	beq.n	8000bf4 <HCD_RXQLVL_IRQHandler+0x18>
    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
  }
}
 8000bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bf4:	4605      	mov	r5, r0
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	d0fb      	beq.n	8000bf2 <HCD_RXQLVL_IRQHandler+0x16>
 8000bfa:	232c      	movs	r3, #44	; 0x2c
 8000bfc:	fb03 0307 	mla	r3, r3, r7, r0
 8000c00:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000c02:	2900      	cmp	r1, #0
 8000c04:	d0f5      	beq.n	8000bf2 <HCD_RXQLVL_IRQHandler+0x16>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8000c06:	232c      	movs	r3, #44	; 0x2c
 8000c08:	fb03 0307 	mla	r3, r3, r7, r0
 8000c0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c0e:	4422      	add	r2, r4
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d906      	bls.n	8000c24 <HCD_RXQLVL_IRQHandler+0x48>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000c16:	202c      	movs	r0, #44	; 0x2c
 8000c18:	fb00 5507 	mla	r5, r0, r7, r5
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
}
 8000c22:	e7e6      	b.n	8000bf2 <HCD_RXQLVL_IRQHandler+0x16>
          (void)USB_ReadPacket(hhcd->Instance,
 8000c24:	4622      	mov	r2, r4
 8000c26:	4630      	mov	r0, r6
 8000c28:	f001 fc0a 	bl	8002440 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8000c2c:	232c      	movs	r3, #44	; 0x2c
 8000c2e:	fb03 5307 	mla	r3, r3, r7, r5
 8000c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c34:	4422      	add	r2, r4
 8000c36:	645a      	str	r2, [r3, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8000c38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c3a:	4422      	add	r2, r4
 8000c3c:	651a      	str	r2, [r3, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8000c3e:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 8000c42:	f8d6 2510 	ldr.w	r2, [r6, #1296]	; 0x510
 8000c46:	f3c2 42c9 	ubfx	r2, r2, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8000c4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c4e:	42a3      	cmp	r3, r4
 8000c50:	d1cf      	bne.n	8000bf2 <HCD_RXQLVL_IRQHandler+0x16>
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	d0cd      	beq.n	8000bf2 <HCD_RXQLVL_IRQHandler+0x16>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000c56:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000c5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000c5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000c62:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8000c66:	232c      	movs	r3, #44	; 0x2c
 8000c68:	fb03 5507 	mla	r5, r3, r7, r5
 8000c6c:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8000c70:	f083 0301 	eor.w	r3, r3, #1
 8000c74:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 8000c78:	e7bb      	b.n	8000bf2 <HCD_RXQLVL_IRQHandler+0x16>

08000c7a <HAL_HCD_HC_Init>:
{
 8000c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	4604      	mov	r4, r0
 8000c80:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8000c84:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8000c88:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 8000c8c:	f890 02f8 	ldrb.w	r0, [r0, #760]	; 0x2f8
 8000c90:	2801      	cmp	r0, #1
 8000c92:	d037      	beq.n	8000d04 <HAL_HCD_HC_Init+0x8a>
 8000c94:	2001      	movs	r0, #1
 8000c96:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8000c9a:	202c      	movs	r0, #44	; 0x2c
 8000c9c:	fb00 4001 	mla	r0, r0, r1, r4
 8000ca0:	f04f 0c00 	mov.w	ip, #0
 8000ca4:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000ca8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8000cac:	f8a0 7040 	strh.w	r7, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 8000cb0:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8000cb4:	f880 603f 	strb.w	r6, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000cb8:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
 8000cbc:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  if ((epnum & 0x80U) == 0x80U)
 8000cc0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000cc4:	d116      	bne.n	8000cf4 <HAL_HCD_HC_Init+0x7a>
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000cc6:	202c      	movs	r0, #44	; 0x2c
 8000cc8:	fb00 4001 	mla	r0, r0, r1, r4
 8000ccc:	f04f 0c00 	mov.w	ip, #0
 8000cd0:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 8000cd4:	202c      	movs	r0, #44	; 0x2c
 8000cd6:	fb00 4001 	mla	r0, r0, r1, r4
 8000cda:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  status =  USB_HC_Init(hhcd->Instance,
 8000cde:	9702      	str	r7, [sp, #8]
 8000ce0:	9601      	str	r6, [sp, #4]
 8000ce2:	9500      	str	r5, [sp, #0]
 8000ce4:	6820      	ldr	r0, [r4, #0]
 8000ce6:	f001 fcf5 	bl	80026d4 <USB_HC_Init>
  __HAL_UNLOCK(hhcd);
 8000cea:	2300      	movs	r3, #0
 8000cec:	f884 32f8 	strb.w	r3, [r4, #760]	; 0x2f8
}
 8000cf0:	b005      	add	sp, #20
 8000cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000cf4:	202c      	movs	r0, #44	; 0x2c
 8000cf6:	fb00 4001 	mla	r0, r0, r1, r4
 8000cfa:	f04f 0c01 	mov.w	ip, #1
 8000cfe:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
 8000d02:	e7e7      	b.n	8000cd4 <HAL_HCD_HC_Init+0x5a>
  __HAL_LOCK(hhcd);
 8000d04:	2002      	movs	r0, #2
 8000d06:	e7f3      	b.n	8000cf0 <HAL_HCD_HC_Init+0x76>

08000d08 <HAL_HCD_HC_Halt>:
  __HAL_LOCK(hhcd);
 8000d08:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d00b      	beq.n	8000d28 <HAL_HCD_HC_Halt+0x20>
{
 8000d10:	b510      	push	{r4, lr}
 8000d12:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8000d14:	2301      	movs	r3, #1
 8000d16:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d1a:	6800      	ldr	r0, [r0, #0]
 8000d1c:	f001 fd6e 	bl	80027fc <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8000d26:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8000d28:	2002      	movs	r0, #2
}
 8000d2a:	4770      	bx	lr

08000d2c <HAL_HCD_Init>:
  if (hhcd == NULL)
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	d045      	beq.n	8000dbc <HAL_HCD_Init+0x90>
{
 8000d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d32:	b08b      	sub	sp, #44	; 0x2c
 8000d34:	4606      	mov	r6, r0
  USBx = hhcd->Instance;
 8000d36:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000d38:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d038      	beq.n	8000db2 <HAL_HCD_Init+0x86>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000d40:	2303      	movs	r3, #3
 8000d42:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000d46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000d48:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000d4c:	d101      	bne.n	8000d52 <HAL_HCD_Init+0x26>
    hhcd->Init.dma_enable = 0U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	6133      	str	r3, [r6, #16]
  __HAL_HCD_DISABLE(hhcd);
 8000d52:	6830      	ldr	r0, [r6, #0]
 8000d54:	f001 fb2b 	bl	80023ae <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000d58:	4634      	mov	r4, r6
 8000d5a:	f854 cb10 	ldr.w	ip, [r4], #16
 8000d5e:	466d      	mov	r5, sp
 8000d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d70:	1d37      	adds	r7, r6, #4
 8000d72:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000d76:	4660      	mov	r0, ip
 8000d78:	f001 face 	bl	8002318 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	6830      	ldr	r0, [r6, #0]
 8000d80:	f001 fb8c 	bl	800249c <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000d84:	4634      	mov	r4, r6
 8000d86:	f854 cb10 	ldr.w	ip, [r4], #16
 8000d8a:	466d      	mov	r5, sp
 8000d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d98:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d9c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000da0:	4660      	mov	r0, ip
 8000da2:	f001 fbad 	bl	8002500 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8000da6:	2301      	movs	r3, #1
 8000da8:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  return HAL_OK;
 8000dac:	2000      	movs	r0, #0
}
 8000dae:	b00b      	add	sp, #44	; 0x2c
 8000db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8000db2:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 8000db6:	f005 fb55 	bl	8006464 <HAL_HCD_MspInit>
 8000dba:	e7c1      	b.n	8000d40 <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 8000dbc:	2001      	movs	r0, #1
}
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_HCD_HC_SubmitRequest>:
{
 8000dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8000dc6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000dca:	242c      	movs	r4, #44	; 0x2c
 8000dcc:	fb04 0401 	mla	r4, r4, r1, r0
 8000dd0:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000dd4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  if (token == 0U)
 8000dd8:	b97d      	cbnz	r5, 8000dfa <HAL_HCD_HC_SubmitRequest+0x3a>
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000dda:	242c      	movs	r4, #44	; 0x2c
 8000ddc:	fb04 0401 	mla	r4, r4, r1, r0
 8000de0:	2703      	movs	r7, #3
 8000de2:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 8000de6:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8000dea:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  switch (ep_type)
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d87f      	bhi.n	8000ef2 <HAL_HCD_HC_SubmitRequest+0x132>
 8000df2:	e8df f003 	tbb	[pc, r3]
 8000df6:	7809      	.short	0x7809
 8000df8:	5028      	.short	0x5028
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000dfa:	242c      	movs	r4, #44	; 0x2c
 8000dfc:	fb04 0401 	mla	r4, r4, r1, r0
 8000e00:	2702      	movs	r7, #2
 8000e02:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e06:	e7f2      	b.n	8000dee <HAL_HCD_HC_SubmitRequest+0x2e>
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000e08:	2d01      	cmp	r5, #1
 8000e0a:	d172      	bne.n	8000ef2 <HAL_HCD_HC_SubmitRequest+0x132>
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	d170      	bne.n	8000ef2 <HAL_HCD_HC_SubmitRequest+0x132>
        if (length == 0U)
 8000e10:	b92e      	cbnz	r6, 8000e1e <HAL_HCD_HC_SubmitRequest+0x5e>
          hhcd->hc[ch_num].toggle_out = 1U;
 8000e12:	232c      	movs	r3, #44	; 0x2c
 8000e14:	fb03 0301 	mla	r3, r3, r1, r0
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e1e:	232c      	movs	r3, #44	; 0x2c
 8000e20:	fb03 0301 	mla	r3, r3, r1, r0
 8000e24:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000e28:	b933      	cbnz	r3, 8000e38 <HAL_HCD_HC_SubmitRequest+0x78>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e2a:	232c      	movs	r3, #44	; 0x2c
 8000e2c:	fb03 0301 	mla	r3, r3, r1, r0
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000e36:	e05c      	b.n	8000ef2 <HAL_HCD_HC_SubmitRequest+0x132>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e38:	232c      	movs	r3, #44	; 0x2c
 8000e3a:	fb03 0301 	mla	r3, r3, r1, r0
 8000e3e:	2202      	movs	r2, #2
 8000e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000e44:	e055      	b.n	8000ef2 <HAL_HCD_HC_SubmitRequest+0x132>
      if (direction == 0U)
 8000e46:	b992      	cbnz	r2, 8000e6e <HAL_HCD_HC_SubmitRequest+0xae>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e48:	232c      	movs	r3, #44	; 0x2c
 8000e4a:	fb03 0301 	mla	r3, r3, r1, r0
 8000e4e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000e52:	b92b      	cbnz	r3, 8000e60 <HAL_HCD_HC_SubmitRequest+0xa0>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e54:	232c      	movs	r3, #44	; 0x2c
 8000e56:	fb03 0301 	mla	r3, r3, r1, r0
 8000e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000e5e:	e048      	b.n	8000ef2 <HAL_HCD_HC_SubmitRequest+0x132>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e60:	232c      	movs	r3, #44	; 0x2c
 8000e62:	fb03 0301 	mla	r3, r3, r1, r0
 8000e66:	2202      	movs	r2, #2
 8000e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000e6c:	e041      	b.n	8000ef2 <HAL_HCD_HC_SubmitRequest+0x132>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000e6e:	232c      	movs	r3, #44	; 0x2c
 8000e70:	fb03 0301 	mla	r3, r3, r1, r0
 8000e74:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000e78:	b933      	cbnz	r3, 8000e88 <HAL_HCD_HC_SubmitRequest+0xc8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e7a:	232c      	movs	r3, #44	; 0x2c
 8000e7c:	fb03 0301 	mla	r3, r3, r1, r0
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000e86:	e034      	b.n	8000ef2 <HAL_HCD_HC_SubmitRequest+0x132>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e88:	232c      	movs	r3, #44	; 0x2c
 8000e8a:	fb03 0301 	mla	r3, r3, r1, r0
 8000e8e:	2202      	movs	r2, #2
 8000e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000e94:	e02d      	b.n	8000ef2 <HAL_HCD_HC_SubmitRequest+0x132>
      if (direction == 0U)
 8000e96:	b992      	cbnz	r2, 8000ebe <HAL_HCD_HC_SubmitRequest+0xfe>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e98:	232c      	movs	r3, #44	; 0x2c
 8000e9a:	fb03 0301 	mla	r3, r3, r1, r0
 8000e9e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000ea2:	b92b      	cbnz	r3, 8000eb0 <HAL_HCD_HC_SubmitRequest+0xf0>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ea4:	232c      	movs	r3, #44	; 0x2c
 8000ea6:	fb03 0301 	mla	r3, r3, r1, r0
 8000eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000eae:	e020      	b.n	8000ef2 <HAL_HCD_HC_SubmitRequest+0x132>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000eb0:	232c      	movs	r3, #44	; 0x2c
 8000eb2:	fb03 0301 	mla	r3, r3, r1, r0
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000ebc:	e019      	b.n	8000ef2 <HAL_HCD_HC_SubmitRequest+0x132>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000ebe:	232c      	movs	r3, #44	; 0x2c
 8000ec0:	fb03 0301 	mla	r3, r3, r1, r0
 8000ec4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000ec8:	b933      	cbnz	r3, 8000ed8 <HAL_HCD_HC_SubmitRequest+0x118>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000eca:	232c      	movs	r3, #44	; 0x2c
 8000ecc:	fb03 0301 	mla	r3, r3, r1, r0
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000ed6:	e00c      	b.n	8000ef2 <HAL_HCD_HC_SubmitRequest+0x132>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ed8:	232c      	movs	r3, #44	; 0x2c
 8000eda:	fb03 0301 	mla	r3, r3, r1, r0
 8000ede:	2202      	movs	r2, #2
 8000ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000ee4:	e005      	b.n	8000ef2 <HAL_HCD_HC_SubmitRequest+0x132>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ee6:	232c      	movs	r3, #44	; 0x2c
 8000ee8:	fb03 0301 	mla	r3, r3, r1, r0
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000ef2:	232c      	movs	r3, #44	; 0x2c
 8000ef4:	fb03 f301 	mul.w	r3, r3, r1
 8000ef8:	18c2      	adds	r2, r0, r3
 8000efa:	9c07      	ldr	r4, [sp, #28]
 8000efc:	6454      	str	r4, [r2, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8000efe:	64d6      	str	r6, [r2, #76]	; 0x4c
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000f00:	2400      	movs	r4, #0
 8000f02:	f882 4060 	strb.w	r4, [r2, #96]	; 0x60
  hhcd->hc[ch_num].xfer_count = 0U;
 8000f06:	6514      	str	r4, [r2, #80]	; 0x50
  hhcd->hc[ch_num].ch_num = ch_num;
 8000f08:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 8000f0c:	f882 4061 	strb.w	r4, [r2, #97]	; 0x61
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000f10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000f14:	7c02      	ldrb	r2, [r0, #16]
 8000f16:	4401      	add	r1, r0
 8000f18:	6800      	ldr	r0, [r0, #0]
 8000f1a:	f001 fcf3 	bl	8002904 <USB_HC_StartXfer>
}
 8000f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000f20 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	b083      	sub	sp, #12
 8000f24:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000f26:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000f28:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000f2c:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 8000f2e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000f32:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000f34:	9b00      	ldr	r3, [sp, #0]
 8000f36:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000f3a:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000f3c:	9b01      	ldr	r3, [sp, #4]
 8000f3e:	f013 0f02 	tst.w	r3, #2
 8000f42:	d007      	beq.n	8000f54 <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000f44:	9b01      	ldr	r3, [sp, #4]
 8000f46:	f013 0f01 	tst.w	r3, #1
 8000f4a:	d125      	bne.n	8000f98 <HCD_Port_IRQHandler+0x78>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8000f4c:	9b00      	ldr	r3, [sp, #0]
 8000f4e:	f043 0302 	orr.w	r3, r3, #2
 8000f52:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000f54:	9b01      	ldr	r3, [sp, #4]
 8000f56:	f013 0f08 	tst.w	r3, #8
 8000f5a:	d010      	beq.n	8000f7e <HCD_Port_IRQHandler+0x5e>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000f5c:	9b00      	ldr	r3, [sp, #0]
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8000f64:	9b01      	ldr	r3, [sp, #4]
 8000f66:	f013 0f04 	tst.w	r3, #4
 8000f6a:	d02d      	beq.n	8000fc8 <HCD_Port_IRQHandler+0xa8>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8000f6c:	69a3      	ldr	r3, [r4, #24]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d015      	beq.n	8000f9e <HCD_Port_IRQHandler+0x7e>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8000f72:	68e3      	ldr	r3, [r4, #12]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d022      	beq.n	8000fbe <HCD_Port_IRQHandler+0x9e>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f005 facf 	bl	800651c <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8000f7e:	9b01      	ldr	r3, [sp, #4]
 8000f80:	f013 0f20 	tst.w	r3, #32
 8000f84:	d003      	beq.n	8000f8e <HCD_Port_IRQHandler+0x6e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8000f86:	9b00      	ldr	r3, [sp, #0]
 8000f88:	f043 0320 	orr.w	r3, r3, #32
 8000f8c:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8000f8e:	9b00      	ldr	r3, [sp, #0]
 8000f90:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
}
 8000f94:	b003      	add	sp, #12
 8000f96:	bd30      	pop	{r4, r5, pc}
      HAL_HCD_Connect_Callback(hhcd);
 8000f98:	f005 faae 	bl	80064f8 <HAL_HCD_Connect_Callback>
 8000f9c:	e7d6      	b.n	8000f4c <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8000f9e:	9b01      	ldr	r3, [sp, #4]
 8000fa0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8000fa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000fa8:	d004      	beq.n	8000fb4 <HCD_Port_IRQHandler+0x94>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000faa:	2101      	movs	r1, #1
 8000fac:	6820      	ldr	r0, [r4, #0]
 8000fae:	f001 fb1f 	bl	80025f0 <USB_InitFSLSPClkSel>
 8000fb2:	e7e1      	b.n	8000f78 <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	6820      	ldr	r0, [r4, #0]
 8000fb8:	f001 fb1a 	bl	80025f0 <USB_InitFSLSPClkSel>
 8000fbc:	e7dc      	b.n	8000f78 <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 8000fbe:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000fc2:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 8000fc6:	e7d7      	b.n	8000f78 <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8000fc8:	4620      	mov	r0, r4
 8000fca:	f005 faad 	bl	8006528 <HAL_HCD_PortDisabled_Callback>
 8000fce:	e7d6      	b.n	8000f7e <HCD_Port_IRQHandler+0x5e>

08000fd0 <HCD_HC_IN_IRQHandler>:
{
 8000fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd2:	4605      	mov	r5, r0
 8000fd4:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000fd6:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000fd8:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 8000fdc:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 8000fe0:	68a3      	ldr	r3, [r4, #8]
 8000fe2:	f013 0f04 	tst.w	r3, #4
 8000fe6:	d040      	beq.n	800106a <HCD_HC_IN_IRQHandler+0x9a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000fe8:	2304      	movs	r3, #4
 8000fea:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000fec:	68e3      	ldr	r3, [r4, #12]
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	60e3      	str	r3, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000ff4:	68a3      	ldr	r3, [r4, #8]
 8000ff6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000ffa:	f040 8093 	bne.w	8001124 <HCD_HC_IN_IRQHandler+0x154>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000ffe:	68a3      	ldr	r3, [r4, #8]
 8001000:	f013 0f01 	tst.w	r3, #1
 8001004:	f000 80d7 	beq.w	80011b6 <HCD_HC_IN_IRQHandler+0x1e6>
    if (hhcd->Init.dma_enable != 0U)
 8001008:	692b      	ldr	r3, [r5, #16]
 800100a:	b143      	cbz	r3, 800101e <HCD_HC_IN_IRQHandler+0x4e>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800100c:	232c      	movs	r3, #44	; 0x2c
 800100e:	fb03 5306 	mla	r3, r3, r6, r5
 8001012:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001014:	6921      	ldr	r1, [r4, #16]
 8001016:	f3c1 0112 	ubfx	r1, r1, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800101a:	1a52      	subs	r2, r2, r1
 800101c:	651a      	str	r2, [r3, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 800101e:	232c      	movs	r3, #44	; 0x2c
 8001020:	fb03 5306 	mla	r3, r3, r6, r5
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 800102a:	2100      	movs	r1, #0
 800102c:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800102e:	60a2      	str	r2, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001030:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 8081 	beq.w	800113c <HCD_HC_IN_IRQHandler+0x16c>
 800103a:	2b02      	cmp	r3, #2
 800103c:	d07e      	beq.n	800113c <HCD_HC_IN_IRQHandler+0x16c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800103e:	2b03      	cmp	r3, #3
 8001040:	f000 8093 	beq.w	800116a <HCD_HC_IN_IRQHandler+0x19a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001044:	2b01      	cmp	r3, #1
 8001046:	f040 8083 	bne.w	8001150 <HCD_HC_IN_IRQHandler+0x180>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800104a:	232c      	movs	r3, #44	; 0x2c
 800104c:	fb03 5306 	mla	r3, r3, r6, r5
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001056:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 800105a:	4051      	eors	r1, r2
 800105c:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001060:	4631      	mov	r1, r6
 8001062:	4628      	mov	r0, r5
 8001064:	f005 fa54 	bl	8006510 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001068:	e072      	b.n	8001150 <HCD_HC_IN_IRQHandler+0x180>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800106a:	68a3      	ldr	r3, [r4, #8]
 800106c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001070:	d106      	bne.n	8001080 <HCD_HC_IN_IRQHandler+0xb0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001072:	68a3      	ldr	r3, [r4, #8]
 8001074:	f013 0f20 	tst.w	r3, #32
 8001078:	d013      	beq.n	80010a2 <HCD_HC_IN_IRQHandler+0xd2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800107a:	2320      	movs	r3, #32
 800107c:	60a3      	str	r3, [r4, #8]
 800107e:	e7b9      	b.n	8000ff4 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001084:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001086:	232c      	movs	r3, #44	; 0x2c
 8001088:	fb03 0301 	mla	r3, r3, r1, r0
 800108c:	2207      	movs	r2, #7
 800108e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001092:	68e3      	ldr	r3, [r4, #12]
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800109a:	6800      	ldr	r0, [r0, #0]
 800109c:	f001 fbae 	bl	80027fc <USB_HC_Halt>
 80010a0:	e7a8      	b.n	8000ff4 <HCD_HC_IN_IRQHandler+0x24>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80010a2:	68a3      	ldr	r3, [r4, #8]
 80010a4:	f013 0f08 	tst.w	r3, #8
 80010a8:	d117      	bne.n	80010da <HCD_HC_IN_IRQHandler+0x10a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80010aa:	68a3      	ldr	r3, [r4, #8]
 80010ac:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80010b0:	d125      	bne.n	80010fe <HCD_HC_IN_IRQHandler+0x12e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80010b2:	68a3      	ldr	r3, [r4, #8]
 80010b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80010b8:	d09c      	beq.n	8000ff4 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80010ba:	68e3      	ldr	r3, [r4, #12]
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80010c2:	232c      	movs	r3, #44	; 0x2c
 80010c4:	fb03 0301 	mla	r3, r3, r1, r0
 80010c8:	2206      	movs	r2, #6
 80010ca:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010ce:	6800      	ldr	r0, [r0, #0]
 80010d0:	f001 fb94 	bl	80027fc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	60a3      	str	r3, [r4, #8]
 80010d8:	e78c      	b.n	8000ff4 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80010da:	68e3      	ldr	r3, [r4, #12]
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80010e2:	232c      	movs	r3, #44	; 0x2c
 80010e4:	fb03 0301 	mla	r3, r3, r1, r0
 80010e8:	2205      	movs	r2, #5
 80010ea:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80010ee:	2310      	movs	r3, #16
 80010f0:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80010f2:	2308      	movs	r3, #8
 80010f4:	60a3      	str	r3, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010f6:	6800      	ldr	r0, [r0, #0]
 80010f8:	f001 fb80 	bl	80027fc <USB_HC_Halt>
 80010fc:	e77a      	b.n	8000ff4 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80010fe:	68e3      	ldr	r3, [r4, #12]
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001106:	232c      	movs	r3, #44	; 0x2c
 8001108:	fb03 0301 	mla	r3, r3, r1, r0
 800110c:	2208      	movs	r2, #8
 800110e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001112:	2310      	movs	r3, #16
 8001114:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800111a:	60a3      	str	r3, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800111c:	6800      	ldr	r0, [r0, #0]
 800111e:	f001 fb6d 	bl	80027fc <USB_HC_Halt>
 8001122:	e767      	b.n	8000ff4 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001124:	68e3      	ldr	r3, [r4, #12]
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800112c:	4631      	mov	r1, r6
 800112e:	6828      	ldr	r0, [r5, #0]
 8001130:	f001 fb64 	bl	80027fc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001138:	60a3      	str	r3, [r4, #8]
}
 800113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800113c:	68e3      	ldr	r3, [r4, #12]
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001144:	4631      	mov	r1, r6
 8001146:	6828      	ldr	r0, [r5, #0]
 8001148:	f001 fb58 	bl	80027fc <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800114c:	2310      	movs	r3, #16
 800114e:	60a3      	str	r3, [r4, #8]
    if (hhcd->Init.dma_enable == 1U)
 8001150:	692b      	ldr	r3, [r5, #16]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d01a      	beq.n	800118c <HCD_HC_IN_IRQHandler+0x1bc>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001156:	202c      	movs	r0, #44	; 0x2c
 8001158:	fb00 5506 	mla	r5, r0, r6, r5
 800115c:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8001160:	f083 0301 	eor.w	r3, r3, #1
 8001164:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 8001168:	e7e7      	b.n	800113a <HCD_HC_IN_IRQHandler+0x16a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800116a:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800116e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001172:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001176:	232c      	movs	r3, #44	; 0x2c
 8001178:	fb03 5306 	mla	r3, r3, r6, r5
 800117c:	2201      	movs	r2, #1
 800117e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001182:	4631      	mov	r1, r6
 8001184:	4628      	mov	r0, r5
 8001186:	f005 f9c3 	bl	8006510 <HAL_HCD_HC_NotifyURBChange_Callback>
 800118a:	e7e1      	b.n	8001150 <HCD_HC_IN_IRQHandler+0x180>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800118c:	232c      	movs	r3, #44	; 0x2c
 800118e:	fb03 5306 	mla	r3, r3, r6, r5
 8001192:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001194:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001198:	fbb2 f3f3 	udiv	r3, r2, r3
 800119c:	f013 0f01 	tst.w	r3, #1
 80011a0:	d0cb      	beq.n	800113a <HCD_HC_IN_IRQHandler+0x16a>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80011a2:	232c      	movs	r3, #44	; 0x2c
 80011a4:	fb03 5506 	mla	r5, r3, r6, r5
 80011a8:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 80011ac:	f083 0301 	eor.w	r3, r3, #1
 80011b0:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 80011b4:	e7c1      	b.n	800113a <HCD_HC_IN_IRQHandler+0x16a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80011b6:	68a3      	ldr	r3, [r4, #8]
 80011b8:	f013 0f02 	tst.w	r3, #2
 80011bc:	d064      	beq.n	8001288 <HCD_HC_IN_IRQHandler+0x2b8>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80011be:	68e3      	ldr	r3, [r4, #12]
 80011c0:	f023 0302 	bic.w	r3, r3, #2
 80011c4:	60e3      	str	r3, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80011c6:	232c      	movs	r3, #44	; 0x2c
 80011c8:	fb03 5306 	mla	r3, r3, r6, r5
 80011cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d013      	beq.n	80011fc <HCD_HC_IN_IRQHandler+0x22c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80011d4:	2b05      	cmp	r3, #5
 80011d6:	d023      	beq.n	8001220 <HCD_HC_IN_IRQHandler+0x250>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80011d8:	2b06      	cmp	r3, #6
 80011da:	d028      	beq.n	800122e <HCD_HC_IN_IRQHandler+0x25e>
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d026      	beq.n	800122e <HCD_HC_IN_IRQHandler+0x25e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d042      	beq.n	800126a <HCD_HC_IN_IRQHandler+0x29a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80011e4:	2b07      	cmp	r3, #7
 80011e6:	d10f      	bne.n	8001208 <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].ErrCnt++;
 80011e8:	232c      	movs	r3, #44	; 0x2c
 80011ea:	fb03 5306 	mla	r3, r3, r6, r5
 80011ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011f0:	3201      	adds	r2, #1
 80011f2:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80011f4:	2204      	movs	r2, #4
 80011f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80011fa:	e005      	b.n	8001208 <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80011fc:	232c      	movs	r3, #44	; 0x2c
 80011fe:	fb03 5306 	mla	r3, r3, r6, r5
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001208:	2302      	movs	r3, #2
 800120a:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800120c:	232c      	movs	r3, #44	; 0x2c
 800120e:	fb03 5306 	mla	r3, r3, r6, r5
 8001212:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8001216:	4631      	mov	r1, r6
 8001218:	4628      	mov	r0, r5
 800121a:	f005 f979 	bl	8006510 <HAL_HCD_HC_NotifyURBChange_Callback>
 800121e:	e78c      	b.n	800113a <HCD_HC_IN_IRQHandler+0x16a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001220:	232c      	movs	r3, #44	; 0x2c
 8001222:	fb03 5306 	mla	r3, r3, r6, r5
 8001226:	2205      	movs	r2, #5
 8001228:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800122c:	e7ec      	b.n	8001208 <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].ErrCnt++;
 800122e:	222c      	movs	r2, #44	; 0x2c
 8001230:	fb02 5206 	mla	r2, r2, r6, r5
 8001234:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001236:	3301      	adds	r3, #1
 8001238:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800123a:	2b02      	cmp	r3, #2
 800123c:	d906      	bls.n	800124c <HCD_HC_IN_IRQHandler+0x27c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800123e:	4613      	mov	r3, r2
 8001240:	2200      	movs	r2, #0
 8001242:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001244:	2204      	movs	r2, #4
 8001246:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800124a:	e7dd      	b.n	8001208 <HCD_HC_IN_IRQHandler+0x238>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800124c:	232c      	movs	r3, #44	; 0x2c
 800124e:	fb03 5306 	mla	r3, r3, r6, r5
 8001252:	2202      	movs	r2, #2
 8001254:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001258:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800125c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001264:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8001268:	e7ce      	b.n	8001208 <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800126a:	232c      	movs	r3, #44	; 0x2c
 800126c:	fb03 5306 	mla	r3, r3, r6, r5
 8001270:	2202      	movs	r2, #2
 8001272:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001276:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800127a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800127e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001282:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8001286:	e7bf      	b.n	8001208 <HCD_HC_IN_IRQHandler+0x238>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001288:	68a3      	ldr	r3, [r4, #8]
 800128a:	f013 0f10 	tst.w	r3, #16
 800128e:	f43f af54 	beq.w	800113a <HCD_HC_IN_IRQHandler+0x16a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001292:	232c      	movs	r3, #44	; 0x2c
 8001294:	fb03 5306 	mla	r3, r3, r6, r5
 8001298:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800129c:	2b03      	cmp	r3, #3
 800129e:	d00c      	beq.n	80012ba <HCD_HC_IN_IRQHandler+0x2ea>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80012a0:	b10b      	cbz	r3, 80012a6 <HCD_HC_IN_IRQHandler+0x2d6>
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d106      	bne.n	80012b4 <HCD_HC_IN_IRQHandler+0x2e4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80012a6:	232c      	movs	r3, #44	; 0x2c
 80012a8:	fb03 5306 	mla	r3, r3, r6, r5
 80012ac:	2200      	movs	r2, #0
 80012ae:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 80012b0:	692b      	ldr	r3, [r5, #16]
 80012b2:	b183      	cbz	r3, 80012d6 <HCD_HC_IN_IRQHandler+0x306>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80012b4:	2310      	movs	r3, #16
 80012b6:	60a3      	str	r3, [r4, #8]
}
 80012b8:	e73f      	b.n	800113a <HCD_HC_IN_IRQHandler+0x16a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80012ba:	232c      	movs	r3, #44	; 0x2c
 80012bc:	fb03 5306 	mla	r3, r3, r6, r5
 80012c0:	2200      	movs	r2, #0
 80012c2:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80012c4:	68e3      	ldr	r3, [r4, #12]
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012cc:	4631      	mov	r1, r6
 80012ce:	6828      	ldr	r0, [r5, #0]
 80012d0:	f001 fa94 	bl	80027fc <USB_HC_Halt>
 80012d4:	e7ee      	b.n	80012b4 <HCD_HC_IN_IRQHandler+0x2e4>
        hhcd->hc[ch_num].state = HC_NAK;
 80012d6:	232c      	movs	r3, #44	; 0x2c
 80012d8:	fb03 5306 	mla	r3, r3, r6, r5
 80012dc:	2203      	movs	r2, #3
 80012de:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80012e2:	68e3      	ldr	r3, [r4, #12]
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012ea:	4631      	mov	r1, r6
 80012ec:	6828      	ldr	r0, [r5, #0]
 80012ee:	f001 fa85 	bl	80027fc <USB_HC_Halt>
 80012f2:	e7df      	b.n	80012b4 <HCD_HC_IN_IRQHandler+0x2e4>

080012f4 <HCD_HC_OUT_IRQHandler>:
{
 80012f4:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80012f6:	6803      	ldr	r3, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80012f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80012fc:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8001300:	68a2      	ldr	r2, [r4, #8]
 8001302:	f012 0f04 	tst.w	r2, #4
 8001306:	d006      	beq.n	8001316 <HCD_HC_OUT_IRQHandler+0x22>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001308:	2304      	movs	r3, #4
 800130a:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800130c:	68e3      	ldr	r3, [r4, #12]
 800130e:	f043 0302 	orr.w	r3, r3, #2
 8001312:	60e3      	str	r3, [r4, #12]
}
 8001314:	bd70      	pop	{r4, r5, r6, pc}
 8001316:	4605      	mov	r5, r0
 8001318:	460e      	mov	r6, r1
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800131a:	68a2      	ldr	r2, [r4, #8]
 800131c:	f012 0f20 	tst.w	r2, #32
 8001320:	d018      	beq.n	8001354 <HCD_HC_OUT_IRQHandler+0x60>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001322:	2320      	movs	r3, #32
 8001324:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001326:	232c      	movs	r3, #44	; 0x2c
 8001328:	fb03 0301 	mla	r3, r3, r1, r0
 800132c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001330:	2b01      	cmp	r3, #1
 8001332:	d1ef      	bne.n	8001314 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].do_ping = 0U;
 8001334:	232c      	movs	r3, #44	; 0x2c
 8001336:	fb03 0301 	mla	r3, r3, r1, r0
 800133a:	2200      	movs	r2, #0
 800133c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001340:	2202      	movs	r2, #2
 8001342:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001346:	68e3      	ldr	r3, [r4, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800134c:	6800      	ldr	r0, [r0, #0]
 800134e:	f001 fa55 	bl	80027fc <USB_HC_Halt>
 8001352:	e7df      	b.n	8001314 <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001354:	68a2      	ldr	r2, [r4, #8]
 8001356:	f412 7f00 	tst.w	r2, #512	; 0x200
 800135a:	d124      	bne.n	80013a6 <HCD_HC_OUT_IRQHandler+0xb2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800135c:	68a2      	ldr	r2, [r4, #8]
 800135e:	f012 0f01 	tst.w	r2, #1
 8001362:	d02b      	beq.n	80013bc <HCD_HC_OUT_IRQHandler+0xc8>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001364:	232c      	movs	r3, #44	; 0x2c
 8001366:	fb03 0301 	mla	r3, r3, r1, r0
 800136a:	2200      	movs	r2, #0
 800136c:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800136e:	68a3      	ldr	r3, [r4, #8]
 8001370:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001374:	d007      	beq.n	8001386 <HCD_HC_OUT_IRQHandler+0x92>
      hhcd->hc[ch_num].do_ping = 1U;
 8001376:	232c      	movs	r3, #44	; 0x2c
 8001378:	fb03 0301 	mla	r3, r3, r1, r0
 800137c:	2201      	movs	r2, #1
 800137e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001382:	2340      	movs	r3, #64	; 0x40
 8001384:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001386:	68e3      	ldr	r3, [r4, #12]
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800138e:	4631      	mov	r1, r6
 8001390:	6828      	ldr	r0, [r5, #0]
 8001392:	f001 fa33 	bl	80027fc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001396:	2301      	movs	r3, #1
 8001398:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800139a:	202c      	movs	r0, #44	; 0x2c
 800139c:	fb00 5506 	mla	r5, r0, r6, r5
 80013a0:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 80013a4:	e7b6      	b.n	8001314 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013a6:	68e3      	ldr	r3, [r4, #12]
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013ae:	6800      	ldr	r0, [r0, #0]
 80013b0:	f001 fa24 	bl	80027fc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80013b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b8:	60a3      	str	r3, [r4, #8]
 80013ba:	e7ab      	b.n	8001314 <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80013bc:	68a2      	ldr	r2, [r4, #8]
 80013be:	f012 0f40 	tst.w	r2, #64	; 0x40
 80013c2:	d129      	bne.n	8001418 <HCD_HC_OUT_IRQHandler+0x124>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80013c4:	68a2      	ldr	r2, [r4, #8]
 80013c6:	f012 0f08 	tst.w	r2, #8
 80013ca:	d13a      	bne.n	8001442 <HCD_HC_OUT_IRQHandler+0x14e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80013cc:	68a2      	ldr	r2, [r4, #8]
 80013ce:	f012 0f10 	tst.w	r2, #16
 80013d2:	d046      	beq.n	8001462 <HCD_HC_OUT_IRQHandler+0x16e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80013d4:	232c      	movs	r3, #44	; 0x2c
 80013d6:	fb03 0301 	mla	r3, r3, r1, r0
 80013da:	2200      	movs	r2, #0
 80013dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 80013de:	2203      	movs	r2, #3
 80013e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 80013e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013e8:	b95b      	cbnz	r3, 8001402 <HCD_HC_OUT_IRQHandler+0x10e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80013ea:	232c      	movs	r3, #44	; 0x2c
 80013ec:	fb03 0301 	mla	r3, r3, r1, r0
 80013f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013f4:	b92b      	cbnz	r3, 8001402 <HCD_HC_OUT_IRQHandler+0x10e>
        hhcd->hc[ch_num].do_ping = 1U;
 80013f6:	232c      	movs	r3, #44	; 0x2c
 80013f8:	fb03 0301 	mla	r3, r3, r1, r0
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001402:	68e3      	ldr	r3, [r4, #12]
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800140a:	4631      	mov	r1, r6
 800140c:	6828      	ldr	r0, [r5, #0]
 800140e:	f001 f9f5 	bl	80027fc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001412:	2310      	movs	r3, #16
 8001414:	60a3      	str	r3, [r4, #8]
 8001416:	e77d      	b.n	8001314 <HCD_HC_OUT_IRQHandler+0x20>
    hhcd->hc[ch_num].state = HC_NYET;
 8001418:	232c      	movs	r3, #44	; 0x2c
 800141a:	fb03 0301 	mla	r3, r3, r1, r0
 800141e:	2204      	movs	r2, #4
 8001420:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8001424:	2201      	movs	r2, #1
 8001426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 800142a:	2200      	movs	r2, #0
 800142c:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800142e:	68e3      	ldr	r3, [r4, #12]
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001436:	6800      	ldr	r0, [r0, #0]
 8001438:	f001 f9e0 	bl	80027fc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800143c:	2340      	movs	r3, #64	; 0x40
 800143e:	60a3      	str	r3, [r4, #8]
 8001440:	e768      	b.n	8001314 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001442:	2308      	movs	r3, #8
 8001444:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001446:	68e3      	ldr	r3, [r4, #12]
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800144e:	6800      	ldr	r0, [r0, #0]
 8001450:	f001 f9d4 	bl	80027fc <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001454:	232c      	movs	r3, #44	; 0x2c
 8001456:	fb03 5506 	mla	r5, r3, r6, r5
 800145a:	2305      	movs	r3, #5
 800145c:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 8001460:	e758      	b.n	8001314 <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001462:	68a2      	ldr	r2, [r4, #8]
 8001464:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001468:	d029      	beq.n	80014be <HCD_HC_OUT_IRQHandler+0x1ca>
    if (hhcd->Init.dma_enable == 0U)
 800146a:	6903      	ldr	r3, [r0, #16]
 800146c:	b183      	cbz	r3, 8001490 <HCD_HC_OUT_IRQHandler+0x19c>
      hhcd->hc[ch_num].ErrCnt++;
 800146e:	222c      	movs	r2, #44	; 0x2c
 8001470:	fb02 0201 	mla	r2, r2, r1, r0
 8001474:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001476:	3301      	adds	r3, #1
 8001478:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800147a:	2b02      	cmp	r3, #2
 800147c:	d816      	bhi.n	80014ac <HCD_HC_OUT_IRQHandler+0x1b8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800147e:	232c      	movs	r3, #44	; 0x2c
 8001480:	fb03 0501 	mla	r5, r3, r1, r0
 8001484:	2302      	movs	r3, #2
 8001486:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	60a3      	str	r3, [r4, #8]
 800148e:	e741      	b.n	8001314 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001490:	232c      	movs	r3, #44	; 0x2c
 8001492:	fb03 0301 	mla	r3, r3, r1, r0
 8001496:	2206      	movs	r2, #6
 8001498:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800149c:	68e3      	ldr	r3, [r4, #12]
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014a4:	6800      	ldr	r0, [r0, #0]
 80014a6:	f001 f9a9 	bl	80027fc <USB_HC_Halt>
 80014aa:	e7ee      	b.n	800148a <HCD_HC_OUT_IRQHandler+0x196>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80014ac:	4613      	mov	r3, r2
 80014ae:	2200      	movs	r2, #0
 80014b0:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80014b2:	2204      	movs	r2, #4
 80014b4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80014b8:	f005 f82a 	bl	8006510 <HAL_HCD_HC_NotifyURBChange_Callback>
 80014bc:	e7e5      	b.n	800148a <HCD_HC_OUT_IRQHandler+0x196>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80014be:	68a2      	ldr	r2, [r4, #8]
 80014c0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80014c4:	d127      	bne.n	8001516 <HCD_HC_OUT_IRQHandler+0x222>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80014c6:	68a2      	ldr	r2, [r4, #8]
 80014c8:	f012 0f02 	tst.w	r2, #2
 80014cc:	f43f af22 	beq.w	8001314 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80014d0:	68e2      	ldr	r2, [r4, #12]
 80014d2:	f022 0202 	bic.w	r2, r2, #2
 80014d6:	60e2      	str	r2, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80014d8:	222c      	movs	r2, #44	; 0x2c
 80014da:	fb02 0201 	mla	r2, r2, r1, r0
 80014de:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 80014e2:	2a01      	cmp	r2, #1
 80014e4:	d02a      	beq.n	800153c <HCD_HC_OUT_IRQHandler+0x248>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80014e6:	2a03      	cmp	r2, #3
 80014e8:	d05b      	beq.n	80015a2 <HCD_HC_OUT_IRQHandler+0x2ae>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80014ea:	2a04      	cmp	r2, #4
 80014ec:	d06b      	beq.n	80015c6 <HCD_HC_OUT_IRQHandler+0x2d2>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80014ee:	2a05      	cmp	r2, #5
 80014f0:	d070      	beq.n	80015d4 <HCD_HC_OUT_IRQHandler+0x2e0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80014f2:	2a06      	cmp	r2, #6
 80014f4:	d001      	beq.n	80014fa <HCD_HC_OUT_IRQHandler+0x206>
 80014f6:	2a08      	cmp	r2, #8
 80014f8:	d159      	bne.n	80015ae <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].ErrCnt++;
 80014fa:	212c      	movs	r1, #44	; 0x2c
 80014fc:	fb01 5106 	mla	r1, r1, r6, r5
 8001500:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8001502:	3201      	adds	r2, #1
 8001504:	65ca      	str	r2, [r1, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001506:	2a02      	cmp	r2, #2
 8001508:	d96a      	bls.n	80015e0 <HCD_HC_OUT_IRQHandler+0x2ec>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800150a:	2200      	movs	r2, #0
 800150c:	65ca      	str	r2, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800150e:	2204      	movs	r2, #4
 8001510:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
 8001514:	e04b      	b.n	80015ae <HCD_HC_OUT_IRQHandler+0x2ba>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001516:	68e3      	ldr	r3, [r4, #12]
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800151e:	6800      	ldr	r0, [r0, #0]
 8001520:	f001 f96c 	bl	80027fc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001524:	2310      	movs	r3, #16
 8001526:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800152c:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800152e:	232c      	movs	r3, #44	; 0x2c
 8001530:	fb03 5506 	mla	r5, r3, r6, r5
 8001534:	2308      	movs	r3, #8
 8001536:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 800153a:	e6eb      	b.n	8001314 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800153c:	232c      	movs	r3, #44	; 0x2c
 800153e:	fb03 0301 	mla	r3, r3, r1, r0
 8001542:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001546:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800154a:	3b02      	subs	r3, #2
 800154c:	b2db      	uxtb	r3, r3
 800154e:	4293      	cmp	r3, r2
 8001550:	d82d      	bhi.n	80015ae <HCD_HC_OUT_IRQHandler+0x2ba>
        if (hhcd->Init.dma_enable == 0U)
 8001552:	6901      	ldr	r1, [r0, #16]
 8001554:	b941      	cbnz	r1, 8001568 <HCD_HC_OUT_IRQHandler+0x274>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001556:	232c      	movs	r3, #44	; 0x2c
 8001558:	fb03 0306 	mla	r3, r3, r6, r0
 800155c:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001560:	f082 0201 	eor.w	r2, r2, #1
 8001564:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8001568:	2901      	cmp	r1, #1
 800156a:	d120      	bne.n	80015ae <HCD_HC_OUT_IRQHandler+0x2ba>
 800156c:	232c      	movs	r3, #44	; 0x2c
 800156e:	fb03 5306 	mla	r3, r3, r6, r5
 8001572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001574:	b1db      	cbz	r3, 80015ae <HCD_HC_OUT_IRQHandler+0x2ba>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001576:	222c      	movs	r2, #44	; 0x2c
 8001578:	fb02 5206 	mla	r2, r2, r6, r5
 800157c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001580:	4413      	add	r3, r2
 8001582:	3b01      	subs	r3, #1
 8001584:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 8001588:	f013 0f01 	tst.w	r3, #1
 800158c:	d00f      	beq.n	80015ae <HCD_HC_OUT_IRQHandler+0x2ba>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800158e:	232c      	movs	r3, #44	; 0x2c
 8001590:	fb03 5306 	mla	r3, r3, r6, r5
 8001594:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001598:	f082 0201 	eor.w	r2, r2, #1
 800159c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80015a0:	e005      	b.n	80015ae <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80015a2:	232c      	movs	r3, #44	; 0x2c
 80015a4:	fb03 0301 	mla	r3, r3, r1, r0
 80015a8:	2202      	movs	r2, #2
 80015aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80015ae:	2302      	movs	r3, #2
 80015b0:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80015b2:	232c      	movs	r3, #44	; 0x2c
 80015b4:	fb03 5306 	mla	r3, r3, r6, r5
 80015b8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80015bc:	4631      	mov	r1, r6
 80015be:	4628      	mov	r0, r5
 80015c0:	f004 ffa6 	bl	8006510 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80015c4:	e6a6      	b.n	8001314 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80015c6:	232c      	movs	r3, #44	; 0x2c
 80015c8:	fb03 0301 	mla	r3, r3, r1, r0
 80015cc:	2202      	movs	r2, #2
 80015ce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80015d2:	e7ec      	b.n	80015ae <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80015d4:	232c      	movs	r3, #44	; 0x2c
 80015d6:	fb03 0301 	mla	r3, r3, r1, r0
 80015da:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80015de:	e7e6      	b.n	80015ae <HCD_HC_OUT_IRQHandler+0x2ba>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80015e0:	222c      	movs	r2, #44	; 0x2c
 80015e2:	fb02 5206 	mla	r2, r2, r6, r5
 80015e6:	2102      	movs	r1, #2
 80015e8:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80015ec:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80015f0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80015f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80015f8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 80015fc:	e7d7      	b.n	80015ae <HCD_HC_OUT_IRQHandler+0x2ba>

080015fe <HAL_HCD_IRQHandler>:
{
 80015fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001600:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001602:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001604:	4628      	mov	r0, r5
 8001606:	f000 ff45 	bl	8002494 <USB_GetMode>
 800160a:	2801      	cmp	r0, #1
 800160c:	d000      	beq.n	8001610 <HAL_HCD_IRQHandler+0x12>
}
 800160e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001610:	462e      	mov	r6, r5
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001612:	6820      	ldr	r0, [r4, #0]
 8001614:	f000 ff3a 	bl	800248c <USB_ReadInterrupts>
 8001618:	2800      	cmp	r0, #0
 800161a:	d0f8      	beq.n	800160e <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800161c:	6820      	ldr	r0, [r4, #0]
 800161e:	f000 ff35 	bl	800248c <USB_ReadInterrupts>
 8001622:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8001626:	d003      	beq.n	8001630 <HAL_HCD_IRQHandler+0x32>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800162e:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001630:	6820      	ldr	r0, [r4, #0]
 8001632:	f000 ff2b 	bl	800248c <USB_ReadInterrupts>
 8001636:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800163a:	d003      	beq.n	8001644 <HAL_HCD_IRQHandler+0x46>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001642:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001644:	6820      	ldr	r0, [r4, #0]
 8001646:	f000 ff21 	bl	800248c <USB_ReadInterrupts>
 800164a:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800164e:	d003      	beq.n	8001658 <HAL_HCD_IRQHandler+0x5a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001656:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001658:	6820      	ldr	r0, [r4, #0]
 800165a:	f000 ff17 	bl	800248c <USB_ReadInterrupts>
 800165e:	f010 0f02 	tst.w	r0, #2
 8001662:	d002      	beq.n	800166a <HAL_HCD_IRQHandler+0x6c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	2202      	movs	r2, #2
 8001668:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800166a:	6820      	ldr	r0, [r4, #0]
 800166c:	f000 ff0e 	bl	800248c <USB_ReadInterrupts>
 8001670:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8001674:	d008      	beq.n	8001688 <HAL_HCD_IRQHandler+0x8a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800167c:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800167e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001682:	f013 0f01 	tst.w	r3, #1
 8001686:	d01d      	beq.n	80016c4 <HAL_HCD_IRQHandler+0xc6>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001688:	6820      	ldr	r0, [r4, #0]
 800168a:	f000 feff 	bl	800248c <USB_ReadInterrupts>
 800168e:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8001692:	d126      	bne.n	80016e2 <HAL_HCD_IRQHandler+0xe4>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001694:	6820      	ldr	r0, [r4, #0]
 8001696:	f000 fef9 	bl	800248c <USB_ReadInterrupts>
 800169a:	f010 0f08 	tst.w	r0, #8
 800169e:	d124      	bne.n	80016ea <HAL_HCD_IRQHandler+0xec>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80016a0:	6820      	ldr	r0, [r4, #0]
 80016a2:	f000 fef3 	bl	800248c <USB_ReadInterrupts>
 80016a6:	f010 0f10 	tst.w	r0, #16
 80016aa:	d125      	bne.n	80016f8 <HAL_HCD_IRQHandler+0xfa>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80016ac:	6820      	ldr	r0, [r4, #0]
 80016ae:	f000 feed 	bl	800248c <USB_ReadInterrupts>
 80016b2:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80016b6:	d0aa      	beq.n	800160e <HAL_HCD_IRQHandler+0x10>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80016b8:	6820      	ldr	r0, [r4, #0]
 80016ba:	f001 f89a 	bl	80027f2 <USB_HC_ReadInterrupt>
 80016be:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016c0:	2500      	movs	r5, #0
 80016c2:	e02c      	b.n	800171e <HAL_HCD_IRQHandler+0x120>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80016c4:	2110      	movs	r1, #16
 80016c6:	4628      	mov	r0, r5
 80016c8:	f000 fe78 	bl	80023bc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80016cc:	4628      	mov	r0, r5
 80016ce:	f000 fe8d 	bl	80023ec <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80016d2:	2101      	movs	r1, #1
 80016d4:	6820      	ldr	r0, [r4, #0]
 80016d6:	f000 ff8b 	bl	80025f0 <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 80016da:	4620      	mov	r0, r4
 80016dc:	f004 ff12 	bl	8006504 <HAL_HCD_Disconnect_Callback>
 80016e0:	e7d2      	b.n	8001688 <HAL_HCD_IRQHandler+0x8a>
      HCD_Port_IRQHandler(hhcd);
 80016e2:	4620      	mov	r0, r4
 80016e4:	f7ff fc1c 	bl	8000f20 <HCD_Port_IRQHandler>
 80016e8:	e7d4      	b.n	8001694 <HAL_HCD_IRQHandler+0x96>
      HAL_HCD_SOF_Callback(hhcd);
 80016ea:	4620      	mov	r0, r4
 80016ec:	f004 fefe 	bl	80064ec <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	2208      	movs	r2, #8
 80016f4:	615a      	str	r2, [r3, #20]
 80016f6:	e7d3      	b.n	80016a0 <HAL_HCD_IRQHandler+0xa2>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016f8:	6822      	ldr	r2, [r4, #0]
 80016fa:	6993      	ldr	r3, [r2, #24]
 80016fc:	f023 0310 	bic.w	r3, r3, #16
 8001700:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 8001702:	4620      	mov	r0, r4
 8001704:	f7ff fa6a 	bl	8000bdc <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001708:	6822      	ldr	r2, [r4, #0]
 800170a:	6993      	ldr	r3, [r2, #24]
 800170c:	f043 0310 	orr.w	r3, r3, #16
 8001710:	6193      	str	r3, [r2, #24]
 8001712:	e7cb      	b.n	80016ac <HAL_HCD_IRQHandler+0xae>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001714:	b2e9      	uxtb	r1, r5
 8001716:	4620      	mov	r0, r4
 8001718:	f7ff fdec 	bl	80012f4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800171c:	3501      	adds	r5, #1
 800171e:	68a3      	ldr	r3, [r4, #8]
 8001720:	42ab      	cmp	r3, r5
 8001722:	d912      	bls.n	800174a <HAL_HCD_IRQHandler+0x14c>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001724:	f005 030f 	and.w	r3, r5, #15
 8001728:	fa27 f303 	lsr.w	r3, r7, r3
 800172c:	f013 0f01 	tst.w	r3, #1
 8001730:	d0f4      	beq.n	800171c <HAL_HCD_IRQHandler+0x11e>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001732:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8001736:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800173a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800173e:	d0e9      	beq.n	8001714 <HAL_HCD_IRQHandler+0x116>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001740:	b2e9      	uxtb	r1, r5
 8001742:	4620      	mov	r0, r4
 8001744:	f7ff fc44 	bl	8000fd0 <HCD_HC_IN_IRQHandler>
 8001748:	e7e8      	b.n	800171c <HAL_HCD_IRQHandler+0x11e>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800174a:	6823      	ldr	r3, [r4, #0]
 800174c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001750:	615a      	str	r2, [r3, #20]
 8001752:	e75c      	b.n	800160e <HAL_HCD_IRQHandler+0x10>

08001754 <HAL_HCD_Start>:
  __HAL_LOCK(hhcd);
 8001754:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8001758:	2b01      	cmp	r3, #1
 800175a:	d00e      	beq.n	800177a <HAL_HCD_Start+0x26>
{
 800175c:	b510      	push	{r4, lr}
 800175e:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001760:	2101      	movs	r1, #1
 8001762:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001766:	6800      	ldr	r0, [r0, #0]
 8001768:	f000 ff81 	bl	800266e <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 800176c:	6820      	ldr	r0, [r4, #0]
 800176e:	f000 fe18 	bl	80023a2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001772:	2000      	movs	r0, #0
 8001774:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8001778:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800177a:	2002      	movs	r0, #2
}
 800177c:	4770      	bx	lr

0800177e <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 800177e:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8001782:	2b01      	cmp	r3, #1
 8001784:	d00b      	beq.n	800179e <HAL_HCD_Stop+0x20>
{
 8001786:	b510      	push	{r4, lr}
 8001788:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800178a:	2301      	movs	r3, #1
 800178c:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001790:	6800      	ldr	r0, [r0, #0]
 8001792:	f001 f961 	bl	8002a58 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001796:	2000      	movs	r0, #0
 8001798:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 800179c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800179e:	2002      	movs	r0, #2
}
 80017a0:	4770      	bx	lr

080017a2 <HAL_HCD_ResetPort>:
{
 80017a2:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 80017a4:	6800      	ldr	r0, [r0, #0]
 80017a6:	f000 ff43 	bl	8002630 <USB_ResetPort>
}
 80017aa:	bd08      	pop	{r3, pc}

080017ac <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 80017ac:	232c      	movs	r3, #44	; 0x2c
 80017ae:	fb03 0101 	mla	r1, r3, r1, r0
}
 80017b2:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
 80017b6:	4770      	bx	lr

080017b8 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 80017b8:	232c      	movs	r3, #44	; 0x2c
 80017ba:	fb03 0101 	mla	r1, r3, r1, r0
}
 80017be:	6d08      	ldr	r0, [r1, #80]	; 0x50
 80017c0:	4770      	bx	lr

080017c2 <HAL_HCD_GetCurrentFrame>:
{
 80017c2:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 80017c4:	6800      	ldr	r0, [r0, #0]
 80017c6:	f000 ff80 	bl	80026ca <USB_GetCurrentFrame>
}
 80017ca:	bd08      	pop	{r3, pc}

080017cc <HAL_HCD_GetCurrentSpeed>:
{
 80017cc:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 80017ce:	6800      	ldr	r0, [r0, #0]
 80017d0:	f000 ff70 	bl	80026b4 <USB_GetHostSpeed>
}
 80017d4:	bd08      	pop	{r3, pc}
	...

080017d8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d8:	2800      	cmp	r0, #0
 80017da:	f000 81df 	beq.w	8001b9c <HAL_RCC_OscConfig+0x3c4>
{
 80017de:	b570      	push	{r4, r5, r6, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e4:	6803      	ldr	r3, [r0, #0]
 80017e6:	f013 0f01 	tst.w	r3, #1
 80017ea:	d03b      	beq.n	8001864 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ec:	4ba6      	ldr	r3, [pc, #664]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d02c      	beq.n	8001852 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f8:	4ba3      	ldr	r3, [pc, #652]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001800:	2b08      	cmp	r3, #8
 8001802:	d021      	beq.n	8001848 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001804:	6863      	ldr	r3, [r4, #4]
 8001806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180a:	d04f      	beq.n	80018ac <HAL_RCC_OscConfig+0xd4>
 800180c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001810:	d052      	beq.n	80018b8 <HAL_RCC_OscConfig+0xe0>
 8001812:	4b9d      	ldr	r3, [pc, #628]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001822:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001824:	6863      	ldr	r3, [r4, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d050      	beq.n	80018cc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff f88b 	bl	8000944 <HAL_GetTick>
 800182e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001830:	4b95      	ldr	r3, [pc, #596]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001838:	d114      	bne.n	8001864 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800183a:	f7ff f883 	bl	8000944 <HAL_GetTick>
 800183e:	1b40      	subs	r0, r0, r5
 8001840:	2864      	cmp	r0, #100	; 0x64
 8001842:	d9f5      	bls.n	8001830 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001844:	2003      	movs	r0, #3
 8001846:	e1b0      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001848:	4b8f      	ldr	r3, [pc, #572]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001850:	d0d8      	beq.n	8001804 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001852:	4b8d      	ldr	r3, [pc, #564]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800185a:	d003      	beq.n	8001864 <HAL_RCC_OscConfig+0x8c>
 800185c:	6863      	ldr	r3, [r4, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 819e 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	f013 0f02 	tst.w	r3, #2
 800186a:	d054      	beq.n	8001916 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800186c:	4b86      	ldr	r3, [pc, #536]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f013 0f0c 	tst.w	r3, #12
 8001874:	d03e      	beq.n	80018f4 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001876:	4b84      	ldr	r3, [pc, #528]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800187e:	2b08      	cmp	r3, #8
 8001880:	d033      	beq.n	80018ea <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001882:	68e3      	ldr	r3, [r4, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d067      	beq.n	8001958 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001888:	4b80      	ldr	r3, [pc, #512]	; (8001a8c <HAL_RCC_OscConfig+0x2b4>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff f859 	bl	8000944 <HAL_GetTick>
 8001892:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	4b7c      	ldr	r3, [pc, #496]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f013 0f02 	tst.w	r3, #2
 800189c:	d153      	bne.n	8001946 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff f851 	bl	8000944 <HAL_GetTick>
 80018a2:	1b40      	subs	r0, r0, r5
 80018a4:	2802      	cmp	r0, #2
 80018a6:	d9f5      	bls.n	8001894 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80018a8:	2003      	movs	r0, #3
 80018aa:	e17e      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ac:	4a76      	ldr	r2, [pc, #472]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 80018ae:	6813      	ldr	r3, [r2, #0]
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e7b5      	b.n	8001824 <HAL_RCC_OscConfig+0x4c>
 80018b8:	4b73      	ldr	r3, [pc, #460]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	e7ab      	b.n	8001824 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80018cc:	f7ff f83a 	bl	8000944 <HAL_GetTick>
 80018d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d2:	4b6d      	ldr	r3, [pc, #436]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80018da:	d0c3      	beq.n	8001864 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff f832 	bl	8000944 <HAL_GetTick>
 80018e0:	1b40      	subs	r0, r0, r5
 80018e2:	2864      	cmp	r0, #100	; 0x64
 80018e4:	d9f5      	bls.n	80018d2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80018e6:	2003      	movs	r0, #3
 80018e8:	e15f      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ea:	4b67      	ldr	r3, [pc, #412]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80018f2:	d1c6      	bne.n	8001882 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f4:	4b64      	ldr	r3, [pc, #400]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f013 0f02 	tst.w	r3, #2
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_OscConfig+0x12e>
 80018fe:	68e3      	ldr	r3, [r4, #12]
 8001900:	2b01      	cmp	r3, #1
 8001902:	f040 814f 	bne.w	8001ba4 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001906:	4a60      	ldr	r2, [pc, #384]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 8001908:	6813      	ldr	r3, [r2, #0]
 800190a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800190e:	6921      	ldr	r1, [r4, #16]
 8001910:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001914:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	f013 0f08 	tst.w	r3, #8
 800191c:	d040      	beq.n	80019a0 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800191e:	6963      	ldr	r3, [r4, #20]
 8001920:	b363      	cbz	r3, 800197c <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001922:	4b5b      	ldr	r3, [pc, #364]	; (8001a90 <HAL_RCC_OscConfig+0x2b8>)
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7ff f80c 	bl	8000944 <HAL_GetTick>
 800192c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	4b56      	ldr	r3, [pc, #344]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 8001930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001932:	f013 0f02 	tst.w	r3, #2
 8001936:	d133      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001938:	f7ff f804 	bl	8000944 <HAL_GetTick>
 800193c:	1b40      	subs	r0, r0, r5
 800193e:	2802      	cmp	r0, #2
 8001940:	d9f5      	bls.n	800192e <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8001942:	2003      	movs	r0, #3
 8001944:	e131      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001946:	4a50      	ldr	r2, [pc, #320]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 8001948:	6813      	ldr	r3, [r2, #0]
 800194a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800194e:	6921      	ldr	r1, [r4, #16]
 8001950:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e7de      	b.n	8001916 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001958:	4b4c      	ldr	r3, [pc, #304]	; (8001a8c <HAL_RCC_OscConfig+0x2b4>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800195e:	f7fe fff1 	bl	8000944 <HAL_GetTick>
 8001962:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001964:	4b48      	ldr	r3, [pc, #288]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f013 0f02 	tst.w	r3, #2
 800196c:	d0d3      	beq.n	8001916 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800196e:	f7fe ffe9 	bl	8000944 <HAL_GetTick>
 8001972:	1b40      	subs	r0, r0, r5
 8001974:	2802      	cmp	r0, #2
 8001976:	d9f5      	bls.n	8001964 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8001978:	2003      	movs	r0, #3
 800197a:	e116      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197c:	4b44      	ldr	r3, [pc, #272]	; (8001a90 <HAL_RCC_OscConfig+0x2b8>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7fe ffdf 	bl	8000944 <HAL_GetTick>
 8001986:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001988:	4b3f      	ldr	r3, [pc, #252]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 800198a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800198c:	f013 0f02 	tst.w	r3, #2
 8001990:	d006      	beq.n	80019a0 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001992:	f7fe ffd7 	bl	8000944 <HAL_GetTick>
 8001996:	1b40      	subs	r0, r0, r5
 8001998:	2802      	cmp	r0, #2
 800199a:	d9f5      	bls.n	8001988 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 800199c:	2003      	movs	r0, #3
 800199e:	e104      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	f013 0f04 	tst.w	r3, #4
 80019a6:	d078      	beq.n	8001a9a <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019a8:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80019b0:	d10d      	bne.n	80019ce <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 80019b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019be:	641a      	str	r2, [r3, #64]	; 0x40
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80019ca:	2501      	movs	r5, #1
 80019cc:	e000      	b.n	80019d0 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 80019ce:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	4b30      	ldr	r3, [pc, #192]	; (8001a94 <HAL_RCC_OscConfig+0x2bc>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80019d8:	d021      	beq.n	8001a1e <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019da:	68a3      	ldr	r3, [r4, #8]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d032      	beq.n	8001a46 <HAL_RCC_OscConfig+0x26e>
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d036      	beq.n	8001a52 <HAL_RCC_OscConfig+0x27a>
 80019e4:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 80019e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019e8:	f022 0201 	bic.w	r2, r2, #1
 80019ec:	671a      	str	r2, [r3, #112]	; 0x70
 80019ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019f0:	f022 0204 	bic.w	r2, r2, #4
 80019f4:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019f6:	68a3      	ldr	r3, [r4, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d034      	beq.n	8001a66 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fc:	f7fe ffa2 	bl	8000944 <HAL_GetTick>
 8001a00:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a02:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a06:	f013 0f02 	tst.w	r3, #2
 8001a0a:	d145      	bne.n	8001a98 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0c:	f7fe ff9a 	bl	8000944 <HAL_GetTick>
 8001a10:	1b80      	subs	r0, r0, r6
 8001a12:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a16:	4298      	cmp	r0, r3
 8001a18:	d9f3      	bls.n	8001a02 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	e0c5      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1e:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <HAL_RCC_OscConfig+0x2bc>)
 8001a20:	6813      	ldr	r3, [r2, #0]
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001a28:	f7fe ff8c 	bl	8000944 <HAL_GetTick>
 8001a2c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2e:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_RCC_OscConfig+0x2bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a36:	d1d0      	bne.n	80019da <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a38:	f7fe ff84 	bl	8000944 <HAL_GetTick>
 8001a3c:	1b80      	subs	r0, r0, r6
 8001a3e:	2802      	cmp	r0, #2
 8001a40:	d9f5      	bls.n	8001a2e <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8001a42:	2003      	movs	r0, #3
 8001a44:	e0b1      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a46:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 8001a48:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a50:	e7d1      	b.n	80019f6 <HAL_RCC_OscConfig+0x21e>
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 8001a54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a56:	f042 0204 	orr.w	r2, r2, #4
 8001a5a:	671a      	str	r2, [r3, #112]	; 0x70
 8001a5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	671a      	str	r2, [r3, #112]	; 0x70
 8001a64:	e7c7      	b.n	80019f6 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a66:	f7fe ff6d 	bl	8000944 <HAL_GetTick>
 8001a6a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_RCC_OscConfig+0x2b0>)
 8001a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a70:	f013 0f02 	tst.w	r3, #2
 8001a74:	d010      	beq.n	8001a98 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7fe ff65 	bl	8000944 <HAL_GetTick>
 8001a7a:	1b80      	subs	r0, r0, r6
 8001a7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a80:	4298      	cmp	r0, r3
 8001a82:	d9f3      	bls.n	8001a6c <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8001a84:	2003      	movs	r0, #3
 8001a86:	e090      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	42470000 	.word	0x42470000
 8001a90:	42470e80 	.word	0x42470e80
 8001a94:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a98:	b9ed      	cbnz	r5, 8001ad6 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a9a:	69a3      	ldr	r3, [r4, #24]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8083 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aa2:	4a49      	ldr	r2, [pc, #292]	; (8001bc8 <HAL_RCC_OscConfig+0x3f0>)
 8001aa4:	6892      	ldr	r2, [r2, #8]
 8001aa6:	f002 020c 	and.w	r2, r2, #12
 8001aaa:	2a08      	cmp	r2, #8
 8001aac:	d051      	beq.n	8001b52 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d017      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab2:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <HAL_RCC_OscConfig+0x3f4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7fe ff44 	bl	8000944 <HAL_GetTick>
 8001abc:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001abe:	4b42      	ldr	r3, [pc, #264]	; (8001bc8 <HAL_RCC_OscConfig+0x3f0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ac6:	d042      	beq.n	8001b4e <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7fe ff3c 	bl	8000944 <HAL_GetTick>
 8001acc:	1b00      	subs	r0, r0, r4
 8001ace:	2802      	cmp	r0, #2
 8001ad0:	d9f5      	bls.n	8001abe <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001ad2:	2003      	movs	r0, #3
 8001ad4:	e069      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad6:	4a3c      	ldr	r2, [pc, #240]	; (8001bc8 <HAL_RCC_OscConfig+0x3f0>)
 8001ad8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ade:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae0:	e7db      	b.n	8001a9a <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <HAL_RCC_OscConfig+0x3f4>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ae8:	f7fe ff2c 	bl	8000944 <HAL_GetTick>
 8001aec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aee:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <HAL_RCC_OscConfig+0x3f0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001af6:	d006      	beq.n	8001b06 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af8:	f7fe ff24 	bl	8000944 <HAL_GetTick>
 8001afc:	1b40      	subs	r0, r0, r5
 8001afe:	2802      	cmp	r0, #2
 8001b00:	d9f5      	bls.n	8001aee <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8001b02:	2003      	movs	r0, #3
 8001b04:	e051      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b06:	69e3      	ldr	r3, [r4, #28]
 8001b08:	6a22      	ldr	r2, [r4, #32]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b0e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b12:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b14:	0852      	lsrs	r2, r2, #1
 8001b16:	3a01      	subs	r2, #1
 8001b18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b22:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <HAL_RCC_OscConfig+0x3f0>)
 8001b24:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b26:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <HAL_RCC_OscConfig+0x3f4>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b2c:	f7fe ff0a 	bl	8000944 <HAL_GetTick>
 8001b30:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b32:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <HAL_RCC_OscConfig+0x3f0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7fe ff02 	bl	8000944 <HAL_GetTick>
 8001b40:	1b00      	subs	r0, r0, r4
 8001b42:	2802      	cmp	r0, #2
 8001b44:	d9f5      	bls.n	8001b32 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001b46:	2003      	movs	r0, #3
 8001b48:	e02f      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	e02d      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
 8001b4e:	2000      	movs	r0, #0
 8001b50:	e02b      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d02b      	beq.n	8001bae <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <HAL_RCC_OscConfig+0x3f0>)
 8001b58:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001b5e:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b60:	4291      	cmp	r1, r2
 8001b62:	d126      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b68:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6a:	428a      	cmp	r2, r1
 8001b6c:	d123      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b70:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001b74:	401a      	ands	r2, r3
 8001b76:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001b7a:	d11e      	bne.n	8001bba <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b7c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001b80:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b82:	0852      	lsrs	r2, r2, #1
 8001b84:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b86:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001b8a:	d118      	bne.n	8001bbe <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b8c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001b90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b92:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001b96:	d114      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8001b98:	2000      	movs	r0, #0
 8001b9a:	e006      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8001b9c:	2001      	movs	r0, #1
}
 8001b9e:	4770      	bx	lr
        return HAL_ERROR;
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	e002      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8001ba8:	2000      	movs	r0, #0
}
 8001baa:	b002      	add	sp, #8
 8001bac:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001bae:	2001      	movs	r0, #1
 8001bb0:	e7fb      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	e7f9      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	e7f7      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
 8001bba:	2001      	movs	r0, #1
 8001bbc:	e7f5      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	e7f3      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	e7f1      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	42470060 	.word	0x42470060

08001bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d03d      	beq.n	8001c5a <HAL_RCC_GetSysClockFreq+0x8a>
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d13d      	bne.n	8001c5e <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x94>)
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001bf0:	d012      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bf4:	6859      	ldr	r1, [r3, #4]
 8001bf6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	481a      	ldr	r0, [pc, #104]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bfe:	fba1 0100 	umull	r0, r1, r1, r0
 8001c02:	f7fe faed 	bl	80001e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c0e:	3301      	adds	r3, #1
 8001c10:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001c12:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001c16:	e023      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001c20:	015c      	lsls	r4, r3, #5
 8001c22:	2500      	movs	r5, #0
 8001c24:	1ae4      	subs	r4, r4, r3
 8001c26:	f165 0500 	sbc.w	r5, r5, #0
 8001c2a:	01ae      	lsls	r6, r5, #6
 8001c2c:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001c30:	01a7      	lsls	r7, r4, #6
 8001c32:	1b38      	subs	r0, r7, r4
 8001c34:	eb66 0105 	sbc.w	r1, r6, r5
 8001c38:	00cc      	lsls	r4, r1, #3
 8001c3a:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8001c3e:	00c5      	lsls	r5, r0, #3
 8001c40:	18e8      	adds	r0, r5, r3
 8001c42:	f144 0100 	adc.w	r1, r4, #0
 8001c46:	028b      	lsls	r3, r1, #10
 8001c48:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001c4c:	0284      	lsls	r4, r0, #10
 8001c4e:	4620      	mov	r0, r4
 8001c50:	4619      	mov	r1, r3
 8001c52:	2300      	movs	r3, #0
 8001c54:	f7fe fac4 	bl	80001e0 <__aeabi_uldivmod>
 8001c58:	e7d5      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001c5a:	4803      	ldr	r0, [pc, #12]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c5c:	e000      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c5e:	4803      	ldr	r0, [pc, #12]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	017d7840 	.word	0x017d7840
 8001c6c:	00f42400 	.word	0x00f42400

08001c70 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001c70:	2800      	cmp	r0, #0
 8001c72:	f000 809b 	beq.w	8001dac <HAL_RCC_ClockConfig+0x13c>
{
 8001c76:	b570      	push	{r4, r5, r6, lr}
 8001c78:	460d      	mov	r5, r1
 8001c7a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b4f      	ldr	r3, [pc, #316]	; (8001dbc <HAL_RCC_ClockConfig+0x14c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	428b      	cmp	r3, r1
 8001c86:	d208      	bcs.n	8001c9a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c88:	b2cb      	uxtb	r3, r1
 8001c8a:	4a4c      	ldr	r2, [pc, #304]	; (8001dbc <HAL_RCC_ClockConfig+0x14c>)
 8001c8c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	428b      	cmp	r3, r1
 8001c96:	f040 808b 	bne.w	8001db0 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	f013 0f02 	tst.w	r3, #2
 8001ca0:	d017      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca2:	f013 0f04 	tst.w	r3, #4
 8001ca6:	d004      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca8:	4a45      	ldr	r2, [pc, #276]	; (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001caa:	6893      	ldr	r3, [r2, #8]
 8001cac:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cb0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	f013 0f08 	tst.w	r3, #8
 8001cb8:	d004      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cba:	4a41      	ldr	r2, [pc, #260]	; (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001cbc:	6893      	ldr	r3, [r2, #8]
 8001cbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cc2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc4:	4a3e      	ldr	r2, [pc, #248]	; (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001cc6:	6893      	ldr	r3, [r2, #8]
 8001cc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ccc:	68a1      	ldr	r1, [r4, #8]
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	f013 0f01 	tst.w	r3, #1
 8001cd8:	d032      	beq.n	8001d40 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cda:	6863      	ldr	r3, [r4, #4]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d021      	beq.n	8001d24 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce0:	1e9a      	subs	r2, r3, #2
 8001ce2:	2a01      	cmp	r2, #1
 8001ce4:	d925      	bls.n	8001d32 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce6:	4a36      	ldr	r2, [pc, #216]	; (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	f012 0f02 	tst.w	r2, #2
 8001cee:	d061      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf0:	4933      	ldr	r1, [pc, #204]	; (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001cf2:	688a      	ldr	r2, [r1, #8]
 8001cf4:	f022 0203 	bic.w	r2, r2, #3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001cfc:	f7fe fe22 	bl	8000944 <HAL_GetTick>
 8001d00:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	6862      	ldr	r2, [r4, #4]
 8001d0c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d10:	d016      	beq.n	8001d40 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d12:	f7fe fe17 	bl	8000944 <HAL_GetTick>
 8001d16:	1b80      	subs	r0, r0, r6
 8001d18:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d1c:	4298      	cmp	r0, r3
 8001d1e:	d9f0      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001d20:	2003      	movs	r0, #3
 8001d22:	e042      	b.n	8001daa <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d24:	4a26      	ldr	r2, [pc, #152]	; (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001d2c:	d1e0      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001d2e:	2001      	movs	r0, #1
 8001d30:	e03b      	b.n	8001daa <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d32:	4a23      	ldr	r2, [pc, #140]	; (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001d3a:	d1d9      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	e034      	b.n	8001daa <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <HAL_RCC_ClockConfig+0x14c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	42ab      	cmp	r3, r5
 8001d4a:	d907      	bls.n	8001d5c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4c:	b2ea      	uxtb	r2, r5
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <HAL_RCC_ClockConfig+0x14c>)
 8001d50:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	42ab      	cmp	r3, r5
 8001d5a:	d12d      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	f013 0f04 	tst.w	r3, #4
 8001d62:	d006      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d64:	4a16      	ldr	r2, [pc, #88]	; (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001d66:	6893      	ldr	r3, [r2, #8]
 8001d68:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001d6c:	68e1      	ldr	r1, [r4, #12]
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	f013 0f08 	tst.w	r3, #8
 8001d78:	d007      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7a:	4a11      	ldr	r2, [pc, #68]	; (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001d7c:	6893      	ldr	r3, [r2, #8]
 8001d7e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d82:	6921      	ldr	r1, [r4, #16]
 8001d84:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d88:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d8a:	f7ff ff21 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_RCC_ClockConfig+0x150>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d96:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <HAL_RCC_ClockConfig+0x154>)
 8001d98:	5cd3      	ldrb	r3, [r2, r3]
 8001d9a:	40d8      	lsrs	r0, r3
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x158>)
 8001d9e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_RCC_ClockConfig+0x15c>)
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	f7fe fcfe 	bl	80007a4 <HAL_InitTick>
  return HAL_OK;
 8001da8:	2000      	movs	r0, #0
}
 8001daa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001dac:	2001      	movs	r0, #1
}
 8001dae:	4770      	bx	lr
      return HAL_ERROR;
 8001db0:	2001      	movs	r0, #1
 8001db2:	e7fa      	b.n	8001daa <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001db4:	2001      	movs	r0, #1
 8001db6:	e7f8      	b.n	8001daa <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001db8:	2001      	movs	r0, #1
 8001dba:	e7f6      	b.n	8001daa <HAL_RCC_ClockConfig+0x13a>
 8001dbc:	40023c00 	.word	0x40023c00
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	08006a40 	.word	0x08006a40
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000008 	.word	0x20000008

08001dd0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001dd0:	4b01      	ldr	r3, [pc, #4]	; (8001dd8 <HAL_RCC_GetHCLKFreq+0x8>)
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000000 	.word	0x20000000

08001ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ddc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dde:	f7ff fff7 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001dea:	4a03      	ldr	r2, [pc, #12]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001dec:	5cd3      	ldrb	r3, [r2, r3]
}
 8001dee:	40d8      	lsrs	r0, r3
 8001df0:	bd08      	pop	{r3, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	08006a50 	.word	0x08006a50

08001dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dfc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dfe:	f7ff ffe7 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001e0a:	4a03      	ldr	r2, [pc, #12]	; (8001e18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e0c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e0e:	40d8      	lsrs	r0, r3
 8001e10:	bd08      	pop	{r3, pc}
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	08006a50 	.word	0x08006a50

08001e1c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_RCC_GetClockConfig+0x34>)
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	f002 0203 	and.w	r2, r2, #3
 8001e28:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001e30:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001e38:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	08db      	lsrs	r3, r3, #3
 8001e3e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001e42:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_RCC_GetClockConfig+0x38>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	600b      	str	r3, [r1, #0]
}
 8001e4e:	4770      	bx	lr
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40023c00 	.word	0x40023c00

08001e58 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e58:	4770      	bx	lr
	...

08001e5c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e5c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d12f      	bne.n	8001ec6 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e66:	2302      	movs	r3, #2
 8001e68:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e6c:	6802      	ldr	r2, [r0, #0]
 8001e6e:	68d3      	ldr	r3, [r2, #12]
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e76:	6803      	ldr	r3, [r0, #0]
 8001e78:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <HAL_TIM_Base_Start_IT+0x74>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d018      	beq.n	8001eb0 <HAL_TIM_Base_Start_IT+0x54>
 8001e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e82:	d015      	beq.n	8001eb0 <HAL_TIM_Base_Start_IT+0x54>
 8001e84:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d011      	beq.n	8001eb0 <HAL_TIM_Base_Start_IT+0x54>
 8001e8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d00d      	beq.n	8001eb0 <HAL_TIM_Base_Start_IT+0x54>
 8001e94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d009      	beq.n	8001eb0 <HAL_TIM_Base_Start_IT+0x54>
 8001e9c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d005      	beq.n	8001eb0 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eac:	2000      	movs	r0, #0
 8001eae:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb6:	2a06      	cmp	r2, #6
 8001eb8:	d007      	beq.n	8001eca <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	f042 0201 	orr.w	r2, r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	4770      	bx	lr
    return HAL_ERROR;
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	4770      	bx	lr
  return HAL_OK;
 8001eca:	2000      	movs	r0, #0
}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40010000 	.word	0x40010000

08001ed4 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ed8:	4770      	bx	lr

08001eda <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eda:	4770      	bx	lr

08001edc <HAL_TIM_IRQHandler>:
{
 8001edc:	b510      	push	{r4, lr}
 8001ede:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ee0:	6803      	ldr	r3, [r0, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	f012 0f02 	tst.w	r2, #2
 8001ee8:	d011      	beq.n	8001f0e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	f012 0f02 	tst.w	r2, #2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ef2:	f06f 0202 	mvn.w	r2, #2
 8001ef6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001efc:	6803      	ldr	r3, [r0, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f013 0f03 	tst.w	r3, #3
 8001f04:	d070      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001f06:	f7ff ffe6 	bl	8001ed6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	f012 0f04 	tst.w	r2, #4
 8001f16:	d012      	beq.n	8001f3e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	f012 0f04 	tst.w	r2, #4
 8001f1e:	d00e      	beq.n	8001f3e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f20:	f06f 0204 	mvn.w	r2, #4
 8001f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f26:	2302      	movs	r3, #2
 8001f28:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f32:	d05f      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f34:	4620      	mov	r0, r4
 8001f36:	f7ff ffce 	bl	8001ed6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	f012 0f08 	tst.w	r2, #8
 8001f46:	d012      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	f012 0f08 	tst.w	r2, #8
 8001f4e:	d00e      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f50:	f06f 0208 	mvn.w	r2, #8
 8001f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f56:	2304      	movs	r3, #4
 8001f58:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f013 0f03 	tst.w	r3, #3
 8001f62:	d04e      	beq.n	8002002 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f64:	4620      	mov	r0, r4
 8001f66:	f7ff ffb6 	bl	8001ed6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	f012 0f10 	tst.w	r2, #16
 8001f76:	d012      	beq.n	8001f9e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	f012 0f10 	tst.w	r2, #16
 8001f7e:	d00e      	beq.n	8001f9e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f80:	f06f 0210 	mvn.w	r2, #16
 8001f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f86:	2308      	movs	r3, #8
 8001f88:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f92:	d03d      	beq.n	8002010 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f94:	4620      	mov	r0, r4
 8001f96:	f7ff ff9e 	bl	8001ed6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	f012 0f01 	tst.w	r2, #1
 8001fa6:	d003      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	f012 0f01 	tst.w	r2, #1
 8001fae:	d136      	bne.n	800201e <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001fc0:	d134      	bne.n	800202c <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001fca:	d003      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001fd2:	d132      	bne.n	800203a <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	f012 0f20 	tst.w	r2, #32
 8001fdc:	d003      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	f012 0f20 	tst.w	r2, #32
 8001fe4:	d130      	bne.n	8002048 <HAL_TIM_IRQHandler+0x16c>
}
 8001fe6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe8:	f7ff ff74 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fec:	4620      	mov	r0, r4
 8001fee:	f7ff ff73 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ff2:	e78a      	b.n	8001f0a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7ff ff6d 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f7ff ff6c 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002000:	e79b      	b.n	8001f3a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002002:	4620      	mov	r0, r4
 8002004:	f7ff ff66 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002008:	4620      	mov	r0, r4
 800200a:	f7ff ff65 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
 800200e:	e7ac      	b.n	8001f6a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002010:	4620      	mov	r0, r4
 8002012:	f7ff ff5f 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002016:	4620      	mov	r0, r4
 8002018:	f7ff ff5e 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
 800201c:	e7bd      	b.n	8001f9a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800201e:	f06f 0201 	mvn.w	r2, #1
 8002022:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002024:	4620      	mov	r0, r4
 8002026:	f7fe fac7 	bl	80005b8 <HAL_TIM_PeriodElapsedCallback>
 800202a:	e7c1      	b.n	8001fb0 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800202c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002030:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002032:	4620      	mov	r0, r4
 8002034:	f000 f88b 	bl	800214e <HAL_TIMEx_BreakCallback>
 8002038:	e7c3      	b.n	8001fc2 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800203a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800203e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002040:	4620      	mov	r0, r4
 8002042:	f7ff ff4a 	bl	8001eda <HAL_TIM_TriggerCallback>
 8002046:	e7c5      	b.n	8001fd4 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002048:	f06f 0220 	mvn.w	r2, #32
 800204c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800204e:	4620      	mov	r0, r4
 8002050:	f000 f87c 	bl	800214c <HAL_TIMEx_CommutCallback>
}
 8002054:	e7c7      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x10a>
	...

08002058 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002058:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800205a:	4a25      	ldr	r2, [pc, #148]	; (80020f0 <TIM_Base_SetConfig+0x98>)
 800205c:	4290      	cmp	r0, r2
 800205e:	d00e      	beq.n	800207e <TIM_Base_SetConfig+0x26>
 8002060:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002064:	d00b      	beq.n	800207e <TIM_Base_SetConfig+0x26>
 8002066:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800206a:	4290      	cmp	r0, r2
 800206c:	d007      	beq.n	800207e <TIM_Base_SetConfig+0x26>
 800206e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002072:	4290      	cmp	r0, r2
 8002074:	d003      	beq.n	800207e <TIM_Base_SetConfig+0x26>
 8002076:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800207a:	4290      	cmp	r0, r2
 800207c:	d103      	bne.n	8002086 <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800207e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002082:	684a      	ldr	r2, [r1, #4]
 8002084:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002086:	4a1a      	ldr	r2, [pc, #104]	; (80020f0 <TIM_Base_SetConfig+0x98>)
 8002088:	4290      	cmp	r0, r2
 800208a:	d01a      	beq.n	80020c2 <TIM_Base_SetConfig+0x6a>
 800208c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002090:	d017      	beq.n	80020c2 <TIM_Base_SetConfig+0x6a>
 8002092:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002096:	4290      	cmp	r0, r2
 8002098:	d013      	beq.n	80020c2 <TIM_Base_SetConfig+0x6a>
 800209a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800209e:	4290      	cmp	r0, r2
 80020a0:	d00f      	beq.n	80020c2 <TIM_Base_SetConfig+0x6a>
 80020a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020a6:	4290      	cmp	r0, r2
 80020a8:	d00b      	beq.n	80020c2 <TIM_Base_SetConfig+0x6a>
 80020aa:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80020ae:	4290      	cmp	r0, r2
 80020b0:	d007      	beq.n	80020c2 <TIM_Base_SetConfig+0x6a>
 80020b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020b6:	4290      	cmp	r0, r2
 80020b8:	d003      	beq.n	80020c2 <TIM_Base_SetConfig+0x6a>
 80020ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020be:	4290      	cmp	r0, r2
 80020c0:	d103      	bne.n	80020ca <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020c6:	68ca      	ldr	r2, [r1, #12]
 80020c8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020ce:	694a      	ldr	r2, [r1, #20]
 80020d0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80020d2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d4:	688b      	ldr	r3, [r1, #8]
 80020d6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020d8:	680b      	ldr	r3, [r1, #0]
 80020da:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <TIM_Base_SetConfig+0x98>)
 80020de:	4298      	cmp	r0, r3
 80020e0:	d002      	beq.n	80020e8 <TIM_Base_SetConfig+0x90>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020e2:	2301      	movs	r3, #1
 80020e4:	6143      	str	r3, [r0, #20]
}
 80020e6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80020e8:	690b      	ldr	r3, [r1, #16]
 80020ea:	6303      	str	r3, [r0, #48]	; 0x30
 80020ec:	e7f9      	b.n	80020e2 <TIM_Base_SetConfig+0x8a>
 80020ee:	bf00      	nop
 80020f0:	40010000 	.word	0x40010000

080020f4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80020f4:	b340      	cbz	r0, 8002148 <HAL_TIM_Base_Init+0x54>
{
 80020f6:	b510      	push	{r4, lr}
 80020f8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80020fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020fe:	b1f3      	cbz	r3, 800213e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002100:	2302      	movs	r3, #2
 8002102:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002106:	4621      	mov	r1, r4
 8002108:	f851 0b04 	ldr.w	r0, [r1], #4
 800210c:	f7ff ffa4 	bl	8002058 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002110:	2301      	movs	r3, #1
 8002112:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002116:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800211a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800211e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002122:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002126:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800212a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800212e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002136:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800213a:	2000      	movs	r0, #0
}
 800213c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800213e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002142:	f7ff fe89 	bl	8001e58 <HAL_TIM_Base_MspInit>
 8002146:	e7db      	b.n	8002100 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002148:	2001      	movs	r0, #1
}
 800214a:	4770      	bx	lr

0800214c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800214c:	4770      	bx	lr

0800214e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800214e:	4770      	bx	lr

08002150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002150:	b570      	push	{r4, r5, r6, lr}
 8002152:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002154:	6802      	ldr	r2, [r0, #0]
 8002156:	6913      	ldr	r3, [r2, #16]
 8002158:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800215c:	68c1      	ldr	r1, [r0, #12]
 800215e:	430b      	orrs	r3, r1
 8002160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002162:	6883      	ldr	r3, [r0, #8]
 8002164:	6902      	ldr	r2, [r0, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	6942      	ldr	r2, [r0, #20]
 800216a:	4313      	orrs	r3, r2
 800216c:	69c2      	ldr	r2, [r0, #28]
 800216e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002170:	6801      	ldr	r1, [r0, #0]
 8002172:	68cb      	ldr	r3, [r1, #12]
 8002174:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002178:	f023 030c 	bic.w	r3, r3, #12
 800217c:	4313      	orrs	r3, r2
 800217e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002180:	6802      	ldr	r2, [r0, #0]
 8002182:	6953      	ldr	r3, [r2, #20]
 8002184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002188:	6981      	ldr	r1, [r0, #24]
 800218a:	430b      	orrs	r3, r1
 800218c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800218e:	6803      	ldr	r3, [r0, #0]
 8002190:	4a34      	ldr	r2, [pc, #208]	; (8002264 <UART_SetConfig+0x114>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d006      	beq.n	80021a4 <UART_SetConfig+0x54>
 8002196:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800219a:	4293      	cmp	r3, r2
 800219c:	d002      	beq.n	80021a4 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800219e:	f7ff fe1d 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
 80021a2:	e001      	b.n	80021a8 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80021a4:	f7ff fe2a 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021a8:	69e3      	ldr	r3, [r4, #28]
 80021aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ae:	d02a      	beq.n	8002206 <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021b0:	2600      	movs	r6, #0
 80021b2:	1805      	adds	r5, r0, r0
 80021b4:	eb46 0106 	adc.w	r1, r6, r6
 80021b8:	182d      	adds	r5, r5, r0
 80021ba:	eb46 0101 	adc.w	r1, r6, r1
 80021be:	00cb      	lsls	r3, r1, #3
 80021c0:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80021c4:	00ea      	lsls	r2, r5, #3
 80021c6:	4615      	mov	r5, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	6863      	ldr	r3, [r4, #4]
 80021cc:	009a      	lsls	r2, r3, #2
 80021ce:	0f9b      	lsrs	r3, r3, #30
 80021d0:	1828      	adds	r0, r5, r0
 80021d2:	eb46 0101 	adc.w	r1, r6, r1
 80021d6:	f7fe f803 	bl	80001e0 <__aeabi_uldivmod>
 80021da:	4d23      	ldr	r5, [pc, #140]	; (8002268 <UART_SetConfig+0x118>)
 80021dc:	fba5 3200 	umull	r3, r2, r5, r0
 80021e0:	0951      	lsrs	r1, r2, #5
 80021e2:	2364      	movs	r3, #100	; 0x64
 80021e4:	fb03 0311 	mls	r3, r3, r1, r0
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	3332      	adds	r3, #50	; 0x32
 80021ec:	fba5 2303 	umull	r2, r3, r5, r3
 80021f0:	095b      	lsrs	r3, r3, #5
 80021f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021f6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	6821      	ldr	r1, [r4, #0]
 8002200:	4413      	add	r3, r2
 8002202:	608b      	str	r3, [r1, #8]
  }
}
 8002204:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002206:	2600      	movs	r6, #0
 8002208:	1805      	adds	r5, r0, r0
 800220a:	eb46 0106 	adc.w	r1, r6, r6
 800220e:	182d      	adds	r5, r5, r0
 8002210:	eb46 0101 	adc.w	r1, r6, r1
 8002214:	00cb      	lsls	r3, r1, #3
 8002216:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800221a:	00ea      	lsls	r2, r5, #3
 800221c:	4615      	mov	r5, r2
 800221e:	4619      	mov	r1, r3
 8002220:	6862      	ldr	r2, [r4, #4]
 8002222:	4633      	mov	r3, r6
 8002224:	1892      	adds	r2, r2, r2
 8002226:	eb46 0303 	adc.w	r3, r6, r3
 800222a:	1828      	adds	r0, r5, r0
 800222c:	eb46 0101 	adc.w	r1, r6, r1
 8002230:	f7fd ffd6 	bl	80001e0 <__aeabi_uldivmod>
 8002234:	4d0c      	ldr	r5, [pc, #48]	; (8002268 <UART_SetConfig+0x118>)
 8002236:	fba5 3200 	umull	r3, r2, r5, r0
 800223a:	0951      	lsrs	r1, r2, #5
 800223c:	2364      	movs	r3, #100	; 0x64
 800223e:	fb03 0311 	mls	r3, r3, r1, r0
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	3332      	adds	r3, #50	; 0x32
 8002246:	fba5 2303 	umull	r2, r3, r5, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	005a      	lsls	r2, r3, #1
 800224e:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002252:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	6821      	ldr	r1, [r4, #0]
 800225c:	4413      	add	r3, r2
 800225e:	608b      	str	r3, [r1, #8]
 8002260:	e7d0      	b.n	8002204 <UART_SetConfig+0xb4>
 8002262:	bf00      	nop
 8002264:	40011000 	.word	0x40011000
 8002268:	51eb851f 	.word	0x51eb851f

0800226c <HAL_UART_Init>:
  if (huart == NULL)
 800226c:	b358      	cbz	r0, 80022c6 <HAL_UART_Init+0x5a>
{
 800226e:	b510      	push	{r4, lr}
 8002270:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002272:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002276:	b30b      	cbz	r3, 80022bc <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002278:	2324      	movs	r3, #36	; 0x24
 800227a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800227e:	6822      	ldr	r2, [r4, #0]
 8002280:	68d3      	ldr	r3, [r2, #12]
 8002282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002286:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002288:	4620      	mov	r0, r4
 800228a:	f7ff ff61 	bl	8002150 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800228e:	6822      	ldr	r2, [r4, #0]
 8002290:	6913      	ldr	r3, [r2, #16]
 8002292:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002296:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002298:	6822      	ldr	r2, [r4, #0]
 800229a:	6953      	ldr	r3, [r2, #20]
 800229c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80022a0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80022a2:	6822      	ldr	r2, [r4, #0]
 80022a4:	68d3      	ldr	r3, [r2, #12]
 80022a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022aa:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ac:	2000      	movs	r0, #0
 80022ae:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022b0:	2320      	movs	r3, #32
 80022b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80022ba:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80022bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80022c0:	f7fe fa36 	bl	8000730 <HAL_UART_MspInit>
 80022c4:	e7d8      	b.n	8002278 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80022c6:	2001      	movs	r0, #1
}
 80022c8:	4770      	bx	lr
	...

080022cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80022cc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80022d2:	9b01      	ldr	r3, [sp, #4]
 80022d4:	3301      	adds	r3, #1
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <USB_CoreReset+0x48>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d814      	bhi.n	8002308 <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80022de:	6903      	ldr	r3, [r0, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	daf6      	bge.n	80022d2 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80022e8:	6903      	ldr	r3, [r0, #16]
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80022f0:	9b01      	ldr	r3, [sp, #4]
 80022f2:	3301      	adds	r3, #1
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	4a07      	ldr	r2, [pc, #28]	; (8002314 <USB_CoreReset+0x48>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d808      	bhi.n	800230e <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80022fc:	6903      	ldr	r3, [r0, #16]
 80022fe:	f013 0f01 	tst.w	r3, #1
 8002302:	d1f5      	bne.n	80022f0 <USB_CoreReset+0x24>

  return HAL_OK;
 8002304:	2000      	movs	r0, #0
 8002306:	e000      	b.n	800230a <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 8002308:	2003      	movs	r0, #3
}
 800230a:	b002      	add	sp, #8
 800230c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800230e:	2003      	movs	r0, #3
 8002310:	e7fb      	b.n	800230a <USB_CoreReset+0x3e>
 8002312:	bf00      	nop
 8002314:	00030d40 	.word	0x00030d40

08002318 <USB_CoreInit>:
{
 8002318:	b084      	sub	sp, #16
 800231a:	b510      	push	{r4, lr}
 800231c:	4604      	mov	r4, r0
 800231e:	a803      	add	r0, sp, #12
 8002320:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002324:	9b08      	ldr	r3, [sp, #32]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d11f      	bne.n	800236a <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800232a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800232c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002330:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002332:	68e3      	ldr	r3, [r4, #12]
 8002334:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800233c:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800233e:	68e3      	ldr	r3, [r4, #12]
 8002340:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002344:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002346:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002348:	2b01      	cmp	r3, #1
 800234a:	d009      	beq.n	8002360 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 800234c:	4620      	mov	r0, r4
 800234e:	f7ff ffbd 	bl	80022cc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002352:	9b06      	ldr	r3, [sp, #24]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d01b      	beq.n	8002390 <USB_CoreInit+0x78>
}
 8002358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800235c:	b004      	add	sp, #16
 800235e:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002360:	68e3      	ldr	r3, [r4, #12]
 8002362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002366:	60e3      	str	r3, [r4, #12]
 8002368:	e7f0      	b.n	800234c <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800236a:	68e3      	ldr	r3, [r4, #12]
 800236c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002370:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8002372:	4620      	mov	r0, r4
 8002374:	f7ff ffaa 	bl	80022cc <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800237a:	b923      	cbnz	r3, 8002386 <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800237c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800237e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002382:	63a3      	str	r3, [r4, #56]	; 0x38
 8002384:	e7e5      	b.n	8002352 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002386:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238c:	63a3      	str	r3, [r4, #56]	; 0x38
 800238e:	e7e0      	b.n	8002352 <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002390:	68a3      	ldr	r3, [r4, #8]
 8002392:	f043 0306 	orr.w	r3, r3, #6
 8002396:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002398:	68a3      	ldr	r3, [r4, #8]
 800239a:	f043 0320 	orr.w	r3, r3, #32
 800239e:	60a3      	str	r3, [r4, #8]
 80023a0:	e7da      	b.n	8002358 <USB_CoreInit+0x40>

080023a2 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80023a2:	6883      	ldr	r3, [r0, #8]
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6083      	str	r3, [r0, #8]
}
 80023aa:	2000      	movs	r0, #0
 80023ac:	4770      	bx	lr

080023ae <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80023ae:	6883      	ldr	r3, [r0, #8]
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	6083      	str	r3, [r0, #8]
}
 80023b6:	2000      	movs	r0, #0
 80023b8:	4770      	bx	lr
	...

080023bc <USB_FlushTxFifo>:
{
 80023bc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80023c2:	0189      	lsls	r1, r1, #6
 80023c4:	f041 0120 	orr.w	r1, r1, #32
 80023c8:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80023ca:	9b01      	ldr	r3, [sp, #4]
 80023cc:	3301      	adds	r3, #1
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <USB_FlushTxFifo+0x2c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d805      	bhi.n	80023e2 <USB_FlushTxFifo+0x26>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80023d6:	6903      	ldr	r3, [r0, #16]
 80023d8:	f013 0f20 	tst.w	r3, #32
 80023dc:	d1f5      	bne.n	80023ca <USB_FlushTxFifo+0xe>
  return HAL_OK;
 80023de:	2000      	movs	r0, #0
 80023e0:	e000      	b.n	80023e4 <USB_FlushTxFifo+0x28>
      return HAL_TIMEOUT;
 80023e2:	2003      	movs	r0, #3
}
 80023e4:	b002      	add	sp, #8
 80023e6:	4770      	bx	lr
 80023e8:	00030d40 	.word	0x00030d40

080023ec <USB_FlushRxFifo>:
{
 80023ec:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80023f2:	2310      	movs	r3, #16
 80023f4:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	3301      	adds	r3, #1
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	4a05      	ldr	r2, [pc, #20]	; (8002414 <USB_FlushRxFifo+0x28>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d805      	bhi.n	800240e <USB_FlushRxFifo+0x22>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002402:	6903      	ldr	r3, [r0, #16]
 8002404:	f013 0f10 	tst.w	r3, #16
 8002408:	d1f5      	bne.n	80023f6 <USB_FlushRxFifo+0xa>
  return HAL_OK;
 800240a:	2000      	movs	r0, #0
 800240c:	e000      	b.n	8002410 <USB_FlushRxFifo+0x24>
      return HAL_TIMEOUT;
 800240e:	2003      	movs	r0, #3
}
 8002410:	b002      	add	sp, #8
 8002412:	4770      	bx	lr
 8002414:	00030d40 	.word	0x00030d40

08002418 <USB_WritePacket>:
{
 8002418:	b470      	push	{r4, r5, r6}
 800241a:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 800241e:	b964      	cbnz	r4, 800243a <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002420:	3303      	adds	r3, #3
 8002422:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 8002424:	42ac      	cmp	r4, r5
 8002426:	d208      	bcs.n	800243a <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002428:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800242c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002430:	f851 6b04 	ldr.w	r6, [r1], #4
 8002434:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8002436:	3401      	adds	r4, #1
 8002438:	e7f4      	b.n	8002424 <USB_WritePacket+0xc>
}
 800243a:	2000      	movs	r0, #0
 800243c:	bc70      	pop	{r4, r5, r6}
 800243e:	4770      	bx	lr

08002440 <USB_ReadPacket>:
{
 8002440:	b4f0      	push	{r4, r5, r6, r7}
 8002442:	b082      	sub	sp, #8
 8002444:	4607      	mov	r7, r0
 8002446:	4608      	mov	r0, r1
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002448:	463e      	mov	r6, r7
  uint32_t count32b = (uint32_t)len >> 2U;
 800244a:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 800244c:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8002450:	2300      	movs	r3, #0
 8002452:	42ab      	cmp	r3, r5
 8002454:	d206      	bcs.n	8002464 <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002456:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
 800245a:	6824      	ldr	r4, [r4, #0]
 800245c:	f840 4b04 	str.w	r4, [r0], #4
  for (i = 0U; i < count32b; i++)
 8002460:	3301      	adds	r3, #1
 8002462:	e7f6      	b.n	8002452 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8002464:	b17a      	cbz	r2, 8002486 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002466:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	9301      	str	r3, [sp, #4]
    i = 0U;
 800246e:	2500      	movs	r5, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002470:	b2eb      	uxtb	r3, r5
 8002472:	00dc      	lsls	r4, r3, #3
 8002474:	9b01      	ldr	r3, [sp, #4]
 8002476:	40e3      	lsrs	r3, r4
 8002478:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 800247c:	3501      	adds	r5, #1
      remaining_bytes--;
 800247e:	3a01      	subs	r2, #1
 8002480:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8002482:	2a00      	cmp	r2, #0
 8002484:	d1f4      	bne.n	8002470 <USB_ReadPacket+0x30>
}
 8002486:	b002      	add	sp, #8
 8002488:	bcf0      	pop	{r4, r5, r6, r7}
 800248a:	4770      	bx	lr

0800248c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800248c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800248e:	6980      	ldr	r0, [r0, #24]
}
 8002490:	4010      	ands	r0, r2
 8002492:	4770      	bx	lr

08002494 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002494:	6940      	ldr	r0, [r0, #20]
}
 8002496:	f000 0001 	and.w	r0, r0, #1
 800249a:	4770      	bx	lr

0800249c <USB_SetCurrentMode>:
{
 800249c:	b538      	push	{r3, r4, r5, lr}
 800249e:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80024a0:	68c3      	ldr	r3, [r0, #12]
 80024a2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80024a6:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80024a8:	2901      	cmp	r1, #1
 80024aa:	d013      	beq.n	80024d4 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 80024ac:	bb19      	cbnz	r1, 80024f6 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80024ae:	68c3      	ldr	r3, [r0, #12]
 80024b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024b4:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80024b6:	2400      	movs	r4, #0
      HAL_Delay(1U);
 80024b8:	2001      	movs	r0, #1
 80024ba:	f7fe fa49 	bl	8000950 <HAL_Delay>
      ms++;
 80024be:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80024c0:	4628      	mov	r0, r5
 80024c2:	f7ff ffe7 	bl	8002494 <USB_GetMode>
 80024c6:	b108      	cbz	r0, 80024cc <USB_SetCurrentMode+0x30>
 80024c8:	2c31      	cmp	r4, #49	; 0x31
 80024ca:	d9f5      	bls.n	80024b8 <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 80024cc:	2c32      	cmp	r4, #50	; 0x32
 80024ce:	d014      	beq.n	80024fa <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 80024d0:	2000      	movs	r0, #0
}
 80024d2:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80024d4:	68c3      	ldr	r3, [r0, #12]
 80024d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024da:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80024dc:	2400      	movs	r4, #0
      HAL_Delay(1U);
 80024de:	2001      	movs	r0, #1
 80024e0:	f7fe fa36 	bl	8000950 <HAL_Delay>
      ms++;
 80024e4:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80024e6:	4628      	mov	r0, r5
 80024e8:	f7ff ffd4 	bl	8002494 <USB_GetMode>
 80024ec:	2801      	cmp	r0, #1
 80024ee:	d0ed      	beq.n	80024cc <USB_SetCurrentMode+0x30>
 80024f0:	2c31      	cmp	r4, #49	; 0x31
 80024f2:	d9f4      	bls.n	80024de <USB_SetCurrentMode+0x42>
 80024f4:	e7ea      	b.n	80024cc <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 80024f6:	2001      	movs	r0, #1
 80024f8:	e7eb      	b.n	80024d2 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 80024fa:	2001      	movs	r0, #1
 80024fc:	e7e9      	b.n	80024d2 <USB_SetCurrentMode+0x36>
	...

08002500 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002500:	b084      	sub	sp, #16
 8002502:	b538      	push	{r3, r4, r5, lr}
 8002504:	4604      	mov	r4, r0
 8002506:	a805      	add	r0, sp, #20
 8002508:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800250c:	4625      	mov	r5, r4
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002514:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002516:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800251a:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800251c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800251e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002522:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002524:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252a:	63a3      	str	r3, [r4, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800252c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800252e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002532:	d010      	beq.n	8002556 <USB_HostInit+0x56>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8002534:	9b07      	ldr	r3, [sp, #28]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d006      	beq.n	8002548 <USB_HostInit+0x48>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800253a:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800253e:	f023 0304 	bic.w	r3, r3, #4
 8002542:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8002546:	e00c      	b.n	8002562 <USB_HostInit+0x62>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002548:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8002554:	e005      	b.n	8002562 <USB_HostInit+0x62>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002556:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800255a:	f023 0304 	bic.w	r3, r3, #4
 800255e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8002562:	2110      	movs	r1, #16
 8002564:	4620      	mov	r0, r4
 8002566:	f7ff ff29 	bl	80023bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800256a:	4620      	mov	r0, r4
 800256c:	f7ff ff3e 	bl	80023ec <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8002570:	2200      	movs	r2, #0
 8002572:	9b06      	ldr	r3, [sp, #24]
 8002574:	4293      	cmp	r3, r2
 8002576:	d90a      	bls.n	800258e <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002578:	eb05 1342 	add.w	r3, r5, r2, lsl #5
 800257c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002580:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 8002584:	2100      	movs	r1, #0
 8002586:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 800258a:	3201      	adds	r2, #1
 800258c:	e7f1      	b.n	8002572 <USB_HostInit+0x72>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002596:	6163      	str	r3, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8002598:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800259a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800259e:	d017      	beq.n	80025d0 <USB_HostInit+0xd0>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80025a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025a4:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80025a6:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80025aa:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80025ac:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <USB_HostInit+0xe4>)
 80025ae:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80025b2:	9b08      	ldr	r3, [sp, #32]
 80025b4:	b91b      	cbnz	r3, 80025be <USB_HostInit+0xbe>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80025b6:	69a3      	ldr	r3, [r4, #24]
 80025b8:	f043 0310 	orr.w	r3, r3, #16
 80025bc:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80025be:	69a2      	ldr	r2, [r4, #24]
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <USB_HostInit+0xe8>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 80025c6:	2000      	movs	r0, #0
 80025c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025cc:	b004      	add	sp, #16
 80025ce:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80025d4:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 80025d8:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80025da:	4b04      	ldr	r3, [pc, #16]	; (80025ec <USB_HostInit+0xec>)
 80025dc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80025e0:	e7e7      	b.n	80025b2 <USB_HostInit+0xb2>
 80025e2:	bf00      	nop
 80025e4:	00e00300 	.word	0x00e00300
 80025e8:	a3200008 	.word	0xa3200008
 80025ec:	004000e0 	.word	0x004000e0

080025f0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80025f0:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80025f2:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 80025f6:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80025fa:	f023 0303 	bic.w	r3, r3, #3
 80025fe:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002602:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8002606:	f001 0203 	and.w	r2, r1, #3
 800260a:	4313      	orrs	r3, r2
 800260c:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 8002610:	2901      	cmp	r1, #1
 8002612:	d005      	beq.n	8002620 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 8002614:	2902      	cmp	r1, #2
 8002616:	d007      	beq.n	8002628 <USB_InitFSLSPClkSel+0x38>
  {
    /* ... */
  }

  return HAL_OK;
}
 8002618:	2000      	movs	r0, #0
 800261a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800261e:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8002620:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002624:	6063      	str	r3, [r4, #4]
 8002626:	e7f7      	b.n	8002618 <USB_InitFSLSPClkSel+0x28>
    USBx_HOST->HFIR = 6000U;
 8002628:	f241 7370 	movw	r3, #6000	; 0x1770
 800262c:	6063      	str	r3, [r4, #4]
 800262e:	e7f3      	b.n	8002618 <USB_InitFSLSPClkSel+0x28>

08002630 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8002630:	b530      	push	{r4, r5, lr}
 8002632:	b083      	sub	sp, #12
 8002634:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8002636:	2500      	movs	r5, #0
 8002638:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 800263a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800263e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002640:	9b01      	ldr	r3, [sp, #4]
 8002642:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002646:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8002648:	9b01      	ldr	r3, [sp, #4]
 800264a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8002652:	2064      	movs	r0, #100	; 0x64
 8002654:	f7fe f97c 	bl	8000950 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8002658:	9b01      	ldr	r3, [sp, #4]
 800265a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800265e:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8002662:	200a      	movs	r0, #10
 8002664:	f7fe f974 	bl	8000950 <HAL_Delay>

  return HAL_OK;
}
 8002668:	4628      	mov	r0, r5
 800266a:	b003      	add	sp, #12
 800266c:	bd30      	pop	{r4, r5, pc}

0800266e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800266e:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002674:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002678:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800267a:	9b01      	ldr	r3, [sp, #4]
 800267c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002680:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8002682:	9b01      	ldr	r3, [sp, #4]
 8002684:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002688:	d101      	bne.n	800268e <USB_DriveVbus+0x20>
 800268a:	2901      	cmp	r1, #1
 800268c:	d00c      	beq.n	80026a8 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800268e:	9b01      	ldr	r3, [sp, #4]
 8002690:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002694:	d005      	beq.n	80026a2 <USB_DriveVbus+0x34>
 8002696:	b921      	cbnz	r1, 80026a2 <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8002698:	9b01      	ldr	r3, [sp, #4]
 800269a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800269e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 80026a2:	2000      	movs	r0, #0
 80026a4:	b002      	add	sp, #8
 80026a6:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80026a8:	9b01      	ldr	r3, [sp, #4]
 80026aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026ae:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 80026b2:	e7ec      	b.n	800268e <USB_DriveVbus+0x20>

080026b4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80026b4:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80026ba:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80026be:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80026c0:	9801      	ldr	r0, [sp, #4]
}
 80026c2:	f3c0 4041 	ubfx	r0, r0, #17, #2
 80026c6:	b002      	add	sp, #8
 80026c8:	4770      	bx	lr

080026ca <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80026ca:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80026ce:	6880      	ldr	r0, [r0, #8]
}
 80026d0:	b280      	uxth	r0, r0
 80026d2:	4770      	bx	lr

080026d4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80026d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026d8:	4691      	mov	r9, r2
 80026da:	461c      	mov	r4, r3
 80026dc:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80026e0:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 80026e4:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 80026e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026ec:	609a      	str	r2, [r3, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80026ee:	2d03      	cmp	r5, #3
 80026f0:	d86a      	bhi.n	80027c8 <USB_HC_Init+0xf4>
 80026f2:	e8df f005 	tbb	[pc, r5]
 80026f6:	5b02      	.short	0x5b02
 80026f8:	1802      	.short	0x1802
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80026fa:	f240 429d 	movw	r2, #1181	; 0x49d
 80026fe:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8002700:	f019 0f80 	tst.w	r9, #128	; 0x80
 8002704:	d109      	bne.n	800271a <USB_HC_Init+0x46>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8002706:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002708:	f412 7f80 	tst.w	r2, #256	; 0x100
 800270c:	d05e      	beq.n	80027cc <USB_HC_Init+0xf8>
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002714:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8002716:	2700      	movs	r7, #0
 8002718:	e00c      	b.n	8002734 <USB_HC_Init+0x60>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002720:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8002722:	2700      	movs	r7, #0
 8002724:	e006      	b.n	8002734 <USB_HC_Init+0x60>
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002726:	f240 629d 	movw	r2, #1693	; 0x69d
 800272a:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800272c:	f019 0f80 	tst.w	r9, #128	; 0x80
 8002730:	d136      	bne.n	80027a0 <USB_HC_Init+0xcc>
  HAL_StatusTypeDef ret = HAL_OK;
 8002732:	2700      	movs	r7, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002734:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
 8002738:	f001 010f 	and.w	r1, r1, #15
 800273c:	2201      	movs	r2, #1
 800273e:	fa02 f101 	lsl.w	r1, r2, r1
 8002742:	4319      	orrs	r1, r3
 8002744:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002748:	6983      	ldr	r3, [r0, #24]
 800274a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800274e:	6183      	str	r3, [r0, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8002750:	f019 0f80 	tst.w	r9, #128	; 0x80
 8002754:	d13c      	bne.n	80027d0 <USB_HC_Init+0xfc>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8002756:	f04f 0800 	mov.w	r8, #0
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800275a:	f7ff ffab 	bl	80026b4 <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800275e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d037      	beq.n	80027d6 <USB_HC_Init+0x102>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 8002766:	2100      	movs	r1, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002768:	05a3      	lsls	r3, r4, #22
 800276a:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800276e:	ea4f 29c9 	mov.w	r9, r9, lsl #11
 8002772:	f409 49f0 	and.w	r9, r9, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002776:	ea43 0309 	orr.w	r3, r3, r9
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800277a:	04ac      	lsls	r4, r5, #18
 800277c:	f404 2440 	and.w	r4, r4, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8002780:	4323      	orrs	r3, r4
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002782:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8002786:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800278a:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800278c:	ea43 0308 	orr.w	r3, r3, r8
 8002790:	430b      	orrs	r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002792:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500

  if (ep_type == EP_TYPE_INTR)
 8002796:	2d03      	cmp	r5, #3
 8002798:	d024      	beq.n	80027e4 <USB_HC_Init+0x110>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
  }

  return ret;
}
 800279a:	4638      	mov	r0, r7
 800279c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a6:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80027a8:	2700      	movs	r7, #0
 80027aa:	e7c3      	b.n	8002734 <USB_HC_Init+0x60>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80027ac:	f240 2225 	movw	r2, #549	; 0x225
 80027b0:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 80027b2:	f019 0f80 	tst.w	r9, #128	; 0x80
 80027b6:	d101      	bne.n	80027bc <USB_HC_Init+0xe8>
  HAL_StatusTypeDef ret = HAL_OK;
 80027b8:	2700      	movs	r7, #0
 80027ba:	e7bb      	b.n	8002734 <USB_HC_Init+0x60>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80027c2:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80027c4:	2700      	movs	r7, #0
 80027c6:	e7b5      	b.n	8002734 <USB_HC_Init+0x60>
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80027c8:	2701      	movs	r7, #1
 80027ca:	e7b3      	b.n	8002734 <USB_HC_Init+0x60>
  HAL_StatusTypeDef ret = HAL_OK;
 80027cc:	2700      	movs	r7, #0
 80027ce:	e7b1      	b.n	8002734 <USB_HC_Init+0x60>
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80027d0:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 80027d4:	e7c1      	b.n	800275a <USB_HC_Init+0x86>
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80027d6:	2802      	cmp	r0, #2
 80027d8:	d002      	beq.n	80027e0 <USB_HC_Init+0x10c>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80027da:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80027de:	e7c3      	b.n	8002768 <USB_HC_Init+0x94>
    HCcharLowSpeed = 0U;
 80027e0:	2100      	movs	r1, #0
 80027e2:	e7c1      	b.n	8002768 <USB_HC_Init+0x94>
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80027e4:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 80027e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027ec:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
 80027f0:	e7d3      	b.n	800279a <USB_HC_Init+0xc6>

080027f2 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80027f2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80027f6:	6940      	ldr	r0, [r0, #20]
}
 80027f8:	b280      	uxth	r0, r0
 80027fa:	4770      	bx	lr

080027fc <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80027fc:	b430      	push	{r4, r5}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80027fe:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002802:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8002806:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800280a:	f3c3 4381 	ubfx	r3, r3, #18, #2
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800280e:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8002812:	6885      	ldr	r5, [r0, #8]
 8002814:	f015 0f20 	tst.w	r5, #32
 8002818:	d002      	beq.n	8002820 <USB_HC_Halt+0x24>
 800281a:	0fe4      	lsrs	r4, r4, #31
 800281c:	2c00      	cmp	r4, #0
 800281e:	d055      	beq.n	80028cc <USB_HC_Halt+0xd0>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002820:	b333      	cbz	r3, 8002870 <USB_HC_Halt+0x74>
 8002822:	2b02      	cmp	r3, #2
 8002824:	d024      	beq.n	8002870 <USB_HC_Halt+0x74>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002826:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800282a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800282e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002832:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8002836:	f413 037f 	ands.w	r3, r3, #16711680	; 0xff0000
 800283a:	d14a      	bne.n	80028d2 <USB_HC_Halt+0xd6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800283c:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8002840:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002844:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002848:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800284c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002850:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002854:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8002858:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800285c:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      do
      {
        if (++count > 1000U)
 8002860:	3301      	adds	r3, #1
 8002862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002866:	d831      	bhi.n	80028cc <USB_HC_Halt+0xd0>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002868:	6811      	ldr	r1, [r2, #0]
 800286a:	2900      	cmp	r1, #0
 800286c:	dbf8      	blt.n	8002860 <USB_HC_Halt+0x64>
 800286e:	e02d      	b.n	80028cc <USB_HC_Halt+0xd0>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002870:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002874:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002878:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800287c:	6883      	ldr	r3, [r0, #8]
 800287e:	f013 0f20 	tst.w	r3, #32
 8002882:	d123      	bne.n	80028cc <USB_HC_Halt+0xd0>
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002884:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002886:	f413 037f 	ands.w	r3, r3, #16711680	; 0xff0000
 800288a:	d119      	bne.n	80028c0 <USB_HC_Halt+0xc4>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800288c:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8002890:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002894:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002898:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800289c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80028a0:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80028a4:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 80028a8:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 80028ac:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
          if (++count > 1000U)
 80028b0:	3301      	adds	r3, #1
 80028b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028b6:	d809      	bhi.n	80028cc <USB_HC_Halt+0xd0>
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80028b8:	6811      	ldr	r1, [r2, #0]
 80028ba:	2900      	cmp	r1, #0
 80028bc:	dbf8      	blt.n	80028b0 <USB_HC_Halt+0xb4>
 80028be:	e005      	b.n	80028cc <USB_HC_Halt+0xd0>
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80028c0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80028c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028c8:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 80028cc:	2000      	movs	r0, #0
 80028ce:	bc30      	pop	{r4, r5}
 80028d0:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80028d2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80028d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028da:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80028de:	e7f5      	b.n	80028cc <USB_HC_Halt+0xd0>

080028e0 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80028e0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80028e4:	4a06      	ldr	r2, [pc, #24]	; (8002900 <USB_DoPing+0x20>)
 80028e6:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80028ea:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80028f6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 80028fa:	2000      	movs	r0, #0
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	80080000 	.word	0x80080000

08002904 <USB_HC_StartXfer>:
{
 8002904:	b570      	push	{r4, r5, r6, lr}
 8002906:	b084      	sub	sp, #16
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8002908:	784b      	ldrb	r3, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800290a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800290c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8002910:	d007      	beq.n	8002922 <USB_HC_StartXfer+0x1e>
 8002912:	790c      	ldrb	r4, [r1, #4]
 8002914:	b92c      	cbnz	r4, 8002922 <USB_HC_StartXfer+0x1e>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8002916:	2a01      	cmp	r2, #1
 8002918:	d011      	beq.n	800293e <USB_HC_StartXfer+0x3a>
    if ((dma == 0U) && (hc->do_ping == 1U))
 800291a:	b912      	cbnz	r2, 8002922 <USB_HC_StartXfer+0x1e>
 800291c:	794c      	ldrb	r4, [r1, #5]
 800291e:	2c01      	cmp	r4, #1
 8002920:	d01a      	beq.n	8002958 <USB_HC_StartXfer+0x54>
  if (hc->xfer_len > 0U)
 8002922:	694e      	ldr	r6, [r1, #20]
 8002924:	b1e6      	cbz	r6, 8002960 <USB_HC_StartXfer+0x5c>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8002926:	890c      	ldrh	r4, [r1, #8]
 8002928:	1935      	adds	r5, r6, r4
 800292a:	3d01      	subs	r5, #1
 800292c:	fbb5 f5f4 	udiv	r5, r5, r4
 8002930:	b2ad      	uxth	r5, r5
    if (num_packets > max_hc_pkt_count)
 8002932:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002936:	d914      	bls.n	8002962 <USB_HC_StartXfer+0x5e>
      num_packets = max_hc_pkt_count;
 8002938:	f44f 7580 	mov.w	r5, #256	; 0x100
 800293c:	e011      	b.n	8002962 <USB_HC_StartXfer+0x5e>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800293e:	79cc      	ldrb	r4, [r1, #7]
 8002940:	b10c      	cbz	r4, 8002946 <USB_HC_StartXfer+0x42>
 8002942:	2c02      	cmp	r4, #2
 8002944:	d1e9      	bne.n	800291a <USB_HC_StartXfer+0x16>
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8002946:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800294a:	f8d4 550c 	ldr.w	r5, [r4, #1292]	; 0x50c
 800294e:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8002952:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
 8002956:	e7e0      	b.n	800291a <USB_HC_StartXfer+0x16>
      (void)USB_DoPing(USBx, hc->ch_num);
 8002958:	7849      	ldrb	r1, [r1, #1]
 800295a:	f7ff ffc1 	bl	80028e0 <USB_DoPing>
      return HAL_OK;
 800295e:	e06a      	b.n	8002a36 <USB_HC_StartXfer+0x132>
    num_packets = 1U;
 8002960:	2501      	movs	r5, #1
  if (hc->ep_is_in != 0U)
 8002962:	78cc      	ldrb	r4, [r1, #3]
 8002964:	2c00      	cmp	r4, #0
 8002966:	d04d      	beq.n	8002a04 <USB_HC_StartXfer+0x100>
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8002968:	890c      	ldrh	r4, [r1, #8]
 800296a:	fb04 f405 	mul.w	r4, r4, r5
 800296e:	610c      	str	r4, [r1, #16]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8002970:	690c      	ldr	r4, [r1, #16]
 8002972:	f3c4 0412 	ubfx	r4, r4, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002976:	4e37      	ldr	r6, [pc, #220]	; (8002a54 <USB_HC_StartXfer+0x150>)
 8002978:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800297c:	432c      	orrs	r4, r5
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800297e:	7a8d      	ldrb	r5, [r1, #10]
 8002980:	076d      	lsls	r5, r5, #29
 8002982:	f005 45c0 	and.w	r5, r5, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8002986:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800298a:	f503 66a0 	add.w	r6, r3, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800298e:	432c      	orrs	r4, r5
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8002990:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
  if (dma != 0U)
 8002994:	b112      	cbz	r2, 800299c <USB_HC_StartXfer+0x98>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8002996:	68cc      	ldr	r4, [r1, #12]
 8002998:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800299c:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 80029a0:	68ac      	ldr	r4, [r5, #8]
 80029a2:	f014 0f01 	tst.w	r4, #1
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80029a6:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 80029aa:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 80029ae:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80029b2:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 80029b6:	bf0c      	ite	eq
 80029b8:	f04f 5600 	moveq.w	r6, #536870912	; 0x20000000
 80029bc:	2600      	movne	r6, #0
 80029be:	4334      	orrs	r4, r6
 80029c0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029c4:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 80029c8:	9403      	str	r4, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029ca:	9c03      	ldr	r4, [sp, #12]
 80029cc:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 80029d0:	9403      	str	r4, [sp, #12]
  if (hc->ep_is_in != 0U)
 80029d2:	78cc      	ldrb	r4, [r1, #3]
 80029d4:	b1c4      	cbz	r4, 8002a08 <USB_HC_StartXfer+0x104>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80029d6:	9c03      	ldr	r4, [sp, #12]
 80029d8:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80029dc:	9403      	str	r4, [sp, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029de:	9c03      	ldr	r4, [sp, #12]
 80029e0:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80029e4:	9403      	str	r4, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029e6:	9c03      	ldr	r4, [sp, #12]
 80029e8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  if (dma != 0U) /* dma mode */
 80029ec:	bb1a      	cbnz	r2, 8002a36 <USB_HC_StartXfer+0x132>
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80029ee:	78cb      	ldrb	r3, [r1, #3]
 80029f0:	bb0b      	cbnz	r3, 8002a36 <USB_HC_StartXfer+0x132>
 80029f2:	694b      	ldr	r3, [r1, #20]
 80029f4:	b1fb      	cbz	r3, 8002a36 <USB_HC_StartXfer+0x132>
    switch (hc->ep_type)
 80029f6:	79ca      	ldrb	r2, [r1, #7]
 80029f8:	2a03      	cmp	r2, #3
 80029fa:	d815      	bhi.n	8002a28 <USB_HC_StartXfer+0x124>
 80029fc:	e8df f002 	tbb	[pc, r2]
 8002a00:	1e091e09 	.word	0x1e091e09
    hc->XferSize = hc->xfer_len;
 8002a04:	610e      	str	r6, [r1, #16]
 8002a06:	e7b3      	b.n	8002970 <USB_HC_StartXfer+0x6c>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002a08:	9c03      	ldr	r4, [sp, #12]
 8002a0a:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 8002a0e:	9403      	str	r4, [sp, #12]
 8002a10:	e7e5      	b.n	80029de <USB_HC_StartXfer+0xda>
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002a12:	3303      	adds	r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002a14:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002a16:	b292      	uxth	r2, r2
 8002a18:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d203      	bcs.n	8002a28 <USB_HC_StartXfer+0x124>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8002a20:	6983      	ldr	r3, [r0, #24]
 8002a22:	f043 0320 	orr.w	r3, r3, #32
 8002a26:	6183      	str	r3, [r0, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8002a28:	2300      	movs	r3, #0
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	8a8b      	ldrh	r3, [r1, #20]
 8002a2e:	784a      	ldrb	r2, [r1, #1]
 8002a30:	68c9      	ldr	r1, [r1, #12]
 8002a32:	f7ff fcf1 	bl	8002418 <USB_WritePacket>
}
 8002a36:	2000      	movs	r0, #0
 8002a38:	b004      	add	sp, #16
 8002a3a:	bd70      	pop	{r4, r5, r6, pc}
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002a3c:	3303      	adds	r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002a3e:	692a      	ldr	r2, [r5, #16]
 8002a40:	b292      	uxth	r2, r2
 8002a42:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d2ee      	bcs.n	8002a28 <USB_HC_StartXfer+0x124>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002a4a:	6983      	ldr	r3, [r0, #24]
 8002a4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a50:	6183      	str	r3, [r0, #24]
 8002a52:	e7e9      	b.n	8002a28 <USB_HC_StartXfer+0x124>
 8002a54:	1ff80000 	.word	0x1ff80000

08002a58 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002a58:	b570      	push	{r4, r5, r6, lr}
 8002a5a:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a5c:	4604      	mov	r4, r0
  uint32_t count = 0U;
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002a5e:	f7ff fca6 	bl	80023ae <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a62:	2110      	movs	r1, #16
 8002a64:	4628      	mov	r0, r5
 8002a66:	f7ff fca9 	bl	80023bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	f7ff fcbe 	bl	80023ec <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002a70:	2200      	movs	r2, #0
 8002a72:	e00a      	b.n	8002a8a <USB_StopHost+0x32>
  {
    value = USBx_HC(i)->HCCHAR;
 8002a74:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 8002a78:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002a7c:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
 8002a80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8002a84:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  for (i = 0U; i <= 15U; i++)
 8002a88:	3201      	adds	r2, #1
 8002a8a:	2a0f      	cmp	r2, #15
 8002a8c:	d9f2      	bls.n	8002a74 <USB_StopHost+0x1c>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002a8e:	2000      	movs	r0, #0
  uint32_t count = 0U;
 8002a90:	4603      	mov	r3, r0
 8002a92:	e000      	b.n	8002a96 <USB_StopHost+0x3e>
  for (i = 0U; i <= 15U; i++)
 8002a94:	3001      	adds	r0, #1
 8002a96:	280f      	cmp	r0, #15
 8002a98:	d813      	bhi.n	8002ac2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8002a9a:	eb04 1640 	add.w	r6, r4, r0, lsl #5
 8002a9e:	f506 61a0 	add.w	r1, r6, #1280	; 0x500
 8002aa2:	f8d6 2500 	ldr.w	r2, [r6, #1280]	; 0x500
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002aa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aaa:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8002aae:	f8c6 2500 	str.w	r2, [r6, #1280]	; 0x500

    do
    {
      if (++count > 1000U)
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ab8:	d8ec      	bhi.n	8002a94 <USB_StopHost+0x3c>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002aba:	680a      	ldr	r2, [r1, #0]
 8002abc:	2a00      	cmp	r2, #0
 8002abe:	dbf8      	blt.n	8002ab2 <USB_StopHost+0x5a>
 8002ac0:	e7e8      	b.n	8002a94 <USB_StopHost+0x3c>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ac6:	f8c5 3414 	str.w	r3, [r5, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002aca:	616b      	str	r3, [r5, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002acc:	4628      	mov	r0, r5
 8002ace:	f7ff fc68 	bl	80023a2 <USB_EnableGlobalInt>

  return HAL_OK;
}
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	bd70      	pop	{r4, r5, r6, pc}

08002ad6 <MTP_FindCtlEndpoint>:
  * @brief  Find MTP Ctl interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindCtlEndpoint(USBH_HandleTypeDef *phost)
{
 8002ad6:	b470      	push	{r4, r5, r6}
 8002ad8:	4604      	mov	r4, r0
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8002ada:	2300      	movs	r3, #0
 8002adc:	e027      	b.n	8002b2e <MTP_FindCtlEndpoint+0x58>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8002ade:	3001      	adds	r0, #1
 8002ae0:	b2c0      	uxtb	r0, r0
 8002ae2:	2801      	cmp	r0, #1
 8002ae4:	d821      	bhi.n	8002b2a <MTP_FindCtlEndpoint+0x54>
      {
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8002ae6:	4606      	mov	r6, r0
 8002ae8:	1c42      	adds	r2, r0, #1
 8002aea:	211a      	movs	r1, #26
 8002aec:	fb01 f105 	mul.w	r1, r1, r5
 8002af0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002af4:	4422      	add	r2, r4
 8002af6:	f992 2346 	ldrsb.w	r2, [r2, #838]	; 0x346
 8002afa:	2a00      	cmp	r2, #0
 8002afc:	daef      	bge.n	8002ade <MTP_FindCtlEndpoint+0x8>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002afe:	1c42      	adds	r2, r0, #1
 8002b00:	211a      	movs	r1, #26
 8002b02:	fb01 f105 	mul.w	r1, r1, r5
 8002b06:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002b0a:	4422      	add	r2, r4
 8002b0c:	f8b2 2348 	ldrh.w	r2, [r2, #840]	; 0x348
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8002b10:	2a00      	cmp	r2, #0
 8002b12:	d0e4      	beq.n	8002ade <MTP_FindCtlEndpoint+0x8>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_INTERRUPT) == USBH_EP_INTERRUPT))
 8002b14:	3601      	adds	r6, #1
 8002b16:	eb01 02c6 	add.w	r2, r1, r6, lsl #3
 8002b1a:	4422      	add	r2, r4
 8002b1c:	f892 2347 	ldrb.w	r2, [r2, #839]	; 0x347
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002b20:	f002 0203 	and.w	r2, r2, #3
 8002b24:	2a03      	cmp	r2, #3
 8002b26:	d1da      	bne.n	8002ade <MTP_FindCtlEndpoint+0x8>
 8002b28:	e00e      	b.n	8002b48 <MTP_FindCtlEndpoint+0x72>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d809      	bhi.n	8002b46 <MTP_FindCtlEndpoint+0x70>
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8002b32:	461d      	mov	r5, r3
 8002b34:	221a      	movs	r2, #26
 8002b36:	fb02 4203 	mla	r2, r2, r3, r4
 8002b3a:	f892 2347 	ldrb.w	r2, [r2, #839]	; 0x347
 8002b3e:	2a06      	cmp	r2, #6
 8002b40:	d1f3      	bne.n	8002b2a <MTP_FindCtlEndpoint+0x54>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8002b42:	2000      	movs	r0, #0
 8002b44:	e7cd      	b.n	8002ae2 <MTP_FindCtlEndpoint+0xc>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8002b46:	20ff      	movs	r0, #255	; 0xff
}
 8002b48:	bc70      	pop	{r4, r5, r6}
 8002b4a:	4770      	bx	lr

08002b4c <MTP_FindDataOutEndpoint>:
  * @brief  Find MTP DATA OUT interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataOutEndpoint(USBH_HandleTypeDef *phost)
{
 8002b4c:	b470      	push	{r4, r5, r6}
 8002b4e:	4604      	mov	r4, r0
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8002b50:	2300      	movs	r3, #0
 8002b52:	e026      	b.n	8002ba2 <MTP_FindDataOutEndpoint+0x56>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8002b54:	3001      	adds	r0, #1
 8002b56:	b2c0      	uxtb	r0, r0
 8002b58:	2801      	cmp	r0, #1
 8002b5a:	d820      	bhi.n	8002b9e <MTP_FindDataOutEndpoint+0x52>
      {

        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 8002b5c:	4606      	mov	r6, r0
 8002b5e:	1c42      	adds	r2, r0, #1
 8002b60:	211a      	movs	r1, #26
 8002b62:	fb01 f105 	mul.w	r1, r1, r5
 8002b66:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002b6a:	4422      	add	r2, r4
 8002b6c:	f992 2346 	ldrsb.w	r2, [r2, #838]	; 0x346
 8002b70:	2a00      	cmp	r2, #0
 8002b72:	dbef      	blt.n	8002b54 <MTP_FindDataOutEndpoint+0x8>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002b74:	1c42      	adds	r2, r0, #1
 8002b76:	211a      	movs	r1, #26
 8002b78:	fb01 f105 	mul.w	r1, r1, r5
 8002b7c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002b80:	4422      	add	r2, r4
 8002b82:	f8b2 2348 	ldrh.w	r2, [r2, #840]	; 0x348
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 8002b86:	2a00      	cmp	r2, #0
 8002b88:	d0e4      	beq.n	8002b54 <MTP_FindDataOutEndpoint+0x8>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 8002b8a:	3601      	adds	r6, #1
 8002b8c:	eb01 02c6 	add.w	r2, r1, r6, lsl #3
 8002b90:	4422      	add	r2, r4
 8002b92:	f892 2347 	ldrb.w	r2, [r2, #839]	; 0x347
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002b96:	f012 0f02 	tst.w	r2, #2
 8002b9a:	d0db      	beq.n	8002b54 <MTP_FindDataOutEndpoint+0x8>
 8002b9c:	e00e      	b.n	8002bbc <MTP_FindDataOutEndpoint+0x70>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d809      	bhi.n	8002bba <MTP_FindDataOutEndpoint+0x6e>
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8002ba6:	461d      	mov	r5, r3
 8002ba8:	221a      	movs	r2, #26
 8002baa:	fb02 4203 	mla	r2, r2, r3, r4
 8002bae:	f892 2347 	ldrb.w	r2, [r2, #839]	; 0x347
 8002bb2:	2a06      	cmp	r2, #6
 8002bb4:	d1f3      	bne.n	8002b9e <MTP_FindDataOutEndpoint+0x52>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	e7ce      	b.n	8002b58 <MTP_FindDataOutEndpoint+0xc>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8002bba:	20ff      	movs	r0, #255	; 0xff
}
 8002bbc:	bc70      	pop	{r4, r5, r6}
 8002bbe:	4770      	bx	lr

08002bc0 <MTP_FindDataInEndpoint>:
  * @brief  Find MTP DATA IN interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataInEndpoint(USBH_HandleTypeDef *phost)
{
 8002bc0:	b470      	push	{r4, r5, r6}
 8002bc2:	4604      	mov	r4, r0
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	e026      	b.n	8002c16 <MTP_FindDataInEndpoint+0x56>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8002bc8:	3001      	adds	r0, #1
 8002bca:	b2c0      	uxtb	r0, r0
 8002bcc:	2801      	cmp	r0, #1
 8002bce:	d820      	bhi.n	8002c12 <MTP_FindDataInEndpoint+0x52>
      {

        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8002bd0:	4606      	mov	r6, r0
 8002bd2:	1c42      	adds	r2, r0, #1
 8002bd4:	211a      	movs	r1, #26
 8002bd6:	fb01 f105 	mul.w	r1, r1, r5
 8002bda:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002bde:	4422      	add	r2, r4
 8002be0:	f992 2346 	ldrsb.w	r2, [r2, #838]	; 0x346
 8002be4:	2a00      	cmp	r2, #0
 8002be6:	daef      	bge.n	8002bc8 <MTP_FindDataInEndpoint+0x8>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002be8:	1c42      	adds	r2, r0, #1
 8002bea:	211a      	movs	r1, #26
 8002bec:	fb01 f105 	mul.w	r1, r1, r5
 8002bf0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002bf4:	4422      	add	r2, r4
 8002bf6:	f8b2 2348 	ldrh.w	r2, [r2, #840]	; 0x348
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8002bfa:	2a00      	cmp	r2, #0
 8002bfc:	d0e4      	beq.n	8002bc8 <MTP_FindDataInEndpoint+0x8>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 8002bfe:	3601      	adds	r6, #1
 8002c00:	eb01 02c6 	add.w	r2, r1, r6, lsl #3
 8002c04:	4422      	add	r2, r4
 8002c06:	f892 2347 	ldrb.w	r2, [r2, #839]	; 0x347
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002c0a:	f012 0f02 	tst.w	r2, #2
 8002c0e:	d0db      	beq.n	8002bc8 <MTP_FindDataInEndpoint+0x8>
 8002c10:	e00e      	b.n	8002c30 <MTP_FindDataInEndpoint+0x70>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 8002c12:	3301      	adds	r3, #1
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d809      	bhi.n	8002c2e <MTP_FindDataInEndpoint+0x6e>
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8002c1a:	461d      	mov	r5, r3
 8002c1c:	221a      	movs	r2, #26
 8002c1e:	fb02 4203 	mla	r2, r2, r3, r4
 8002c22:	f892 2347 	ldrb.w	r2, [r2, #839]	; 0x347
 8002c26:	2a06      	cmp	r2, #6
 8002c28:	d1f3      	bne.n	8002c12 <MTP_FindDataInEndpoint+0x52>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	e7ce      	b.n	8002bcc <MTP_FindDataInEndpoint+0xc>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8002c2e:	20ff      	movs	r0, #255	; 0xff
}
 8002c30:	bc70      	pop	{r4, r5, r6}
 8002c32:	4770      	bx	lr

08002c34 <USBH_MTP_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8002c34:	2000      	movs	r0, #0
 8002c36:	4770      	bx	lr

08002c38 <USBH_MTP_ClassRequest>:
{
 8002c38:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8002c3a:	2105      	movs	r1, #5
 8002c3c:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8002c40:	2200      	movs	r2, #0
 8002c42:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 8002c46:	f001 ffc5 	bl	8004bd4 <osMessagePut>
}
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	bd08      	pop	{r3, pc}

08002c4e <USBH_MTP_InterfaceDeInit>:
{
 8002c4e:	b570      	push	{r4, r5, r6, lr}
 8002c50:	4604      	mov	r4, r0
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8002c52:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8002c56:	69dd      	ldr	r5, [r3, #28]
  if (MTP_Handle->DataOutPipe != 0U)
 8002c58:	f641 532d 	movw	r3, #7469	; 0x1d2d
 8002c5c:	5ce9      	ldrb	r1, [r5, r3]
 8002c5e:	b999      	cbnz	r1, 8002c88 <USBH_MTP_InterfaceDeInit+0x3a>
  if (MTP_Handle->DataInPipe != 0U)
 8002c60:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8002c64:	5ce9      	ldrb	r1, [r5, r3]
 8002c66:	b9d1      	cbnz	r1, 8002c9e <USBH_MTP_InterfaceDeInit+0x50>
  if (MTP_Handle->NotificationPipe != 0U)
 8002c68:	f641 532e 	movw	r3, #7470	; 0x1d2e
 8002c6c:	5ce9      	ldrb	r1, [r5, r3]
 8002c6e:	bb11      	cbnz	r1, 8002cb6 <USBH_MTP_InterfaceDeInit+0x68>
  if (phost->pActiveClass->pData != NULL)
 8002c70:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8002c74:	69d8      	ldr	r0, [r3, #28]
 8002c76:	b128      	cbz	r0, 8002c84 <USBH_MTP_InterfaceDeInit+0x36>
    USBH_free(phost->pActiveClass->pData);
 8002c78:	f003 fd5e 	bl	8006738 <free>
    phost->pActiveClass->pData = 0U;
 8002c7c:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8002c80:	2200      	movs	r2, #0
 8002c82:	61da      	str	r2, [r3, #28]
}
 8002c84:	2000      	movs	r0, #0
 8002c86:	bd70      	pop	{r4, r5, r6, pc}
    USBH_ClosePipe(phost, MTP_Handle->DataOutPipe);
 8002c88:	f001 ff1e 	bl	8004ac8 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->DataOutPipe);
 8002c8c:	f641 562d 	movw	r6, #7469	; 0x1d2d
 8002c90:	5da9      	ldrb	r1, [r5, r6]
 8002c92:	4620      	mov	r0, r4
 8002c94:	f001 ff30 	bl	8004af8 <USBH_FreePipe>
    MTP_Handle->DataOutPipe = 0U;     /* Reset the Channel as Free */
 8002c98:	2300      	movs	r3, #0
 8002c9a:	55ab      	strb	r3, [r5, r6]
 8002c9c:	e7e0      	b.n	8002c60 <USBH_MTP_InterfaceDeInit+0x12>
    USBH_ClosePipe(phost, MTP_Handle->DataInPipe);
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f001 ff12 	bl	8004ac8 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->DataInPipe);
 8002ca4:	f641 562c 	movw	r6, #7468	; 0x1d2c
 8002ca8:	5da9      	ldrb	r1, [r5, r6]
 8002caa:	4620      	mov	r0, r4
 8002cac:	f001 ff24 	bl	8004af8 <USBH_FreePipe>
    MTP_Handle->DataInPipe = 0U;     /* Reset the Channel as Free */
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	55ab      	strb	r3, [r5, r6]
 8002cb4:	e7d8      	b.n	8002c68 <USBH_MTP_InterfaceDeInit+0x1a>
    USBH_ClosePipe(phost, MTP_Handle->NotificationPipe);
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f001 ff06 	bl	8004ac8 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->NotificationPipe);
 8002cbc:	f641 562e 	movw	r6, #7470	; 0x1d2e
 8002cc0:	5da9      	ldrb	r1, [r5, r6]
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	f001 ff18 	bl	8004af8 <USBH_FreePipe>
    MTP_Handle->NotificationPipe = 0U;     /* Reset the Channel as Free */
 8002cc8:	2300      	movs	r3, #0
 8002cca:	55ab      	strb	r3, [r5, r6]
 8002ccc:	e7d0      	b.n	8002c70 <USBH_MTP_InterfaceDeInit+0x22>

08002cce <USBH_MTP_InterfaceInit>:
{
 8002cce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, USB_MTP_CLASS, 1U, 1U);
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2106      	movs	r1, #6
 8002cdc:	f001 f931 	bl	8003f42 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8002ce0:	2801      	cmp	r0, #1
 8002ce2:	f200 80cd 	bhi.w	8002e80 <USBH_MTP_InterfaceInit+0x1b2>
 8002ce6:	4605      	mov	r5, r0
  USBH_SelectInterface(phost, interface);
 8002ce8:	4601      	mov	r1, r0
 8002cea:	4620      	mov	r0, r4
 8002cec:	f001 f91f 	bl	8003f2e <USBH_SelectInterface>
  status = USBH_SelectInterface(phost, interface);
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f001 f91b 	bl	8003f2e <USBH_SelectInterface>
  if (status != USBH_OK)
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	f040 80c5 	bne.w	8002e88 <USBH_MTP_InterfaceInit+0x1ba>
  endpoint = MTP_FindCtlEndpoint(phost);
 8002cfe:	4620      	mov	r0, r4
 8002d00:	f7ff fee9 	bl	8002ad6 <MTP_FindCtlEndpoint>
 8002d04:	4607      	mov	r7, r0
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8002d06:	2801      	cmp	r0, #1
 8002d08:	f200 80c0 	bhi.w	8002e8c <USBH_MTP_InterfaceInit+0x1be>
  phost->pActiveClass->pData = (MTP_HandleTypeDef *)USBH_malloc(sizeof(MTP_HandleTypeDef));
 8002d0c:	f8d4 637c 	ldr.w	r6, [r4, #892]	; 0x37c
 8002d10:	f242 10d0 	movw	r0, #8656	; 0x21d0
 8002d14:	f003 fd08 	bl	8006728 <malloc>
 8002d18:	61f0      	str	r0, [r6, #28]
  MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8002d1a:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8002d1e:	69de      	ldr	r6, [r3, #28]
  if (MTP_Handle == NULL)
 8002d20:	2e00      	cmp	r6, #0
 8002d22:	f000 80b5 	beq.w	8002e90 <USBH_MTP_InterfaceInit+0x1c2>
  USBH_memset(MTP_Handle, 0, sizeof(MTP_HandleTypeDef));
 8002d26:	f242 12d0 	movw	r2, #8656	; 0x21d0
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4630      	mov	r0, r6
 8002d2e:	f003 fd19 	bl	8006764 <memset>
  MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8002d32:	3701      	adds	r7, #1
 8002d34:	231a      	movs	r3, #26
 8002d36:	fb03 f305 	mul.w	r3, r3, r5
 8002d3a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8002d3e:	4427      	add	r7, r4
 8002d40:	f897 1346 	ldrb.w	r1, [r7, #838]	; 0x346
 8002d44:	f641 5a31 	movw	sl, #7473	; 0x1d31
 8002d48:	f806 100a 	strb.w	r1, [r6, sl]
  MTP_Handle->NotificationEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8002d4c:	f8b7 3348 	ldrh.w	r3, [r7, #840]	; 0x348
 8002d50:	f641 5936 	movw	r9, #7478	; 0x1d36
 8002d54:	f826 3009 	strh.w	r3, [r6, r9]
  MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f001 feba 	bl	8004ad2 <USBH_AllocPipe>
 8002d5e:	4601      	mov	r1, r0
 8002d60:	f641 582e 	movw	r8, #7470	; 0x1d2e
 8002d64:	f806 0008 	strb.w	r0, [r6, r8]
  MTP_Handle->events.poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bInterval;
 8002d68:	f897 234a 	ldrb.w	r2, [r7, #842]	; 0x34a
 8002d6c:	f641 5344 	movw	r3, #7492	; 0x1d44
 8002d70:	52f2      	strh	r2, [r6, r3]
  USBH_OpenPipe(phost, MTP_Handle->NotificationPipe,MTP_Handle->NotificationEp,
 8002d72:	f816 200a 	ldrb.w	r2, [r6, sl]
 8002d76:	f836 3009 	ldrh.w	r3, [r6, r9]
 8002d7a:	9302      	str	r3, [sp, #8]
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	9301      	str	r3, [sp, #4]
 8002d80:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	f001 fe8c 	bl	8004aa8 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MTP_Handle->NotificationPipe, 0U);
 8002d90:	2200      	movs	r2, #0
 8002d92:	f816 1008 	ldrb.w	r1, [r6, r8]
 8002d96:	4620      	mov	r0, r4
 8002d98:	f003 fc20 	bl	80065dc <USBH_LL_SetToggle>
  endpoint = MTP_FindDataInEndpoint(phost);
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f7ff ff0f 	bl	8002bc0 <MTP_FindDataInEndpoint>
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8002da2:	2801      	cmp	r0, #1
 8002da4:	d876      	bhi.n	8002e94 <USBH_MTP_InterfaceInit+0x1c6>
  MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8002da6:	3001      	adds	r0, #1
 8002da8:	231a      	movs	r3, #26
 8002daa:	fb03 f305 	mul.w	r3, r3, r5
 8002dae:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002db2:	4420      	add	r0, r4
 8002db4:	f890 1346 	ldrb.w	r1, [r0, #838]	; 0x346
 8002db8:	f641 5830 	movw	r8, #7472	; 0x1d30
 8002dbc:	f806 1008 	strb.w	r1, [r6, r8]
  MTP_Handle->DataInEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8002dc0:	f8b0 3348 	ldrh.w	r3, [r0, #840]	; 0x348
 8002dc4:	f641 5934 	movw	r9, #7476	; 0x1d34
 8002dc8:	f826 3009 	strh.w	r3, [r6, r9]
  MTP_Handle->DataInPipe = USBH_AllocPipe(phost, MTP_Handle->DataInEp);
 8002dcc:	4620      	mov	r0, r4
 8002dce:	f001 fe80 	bl	8004ad2 <USBH_AllocPipe>
 8002dd2:	4601      	mov	r1, r0
 8002dd4:	f641 572c 	movw	r7, #7468	; 0x1d2c
 8002dd8:	55f0      	strb	r0, [r6, r7]
  USBH_OpenPipe(phost, MTP_Handle->DataInPipe, MTP_Handle->DataInEp,
 8002dda:	f816 2008 	ldrb.w	r2, [r6, r8]
 8002dde:	f836 3009 	ldrh.w	r3, [r6, r9]
 8002de2:	9302      	str	r3, [sp, #8]
 8002de4:	2302      	movs	r3, #2
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8002df2:	4620      	mov	r0, r4
 8002df4:	f001 fe58 	bl	8004aa8 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MTP_Handle->DataInPipe, 0U);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	5df1      	ldrb	r1, [r6, r7]
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	f003 fbed 	bl	80065dc <USBH_LL_SetToggle>
  endpoint = MTP_FindDataOutEndpoint(phost);
 8002e02:	4620      	mov	r0, r4
 8002e04:	f7ff fea2 	bl	8002b4c <MTP_FindDataOutEndpoint>
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8002e08:	2801      	cmp	r0, #1
 8002e0a:	d845      	bhi.n	8002e98 <USBH_MTP_InterfaceInit+0x1ca>
  MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8002e0c:	3001      	adds	r0, #1
 8002e0e:	231a      	movs	r3, #26
 8002e10:	fb03 f505 	mul.w	r5, r3, r5
 8002e14:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8002e18:	4420      	add	r0, r4
 8002e1a:	f890 1346 	ldrb.w	r1, [r0, #838]	; 0x346
 8002e1e:	f641 582f 	movw	r8, #7471	; 0x1d2f
 8002e22:	f806 1008 	strb.w	r1, [r6, r8]
  MTP_Handle->DataOutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8002e26:	f8b0 3348 	ldrh.w	r3, [r0, #840]	; 0x348
 8002e2a:	f641 5532 	movw	r5, #7474	; 0x1d32
 8002e2e:	5373      	strh	r3, [r6, r5]
  MTP_Handle->DataOutPipe = USBH_AllocPipe(phost, MTP_Handle->DataOutEp);
 8002e30:	4620      	mov	r0, r4
 8002e32:	f001 fe4e 	bl	8004ad2 <USBH_AllocPipe>
 8002e36:	4601      	mov	r1, r0
 8002e38:	f641 572d 	movw	r7, #7469	; 0x1d2d
 8002e3c:	55f0      	strb	r0, [r6, r7]
  USBH_OpenPipe(phost, MTP_Handle->DataOutPipe, MTP_Handle->DataOutEp,
 8002e3e:	f816 2008 	ldrb.w	r2, [r6, r8]
 8002e42:	5b73      	ldrh	r3, [r6, r5]
 8002e44:	9302      	str	r3, [sp, #8]
 8002e46:	2502      	movs	r5, #2
 8002e48:	9501      	str	r5, [sp, #4]
 8002e4a:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8002e54:	4620      	mov	r0, r4
 8002e56:	f001 fe27 	bl	8004aa8 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MTP_Handle->DataOutPipe, 0U);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	5df1      	ldrb	r1, [r6, r7]
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f003 fbbc 	bl	80065dc <USBH_LL_SetToggle>
  MTP_Handle->state = MTP_OPENSESSION;
 8002e64:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002e68:	54f5      	strb	r5, [r6, r3]
  MTP_Handle->is_ready = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f242 12cc 	movw	r2, #8652	; 0x21cc
 8002e70:	50b3      	str	r3, [r6, r2]
  MTP_Handle->events.state = MTP_EVENTS_INIT;
 8002e72:	f641 523c 	movw	r2, #7484	; 0x1d3c
 8002e76:	54b3      	strb	r3, [r6, r2]
  return USBH_PTP_Init(phost);
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f000 fafb 	bl	8003474 <USBH_PTP_Init>
 8002e7e:	e000      	b.n	8002e82 <USBH_MTP_InterfaceInit+0x1b4>
    return USBH_FAIL;
 8002e80:	2002      	movs	r0, #2
}
 8002e82:	b004      	add	sp, #16
 8002e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return USBH_FAIL;
 8002e88:	2002      	movs	r0, #2
 8002e8a:	e7fa      	b.n	8002e82 <USBH_MTP_InterfaceInit+0x1b4>
    return USBH_FAIL;
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	e7f8      	b.n	8002e82 <USBH_MTP_InterfaceInit+0x1b4>
    return USBH_FAIL;
 8002e90:	2002      	movs	r0, #2
 8002e92:	e7f6      	b.n	8002e82 <USBH_MTP_InterfaceInit+0x1b4>
    return USBH_FAIL;
 8002e94:	2002      	movs	r0, #2
 8002e96:	e7f4      	b.n	8002e82 <USBH_MTP_InterfaceInit+0x1b4>
    return USBH_FAIL;
 8002e98:	2002      	movs	r0, #2
 8002e9a:	e7f2      	b.n	8002e82 <USBH_MTP_InterfaceInit+0x1b4>

08002e9c <USBH_MTP_EventsCallback>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(event);
  UNUSED(param);
}
 8002e9c:	4770      	bx	lr

08002e9e <MTP_DecodeEvent>:
{
 8002e9e:	b508      	push	{r3, lr}
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8002ea0:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8002ea4:	69db      	ldr	r3, [r3, #28]
  USBH_MTP_EventsCallback(phost, (uint32_t)code, param1);
 8002ea6:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002eaa:	589a      	ldr	r2, [r3, r2]
 8002eac:	f641 514e 	movw	r1, #7502	; 0x1d4e
 8002eb0:	5a59      	ldrh	r1, [r3, r1]
 8002eb2:	f7ff fff3 	bl	8002e9c <USBH_MTP_EventsCallback>
}
 8002eb6:	bd08      	pop	{r3, pc}

08002eb8 <USBH_MTP_Events>:
{
 8002eb8:	b538      	push	{r3, r4, r5, lr}
 8002eba:	4604      	mov	r4, r0
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8002ebc:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8002ec0:	69dd      	ldr	r5, [r3, #28]
  switch (MTP_Handle->events.state)
 8002ec2:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002ec6:	5ceb      	ldrb	r3, [r5, r3]
 8002ec8:	b11b      	cbz	r3, 8002ed2 <USBH_MTP_Events+0x1a>
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d01b      	beq.n	8002f06 <USBH_MTP_Events+0x4e>
}
 8002ece:	2001      	movs	r0, #1
 8002ed0:	bd38      	pop	{r3, r4, r5, pc}
      if ((phost->Timer & 1U) == 0U)
 8002ed2:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8002ed6:	f013 0f01 	tst.w	r3, #1
 8002eda:	d1f8      	bne.n	8002ece <USBH_MTP_Events+0x16>
        MTP_Handle->events.timer = phost->Timer;
 8002edc:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
 8002ee0:	f505 53ea 	add.w	r3, r5, #7488	; 0x1d40
 8002ee4:	601a      	str	r2, [r3, #0]
        USBH_InterruptReceiveData(phost,
 8002ee6:	f641 532e 	movw	r3, #7470	; 0x1d2e
 8002eea:	5ceb      	ldrb	r3, [r5, r3]
 8002eec:	f641 5236 	movw	r2, #7478	; 0x1d36
 8002ef0:	5caa      	ldrb	r2, [r5, r2]
 8002ef2:	f505 51ea 	add.w	r1, r5, #7488	; 0x1d40
 8002ef6:	3108      	adds	r1, #8
 8002ef8:	f001 fdb3 	bl	8004a62 <USBH_InterruptReceiveData>
        MTP_Handle->events.state = MTP_EVENTS_GETDATA;
 8002efc:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002f00:	2201      	movs	r2, #1
 8002f02:	54ea      	strb	r2, [r5, r3]
 8002f04:	e7e3      	b.n	8002ece <USBH_MTP_Events+0x16>
      if (USBH_LL_GetURBState(phost, MTP_Handle->NotificationPipe) == USBH_URB_DONE)
 8002f06:	f641 532e 	movw	r3, #7470	; 0x1d2e
 8002f0a:	5ce9      	ldrb	r1, [r5, r3]
 8002f0c:	f003 fb52 	bl	80065b4 <USBH_LL_GetURBState>
 8002f10:	2801      	cmp	r0, #1
 8002f12:	d01c      	beq.n	8002f4e <USBH_MTP_Events+0x96>
      if ((phost->Timer - MTP_Handle->events.timer) >= MTP_Handle->events.poll)
 8002f14:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8002f18:	f505 52ea 	add.w	r2, r5, #7488	; 0x1d40
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	f641 5244 	movw	r2, #7492	; 0x1d44
 8002f24:	5aaa      	ldrh	r2, [r5, r2]
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d3d1      	bcc.n	8002ece <USBH_MTP_Events+0x16>
        MTP_Handle->events.timer = phost->Timer;
 8002f2a:	f8d4 23c4 	ldr.w	r2, [r4, #964]	; 0x3c4
 8002f2e:	f505 53ea 	add.w	r3, r5, #7488	; 0x1d40
 8002f32:	601a      	str	r2, [r3, #0]
        USBH_InterruptReceiveData(phost,
 8002f34:	f641 532e 	movw	r3, #7470	; 0x1d2e
 8002f38:	5ceb      	ldrb	r3, [r5, r3]
 8002f3a:	f641 5236 	movw	r2, #7478	; 0x1d36
 8002f3e:	5caa      	ldrb	r2, [r5, r2]
 8002f40:	f505 51ea 	add.w	r1, r5, #7488	; 0x1d40
 8002f44:	3108      	adds	r1, #8
 8002f46:	4620      	mov	r0, r4
 8002f48:	f001 fd8b 	bl	8004a62 <USBH_InterruptReceiveData>
 8002f4c:	e7bf      	b.n	8002ece <USBH_MTP_Events+0x16>
        MTP_DecodeEvent(phost);
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f7ff ffa5 	bl	8002e9e <MTP_DecodeEvent>
 8002f54:	e7de      	b.n	8002f14 <USBH_MTP_Events+0x5c>

08002f56 <USBH_MTP_Process>:
{
 8002f56:	b570      	push	{r4, r5, r6, lr}
 8002f58:	4604      	mov	r4, r0
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8002f5a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8002f5e:	69de      	ldr	r6, [r3, #28]
  switch (MTP_Handle->state)
 8002f60:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002f64:	5cf5      	ldrb	r5, [r6, r3]
 8002f66:	2d05      	cmp	r5, #5
 8002f68:	f200 8091 	bhi.w	800308e <USBH_MTP_Process+0x138>
 8002f6c:	e8df f005 	tbb	[pc, r5]
 8002f70:	8f031780 	.word	0x8f031780
 8002f74:	472a      	.short	0x472a
      status = USBH_PTP_OpenSession(phost, 1U);  /* Session '0' is not valid */
 8002f76:	2101      	movs	r1, #1
 8002f78:	f000 fca2 	bl	80038c0 <USBH_PTP_OpenSession>
      if (status == USBH_OK)
 8002f7c:	4605      	mov	r5, r0
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	f040 8083 	bne.w	800308a <USBH_MTP_Process+0x134>
        MTP_Handle->state = MTP_GETDEVICEINFO;
 8002f84:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002f88:	2201      	movs	r2, #1
 8002f8a:	54f2      	strb	r2, [r6, r3]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8002f8c:	2105      	movs	r1, #5
 8002f8e:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8002f98:	f001 fe1c 	bl	8004bd4 <osMessagePut>
 8002f9c:	e075      	b.n	800308a <USBH_MTP_Process+0x134>
      status = USBH_PTP_GetDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 8002f9e:	4631      	mov	r1, r6
 8002fa0:	f000 fccf 	bl	8003942 <USBH_PTP_GetDeviceInfo>
      if (status == USBH_OK)
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	d16f      	bne.n	800308a <USBH_MTP_Process+0x134>
        MTP_Handle->state = MTP_GETSTORAGEIDS;
 8002faa:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002fae:	2204      	movs	r2, #4
 8002fb0:	54f2      	strb	r2, [r6, r3]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8002fb2:	2105      	movs	r1, #5
 8002fb4:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8002fbe:	f001 fe09 	bl	8004bd4 <osMessagePut>
 8002fc2:	e062      	b.n	800308a <USBH_MTP_Process+0x134>
      status = USBH_PTP_GetStorageIds(phost, &(MTP_Handle->info.storids));
 8002fc4:	f606 1104 	addw	r1, r6, #2308	; 0x904
 8002fc8:	f000 fd13 	bl	80039f2 <USBH_PTP_GetStorageIds>
      if (status == USBH_OK)
 8002fcc:	4605      	mov	r5, r0
 8002fce:	2800      	cmp	r0, #0
 8002fd0:	d15b      	bne.n	800308a <USBH_MTP_Process+0x134>
        for (idx  = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f8d6 2904 	ldr.w	r2, [r6, #2308]	; 0x904
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d901      	bls.n	8002fe0 <USBH_MTP_Process+0x8a>
 8002fdc:	3301      	adds	r3, #1
 8002fde:	e7f9      	b.n	8002fd4 <USBH_MTP_Process+0x7e>
        MTP_Handle->current_storage_unit = 0U;
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f242 13c8 	movw	r3, #8648	; 0x21c8
 8002fe6:	50f2      	str	r2, [r6, r3]
        MTP_Handle->state = MTP_GETSTORAGEINFO;
 8002fe8:	2105      	movs	r1, #5
 8002fea:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002fee:	54f1      	strb	r1, [r6, r3]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8002ff0:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8002ff4:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8002ff8:	f001 fdec 	bl	8004bd4 <osMessagePut>
 8002ffc:	e045      	b.n	800308a <USBH_MTP_Process+0x134>
                                       MTP_Handle->info.storids.Storage[MTP_Handle->current_storage_unit],
 8002ffe:	f242 13c8 	movw	r3, #8648	; 0x21c8
 8003002:	58f3      	ldr	r3, [r6, r3]
      status = USBH_PTP_GetStorageInfo(phost,
 8003004:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8003008:	0152      	lsls	r2, r2, #5
 800300a:	f502 6212 	add.w	r2, r2, #2336	; 0x920
 800300e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8003012:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003016:	4432      	add	r2, r6
 8003018:	6899      	ldr	r1, [r3, #8]
 800301a:	f000 fd42 	bl	8003aa2 <USBH_PTP_GetStorageInfo>
      if (status == USBH_OK)
 800301e:	4605      	mov	r5, r0
 8003020:	bb98      	cbnz	r0, 800308a <USBH_MTP_Process+0x134>
        if (++MTP_Handle->current_storage_unit >= MTP_Handle->info.storids.n)
 8003022:	f242 12c8 	movw	r2, #8648	; 0x21c8
 8003026:	58b3      	ldr	r3, [r6, r2]
 8003028:	3301      	adds	r3, #1
 800302a:	50b3      	str	r3, [r6, r2]
 800302c:	f8d6 2904 	ldr.w	r2, [r6, #2308]	; 0x904
 8003030:	4293      	cmp	r3, r2
 8003032:	d314      	bcc.n	800305e <USBH_MTP_Process+0x108>
          MTP_Handle->state = MTP_IDLE;
 8003034:	2300      	movs	r3, #0
 8003036:	f641 5238 	movw	r2, #7480	; 0x1d38
 800303a:	54b3      	strb	r3, [r6, r2]
          MTP_Handle->is_ready = 1U;
 800303c:	f242 12cc 	movw	r2, #8652	; 0x21cc
 8003040:	2101      	movs	r1, #1
 8003042:	50b1      	str	r1, [r6, r2]
          MTP_Handle->current_storage_unit = 0U;
 8003044:	f242 12c8 	movw	r2, #8648	; 0x21c8
 8003048:	50b3      	str	r3, [r6, r2]
          MTP_Handle->params.CurrentStorageId = MTP_Handle->info.storids.Storage[0];
 800304a:	f8d6 2908 	ldr.w	r2, [r6, #2312]	; 0x908
 800304e:	f641 5318 	movw	r3, #7448	; 0x1d18
 8003052:	50f2      	str	r2, [r6, r3]
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8003054:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8003058:	2102      	movs	r1, #2
 800305a:	4620      	mov	r0, r4
 800305c:	4798      	blx	r3
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800305e:	2105      	movs	r1, #5
 8003060:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003064:	2200      	movs	r2, #0
 8003066:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800306a:	f001 fdb3 	bl	8004bd4 <osMessagePut>
 800306e:	e00c      	b.n	800308a <USBH_MTP_Process+0x134>
      USBH_MTP_Events(phost);
 8003070:	f7ff ff22 	bl	8002eb8 <USBH_MTP_Events>
      osDelay(10U);
 8003074:	200a      	movs	r0, #10
 8003076:	f001 fd90 	bl	8004b9a <osDelay>
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800307a:	2105      	movs	r1, #5
 800307c:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003080:	2200      	movs	r2, #0
 8003082:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8003086:	f001 fda5 	bl	8004bd4 <osMessagePut>
}
 800308a:	4628      	mov	r0, r5
 800308c:	bd70      	pop	{r4, r5, r6, pc}
  switch (MTP_Handle->state)
 800308e:	2501      	movs	r5, #1
 8003090:	e7fb      	b.n	800308a <USBH_MTP_Process+0x134>

08003092 <PTP_GetString>:
  * @param  str: ascii string
  * @param  data: Device info structure
  * @retval None
  */
static void PTP_GetString(uint8_t *str, uint8_t *data, uint16_t *len)
{
 8003092:	b410      	push	{r4}
  uint16_t strlength;
  uint16_t idx;

  *len = data[0];
 8003094:	780b      	ldrb	r3, [r1, #0]
 8003096:	8013      	strh	r3, [r2, #0]
  strlength = (uint16_t)(2U * (uint32_t)data[0]);
 8003098:	780c      	ldrb	r4, [r1, #0]
 800309a:	0064      	lsls	r4, r4, #1
  data ++; /* Adjust the offset ignoring the String Len */

  for (idx = 0U; idx < strlength; idx += 2U)
 800309c:	2300      	movs	r3, #0
 800309e:	42a3      	cmp	r3, r4
 80030a0:	d206      	bcs.n	80030b0 <PTP_GetString+0x1e>
  {
    /* Copy Only the string and ignore the UNICODE ID, hence add the src */
    *str = data[idx];
 80030a2:	18ca      	adds	r2, r1, r3
 80030a4:	7852      	ldrb	r2, [r2, #1]
 80030a6:	f800 2b01 	strb.w	r2, [r0], #1
  for (idx = 0U; idx < strlength; idx += 2U)
 80030aa:	3302      	adds	r3, #2
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	e7f6      	b.n	800309e <PTP_GetString+0xc>
    str++;
  }
  *str = 0U; /* mark end of string */
 80030b0:	2300      	movs	r3, #0
 80030b2:	7003      	strb	r3, [r0, #0]
}
 80030b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <PTP_GetStorageInfo>:
{
 80030ba:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	4614      	mov	r4, r2
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80030c2:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80030c6:	69d9      	ldr	r1, [r3, #28]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 80030c8:	f641 5390 	movw	r3, #7568	; 0x1d90
 80030cc:	18cd      	adds	r5, r1, r3
  stor_info->StorageType = LE16(&data[PTP_si_StorageType]);
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	f641 5291 	movw	r2, #7569	; 0x1d91
 80030d4:	5c8a      	ldrb	r2, [r1, r2]
 80030d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80030da:	8023      	strh	r3, [r4, #0]
  stor_info->FilesystemType = LE16(&data[PTP_si_FilesystemType]);
 80030dc:	f641 5392 	movw	r3, #7570	; 0x1d92
 80030e0:	5ccb      	ldrb	r3, [r1, r3]
 80030e2:	f641 5293 	movw	r2, #7571	; 0x1d93
 80030e6:	5c8a      	ldrb	r2, [r1, r2]
 80030e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80030ec:	8063      	strh	r3, [r4, #2]
  stor_info->AccessCapability = LE16(&data[PTP_si_AccessCapability]);
 80030ee:	f641 5394 	movw	r3, #7572	; 0x1d94
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	f641 5295 	movw	r2, #7573	; 0x1d95
 80030f8:	5c8a      	ldrb	r2, [r1, r2]
 80030fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80030fe:	80a3      	strh	r3, [r4, #4]
  stor_info->MaxCapability = LE64(&data[PTP_si_MaxCapability]);
 8003100:	f641 5396 	movw	r3, #7574	; 0x1d96
 8003104:	f811 b003 	ldrb.w	fp, [r1, r3]
 8003108:	f641 5397 	movw	r3, #7575	; 0x1d97
 800310c:	5cce      	ldrb	r6, [r1, r3]
 800310e:	ea4b 2206 	orr.w	r2, fp, r6, lsl #8
 8003112:	f641 5398 	movw	r3, #7576	; 0x1d98
 8003116:	5cce      	ldrb	r6, [r1, r3]
 8003118:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800311c:	f641 5399 	movw	r3, #7577	; 0x1d99
 8003120:	5cce      	ldrb	r6, [r1, r3]
 8003122:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 8003126:	f641 539a 	movw	r3, #7578	; 0x1d9a
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	f641 509b 	movw	r0, #7579	; 0x1d9b
 8003130:	5c0e      	ldrb	r6, [r1, r0]
 8003132:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8003136:	f641 509c 	movw	r0, #7580	; 0x1d9c
 800313a:	5c0e      	ldrb	r6, [r1, r0]
 800313c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8003140:	f641 509d 	movw	r0, #7581	; 0x1d9d
 8003144:	5c0e      	ldrb	r6, [r1, r0]
 8003146:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800314a:	60a2      	str	r2, [r4, #8]
 800314c:	60e3      	str	r3, [r4, #12]
  stor_info->FreeSpaceInBytes = LE64(&data[PTP_si_FreeSpaceInBytes]);
 800314e:	f641 539e 	movw	r3, #7582	; 0x1d9e
 8003152:	f811 b003 	ldrb.w	fp, [r1, r3]
 8003156:	f641 539f 	movw	r3, #7583	; 0x1d9f
 800315a:	5cce      	ldrb	r6, [r1, r3]
 800315c:	ea4b 2206 	orr.w	r2, fp, r6, lsl #8
 8003160:	f501 53ed 	add.w	r3, r1, #7584	; 0x1da0
 8003164:	781e      	ldrb	r6, [r3, #0]
 8003166:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800316a:	f641 53a1 	movw	r3, #7585	; 0x1da1
 800316e:	5cce      	ldrb	r6, [r1, r3]
 8003170:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 8003174:	f641 53a2 	movw	r3, #7586	; 0x1da2
 8003178:	5ccb      	ldrb	r3, [r1, r3]
 800317a:	f641 50a3 	movw	r0, #7587	; 0x1da3
 800317e:	5c0e      	ldrb	r6, [r1, r0]
 8003180:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8003184:	f641 50a4 	movw	r0, #7588	; 0x1da4
 8003188:	5c0e      	ldrb	r6, [r1, r0]
 800318a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800318e:	f641 50a5 	movw	r0, #7589	; 0x1da5
 8003192:	5c0e      	ldrb	r6, [r1, r0]
 8003194:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8003198:	6122      	str	r2, [r4, #16]
 800319a:	6163      	str	r3, [r4, #20]
  stor_info->FreeSpaceInImages = LE32(&data[PTP_si_FreeSpaceInImages]);
 800319c:	f641 53a6 	movw	r3, #7590	; 0x1da6
 80031a0:	5ccb      	ldrb	r3, [r1, r3]
 80031a2:	f641 52a7 	movw	r2, #7591	; 0x1da7
 80031a6:	5c8a      	ldrb	r2, [r1, r2]
 80031a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80031ac:	f641 52a8 	movw	r2, #7592	; 0x1da8
 80031b0:	5c8a      	ldrb	r2, [r1, r2]
 80031b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031b6:	f641 52a9 	movw	r2, #7593	; 0x1da9
 80031ba:	5c8a      	ldrb	r2, [r1, r2]
 80031bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80031c0:	61a3      	str	r3, [r4, #24]
  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 80031c2:	f10d 0206 	add.w	r2, sp, #6
 80031c6:	f501 51ed 	add.w	r1, r1, #7584	; 0x1da0
 80031ca:	310a      	adds	r1, #10
 80031cc:	f104 001c 	add.w	r0, r4, #28
 80031d0:	f7ff ff5f 	bl	8003092 <PTP_GetString>
  PTP_GetString(stor_info->VolumeLabel, &data[PTP_si_StorageDescription + len * 2U + 1U], &len);
 80031d4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80031d8:	0049      	lsls	r1, r1, #1
 80031da:	311b      	adds	r1, #27
 80031dc:	f10d 0206 	add.w	r2, sp, #6
 80031e0:	4429      	add	r1, r5
 80031e2:	f204 101b 	addw	r0, r4, #283	; 0x11b
 80031e6:	f7ff ff54 	bl	8003092 <PTP_GetString>
}
 80031ea:	b002      	add	sp, #8
 80031ec:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

080031f0 <PTP_GetArray16>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray16(uint16_t *array, uint8_t *data, uint32_t offset)
{
 80031f0:	b430      	push	{r4, r5}
 80031f2:	4605      	mov	r5, r0
  uint32_t size, idx = 0U;

  size = LE32(&data[offset]);
 80031f4:	5c8b      	ldrb	r3, [r1, r2]
 80031f6:	188c      	adds	r4, r1, r2
 80031f8:	7860      	ldrb	r0, [r4, #1]
 80031fa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80031fe:	78a0      	ldrb	r0, [r4, #2]
 8003200:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003204:	78e0      	ldrb	r0, [r4, #3]
 8003206:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  uint32_t size, idx = 0U;
 800320a:	2300      	movs	r3, #0
  while (size > idx)
 800320c:	4283      	cmp	r3, r0
 800320e:	d207      	bcs.n	8003220 <PTP_GetArray16+0x30>
  {
    array[idx] = (uint16_t)data[offset + (sizeof(uint16_t) * (idx + 2U))];
 8003210:	1c9c      	adds	r4, r3, #2
 8003212:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8003216:	5d0c      	ldrb	r4, [r1, r4]
 8003218:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
    idx++;
 800321c:	3301      	adds	r3, #1
 800321e:	e7f5      	b.n	800320c <PTP_GetArray16+0x1c>
  }
  return size;
}
 8003220:	bc30      	pop	{r4, r5}
 8003222:	4770      	bx	lr

08003224 <PTP_DecodeDeviceInfo>:
{
 8003224:	b570      	push	{r4, r5, r6, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	460c      	mov	r4, r1
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800322a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800322e:	69d9      	ldr	r1, [r3, #28]
  if (MTP_Handle->ptp.iteration == 0U)
 8003230:	f242 13bc 	movw	r3, #8636	; 0x21bc
 8003234:	58cb      	ldr	r3, [r1, r3]
 8003236:	b10b      	cbz	r3, 800323c <PTP_DecodeDeviceInfo+0x18>
}
 8003238:	b002      	add	sp, #8
 800323a:	bd70      	pop	{r4, r5, r6, pc}
 800323c:	f501 55ec 	add.w	r5, r1, #7552	; 0x1d80
 8003240:	3510      	adds	r5, #16
    dev_info->StandardVersion = LE16(&data[PTP_di_StandardVersion]);
 8003242:	f641 5390 	movw	r3, #7568	; 0x1d90
 8003246:	5ccb      	ldrb	r3, [r1, r3]
 8003248:	f641 5291 	movw	r2, #7569	; 0x1d91
 800324c:	5c8a      	ldrb	r2, [r1, r2]
 800324e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003252:	8023      	strh	r3, [r4, #0]
    dev_info->VendorExtensionID = LE32(&data[PTP_di_VendorExtensionID]);
 8003254:	f641 5392 	movw	r3, #7570	; 0x1d92
 8003258:	5ccb      	ldrb	r3, [r1, r3]
 800325a:	f641 5293 	movw	r2, #7571	; 0x1d93
 800325e:	5c8a      	ldrb	r2, [r1, r2]
 8003260:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003264:	f641 5294 	movw	r2, #7572	; 0x1d94
 8003268:	5c8a      	ldrb	r2, [r1, r2]
 800326a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800326e:	f641 5295 	movw	r2, #7573	; 0x1d95
 8003272:	5c8a      	ldrb	r2, [r1, r2]
 8003274:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003278:	6063      	str	r3, [r4, #4]
    dev_info->VendorExtensionVersion = LE16(&data[PTP_di_VendorExtensionVersion]);
 800327a:	f641 5396 	movw	r3, #7574	; 0x1d96
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	f641 5297 	movw	r2, #7575	; 0x1d97
 8003284:	5c8a      	ldrb	r2, [r1, r2]
 8003286:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800328a:	8123      	strh	r3, [r4, #8]
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 800328c:	f10d 0206 	add.w	r2, sp, #6
 8003290:	f501 51ec 	add.w	r1, r1, #7552	; 0x1d80
 8003294:	3118      	adds	r1, #24
 8003296:	f104 000a 	add.w	r0, r4, #10
 800329a:	f7ff fefa 	bl	8003092 <PTP_GetString>
    totallen = len * 2U + 1U;
 800329e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80032a2:	0052      	lsls	r2, r2, #1
 80032a4:	1c56      	adds	r6, r2, #1
    dev_info->FunctionalMode = LE16(&data[PTP_di_FunctionalMode + totallen]);
 80032a6:	f102 0309 	add.w	r3, r2, #9
 80032aa:	5ceb      	ldrb	r3, [r5, r3]
 80032ac:	18a9      	adds	r1, r5, r2
 80032ae:	7a89      	ldrb	r1, [r1, #10]
 80032b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80032b4:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
    dev_info->OperationsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->OperationsSupported,
 80032b8:	320b      	adds	r2, #11
 80032ba:	4629      	mov	r1, r5
 80032bc:	f504 7088 	add.w	r0, r4, #272	; 0x110
 80032c0:	f7ff ff96 	bl	80031f0 <PTP_GetArray16>
 80032c4:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
    totallen = totallen + dev_info->OperationsSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 80032c8:	eb06 0240 	add.w	r2, r6, r0, lsl #1
 80032cc:	1d16      	adds	r6, r2, #4
    dev_info->EventsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->EventsSupported,
 80032ce:	320e      	adds	r2, #14
 80032d0:	4629      	mov	r1, r5
 80032d2:	f504 70ee 	add.w	r0, r4, #476	; 0x1dc
 80032d6:	f7ff ff8b 	bl	80031f0 <PTP_GetArray16>
 80032da:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    totallen = totallen + dev_info->EventsSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 80032de:	eb06 0240 	add.w	r2, r6, r0, lsl #1
 80032e2:	1d16      	adds	r6, r2, #4
    dev_info->DevicePropertiesSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->DevicePropertiesSupported,
 80032e4:	320e      	adds	r2, #14
 80032e6:	4629      	mov	r1, r5
 80032e8:	f504 702a 	add.w	r0, r4, #680	; 0x2a8
 80032ec:	f7ff ff80 	bl	80031f0 <PTP_GetArray16>
 80032f0:	f8c4 02a4 	str.w	r0, [r4, #676]	; 0x2a4
    totallen = totallen + dev_info->DevicePropertiesSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 80032f4:	eb06 0240 	add.w	r2, r6, r0, lsl #1
 80032f8:	1d16      	adds	r6, r2, #4
    dev_info->CaptureFormats_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->CaptureFormats,
 80032fa:	320e      	adds	r2, #14
 80032fc:	4629      	mov	r1, r5
 80032fe:	f504 705d 	add.w	r0, r4, #884	; 0x374
 8003302:	f7ff ff75 	bl	80031f0 <PTP_GetArray16>
 8003306:	f8c4 0370 	str.w	r0, [r4, #880]	; 0x370
    totallen = totallen + dev_info->CaptureFormats_len * sizeof(uint16_t) + sizeof(uint32_t);
 800330a:	eb06 0240 	add.w	r2, r6, r0, lsl #1
 800330e:	1d16      	adds	r6, r2, #4
    dev_info->ImageFormats_len =  PTP_GetArray16((uint16_t *)(void *)&dev_info->ImageFormats,
 8003310:	320e      	adds	r2, #14
 8003312:	4629      	mov	r1, r5
 8003314:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 8003318:	f7ff ff6a 	bl	80031f0 <PTP_GetArray16>
 800331c:	f8c4 043c 	str.w	r0, [r4, #1084]	; 0x43c
    totallen = totallen + dev_info->ImageFormats_len * sizeof(uint16_t) + sizeof(uint32_t);
 8003320:	eb06 0140 	add.w	r1, r6, r0, lsl #1
 8003324:	1d0e      	adds	r6, r1, #4
    PTP_GetString(dev_info->Manufacturer, &data[PTP_di_OperationsSupported + totallen], &len);
 8003326:	310e      	adds	r1, #14
 8003328:	f10d 0206 	add.w	r2, sp, #6
 800332c:	4429      	add	r1, r5
 800332e:	f504 60a1 	add.w	r0, r4, #1288	; 0x508
 8003332:	f7ff feae 	bl	8003092 <PTP_GetString>
    totallen += len * 2U + 1U;
 8003336:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800333a:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 800333e:	1c4e      	adds	r6, r1, #1
    PTP_GetString(dev_info->Model, &data[PTP_di_OperationsSupported + totallen], &len);
 8003340:	310b      	adds	r1, #11
 8003342:	f10d 0206 	add.w	r2, sp, #6
 8003346:	4429      	add	r1, r5
 8003348:	f204 6007 	addw	r0, r4, #1543	; 0x607
 800334c:	f7ff fea1 	bl	8003092 <PTP_GetString>
    totallen += len * 2U + 1U;
 8003350:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8003354:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 8003358:	1c4e      	adds	r6, r1, #1
    PTP_GetString(dev_info->DeviceVersion, &data[PTP_di_OperationsSupported + totallen], &len);
 800335a:	310b      	adds	r1, #11
 800335c:	f10d 0206 	add.w	r2, sp, #6
 8003360:	4429      	add	r1, r5
 8003362:	f204 7006 	addw	r0, r4, #1798	; 0x706
 8003366:	f7ff fe94 	bl	8003092 <PTP_GetString>
    totallen += len * 2U + 1U;
 800336a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800336e:	eb06 0141 	add.w	r1, r6, r1, lsl #1
    PTP_GetString(dev_info->SerialNumber, &data[PTP_di_OperationsSupported + totallen], &len);
 8003372:	310b      	adds	r1, #11
 8003374:	f10d 0206 	add.w	r2, sp, #6
 8003378:	4429      	add	r1, r5
 800337a:	f604 0005 	addw	r0, r4, #2053	; 0x805
 800337e:	f7ff fe88 	bl	8003092 <PTP_GetString>
}
 8003382:	e759      	b.n	8003238 <PTP_DecodeDeviceInfo+0x14>

08003384 <PTP_GetArray32>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray32(uint32_t *array, uint8_t *data, uint32_t offset)
{
 8003384:	b4f0      	push	{r4, r5, r6, r7}
 8003386:	4607      	mov	r7, r0
  uint32_t size, idx = 0U;

  size = LE32(&data[offset]);
 8003388:	5c88      	ldrb	r0, [r1, r2]
 800338a:	188b      	adds	r3, r1, r2
 800338c:	785c      	ldrb	r4, [r3, #1]
 800338e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8003392:	789c      	ldrb	r4, [r3, #2]
 8003394:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8003398:	78db      	ldrb	r3, [r3, #3]
 800339a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  uint32_t size, idx = 0U;
 800339e:	2500      	movs	r5, #0
  while (size > idx)
 80033a0:	4285      	cmp	r5, r0
 80033a2:	d213      	bcs.n	80033cc <PTP_GetArray32+0x48>
  {
    array[idx] = LE32(&data[offset + (sizeof(uint32_t) * (idx + 1U))]);
 80033a4:	1c6e      	adds	r6, r5, #1
 80033a6:	eb02 0486 	add.w	r4, r2, r6, lsl #2
 80033aa:	5d0b      	ldrb	r3, [r1, r4]
 80033ac:	440c      	add	r4, r1
 80033ae:	f894 c001 	ldrb.w	ip, [r4, #1]
 80033b2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80033b6:	f894 c002 	ldrb.w	ip, [r4, #2]
 80033ba:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80033be:	78e4      	ldrb	r4, [r4, #3]
 80033c0:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80033c4:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
    idx++;
 80033c8:	4635      	mov	r5, r6
 80033ca:	e7e9      	b.n	80033a0 <PTP_GetArray32+0x1c>
  }
  return size;
}
 80033cc:	bcf0      	pop	{r4, r5, r6, r7}
 80033ce:	4770      	bx	lr

080033d0 <PTP_GetStorageIDs>:
{
 80033d0:	b510      	push	{r4, lr}
 80033d2:	460c      	mov	r4, r1
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80033d4:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80033d8:	69d9      	ldr	r1, [r3, #28]
  stor_ids->n = PTP_GetArray32(stor_ids->Storage, data, 0U);
 80033da:	2200      	movs	r2, #0
 80033dc:	f501 51ec 	add.w	r1, r1, #7552	; 0x1d80
 80033e0:	3110      	adds	r1, #16
 80033e2:	1d20      	adds	r0, r4, #4
 80033e4:	f7ff ffce 	bl	8003384 <PTP_GetArray32>
 80033e8:	6020      	str	r0, [r4, #0]
}
 80033ea:	bd10      	pop	{r4, pc}

080033ec <PTP_BufferFullCallback>:
{
 80033ec:	b538      	push	{r3, r4, r5, lr}
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80033ee:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80033f2:	69dc      	ldr	r4, [r3, #28]
  switch (MTP_Handle->ptp.data_container.code)
 80033f4:	f641 538a 	movw	r3, #7562	; 0x1d8a
 80033f8:	5ae3      	ldrh	r3, [r4, r3]
 80033fa:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80033fe:	3b01      	subs	r3, #1
 8003400:	2b1a      	cmp	r3, #26
 8003402:	d812      	bhi.n	800342a <PTP_BufferFullCallback+0x3e>
 8003404:	e8df f003 	tbb	[pc, r3]
 8003408:	1111110e 	.word	0x1111110e
 800340c:	11111111 	.word	0x11111111
 8003410:	11111112 	.word	0x11111112
 8003414:	11111128 	.word	0x11111128
 8003418:	11111111 	.word	0x11111111
 800341c:	11111111 	.word	0x11111111
 8003420:	1111      	.short	0x1111
 8003422:	12          	.byte	0x12
 8003423:	00          	.byte	0x00
      PTP_DecodeDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 8003424:	4621      	mov	r1, r4
 8003426:	f7ff fefd 	bl	8003224 <PTP_DecodeDeviceInfo>
}
 800342a:	bd38      	pop	{r3, r4, r5, pc}
      if (MTP_Handle->ptp.iteration == 0U)
 800342c:	f242 13bc 	movw	r3, #8636	; 0x21bc
 8003430:	58e3      	ldr	r3, [r4, r3]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f9      	bne.n	800342a <PTP_BufferFullCallback+0x3e>
        USBH_memcpy(MTP_Handle->ptp.object_ptr, MTP_Handle->ptp.data_container.payload.data, PTP_USB_BULK_PAYLOAD_LEN_READ);
 8003436:	f242 15c4 	movw	r5, #8644	; 0x21c4
 800343a:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
 800343e:	f504 51ec 	add.w	r1, r4, #7552	; 0x1d80
 8003442:	3110      	adds	r1, #16
 8003444:	5960      	ldr	r0, [r4, r5]
 8003446:	f003 f97f 	bl	8006748 <memcpy>
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 800344a:	5963      	ldr	r3, [r4, r5]
 800344c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8003450:	f242 12b0 	movw	r2, #8624	; 0x21b0
 8003454:	50a3      	str	r3, [r4, r2]
 8003456:	e7e8      	b.n	800342a <PTP_BufferFullCallback+0x3e>
      if (MTP_Handle->ptp.iteration == 0U)
 8003458:	f242 13bc 	movw	r3, #8636	; 0x21bc
 800345c:	58e3      	ldr	r3, [r4, r3]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1e3      	bne.n	800342a <PTP_BufferFullCallback+0x3e>
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 8003462:	f242 13c4 	movw	r3, #8644	; 0x21c4
 8003466:	58e3      	ldr	r3, [r4, r3]
 8003468:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800346c:	f242 12b0 	movw	r2, #8624	; 0x21b0
 8003470:	50a3      	str	r3, [r4, r2]
}
 8003472:	e7da      	b.n	800342a <PTP_BufferFullCallback+0x3e>

08003474 <USBH_PTP_Init>:
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003474:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003478:	69db      	ldr	r3, [r3, #28]
  MTP_Handle->ptp.state = PTP_IDLE;
 800347a:	f503 52eb 	add.w	r2, r3, #7520	; 0x1d60
 800347e:	2000      	movs	r0, #0
 8003480:	7010      	strb	r0, [r2, #0]
  MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 8003482:	f641 5261 	movw	r2, #7521	; 0x1d61
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]
}
 800348a:	4770      	bx	lr

0800348c <USBH_PTP_SendRequest>:
{
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	460d      	mov	r5, r1
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003490:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003494:	69dc      	ldr	r4, [r3, #28]
  USBH_memset(&(MTP_Handle->ptp.op_container), 0, sizeof(PTP_OpContainerTypedef));
 8003496:	f641 5664 	movw	r6, #7524	; 0x1d64
 800349a:	2220      	movs	r2, #32
 800349c:	2100      	movs	r1, #0
 800349e:	19a0      	adds	r0, r4, r6
 80034a0:	f003 f960 	bl	8006764 <memset>
  MTP_Handle->ptp.op_container.length = PTP_USB_BULK_REQ_LEN - (sizeof(uint32_t) * (5U - req->Nparam));
 80034a4:	f895 3020 	ldrb.w	r3, [r5, #32]
 80034a8:	3303      	adds	r3, #3
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	51a3      	str	r3, [r4, r6]
  MTP_Handle->ptp.op_container.type = PTP_USB_CONTAINER_COMMAND;
 80034ae:	f641 5368 	movw	r3, #7528	; 0x1d68
 80034b2:	2201      	movs	r2, #1
 80034b4:	52e2      	strh	r2, [r4, r3]
  MTP_Handle->ptp.op_container.code = req->Code;
 80034b6:	882a      	ldrh	r2, [r5, #0]
 80034b8:	f641 536a 	movw	r3, #7530	; 0x1d6a
 80034bc:	52e2      	strh	r2, [r4, r3]
  MTP_Handle->ptp.op_container.trans_id = req->Transaction_ID;
 80034be:	68aa      	ldr	r2, [r5, #8]
 80034c0:	f641 536c 	movw	r3, #7532	; 0x1d6c
 80034c4:	50e2      	str	r2, [r4, r3]
  MTP_Handle->ptp.op_container.param1 = req->Param1;
 80034c6:	68ea      	ldr	r2, [r5, #12]
 80034c8:	f641 5370 	movw	r3, #7536	; 0x1d70
 80034cc:	50e2      	str	r2, [r4, r3]
  MTP_Handle->ptp.op_container.param2 = req->Param2;
 80034ce:	692a      	ldr	r2, [r5, #16]
 80034d0:	f641 5374 	movw	r3, #7540	; 0x1d74
 80034d4:	50e2      	str	r2, [r4, r3]
  MTP_Handle->ptp.op_container.param3 = req->Param3;
 80034d6:	696a      	ldr	r2, [r5, #20]
 80034d8:	f641 5378 	movw	r3, #7544	; 0x1d78
 80034dc:	50e2      	str	r2, [r4, r3]
  MTP_Handle->ptp.op_container.param4 = req->Param4;
 80034de:	69aa      	ldr	r2, [r5, #24]
 80034e0:	f641 537c 	movw	r3, #7548	; 0x1d7c
 80034e4:	50e2      	str	r2, [r4, r3]
  MTP_Handle->ptp.op_container.param5 = req->Param5;
 80034e6:	69eb      	ldr	r3, [r5, #28]
 80034e8:	f504 54ec 	add.w	r4, r4, #7552	; 0x1d80
 80034ec:	6023      	str	r3, [r4, #0]
}
 80034ee:	2000      	movs	r0, #0
 80034f0:	bd70      	pop	{r4, r5, r6, pc}

080034f2 <USBH_PTP_GetResponse>:
  MTP_HandleTypeDef  *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80034f2:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80034f6:	69db      	ldr	r3, [r3, #28]
  resp->Code = MTP_Handle->ptp.resp_container.code;
 80034f8:	f242 128a 	movw	r2, #8586	; 0x218a
 80034fc:	5a9a      	ldrh	r2, [r3, r2]
 80034fe:	800a      	strh	r2, [r1, #0]
  resp->SessionID = MTP_Handle->ptp.session_id;
 8003500:	f242 12a8 	movw	r2, #8616	; 0x21a8
 8003504:	589a      	ldr	r2, [r3, r2]
 8003506:	604a      	str	r2, [r1, #4]
  resp->Transaction_ID = MTP_Handle->ptp.resp_container.trans_id;
 8003508:	f242 128c 	movw	r2, #8588	; 0x218c
 800350c:	589a      	ldr	r2, [r3, r2]
 800350e:	608a      	str	r2, [r1, #8]
  resp->Param1 = MTP_Handle->ptp.resp_container.param1;
 8003510:	f242 1290 	movw	r2, #8592	; 0x2190
 8003514:	589a      	ldr	r2, [r3, r2]
 8003516:	60ca      	str	r2, [r1, #12]
  resp->Param2 = MTP_Handle->ptp.resp_container.param2;
 8003518:	f242 1294 	movw	r2, #8596	; 0x2194
 800351c:	589a      	ldr	r2, [r3, r2]
 800351e:	610a      	str	r2, [r1, #16]
  resp->Param3 = MTP_Handle->ptp.resp_container.param3;
 8003520:	f242 1298 	movw	r2, #8600	; 0x2198
 8003524:	589a      	ldr	r2, [r3, r2]
 8003526:	614a      	str	r2, [r1, #20]
  resp->Param4 = MTP_Handle->ptp.resp_container.param4;
 8003528:	f242 129c 	movw	r2, #8604	; 0x219c
 800352c:	589a      	ldr	r2, [r3, r2]
 800352e:	618a      	str	r2, [r1, #24]
  resp->Param5 = MTP_Handle->ptp.resp_container.param5;
 8003530:	f242 12a0 	movw	r2, #8608	; 0x21a0
 8003534:	589b      	ldr	r3, [r3, r2]
 8003536:	61cb      	str	r3, [r1, #28]
}
 8003538:	2000      	movs	r0, #0
 800353a:	4770      	bx	lr

0800353c <USBH_PTP_Process>:
{
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	b08c      	sub	sp, #48	; 0x30
 8003540:	4606      	mov	r6, r0
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003542:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003546:	69dd      	ldr	r5, [r3, #28]
  switch (MTP_Handle->ptp.state)
 8003548:	f505 53eb 	add.w	r3, r5, #7520	; 0x1d60
 800354c:	781c      	ldrb	r4, [r3, #0]
 800354e:	1e63      	subs	r3, r4, #1
 8003550:	2b08      	cmp	r3, #8
 8003552:	f200 81b3 	bhi.w	80038bc <USBH_PTP_Process+0x380>
 8003556:	e8df f013 	tbh	[pc, r3, lsl #1]
 800355a:	0009      	.short	0x0009
 800355c:	0064001c 	.word	0x0064001c
 8003560:	00ea0076 	.word	0x00ea0076
 8003564:	017200fb 	.word	0x017200fb
 8003568:	01ac0181 	.word	0x01ac0181
                        (uint8_t *)(void *) & (MTP_Handle->ptp.op_container),
 800356c:	f641 5164 	movw	r1, #7524	; 0x1d64
      USBH_BulkSendData(phost,
 8003570:	f641 532d 	movw	r3, #7469	; 0x1d2d
 8003574:	5ceb      	ldrb	r3, [r5, r3]
 8003576:	5a6a      	ldrh	r2, [r5, r1]
 8003578:	2001      	movs	r0, #1
 800357a:	9000      	str	r0, [sp, #0]
 800357c:	4429      	add	r1, r5
 800357e:	4630      	mov	r0, r6
 8003580:	f001 fa49 	bl	8004a16 <USBH_BulkSendData>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_WAIT_STATE;
 8003584:	f505 55eb 	add.w	r5, r5, #7520	; 0x1d60
 8003588:	2302      	movs	r3, #2
 800358a:	702b      	strb	r3, [r5, #0]
}
 800358c:	4620      	mov	r0, r4
 800358e:	b00c      	add	sp, #48	; 0x30
 8003590:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 8003592:	f641 532d 	movw	r3, #7469	; 0x1d2d
 8003596:	5ce9      	ldrb	r1, [r5, r3]
 8003598:	f003 f80c 	bl	80065b4 <USBH_LL_GetURBState>
 800359c:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 800359e:	2801      	cmp	r0, #1
 80035a0:	d005      	beq.n	80035ae <USBH_PTP_Process+0x72>
      else if (URB_Status == USBH_URB_NOTREADY)
 80035a2:	2802      	cmp	r0, #2
 80035a4:	d022      	beq.n	80035ec <USBH_PTP_Process+0xb0>
      else if (URB_Status == USBH_URB_STALL)
 80035a6:	2805      	cmp	r0, #5
 80035a8:	d02d      	beq.n	8003606 <USBH_PTP_Process+0xca>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80035aa:	2401      	movs	r4, #1
 80035ac:	e7ee      	b.n	800358c <USBH_PTP_Process+0x50>
        if (MTP_Handle->ptp.flags == PTP_DP_NODATA)
 80035ae:	f242 13ac 	movw	r3, #8620	; 0x21ac
 80035b2:	58eb      	ldr	r3, [r5, r3]
 80035b4:	b963      	cbnz	r3, 80035d0 <USBH_PTP_Process+0x94>
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 80035b6:	f505 55eb 	add.w	r5, r5, #7520	; 0x1d60
 80035ba:	2307      	movs	r3, #7
 80035bc:	702b      	strb	r3, [r5, #0]
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80035be:	2102      	movs	r1, #2
 80035c0:	f8c6 13e0 	str.w	r1, [r6, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80035c4:	2200      	movs	r2, #0
 80035c6:	f8d6 03d8 	ldr.w	r0, [r6, #984]	; 0x3d8
 80035ca:	f001 fb03 	bl	8004bd4 <osMessagePut>
 80035ce:	e7dd      	b.n	800358c <USBH_PTP_Process+0x50>
        else  if (MTP_Handle->ptp.flags == PTP_DP_SENDDATA)
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d006      	beq.n	80035e2 <USBH_PTP_Process+0xa6>
        else  if (MTP_Handle->ptp.flags == PTP_DP_GETDATA)
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d1f2      	bne.n	80035be <USBH_PTP_Process+0x82>
          MTP_Handle->ptp.state = PTP_DATA_IN_PHASE_STATE;
 80035d8:	f505 55eb 	add.w	r5, r5, #7520	; 0x1d60
 80035dc:	2305      	movs	r3, #5
 80035de:	702b      	strb	r3, [r5, #0]
 80035e0:	e7ed      	b.n	80035be <USBH_PTP_Process+0x82>
          MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 80035e2:	f505 55eb 	add.w	r5, r5, #7520	; 0x1d60
 80035e6:	2303      	movs	r3, #3
 80035e8:	702b      	strb	r3, [r5, #0]
 80035ea:	e7e8      	b.n	80035be <USBH_PTP_Process+0x82>
        MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 80035ec:	f505 55eb 	add.w	r5, r5, #7520	; 0x1d60
 80035f0:	2401      	movs	r4, #1
 80035f2:	702c      	strb	r4, [r5, #0]
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80035f4:	2102      	movs	r1, #2
 80035f6:	f8c6 13e0 	str.w	r1, [r6, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80035fa:	2200      	movs	r2, #0
 80035fc:	f8d6 03d8 	ldr.w	r0, [r6, #984]	; 0x3d8
 8003600:	f001 fae8 	bl	8004bd4 <osMessagePut>
 8003604:	e7c2      	b.n	800358c <USBH_PTP_Process+0x50>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8003606:	f505 55eb 	add.w	r5, r5, #7520	; 0x1d60
 800360a:	2309      	movs	r3, #9
 800360c:	702b      	strb	r3, [r5, #0]
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800360e:	2102      	movs	r1, #2
 8003610:	f8c6 13e0 	str.w	r1, [r6, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003614:	2200      	movs	r2, #0
 8003616:	f8d6 03d8 	ldr.w	r0, [r6, #984]	; 0x3d8
 800361a:	f001 fadb 	bl	8004bd4 <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800361e:	2401      	movs	r4, #1
 8003620:	e7b4      	b.n	800358c <USBH_PTP_Process+0x50>
      USBH_BulkSendData(phost,
 8003622:	f641 532d 	movw	r3, #7469	; 0x1d2d
 8003626:	5ceb      	ldrb	r3, [r5, r3]
 8003628:	f641 5232 	movw	r2, #7474	; 0x1d32
 800362c:	5aaa      	ldrh	r2, [r5, r2]
 800362e:	f242 11b0 	movw	r1, #8624	; 0x21b0
 8003632:	5869      	ldr	r1, [r5, r1]
 8003634:	2401      	movs	r4, #1
 8003636:	9400      	str	r4, [sp, #0]
 8003638:	f001 f9ed 	bl	8004a16 <USBH_BulkSendData>
      MTP_Handle->ptp.state  = PTP_DATA_OUT_PHASE_WAIT_STATE;
 800363c:	f505 55eb 	add.w	r5, r5, #7520	; 0x1d60
 8003640:	2304      	movs	r3, #4
 8003642:	702b      	strb	r3, [r5, #0]
      break;
 8003644:	e7a2      	b.n	800358c <USBH_PTP_Process+0x50>
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 8003646:	f641 532d 	movw	r3, #7469	; 0x1d2d
 800364a:	5ce9      	ldrb	r1, [r5, r3]
 800364c:	f002 ffb2 	bl	80065b4 <USBH_LL_GetURBState>
 8003650:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8003652:	2801      	cmp	r0, #1
 8003654:	d005      	beq.n	8003662 <USBH_PTP_Process+0x126>
      else if (URB_Status == USBH_URB_NOTREADY)
 8003656:	2802      	cmp	r0, #2
 8003658:	d04d      	beq.n	80036f6 <USBH_PTP_Process+0x1ba>
      else if (URB_Status == USBH_URB_STALL)
 800365a:	2805      	cmp	r0, #5
 800365c:	d059      	beq.n	8003712 <USBH_PTP_Process+0x1d6>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800365e:	2401      	movs	r4, #1
 8003660:	e794      	b.n	800358c <USBH_PTP_Process+0x50>
        if (MTP_Handle->ptp.data_length > MTP_Handle->DataOutEpSize)
 8003662:	f242 13b4 	movw	r3, #8628	; 0x21b4
 8003666:	58ea      	ldr	r2, [r5, r3]
 8003668:	f641 5332 	movw	r3, #7474	; 0x1d32
 800366c:	5aeb      	ldrh	r3, [r5, r3]
 800366e:	429a      	cmp	r2, r3
 8003670:	d91d      	bls.n	80036ae <USBH_PTP_Process+0x172>
          MTP_Handle->ptp.data_ptr += MTP_Handle->DataOutEpSize;
 8003672:	f242 10b0 	movw	r0, #8624	; 0x21b0
 8003676:	5829      	ldr	r1, [r5, r0]
 8003678:	4419      	add	r1, r3
 800367a:	5029      	str	r1, [r5, r0]
          MTP_Handle->ptp.data_length -= MTP_Handle->DataOutEpSize;
 800367c:	1ad2      	subs	r2, r2, r3
 800367e:	f242 11b4 	movw	r1, #8628	; 0x21b4
 8003682:	506a      	str	r2, [r5, r1]
          MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 8003684:	f242 12b8 	movw	r2, #8632	; 0x21b8
 8003688:	58a9      	ldr	r1, [r5, r2]
 800368a:	440b      	add	r3, r1
 800368c:	50ab      	str	r3, [r5, r2]
          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 800368e:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8003692:	d310      	bcc.n	80036b6 <USBH_PTP_Process+0x17a>
            PTP_BufferFullCallback(phost);
 8003694:	4630      	mov	r0, r6
 8003696:	f7ff fea9 	bl	80033ec <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 800369a:	f242 13b8 	movw	r3, #8632	; 0x21b8
 800369e:	2200      	movs	r2, #0
 80036a0:	50ea      	str	r2, [r5, r3]
            MTP_Handle->ptp.iteration++;
 80036a2:	f242 12bc 	movw	r2, #8636	; 0x21bc
 80036a6:	58ab      	ldr	r3, [r5, r2]
 80036a8:	3301      	adds	r3, #1
 80036aa:	50ab      	str	r3, [r5, r2]
 80036ac:	e003      	b.n	80036b6 <USBH_PTP_Process+0x17a>
          MTP_Handle->ptp.data_length = 0U;
 80036ae:	f242 13b4 	movw	r3, #8628	; 0x21b4
 80036b2:	2200      	movs	r2, #0
 80036b4:	50ea      	str	r2, [r5, r3]
        if (MTP_Handle->ptp.data_length > 0U)
 80036b6:	f242 13b4 	movw	r3, #8628	; 0x21b4
 80036ba:	58eb      	ldr	r3, [r5, r3]
 80036bc:	b963      	cbnz	r3, 80036d8 <USBH_PTP_Process+0x19c>
          MTP_Handle->ptp.state  = PTP_RESPONSE_STATE;
 80036be:	f505 55eb 	add.w	r5, r5, #7520	; 0x1d60
 80036c2:	2307      	movs	r3, #7
 80036c4:	702b      	strb	r3, [r5, #0]
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80036c6:	2102      	movs	r1, #2
 80036c8:	f8c6 13e0 	str.w	r1, [r6, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80036cc:	2200      	movs	r2, #0
 80036ce:	f8d6 03d8 	ldr.w	r0, [r6, #984]	; 0x3d8
 80036d2:	f001 fa7f 	bl	8004bd4 <osMessagePut>
 80036d6:	e759      	b.n	800358c <USBH_PTP_Process+0x50>
          USBH_BulkSendData(phost,
 80036d8:	f641 532d 	movw	r3, #7469	; 0x1d2d
 80036dc:	5ceb      	ldrb	r3, [r5, r3]
 80036de:	f641 5232 	movw	r2, #7474	; 0x1d32
 80036e2:	5aaa      	ldrh	r2, [r5, r2]
 80036e4:	f242 11b0 	movw	r1, #8624	; 0x21b0
 80036e8:	5869      	ldr	r1, [r5, r1]
 80036ea:	2001      	movs	r0, #1
 80036ec:	9000      	str	r0, [sp, #0]
 80036ee:	4630      	mov	r0, r6
 80036f0:	f001 f991 	bl	8004a16 <USBH_BulkSendData>
 80036f4:	e7e7      	b.n	80036c6 <USBH_PTP_Process+0x18a>
        MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 80036f6:	f505 55eb 	add.w	r5, r5, #7520	; 0x1d60
 80036fa:	2303      	movs	r3, #3
 80036fc:	702b      	strb	r3, [r5, #0]
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80036fe:	2102      	movs	r1, #2
 8003700:	f8c6 13e0 	str.w	r1, [r6, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003704:	2200      	movs	r2, #0
 8003706:	f8d6 03d8 	ldr.w	r0, [r6, #984]	; 0x3d8
 800370a:	f001 fa63 	bl	8004bd4 <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800370e:	2401      	movs	r4, #1
 8003710:	e73c      	b.n	800358c <USBH_PTP_Process+0x50>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8003712:	f505 55eb 	add.w	r5, r5, #7520	; 0x1d60
 8003716:	2309      	movs	r3, #9
 8003718:	702b      	strb	r3, [r5, #0]
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800371a:	2102      	movs	r1, #2
 800371c:	f8c6 13e0 	str.w	r1, [r6, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003720:	2200      	movs	r2, #0
 8003722:	f8d6 03d8 	ldr.w	r0, [r6, #984]	; 0x3d8
 8003726:	f001 fa55 	bl	8004bd4 <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800372a:	2401      	movs	r4, #1
 800372c:	e72e      	b.n	800358c <USBH_PTP_Process+0x50>
      USBH_BulkReceiveData(phost,
 800372e:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8003732:	5ceb      	ldrb	r3, [r5, r3]
 8003734:	f641 5234 	movw	r2, #7476	; 0x1d34
 8003738:	5aaa      	ldrh	r2, [r5, r2]
 800373a:	f242 11b0 	movw	r1, #8624	; 0x21b0
 800373e:	5869      	ldr	r1, [r5, r1]
 8003740:	f001 f97f 	bl	8004a42 <USBH_BulkReceiveData>
      MTP_Handle->ptp.state  = PTP_DATA_IN_PHASE_WAIT_STATE;
 8003744:	f505 55eb 	add.w	r5, r5, #7520	; 0x1d60
 8003748:	2306      	movs	r3, #6
 800374a:	702b      	strb	r3, [r5, #0]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800374c:	2401      	movs	r4, #1
      break;
 800374e:	e71d      	b.n	800358c <USBH_PTP_Process+0x50>
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 8003750:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8003754:	5ce9      	ldrb	r1, [r5, r3]
 8003756:	f002 ff2d 	bl	80065b4 <USBH_LL_GetURBState>
 800375a:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 800375c:	2801      	cmp	r0, #1
 800375e:	d003      	beq.n	8003768 <USBH_PTP_Process+0x22c>
      else if (URB_Status == USBH_URB_STALL)
 8003760:	2805      	cmp	r0, #5
 8003762:	d05e      	beq.n	8003822 <USBH_PTP_Process+0x2e6>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8003764:	2401      	movs	r4, #1
 8003766:	e711      	b.n	800358c <USBH_PTP_Process+0x50>
        len = USBH_LL_GetLastXferSize(phost, MTP_Handle->DataInPipe);
 8003768:	f641 532c 	movw	r3, #7468	; 0x1d2c
 800376c:	5ce9      	ldrb	r1, [r5, r3]
 800376e:	4630      	mov	r0, r6
 8003770:	f002 ff1a 	bl	80065a8 <USBH_LL_GetLastXferSize>
        if (MTP_Handle->ptp.data_packet_counter++ == 0U)
 8003774:	f505 5207 	add.w	r2, r5, #8640	; 0x21c0
 8003778:	6813      	ldr	r3, [r2, #0]
 800377a:	1c59      	adds	r1, r3, #1
 800377c:	6011      	str	r1, [r2, #0]
 800377e:	b953      	cbnz	r3, 8003796 <USBH_PTP_Process+0x25a>
          MTP_Handle->ptp.data_length = *(uint32_t *)(void *)(MTP_Handle->ptp.data_ptr);
 8003780:	f242 13b0 	movw	r3, #8624	; 0x21b0
 8003784:	58eb      	ldr	r3, [r5, r3]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	f242 13b4 	movw	r3, #8628	; 0x21b4
 800378c:	50ea      	str	r2, [r5, r3]
          MTP_Handle->ptp.iteration = 0U;
 800378e:	f242 13bc 	movw	r3, #8636	; 0x21bc
 8003792:	2200      	movs	r2, #0
 8003794:	50ea      	str	r2, [r5, r3]
        if ((len >=  MTP_Handle->DataInEpSize) && (MTP_Handle->ptp.data_length > 0U))
 8003796:	f641 5334 	movw	r3, #7476	; 0x1d34
 800379a:	5aeb      	ldrh	r3, [r5, r3]
 800379c:	4283      	cmp	r3, r0
 800379e:	d82e      	bhi.n	80037fe <USBH_PTP_Process+0x2c2>
 80037a0:	f242 13b4 	movw	r3, #8628	; 0x21b4
 80037a4:	58eb      	ldr	r3, [r5, r3]
 80037a6:	b353      	cbz	r3, 80037fe <USBH_PTP_Process+0x2c2>
          MTP_Handle->ptp.data_ptr += len;
 80037a8:	f242 11b0 	movw	r1, #8624	; 0x21b0
 80037ac:	586a      	ldr	r2, [r5, r1]
 80037ae:	4402      	add	r2, r0
 80037b0:	506a      	str	r2, [r5, r1]
          MTP_Handle->ptp.data_length -= len;
 80037b2:	1a1b      	subs	r3, r3, r0
 80037b4:	f242 12b4 	movw	r2, #8628	; 0x21b4
 80037b8:	50ab      	str	r3, [r5, r2]
          MTP_Handle->ptp.data_packet += len;
 80037ba:	f242 12b8 	movw	r2, #8632	; 0x21b8
 80037be:	58ab      	ldr	r3, [r5, r2]
 80037c0:	4418      	add	r0, r3
 80037c2:	50a8      	str	r0, [r5, r2]
          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 80037c4:	f5b0 7f7d 	cmp.w	r0, #1012	; 0x3f4
 80037c8:	d20c      	bcs.n	80037e4 <USBH_PTP_Process+0x2a8>
          USBH_BulkReceiveData(phost,
 80037ca:	f641 532c 	movw	r3, #7468	; 0x1d2c
 80037ce:	5ceb      	ldrb	r3, [r5, r3]
 80037d0:	f641 5234 	movw	r2, #7476	; 0x1d34
 80037d4:	5aaa      	ldrh	r2, [r5, r2]
 80037d6:	f242 11b0 	movw	r1, #8624	; 0x21b0
 80037da:	5869      	ldr	r1, [r5, r1]
 80037dc:	4630      	mov	r0, r6
 80037de:	f001 f930 	bl	8004a42 <USBH_BulkReceiveData>
 80037e2:	e6d3      	b.n	800358c <USBH_PTP_Process+0x50>
            PTP_BufferFullCallback(phost);
 80037e4:	4630      	mov	r0, r6
 80037e6:	f7ff fe01 	bl	80033ec <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 80037ea:	f242 13b8 	movw	r3, #8632	; 0x21b8
 80037ee:	2200      	movs	r2, #0
 80037f0:	50ea      	str	r2, [r5, r3]
            MTP_Handle->ptp.iteration++;
 80037f2:	f242 12bc 	movw	r2, #8636	; 0x21bc
 80037f6:	58ab      	ldr	r3, [r5, r2]
 80037f8:	3301      	adds	r3, #1
 80037fa:	50ab      	str	r3, [r5, r2]
 80037fc:	e7e5      	b.n	80037ca <USBH_PTP_Process+0x28e>
          MTP_Handle->ptp.data_length -= len;
 80037fe:	f242 12b4 	movw	r2, #8628	; 0x21b4
 8003802:	58ab      	ldr	r3, [r5, r2]
 8003804:	1a1b      	subs	r3, r3, r0
 8003806:	50ab      	str	r3, [r5, r2]
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 8003808:	f505 55eb 	add.w	r5, r5, #7520	; 0x1d60
 800380c:	2307      	movs	r3, #7
 800380e:	702b      	strb	r3, [r5, #0]
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8003810:	2102      	movs	r1, #2
 8003812:	f8c6 13e0 	str.w	r1, [r6, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003816:	2200      	movs	r2, #0
 8003818:	f8d6 03d8 	ldr.w	r0, [r6, #984]	; 0x3d8
 800381c:	f001 f9da 	bl	8004bd4 <osMessagePut>
 8003820:	e6b4      	b.n	800358c <USBH_PTP_Process+0x50>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8003822:	f505 55eb 	add.w	r5, r5, #7520	; 0x1d60
 8003826:	2309      	movs	r3, #9
 8003828:	702b      	strb	r3, [r5, #0]
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800382a:	2102      	movs	r1, #2
 800382c:	f8c6 13e0 	str.w	r1, [r6, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003830:	2200      	movs	r2, #0
 8003832:	f8d6 03d8 	ldr.w	r0, [r6, #984]	; 0x3d8
 8003836:	f001 f9cd 	bl	8004bd4 <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800383a:	2401      	movs	r4, #1
 800383c:	e6a6      	b.n	800358c <USBH_PTP_Process+0x50>
      USBH_BulkReceiveData(phost,
 800383e:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8003842:	5ceb      	ldrb	r3, [r5, r3]
 8003844:	223f      	movs	r2, #63	; 0x3f
 8003846:	f505 5106 	add.w	r1, r5, #8576	; 0x2180
 800384a:	3104      	adds	r1, #4
 800384c:	f001 f8f9 	bl	8004a42 <USBH_BulkReceiveData>
      MTP_Handle->ptp.state  = PTP_RESPONSE_WAIT_STATE;
 8003850:	f505 55eb 	add.w	r5, r5, #7520	; 0x1d60
 8003854:	2308      	movs	r3, #8
 8003856:	702b      	strb	r3, [r5, #0]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8003858:	2401      	movs	r4, #1
      break;
 800385a:	e697      	b.n	800358c <USBH_PTP_Process+0x50>
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 800385c:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8003860:	5ce9      	ldrb	r1, [r5, r3]
 8003862:	f002 fea7 	bl	80065b4 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8003866:	2801      	cmp	r0, #1
 8003868:	d003      	beq.n	8003872 <USBH_PTP_Process+0x336>
      else if (URB_Status == USBH_URB_STALL)
 800386a:	2805      	cmp	r0, #5
 800386c:	d013      	beq.n	8003896 <USBH_PTP_Process+0x35a>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800386e:	2401      	movs	r4, #1
 8003870:	e68c      	b.n	800358c <USBH_PTP_Process+0x50>
        USBH_PTP_GetResponse(phost, &ptp_container);
 8003872:	a903      	add	r1, sp, #12
 8003874:	4630      	mov	r0, r6
 8003876:	f7ff fe3c 	bl	80034f2 <USBH_PTP_GetResponse>
        if (ptp_container.Code == PTP_RC_OK)
 800387a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800387e:	f242 0301 	movw	r3, #8193	; 0x2001
 8003882:	429a      	cmp	r2, r3
 8003884:	d005      	beq.n	8003892 <USBH_PTP_Process+0x356>
          status = USBH_FAIL;
 8003886:	2402      	movs	r4, #2
        MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 8003888:	f641 5361 	movw	r3, #7521	; 0x1d61
 800388c:	2201      	movs	r2, #1
 800388e:	54ea      	strb	r2, [r5, r3]
 8003890:	e67c      	b.n	800358c <USBH_PTP_Process+0x50>
          status = USBH_OK;
 8003892:	2400      	movs	r4, #0
 8003894:	e7f8      	b.n	8003888 <USBH_PTP_Process+0x34c>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8003896:	f505 55eb 	add.w	r5, r5, #7520	; 0x1d60
 800389a:	2309      	movs	r3, #9
 800389c:	702b      	strb	r3, [r5, #0]
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800389e:	2102      	movs	r1, #2
 80038a0:	f8c6 13e0 	str.w	r1, [r6, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8d6 03d8 	ldr.w	r0, [r6, #984]	; 0x3d8
 80038aa:	f001 f993 	bl	8004bd4 <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80038ae:	2401      	movs	r4, #1
 80038b0:	e66c      	b.n	800358c <USBH_PTP_Process+0x50>
      MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 80038b2:	2401      	movs	r4, #1
 80038b4:	f641 5361 	movw	r3, #7521	; 0x1d61
 80038b8:	54ec      	strb	r4, [r5, r3]
      break;
 80038ba:	e667      	b.n	800358c <USBH_PTP_Process+0x50>
  switch (MTP_Handle->ptp.state)
 80038bc:	2401      	movs	r4, #1
 80038be:	e665      	b.n	800358c <USBH_PTP_Process+0x50>

080038c0 <USBH_PTP_OpenSession>:
  * @param  phost: Host handle
  * @param  session: Session ID (MUST BE > 0U)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_OpenSession(USBH_HandleTypeDef *phost, uint32_t session)
{
 80038c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c4:	b08a      	sub	sp, #40	; 0x28
 80038c6:	4606      	mov	r6, r0
  USBH_StatusTypeDef   status = USBH_BUSY;
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80038c8:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80038cc:	69df      	ldr	r7, [r3, #28]
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 80038ce:	f641 5361 	movw	r3, #7521	; 0x1d61
 80038d2:	5cfc      	ldrb	r4, [r7, r3]
 80038d4:	2c01      	cmp	r4, #1
 80038d6:	d006      	beq.n	80038e6 <USBH_PTP_OpenSession+0x26>
 80038d8:	2c02      	cmp	r4, #2
 80038da:	d02e      	beq.n	800393a <USBH_PTP_OpenSession+0x7a>
 80038dc:	2401      	movs	r4, #1

    default:
      break;
  }
  return status;
}
 80038de:	4620      	mov	r0, r4
 80038e0:	b00a      	add	sp, #40	; 0x28
 80038e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MTP_Handle->ptp.session_id = session;
 80038e6:	f242 13a8 	movw	r3, #8616	; 0x21a8
 80038ea:	50f9      	str	r1, [r7, r3]
      MTP_Handle->ptp.flags = PTP_DP_NODATA;
 80038ec:	f04f 0800 	mov.w	r8, #0
 80038f0:	f242 13ac 	movw	r3, #8620	; 0x21ac
 80038f4:	f847 8003 	str.w	r8, [r7, r3]
      ptp_container.Code = PTP_OC_OpenSession;
 80038f8:	f241 0302 	movw	r3, #4098	; 0x1002
 80038fc:	f8ad 3004 	strh.w	r3, [sp, #4]
      ptp_container.SessionID = session;
 8003900:	9102      	str	r1, [sp, #8]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 8003902:	2501      	movs	r5, #1
 8003904:	f242 13a4 	movw	r3, #8612	; 0x21a4
 8003908:	50fd      	str	r5, [r7, r3]
 800390a:	f8cd 800c 	str.w	r8, [sp, #12]
      ptp_container.Param1 = session;
 800390e:	9104      	str	r1, [sp, #16]
      ptp_container.Nparam = 1U;
 8003910:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
      USBH_PTP_SendRequest(phost, &ptp_container);
 8003914:	a901      	add	r1, sp, #4
 8003916:	f7ff fdb9 	bl	800348c <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800391a:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800391e:	701d      	strb	r5, [r3, #0]
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8003920:	f641 5361 	movw	r3, #7521	; 0x1d61
 8003924:	2202      	movs	r2, #2
 8003926:	54fa      	strb	r2, [r7, r3]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003928:	2105      	movs	r1, #5
 800392a:	f8c6 13e0 	str.w	r1, [r6, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800392e:	4642      	mov	r2, r8
 8003930:	f8d6 03d8 	ldr.w	r0, [r6, #984]	; 0x3d8
 8003934:	f001 f94e 	bl	8004bd4 <osMessagePut>
      break;
 8003938:	e7d1      	b.n	80038de <USBH_PTP_OpenSession+0x1e>
      status = USBH_PTP_Process(phost);
 800393a:	f7ff fdff 	bl	800353c <USBH_PTP_Process>
 800393e:	4604      	mov	r4, r0
      break;
 8003940:	e7cd      	b.n	80038de <USBH_PTP_OpenSession+0x1e>

08003942 <USBH_PTP_GetDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 8003942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003946:	b08a      	sub	sp, #40	; 0x28
 8003948:	4605      	mov	r5, r0
  USBH_StatusTypeDef status = USBH_BUSY;
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800394a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800394e:	69dc      	ldr	r4, [r3, #28]
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8003950:	f641 5361 	movw	r3, #7521	; 0x1d61
 8003954:	5ce6      	ldrb	r6, [r4, r3]
 8003956:	2e01      	cmp	r6, #1
 8003958:	d007      	beq.n	800396a <USBH_PTP_GetDeviceInfo+0x28>
 800395a:	460f      	mov	r7, r1
 800395c:	2e02      	cmp	r6, #2
 800395e:	d03e      	beq.n	80039de <USBH_PTP_GetDeviceInfo+0x9c>
 8003960:	2601      	movs	r6, #1

    default:
      break;
  }
  return status;
}
 8003962:	4630      	mov	r0, r6
 8003964:	b00a      	add	sp, #40	; 0x28
 8003966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800396a:	f04f 0802 	mov.w	r8, #2
 800396e:	f242 13ac 	movw	r3, #8620	; 0x21ac
 8003972:	f844 8003 	str.w	r8, [r4, r3]
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 8003976:	f504 53ec 	add.w	r3, r4, #7552	; 0x1d80
 800397a:	3304      	adds	r3, #4
 800397c:	f242 12b0 	movw	r2, #8624	; 0x21b0
 8003980:	50a3      	str	r3, [r4, r2]
      MTP_Handle->ptp.data_length = 0U;
 8003982:	2700      	movs	r7, #0
 8003984:	f242 13b4 	movw	r3, #8628	; 0x21b4
 8003988:	50e7      	str	r7, [r4, r3]
      MTP_Handle->ptp.data_packet_counter = 0U;
 800398a:	f504 5307 	add.w	r3, r4, #8640	; 0x21c0
 800398e:	601f      	str	r7, [r3, #0]
      MTP_Handle->ptp.data_packet = 0U;
 8003990:	f242 13b8 	movw	r3, #8632	; 0x21b8
 8003994:	50e7      	str	r7, [r4, r3]
      ptp_container.Code = PTP_OC_GetDeviceInfo;
 8003996:	f241 0301 	movw	r3, #4097	; 0x1001
 800399a:	f8ad 3004 	strh.w	r3, [sp, #4]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800399e:	f242 13a8 	movw	r3, #8616	; 0x21a8
 80039a2:	58e3      	ldr	r3, [r4, r3]
 80039a4:	9302      	str	r3, [sp, #8]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 80039a6:	f242 12a4 	movw	r2, #8612	; 0x21a4
 80039aa:	58a3      	ldr	r3, [r4, r2]
 80039ac:	1c59      	adds	r1, r3, #1
 80039ae:	50a1      	str	r1, [r4, r2]
 80039b0:	9303      	str	r3, [sp, #12]
      ptp_container.Nparam = 0U;
 80039b2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
      USBH_PTP_SendRequest(phost, &ptp_container);
 80039b6:	a901      	add	r1, sp, #4
 80039b8:	f7ff fd68 	bl	800348c <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 80039bc:	f504 53eb 	add.w	r3, r4, #7520	; 0x1d60
 80039c0:	2201      	movs	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 80039c4:	f641 5361 	movw	r3, #7521	; 0x1d61
 80039c8:	f804 8003 	strb.w	r8, [r4, r3]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80039cc:	2105      	movs	r1, #5
 80039ce:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80039d2:	463a      	mov	r2, r7
 80039d4:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 80039d8:	f001 f8fc 	bl	8004bd4 <osMessagePut>
      break;
 80039dc:	e7c1      	b.n	8003962 <USBH_PTP_GetDeviceInfo+0x20>
      status = USBH_PTP_Process(phost);
 80039de:	f7ff fdad 	bl	800353c <USBH_PTP_Process>
      if (status == USBH_OK)
 80039e2:	4606      	mov	r6, r0
 80039e4:	2800      	cmp	r0, #0
 80039e6:	d1bc      	bne.n	8003962 <USBH_PTP_GetDeviceInfo+0x20>
        PTP_DecodeDeviceInfo(phost, dev_info);
 80039e8:	4639      	mov	r1, r7
 80039ea:	4628      	mov	r0, r5
 80039ec:	f7ff fc1a 	bl	8003224 <PTP_DecodeDeviceInfo>
 80039f0:	e7b7      	b.n	8003962 <USBH_PTP_GetDeviceInfo+0x20>

080039f2 <USBH_PTP_GetStorageIds>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageIds(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *storage_ids)
{
 80039f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039f6:	b08a      	sub	sp, #40	; 0x28
 80039f8:	4605      	mov	r5, r0
  USBH_StatusTypeDef status = USBH_BUSY;
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80039fa:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80039fe:	69dc      	ldr	r4, [r3, #28]
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8003a00:	f641 5361 	movw	r3, #7521	; 0x1d61
 8003a04:	5ce6      	ldrb	r6, [r4, r3]
 8003a06:	2e01      	cmp	r6, #1
 8003a08:	d007      	beq.n	8003a1a <USBH_PTP_GetStorageIds+0x28>
 8003a0a:	460f      	mov	r7, r1
 8003a0c:	2e02      	cmp	r6, #2
 8003a0e:	d03e      	beq.n	8003a8e <USBH_PTP_GetStorageIds+0x9c>
 8003a10:	2601      	movs	r6, #1

    default:
      break;
  }
  return status;
}
 8003a12:	4630      	mov	r0, r6
 8003a14:	b00a      	add	sp, #40	; 0x28
 8003a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8003a1a:	f04f 0802 	mov.w	r8, #2
 8003a1e:	f242 13ac 	movw	r3, #8620	; 0x21ac
 8003a22:	f844 8003 	str.w	r8, [r4, r3]
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 8003a26:	f504 53ec 	add.w	r3, r4, #7552	; 0x1d80
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	f242 12b0 	movw	r2, #8624	; 0x21b0
 8003a30:	50a3      	str	r3, [r4, r2]
      MTP_Handle->ptp.data_length = 0U;
 8003a32:	2700      	movs	r7, #0
 8003a34:	f242 13b4 	movw	r3, #8628	; 0x21b4
 8003a38:	50e7      	str	r7, [r4, r3]
      MTP_Handle->ptp.data_packet_counter = 0U;
 8003a3a:	f504 5307 	add.w	r3, r4, #8640	; 0x21c0
 8003a3e:	601f      	str	r7, [r3, #0]
      MTP_Handle->ptp.data_packet = 0U;
 8003a40:	f242 13b8 	movw	r3, #8632	; 0x21b8
 8003a44:	50e7      	str	r7, [r4, r3]
      ptp_container.Code = PTP_OC_GetStorageIDs;
 8003a46:	f241 0304 	movw	r3, #4100	; 0x1004
 8003a4a:	f8ad 3004 	strh.w	r3, [sp, #4]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8003a4e:	f242 13a8 	movw	r3, #8616	; 0x21a8
 8003a52:	58e3      	ldr	r3, [r4, r3]
 8003a54:	9302      	str	r3, [sp, #8]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 8003a56:	f242 12a4 	movw	r2, #8612	; 0x21a4
 8003a5a:	58a3      	ldr	r3, [r4, r2]
 8003a5c:	1c59      	adds	r1, r3, #1
 8003a5e:	50a1      	str	r1, [r4, r2]
 8003a60:	9303      	str	r3, [sp, #12]
      ptp_container.Nparam = 0U;
 8003a62:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
      USBH_PTP_SendRequest(phost, &ptp_container);
 8003a66:	a901      	add	r1, sp, #4
 8003a68:	f7ff fd10 	bl	800348c <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8003a6c:	f504 53eb 	add.w	r3, r4, #7520	; 0x1d60
 8003a70:	2201      	movs	r2, #1
 8003a72:	701a      	strb	r2, [r3, #0]
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8003a74:	f641 5361 	movw	r3, #7521	; 0x1d61
 8003a78:	f804 8003 	strb.w	r8, [r4, r3]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003a7c:	2105      	movs	r1, #5
 8003a7e:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003a82:	463a      	mov	r2, r7
 8003a84:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 8003a88:	f001 f8a4 	bl	8004bd4 <osMessagePut>
      break;
 8003a8c:	e7c1      	b.n	8003a12 <USBH_PTP_GetStorageIds+0x20>
      status = USBH_PTP_Process(phost);
 8003a8e:	f7ff fd55 	bl	800353c <USBH_PTP_Process>
      if (status == USBH_OK)
 8003a92:	4606      	mov	r6, r0
 8003a94:	2800      	cmp	r0, #0
 8003a96:	d1bc      	bne.n	8003a12 <USBH_PTP_GetStorageIds+0x20>
        PTP_GetStorageIDs(phost, storage_ids);
 8003a98:	4639      	mov	r1, r7
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f7ff fc98 	bl	80033d0 <PTP_GetStorageIDs>
 8003aa0:	e7b7      	b.n	8003a12 <USBH_PTP_GetStorageIds+0x20>

08003aa2 <USBH_PTP_GetStorageInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageInfo(USBH_HandleTypeDef *phost,
                                           uint32_t storage_id,
                                           PTP_StorageInfoTypedef *storage_info)
{
 8003aa2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003aa6:	b08b      	sub	sp, #44	; 0x2c
 8003aa8:	4605      	mov	r5, r0
 8003aaa:	4688      	mov	r8, r1
  USBH_StatusTypeDef   status = USBH_BUSY;
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003aac:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003ab0:	69dc      	ldr	r4, [r3, #28]
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8003ab2:	f641 5361 	movw	r3, #7521	; 0x1d61
 8003ab6:	5ce6      	ldrb	r6, [r4, r3]
 8003ab8:	2e01      	cmp	r6, #1
 8003aba:	d007      	beq.n	8003acc <USBH_PTP_GetStorageInfo+0x2a>
 8003abc:	4617      	mov	r7, r2
 8003abe:	2e02      	cmp	r6, #2
 8003ac0:	d042      	beq.n	8003b48 <USBH_PTP_GetStorageInfo+0xa6>
 8003ac2:	2601      	movs	r6, #1

    default:
      break;
  }
  return status;
}
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	b00b      	add	sp, #44	; 0x2c
 8003ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8003acc:	f04f 0902 	mov.w	r9, #2
 8003ad0:	f242 13ac 	movw	r3, #8620	; 0x21ac
 8003ad4:	f844 9003 	str.w	r9, [r4, r3]
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 8003ad8:	f504 53ec 	add.w	r3, r4, #7552	; 0x1d80
 8003adc:	3304      	adds	r3, #4
 8003ade:	f242 12b0 	movw	r2, #8624	; 0x21b0
 8003ae2:	50a3      	str	r3, [r4, r2]
      MTP_Handle->ptp.data_length = 0U;
 8003ae4:	2700      	movs	r7, #0
 8003ae6:	f242 13b4 	movw	r3, #8628	; 0x21b4
 8003aea:	50e7      	str	r7, [r4, r3]
      MTP_Handle->ptp.data_packet_counter = 0U;
 8003aec:	f504 5307 	add.w	r3, r4, #8640	; 0x21c0
 8003af0:	601f      	str	r7, [r3, #0]
      MTP_Handle->ptp.data_packet = 0U;
 8003af2:	f242 13b8 	movw	r3, #8632	; 0x21b8
 8003af6:	50e7      	str	r7, [r4, r3]
      ptp_container.Code = PTP_OC_GetStorageInfo;
 8003af8:	f241 0305 	movw	r3, #4101	; 0x1005
 8003afc:	f8ad 3004 	strh.w	r3, [sp, #4]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8003b00:	f242 13a8 	movw	r3, #8616	; 0x21a8
 8003b04:	58e3      	ldr	r3, [r4, r3]
 8003b06:	9302      	str	r3, [sp, #8]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 8003b08:	f242 12a4 	movw	r2, #8612	; 0x21a4
 8003b0c:	58a3      	ldr	r3, [r4, r2]
 8003b0e:	1c59      	adds	r1, r3, #1
 8003b10:	50a1      	str	r1, [r4, r2]
 8003b12:	9303      	str	r3, [sp, #12]
      ptp_container.Param1 = storage_id;
 8003b14:	f8cd 8010 	str.w	r8, [sp, #16]
      ptp_container.Nparam = 1U;
 8003b18:	f04f 0801 	mov.w	r8, #1
 8003b1c:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
      USBH_PTP_SendRequest(phost, &ptp_container);
 8003b20:	a901      	add	r1, sp, #4
 8003b22:	f7ff fcb3 	bl	800348c <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8003b26:	f504 53eb 	add.w	r3, r4, #7520	; 0x1d60
 8003b2a:	f883 8000 	strb.w	r8, [r3]
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8003b2e:	f641 5361 	movw	r3, #7521	; 0x1d61
 8003b32:	f804 9003 	strb.w	r9, [r4, r3]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003b36:	2105      	movs	r1, #5
 8003b38:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003b3c:	463a      	mov	r2, r7
 8003b3e:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 8003b42:	f001 f847 	bl	8004bd4 <osMessagePut>
      break;
 8003b46:	e7bd      	b.n	8003ac4 <USBH_PTP_GetStorageInfo+0x22>
      status = USBH_PTP_Process(phost);
 8003b48:	f7ff fcf8 	bl	800353c <USBH_PTP_Process>
      if (status == USBH_OK)
 8003b4c:	4606      	mov	r6, r0
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	d1b8      	bne.n	8003ac4 <USBH_PTP_GetStorageInfo+0x22>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
 8003b52:	463a      	mov	r2, r7
 8003b54:	4641      	mov	r1, r8
 8003b56:	4628      	mov	r0, r5
 8003b58:	f7ff faaf 	bl	80030ba <PTP_GetStorageInfo>
 8003b5c:	e7b2      	b.n	8003ac4 <USBH_PTP_GetStorageInfo+0x22>

08003b5e <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8003b5e:	b410      	push	{r4}
 8003b60:	4604      	mov	r4, r0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	e006      	b.n	8003b74 <DeInitStateMachine+0x16>
  {
    phost->Pipes[i] = 0U;
 8003b66:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8003b6a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003b6e:	2100      	movs	r1, #0
 8003b70:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8003b72:	3301      	adds	r3, #1
 8003b74:	2b0e      	cmp	r3, #14
 8003b76:	d9f6      	bls.n	8003b66 <DeInitStateMachine+0x8>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7e:	d205      	bcs.n	8003b8c <DeInitStateMachine+0x2e>
  {
    phost->device.Data[i] = 0U;
 8003b80:	18e2      	adds	r2, r4, r3
 8003b82:	2100      	movs	r1, #0
 8003b84:	f882 111c 	strb.w	r1, [r2, #284]	; 0x11c
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8003b88:	3301      	adds	r3, #1
 8003b8a:	e7f6      	b.n	8003b7a <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	7020      	strb	r0, [r4, #0]
  phost->EnumState = ENUM_IDLE;
 8003b90:	7060      	strb	r0, [r4, #1]
  phost->RequestState = CMD_SEND;
 8003b92:	2301      	movs	r3, #1
 8003b94:	70a3      	strb	r3, [r4, #2]
  phost->Timer = 0U;
 8003b96:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8003b9a:	7623      	strb	r3, [r4, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8003b9c:	2240      	movs	r2, #64	; 0x40
 8003b9e:	71a2      	strb	r2, [r4, #6]
  phost->Control.errorcount = 0U;
 8003ba0:	7660      	strb	r0, [r4, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003ba2:	f884 031c 	strb.w	r0, [r4, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8003ba6:	f884 331d 	strb.w	r3, [r4, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8003baa:	f884 031f 	strb.w	r0, [r4, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8003bae:	f884 031e 	strb.w	r0, [r4, #798]	; 0x31e

  return USBH_OK;
}
 8003bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8003bb8:	b508      	push	{r3, lr}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003bba:	7803      	ldrb	r3, [r0, #0]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b0b      	cmp	r3, #11
 8003bc0:	d000      	beq.n	8003bc4 <USBH_HandleSof+0xc>
  {
    phost->pActiveClass->SOFProcess(phost);
  }
}
 8003bc2:	bd08      	pop	{r3, pc}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003bc4:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0fa      	beq.n	8003bc2 <USBH_HandleSof+0xa>
    phost->pActiveClass->SOFProcess(phost);
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	4798      	blx	r3
}
 8003bd0:	e7f7      	b.n	8003bc2 <USBH_HandleSof+0xa>

08003bd2 <USBH_HandleEnum>:
{
 8003bd2:	b570      	push	{r4, r5, r6, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	4604      	mov	r4, r0
  switch (phost->EnumState)
 8003bd8:	7845      	ldrb	r5, [r0, #1]
 8003bda:	2d07      	cmp	r5, #7
 8003bdc:	f200 8154 	bhi.w	8003e88 <USBH_HandleEnum+0x2b6>
 8003be0:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003be4:	00480008 	.word	0x00480008
 8003be8:	009a0069 	.word	0x009a0069
 8003bec:	00e500bf 	.word	0x00e500bf
 8003bf0:	013f0116 	.word	0x013f0116
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8003bf4:	2108      	movs	r1, #8
 8003bf6:	f000 fe5a 	bl	80048ae <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8003bfa:	b118      	cbz	r0, 8003c04 <USBH_HandleEnum+0x32>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003bfc:	2803      	cmp	r0, #3
 8003bfe:	d021      	beq.n	8003c44 <USBH_HandleEnum+0x72>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003c00:	2501      	movs	r5, #1
 8003c02:	e131      	b.n	8003e68 <USBH_HandleEnum+0x296>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003c04:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 8003c08:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003c0a:	2501      	movs	r5, #1
 8003c0c:	7065      	strb	r5, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8003c0e:	9302      	str	r3, [sp, #8]
 8003c10:	2600      	movs	r6, #0
 8003c12:	9601      	str	r6, [sp, #4]
 8003c14:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	7921      	ldrb	r1, [r4, #4]
 8003c22:	4620      	mov	r0, r4
 8003c24:	f000 ff40 	bl	8004aa8 <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8003c28:	79a3      	ldrb	r3, [r4, #6]
 8003c2a:	9302      	str	r3, [sp, #8]
 8003c2c:	9601      	str	r6, [sp, #4]
 8003c2e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003c38:	4632      	mov	r2, r6
 8003c3a:	7961      	ldrb	r1, [r4, #5]
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f000 ff33 	bl	8004aa8 <USBH_OpenPipe>
 8003c42:	e111      	b.n	8003e68 <USBH_HandleEnum+0x296>
        phost->device.EnumCnt++;
 8003c44:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003c48:	3301      	adds	r3, #1
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d903      	bls.n	8003c5c <USBH_HandleEnum+0x8a>
          phost->gState = HOST_ABORT_STATE;
 8003c54:	230d      	movs	r3, #13
 8003c56:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003c58:	2501      	movs	r5, #1
 8003c5a:	e105      	b.n	8003e68 <USBH_HandleEnum+0x296>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8003c5c:	7961      	ldrb	r1, [r4, #5]
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f000 ff4a 	bl	8004af8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8003c64:	7921      	ldrb	r1, [r4, #4]
 8003c66:	4620      	mov	r0, r4
 8003c68:	f000 ff46 	bl	8004af8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003c70:	2501      	movs	r5, #1
 8003c72:	e0f9      	b.n	8003e68 <USBH_HandleEnum+0x296>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8003c74:	2112      	movs	r1, #18
 8003c76:	f000 fe1a 	bl	80048ae <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8003c7a:	b910      	cbnz	r0, 8003c82 <USBH_HandleEnum+0xb0>
        phost->EnumState = ENUM_SET_ADDR;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	7063      	strb	r3, [r4, #1]
 8003c80:	e0f2      	b.n	8003e68 <USBH_HandleEnum+0x296>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003c82:	2803      	cmp	r0, #3
 8003c84:	f040 80f0 	bne.w	8003e68 <USBH_HandleEnum+0x296>
        phost->device.EnumCnt++;
 8003c88:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d902      	bls.n	8003c9e <USBH_HandleEnum+0xcc>
          phost->gState = HOST_ABORT_STATE;
 8003c98:	230d      	movs	r3, #13
 8003c9a:	7023      	strb	r3, [r4, #0]
 8003c9c:	e0e4      	b.n	8003e68 <USBH_HandleEnum+0x296>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8003c9e:	7961      	ldrb	r1, [r4, #5]
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f000 ff29 	bl	8004af8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8003ca6:	7921      	ldrb	r1, [r4, #4]
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f000 ff25 	bl	8004af8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8003cb2:	7023      	strb	r3, [r4, #0]
 8003cb4:	e0d8      	b.n	8003e68 <USBH_HandleEnum+0x296>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	f000 fe43 	bl	8004942 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 8003cbc:	b118      	cbz	r0, 8003cc6 <USBH_HandleEnum+0xf4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003cbe:	2803      	cmp	r0, #3
 8003cc0:	d024      	beq.n	8003d0c <USBH_HandleEnum+0x13a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003cc2:	2501      	movs	r5, #1
 8003cc4:	e0d0      	b.n	8003e68 <USBH_HandleEnum+0x296>
        USBH_Delay(2U);
 8003cc6:	2002      	movs	r0, #2
 8003cc8:	f002 fc9d 	bl	8006606 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8003ccc:	2501      	movs	r5, #1
 8003cce:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        phost->EnumState = ENUM_GET_CFG_DESC;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8003cd6:	79a3      	ldrb	r3, [r4, #6]
 8003cd8:	9302      	str	r3, [sp, #8]
 8003cda:	2600      	movs	r6, #0
 8003cdc:	9601      	str	r6, [sp, #4]
 8003cde:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	462b      	mov	r3, r5
 8003ce6:	2280      	movs	r2, #128	; 0x80
 8003ce8:	7921      	ldrb	r1, [r4, #4]
 8003cea:	4620      	mov	r0, r4
 8003cec:	f000 fedc 	bl	8004aa8 <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8003cf0:	79a3      	ldrb	r3, [r4, #6]
 8003cf2:	9302      	str	r3, [sp, #8]
 8003cf4:	9601      	str	r6, [sp, #4]
 8003cf6:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003d00:	4632      	mov	r2, r6
 8003d02:	7961      	ldrb	r1, [r4, #5]
 8003d04:	4620      	mov	r0, r4
 8003d06:	f000 fecf 	bl	8004aa8 <USBH_OpenPipe>
 8003d0a:	e0ad      	b.n	8003e68 <USBH_HandleEnum+0x296>
        phost->gState = HOST_ABORT_STATE;
 8003d0c:	230d      	movs	r3, #13
 8003d0e:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 8003d10:	2300      	movs	r3, #0
 8003d12:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003d14:	2501      	movs	r5, #1
 8003d16:	e0a7      	b.n	8003e68 <USBH_HandleEnum+0x296>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8003d18:	2109      	movs	r1, #9
 8003d1a:	f000 fde1 	bl	80048e0 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8003d1e:	b918      	cbnz	r0, 8003d28 <USBH_HandleEnum+0x156>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8003d20:	2304      	movs	r3, #4
 8003d22:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003d24:	2501      	movs	r5, #1
 8003d26:	e09f      	b.n	8003e68 <USBH_HandleEnum+0x296>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003d28:	2803      	cmp	r0, #3
 8003d2a:	d001      	beq.n	8003d30 <USBH_HandleEnum+0x15e>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003d2c:	2501      	movs	r5, #1
 8003d2e:	e09b      	b.n	8003e68 <USBH_HandleEnum+0x296>
        phost->device.EnumCnt++;
 8003d30:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003d34:	3301      	adds	r3, #1
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d903      	bls.n	8003d48 <USBH_HandleEnum+0x176>
          phost->gState = HOST_ABORT_STATE;
 8003d40:	230d      	movs	r3, #13
 8003d42:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003d44:	2501      	movs	r5, #1
 8003d46:	e08f      	b.n	8003e68 <USBH_HandleEnum+0x296>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8003d48:	7961      	ldrb	r1, [r4, #5]
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	f000 fed4 	bl	8004af8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8003d50:	7921      	ldrb	r1, [r4, #4]
 8003d52:	4620      	mov	r0, r4
 8003d54:	f000 fed0 	bl	8004af8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8003d5c:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003d5e:	2501      	movs	r5, #1
 8003d60:	e082      	b.n	8003e68 <USBH_HandleEnum+0x296>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8003d62:	f8b0 133a 	ldrh.w	r1, [r0, #826]	; 0x33a
 8003d66:	f000 fdbb 	bl	80048e0 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8003d6a:	b918      	cbnz	r0, 8003d74 <USBH_HandleEnum+0x1a2>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8003d6c:	2305      	movs	r3, #5
 8003d6e:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003d70:	2501      	movs	r5, #1
 8003d72:	e079      	b.n	8003e68 <USBH_HandleEnum+0x296>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003d74:	2803      	cmp	r0, #3
 8003d76:	d001      	beq.n	8003d7c <USBH_HandleEnum+0x1aa>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003d78:	2501      	movs	r5, #1
 8003d7a:	e075      	b.n	8003e68 <USBH_HandleEnum+0x296>
        phost->device.EnumCnt++;
 8003d7c:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003d80:	3301      	adds	r3, #1
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d903      	bls.n	8003d94 <USBH_HandleEnum+0x1c2>
          phost->gState = HOST_ABORT_STATE;
 8003d8c:	230d      	movs	r3, #13
 8003d8e:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003d90:	2501      	movs	r5, #1
 8003d92:	e069      	b.n	8003e68 <USBH_HandleEnum+0x296>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8003d94:	7961      	ldrb	r1, [r4, #5]
 8003d96:	4620      	mov	r0, r4
 8003d98:	f000 feae 	bl	8004af8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8003d9c:	7921      	ldrb	r1, [r4, #4]
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f000 feaa 	bl	8004af8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8003da8:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003daa:	2501      	movs	r5, #1
 8003dac:	e05c      	b.n	8003e68 <USBH_HandleEnum+0x296>
      if (phost->device.DevDesc.iManufacturer != 0U)
 8003dae:	f890 1334 	ldrb.w	r1, [r0, #820]	; 0x334
 8003db2:	b309      	cbz	r1, 8003df8 <USBH_HandleEnum+0x226>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8003db4:	23ff      	movs	r3, #255	; 0xff
 8003db6:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8003dba:	f000 fdaa 	bl	8004912 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8003dbe:	b118      	cbz	r0, 8003dc8 <USBH_HandleEnum+0x1f6>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003dc0:	2803      	cmp	r0, #3
 8003dc2:	d00d      	beq.n	8003de0 <USBH_HandleEnum+0x20e>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003dc4:	2501      	movs	r5, #1
 8003dc6:	e04f      	b.n	8003e68 <USBH_HandleEnum+0x296>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003dc8:	2306      	movs	r3, #6
 8003dca:	7063      	strb	r3, [r4, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003dcc:	2105      	movs	r1, #5
 8003dce:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8003dd8:	f000 fefc 	bl	8004bd4 <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003ddc:	2501      	movs	r5, #1
 8003dde:	e043      	b.n	8003e68 <USBH_HandleEnum+0x296>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003de0:	2306      	movs	r3, #6
 8003de2:	7063      	strb	r3, [r4, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003de4:	2105      	movs	r1, #5
 8003de6:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8003df0:	f000 fef0 	bl	8004bd4 <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003df4:	2501      	movs	r5, #1
 8003df6:	e037      	b.n	8003e68 <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003df8:	2306      	movs	r3, #6
 8003dfa:	7043      	strb	r3, [r0, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003dfc:	2105      	movs	r1, #5
 8003dfe:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 8003e08:	f000 fee4 	bl	8004bd4 <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e0c:	2501      	movs	r5, #1
 8003e0e:	e02b      	b.n	8003e68 <USBH_HandleEnum+0x296>
      if (phost->device.DevDesc.iProduct != 0U)
 8003e10:	f890 1335 	ldrb.w	r1, [r0, #821]	; 0x335
 8003e14:	b1c9      	cbz	r1, 8003e4a <USBH_HandleEnum+0x278>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8003e16:	23ff      	movs	r3, #255	; 0xff
 8003e18:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8003e1c:	f000 fd79 	bl	8004912 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8003e20:	b918      	cbnz	r0, 8003e2a <USBH_HandleEnum+0x258>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8003e22:	2307      	movs	r3, #7
 8003e24:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e26:	2501      	movs	r5, #1
 8003e28:	e01e      	b.n	8003e68 <USBH_HandleEnum+0x296>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003e2a:	2803      	cmp	r0, #3
 8003e2c:	d001      	beq.n	8003e32 <USBH_HandleEnum+0x260>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e2e:	2501      	movs	r5, #1
 8003e30:	e01a      	b.n	8003e68 <USBH_HandleEnum+0x296>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8003e32:	2307      	movs	r3, #7
 8003e34:	7063      	strb	r3, [r4, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003e36:	2105      	movs	r1, #5
 8003e38:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8003e42:	f000 fec7 	bl	8004bd4 <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e46:	2501      	movs	r5, #1
 8003e48:	e00e      	b.n	8003e68 <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8003e4a:	2307      	movs	r3, #7
 8003e4c:	7043      	strb	r3, [r0, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003e4e:	2105      	movs	r1, #5
 8003e50:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e54:	2200      	movs	r2, #0
 8003e56:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 8003e5a:	f000 febb 	bl	8004bd4 <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e5e:	2501      	movs	r5, #1
 8003e60:	e002      	b.n	8003e68 <USBH_HandleEnum+0x296>
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8003e62:	f890 5336 	ldrb.w	r5, [r0, #822]	; 0x336
 8003e66:	b915      	cbnz	r5, 8003e6e <USBH_HandleEnum+0x29c>
}
 8003e68:	4628      	mov	r0, r5
 8003e6a:	b004      	add	sp, #16
 8003e6c:	bd70      	pop	{r4, r5, r6, pc}
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8003e6e:	23ff      	movs	r3, #255	; 0xff
 8003e70:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8003e74:	4629      	mov	r1, r5
 8003e76:	f000 fd4c 	bl	8004912 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8003e7a:	4605      	mov	r5, r0
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	d0f3      	beq.n	8003e68 <USBH_HandleEnum+0x296>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003e80:	2803      	cmp	r0, #3
 8003e82:	d003      	beq.n	8003e8c <USBH_HandleEnum+0x2ba>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e84:	2501      	movs	r5, #1
 8003e86:	e7ef      	b.n	8003e68 <USBH_HandleEnum+0x296>
  switch (phost->EnumState)
 8003e88:	2501      	movs	r5, #1
 8003e8a:	e7ed      	b.n	8003e68 <USBH_HandleEnum+0x296>
          Status = USBH_OK;
 8003e8c:	2500      	movs	r5, #0
 8003e8e:	e7eb      	b.n	8003e68 <USBH_HandleEnum+0x296>

08003e90 <USBH_Init>:
  if (phost == NULL)
 8003e90:	b3b8      	cbz	r0, 8003f02 <USBH_Init+0x72>
{
 8003e92:	b570      	push	{r4, r5, r6, lr}
 8003e94:	b08c      	sub	sp, #48	; 0x30
 8003e96:	460e      	mov	r6, r1
 8003e98:	4605      	mov	r5, r0
  phost->id = id;
 8003e9a:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->pActiveClass = NULL;
 8003e9e:	2400      	movs	r4, #0
 8003ea0:	f8c0 437c 	str.w	r4, [r0, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8003ea4:	f8c0 4380 	str.w	r4, [r0, #896]	; 0x380
  DeInitStateMachine(phost);
 8003ea8:	f7ff fe59 	bl	8003b5e <DeInitStateMachine>
  phost->device.PortEnabled = 0U;
 8003eac:	f885 4323 	strb.w	r4, [r5, #803]	; 0x323
  phost->device.is_connected = 0U;
 8003eb0:	f885 4320 	strb.w	r4, [r5, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8003eb4:	f885 4321 	strb.w	r4, [r5, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8003eb8:	f885 4322 	strb.w	r4, [r5, #802]	; 0x322
  if (pUsrFunc != NULL)
 8003ebc:	b10e      	cbz	r6, 8003ec2 <USBH_Init+0x32>
    phost->pUser = pUsrFunc;
 8003ebe:	f8c5 63d4 	str.w	r6, [r5, #980]	; 0x3d4
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8003ec2:	4c11      	ldr	r4, [pc, #68]	; (8003f08 <USBH_Init+0x78>)
 8003ec4:	ae08      	add	r6, sp, #32
 8003ec6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003eca:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f000 fe69 	bl	8004ba8 <osMessageCreate>
 8003ed6:	f8c5 03d8 	str.w	r0, [r5, #984]	; 0x3d8
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8003eda:	ae01      	add	r6, sp, #4
 8003edc:	3410      	adds	r4, #16
 8003ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003ee2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003ee6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8003eea:	4629      	mov	r1, r5
 8003eec:	a801      	add	r0, sp, #4
 8003eee:	f000 fe1f 	bl	8004b30 <osThreadCreate>
 8003ef2:	f8c5 03dc 	str.w	r0, [r5, #988]	; 0x3dc
  USBH_LL_Init(phost);
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f002 fb1c 	bl	8006534 <USBH_LL_Init>
  return USBH_OK;
 8003efc:	2000      	movs	r0, #0
}
 8003efe:	b00c      	add	sp, #48	; 0x30
 8003f00:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8003f02:	2002      	movs	r0, #2
}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	08006a08 	.word	0x08006a08

08003f0c <USBH_RegisterClass>:
  if (pclass != NULL)
 8003f0c:	460a      	mov	r2, r1
 8003f0e:	b151      	cbz	r1, 8003f26 <USBH_RegisterClass+0x1a>
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8003f10:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8003f14:	b94b      	cbnz	r3, 8003f2a <USBH_RegisterClass+0x1e>
      phost->pClass[phost->ClassNumber++] = pclass;
 8003f16:	1c59      	adds	r1, r3, #1
 8003f18:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
 8003f1c:	33de      	adds	r3, #222	; 0xde
 8003f1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      status = USBH_OK;
 8003f22:	2000      	movs	r0, #0
 8003f24:	4770      	bx	lr
    status = USBH_FAIL;
 8003f26:	2002      	movs	r0, #2
 8003f28:	4770      	bx	lr
      status = USBH_FAIL;
 8003f2a:	2002      	movs	r0, #2
}
 8003f2c:	4770      	bx	lr

08003f2e <USBH_SelectInterface>:
  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8003f2e:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 8003f32:	428b      	cmp	r3, r1
 8003f34:	d903      	bls.n	8003f3e <USBH_SelectInterface+0x10>
    phost->device.current_interface = interface;
 8003f36:	f880 1324 	strb.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	4770      	bx	lr
    status = USBH_FAIL;
 8003f3e:	2002      	movs	r0, #2
}
 8003f40:	4770      	bx	lr

08003f42 <USBH_FindInterface>:
{
 8003f42:	b470      	push	{r4, r5, r6}
 8003f44:	4606      	mov	r6, r0
  uint8_t if_ix = 0U;
 8003f46:	2000      	movs	r0, #0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003f48:	e00a      	b.n	8003f60 <USBH_FindInterface+0x1e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8003f4a:	241a      	movs	r4, #26
 8003f4c:	fb04 6505 	mla	r5, r4, r5, r6
 8003f50:	f895 4349 	ldrb.w	r4, [r5, #841]	; 0x349
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8003f54:	429c      	cmp	r4, r3
 8003f56:	d01a      	beq.n	8003f8e <USBH_FindInterface+0x4c>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8003f58:	2bff      	cmp	r3, #255	; 0xff
 8003f5a:	d018      	beq.n	8003f8e <USBH_FindInterface+0x4c>
    if_ix++;
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	b2c0      	uxtb	r0, r0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003f60:	2801      	cmp	r0, #1
 8003f62:	d813      	bhi.n	8003f8c <USBH_FindInterface+0x4a>
    pif = &pcfg->Itf_Desc[if_ix];
 8003f64:	4605      	mov	r5, r0
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8003f66:	241a      	movs	r4, #26
 8003f68:	fb04 6400 	mla	r4, r4, r0, r6
 8003f6c:	f894 4347 	ldrb.w	r4, [r4, #839]	; 0x347
 8003f70:	428c      	cmp	r4, r1
 8003f72:	d001      	beq.n	8003f78 <USBH_FindInterface+0x36>
 8003f74:	29ff      	cmp	r1, #255	; 0xff
 8003f76:	d1f1      	bne.n	8003f5c <USBH_FindInterface+0x1a>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8003f78:	241a      	movs	r4, #26
 8003f7a:	fb04 6405 	mla	r4, r4, r5, r6
 8003f7e:	f894 4348 	ldrb.w	r4, [r4, #840]	; 0x348
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8003f82:	4294      	cmp	r4, r2
 8003f84:	d0e1      	beq.n	8003f4a <USBH_FindInterface+0x8>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8003f86:	2aff      	cmp	r2, #255	; 0xff
 8003f88:	d1e8      	bne.n	8003f5c <USBH_FindInterface+0x1a>
 8003f8a:	e7de      	b.n	8003f4a <USBH_FindInterface+0x8>
  return 0xFFU;
 8003f8c:	20ff      	movs	r0, #255	; 0xff
}
 8003f8e:	bc70      	pop	{r4, r5, r6}
 8003f90:	4770      	bx	lr

08003f92 <USBH_Start>:
{
 8003f92:	b510      	push	{r4, lr}
 8003f94:	4604      	mov	r4, r0
  USBH_LL_Start(phost);
 8003f96:	f002 fb44 	bl	8006622 <USBH_LL_Start>
  USBH_LL_DriverVBUS(phost, TRUE);
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f002 fb0f 	bl	80065c0 <USBH_LL_DriverVBUS>
}
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	bd10      	pop	{r4, pc}

08003fa6 <USBH_Process>:
{
 8003fa6:	b530      	push	{r4, r5, lr}
 8003fa8:	b087      	sub	sp, #28
 8003faa:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8003fac:	2302      	movs	r3, #2
 8003fae:	f88d 3017 	strb.w	r3, [sp, #23]
  if (phost->device.is_disconnected == 1U)
 8003fb2:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d011      	beq.n	8003fe0 <USBH_Process+0x3a>
  switch (phost->gState)
 8003fbc:	7823      	ldrb	r3, [r4, #0]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b0b      	cmp	r3, #11
 8003fc2:	d849      	bhi.n	8004058 <USBH_Process+0xb2>
 8003fc4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003fc8:	0027000f 	.word	0x0027000f
 8003fcc:	014d0055 	.word	0x014d0055
 8003fd0:	00930048 	.word	0x00930048
 8003fd4:	00b00123 	.word	0x00b00123
 8003fd8:	00d300c2 	.word	0x00d300c2
 8003fdc:	014400ec 	.word	0x014400ec
    phost->gState = HOST_DEV_DISCONNECTED;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	7003      	strb	r3, [r0, #0]
 8003fe4:	e7ea      	b.n	8003fbc <USBH_Process+0x16>
      if (phost->device.is_connected)
 8003fe6:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8003fea:	b3ab      	cbz	r3, 8004058 <USBH_Process+0xb2>
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8003fec:	2501      	movs	r5, #1
 8003fee:	7025      	strb	r5, [r4, #0]
        USBH_Delay(200U);
 8003ff0:	20c8      	movs	r0, #200	; 0xc8
 8003ff2:	f002 fb08 	bl	8006606 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f002 fb23 	bl	8006642 <USBH_LL_ResetPort>
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f884 231c 	strb.w	r2, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 8004002:	f8c4 23c8 	str.w	r2, [r4, #968]	; 0x3c8
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004006:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800400a:	4629      	mov	r1, r5
 800400c:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004010:	f000 fde0 	bl	8004bd4 <osMessagePut>
 8004014:	e020      	b.n	8004058 <USBH_Process+0xb2>
      if (phost->device.PortEnabled == 1U)
 8004016:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
 800401a:	2b01      	cmp	r3, #1
 800401c:	d00f      	beq.n	800403e <USBH_Process+0x98>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800401e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8004022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004026:	d91d      	bls.n	8004064 <USBH_Process+0xbe>
          phost->device.RstCnt++;
 8004028:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 800402c:	3301      	adds	r3, #1
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8004034:	2b03      	cmp	r3, #3
 8004036:	d912      	bls.n	800405e <USBH_Process+0xb8>
            phost->gState = HOST_ABORT_STATE;
 8004038:	230d      	movs	r3, #13
 800403a:	7023      	strb	r3, [r4, #0]
 800403c:	e004      	b.n	8004048 <USBH_Process+0xa2>
        phost->device.RstCnt = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8004044:	2302      	movs	r3, #2
 8004046:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004048:	2101      	movs	r1, #1
 800404a:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800404e:	2200      	movs	r2, #0
 8004050:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004054:	f000 fdbe 	bl	8004bd4 <osMessagePut>
}
 8004058:	2000      	movs	r0, #0
 800405a:	b007      	add	sp, #28
 800405c:	bd30      	pop	{r4, r5, pc}
            phost->gState = HOST_IDLE;
 800405e:	2300      	movs	r3, #0
 8004060:	7023      	strb	r3, [r4, #0]
 8004062:	e7f1      	b.n	8004048 <USBH_Process+0xa2>
          phost->Timeout += 10U;
 8004064:	330a      	adds	r3, #10
 8004066:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
          USBH_Delay(10U);
 800406a:	200a      	movs	r0, #10
 800406c:	f002 facb 	bl	8006606 <USBH_Delay>
 8004070:	e7ea      	b.n	8004048 <USBH_Process+0xa2>
      if (phost->pUser != NULL)
 8004072:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8004076:	b113      	cbz	r3, 800407e <USBH_Process+0xd8>
        phost->pUser(phost, HOST_USER_CONNECTION);
 8004078:	2104      	movs	r1, #4
 800407a:	4620      	mov	r0, r4
 800407c:	4798      	blx	r3
      USBH_Delay(100U);
 800407e:	2064      	movs	r0, #100	; 0x64
 8004080:	f002 fac1 	bl	8006606 <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8004084:	4620      	mov	r0, r4
 8004086:	f002 fa7f 	bl	8006588 <USBH_LL_GetSpeed>
 800408a:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
      phost->gState = HOST_ENUMERATION;
 800408e:	2305      	movs	r3, #5
 8004090:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8004092:	2100      	movs	r1, #0
 8004094:	4620      	mov	r0, r4
 8004096:	f000 fd1c 	bl	8004ad2 <USBH_AllocPipe>
 800409a:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800409c:	2180      	movs	r1, #128	; 0x80
 800409e:	4620      	mov	r0, r4
 80040a0:	f000 fd17 	bl	8004ad2 <USBH_AllocPipe>
 80040a4:	4601      	mov	r1, r0
 80040a6:	7120      	strb	r0, [r4, #4]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80040a8:	79a3      	ldrb	r3, [r4, #6]
 80040aa:	9302      	str	r3, [sp, #8]
 80040ac:	2500      	movs	r5, #0
 80040ae:	9501      	str	r5, [sp, #4]
 80040b0:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	4620      	mov	r0, r4
 80040be:	f000 fcf3 	bl	8004aa8 <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80040c2:	79a3      	ldrb	r3, [r4, #6]
 80040c4:	9302      	str	r3, [sp, #8]
 80040c6:	9501      	str	r5, [sp, #4]
 80040c8:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80040d2:	462a      	mov	r2, r5
 80040d4:	7961      	ldrb	r1, [r4, #5]
 80040d6:	4620      	mov	r0, r4
 80040d8:	f000 fce6 	bl	8004aa8 <USBH_OpenPipe>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80040dc:	2101      	movs	r1, #1
 80040de:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80040e2:	462a      	mov	r2, r5
 80040e4:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80040e8:	f000 fd74 	bl	8004bd4 <osMessagePut>
      break;
 80040ec:	e7b4      	b.n	8004058 <USBH_Process+0xb2>
      status = USBH_HandleEnum(phost);
 80040ee:	4620      	mov	r0, r4
 80040f0:	f7ff fd6f 	bl	8003bd2 <USBH_HandleEnum>
 80040f4:	f88d 0017 	strb.w	r0, [sp, #23]
      if (status == USBH_OK)
 80040f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ab      	bne.n	8004058 <USBH_Process+0xb2>
        phost->device.current_interface = 0U;
 8004100:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8004104:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
 8004108:	2b01      	cmp	r3, #1
 800410a:	d00a      	beq.n	8004122 <USBH_Process+0x17c>
          phost->gState = HOST_INPUT;
 800410c:	2307      	movs	r3, #7
 800410e:	7023      	strb	r3, [r4, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8004110:	2105      	movs	r1, #5
 8004112:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004116:	2200      	movs	r2, #0
 8004118:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800411c:	f000 fd5a 	bl	8004bd4 <osMessagePut>
 8004120:	e79a      	b.n	8004058 <USBH_Process+0xb2>
          phost->gState = HOST_SET_CONFIGURATION;
 8004122:	2308      	movs	r3, #8
 8004124:	7023      	strb	r3, [r4, #0]
 8004126:	e7f3      	b.n	8004110 <USBH_Process+0x16a>
      if (phost->pUser != NULL)
 8004128:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d093      	beq.n	8004058 <USBH_Process+0xb2>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8004130:	2101      	movs	r1, #1
 8004132:	4620      	mov	r0, r4
 8004134:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8004136:	2308      	movs	r3, #8
 8004138:	7023      	strb	r3, [r4, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800413a:	2105      	movs	r1, #5
 800413c:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004140:	2200      	movs	r2, #0
 8004142:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004146:	f000 fd45 	bl	8004bd4 <osMessagePut>
 800414a:	e785      	b.n	8004058 <USBH_Process+0xb2>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800414c:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
 8004150:	4620      	mov	r0, r4
 8004152:	f000 fc07 	bl	8004964 <USBH_SetCfg>
 8004156:	b908      	cbnz	r0, 800415c <USBH_Process+0x1b6>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8004158:	2309      	movs	r3, #9
 800415a:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800415c:	2101      	movs	r1, #1
 800415e:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004162:	2200      	movs	r2, #0
 8004164:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004168:	f000 fd34 	bl	8004bd4 <osMessagePut>
      break;
 800416c:	e774      	b.n	8004058 <USBH_Process+0xb2>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800416e:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
 8004172:	f013 0f20 	tst.w	r3, #32
 8004176:	d10a      	bne.n	800418e <USBH_Process+0x1e8>
        phost->gState = HOST_CHECK_CLASS;
 8004178:	230a      	movs	r3, #10
 800417a:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800417c:	2101      	movs	r1, #1
 800417e:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004182:	2200      	movs	r2, #0
 8004184:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004188:	f000 fd24 	bl	8004bd4 <osMessagePut>
      break;
 800418c:	e764      	b.n	8004058 <USBH_Process+0xb2>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800418e:	2101      	movs	r1, #1
 8004190:	4620      	mov	r0, r4
 8004192:	f000 fbf8 	bl	8004986 <USBH_SetFeature>
 8004196:	2800      	cmp	r0, #0
 8004198:	d1f0      	bne.n	800417c <USBH_Process+0x1d6>
          phost->gState = HOST_CHECK_CLASS;
 800419a:	230a      	movs	r3, #10
 800419c:	7023      	strb	r3, [r4, #0]
 800419e:	e7ed      	b.n	800417c <USBH_Process+0x1d6>
      if (phost->ClassNumber == 0U)
 80041a0:	f8d4 3380 	ldr.w	r3, [r4, #896]	; 0x380
 80041a4:	b18b      	cbz	r3, 80041ca <USBH_Process+0x224>
        phost->pActiveClass = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80041ac:	b1b3      	cbz	r3, 80041dc <USBH_Process+0x236>
        if (phost->pActiveClass != NULL)
 80041ae:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80041b2:	b34b      	cbz	r3, 8004208 <USBH_Process+0x262>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	4620      	mov	r0, r4
 80041b8:	4798      	blx	r3
 80041ba:	bb10      	cbnz	r0, 8004202 <USBH_Process+0x25c>
            phost->gState = HOST_CLASS_REQUEST;
 80041bc:	2306      	movs	r3, #6
 80041be:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80041c0:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80041c4:	2103      	movs	r1, #3
 80041c6:	4620      	mov	r0, r4
 80041c8:	4798      	blx	r3
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80041ca:	2105      	movs	r1, #5
 80041cc:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80041d0:	2200      	movs	r2, #0
 80041d2:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80041d6:	f000 fcfd 	bl	8004bd4 <osMessagePut>
      break;
 80041da:	e73d      	b.n	8004058 <USBH_Process+0xb2>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80041dc:	4618      	mov	r0, r3
 80041de:	f103 02de 	add.w	r2, r3, #222	; 0xde
 80041e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80041e6:	7911      	ldrb	r1, [r2, #4]
 80041e8:	f894 2347 	ldrb.w	r2, [r4, #839]	; 0x347
 80041ec:	4291      	cmp	r1, r2
 80041ee:	d002      	beq.n	80041f6 <USBH_Process+0x250>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80041f0:	3301      	adds	r3, #1
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e7da      	b.n	80041ac <USBH_Process+0x206>
            phost->pActiveClass = phost->pClass[idx];
 80041f6:	30de      	adds	r0, #222	; 0xde
 80041f8:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 80041fc:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
            break;
 8004200:	e7d5      	b.n	80041ae <USBH_Process+0x208>
            phost->gState = HOST_ABORT_STATE;
 8004202:	230d      	movs	r3, #13
 8004204:	7023      	strb	r3, [r4, #0]
 8004206:	e7e0      	b.n	80041ca <USBH_Process+0x224>
          phost->gState = HOST_ABORT_STATE;
 8004208:	230d      	movs	r3, #13
 800420a:	7023      	strb	r3, [r4, #0]
 800420c:	e7dd      	b.n	80041ca <USBH_Process+0x224>
      if (phost->pActiveClass != NULL)
 800420e:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8004212:	b1d3      	cbz	r3, 800424a <USBH_Process+0x2a4>
        status = phost->pActiveClass->Requests(phost);
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	4620      	mov	r0, r4
 8004218:	4798      	blx	r3
 800421a:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 800421e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004222:	b953      	cbnz	r3, 800423a <USBH_Process+0x294>
          phost->gState = HOST_CLASS;
 8004224:	230b      	movs	r3, #11
 8004226:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8004228:	2105      	movs	r1, #5
 800422a:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800422e:	2200      	movs	r2, #0
 8004230:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004234:	f000 fcce 	bl	8004bd4 <osMessagePut>
      break;
 8004238:	e70e      	b.n	8004058 <USBH_Process+0xb2>
        else if (status == USBH_FAIL)
 800423a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d1f1      	bne.n	8004228 <USBH_Process+0x282>
          phost->gState = HOST_ABORT_STATE;
 8004244:	230d      	movs	r3, #13
 8004246:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 8004248:	e7ee      	b.n	8004228 <USBH_Process+0x282>
        phost->gState = HOST_ABORT_STATE;
 800424a:	230d      	movs	r3, #13
 800424c:	7023      	strb	r3, [r4, #0]
 800424e:	e7eb      	b.n	8004228 <USBH_Process+0x282>
      if (phost->pActiveClass != NULL)
 8004250:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8004254:	2b00      	cmp	r3, #0
 8004256:	f43f aeff 	beq.w	8004058 <USBH_Process+0xb2>
        phost->pActiveClass->BgndProcess(phost);
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	4620      	mov	r0, r4
 800425e:	4798      	blx	r3
 8004260:	e6fa      	b.n	8004058 <USBH_Process+0xb2>
      phost->device.is_disconnected = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
      DeInitStateMachine(phost);
 8004268:	4620      	mov	r0, r4
 800426a:	f7ff fc78 	bl	8003b5e <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 800426e:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8004272:	b12b      	cbz	r3, 8004280 <USBH_Process+0x2da>
        phost->pActiveClass->DeInit(phost);
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	4620      	mov	r0, r4
 8004278:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 8004280:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8004284:	b113      	cbz	r3, 800428c <USBH_Process+0x2e6>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8004286:	2105      	movs	r1, #5
 8004288:	4620      	mov	r0, r4
 800428a:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 800428c:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	d00b      	beq.n	80042ae <USBH_Process+0x308>
        USBH_LL_Start(phost);
 8004296:	4620      	mov	r0, r4
 8004298:	f002 f9c3 	bl	8006622 <USBH_LL_Start>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800429c:	2101      	movs	r1, #1
 800429e:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80042a2:	2200      	movs	r2, #0
 80042a4:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80042a8:	f000 fc94 	bl	8004bd4 <osMessagePut>
      break;
 80042ac:	e6d4      	b.n	8004058 <USBH_Process+0xb2>
        phost->device.is_ReEnumerated = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        USBH_Start(phost);
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7ff fe6c 	bl	8003f92 <USBH_Start>
 80042ba:	e7ef      	b.n	800429c <USBH_Process+0x2f6>

080042bc <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80042bc:	b500      	push	{lr}
 80042be:	b085      	sub	sp, #20
 80042c0:	4604      	mov	r4, r0
 80042c2:	e002      	b.n	80042ca <USBH_Process_OS+0xe>
  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
    if (event.status == osEventMessage)
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80042c4:	4620      	mov	r0, r4
 80042c6:	f7ff fe6e 	bl	8003fa6 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80042ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042ce:	f8d4 13d8 	ldr.w	r1, [r4, #984]	; 0x3d8
 80042d2:	a801      	add	r0, sp, #4
 80042d4:	f000 fcb2 	bl	8004c3c <osMessageGet>
    if (event.status == osEventMessage)
 80042d8:	9b01      	ldr	r3, [sp, #4]
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d1f5      	bne.n	80042ca <USBH_Process_OS+0xe>
 80042de:	e7f1      	b.n	80042c4 <USBH_Process_OS+0x8>

080042e0 <USBH_LL_SetTimer>:
  phost->Timer = time;
 80042e0:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 80042e4:	4770      	bx	lr

080042e6 <USBH_LL_IncTimer>:
{
 80042e6:	b508      	push	{r3, lr}
  phost->Timer++;
 80042e8:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
 80042ec:	3201      	adds	r2, #1
 80042ee:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80042f2:	f7ff fc61 	bl	8003bb8 <USBH_HandleSof>
}
 80042f6:	bd08      	pop	{r3, pc}

080042f8 <USBH_LL_PortEnabled>:
{
 80042f8:	b508      	push	{r3, lr}
  phost->device.PortEnabled = 1U;
 80042fa:	2101      	movs	r1, #1
 80042fc:	f880 1323 	strb.w	r1, [r0, #803]	; 0x323
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004300:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004304:	2200      	movs	r2, #0
 8004306:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 800430a:	f000 fc63 	bl	8004bd4 <osMessagePut>
}
 800430e:	bd08      	pop	{r3, pc}

08004310 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
}
 8004316:	4770      	bx	lr

08004318 <USBH_LL_Connect>:
{
 8004318:	b510      	push	{r4, lr}
  phost->device.is_connected = 1U;
 800431a:	2101      	movs	r1, #1
 800431c:	f880 1320 	strb.w	r1, [r0, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004320:	2400      	movs	r4, #0
 8004322:	f880 4321 	strb.w	r4, [r0, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004326:	f880 4322 	strb.w	r4, [r0, #802]	; 0x322
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800432a:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800432e:	4622      	mov	r2, r4
 8004330:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 8004334:	f000 fc4e 	bl	8004bd4 <osMessagePut>
}
 8004338:	4620      	mov	r0, r4
 800433a:	bd10      	pop	{r4, pc}

0800433c <USBH_LL_Disconnect>:
{
 800433c:	b570      	push	{r4, r5, r6, lr}
 800433e:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
 8004340:	2601      	movs	r6, #1
 8004342:	f880 6321 	strb.w	r6, [r0, #801]	; 0x321
  phost->device.is_connected = 0U;
 8004346:	2500      	movs	r5, #0
 8004348:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800434c:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323
  USBH_LL_Stop(phost);
 8004350:	f002 f96f 	bl	8006632 <USBH_LL_Stop>
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8004354:	7921      	ldrb	r1, [r4, #4]
 8004356:	4620      	mov	r0, r4
 8004358:	f000 fbce 	bl	8004af8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800435c:	7961      	ldrb	r1, [r4, #5]
 800435e:	4620      	mov	r0, r4
 8004360:	f000 fbca 	bl	8004af8 <USBH_FreePipe>
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004364:	f8c4 63e0 	str.w	r6, [r4, #992]	; 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004368:	462a      	mov	r2, r5
 800436a:	4631      	mov	r1, r6
 800436c:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004370:	f000 fc30 	bl	8004bd4 <osMessagePut>
}
 8004374:	4628      	mov	r0, r5
 8004376:	bd70      	pop	{r4, r5, r6, pc}

08004378 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8004378:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800437a:	2101      	movs	r1, #1
 800437c:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004380:	2200      	movs	r2, #0
 8004382:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 8004386:	f000 fc25 	bl	8004bd4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
}
 800438a:	2000      	movs	r0, #0
 800438c:	bd08      	pop	{r3, pc}

0800438e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800438e:	b410      	push	{r4}
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8004390:	780b      	ldrb	r3, [r1, #0]
 8004392:	7003      	strb	r3, [r0, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8004394:	784b      	ldrb	r3, [r1, #1]
 8004396:	7043      	strb	r3, [r0, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8004398:	788b      	ldrb	r3, [r1, #2]
 800439a:	78cc      	ldrb	r4, [r1, #3]
 800439c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80043a0:	8043      	strh	r3, [r0, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80043a2:	790b      	ldrb	r3, [r1, #4]
 80043a4:	7103      	strb	r3, [r0, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80043a6:	794b      	ldrb	r3, [r1, #5]
 80043a8:	7143      	strb	r3, [r0, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80043aa:	798b      	ldrb	r3, [r1, #6]
 80043ac:	7183      	strb	r3, [r0, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80043ae:	79cb      	ldrb	r3, [r1, #7]
 80043b0:	71c3      	strb	r3, [r0, #7]

  if (length > 8U)
 80043b2:	2a08      	cmp	r2, #8
 80043b4:	d916      	bls.n	80043e4 <USBH_ParseDevDesc+0x56>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80043b6:	7a0b      	ldrb	r3, [r1, #8]
 80043b8:	7a4a      	ldrb	r2, [r1, #9]
 80043ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80043be:	8103      	strh	r3, [r0, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80043c0:	7a8b      	ldrb	r3, [r1, #10]
 80043c2:	7aca      	ldrb	r2, [r1, #11]
 80043c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80043c8:	8143      	strh	r3, [r0, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80043ca:	7b0b      	ldrb	r3, [r1, #12]
 80043cc:	7b4a      	ldrb	r2, [r1, #13]
 80043ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80043d2:	8183      	strh	r3, [r0, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80043d4:	7b8b      	ldrb	r3, [r1, #14]
 80043d6:	7383      	strb	r3, [r0, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80043d8:	7bcb      	ldrb	r3, [r1, #15]
 80043da:	73c3      	strb	r3, [r0, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80043dc:	7c0b      	ldrb	r3, [r1, #16]
 80043de:	7403      	strb	r3, [r0, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80043e0:	7c4b      	ldrb	r3, [r1, #17]
 80043e2:	7443      	strb	r3, [r0, #17]
  }
}
 80043e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <USBH_ParseInterfaceDesc>:
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80043ea:	780b      	ldrb	r3, [r1, #0]
 80043ec:	7003      	strb	r3, [r0, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80043ee:	784b      	ldrb	r3, [r1, #1]
 80043f0:	7043      	strb	r3, [r0, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80043f2:	788b      	ldrb	r3, [r1, #2]
 80043f4:	7083      	strb	r3, [r0, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80043f6:	78cb      	ldrb	r3, [r1, #3]
 80043f8:	70c3      	strb	r3, [r0, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80043fa:	790b      	ldrb	r3, [r1, #4]
 80043fc:	7103      	strb	r3, [r0, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80043fe:	794b      	ldrb	r3, [r1, #5]
 8004400:	7143      	strb	r3, [r0, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8004402:	798b      	ldrb	r3, [r1, #6]
 8004404:	7183      	strb	r3, [r0, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8004406:	79cb      	ldrb	r3, [r1, #7]
 8004408:	71c3      	strb	r3, [r0, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800440a:	7a0b      	ldrb	r3, [r1, #8]
 800440c:	7203      	strb	r3, [r0, #8]
}
 800440e:	4770      	bx	lr

08004410 <USBH_ParseEPDesc>:
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8004410:	780b      	ldrb	r3, [r1, #0]
 8004412:	7003      	strb	r3, [r0, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8004414:	784b      	ldrb	r3, [r1, #1]
 8004416:	7043      	strb	r3, [r0, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8004418:	788b      	ldrb	r3, [r1, #2]
 800441a:	7083      	strb	r3, [r0, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800441c:	78cb      	ldrb	r3, [r1, #3]
 800441e:	70c3      	strb	r3, [r0, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8004420:	790b      	ldrb	r3, [r1, #4]
 8004422:	794a      	ldrb	r2, [r1, #5]
 8004424:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004428:	8083      	strh	r3, [r0, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800442a:	798b      	ldrb	r3, [r1, #6]
 800442c:	7183      	strb	r3, [r0, #6]
}
 800442e:	4770      	bx	lr

08004430 <USBH_ParseStringDesc>:
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8004430:	7843      	ldrb	r3, [r0, #1]
 8004432:	2b03      	cmp	r3, #3
 8004434:	d000      	beq.n	8004438 <USBH_ParseStringDesc+0x8>
 8004436:	4770      	bx	lr
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8004438:	7803      	ldrb	r3, [r0, #0]
 800443a:	3b02      	subs	r3, #2
 800443c:	429a      	cmp	r2, r3
 800443e:	bf28      	it	cs
 8004440:	461a      	movcs	r2, r3
 8004442:	b292      	uxth	r2, r2

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;

    for (idx = 0U; idx < strlength; idx += 2U)
 8004444:	2300      	movs	r3, #0
 8004446:	4293      	cmp	r3, r2
 8004448:	d20d      	bcs.n	8004466 <USBH_ParseStringDesc+0x36>
{
 800444a:	b410      	push	{r4}
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800444c:	18c4      	adds	r4, r0, r3
 800444e:	78a4      	ldrb	r4, [r4, #2]
 8004450:	f801 4b01 	strb.w	r4, [r1], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8004454:	3302      	adds	r3, #2
 8004456:	b29b      	uxth	r3, r3
 8004458:	4293      	cmp	r3, r2
 800445a:	d3f7      	bcc.n	800444c <USBH_ParseStringDesc+0x1c>
      pdest++;
    }
    *pdest = 0U; /* mark end of string */
 800445c:	2300      	movs	r3, #0
 800445e:	700b      	strb	r3, [r1, #0]
  }
}
 8004460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004464:	4770      	bx	lr
    *pdest = 0U; /* mark end of string */
 8004466:	2300      	movs	r3, #0
 8004468:	700b      	strb	r3, [r1, #0]
 800446a:	4770      	bx	lr

0800446c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800446c:	b530      	push	{r4, r5, lr}
 800446e:	b083      	sub	sp, #12
 8004470:	4604      	mov	r4, r0
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8004472:	7e05      	ldrb	r5, [r0, #24]
 8004474:	1e6b      	subs	r3, r5, #1
 8004476:	2b0a      	cmp	r3, #10
 8004478:	f200 815f 	bhi.w	800473a <USBH_HandleControl+0x2ce>
 800447c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004480:	0015000b 	.word	0x0015000b
 8004484:	0056004a 	.word	0x0056004a
 8004488:	00900083 	.word	0x00900083
 800448c:	00d900cd 	.word	0x00d900cd
 8004490:	01130106 	.word	0x01130106
 8004494:	0142      	.short	0x0142
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8004496:	7942      	ldrb	r2, [r0, #5]
 8004498:	f100 0110 	add.w	r1, r0, #16
 800449c:	f000 fa84 	bl	80049a8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80044a0:	2302      	movs	r3, #2
 80044a2:	7623      	strb	r3, [r4, #24]
    default:
      break;
  }

  return status;
}
 80044a4:	4628      	mov	r0, r5
 80044a6:	b003      	add	sp, #12
 80044a8:	bd30      	pop	{r4, r5, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80044aa:	7941      	ldrb	r1, [r0, #5]
 80044ac:	f002 f882 	bl	80065b4 <USBH_LL_GetURBState>
 80044b0:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 80044b2:	2801      	cmp	r0, #1
 80044b4:	d005      	beq.n	80044c2 <USBH_HandleControl+0x56>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80044b6:	2804      	cmp	r0, #4
 80044b8:	d020      	beq.n	80044fc <USBH_HandleControl+0x90>
 80044ba:	2802      	cmp	r0, #2
 80044bc:	d01e      	beq.n	80044fc <USBH_HandleControl+0x90>
  USBH_StatusTypeDef status = USBH_BUSY;
 80044be:	2501      	movs	r5, #1
 80044c0:	e7f0      	b.n	80044a4 <USBH_HandleControl+0x38>
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80044c2:	7c23      	ldrb	r3, [r4, #16]
        if (phost->Control.setup.b.wLength.w != 0U)
 80044c4:	8ae2      	ldrh	r2, [r4, #22]
 80044c6:	b182      	cbz	r2, 80044ea <USBH_HandleControl+0x7e>
          if (direction == USB_D2H)
 80044c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80044cc:	d10a      	bne.n	80044e4 <USBH_HandleControl+0x78>
            phost->Control.state = CTRL_DATA_OUT;
 80044ce:	2305      	movs	r3, #5
 80044d0:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80044d2:	2103      	movs	r1, #3
 80044d4:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80044d8:	2200      	movs	r2, #0
 80044da:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80044de:	f000 fb79 	bl	8004bd4 <osMessagePut>
 80044e2:	e7df      	b.n	80044a4 <USBH_HandleControl+0x38>
            phost->Control.state = CTRL_DATA_IN;
 80044e4:	2303      	movs	r3, #3
 80044e6:	7623      	strb	r3, [r4, #24]
 80044e8:	e7f3      	b.n	80044d2 <USBH_HandleControl+0x66>
          if (direction == USB_D2H)
 80044ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80044ee:	d102      	bne.n	80044f6 <USBH_HandleControl+0x8a>
            phost->Control.state = CTRL_STATUS_IN;
 80044f0:	2307      	movs	r3, #7
 80044f2:	7623      	strb	r3, [r4, #24]
 80044f4:	e7ed      	b.n	80044d2 <USBH_HandleControl+0x66>
            phost->Control.state = CTRL_STATUS_OUT;
 80044f6:	2309      	movs	r3, #9
 80044f8:	7623      	strb	r3, [r4, #24]
 80044fa:	e7ea      	b.n	80044d2 <USBH_HandleControl+0x66>
          phost->Control.state = CTRL_ERROR;
 80044fc:	230b      	movs	r3, #11
 80044fe:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004500:	2103      	movs	r1, #3
 8004502:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004506:	2200      	movs	r2, #0
 8004508:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800450c:	f000 fb62 	bl	8004bd4 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004510:	2501      	movs	r5, #1
 8004512:	e7c7      	b.n	80044a4 <USBH_HandleControl+0x38>
      phost->Control.timer = (uint16_t)phost->Timer;
 8004514:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8004518:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800451a:	7903      	ldrb	r3, [r0, #4]
 800451c:	8982      	ldrh	r2, [r0, #12]
 800451e:	6881      	ldr	r1, [r0, #8]
 8004520:	f000 fa69 	bl	80049f6 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 8004524:	2304      	movs	r3, #4
 8004526:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004528:	2501      	movs	r5, #1
      break;
 800452a:	e7bb      	b.n	80044a4 <USBH_HandleControl+0x38>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800452c:	7901      	ldrb	r1, [r0, #4]
 800452e:	f002 f841 	bl	80065b4 <USBH_LL_GetURBState>
 8004532:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8004534:	2801      	cmp	r0, #1
 8004536:	d005      	beq.n	8004544 <USBH_HandleControl+0xd8>
      if (URB_Status == USBH_URB_STALL)
 8004538:	2d05      	cmp	r5, #5
 800453a:	d00e      	beq.n	800455a <USBH_HandleControl+0xee>
        if (URB_Status == USBH_URB_ERROR)
 800453c:	2d04      	cmp	r5, #4
 800453e:	d016      	beq.n	800456e <USBH_HandleControl+0x102>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004540:	2501      	movs	r5, #1
 8004542:	e7af      	b.n	80044a4 <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_STATUS_OUT;
 8004544:	2309      	movs	r3, #9
 8004546:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004548:	2103      	movs	r1, #3
 800454a:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800454e:	2200      	movs	r2, #0
 8004550:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004554:	f000 fb3e 	bl	8004bd4 <osMessagePut>
 8004558:	e7ee      	b.n	8004538 <USBH_HandleControl+0xcc>
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800455a:	2503      	movs	r5, #3
 800455c:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004560:	2200      	movs	r2, #0
 8004562:	4629      	mov	r1, r5
 8004564:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004568:	f000 fb34 	bl	8004bd4 <osMessagePut>
 800456c:	e79a      	b.n	80044a4 <USBH_HandleControl+0x38>
          phost->Control.state = CTRL_ERROR;
 800456e:	230b      	movs	r3, #11
 8004570:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004572:	2103      	movs	r1, #3
 8004574:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004578:	2200      	movs	r2, #0
 800457a:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800457e:	f000 fb29 	bl	8004bd4 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004582:	2501      	movs	r5, #1
 8004584:	e78e      	b.n	80044a4 <USBH_HandleControl+0x38>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8004586:	2501      	movs	r5, #1
 8004588:	9500      	str	r5, [sp, #0]
 800458a:	7943      	ldrb	r3, [r0, #5]
 800458c:	8982      	ldrh	r2, [r0, #12]
 800458e:	6881      	ldr	r1, [r0, #8]
 8004590:	f000 fa1b 	bl	80049ca <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8004594:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8004598:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800459a:	2306      	movs	r3, #6
 800459c:	7623      	strb	r3, [r4, #24]
      break;
 800459e:	e781      	b.n	80044a4 <USBH_HandleControl+0x38>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80045a0:	7941      	ldrb	r1, [r0, #5]
 80045a2:	f002 f807 	bl	80065b4 <USBH_LL_GetURBState>
 80045a6:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 80045a8:	2801      	cmp	r0, #1
 80045aa:	d007      	beq.n	80045bc <USBH_HandleControl+0x150>
      else if (URB_Status == USBH_URB_STALL)
 80045ac:	2805      	cmp	r0, #5
 80045ae:	d010      	beq.n	80045d2 <USBH_HandleControl+0x166>
      else if (URB_Status == USBH_URB_NOTREADY)
 80045b0:	2802      	cmp	r0, #2
 80045b2:	d01a      	beq.n	80045ea <USBH_HandleControl+0x17e>
        if (URB_Status == USBH_URB_ERROR)
 80045b4:	2804      	cmp	r0, #4
 80045b6:	d024      	beq.n	8004602 <USBH_HandleControl+0x196>
  USBH_StatusTypeDef status = USBH_BUSY;
 80045b8:	2501      	movs	r5, #1
 80045ba:	e773      	b.n	80044a4 <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_STATUS_IN;
 80045bc:	2307      	movs	r3, #7
 80045be:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80045c0:	2103      	movs	r1, #3
 80045c2:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80045cc:	f000 fb02 	bl	8004bd4 <osMessagePut>
 80045d0:	e768      	b.n	80044a4 <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_STALLED;
 80045d2:	230c      	movs	r3, #12
 80045d4:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80045d6:	2503      	movs	r5, #3
 80045d8:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80045dc:	2200      	movs	r2, #0
 80045de:	4629      	mov	r1, r5
 80045e0:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80045e4:	f000 faf6 	bl	8004bd4 <osMessagePut>
 80045e8:	e75c      	b.n	80044a4 <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_DATA_OUT;
 80045ea:	2305      	movs	r3, #5
 80045ec:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80045ee:	2103      	movs	r1, #3
 80045f0:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80045f4:	2200      	movs	r2, #0
 80045f6:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80045fa:	f000 faeb 	bl	8004bd4 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 80045fe:	2501      	movs	r5, #1
 8004600:	e750      	b.n	80044a4 <USBH_HandleControl+0x38>
          phost->Control.state = CTRL_ERROR;
 8004602:	230b      	movs	r3, #11
 8004604:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004606:	2103      	movs	r1, #3
 8004608:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800460c:	2200      	movs	r2, #0
 800460e:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004612:	f000 fadf 	bl	8004bd4 <osMessagePut>
          status = USBH_FAIL;
 8004616:	2502      	movs	r5, #2
 8004618:	e744      	b.n	80044a4 <USBH_HandleControl+0x38>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800461a:	7903      	ldrb	r3, [r0, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	4611      	mov	r1, r2
 8004620:	f000 f9e9 	bl	80049f6 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8004624:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8004628:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800462a:	2308      	movs	r3, #8
 800462c:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800462e:	2501      	movs	r5, #1
      break;
 8004630:	e738      	b.n	80044a4 <USBH_HandleControl+0x38>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8004632:	7901      	ldrb	r1, [r0, #4]
 8004634:	f001 ffbe 	bl	80065b4 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8004638:	2801      	cmp	r0, #1
 800463a:	d005      	beq.n	8004648 <USBH_HandleControl+0x1dc>
      else if (URB_Status == USBH_URB_ERROR)
 800463c:	2804      	cmp	r0, #4
 800463e:	d00f      	beq.n	8004660 <USBH_HandleControl+0x1f4>
        if (URB_Status == USBH_URB_STALL)
 8004640:	2805      	cmp	r0, #5
 8004642:	d019      	beq.n	8004678 <USBH_HandleControl+0x20c>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004644:	2501      	movs	r5, #1
 8004646:	e72d      	b.n	80044a4 <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_COMPLETE;
 8004648:	230d      	movs	r3, #13
 800464a:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800464c:	2103      	movs	r1, #3
 800464e:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004652:	2200      	movs	r2, #0
 8004654:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004658:	f000 fabc 	bl	8004bd4 <osMessagePut>
        status = USBH_OK;
 800465c:	2500      	movs	r5, #0
 800465e:	e721      	b.n	80044a4 <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_ERROR;
 8004660:	230b      	movs	r3, #11
 8004662:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004664:	2103      	movs	r1, #3
 8004666:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800466a:	2200      	movs	r2, #0
 800466c:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004670:	f000 fab0 	bl	8004bd4 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004674:	2501      	movs	r5, #1
 8004676:	e715      	b.n	80044a4 <USBH_HandleControl+0x38>
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004678:	2503      	movs	r5, #3
 800467a:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800467e:	2200      	movs	r2, #0
 8004680:	4629      	mov	r1, r5
 8004682:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004686:	f000 faa5 	bl	8004bd4 <osMessagePut>
 800468a:	e70b      	b.n	80044a4 <USBH_HandleControl+0x38>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800468c:	2501      	movs	r5, #1
 800468e:	9500      	str	r5, [sp, #0]
 8004690:	7943      	ldrb	r3, [r0, #5]
 8004692:	2200      	movs	r2, #0
 8004694:	4611      	mov	r1, r2
 8004696:	f000 f998 	bl	80049ca <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800469a:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800469e:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80046a0:	230a      	movs	r3, #10
 80046a2:	7623      	strb	r3, [r4, #24]
      break;
 80046a4:	e6fe      	b.n	80044a4 <USBH_HandleControl+0x38>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80046a6:	7941      	ldrb	r1, [r0, #5]
 80046a8:	f001 ff84 	bl	80065b4 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80046ac:	2801      	cmp	r0, #1
 80046ae:	d005      	beq.n	80046bc <USBH_HandleControl+0x250>
      else if (URB_Status == USBH_URB_NOTREADY)
 80046b0:	2802      	cmp	r0, #2
 80046b2:	d00f      	beq.n	80046d4 <USBH_HandleControl+0x268>
        if (URB_Status == USBH_URB_ERROR)
 80046b4:	2804      	cmp	r0, #4
 80046b6:	d019      	beq.n	80046ec <USBH_HandleControl+0x280>
  USBH_StatusTypeDef status = USBH_BUSY;
 80046b8:	2501      	movs	r5, #1
 80046ba:	e6f3      	b.n	80044a4 <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_COMPLETE;
 80046bc:	230d      	movs	r3, #13
 80046be:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80046c0:	2103      	movs	r1, #3
 80046c2:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80046cc:	f000 fa82 	bl	8004bd4 <osMessagePut>
        status = USBH_OK;
 80046d0:	2500      	movs	r5, #0
 80046d2:	e6e7      	b.n	80044a4 <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_STATUS_OUT;
 80046d4:	2309      	movs	r3, #9
 80046d6:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80046d8:	2103      	movs	r1, #3
 80046da:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80046de:	2200      	movs	r2, #0
 80046e0:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80046e4:	f000 fa76 	bl	8004bd4 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 80046e8:	2501      	movs	r5, #1
 80046ea:	e6db      	b.n	80044a4 <USBH_HandleControl+0x38>
          phost->Control.state = CTRL_ERROR;
 80046ec:	230b      	movs	r3, #11
 80046ee:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80046f0:	2103      	movs	r1, #3
 80046f2:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80046fc:	f000 fa6a 	bl	8004bd4 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004700:	2501      	movs	r5, #1
 8004702:	e6cf      	b.n	80044a4 <USBH_HandleControl+0x38>
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8004704:	7e43      	ldrb	r3, [r0, #25]
 8004706:	3301      	adds	r3, #1
 8004708:	b2db      	uxtb	r3, r3
 800470a:	7643      	strb	r3, [r0, #25]
 800470c:	2b02      	cmp	r3, #2
 800470e:	d803      	bhi.n	8004718 <USBH_HandleControl+0x2ac>
        phost->Control.state = CTRL_SETUP;
 8004710:	2501      	movs	r5, #1
 8004712:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 8004714:	7085      	strb	r5, [r0, #2]
 8004716:	e6c5      	b.n	80044a4 <USBH_HandleControl+0x38>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8004718:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 800471c:	2106      	movs	r1, #6
 800471e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8004720:	2500      	movs	r5, #0
 8004722:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8004724:	7961      	ldrb	r1, [r4, #5]
 8004726:	4620      	mov	r0, r4
 8004728:	f000 f9e6 	bl	8004af8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800472c:	7921      	ldrb	r1, [r4, #4]
 800472e:	4620      	mov	r0, r4
 8004730:	f000 f9e2 	bl	8004af8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8004734:	7025      	strb	r5, [r4, #0]
        status = USBH_FAIL;
 8004736:	2502      	movs	r5, #2
 8004738:	e6b4      	b.n	80044a4 <USBH_HandleControl+0x38>
  switch (phost->Control.state)
 800473a:	2501      	movs	r5, #1
 800473c:	e6b2      	b.n	80044a4 <USBH_HandleControl+0x38>

0800473e <USBH_GetNextDesc>:
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800473e:	7803      	ldrb	r3, [r0, #0]
 8004740:	880a      	ldrh	r2, [r1, #0]
 8004742:	4413      	add	r3, r2
 8004744:	800b      	strh	r3, [r1, #0]
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8004746:	7803      	ldrb	r3, [r0, #0]
}
 8004748:	4418      	add	r0, r3
 800474a:	4770      	bx	lr

0800474c <USBH_ParseCfgDesc>:
{
 800474c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	460c      	mov	r4, r1
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8004754:	780b      	ldrb	r3, [r1, #0]
 8004756:	7003      	strb	r3, [r0, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8004758:	784b      	ldrb	r3, [r1, #1]
 800475a:	7043      	strb	r3, [r0, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800475c:	788b      	ldrb	r3, [r1, #2]
 800475e:	78c9      	ldrb	r1, [r1, #3]
 8004760:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004764:	8043      	strh	r3, [r0, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8004766:	7923      	ldrb	r3, [r4, #4]
 8004768:	7103      	strb	r3, [r0, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800476a:	7963      	ldrb	r3, [r4, #5]
 800476c:	7143      	strb	r3, [r0, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800476e:	79a3      	ldrb	r3, [r4, #6]
 8004770:	7183      	strb	r3, [r0, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8004772:	79e3      	ldrb	r3, [r4, #7]
 8004774:	71c3      	strb	r3, [r0, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8004776:	7a23      	ldrb	r3, [r4, #8]
 8004778:	7203      	strb	r3, [r0, #8]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800477a:	2a09      	cmp	r2, #9
 800477c:	d944      	bls.n	8004808 <USBH_ParseCfgDesc+0xbc>
 800477e:	4605      	mov	r5, r0
    ptr = USB_LEN_CFG_DESC;
 8004780:	2309      	movs	r3, #9
 8004782:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t                      if_ix = 0U;
 8004786:	2600      	movs	r6, #0
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8004788:	2e01      	cmp	r6, #1
 800478a:	d83d      	bhi.n	8004808 <USBH_ParseCfgDesc+0xbc>
 800478c:	886a      	ldrh	r2, [r5, #2]
 800478e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004792:	429a      	cmp	r2, r3
 8004794:	d938      	bls.n	8004808 <USBH_ParseCfgDesc+0xbc>
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8004796:	f10d 0106 	add.w	r1, sp, #6
 800479a:	4620      	mov	r0, r4
 800479c:	f7ff ffcf 	bl	800473e <USBH_GetNextDesc>
 80047a0:	4604      	mov	r4, r0
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80047a2:	7843      	ldrb	r3, [r0, #1]
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d1ef      	bne.n	8004788 <USBH_ParseCfgDesc+0x3c>
        pif = &cfg_desc->Itf_Desc[if_ix];
 80047a8:	46b0      	mov	r8, r6
 80047aa:	201a      	movs	r0, #26
 80047ac:	fb00 f006 	mul.w	r0, r0, r6
 80047b0:	3008      	adds	r0, #8
 80047b2:	4428      	add	r0, r5
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80047b4:	4621      	mov	r1, r4
 80047b6:	3002      	adds	r0, #2
 80047b8:	f7ff fe17 	bl	80043ea <USBH_ParseInterfaceDesc>
        ep_ix = 0U;
 80047bc:	2700      	movs	r7, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80047be:	231a      	movs	r3, #26
 80047c0:	fb03 5308 	mla	r3, r3, r8, r5
 80047c4:	7b9b      	ldrb	r3, [r3, #14]
 80047c6:	42bb      	cmp	r3, r7
 80047c8:	d91b      	bls.n	8004802 <USBH_ParseCfgDesc+0xb6>
 80047ca:	886a      	ldrh	r2, [r5, #2]
 80047cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d916      	bls.n	8004802 <USBH_ParseCfgDesc+0xb6>
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80047d4:	f10d 0106 	add.w	r1, sp, #6
 80047d8:	4620      	mov	r0, r4
 80047da:	f7ff ffb0 	bl	800473e <USBH_GetNextDesc>
 80047de:	4604      	mov	r4, r0
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80047e0:	7843      	ldrb	r3, [r0, #1]
 80047e2:	2b05      	cmp	r3, #5
 80047e4:	d1eb      	bne.n	80047be <USBH_ParseCfgDesc+0x72>
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80047e6:	3701      	adds	r7, #1
 80047e8:	201a      	movs	r0, #26
 80047ea:	fb00 f008 	mul.w	r0, r0, r8
 80047ee:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 80047f2:	3008      	adds	r0, #8
 80047f4:	4428      	add	r0, r5
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80047f6:	4621      	mov	r1, r4
 80047f8:	3004      	adds	r0, #4
 80047fa:	f7ff fe09 	bl	8004410 <USBH_ParseEPDesc>
            ep_ix++;
 80047fe:	b2ff      	uxtb	r7, r7
 8004800:	e7dd      	b.n	80047be <USBH_ParseCfgDesc+0x72>
        if_ix++;
 8004802:	3601      	adds	r6, #1
 8004804:	b2f6      	uxtb	r6, r6
 8004806:	e7bf      	b.n	8004788 <USBH_ParseCfgDesc+0x3c>
}
 8004808:	b002      	add	sp, #8
 800480a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800480e <USBH_CtlReq>:
{
 800480e:	b538      	push	{r3, r4, r5, lr}
 8004810:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8004812:	7885      	ldrb	r5, [r0, #2]
 8004814:	2d01      	cmp	r5, #1
 8004816:	d004      	beq.n	8004822 <USBH_CtlReq+0x14>
 8004818:	2d02      	cmp	r5, #2
 800481a:	d011      	beq.n	8004840 <USBH_CtlReq+0x32>
 800481c:	2501      	movs	r5, #1
}
 800481e:	4628      	mov	r0, r5
 8004820:	bd38      	pop	{r3, r4, r5, pc}
      phost->Control.buff = buff;
 8004822:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 8004824:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
 8004826:	2301      	movs	r3, #1
 8004828:	7603      	strb	r3, [r0, #24]
      phost->RequestState = CMD_WAIT;
 800482a:	2302      	movs	r3, #2
 800482c:	7083      	strb	r3, [r0, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800482e:	2103      	movs	r1, #3
 8004830:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004834:	2200      	movs	r2, #0
 8004836:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 800483a:	f000 f9cb 	bl	8004bd4 <osMessagePut>
      break;
 800483e:	e7ee      	b.n	800481e <USBH_CtlReq+0x10>
      status = USBH_HandleControl(phost);
 8004840:	f7ff fe14 	bl	800446c <USBH_HandleControl>
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8004844:	4605      	mov	r5, r0
 8004846:	b130      	cbz	r0, 8004856 <USBH_CtlReq+0x48>
 8004848:	2803      	cmp	r0, #3
 800484a:	d004      	beq.n	8004856 <USBH_CtlReq+0x48>
      else if (status == USBH_FAIL)
 800484c:	2802      	cmp	r0, #2
 800484e:	d106      	bne.n	800485e <USBH_CtlReq+0x50>
        phost->RequestState = CMD_SEND;
 8004850:	2301      	movs	r3, #1
 8004852:	70a3      	strb	r3, [r4, #2]
 8004854:	e003      	b.n	800485e <USBH_CtlReq+0x50>
        phost->RequestState = CMD_SEND;
 8004856:	2301      	movs	r3, #1
 8004858:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 800485a:	2300      	movs	r3, #0
 800485c:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800485e:	2103      	movs	r1, #3
 8004860:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004864:	2200      	movs	r2, #0
 8004866:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800486a:	f000 f9b3 	bl	8004bd4 <osMessagePut>
      break;
 800486e:	e7d6      	b.n	800481e <USBH_CtlReq+0x10>

08004870 <USBH_GetDescriptor>:
{
 8004870:	b538      	push	{r3, r4, r5, lr}
 8004872:	460d      	mov	r5, r1
 8004874:	4614      	mov	r4, r2
 8004876:	4619      	mov	r1, r3
 8004878:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  if (phost->RequestState == CMD_SEND)
 800487c:	7883      	ldrb	r3, [r0, #2]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d002      	beq.n	8004888 <USBH_GetDescriptor+0x18>
  return USBH_CtlReq(phost, buff, length);
 8004882:	f7ff ffc4 	bl	800480e <USBH_CtlReq>
}
 8004886:	bd38      	pop	{r3, r4, r5, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8004888:	f065 057f 	orn	r5, r5, #127	; 0x7f
 800488c:	7405      	strb	r5, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800488e:	2306      	movs	r3, #6
 8004890:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8004892:	8244      	strh	r4, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8004894:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8004898:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 800489c:	d003      	beq.n	80048a6 <USBH_GetDescriptor+0x36>
      phost->Control.setup.b.wIndex.w = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 80048a2:	82c2      	strh	r2, [r0, #22]
 80048a4:	e7ed      	b.n	8004882 <USBH_GetDescriptor+0x12>
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80048a6:	f240 4309 	movw	r3, #1033	; 0x409
 80048aa:	8283      	strh	r3, [r0, #20]
 80048ac:	e7f9      	b.n	80048a2 <USBH_GetDescriptor+0x32>

080048ae <USBH_Get_DevDesc>:
{
 80048ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048b0:	b083      	sub	sp, #12
 80048b2:	4604      	mov	r4, r0
                                   USB_DESC_DEVICE, phost->device.Data,
 80048b4:	f500 768e 	add.w	r6, r0, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80048b8:	460d      	mov	r5, r1
 80048ba:	9100      	str	r1, [sp, #0]
 80048bc:	4633      	mov	r3, r6
 80048be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048c2:	2100      	movs	r1, #0
 80048c4:	f7ff ffd4 	bl	8004870 <USBH_GetDescriptor>
 80048c8:	4607      	mov	r7, r0
 80048ca:	b110      	cbz	r0, 80048d2 <USBH_Get_DevDesc+0x24>
}
 80048cc:	4638      	mov	r0, r7
 80048ce:	b003      	add	sp, #12
 80048d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80048d2:	462a      	mov	r2, r5
 80048d4:	4631      	mov	r1, r6
 80048d6:	f204 3026 	addw	r0, r4, #806	; 0x326
 80048da:	f7ff fd58 	bl	800438e <USBH_ParseDevDesc>
 80048de:	e7f5      	b.n	80048cc <USBH_Get_DevDesc+0x1e>

080048e0 <USBH_Get_CfgDesc>:
{
 80048e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048e2:	b083      	sub	sp, #12
 80048e4:	4604      	mov	r4, r0
 80048e6:	460d      	mov	r5, r1
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80048e8:	f100 061c 	add.w	r6, r0, #28
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80048ec:	9100      	str	r1, [sp, #0]
 80048ee:	4633      	mov	r3, r6
 80048f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048f4:	2100      	movs	r1, #0
 80048f6:	f7ff ffbb 	bl	8004870 <USBH_GetDescriptor>
 80048fa:	4607      	mov	r7, r0
 80048fc:	b110      	cbz	r0, 8004904 <USBH_Get_CfgDesc+0x24>
}
 80048fe:	4638      	mov	r0, r7
 8004900:	b003      	add	sp, #12
 8004902:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8004904:	462a      	mov	r2, r5
 8004906:	4631      	mov	r1, r6
 8004908:	f504 704e 	add.w	r0, r4, #824	; 0x338
 800490c:	f7ff ff1e 	bl	800474c <USBH_ParseCfgDesc>
 8004910:	e7f5      	b.n	80048fe <USBH_Get_CfgDesc+0x1e>

08004912 <USBH_Get_StringDesc>:
{
 8004912:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004914:	b083      	sub	sp, #12
 8004916:	4616      	mov	r6, r2
 8004918:	461d      	mov	r5, r3
                                   phost->device.Data, length)) == USBH_OK)
 800491a:	f500 748e 	add.w	r4, r0, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	4623      	mov	r3, r4
 8004922:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8004926:	2100      	movs	r1, #0
 8004928:	f7ff ffa2 	bl	8004870 <USBH_GetDescriptor>
 800492c:	4607      	mov	r7, r0
 800492e:	b110      	cbz	r0, 8004936 <USBH_Get_StringDesc+0x24>
}
 8004930:	4638      	mov	r0, r7
 8004932:	b003      	add	sp, #12
 8004934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8004936:	462a      	mov	r2, r5
 8004938:	4631      	mov	r1, r6
 800493a:	4620      	mov	r0, r4
 800493c:	f7ff fd78 	bl	8004430 <USBH_ParseStringDesc>
 8004940:	e7f6      	b.n	8004930 <USBH_Get_StringDesc+0x1e>

08004942 <USBH_SetAddress>:
{
 8004942:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8004944:	7883      	ldrb	r3, [r0, #2]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d004      	beq.n	8004954 <USBH_SetAddress+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 800494a:	2200      	movs	r2, #0
 800494c:	4611      	mov	r1, r2
 800494e:	f7ff ff5e 	bl	800480e <USBH_CtlReq>
}
 8004952:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004954:	2300      	movs	r3, #0
 8004956:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004958:	2205      	movs	r2, #5
 800495a:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800495c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800495e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004960:	82c3      	strh	r3, [r0, #22]
 8004962:	e7f2      	b.n	800494a <USBH_SetAddress+0x8>

08004964 <USBH_SetCfg>:
{
 8004964:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8004966:	7883      	ldrb	r3, [r0, #2]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d004      	beq.n	8004976 <USBH_SetCfg+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 800496c:	2200      	movs	r2, #0
 800496e:	4611      	mov	r1, r2
 8004970:	f7ff ff4d 	bl	800480e <USBH_CtlReq>
}
 8004974:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004976:	2300      	movs	r3, #0
 8004978:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800497a:	2209      	movs	r2, #9
 800497c:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800497e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004980:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004982:	82c3      	strh	r3, [r0, #22]
 8004984:	e7f2      	b.n	800496c <USBH_SetCfg+0x8>

08004986 <USBH_SetFeature>:
{
 8004986:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8004988:	7883      	ldrb	r3, [r0, #2]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d004      	beq.n	8004998 <USBH_SetFeature+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 800498e:	2200      	movs	r2, #0
 8004990:	4611      	mov	r1, r2
 8004992:	f7ff ff3c 	bl	800480e <USBH_CtlReq>
}
 8004996:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004998:	2300      	movs	r3, #0
 800499a:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800499c:	2203      	movs	r2, #3
 800499e:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80049a0:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80049a2:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80049a4:	82c3      	strh	r3, [r0, #22]
 80049a6:	e7f2      	b.n	800498e <USBH_SetFeature+0x8>

080049a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80049a8:	b510      	push	{r4, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	460b      	mov	r3, r1
 80049ae:	4611      	mov	r1, r2

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80049b0:	2400      	movs	r4, #0
 80049b2:	9403      	str	r4, [sp, #12]
 80049b4:	2208      	movs	r2, #8
 80049b6:	9202      	str	r2, [sp, #8]
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	9400      	str	r4, [sp, #0]
 80049bc:	4623      	mov	r3, r4
 80049be:	4622      	mov	r2, r4
 80049c0:	f001 fe62 	bl	8006688 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 80049c4:	4620      	mov	r0, r4
 80049c6:	b004      	add	sp, #16
 80049c8:	bd10      	pop	{r4, pc}

080049ca <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80049ca:	b530      	push	{r4, r5, lr}
 80049cc:	b085      	sub	sp, #20
 80049ce:	460c      	mov	r4, r1
 80049d0:	4619      	mov	r1, r3
 80049d2:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80049d6:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 80049da:	b105      	cbz	r5, 80049de <USBH_CtlSendData+0x14>
  {
    do_ping = 0U;
 80049dc:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80049de:	9303      	str	r3, [sp, #12]
 80049e0:	9202      	str	r2, [sp, #8]
 80049e2:	9401      	str	r4, [sp, #4]
 80049e4:	2301      	movs	r3, #1
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2300      	movs	r3, #0
 80049ea:	461a      	mov	r2, r3
 80049ec:	f001 fe4c 	bl	8006688 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 80049f0:	2000      	movs	r0, #0
 80049f2:	b005      	add	sp, #20
 80049f4:	bd30      	pop	{r4, r5, pc}

080049f6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80049f6:	b530      	push	{r4, r5, lr}
 80049f8:	b085      	sub	sp, #20
 80049fa:	460d      	mov	r5, r1
 80049fc:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80049fe:	2400      	movs	r4, #0
 8004a00:	9403      	str	r4, [sp, #12]
 8004a02:	9202      	str	r2, [sp, #8]
 8004a04:	9501      	str	r5, [sp, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	9200      	str	r2, [sp, #0]
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	f001 fe3c 	bl	8006688 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 8004a10:	4620      	mov	r0, r4
 8004a12:	b005      	add	sp, #20
 8004a14:	bd30      	pop	{r4, r5, pc}

08004a16 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8004a16:	b530      	push	{r4, r5, lr}
 8004a18:	b085      	sub	sp, #20
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8004a22:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 8004a26:	b105      	cbz	r5, 8004a2a <USBH_BulkSendData+0x14>
  {
    do_ping = 0U;
 8004a28:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8004a2a:	9303      	str	r3, [sp, #12]
 8004a2c:	9202      	str	r2, [sp, #8]
 8004a2e:	9401      	str	r4, [sp, #4]
 8004a30:	2301      	movs	r3, #1
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	2302      	movs	r3, #2
 8004a36:	2200      	movs	r2, #0
 8004a38:	f001 fe26 	bl	8006688 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	b005      	add	sp, #20
 8004a40:	bd30      	pop	{r4, r5, pc}

08004a42 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8004a42:	b530      	push	{r4, r5, lr}
 8004a44:	b085      	sub	sp, #20
 8004a46:	460d      	mov	r5, r1
 8004a48:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8004a4a:	2400      	movs	r4, #0
 8004a4c:	9403      	str	r4, [sp, #12]
 8004a4e:	9202      	str	r2, [sp, #8]
 8004a50:	9501      	str	r5, [sp, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	9200      	str	r2, [sp, #0]
 8004a56:	2302      	movs	r3, #2
 8004a58:	f001 fe16 	bl	8006688 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	b005      	add	sp, #20
 8004a60:	bd30      	pop	{r4, r5, pc}

08004a62 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8004a62:	b530      	push	{r4, r5, lr}
 8004a64:	b085      	sub	sp, #20
 8004a66:	460d      	mov	r5, r1
 8004a68:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8004a6a:	2400      	movs	r4, #0
 8004a6c:	9403      	str	r4, [sp, #12]
 8004a6e:	9202      	str	r2, [sp, #8]
 8004a70:	9501      	str	r5, [sp, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	9200      	str	r2, [sp, #0]
 8004a76:	2303      	movs	r3, #3
 8004a78:	f001 fe06 	bl	8006688 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
}
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	b005      	add	sp, #20
 8004a80:	bd30      	pop	{r4, r5, pc}

08004a82 <USBH_GetFreePipe>:
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
 8004a82:	2300      	movs	r3, #0
 8004a84:	2b0a      	cmp	r3, #10
 8004a86:	d80c      	bhi.n	8004aa2 <USBH_GetFreePipe+0x20>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8004a88:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8004a8c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004a90:	6852      	ldr	r2, [r2, #4]
 8004a92:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004a96:	d002      	beq.n	8004a9e <USBH_GetFreePipe+0x1c>
  for (idx = 0U ; idx < 11U ; idx++)
 8004a98:	3301      	adds	r3, #1
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	e7f2      	b.n	8004a84 <USBH_GetFreePipe+0x2>
    {
      return (uint16_t)idx;
 8004a9e:	b298      	uxth	r0, r3
 8004aa0:	4770      	bx	lr
    }
  }

  return 0xFFFFU;
 8004aa2:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8004aa6:	4770      	bx	lr

08004aa8 <USBH_OpenPipe>:
{
 8004aa8:	b510      	push	{r4, lr}
 8004aaa:	b084      	sub	sp, #16
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8004aac:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004ab0:	9402      	str	r4, [sp, #8]
 8004ab2:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004ab6:	9401      	str	r4, [sp, #4]
 8004ab8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004abc:	9400      	str	r4, [sp, #0]
 8004abe:	f001 fdc8 	bl	8006652 <USBH_LL_OpenPipe>
}
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	b004      	add	sp, #16
 8004ac6:	bd10      	pop	{r4, pc}

08004ac8 <USBH_ClosePipe>:
{
 8004ac8:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 8004aca:	f001 fdd5 	bl	8006678 <USBH_LL_ClosePipe>
}
 8004ace:	2000      	movs	r0, #0
 8004ad0:	bd08      	pop	{r3, pc}

08004ad2 <USBH_AllocPipe>:
{
 8004ad2:	b538      	push	{r3, r4, r5, lr}
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	460d      	mov	r5, r1
  pipe =  USBH_GetFreePipe(phost);
 8004ad8:	f7ff ffd3 	bl	8004a82 <USBH_GetFreePipe>
  if (pipe != 0xFFFFU)
 8004adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ae0:	4298      	cmp	r0, r3
 8004ae2:	d007      	beq.n	8004af4 <USBH_AllocPipe+0x22>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8004ae4:	f000 030f 	and.w	r3, r0, #15
 8004ae8:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8004aec:	33e0      	adds	r3, #224	; 0xe0
 8004aee:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004af2:	6065      	str	r5, [r4, #4]
}
 8004af4:	b2c0      	uxtb	r0, r0
 8004af6:	bd38      	pop	{r3, r4, r5, pc}

08004af8 <USBH_FreePipe>:
  if (idx < 11U)
 8004af8:	290a      	cmp	r1, #10
 8004afa:	d806      	bhi.n	8004b0a <USBH_FreePipe+0x12>
    phost->Pipes[idx] &= 0x7FFFU;
 8004afc:	31e0      	adds	r1, #224	; 0xe0
 8004afe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004b02:	684b      	ldr	r3, [r1, #4]
 8004b04:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004b08:	604b      	str	r3, [r1, #4]
}
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	4770      	bx	lr

08004b0e <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8004b0e:	2884      	cmp	r0, #132	; 0x84
 8004b10:	d001      	beq.n	8004b16 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8004b12:	3003      	adds	r0, #3
 8004b14:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b16:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8004b18:	4770      	bx	lr

08004b1a <inHandlerMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b1a:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8004b1e:	3800      	subs	r0, #0
 8004b20:	bf18      	it	ne
 8004b22:	2001      	movne	r0, #1
 8004b24:	4770      	bx	lr

08004b26 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004b26:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004b28:	f000 feaa 	bl	8005880 <vTaskStartScheduler>
  
  return osOK;
}
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	bd08      	pop	{r3, pc}

08004b30 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b34:	b087      	sub	sp, #28
 8004b36:	4604      	mov	r4, r0
 8004b38:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004b3a:	6945      	ldr	r5, [r0, #20]
 8004b3c:	b1bd      	cbz	r5, 8004b6e <osThreadCreate+0x3e>
 8004b3e:	6986      	ldr	r6, [r0, #24]
 8004b40:	b1ae      	cbz	r6, 8004b6e <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b42:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8004b46:	f8d0 9000 	ldr.w	r9, [r0]
 8004b4a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8004b4e:	f7ff ffde 	bl	8004b0e <makeFreeRtosPriority>
 8004b52:	9602      	str	r6, [sp, #8]
 8004b54:	9501      	str	r5, [sp, #4]
 8004b56:	9000      	str	r0, [sp, #0]
 8004b58:	463b      	mov	r3, r7
 8004b5a:	6922      	ldr	r2, [r4, #16]
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	4640      	mov	r0, r8
 8004b60:	f000 fe20 	bl	80057a4 <xTaskCreateStatic>
 8004b64:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004b66:	9805      	ldr	r0, [sp, #20]
}
 8004b68:	b007      	add	sp, #28
 8004b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b6e:	6865      	ldr	r5, [r4, #4]
 8004b70:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b72:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b76:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8004b7a:	f7ff ffc8 	bl	8004b0e <makeFreeRtosPriority>
 8004b7e:	ab05      	add	r3, sp, #20
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	9000      	str	r0, [sp, #0]
 8004b84:	463b      	mov	r3, r7
 8004b86:	fa1f f288 	uxth.w	r2, r8
 8004b8a:	4631      	mov	r1, r6
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	f000 fe43 	bl	8005818 <xTaskCreate>
 8004b92:	2801      	cmp	r0, #1
 8004b94:	d0e7      	beq.n	8004b66 <osThreadCreate+0x36>
      return NULL;
 8004b96:	2000      	movs	r0, #0
 8004b98:	e7e6      	b.n	8004b68 <osThreadCreate+0x38>

08004b9a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004b9a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004b9c:	b900      	cbnz	r0, 8004ba0 <osDelay+0x6>
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	f000 ffbc 	bl	8005b1c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	bd08      	pop	{r3, pc}

08004ba8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004ba8:	b500      	push	{lr}
 8004baa:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004bac:	6882      	ldr	r2, [r0, #8]
 8004bae:	b142      	cbz	r2, 8004bc2 <osMessageCreate+0x1a>
 8004bb0:	68c3      	ldr	r3, [r0, #12]
 8004bb2:	b133      	cbz	r3, 8004bc2 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	9100      	str	r1, [sp, #0]
 8004bb8:	6841      	ldr	r1, [r0, #4]
 8004bba:	6800      	ldr	r0, [r0, #0]
 8004bbc:	f000 f9b8 	bl	8004f30 <xQueueGenericCreateStatic>
 8004bc0:	e004      	b.n	8004bcc <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	6841      	ldr	r1, [r0, #4]
 8004bc6:	6800      	ldr	r0, [r0, #0]
 8004bc8:	f000 f9fc 	bl	8004fc4 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004bcc:	b003      	add	sp, #12
 8004bce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004bd4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004bd4:	b530      	push	{r4, r5, lr}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	4604      	mov	r4, r0
 8004bda:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8004be0:	4615      	mov	r5, r2
 8004be2:	b902      	cbnz	r2, 8004be6 <osMessagePut+0x12>
    ticks = 1;
 8004be4:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8004be6:	f7ff ff98 	bl	8004b1a <inHandlerMode>
 8004bea:	b198      	cbz	r0, 8004c14 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004bec:	2300      	movs	r3, #0
 8004bee:	aa03      	add	r2, sp, #12
 8004bf0:	a901      	add	r1, sp, #4
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f000 faca 	bl	800518c <xQueueGenericSendFromISR>
 8004bf8:	2801      	cmp	r0, #1
 8004bfa:	d116      	bne.n	8004c2a <osMessagePut+0x56>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004bfc:	9b03      	ldr	r3, [sp, #12]
 8004bfe:	b1b3      	cbz	r3, 8004c2e <osMessagePut+0x5a>
 8004c00:	4b0d      	ldr	r3, [pc, #52]	; (8004c38 <osMessagePut+0x64>)
 8004c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8004c10:	2000      	movs	r0, #0
 8004c12:	e008      	b.n	8004c26 <osMessagePut+0x52>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004c14:	2300      	movs	r3, #0
 8004c16:	462a      	mov	r2, r5
 8004c18:	a901      	add	r1, sp, #4
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f000 f9f6 	bl	800500c <xQueueGenericSend>
 8004c20:	2801      	cmp	r0, #1
 8004c22:	d106      	bne.n	8004c32 <osMessagePut+0x5e>
  return osOK;
 8004c24:	2000      	movs	r0, #0
}
 8004c26:	b005      	add	sp, #20
 8004c28:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 8004c2a:	20ff      	movs	r0, #255	; 0xff
 8004c2c:	e7fb      	b.n	8004c26 <osMessagePut+0x52>
  return osOK;
 8004c2e:	2000      	movs	r0, #0
 8004c30:	e7f9      	b.n	8004c26 <osMessagePut+0x52>
      return osErrorOS;
 8004c32:	20ff      	movs	r0, #255	; 0xff
 8004c34:	e7f7      	b.n	8004c26 <osMessagePut+0x52>
 8004c36:	bf00      	nop
 8004c38:	e000ed04 	.word	0xe000ed04

08004c3c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004c42:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8004c48:	b1d1      	cbz	r1, 8004c80 <osMessageGet+0x44>
 8004c4a:	460d      	mov	r5, r1
 8004c4c:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9303      	str	r3, [sp, #12]
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004c52:	f7ff ff62 	bl	8004b1a <inHandlerMode>
 8004c56:	b1f0      	cbz	r0, 8004c96 <osMessageGet+0x5a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004c58:	aa03      	add	r2, sp, #12
 8004c5a:	a901      	add	r1, sp, #4
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	f000 fbab 	bl	80053b8 <xQueueReceiveFromISR>
 8004c62:	2801      	cmp	r0, #1
 8004c64:	d014      	beq.n	8004c90 <osMessageGet+0x54>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004c6a:	9b03      	ldr	r3, [sp, #12]
 8004c6c:	b1eb      	cbz	r3, 8004caa <osMessageGet+0x6e>
 8004c6e:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <osMessageGet+0x84>)
 8004c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	e014      	b.n	8004caa <osMessageGet+0x6e>
    event.status = osErrorParameter;
 8004c80:	2380      	movs	r3, #128	; 0x80
 8004c82:	9300      	str	r3, [sp, #0]
    return event;
 8004c84:	466b      	mov	r3, sp
 8004c86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004c8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004c8e:	e011      	b.n	8004cb4 <osMessageGet+0x78>
      event.status = osEventMessage;
 8004c90:	2310      	movs	r3, #16
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	e7e9      	b.n	8004c6a <osMessageGet+0x2e>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004c96:	4632      	mov	r2, r6
 8004c98:	a901      	add	r1, sp, #4
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f000 fade 	bl	800525c <xQueueReceive>
 8004ca0:	2801      	cmp	r0, #1
 8004ca2:	d00a      	beq.n	8004cba <osMessageGet+0x7e>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004ca4:	b106      	cbz	r6, 8004ca8 <osMessageGet+0x6c>
 8004ca6:	2640      	movs	r6, #64	; 0x40
 8004ca8:	9600      	str	r6, [sp, #0]
    }
  }
  
  return event;
 8004caa:	466b      	mov	r3, sp
 8004cac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004cb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	b004      	add	sp, #16
 8004cb8:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8004cba:	2310      	movs	r3, #16
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	e7f4      	b.n	8004caa <osMessageGet+0x6e>
 8004cc0:	e000ed04 	.word	0xe000ed04

08004cc4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cc4:	f100 0308 	add.w	r3, r0, #8
 8004cc8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cce:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cd0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cd2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cd8:	4770      	bx	lr

08004cda <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cde:	4770      	bx	lr

08004ce0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ce0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ce2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ce8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004cea:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004cec:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004cee:	6803      	ldr	r3, [r0, #0]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	6003      	str	r3, [r0, #0]
}
 8004cf4:	4770      	bx	lr

08004cf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cf6:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cf8:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cfa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004cfe:	d011      	beq.n	8004d24 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d00:	f100 0308 	add.w	r3, r0, #8
 8004d04:	461c      	mov	r4, r3
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	42aa      	cmp	r2, r5
 8004d0c:	d9fa      	bls.n	8004d04 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d0e:	6863      	ldr	r3, [r4, #4]
 8004d10:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d12:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d14:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d16:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d18:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004d1a:	6803      	ldr	r3, [r0, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	6003      	str	r3, [r0, #0]
}
 8004d20:	bc30      	pop	{r4, r5}
 8004d22:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d24:	6904      	ldr	r4, [r0, #16]
 8004d26:	e7f2      	b.n	8004d0e <vListInsert+0x18>

08004d28 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d28:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d2a:	6841      	ldr	r1, [r0, #4]
 8004d2c:	6882      	ldr	r2, [r0, #8]
 8004d2e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d30:	6841      	ldr	r1, [r0, #4]
 8004d32:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	4282      	cmp	r2, r0
 8004d38:	d006      	beq.n	8004d48 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	3a01      	subs	r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d44:	6818      	ldr	r0, [r3, #0]
}
 8004d46:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d48:	6882      	ldr	r2, [r0, #8]
 8004d4a:	605a      	str	r2, [r3, #4]
 8004d4c:	e7f5      	b.n	8004d3a <uxListRemove+0x12>

08004d4e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d4e:	b510      	push	{r4, lr}
 8004d50:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d52:	f001 f8df 	bl	8005f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d004      	beq.n	8004d68 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8004d5e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8004d60:	f001 f8fa 	bl	8005f58 <vPortExitCritical>

	return xReturn;
}
 8004d64:	4620      	mov	r0, r4
 8004d66:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8004d68:	2401      	movs	r4, #1
 8004d6a:	e7f9      	b.n	8004d60 <prvIsQueueFull+0x12>

08004d6c <prvIsQueueEmpty>:
{
 8004d6c:	b510      	push	{r4, lr}
 8004d6e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004d70:	f001 f8d0 	bl	8005f14 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d76:	b923      	cbnz	r3, 8004d82 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8004d78:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8004d7a:	f001 f8ed 	bl	8005f58 <vPortExitCritical>
}
 8004d7e:	4620      	mov	r0, r4
 8004d80:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8004d82:	2400      	movs	r4, #0
 8004d84:	e7f9      	b.n	8004d7a <prvIsQueueEmpty+0xe>

08004d86 <prvCopyDataToQueue>:
{
 8004d86:	b570      	push	{r4, r5, r6, lr}
 8004d88:	4604      	mov	r4, r0
 8004d8a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d8c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d8e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004d90:	b95a      	cbnz	r2, 8004daa <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d92:	6803      	ldr	r3, [r0, #0]
 8004d94:	b11b      	cbz	r3, 8004d9e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8004d96:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d98:	3601      	adds	r6, #1
 8004d9a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004d9c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d9e:	6880      	ldr	r0, [r0, #8]
 8004da0:	f000 fff6 	bl	8005d90 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60a3      	str	r3, [r4, #8]
 8004da8:	e7f6      	b.n	8004d98 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8004daa:	b96d      	cbnz	r5, 8004dc8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dac:	6840      	ldr	r0, [r0, #4]
 8004dae:	f001 fccb 	bl	8006748 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004db2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004db4:	6863      	ldr	r3, [r4, #4]
 8004db6:	4413      	add	r3, r2
 8004db8:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dba:	68a2      	ldr	r2, [r4, #8]
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d319      	bcc.n	8004df4 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	e7e7      	b.n	8004d98 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004dc8:	68c0      	ldr	r0, [r0, #12]
 8004dca:	f001 fcbd 	bl	8006748 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004dce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004dd0:	4251      	negs	r1, r2
 8004dd2:	68e3      	ldr	r3, [r4, #12]
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dd8:	6822      	ldr	r2, [r4, #0]
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d202      	bcs.n	8004de4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004dde:	68a3      	ldr	r3, [r4, #8]
 8004de0:	440b      	add	r3, r1
 8004de2:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004de4:	2d02      	cmp	r5, #2
 8004de6:	d001      	beq.n	8004dec <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8004de8:	2000      	movs	r0, #0
 8004dea:	e7d5      	b.n	8004d98 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dec:	b126      	cbz	r6, 8004df8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8004dee:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8004df0:	2000      	movs	r0, #0
 8004df2:	e7d1      	b.n	8004d98 <prvCopyDataToQueue+0x12>
 8004df4:	4628      	mov	r0, r5
 8004df6:	e7cf      	b.n	8004d98 <prvCopyDataToQueue+0x12>
 8004df8:	2000      	movs	r0, #0
 8004dfa:	e7cd      	b.n	8004d98 <prvCopyDataToQueue+0x12>

08004dfc <prvCopyDataFromQueue>:
{
 8004dfc:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dfe:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004e00:	b16a      	cbz	r2, 8004e1e <prvCopyDataFromQueue+0x22>
{
 8004e02:	b510      	push	{r4, lr}
 8004e04:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e06:	68d9      	ldr	r1, [r3, #12]
 8004e08:	4411      	add	r1, r2
 8004e0a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e0c:	689c      	ldr	r4, [r3, #8]
 8004e0e:	42a1      	cmp	r1, r4
 8004e10:	d301      	bcc.n	8004e16 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e12:	6819      	ldr	r1, [r3, #0]
 8004e14:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e16:	68d9      	ldr	r1, [r3, #12]
 8004e18:	f001 fc96 	bl	8006748 <memcpy>
}
 8004e1c:	bd10      	pop	{r4, pc}
 8004e1e:	4770      	bx	lr

08004e20 <prvUnlockQueue>:
{
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8004e24:	f001 f876 	bl	8005f14 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004e28:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8004e2c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e2e:	e003      	b.n	8004e38 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8004e30:	f000 ff98 	bl	8005d64 <vTaskMissedYield>
			--cTxLock;
 8004e34:	3c01      	subs	r4, #1
 8004e36:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e38:	2c00      	cmp	r4, #0
 8004e3a:	dd08      	ble.n	8004e4e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e3c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e3e:	b133      	cbz	r3, 8004e4e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e40:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004e44:	f000 fefa 	bl	8005c3c <xTaskRemoveFromEventList>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d0f3      	beq.n	8004e34 <prvUnlockQueue+0x14>
 8004e4c:	e7f0      	b.n	8004e30 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8004e4e:	23ff      	movs	r3, #255	; 0xff
 8004e50:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004e54:	f001 f880 	bl	8005f58 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004e58:	f001 f85c 	bl	8005f14 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004e5c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8004e60:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e62:	e003      	b.n	8004e6c <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8004e64:	f000 ff7e 	bl	8005d64 <vTaskMissedYield>
				--cRxLock;
 8004e68:	3c01      	subs	r4, #1
 8004e6a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e6c:	2c00      	cmp	r4, #0
 8004e6e:	dd08      	ble.n	8004e82 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e70:	692b      	ldr	r3, [r5, #16]
 8004e72:	b133      	cbz	r3, 8004e82 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e74:	f105 0010 	add.w	r0, r5, #16
 8004e78:	f000 fee0 	bl	8005c3c <xTaskRemoveFromEventList>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	d0f3      	beq.n	8004e68 <prvUnlockQueue+0x48>
 8004e80:	e7f0      	b.n	8004e64 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8004e82:	23ff      	movs	r3, #255	; 0xff
 8004e84:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8004e88:	f001 f866 	bl	8005f58 <vPortExitCritical>
}
 8004e8c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004e90 <xQueueGenericReset>:
{
 8004e90:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8004e92:	b1e0      	cbz	r0, 8004ece <xQueueGenericReset+0x3e>
 8004e94:	460d      	mov	r5, r1
 8004e96:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004e98:	f001 f83c 	bl	8005f14 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e9c:	6821      	ldr	r1, [r4, #0]
 8004e9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004ea0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ea2:	fb03 1002 	mla	r0, r3, r2, r1
 8004ea6:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004eac:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004eae:	3a01      	subs	r2, #1
 8004eb0:	fb02 1303 	mla	r3, r2, r3, r1
 8004eb4:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004eb6:	23ff      	movs	r3, #255	; 0xff
 8004eb8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ebc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004ec0:	b9ed      	cbnz	r5, 8004efe <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ec2:	6923      	ldr	r3, [r4, #16]
 8004ec4:	b963      	cbnz	r3, 8004ee0 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8004ec6:	f001 f847 	bl	8005f58 <vPortExitCritical>
}
 8004eca:	2001      	movs	r0, #1
 8004ecc:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004ede:	e7fe      	b.n	8004ede <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ee0:	f104 0010 	add.w	r0, r4, #16
 8004ee4:	f000 feaa 	bl	8005c3c <xTaskRemoveFromEventList>
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	d0ec      	beq.n	8004ec6 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8004eec:	4b08      	ldr	r3, [pc, #32]	; (8004f10 <xQueueGenericReset+0x80>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	e7e3      	b.n	8004ec6 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004efe:	f104 0010 	add.w	r0, r4, #16
 8004f02:	f7ff fedf 	bl	8004cc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004f0a:	f7ff fedb 	bl	8004cc4 <vListInitialise>
 8004f0e:	e7da      	b.n	8004ec6 <xQueueGenericReset+0x36>
 8004f10:	e000ed04 	.word	0xe000ed04

08004f14 <prvInitialiseNewQueue>:
{
 8004f14:	b510      	push	{r4, lr}
 8004f16:	4603      	mov	r3, r0
 8004f18:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	b931      	cbnz	r1, 8004f2c <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f1e:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004f20:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f22:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f24:	2101      	movs	r1, #1
 8004f26:	f7ff ffb3 	bl	8004e90 <xQueueGenericReset>
}
 8004f2a:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f2c:	6002      	str	r2, [r0, #0]
 8004f2e:	e7f7      	b.n	8004f20 <prvInitialiseNewQueue+0xc>

08004f30 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f30:	b940      	cbnz	r0, 8004f44 <xQueueGenericCreateStatic+0x14>
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	e7fe      	b.n	8004f42 <xQueueGenericCreateStatic+0x12>
	{
 8004f44:	b530      	push	{r4, r5, lr}
 8004f46:	b085      	sub	sp, #20
 8004f48:	461c      	mov	r4, r3
 8004f4a:	4605      	mov	r5, r0
		configASSERT( pxStaticQueue != NULL );
 8004f4c:	b153      	cbz	r3, 8004f64 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f4e:	b192      	cbz	r2, 8004f76 <xQueueGenericCreateStatic+0x46>
 8004f50:	b989      	cbnz	r1, 8004f76 <xQueueGenericCreateStatic+0x46>
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	e7fe      	b.n	8004f62 <xQueueGenericCreateStatic+0x32>
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8004f74:	e7fe      	b.n	8004f74 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f76:	b16a      	cbz	r2, 8004f94 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f78:	2348      	movs	r3, #72	; 0x48
 8004f7a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f7c:	9b03      	ldr	r3, [sp, #12]
 8004f7e:	2b48      	cmp	r3, #72	; 0x48
 8004f80:	d013      	beq.n	8004faa <xQueueGenericCreateStatic+0x7a>
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	e7fe      	b.n	8004f92 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f94:	2900      	cmp	r1, #0
 8004f96:	d0ef      	beq.n	8004f78 <xQueueGenericCreateStatic+0x48>
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	e7fe      	b.n	8004fa8 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004faa:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fb2:	9400      	str	r4, [sp, #0]
 8004fb4:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004fb8:	4628      	mov	r0, r5
 8004fba:	f7ff ffab 	bl	8004f14 <prvInitialiseNewQueue>
	}
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	b005      	add	sp, #20
 8004fc2:	bd30      	pop	{r4, r5, pc}

08004fc4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fc4:	b940      	cbnz	r0, 8004fd8 <xQueueGenericCreate+0x14>
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	e7fe      	b.n	8004fd6 <xQueueGenericCreate+0x12>
	{
 8004fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	460d      	mov	r5, r1
 8004fde:	4616      	mov	r6, r2
 8004fe0:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe2:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004fe6:	3048      	adds	r0, #72	; 0x48
 8004fe8:	f001 f94a 	bl	8006280 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004fec:	4604      	mov	r4, r0
 8004fee:	b150      	cbz	r0, 8005006 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ff6:	9000      	str	r0, [sp, #0]
 8004ff8:	4633      	mov	r3, r6
 8004ffa:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8004ffe:	4629      	mov	r1, r5
 8005000:	4638      	mov	r0, r7
 8005002:	f7ff ff87 	bl	8004f14 <prvInitialiseNewQueue>
	}
 8005006:	4620      	mov	r0, r4
 8005008:	b003      	add	sp, #12
 800500a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800500c <xQueueGenericSend>:
{
 800500c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800500e:	b085      	sub	sp, #20
 8005010:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005012:	b188      	cbz	r0, 8005038 <xQueueGenericSend+0x2c>
 8005014:	460e      	mov	r6, r1
 8005016:	461d      	mov	r5, r3
 8005018:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800501a:	b1b1      	cbz	r1, 800504a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800501c:	2d02      	cmp	r5, #2
 800501e:	d120      	bne.n	8005062 <xQueueGenericSend+0x56>
 8005020:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005022:	2b01      	cmp	r3, #1
 8005024:	d01d      	beq.n	8005062 <xQueueGenericSend+0x56>
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	e7fe      	b.n	8005036 <xQueueGenericSend+0x2a>
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005048:	e7fe      	b.n	8005048 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800504a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0e5      	beq.n	800501c <xQueueGenericSend+0x10>
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	e7fe      	b.n	8005060 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005062:	f000 fe85 	bl	8005d70 <xTaskGetSchedulerState>
 8005066:	4607      	mov	r7, r0
 8005068:	b958      	cbnz	r0, 8005082 <xQueueGenericSend+0x76>
 800506a:	9b01      	ldr	r3, [sp, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d044      	beq.n	80050fa <xQueueGenericSend+0xee>
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	e7fe      	b.n	8005080 <xQueueGenericSend+0x74>
 8005082:	2700      	movs	r7, #0
 8005084:	e039      	b.n	80050fa <xQueueGenericSend+0xee>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005086:	462a      	mov	r2, r5
 8005088:	4631      	mov	r1, r6
 800508a:	4620      	mov	r0, r4
 800508c:	f7ff fe7b 	bl	8004d86 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005090:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005092:	b96a      	cbnz	r2, 80050b0 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
 8005094:	b138      	cbz	r0, 80050a6 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8005096:	4b3c      	ldr	r3, [pc, #240]	; (8005188 <xQueueGenericSend+0x17c>)
 8005098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80050a6:	f000 ff57 	bl	8005f58 <vPortExitCritical>
				return pdPASS;
 80050aa:	2001      	movs	r0, #1
}
 80050ac:	b005      	add	sp, #20
 80050ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80050b4:	f000 fdc2 	bl	8005c3c <xTaskRemoveFromEventList>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d0f4      	beq.n	80050a6 <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
 80050bc:	4b32      	ldr	r3, [pc, #200]	; (8005188 <xQueueGenericSend+0x17c>)
 80050be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	e7eb      	b.n	80050a6 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 80050ce:	f000 ff43 	bl	8005f58 <vPortExitCritical>
					return errQUEUE_FULL;
 80050d2:	2000      	movs	r0, #0
 80050d4:	e7ea      	b.n	80050ac <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050d6:	a802      	add	r0, sp, #8
 80050d8:	f000 fdf6 	bl	8005cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050dc:	2701      	movs	r7, #1
 80050de:	e019      	b.n	8005114 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
 80050e0:	2300      	movs	r3, #0
 80050e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80050e6:	e021      	b.n	800512c <xQueueGenericSend+0x120>
 80050e8:	2300      	movs	r3, #0
 80050ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050ee:	e023      	b.n	8005138 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
 80050f0:	4620      	mov	r0, r4
 80050f2:	f7ff fe95 	bl	8004e20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050f6:	f000 fc95 	bl	8005a24 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80050fa:	f000 ff0b 	bl	8005f14 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005100:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005102:	429a      	cmp	r2, r3
 8005104:	d3bf      	bcc.n	8005086 <xQueueGenericSend+0x7a>
 8005106:	2d02      	cmp	r5, #2
 8005108:	d0bd      	beq.n	8005086 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800510a:	9b01      	ldr	r3, [sp, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0de      	beq.n	80050ce <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
 8005110:	2f00      	cmp	r7, #0
 8005112:	d0e0      	beq.n	80050d6 <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
 8005114:	f000 ff20 	bl	8005f58 <vPortExitCritical>
		vTaskSuspendAll();
 8005118:	f000 fbf0 	bl	80058fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800511c:	f000 fefa 	bl	8005f14 <vPortEnterCritical>
 8005120:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005124:	b25b      	sxtb	r3, r3
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800512a:	d0d9      	beq.n	80050e0 <xQueueGenericSend+0xd4>
 800512c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005130:	b25b      	sxtb	r3, r3
 8005132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005136:	d0d7      	beq.n	80050e8 <xQueueGenericSend+0xdc>
 8005138:	f000 ff0e 	bl	8005f58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800513c:	a901      	add	r1, sp, #4
 800513e:	a802      	add	r0, sp, #8
 8005140:	f000 fdce 	bl	8005ce0 <xTaskCheckForTimeOut>
 8005144:	b9c8      	cbnz	r0, 800517a <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005146:	4620      	mov	r0, r4
 8005148:	f7ff fe01 	bl	8004d4e <prvIsQueueFull>
 800514c:	2800      	cmp	r0, #0
 800514e:	d0cf      	beq.n	80050f0 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005150:	9901      	ldr	r1, [sp, #4]
 8005152:	f104 0010 	add.w	r0, r4, #16
 8005156:	f000 fd59 	bl	8005c0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800515a:	4620      	mov	r0, r4
 800515c:	f7ff fe60 	bl	8004e20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005160:	f000 fc60 	bl	8005a24 <xTaskResumeAll>
 8005164:	2800      	cmp	r0, #0
 8005166:	d1c8      	bne.n	80050fa <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8005168:	4b07      	ldr	r3, [pc, #28]	; (8005188 <xQueueGenericSend+0x17c>)
 800516a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	e7bf      	b.n	80050fa <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 800517a:	4620      	mov	r0, r4
 800517c:	f7ff fe50 	bl	8004e20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005180:	f000 fc50 	bl	8005a24 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005184:	2000      	movs	r0, #0
 8005186:	e791      	b.n	80050ac <xQueueGenericSend+0xa0>
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <xQueueGenericSendFromISR>:
{
 800518c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005190:	b190      	cbz	r0, 80051b8 <xQueueGenericSendFromISR+0x2c>
 8005192:	4689      	mov	r9, r1
 8005194:	4690      	mov	r8, r2
 8005196:	461f      	mov	r7, r3
 8005198:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800519a:	b1b1      	cbz	r1, 80051ca <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800519c:	2f02      	cmp	r7, #2
 800519e:	d120      	bne.n	80051e2 <xQueueGenericSendFromISR+0x56>
 80051a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d01d      	beq.n	80051e2 <xQueueGenericSendFromISR+0x56>
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	e7fe      	b.n	80051b6 <xQueueGenericSendFromISR+0x2a>
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80051c8:	e7fe      	b.n	80051c8 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0e5      	beq.n	800519c <xQueueGenericSendFromISR+0x10>
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	e7fe      	b.n	80051e0 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051e2:	f000 ffc1 	bl	8006168 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051e6:	f3ef 8611 	mrs	r6, BASEPRI
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80051fe:	429a      	cmp	r2, r3
 8005200:	d306      	bcc.n	8005210 <xQueueGenericSendFromISR+0x84>
 8005202:	2f02      	cmp	r7, #2
 8005204:	d004      	beq.n	8005210 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8005206:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005208:	f386 8811 	msr	BASEPRI, r6
}
 800520c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8005210:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005214:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005216:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005218:	463a      	mov	r2, r7
 800521a:	4649      	mov	r1, r9
 800521c:	4620      	mov	r0, r4
 800521e:	f7ff fdb2 	bl	8004d86 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005222:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005226:	d005      	beq.n	8005234 <xQueueGenericSendFromISR+0xa8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005228:	1c6b      	adds	r3, r5, #1
 800522a:	b25b      	sxtb	r3, r3
 800522c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8005230:	2001      	movs	r0, #1
 8005232:	e7e9      	b.n	8005208 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005236:	b90b      	cbnz	r3, 800523c <xQueueGenericSendFromISR+0xb0>
			xReturn = pdPASS;
 8005238:	2001      	movs	r0, #1
 800523a:	e7e5      	b.n	8005208 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800523c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005240:	f000 fcfc 	bl	8005c3c <xTaskRemoveFromEventList>
 8005244:	b130      	cbz	r0, 8005254 <xQueueGenericSendFromISR+0xc8>
							if( pxHigherPriorityTaskWoken != NULL )
 8005246:	f1b8 0f00 	cmp.w	r8, #0
 800524a:	d005      	beq.n	8005258 <xQueueGenericSendFromISR+0xcc>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800524c:	2001      	movs	r0, #1
 800524e:	f8c8 0000 	str.w	r0, [r8]
 8005252:	e7d9      	b.n	8005208 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8005254:	2001      	movs	r0, #1
 8005256:	e7d7      	b.n	8005208 <xQueueGenericSendFromISR+0x7c>
 8005258:	2001      	movs	r0, #1
 800525a:	e7d5      	b.n	8005208 <xQueueGenericSendFromISR+0x7c>

0800525c <xQueueReceive>:
{
 800525c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800525e:	b085      	sub	sp, #20
 8005260:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005262:	b190      	cbz	r0, 800528a <xQueueReceive+0x2e>
 8005264:	460e      	mov	r6, r1
 8005266:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005268:	b1c1      	cbz	r1, 800529c <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800526a:	f000 fd81 	bl	8005d70 <xTaskGetSchedulerState>
 800526e:	4607      	mov	r7, r0
 8005270:	bb00      	cbnz	r0, 80052b4 <xQueueReceive+0x58>
 8005272:	9b01      	ldr	r3, [sp, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d05c      	beq.n	8005332 <xQueueReceive+0xd6>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	e7fe      	b.n	8005288 <xQueueReceive+0x2c>
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800529a:	e7fe      	b.n	800529a <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800529c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0e3      	beq.n	800526a <xQueueReceive+0xe>
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	e7fe      	b.n	80052b2 <xQueueReceive+0x56>
 80052b4:	2700      	movs	r7, #0
 80052b6:	e03c      	b.n	8005332 <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052b8:	4631      	mov	r1, r6
 80052ba:	4620      	mov	r0, r4
 80052bc:	f7ff fd9e 	bl	8004dfc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052c0:	3d01      	subs	r5, #1
 80052c2:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052c4:	6923      	ldr	r3, [r4, #16]
 80052c6:	b923      	cbnz	r3, 80052d2 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80052c8:	f000 fe46 	bl	8005f58 <vPortExitCritical>
				return pdPASS;
 80052cc:	2001      	movs	r0, #1
}
 80052ce:	b005      	add	sp, #20
 80052d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052d2:	f104 0010 	add.w	r0, r4, #16
 80052d6:	f000 fcb1 	bl	8005c3c <xTaskRemoveFromEventList>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d0f4      	beq.n	80052c8 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80052de:	4b35      	ldr	r3, [pc, #212]	; (80053b4 <xQueueReceive+0x158>)
 80052e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	e7eb      	b.n	80052c8 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80052f0:	f000 fe32 	bl	8005f58 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80052f4:	2000      	movs	r0, #0
 80052f6:	e7ea      	b.n	80052ce <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052f8:	a802      	add	r0, sp, #8
 80052fa:	f000 fce5 	bl	8005cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052fe:	2701      	movs	r7, #1
 8005300:	e021      	b.n	8005346 <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
 8005302:	2300      	movs	r3, #0
 8005304:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005308:	e029      	b.n	800535e <xQueueReceive+0x102>
 800530a:	2300      	movs	r3, #0
 800530c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005310:	e02b      	b.n	800536a <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
 8005312:	4620      	mov	r0, r4
 8005314:	f7ff fd84 	bl	8004e20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005318:	f000 fb84 	bl	8005a24 <xTaskResumeAll>
 800531c:	e009      	b.n	8005332 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800531e:	4620      	mov	r0, r4
 8005320:	f7ff fd7e 	bl	8004e20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005324:	f000 fb7e 	bl	8005a24 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005328:	4620      	mov	r0, r4
 800532a:	f7ff fd1f 	bl	8004d6c <prvIsQueueEmpty>
 800532e:	2800      	cmp	r0, #0
 8005330:	d13d      	bne.n	80053ae <xQueueReceive+0x152>
		taskENTER_CRITICAL();
 8005332:	f000 fdef 	bl	8005f14 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005336:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005338:	2d00      	cmp	r5, #0
 800533a:	d1bd      	bne.n	80052b8 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800533c:	9b01      	ldr	r3, [sp, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0d6      	beq.n	80052f0 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
 8005342:	2f00      	cmp	r7, #0
 8005344:	d0d8      	beq.n	80052f8 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
 8005346:	f000 fe07 	bl	8005f58 <vPortExitCritical>
		vTaskSuspendAll();
 800534a:	f000 fad7 	bl	80058fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800534e:	f000 fde1 	bl	8005f14 <vPortEnterCritical>
 8005352:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005356:	b25b      	sxtb	r3, r3
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800535c:	d0d1      	beq.n	8005302 <xQueueReceive+0xa6>
 800535e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005362:	b25b      	sxtb	r3, r3
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005368:	d0cf      	beq.n	800530a <xQueueReceive+0xae>
 800536a:	f000 fdf5 	bl	8005f58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800536e:	a901      	add	r1, sp, #4
 8005370:	a802      	add	r0, sp, #8
 8005372:	f000 fcb5 	bl	8005ce0 <xTaskCheckForTimeOut>
 8005376:	2800      	cmp	r0, #0
 8005378:	d1d1      	bne.n	800531e <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800537a:	4620      	mov	r0, r4
 800537c:	f7ff fcf6 	bl	8004d6c <prvIsQueueEmpty>
 8005380:	2800      	cmp	r0, #0
 8005382:	d0c6      	beq.n	8005312 <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005384:	9901      	ldr	r1, [sp, #4]
 8005386:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800538a:	f000 fc3f 	bl	8005c0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800538e:	4620      	mov	r0, r4
 8005390:	f7ff fd46 	bl	8004e20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005394:	f000 fb46 	bl	8005a24 <xTaskResumeAll>
 8005398:	2800      	cmp	r0, #0
 800539a:	d1ca      	bne.n	8005332 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 800539c:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <xQueueReceive+0x158>)
 800539e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	e7c1      	b.n	8005332 <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
 80053ae:	2000      	movs	r0, #0
 80053b0:	e78d      	b.n	80052ce <xQueueReceive+0x72>
 80053b2:	bf00      	nop
 80053b4:	e000ed04 	.word	0xe000ed04

080053b8 <xQueueReceiveFromISR>:
{
 80053b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80053bc:	b1c8      	cbz	r0, 80053f2 <xQueueReceiveFromISR+0x3a>
 80053be:	4689      	mov	r9, r1
 80053c0:	4617      	mov	r7, r2
 80053c2:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053c4:	b1f1      	cbz	r1, 8005404 <xQueueReceiveFromISR+0x4c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053c6:	f000 fecf 	bl	8006168 <vPortValidateInterruptPriority>
	__asm volatile
 80053ca:	f3ef 8611 	mrs	r6, BASEPRI
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053de:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053e2:	f1b8 0f00 	cmp.w	r8, #0
 80053e6:	d119      	bne.n	800541c <xQueueReceiveFromISR+0x64>
			xReturn = pdFAIL;
 80053e8:	2000      	movs	r0, #0
	__asm volatile
 80053ea:	f386 8811 	msr	BASEPRI, r6
}
 80053ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005402:	e7fe      	b.n	8005402 <xQueueReceiveFromISR+0x4a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005404:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0dd      	beq.n	80053c6 <xQueueReceiveFromISR+0xe>
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	e7fe      	b.n	800541a <xQueueReceiveFromISR+0x62>
			const int8_t cRxLock = pxQueue->cRxLock;
 800541c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005420:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005422:	4649      	mov	r1, r9
 8005424:	4620      	mov	r0, r4
 8005426:	f7ff fce9 	bl	8004dfc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800542a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800542e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8005430:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005434:	d005      	beq.n	8005442 <xQueueReceiveFromISR+0x8a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005436:	1c6b      	adds	r3, r5, #1
 8005438:	b25b      	sxtb	r3, r3
 800543a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800543e:	2001      	movs	r0, #1
 8005440:	e7d3      	b.n	80053ea <xQueueReceiveFromISR+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005442:	6923      	ldr	r3, [r4, #16]
 8005444:	b90b      	cbnz	r3, 800544a <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 8005446:	2001      	movs	r0, #1
 8005448:	e7cf      	b.n	80053ea <xQueueReceiveFromISR+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800544a:	f104 0010 	add.w	r0, r4, #16
 800544e:	f000 fbf5 	bl	8005c3c <xTaskRemoveFromEventList>
 8005452:	b118      	cbz	r0, 800545c <xQueueReceiveFromISR+0xa4>
						if( pxHigherPriorityTaskWoken != NULL )
 8005454:	b127      	cbz	r7, 8005460 <xQueueReceiveFromISR+0xa8>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005456:	2001      	movs	r0, #1
 8005458:	6038      	str	r0, [r7, #0]
 800545a:	e7c6      	b.n	80053ea <xQueueReceiveFromISR+0x32>
			xReturn = pdPASS;
 800545c:	2001      	movs	r0, #1
 800545e:	e7c4      	b.n	80053ea <xQueueReceiveFromISR+0x32>
 8005460:	2001      	movs	r0, #1
 8005462:	e7c2      	b.n	80053ea <xQueueReceiveFromISR+0x32>

08005464 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005464:	4b08      	ldr	r3, [pc, #32]	; (8005488 <prvResetNextTaskUnblockTime+0x24>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	b923      	cbnz	r3, 8005476 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800546c:	4b07      	ldr	r3, [pc, #28]	; (800548c <prvResetNextTaskUnblockTime+0x28>)
 800546e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005476:	4b04      	ldr	r3, [pc, #16]	; (8005488 <prvResetNextTaskUnblockTime+0x24>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	4b02      	ldr	r3, [pc, #8]	; (800548c <prvResetNextTaskUnblockTime+0x28>)
 8005482:	601a      	str	r2, [r3, #0]
	}
}
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	2000036c 	.word	0x2000036c
 800548c:	2000043c 	.word	0x2000043c

08005490 <prvInitialiseNewTask>:
{
 8005490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005494:	4680      	mov	r8, r0
 8005496:	4699      	mov	r9, r3
 8005498:	9e08      	ldr	r6, [sp, #32]
 800549a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800549e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054a0:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80054a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80054a6:	3a01      	subs	r2, #1
 80054a8:	eb07 0782 	add.w	r7, r7, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054ac:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 80054b0:	2900      	cmp	r1, #0
 80054b2:	d03e      	beq.n	8005532 <prvInitialiseNewTask+0xa2>
 80054b4:	460d      	mov	r5, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054b6:	2200      	movs	r2, #0
 80054b8:	2a0f      	cmp	r2, #15
 80054ba:	d807      	bhi.n	80054cc <prvInitialiseNewTask+0x3c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054bc:	5ca9      	ldrb	r1, [r5, r2]
 80054be:	18a3      	adds	r3, r4, r2
 80054c0:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80054c4:	5cab      	ldrb	r3, [r5, r2]
 80054c6:	b10b      	cbz	r3, 80054cc <prvInitialiseNewTask+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054c8:	3201      	adds	r2, #1
 80054ca:	e7f5      	b.n	80054b8 <prvInitialiseNewTask+0x28>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054cc:	2300      	movs	r3, #0
 80054ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054d2:	2e06      	cmp	r6, #6
 80054d4:	d900      	bls.n	80054d8 <prvInitialiseNewTask+0x48>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054d6:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 80054d8:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80054da:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80054dc:	2500      	movs	r5, #0
 80054de:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054e0:	1d20      	adds	r0, r4, #4
 80054e2:	f7ff fbfa 	bl	8004cda <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054e6:	f104 0018 	add.w	r0, r4, #24
 80054ea:	f7ff fbf6 	bl	8004cda <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054ee:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054f0:	f1c6 0607 	rsb	r6, r6, #7
 80054f4:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054f6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80054f8:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054fc:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005500:	2260      	movs	r2, #96	; 0x60
 8005502:	4629      	mov	r1, r5
 8005504:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8005508:	f001 f92c 	bl	8006764 <memset>
 800550c:	4b0b      	ldr	r3, [pc, #44]	; (800553c <prvInitialiseNewTask+0xac>)
 800550e:	6523      	str	r3, [r4, #80]	; 0x50
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <prvInitialiseNewTask+0xb0>)
 8005512:	6563      	str	r3, [r4, #84]	; 0x54
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <prvInitialiseNewTask+0xb4>)
 8005516:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005518:	464a      	mov	r2, r9
 800551a:	4641      	mov	r1, r8
 800551c:	4638      	mov	r0, r7
 800551e:	f000 fccf 	bl	8005ec0 <pxPortInitialiseStack>
 8005522:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005524:	f1ba 0f00 	cmp.w	sl, #0
 8005528:	d001      	beq.n	800552e <prvInitialiseNewTask+0x9e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800552a:	f8ca 4000 	str.w	r4, [sl]
}
 800552e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005532:	2300      	movs	r3, #0
 8005534:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8005538:	e7cb      	b.n	80054d2 <prvInitialiseNewTask+0x42>
 800553a:	bf00      	nop
 800553c:	08006a90 	.word	0x08006a90
 8005540:	08006ab0 	.word	0x08006ab0
 8005544:	08006a70 	.word	0x08006a70

08005548 <prvInitialiseTaskLists>:
{
 8005548:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800554a:	2400      	movs	r4, #0
 800554c:	e007      	b.n	800555e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800554e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005552:	0093      	lsls	r3, r2, #2
 8005554:	480e      	ldr	r0, [pc, #56]	; (8005590 <prvInitialiseTaskLists+0x48>)
 8005556:	4418      	add	r0, r3
 8005558:	f7ff fbb4 	bl	8004cc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800555c:	3401      	adds	r4, #1
 800555e:	2c06      	cmp	r4, #6
 8005560:	d9f5      	bls.n	800554e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8005562:	4d0c      	ldr	r5, [pc, #48]	; (8005594 <prvInitialiseTaskLists+0x4c>)
 8005564:	4628      	mov	r0, r5
 8005566:	f7ff fbad 	bl	8004cc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800556a:	4c0b      	ldr	r4, [pc, #44]	; (8005598 <prvInitialiseTaskLists+0x50>)
 800556c:	4620      	mov	r0, r4
 800556e:	f7ff fba9 	bl	8004cc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005572:	480a      	ldr	r0, [pc, #40]	; (800559c <prvInitialiseTaskLists+0x54>)
 8005574:	f7ff fba6 	bl	8004cc4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005578:	4809      	ldr	r0, [pc, #36]	; (80055a0 <prvInitialiseTaskLists+0x58>)
 800557a:	f7ff fba3 	bl	8004cc4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800557e:	4809      	ldr	r0, [pc, #36]	; (80055a4 <prvInitialiseTaskLists+0x5c>)
 8005580:	f7ff fba0 	bl	8004cc4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005584:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <prvInitialiseTaskLists+0x60>)
 8005586:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005588:	4b08      	ldr	r3, [pc, #32]	; (80055ac <prvInitialiseTaskLists+0x64>)
 800558a:	601c      	str	r4, [r3, #0]
}
 800558c:	bd38      	pop	{r3, r4, r5, pc}
 800558e:	bf00      	nop
 8005590:	20000374 	.word	0x20000374
 8005594:	20000414 	.word	0x20000414
 8005598:	20000428 	.word	0x20000428
 800559c:	20000448 	.word	0x20000448
 80055a0:	20000474 	.word	0x20000474
 80055a4:	20000460 	.word	0x20000460
 80055a8:	2000036c 	.word	0x2000036c
 80055ac:	20000370 	.word	0x20000370

080055b0 <prvAddNewTaskToReadyList>:
{
 80055b0:	b510      	push	{r4, lr}
 80055b2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80055b4:	f000 fcae 	bl	8005f14 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80055b8:	4a20      	ldr	r2, [pc, #128]	; (800563c <prvAddNewTaskToReadyList+0x8c>)
 80055ba:	6813      	ldr	r3, [r2, #0]
 80055bc:	3301      	adds	r3, #1
 80055be:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055c0:	4b1f      	ldr	r3, [pc, #124]	; (8005640 <prvAddNewTaskToReadyList+0x90>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	b15b      	cbz	r3, 80055de <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80055c6:	4b1f      	ldr	r3, [pc, #124]	; (8005644 <prvAddNewTaskToReadyList+0x94>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	b96b      	cbnz	r3, 80055e8 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055cc:	4b1c      	ldr	r3, [pc, #112]	; (8005640 <prvAddNewTaskToReadyList+0x90>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d807      	bhi.n	80055e8 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80055d8:	4b19      	ldr	r3, [pc, #100]	; (8005640 <prvAddNewTaskToReadyList+0x90>)
 80055da:	601c      	str	r4, [r3, #0]
 80055dc:	e004      	b.n	80055e8 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80055de:	4b18      	ldr	r3, [pc, #96]	; (8005640 <prvAddNewTaskToReadyList+0x90>)
 80055e0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055e2:	6813      	ldr	r3, [r2, #0]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d026      	beq.n	8005636 <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 80055e8:	4a17      	ldr	r2, [pc, #92]	; (8005648 <prvAddNewTaskToReadyList+0x98>)
 80055ea:	6813      	ldr	r3, [r2, #0]
 80055ec:	3301      	adds	r3, #1
 80055ee:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80055f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80055f2:	2301      	movs	r3, #1
 80055f4:	4083      	lsls	r3, r0
 80055f6:	4a15      	ldr	r2, [pc, #84]	; (800564c <prvAddNewTaskToReadyList+0x9c>)
 80055f8:	6811      	ldr	r1, [r2, #0]
 80055fa:	430b      	orrs	r3, r1
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005602:	1d21      	adds	r1, r4, #4
 8005604:	4b12      	ldr	r3, [pc, #72]	; (8005650 <prvAddNewTaskToReadyList+0xa0>)
 8005606:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800560a:	f7ff fb69 	bl	8004ce0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800560e:	f000 fca3 	bl	8005f58 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005612:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <prvAddNewTaskToReadyList+0x94>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	b16b      	cbz	r3, 8005634 <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005618:	4b09      	ldr	r3, [pc, #36]	; (8005640 <prvAddNewTaskToReadyList+0x90>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005620:	429a      	cmp	r2, r3
 8005622:	d207      	bcs.n	8005634 <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 8005624:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <prvAddNewTaskToReadyList+0xa4>)
 8005626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	f3bf 8f6f 	isb	sy
}
 8005634:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8005636:	f7ff ff87 	bl	8005548 <prvInitialiseTaskLists>
 800563a:	e7d5      	b.n	80055e8 <prvAddNewTaskToReadyList+0x38>
 800563c:	20000400 	.word	0x20000400
 8005640:	20000368 	.word	0x20000368
 8005644:	2000045c 	.word	0x2000045c
 8005648:	2000040c 	.word	0x2000040c
 800564c:	20000410 	.word	0x20000410
 8005650:	20000374 	.word	0x20000374
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <prvDeleteTCB>:
	{
 8005658:	b510      	push	{r4, lr}
 800565a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800565c:	304c      	adds	r0, #76	; 0x4c
 800565e:	f001 f941 	bl	80068e4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005662:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 8005666:	b163      	cbz	r3, 8005682 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005668:	2b01      	cmp	r3, #1
 800566a:	d011      	beq.n	8005690 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800566c:	2b02      	cmp	r3, #2
 800566e:	d00e      	beq.n	800568e <prvDeleteTCB+0x36>
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	e7fe      	b.n	8005680 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8005682:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005684:	f000 fe7a 	bl	800637c <vPortFree>
				vPortFree( pxTCB );
 8005688:	4620      	mov	r0, r4
 800568a:	f000 fe77 	bl	800637c <vPortFree>
	}
 800568e:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005690:	4620      	mov	r0, r4
 8005692:	f000 fe73 	bl	800637c <vPortFree>
 8005696:	e7fa      	b.n	800568e <prvDeleteTCB+0x36>

08005698 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005698:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <prvCheckTasksWaitingTermination+0x40>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	b1d3      	cbz	r3, 80056d4 <prvCheckTasksWaitingTermination+0x3c>
{
 800569e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80056a0:	f000 fc38 	bl	8005f14 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a4:	4b0d      	ldr	r3, [pc, #52]	; (80056dc <prvCheckTasksWaitingTermination+0x44>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056aa:	1d20      	adds	r0, r4, #4
 80056ac:	f7ff fb3c 	bl	8004d28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056b0:	4a0b      	ldr	r2, [pc, #44]	; (80056e0 <prvCheckTasksWaitingTermination+0x48>)
 80056b2:	6813      	ldr	r3, [r2, #0]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056b8:	4a07      	ldr	r2, [pc, #28]	; (80056d8 <prvCheckTasksWaitingTermination+0x40>)
 80056ba:	6813      	ldr	r3, [r2, #0]
 80056bc:	3b01      	subs	r3, #1
 80056be:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80056c0:	f000 fc4a 	bl	8005f58 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80056c4:	4620      	mov	r0, r4
 80056c6:	f7ff ffc7 	bl	8005658 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056ca:	4b03      	ldr	r3, [pc, #12]	; (80056d8 <prvCheckTasksWaitingTermination+0x40>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e6      	bne.n	80056a0 <prvCheckTasksWaitingTermination+0x8>
}
 80056d2:	bd10      	pop	{r4, pc}
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	20000404 	.word	0x20000404
 80056dc:	20000474 	.word	0x20000474
 80056e0:	20000400 	.word	0x20000400

080056e4 <prvIdleTask>:
{
 80056e4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80056e6:	f7ff ffd7 	bl	8005698 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056ea:	4b06      	ldr	r3, [pc, #24]	; (8005704 <prvIdleTask+0x20>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d9f9      	bls.n	80056e6 <prvIdleTask+0x2>
				taskYIELD();
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <prvIdleTask+0x24>)
 80056f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	e7f0      	b.n	80056e6 <prvIdleTask+0x2>
 8005704:	20000374 	.word	0x20000374
 8005708:	e000ed04 	.word	0xe000ed04

0800570c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	4604      	mov	r4, r0
 8005710:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005712:	4b1d      	ldr	r3, [pc, #116]	; (8005788 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005714:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005716:	4b1d      	ldr	r3, [pc, #116]	; (800578c <prvAddCurrentTaskToDelayedList+0x80>)
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	3004      	adds	r0, #4
 800571c:	f7ff fb04 	bl	8004d28 <uxListRemove>
 8005720:	b950      	cbnz	r0, 8005738 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005722:	4b1a      	ldr	r3, [pc, #104]	; (800578c <prvAddCurrentTaskToDelayedList+0x80>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005728:	2301      	movs	r3, #1
 800572a:	fa03 f202 	lsl.w	r2, r3, r2
 800572e:	4918      	ldr	r1, [pc, #96]	; (8005790 <prvAddCurrentTaskToDelayedList+0x84>)
 8005730:	680b      	ldr	r3, [r1, #0]
 8005732:	ea23 0302 	bic.w	r3, r3, r2
 8005736:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005738:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800573c:	d00d      	beq.n	800575a <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800573e:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005740:	4b12      	ldr	r3, [pc, #72]	; (800578c <prvAddCurrentTaskToDelayedList+0x80>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005746:	42a6      	cmp	r6, r4
 8005748:	d910      	bls.n	800576c <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800574a:	4b12      	ldr	r3, [pc, #72]	; (8005794 <prvAddCurrentTaskToDelayedList+0x88>)
 800574c:	6818      	ldr	r0, [r3, #0]
 800574e:	4b0f      	ldr	r3, [pc, #60]	; (800578c <prvAddCurrentTaskToDelayedList+0x80>)
 8005750:	6819      	ldr	r1, [r3, #0]
 8005752:	3104      	adds	r1, #4
 8005754:	f7ff facf 	bl	8004cf6 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005758:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800575a:	2d00      	cmp	r5, #0
 800575c:	d0ef      	beq.n	800573e <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800575e:	4b0b      	ldr	r3, [pc, #44]	; (800578c <prvAddCurrentTaskToDelayedList+0x80>)
 8005760:	6819      	ldr	r1, [r3, #0]
 8005762:	3104      	adds	r1, #4
 8005764:	480c      	ldr	r0, [pc, #48]	; (8005798 <prvAddCurrentTaskToDelayedList+0x8c>)
 8005766:	f7ff fabb 	bl	8004ce0 <vListInsertEnd>
 800576a:	e7f5      	b.n	8005758 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <prvAddCurrentTaskToDelayedList+0x90>)
 800576e:	6818      	ldr	r0, [r3, #0]
 8005770:	4b06      	ldr	r3, [pc, #24]	; (800578c <prvAddCurrentTaskToDelayedList+0x80>)
 8005772:	6819      	ldr	r1, [r3, #0]
 8005774:	3104      	adds	r1, #4
 8005776:	f7ff fabe 	bl	8004cf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800577a:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	42a3      	cmp	r3, r4
 8005780:	d9ea      	bls.n	8005758 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
 8005782:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005784:	601c      	str	r4, [r3, #0]
}
 8005786:	e7e7      	b.n	8005758 <prvAddCurrentTaskToDelayedList+0x4c>
 8005788:	20000488 	.word	0x20000488
 800578c:	20000368 	.word	0x20000368
 8005790:	20000410 	.word	0x20000410
 8005794:	20000370 	.word	0x20000370
 8005798:	20000460 	.word	0x20000460
 800579c:	2000036c 	.word	0x2000036c
 80057a0:	2000043c 	.word	0x2000043c

080057a4 <xTaskCreateStatic>:
	{
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80057aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80057ac:	b175      	cbz	r5, 80057cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057ae:	b1b4      	cbz	r4, 80057de <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80057b0:	26b4      	movs	r6, #180	; 0xb4
 80057b2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057b4:	9e04      	ldr	r6, [sp, #16]
 80057b6:	2eb4      	cmp	r6, #180	; 0xb4
 80057b8:	d01a      	beq.n	80057f0 <xTaskCreateStatic+0x4c>
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	e7fe      	b.n	80057ca <xTaskCreateStatic+0x26>
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80057dc:	e7fe      	b.n	80057dc <xTaskCreateStatic+0x38>
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80057ee:	e7fe      	b.n	80057ee <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057f0:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057f2:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057f4:	2502      	movs	r5, #2
 80057f6:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057fa:	2500      	movs	r5, #0
 80057fc:	9503      	str	r5, [sp, #12]
 80057fe:	9402      	str	r4, [sp, #8]
 8005800:	ad05      	add	r5, sp, #20
 8005802:	9501      	str	r5, [sp, #4]
 8005804:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005806:	9500      	str	r5, [sp, #0]
 8005808:	f7ff fe42 	bl	8005490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800580c:	4620      	mov	r0, r4
 800580e:	f7ff fecf 	bl	80055b0 <prvAddNewTaskToReadyList>
	}
 8005812:	9805      	ldr	r0, [sp, #20]
 8005814:	b006      	add	sp, #24
 8005816:	bd70      	pop	{r4, r5, r6, pc}

08005818 <xTaskCreate>:
	{
 8005818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800581c:	b085      	sub	sp, #20
 800581e:	4607      	mov	r7, r0
 8005820:	4688      	mov	r8, r1
 8005822:	4614      	mov	r4, r2
 8005824:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005826:	0090      	lsls	r0, r2, #2
 8005828:	f000 fd2a 	bl	8006280 <pvPortMalloc>
			if( pxStack != NULL )
 800582c:	b300      	cbz	r0, 8005870 <xTaskCreate+0x58>
 800582e:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005830:	20b4      	movs	r0, #180	; 0xb4
 8005832:	f000 fd25 	bl	8006280 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005836:	4605      	mov	r5, r0
 8005838:	b1b0      	cbz	r0, 8005868 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800583a:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800583e:	b1e5      	cbz	r5, 800587a <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005840:	2300      	movs	r3, #0
 8005842:	f885 30b1 	strb.w	r3, [r5, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005846:	9303      	str	r3, [sp, #12]
 8005848:	9502      	str	r5, [sp, #8]
 800584a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800584c:	9301      	str	r3, [sp, #4]
 800584e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	4633      	mov	r3, r6
 8005854:	4622      	mov	r2, r4
 8005856:	4641      	mov	r1, r8
 8005858:	4638      	mov	r0, r7
 800585a:	f7ff fe19 	bl	8005490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800585e:	4628      	mov	r0, r5
 8005860:	f7ff fea6 	bl	80055b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005864:	2001      	movs	r0, #1
 8005866:	e005      	b.n	8005874 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8005868:	4648      	mov	r0, r9
 800586a:	f000 fd87 	bl	800637c <vPortFree>
 800586e:	e7e6      	b.n	800583e <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8005874:	b005      	add	sp, #20
 8005876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800587a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800587e:	e7f9      	b.n	8005874 <xTaskCreate+0x5c>

08005880 <vTaskStartScheduler>:
{
 8005880:	b510      	push	{r4, lr}
 8005882:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005884:	2400      	movs	r4, #0
 8005886:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005888:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800588a:	aa07      	add	r2, sp, #28
 800588c:	a906      	add	r1, sp, #24
 800588e:	a805      	add	r0, sp, #20
 8005890:	f7fa fe22 	bl	80004d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005894:	9b05      	ldr	r3, [sp, #20]
 8005896:	9302      	str	r3, [sp, #8]
 8005898:	9b06      	ldr	r3, [sp, #24]
 800589a:	9301      	str	r3, [sp, #4]
 800589c:	9400      	str	r4, [sp, #0]
 800589e:	4623      	mov	r3, r4
 80058a0:	9a07      	ldr	r2, [sp, #28]
 80058a2:	490f      	ldr	r1, [pc, #60]	; (80058e0 <vTaskStartScheduler+0x60>)
 80058a4:	480f      	ldr	r0, [pc, #60]	; (80058e4 <vTaskStartScheduler+0x64>)
 80058a6:	f7ff ff7d 	bl	80057a4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80058aa:	b1b8      	cbz	r0, 80058dc <vTaskStartScheduler+0x5c>
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058bc:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <vTaskStartScheduler+0x68>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	334c      	adds	r3, #76	; 0x4c
 80058c2:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <vTaskStartScheduler+0x6c>)
 80058c4:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80058c6:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <vTaskStartScheduler+0x70>)
 80058c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058ce:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <vTaskStartScheduler+0x74>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058d4:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <vTaskStartScheduler+0x78>)
 80058d6:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80058d8:	f000 fbbe 	bl	8006058 <xPortStartScheduler>
}
 80058dc:	b008      	add	sp, #32
 80058de:	bd10      	pop	{r4, pc}
 80058e0:	08006a68 	.word	0x08006a68
 80058e4:	080056e5 	.word	0x080056e5
 80058e8:	20000368 	.word	0x20000368
 80058ec:	20000030 	.word	0x20000030
 80058f0:	2000043c 	.word	0x2000043c
 80058f4:	2000045c 	.word	0x2000045c
 80058f8:	20000488 	.word	0x20000488

080058fc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80058fc:	4a02      	ldr	r2, [pc, #8]	; (8005908 <vTaskSuspendAll+0xc>)
 80058fe:	6813      	ldr	r3, [r2, #0]
 8005900:	3301      	adds	r3, #1
 8005902:	6013      	str	r3, [r2, #0]
}
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	20000408 	.word	0x20000408

0800590c <xTaskIncrementTick>:
{
 800590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800590e:	4b3a      	ldr	r3, [pc, #232]	; (80059f8 <xTaskIncrementTick+0xec>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d169      	bne.n	80059ea <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005916:	4b39      	ldr	r3, [pc, #228]	; (80059fc <xTaskIncrementTick+0xf0>)
 8005918:	681d      	ldr	r5, [r3, #0]
 800591a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800591c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800591e:	b9c5      	cbnz	r5, 8005952 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8005920:	4b37      	ldr	r3, [pc, #220]	; (8005a00 <xTaskIncrementTick+0xf4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	b143      	cbz	r3, 800593a <xTaskIncrementTick+0x2e>
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	e7fe      	b.n	8005938 <xTaskIncrementTick+0x2c>
 800593a:	4a31      	ldr	r2, [pc, #196]	; (8005a00 <xTaskIncrementTick+0xf4>)
 800593c:	6811      	ldr	r1, [r2, #0]
 800593e:	4b31      	ldr	r3, [pc, #196]	; (8005a04 <xTaskIncrementTick+0xf8>)
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	6010      	str	r0, [r2, #0]
 8005944:	6019      	str	r1, [r3, #0]
 8005946:	4a30      	ldr	r2, [pc, #192]	; (8005a08 <xTaskIncrementTick+0xfc>)
 8005948:	6813      	ldr	r3, [r2, #0]
 800594a:	3301      	adds	r3, #1
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	f7ff fd89 	bl	8005464 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005952:	4b2e      	ldr	r3, [pc, #184]	; (8005a0c <xTaskIncrementTick+0x100>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	42ab      	cmp	r3, r5
 8005958:	d93d      	bls.n	80059d6 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800595a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800595c:	4b2c      	ldr	r3, [pc, #176]	; (8005a10 <xTaskIncrementTick+0x104>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005966:	009a      	lsls	r2, r3, #2
 8005968:	4b2a      	ldr	r3, [pc, #168]	; (8005a14 <xTaskIncrementTick+0x108>)
 800596a:	589b      	ldr	r3, [r3, r2]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d900      	bls.n	8005972 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8005970:	2401      	movs	r4, #1
			if( xYieldPending != pdFALSE )
 8005972:	4b29      	ldr	r3, [pc, #164]	; (8005a18 <xTaskIncrementTick+0x10c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d03c      	beq.n	80059f4 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800597a:	2401      	movs	r4, #1
	return xSwitchRequired;
 800597c:	e03a      	b.n	80059f4 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800597e:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005980:	4b1f      	ldr	r3, [pc, #124]	; (8005a00 <xTaskIncrementTick+0xf4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	b343      	cbz	r3, 80059da <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005988:	4b1d      	ldr	r3, [pc, #116]	; (8005a00 <xTaskIncrementTick+0xf4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005990:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8005992:	429d      	cmp	r5, r3
 8005994:	d326      	bcc.n	80059e4 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005996:	1d37      	adds	r7, r6, #4
 8005998:	4638      	mov	r0, r7
 800599a:	f7ff f9c5 	bl	8004d28 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800599e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80059a0:	b11b      	cbz	r3, 80059aa <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059a2:	f106 0018 	add.w	r0, r6, #24
 80059a6:	f7ff f9bf 	bl	8004d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059aa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80059ac:	2201      	movs	r2, #1
 80059ae:	409a      	lsls	r2, r3
 80059b0:	491a      	ldr	r1, [pc, #104]	; (8005a1c <xTaskIncrementTick+0x110>)
 80059b2:	6808      	ldr	r0, [r1, #0]
 80059b4:	4302      	orrs	r2, r0
 80059b6:	600a      	str	r2, [r1, #0]
 80059b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80059bc:	009a      	lsls	r2, r3, #2
 80059be:	4639      	mov	r1, r7
 80059c0:	4814      	ldr	r0, [pc, #80]	; (8005a14 <xTaskIncrementTick+0x108>)
 80059c2:	4410      	add	r0, r2
 80059c4:	f7ff f98c 	bl	8004ce0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059c8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80059ca:	4b11      	ldr	r3, [pc, #68]	; (8005a10 <xTaskIncrementTick+0x104>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d2d4      	bcs.n	800597e <xTaskIncrementTick+0x72>
 80059d4:	e7d4      	b.n	8005980 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 80059d6:	2400      	movs	r4, #0
 80059d8:	e7d2      	b.n	8005980 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059da:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <xTaskIncrementTick+0x100>)
 80059dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059e0:	601a      	str	r2, [r3, #0]
					break;
 80059e2:	e7bb      	b.n	800595c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80059e4:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <xTaskIncrementTick+0x100>)
 80059e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059e8:	e7b8      	b.n	800595c <xTaskIncrementTick+0x50>
		++xPendedTicks;
 80059ea:	4a0d      	ldr	r2, [pc, #52]	; (8005a20 <xTaskIncrementTick+0x114>)
 80059ec:	6813      	ldr	r3, [r2, #0]
 80059ee:	3301      	adds	r3, #1
 80059f0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80059f2:	2400      	movs	r4, #0
}
 80059f4:	4620      	mov	r0, r4
 80059f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f8:	20000408 	.word	0x20000408
 80059fc:	20000488 	.word	0x20000488
 8005a00:	2000036c 	.word	0x2000036c
 8005a04:	20000370 	.word	0x20000370
 8005a08:	20000440 	.word	0x20000440
 8005a0c:	2000043c 	.word	0x2000043c
 8005a10:	20000368 	.word	0x20000368
 8005a14:	20000374 	.word	0x20000374
 8005a18:	2000048c 	.word	0x2000048c
 8005a1c:	20000410 	.word	0x20000410
 8005a20:	20000444 	.word	0x20000444

08005a24 <xTaskResumeAll>:
{
 8005a24:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8005a26:	4b34      	ldr	r3, [pc, #208]	; (8005af8 <xTaskResumeAll+0xd4>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	b943      	cbnz	r3, 8005a3e <xTaskResumeAll+0x1a>
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	e7fe      	b.n	8005a3c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8005a3e:	f000 fa69 	bl	8005f14 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005a42:	4b2d      	ldr	r3, [pc, #180]	; (8005af8 <xTaskResumeAll+0xd4>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	3a01      	subs	r2, #1
 8005a48:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d14d      	bne.n	8005aec <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a50:	4b2a      	ldr	r3, [pc, #168]	; (8005afc <xTaskResumeAll+0xd8>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	b90b      	cbnz	r3, 8005a5a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8005a56:	2400      	movs	r4, #0
 8005a58:	e049      	b.n	8005aee <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
 8005a5a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a5c:	4b28      	ldr	r3, [pc, #160]	; (8005b00 <xTaskResumeAll+0xdc>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	b31b      	cbz	r3, 8005aaa <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a62:	4b27      	ldr	r3, [pc, #156]	; (8005b00 <xTaskResumeAll+0xdc>)
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a68:	f104 0018 	add.w	r0, r4, #24
 8005a6c:	f7ff f95c 	bl	8004d28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a70:	1d25      	adds	r5, r4, #4
 8005a72:	4628      	mov	r0, r5
 8005a74:	f7ff f958 	bl	8004d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	4083      	lsls	r3, r0
 8005a7e:	4a21      	ldr	r2, [pc, #132]	; (8005b04 <xTaskResumeAll+0xe0>)
 8005a80:	6811      	ldr	r1, [r2, #0]
 8005a82:	430b      	orrs	r3, r1
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	4b1e      	ldr	r3, [pc, #120]	; (8005b08 <xTaskResumeAll+0xe4>)
 8005a8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005a92:	f7ff f925 	bl	8004ce0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a98:	4b1c      	ldr	r3, [pc, #112]	; (8005b0c <xTaskResumeAll+0xe8>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d3dc      	bcc.n	8005a5c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8005aa2:	4b1b      	ldr	r3, [pc, #108]	; (8005b10 <xTaskResumeAll+0xec>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	e7d8      	b.n	8005a5c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8005aaa:	b10c      	cbz	r4, 8005ab0 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8005aac:	f7ff fcda 	bl	8005464 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ab0:	4b18      	ldr	r3, [pc, #96]	; (8005b14 <xTaskResumeAll+0xf0>)
 8005ab2:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005ab4:	b974      	cbnz	r4, 8005ad4 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
 8005ab6:	4b16      	ldr	r3, [pc, #88]	; (8005b10 <xTaskResumeAll+0xec>)
 8005ab8:	681c      	ldr	r4, [r3, #0]
 8005aba:	b1c4      	cbz	r4, 8005aee <xTaskResumeAll+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 8005abc:	4b16      	ldr	r3, [pc, #88]	; (8005b18 <xTaskResumeAll+0xf4>)
 8005abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005acc:	2401      	movs	r4, #1
 8005ace:	e00e      	b.n	8005aee <xTaskResumeAll+0xca>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ad0:	3c01      	subs	r4, #1
 8005ad2:	d007      	beq.n	8005ae4 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
 8005ad4:	f7ff ff1a 	bl	800590c <xTaskIncrementTick>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	d0f9      	beq.n	8005ad0 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8005adc:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <xTaskResumeAll+0xec>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	e7f5      	b.n	8005ad0 <xTaskResumeAll+0xac>
						xPendedTicks = 0;
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <xTaskResumeAll+0xf0>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	e7e4      	b.n	8005ab6 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8005aec:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005aee:	f000 fa33 	bl	8005f58 <vPortExitCritical>
}
 8005af2:	4620      	mov	r0, r4
 8005af4:	bd38      	pop	{r3, r4, r5, pc}
 8005af6:	bf00      	nop
 8005af8:	20000408 	.word	0x20000408
 8005afc:	20000400 	.word	0x20000400
 8005b00:	20000448 	.word	0x20000448
 8005b04:	20000410 	.word	0x20000410
 8005b08:	20000374 	.word	0x20000374
 8005b0c:	20000368 	.word	0x20000368
 8005b10:	2000048c 	.word	0x2000048c
 8005b14:	20000444 	.word	0x20000444
 8005b18:	e000ed04 	.word	0xe000ed04

08005b1c <vTaskDelay>:
	{
 8005b1c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b1e:	b1a8      	cbz	r0, 8005b4c <vTaskDelay+0x30>
 8005b20:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8005b22:	4b0f      	ldr	r3, [pc, #60]	; (8005b60 <vTaskDelay+0x44>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	b143      	cbz	r3, 8005b3a <vTaskDelay+0x1e>
 8005b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	e7fe      	b.n	8005b38 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005b3a:	f7ff fedf 	bl	80058fc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b3e:	2100      	movs	r1, #0
 8005b40:	4620      	mov	r0, r4
 8005b42:	f7ff fde3 	bl	800570c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005b46:	f7ff ff6d 	bl	8005a24 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005b4a:	b938      	cbnz	r0, 8005b5c <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8005b4c:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <vTaskDelay+0x48>)
 8005b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	f3bf 8f6f 	isb	sy
	}
 8005b5c:	bd10      	pop	{r4, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000408 	.word	0x20000408
 8005b64:	e000ed04 	.word	0xe000ed04

08005b68 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b68:	4b22      	ldr	r3, [pc, #136]	; (8005bf4 <vTaskSwitchContext+0x8c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	b11b      	cbz	r3, 8005b76 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8005b6e:	4b22      	ldr	r3, [pc, #136]	; (8005bf8 <vTaskSwitchContext+0x90>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8005b76:	4b20      	ldr	r3, [pc, #128]	; (8005bf8 <vTaskSwitchContext+0x90>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b7c:	4b1f      	ldr	r3, [pc, #124]	; (8005bfc <vTaskSwitchContext+0x94>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b80:	fab3 f383 	clz	r3, r3
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	f1c3 031f 	rsb	r3, r3, #31
 8005b8a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005b8e:	008a      	lsls	r2, r1, #2
 8005b90:	491b      	ldr	r1, [pc, #108]	; (8005c00 <vTaskSwitchContext+0x98>)
 8005b92:	588a      	ldr	r2, [r1, r2]
 8005b94:	b942      	cbnz	r2, 8005ba8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	e7fe      	b.n	8005ba6 <vTaskSwitchContext+0x3e>
{
 8005ba8:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005baa:	4915      	ldr	r1, [pc, #84]	; (8005c00 <vTaskSwitchContext+0x98>)
 8005bac:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005bb0:	0082      	lsls	r2, r0, #2
 8005bb2:	440a      	add	r2, r1
 8005bb4:	6850      	ldr	r0, [r2, #4]
 8005bb6:	6840      	ldr	r0, [r0, #4]
 8005bb8:	6050      	str	r0, [r2, #4]
 8005bba:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8005bbe:	00a2      	lsls	r2, r4, #2
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	3208      	adds	r2, #8
 8005bc4:	4411      	add	r1, r2
 8005bc6:	4288      	cmp	r0, r1
 8005bc8:	d00f      	beq.n	8005bea <vTaskSwitchContext+0x82>
 8005bca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005bce:	009a      	lsls	r2, r3, #2
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <vTaskSwitchContext+0x98>)
 8005bd2:	4413      	add	r3, r2
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <vTaskSwitchContext+0x9c>)
 8005bda:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	334c      	adds	r3, #76	; 0x4c
 8005be0:	4a09      	ldr	r2, [pc, #36]	; (8005c08 <vTaskSwitchContext+0xa0>)
 8005be2:	6013      	str	r3, [r2, #0]
}
 8005be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005be8:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bea:	6840      	ldr	r0, [r0, #4]
 8005bec:	4a04      	ldr	r2, [pc, #16]	; (8005c00 <vTaskSwitchContext+0x98>)
 8005bee:	4422      	add	r2, r4
 8005bf0:	6050      	str	r0, [r2, #4]
 8005bf2:	e7ea      	b.n	8005bca <vTaskSwitchContext+0x62>
 8005bf4:	20000408 	.word	0x20000408
 8005bf8:	2000048c 	.word	0x2000048c
 8005bfc:	20000410 	.word	0x20000410
 8005c00:	20000374 	.word	0x20000374
 8005c04:	20000368 	.word	0x20000368
 8005c08:	20000030 	.word	0x20000030

08005c0c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005c0c:	b158      	cbz	r0, 8005c26 <vTaskPlaceOnEventList+0x1a>
{
 8005c0e:	b510      	push	{r4, lr}
 8005c10:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c12:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <vTaskPlaceOnEventList+0x2c>)
 8005c14:	6819      	ldr	r1, [r3, #0]
 8005c16:	3118      	adds	r1, #24
 8005c18:	f7ff f86d 	bl	8004cf6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	4620      	mov	r0, r4
 8005c20:	f7ff fd74 	bl	800570c <prvAddCurrentTaskToDelayedList>
}
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8005c36:	e7fe      	b.n	8005c36 <vTaskPlaceOnEventList+0x2a>
 8005c38:	20000368 	.word	0x20000368

08005c3c <xTaskRemoveFromEventList>:
{
 8005c3c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c3e:	68c3      	ldr	r3, [r0, #12]
 8005c40:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005c42:	b324      	cbz	r4, 8005c8e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c44:	f104 0518 	add.w	r5, r4, #24
 8005c48:	4628      	mov	r0, r5
 8005c4a:	f7ff f86d 	bl	8004d28 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c4e:	4b18      	ldr	r3, [pc, #96]	; (8005cb0 <xTaskRemoveFromEventList+0x74>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	bb2b      	cbnz	r3, 8005ca0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c54:	1d25      	adds	r5, r4, #4
 8005c56:	4628      	mov	r0, r5
 8005c58:	f7ff f866 	bl	8004d28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c5c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005c5e:	2301      	movs	r3, #1
 8005c60:	4083      	lsls	r3, r0
 8005c62:	4a14      	ldr	r2, [pc, #80]	; (8005cb4 <xTaskRemoveFromEventList+0x78>)
 8005c64:	6811      	ldr	r1, [r2, #0]
 8005c66:	430b      	orrs	r3, r1
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c6e:	4629      	mov	r1, r5
 8005c70:	4b11      	ldr	r3, [pc, #68]	; (8005cb8 <xTaskRemoveFromEventList+0x7c>)
 8005c72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005c76:	f7ff f833 	bl	8004ce0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005c7c:	4b0f      	ldr	r3, [pc, #60]	; (8005cbc <xTaskRemoveFromEventList+0x80>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d911      	bls.n	8005caa <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8005c86:	2001      	movs	r0, #1
 8005c88:	4b0d      	ldr	r3, [pc, #52]	; (8005cc0 <xTaskRemoveFromEventList+0x84>)
 8005c8a:	6018      	str	r0, [r3, #0]
 8005c8c:	e00e      	b.n	8005cac <xTaskRemoveFromEventList+0x70>
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005c9e:	e7fe      	b.n	8005c9e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	4808      	ldr	r0, [pc, #32]	; (8005cc4 <xTaskRemoveFromEventList+0x88>)
 8005ca4:	f7ff f81c 	bl	8004ce0 <vListInsertEnd>
 8005ca8:	e7e7      	b.n	8005c7a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8005caa:	2000      	movs	r0, #0
}
 8005cac:	bd38      	pop	{r3, r4, r5, pc}
 8005cae:	bf00      	nop
 8005cb0:	20000408 	.word	0x20000408
 8005cb4:	20000410 	.word	0x20000410
 8005cb8:	20000374 	.word	0x20000374
 8005cbc:	20000368 	.word	0x20000368
 8005cc0:	2000048c 	.word	0x2000048c
 8005cc4:	20000448 	.word	0x20000448

08005cc8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cc8:	4b03      	ldr	r3, [pc, #12]	; (8005cd8 <vTaskInternalSetTimeOutState+0x10>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005cce:	4b03      	ldr	r3, [pc, #12]	; (8005cdc <vTaskInternalSetTimeOutState+0x14>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6043      	str	r3, [r0, #4]
}
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20000440 	.word	0x20000440
 8005cdc:	20000488 	.word	0x20000488

08005ce0 <xTaskCheckForTimeOut>:
{
 8005ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8005ce2:	b1c8      	cbz	r0, 8005d18 <xTaskCheckForTimeOut+0x38>
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8005ce8:	b1f9      	cbz	r1, 8005d2a <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8005cea:	f000 f913 	bl	8005f14 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005cee:	4b1b      	ldr	r3, [pc, #108]	; (8005d5c <xTaskCheckForTimeOut+0x7c>)
 8005cf0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cf2:	686b      	ldr	r3, [r5, #4]
 8005cf4:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8005cf6:	6822      	ldr	r2, [r4, #0]
 8005cf8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005cfc:	d026      	beq.n	8005d4c <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cfe:	682f      	ldr	r7, [r5, #0]
 8005d00:	4e17      	ldr	r6, [pc, #92]	; (8005d60 <xTaskCheckForTimeOut+0x80>)
 8005d02:	6836      	ldr	r6, [r6, #0]
 8005d04:	42b7      	cmp	r7, r6
 8005d06:	d001      	beq.n	8005d0c <xTaskCheckForTimeOut+0x2c>
 8005d08:	428b      	cmp	r3, r1
 8005d0a:	d924      	bls.n	8005d56 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d0c:	4282      	cmp	r2, r0
 8005d0e:	d815      	bhi.n	8005d3c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005d14:	2401      	movs	r4, #1
 8005d16:	e01a      	b.n	8005d4e <xTaskCheckForTimeOut+0x6e>
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8005d28:	e7fe      	b.n	8005d28 <xTaskCheckForTimeOut+0x48>
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8005d3a:	e7fe      	b.n	8005d3a <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8005d3c:	1a5b      	subs	r3, r3, r1
 8005d3e:	4413      	add	r3, r2
 8005d40:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d42:	4628      	mov	r0, r5
 8005d44:	f7ff ffc0 	bl	8005cc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d48:	2400      	movs	r4, #0
 8005d4a:	e000      	b.n	8005d4e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8005d4c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005d4e:	f000 f903 	bl	8005f58 <vPortExitCritical>
}
 8005d52:	4620      	mov	r0, r4
 8005d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8005d56:	2401      	movs	r4, #1
 8005d58:	e7f9      	b.n	8005d4e <xTaskCheckForTimeOut+0x6e>
 8005d5a:	bf00      	nop
 8005d5c:	20000488 	.word	0x20000488
 8005d60:	20000440 	.word	0x20000440

08005d64 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005d64:	4b01      	ldr	r3, [pc, #4]	; (8005d6c <vTaskMissedYield+0x8>)
 8005d66:	2201      	movs	r2, #1
 8005d68:	601a      	str	r2, [r3, #0]
}
 8005d6a:	4770      	bx	lr
 8005d6c:	2000048c 	.word	0x2000048c

08005d70 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005d70:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <xTaskGetSchedulerState+0x18>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	b133      	cbz	r3, 8005d84 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d76:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <xTaskGetSchedulerState+0x1c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	b10b      	cbz	r3, 8005d80 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d7c:	2000      	movs	r0, #0
	}
 8005d7e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8005d80:	2002      	movs	r0, #2
 8005d82:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d84:	2001      	movs	r0, #1
 8005d86:	4770      	bx	lr
 8005d88:	2000045c 	.word	0x2000045c
 8005d8c:	20000408 	.word	0x20000408

08005d90 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d04c      	beq.n	8005e2e <xTaskPriorityDisinherit+0x9e>
	{
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8005d98:	4b27      	ldr	r3, [pc, #156]	; (8005e38 <xTaskPriorityDisinherit+0xa8>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4283      	cmp	r3, r0
 8005d9e:	d008      	beq.n	8005db2 <xTaskPriorityDisinherit+0x22>
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	e7fe      	b.n	8005db0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8005db2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005db4:	b943      	cbnz	r3, 8005dc8 <xTaskPriorityDisinherit+0x38>
 8005db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	e7fe      	b.n	8005dc6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dcc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005dce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005dd0:	4291      	cmp	r1, r2
 8005dd2:	d02e      	beq.n	8005e32 <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dd4:	b10b      	cbz	r3, 8005dda <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8005dd6:	2000      	movs	r0, #0
	}
 8005dd8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dda:	1d05      	adds	r5, r0, #4
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f7fe ffa3 	bl	8004d28 <uxListRemove>
 8005de2:	b970      	cbnz	r0, 8005e02 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005de4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005de6:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4913      	ldr	r1, [pc, #76]	; (8005e3c <xTaskPriorityDisinherit+0xac>)
 8005dee:	58cb      	ldr	r3, [r1, r3]
 8005df0:	b93b      	cbnz	r3, 8005e02 <xTaskPriorityDisinherit+0x72>
 8005df2:	2301      	movs	r3, #1
 8005df4:	fa03 f202 	lsl.w	r2, r3, r2
 8005df8:	4911      	ldr	r1, [pc, #68]	; (8005e40 <xTaskPriorityDisinherit+0xb0>)
 8005dfa:	680b      	ldr	r3, [r1, #0]
 8005dfc:	ea23 0302 	bic.w	r3, r3, r2
 8005e00:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e02:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005e04:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e06:	f1c0 0307 	rsb	r3, r0, #7
 8005e0a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e0c:	2401      	movs	r4, #1
 8005e0e:	fa04 f300 	lsl.w	r3, r4, r0
 8005e12:	4a0b      	ldr	r2, [pc, #44]	; (8005e40 <xTaskPriorityDisinherit+0xb0>)
 8005e14:	6811      	ldr	r1, [r2, #0]
 8005e16:	430b      	orrs	r3, r1
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e1e:	4629      	mov	r1, r5
 8005e20:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <xTaskPriorityDisinherit+0xac>)
 8005e22:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005e26:	f7fe ff5b 	bl	8004ce0 <vListInsertEnd>
					xReturn = pdTRUE;
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	e7d4      	b.n	8005dd8 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8005e2e:	2000      	movs	r0, #0
	}
 8005e30:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8005e32:	2000      	movs	r0, #0
 8005e34:	e7d0      	b.n	8005dd8 <xTaskPriorityDisinherit+0x48>
 8005e36:	bf00      	nop
 8005e38:	20000368 	.word	0x20000368
 8005e3c:	20000374 	.word	0x20000374
 8005e40:	20000410 	.word	0x20000410

08005e44 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e44:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	; (8005e80 <prvTaskExitError+0x3c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e52:	d008      	beq.n	8005e66 <prvTaskExitError+0x22>
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	e7fe      	b.n	8005e64 <prvTaskExitError+0x20>
 8005e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e76:	9b01      	ldr	r3, [sp, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0fc      	beq.n	8005e76 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e7c:	b002      	add	sp, #8
 8005e7e:	4770      	bx	lr
 8005e80:	2000002c 	.word	0x2000002c

08005e84 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e84:	4808      	ldr	r0, [pc, #32]	; (8005ea8 <prvPortStartFirstTask+0x24>)
 8005e86:	6800      	ldr	r0, [r0, #0]
 8005e88:	6800      	ldr	r0, [r0, #0]
 8005e8a:	f380 8808 	msr	MSP, r0
 8005e8e:	f04f 0000 	mov.w	r0, #0
 8005e92:	f380 8814 	msr	CONTROL, r0
 8005e96:	b662      	cpsie	i
 8005e98:	b661      	cpsie	f
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	df00      	svc	0
 8005ea4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ea6:	0000      	.short	0x0000
 8005ea8:	e000ed08 	.word	0xe000ed08

08005eac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005eac:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ebc <vPortEnableVFP+0x10>
 8005eb0:	6801      	ldr	r1, [r0, #0]
 8005eb2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005eb6:	6001      	str	r1, [r0, #0]
 8005eb8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005eba:	0000      	.short	0x0000
 8005ebc:	e000ed88 	.word	0xe000ed88

08005ec0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ec0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ec4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ec8:	f021 0101 	bic.w	r1, r1, #1
 8005ecc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ed0:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <pxPortInitialiseStack+0x28>)
 8005ed2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ed6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005eda:	f06f 0302 	mvn.w	r3, #2
 8005ede:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005ee2:	3844      	subs	r0, #68	; 0x44
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	08005e45 	.word	0x08005e45
 8005eec:	00000000 	.word	0x00000000

08005ef0 <SVC_Handler>:
	__asm volatile (
 8005ef0:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <pxCurrentTCBConst2>)
 8005ef2:	6819      	ldr	r1, [r3, #0]
 8005ef4:	6808      	ldr	r0, [r1, #0]
 8005ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efa:	f380 8809 	msr	PSP, r0
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f04f 0000 	mov.w	r0, #0
 8005f06:	f380 8811 	msr	BASEPRI, r0
 8005f0a:	4770      	bx	lr
 8005f0c:	f3af 8000 	nop.w

08005f10 <pxCurrentTCBConst2>:
 8005f10:	20000368 	.word	0x20000368

08005f14 <vPortEnterCritical>:
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005f24:	4a0a      	ldr	r2, [pc, #40]	; (8005f50 <vPortEnterCritical+0x3c>)
 8005f26:	6813      	ldr	r3, [r2, #0]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d000      	beq.n	8005f32 <vPortEnterCritical+0x1e>
}
 8005f30:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f32:	4b08      	ldr	r3, [pc, #32]	; (8005f54 <vPortEnterCritical+0x40>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f3a:	d0f9      	beq.n	8005f30 <vPortEnterCritical+0x1c>
 8005f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f40:	f383 8811 	msr	BASEPRI, r3
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	e7fe      	b.n	8005f4c <vPortEnterCritical+0x38>
 8005f4e:	bf00      	nop
 8005f50:	2000002c 	.word	0x2000002c
 8005f54:	e000ed04 	.word	0xe000ed04

08005f58 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005f58:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <vPortExitCritical+0x28>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	b943      	cbnz	r3, 8005f70 <vPortExitCritical+0x18>
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	e7fe      	b.n	8005f6e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005f70:	3b01      	subs	r3, #1
 8005f72:	4a03      	ldr	r2, [pc, #12]	; (8005f80 <vPortExitCritical+0x28>)
 8005f74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f76:	b90b      	cbnz	r3, 8005f7c <vPortExitCritical+0x24>
	__asm volatile
 8005f78:	f383 8811 	msr	BASEPRI, r3
}
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	2000002c 	.word	0x2000002c
	...

08005f90 <PendSV_Handler>:
	__asm volatile
 8005f90:	f3ef 8009 	mrs	r0, PSP
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	4b15      	ldr	r3, [pc, #84]	; (8005ff0 <pxCurrentTCBConst>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	f01e 0f10 	tst.w	lr, #16
 8005fa0:	bf08      	it	eq
 8005fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005faa:	6010      	str	r0, [r2, #0]
 8005fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005fb4:	f380 8811 	msr	BASEPRI, r0
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f7ff fdd2 	bl	8005b68 <vTaskSwitchContext>
 8005fc4:	f04f 0000 	mov.w	r0, #0
 8005fc8:	f380 8811 	msr	BASEPRI, r0
 8005fcc:	bc09      	pop	{r0, r3}
 8005fce:	6819      	ldr	r1, [r3, #0]
 8005fd0:	6808      	ldr	r0, [r1, #0]
 8005fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd6:	f01e 0f10 	tst.w	lr, #16
 8005fda:	bf08      	it	eq
 8005fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005fe0:	f380 8809 	msr	PSP, r0
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	f3af 8000 	nop.w

08005ff0 <pxCurrentTCBConst>:
 8005ff0:	20000368 	.word	0x20000368

08005ff4 <SysTick_Handler>:
{
 8005ff4:	b508      	push	{r3, lr}
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006006:	f7ff fc81 	bl	800590c <xTaskIncrementTick>
 800600a:	b118      	cbz	r0, 8006014 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800600c:	4b03      	ldr	r3, [pc, #12]	; (800601c <SysTick_Handler+0x28>)
 800600e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006012:	601a      	str	r2, [r3, #0]
	__asm volatile
 8006014:	2300      	movs	r3, #0
 8006016:	f383 8811 	msr	BASEPRI, r3
}
 800601a:	bd08      	pop	{r3, pc}
 800601c:	e000ed04 	.word	0xe000ed04

08006020 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006020:	4a08      	ldr	r2, [pc, #32]	; (8006044 <vPortSetupTimerInterrupt+0x24>)
 8006022:	2300      	movs	r3, #0
 8006024:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006026:	4908      	ldr	r1, [pc, #32]	; (8006048 <vPortSetupTimerInterrupt+0x28>)
 8006028:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800602a:	4b08      	ldr	r3, [pc, #32]	; (800604c <vPortSetupTimerInterrupt+0x2c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4908      	ldr	r1, [pc, #32]	; (8006050 <vPortSetupTimerInterrupt+0x30>)
 8006030:	fba1 1303 	umull	r1, r3, r1, r3
 8006034:	099b      	lsrs	r3, r3, #6
 8006036:	3b01      	subs	r3, #1
 8006038:	4906      	ldr	r1, [pc, #24]	; (8006054 <vPortSetupTimerInterrupt+0x34>)
 800603a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800603c:	2307      	movs	r3, #7
 800603e:	6013      	str	r3, [r2, #0]
}
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	e000e010 	.word	0xe000e010
 8006048:	e000e018 	.word	0xe000e018
 800604c:	20000000 	.word	0x20000000
 8006050:	10624dd3 	.word	0x10624dd3
 8006054:	e000e014 	.word	0xe000e014

08006058 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006058:	4b3a      	ldr	r3, [pc, #232]	; (8006144 <xPortStartScheduler+0xec>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	4b3a      	ldr	r3, [pc, #232]	; (8006148 <xPortStartScheduler+0xf0>)
 800605e:	429a      	cmp	r2, r3
 8006060:	d029      	beq.n	80060b6 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006062:	4b38      	ldr	r3, [pc, #224]	; (8006144 <xPortStartScheduler+0xec>)
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b39      	ldr	r3, [pc, #228]	; (800614c <xPortStartScheduler+0xf4>)
 8006068:	429a      	cmp	r2, r3
 800606a:	d02d      	beq.n	80060c8 <xPortStartScheduler+0x70>
{
 800606c:	b510      	push	{r4, lr}
 800606e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006070:	4b37      	ldr	r3, [pc, #220]	; (8006150 <xPortStartScheduler+0xf8>)
 8006072:	781a      	ldrb	r2, [r3, #0]
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006078:	22ff      	movs	r2, #255	; 0xff
 800607a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006084:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006088:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800608c:	4a31      	ldr	r2, [pc, #196]	; (8006154 <xPortStartScheduler+0xfc>)
 800608e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006090:	4b31      	ldr	r3, [pc, #196]	; (8006158 <xPortStartScheduler+0x100>)
 8006092:	2207      	movs	r2, #7
 8006094:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006096:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800609a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800609e:	d01c      	beq.n	80060da <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 80060a0:	4a2d      	ldr	r2, [pc, #180]	; (8006158 <xPortStartScheduler+0x100>)
 80060a2:	6813      	ldr	r3, [r2, #0]
 80060a4:	3b01      	subs	r3, #1
 80060a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	f88d 3003 	strb.w	r3, [sp, #3]
 80060b4:	e7ef      	b.n	8006096 <xPortStartScheduler+0x3e>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060c6:	e7fe      	b.n	80060c6 <xPortStartScheduler+0x6e>
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060d8:	e7fe      	b.n	80060d8 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060da:	4b1f      	ldr	r3, [pc, #124]	; (8006158 <xPortStartScheduler+0x100>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d008      	beq.n	80060f4 <xPortStartScheduler+0x9c>
 80060e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e6:	f383 8811 	msr	BASEPRI, r3
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	e7fe      	b.n	80060f2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060f4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060fa:	4a17      	ldr	r2, [pc, #92]	; (8006158 <xPortStartScheduler+0x100>)
 80060fc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060fe:	9b01      	ldr	r3, [sp, #4]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	4a13      	ldr	r2, [pc, #76]	; (8006150 <xPortStartScheduler+0xf8>)
 8006104:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006106:	4b15      	ldr	r3, [pc, #84]	; (800615c <xPortStartScheduler+0x104>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800610e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8006116:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8006118:	f7ff ff82 	bl	8006020 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800611c:	2400      	movs	r4, #0
 800611e:	4b10      	ldr	r3, [pc, #64]	; (8006160 <xPortStartScheduler+0x108>)
 8006120:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8006122:	f7ff fec3 	bl	8005eac <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006126:	4a0f      	ldr	r2, [pc, #60]	; (8006164 <xPortStartScheduler+0x10c>)
 8006128:	6813      	ldr	r3, [r2, #0]
 800612a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800612e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8006130:	f7ff fea8 	bl	8005e84 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006134:	f7ff fd18 	bl	8005b68 <vTaskSwitchContext>
	prvTaskExitError();
 8006138:	f7ff fe84 	bl	8005e44 <prvTaskExitError>
}
 800613c:	4620      	mov	r0, r4
 800613e:	b002      	add	sp, #8
 8006140:	bd10      	pop	{r4, pc}
 8006142:	bf00      	nop
 8006144:	e000ed00 	.word	0xe000ed00
 8006148:	410fc271 	.word	0x410fc271
 800614c:	410fc270 	.word	0x410fc270
 8006150:	e000e400 	.word	0xe000e400
 8006154:	20000490 	.word	0x20000490
 8006158:	20000494 	.word	0x20000494
 800615c:	e000ed20 	.word	0xe000ed20
 8006160:	2000002c 	.word	0x2000002c
 8006164:	e000ef34 	.word	0xe000ef34

08006168 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006168:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800616c:	2b0f      	cmp	r3, #15
 800616e:	d90f      	bls.n	8006190 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006170:	4a10      	ldr	r2, [pc, #64]	; (80061b4 <vPortValidateInterruptPriority+0x4c>)
 8006172:	5c9b      	ldrb	r3, [r3, r2]
 8006174:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006176:	4a10      	ldr	r2, [pc, #64]	; (80061b8 <vPortValidateInterruptPriority+0x50>)
 8006178:	7812      	ldrb	r2, [r2, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d908      	bls.n	8006190 <vPortValidateInterruptPriority+0x28>
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	e7fe      	b.n	800618e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006190:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <vPortValidateInterruptPriority+0x54>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006198:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <vPortValidateInterruptPriority+0x58>)
 800619a:	6812      	ldr	r2, [r2, #0]
 800619c:	4293      	cmp	r3, r2
 800619e:	d908      	bls.n	80061b2 <vPortValidateInterruptPriority+0x4a>
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	e7fe      	b.n	80061b0 <vPortValidateInterruptPriority+0x48>
	}
 80061b2:	4770      	bx	lr
 80061b4:	e000e3f0 	.word	0xe000e3f0
 80061b8:	20000490 	.word	0x20000490
 80061bc:	e000ed0c 	.word	0xe000ed0c
 80061c0:	20000494 	.word	0x20000494

080061c4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061c4:	4a12      	ldr	r2, [pc, #72]	; (8006210 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061c6:	f012 0f07 	tst.w	r2, #7
 80061ca:	d01e      	beq.n	800620a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061cc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061ce:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061d2:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 80061d6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061d8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061da:	480e      	ldr	r0, [pc, #56]	; (8006214 <prvHeapInit+0x50>)
 80061dc:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061de:	2100      	movs	r1, #0
 80061e0:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061e2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80061e4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061e6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80061ea:	480b      	ldr	r0, [pc, #44]	; (8006218 <prvHeapInit+0x54>)
 80061ec:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80061ee:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061f0:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061f2:	1a99      	subs	r1, r3, r2
 80061f4:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061f6:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061f8:	4b08      	ldr	r3, [pc, #32]	; (800621c <prvHeapInit+0x58>)
 80061fa:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061fc:	4b08      	ldr	r3, [pc, #32]	; (8006220 <prvHeapInit+0x5c>)
 80061fe:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006200:	4b08      	ldr	r3, [pc, #32]	; (8006224 <prvHeapInit+0x60>)
 8006202:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006206:	601a      	str	r2, [r3, #0]
}
 8006208:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800620a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800620e:	e7e4      	b.n	80061da <prvHeapInit+0x16>
 8006210:	2000049c 	.word	0x2000049c
 8006214:	200040b0 	.word	0x200040b0
 8006218:	20000498 	.word	0x20000498
 800621c:	200040a4 	.word	0x200040a4
 8006220:	200040a0 	.word	0x200040a0
 8006224:	2000409c 	.word	0x2000409c

08006228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006228:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800622a:	4b13      	ldr	r3, [pc, #76]	; (8006278 <prvInsertBlockIntoFreeList+0x50>)
 800622c:	461a      	mov	r2, r3
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4283      	cmp	r3, r0
 8006232:	d3fb      	bcc.n	800622c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006234:	6851      	ldr	r1, [r2, #4]
 8006236:	1854      	adds	r4, r2, r1
 8006238:	4284      	cmp	r4, r0
 800623a:	d00a      	beq.n	8006252 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800623c:	6841      	ldr	r1, [r0, #4]
 800623e:	1844      	adds	r4, r0, r1
 8006240:	42a3      	cmp	r3, r4
 8006242:	d00b      	beq.n	800625c <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006244:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006246:	4290      	cmp	r0, r2
 8006248:	d000      	beq.n	800624c <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800624a:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800624c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006250:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006252:	6840      	ldr	r0, [r0, #4]
 8006254:	4401      	add	r1, r0
 8006256:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8006258:	4610      	mov	r0, r2
 800625a:	e7ef      	b.n	800623c <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800625c:	4c07      	ldr	r4, [pc, #28]	; (800627c <prvInsertBlockIntoFreeList+0x54>)
 800625e:	6824      	ldr	r4, [r4, #0]
 8006260:	42a3      	cmp	r3, r4
 8006262:	d006      	beq.n	8006272 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	4419      	add	r1, r3
 8006268:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800626a:	6813      	ldr	r3, [r2, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6003      	str	r3, [r0, #0]
 8006270:	e7e9      	b.n	8006246 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006272:	6004      	str	r4, [r0, #0]
 8006274:	e7e7      	b.n	8006246 <prvInsertBlockIntoFreeList+0x1e>
 8006276:	bf00      	nop
 8006278:	200040b0 	.word	0x200040b0
 800627c:	20000498 	.word	0x20000498

08006280 <pvPortMalloc>:
{
 8006280:	b570      	push	{r4, r5, r6, lr}
 8006282:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006284:	f7ff fb3a 	bl	80058fc <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006288:	4b36      	ldr	r3, [pc, #216]	; (8006364 <pvPortMalloc+0xe4>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	b1a3      	cbz	r3, 80062b8 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800628e:	4b36      	ldr	r3, [pc, #216]	; (8006368 <pvPortMalloc+0xe8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	421c      	tst	r4, r3
 8006294:	d14e      	bne.n	8006334 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 8006296:	b134      	cbz	r4, 80062a6 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8006298:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800629a:	f014 0f07 	tst.w	r4, #7
 800629e:	d002      	beq.n	80062a6 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062a0:	f024 0407 	bic.w	r4, r4, #7
 80062a4:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062a6:	2c00      	cmp	r4, #0
 80062a8:	d046      	beq.n	8006338 <pvPortMalloc+0xb8>
 80062aa:	4b30      	ldr	r3, [pc, #192]	; (800636c <pvPortMalloc+0xec>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	42a3      	cmp	r3, r4
 80062b0:	d351      	bcc.n	8006356 <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 80062b2:	4b2f      	ldr	r3, [pc, #188]	; (8006370 <pvPortMalloc+0xf0>)
 80062b4:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062b6:	e004      	b.n	80062c2 <pvPortMalloc+0x42>
			prvHeapInit();
 80062b8:	f7ff ff84 	bl	80061c4 <prvHeapInit>
 80062bc:	e7e7      	b.n	800628e <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80062be:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80062c0:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062c2:	686a      	ldr	r2, [r5, #4]
 80062c4:	42a2      	cmp	r2, r4
 80062c6:	d202      	bcs.n	80062ce <pvPortMalloc+0x4e>
 80062c8:	682a      	ldr	r2, [r5, #0]
 80062ca:	2a00      	cmp	r2, #0
 80062cc:	d1f7      	bne.n	80062be <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80062ce:	4a25      	ldr	r2, [pc, #148]	; (8006364 <pvPortMalloc+0xe4>)
 80062d0:	6812      	ldr	r2, [r2, #0]
 80062d2:	42aa      	cmp	r2, r5
 80062d4:	d041      	beq.n	800635a <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062d6:	681e      	ldr	r6, [r3, #0]
 80062d8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062da:	682a      	ldr	r2, [r5, #0]
 80062dc:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062de:	686b      	ldr	r3, [r5, #4]
 80062e0:	1b1b      	subs	r3, r3, r4
 80062e2:	2b10      	cmp	r3, #16
 80062e4:	d910      	bls.n	8006308 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062e6:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062e8:	f010 0f07 	tst.w	r0, #7
 80062ec:	d008      	beq.n	8006300 <pvPortMalloc+0x80>
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	e7fe      	b.n	80062fe <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006300:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006302:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006304:	f7ff ff90 	bl	8006228 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006308:	686a      	ldr	r2, [r5, #4]
 800630a:	4918      	ldr	r1, [pc, #96]	; (800636c <pvPortMalloc+0xec>)
 800630c:	680b      	ldr	r3, [r1, #0]
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006312:	4918      	ldr	r1, [pc, #96]	; (8006374 <pvPortMalloc+0xf4>)
 8006314:	6809      	ldr	r1, [r1, #0]
 8006316:	428b      	cmp	r3, r1
 8006318:	d201      	bcs.n	800631e <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800631a:	4916      	ldr	r1, [pc, #88]	; (8006374 <pvPortMalloc+0xf4>)
 800631c:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800631e:	4b12      	ldr	r3, [pc, #72]	; (8006368 <pvPortMalloc+0xe8>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4313      	orrs	r3, r2
 8006324:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800632a:	4a13      	ldr	r2, [pc, #76]	; (8006378 <pvPortMalloc+0xf8>)
 800632c:	6813      	ldr	r3, [r2, #0]
 800632e:	3301      	adds	r3, #1
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	e002      	b.n	800633a <pvPortMalloc+0xba>
void *pvReturn = NULL;
 8006334:	2600      	movs	r6, #0
 8006336:	e000      	b.n	800633a <pvPortMalloc+0xba>
 8006338:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800633a:	f7ff fb73 	bl	8005a24 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800633e:	f016 0f07 	tst.w	r6, #7
 8006342:	d00c      	beq.n	800635e <pvPortMalloc+0xde>
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	e7fe      	b.n	8006354 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 8006356:	2600      	movs	r6, #0
 8006358:	e7ef      	b.n	800633a <pvPortMalloc+0xba>
 800635a:	2600      	movs	r6, #0
 800635c:	e7ed      	b.n	800633a <pvPortMalloc+0xba>
}
 800635e:	4630      	mov	r0, r6
 8006360:	bd70      	pop	{r4, r5, r6, pc}
 8006362:	bf00      	nop
 8006364:	20000498 	.word	0x20000498
 8006368:	2000409c 	.word	0x2000409c
 800636c:	200040a0 	.word	0x200040a0
 8006370:	200040b0 	.word	0x200040b0
 8006374:	200040a4 	.word	0x200040a4
 8006378:	200040a8 	.word	0x200040a8

0800637c <vPortFree>:
	if( pv != NULL )
 800637c:	2800      	cmp	r0, #0
 800637e:	d034      	beq.n	80063ea <vPortFree+0x6e>
{
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8006384:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006388:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800638c:	4a17      	ldr	r2, [pc, #92]	; (80063ec <vPortFree+0x70>)
 800638e:	6812      	ldr	r2, [r2, #0]
 8006390:	4213      	tst	r3, r2
 8006392:	d108      	bne.n	80063a6 <vPortFree+0x2a>
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	e7fe      	b.n	80063a4 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063a6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80063aa:	b141      	cbz	r1, 80063be <vPortFree+0x42>
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	e7fe      	b.n	80063bc <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063be:	ea23 0302 	bic.w	r3, r3, r2
 80063c2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80063c6:	f7ff fa99 	bl	80058fc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063ca:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80063ce:	4a08      	ldr	r2, [pc, #32]	; (80063f0 <vPortFree+0x74>)
 80063d0:	6813      	ldr	r3, [r2, #0]
 80063d2:	440b      	add	r3, r1
 80063d4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063d6:	4628      	mov	r0, r5
 80063d8:	f7ff ff26 	bl	8006228 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063dc:	4a05      	ldr	r2, [pc, #20]	; (80063f4 <vPortFree+0x78>)
 80063de:	6813      	ldr	r3, [r2, #0]
 80063e0:	3301      	adds	r3, #1
 80063e2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80063e4:	f7ff fb1e 	bl	8005a24 <xTaskResumeAll>
}
 80063e8:	bd38      	pop	{r3, r4, r5, pc}
 80063ea:	4770      	bx	lr
 80063ec:	2000409c 	.word	0x2000409c
 80063f0:	200040a0 	.word	0x200040a0
 80063f4:	200040ac 	.word	0x200040ac

080063f8 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80063f8:	2904      	cmp	r1, #4
 80063fa:	d00c      	beq.n	8006416 <USBH_UserProcess+0x1e>
 80063fc:	2905      	cmp	r1, #5
 80063fe:	d002      	beq.n	8006406 <USBH_UserProcess+0xe>
 8006400:	2902      	cmp	r1, #2
 8006402:	d004      	beq.n	800640e <USBH_UserProcess+0x16>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006404:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8006406:	4b06      	ldr	r3, [pc, #24]	; (8006420 <USBH_UserProcess+0x28>)
 8006408:	2203      	movs	r2, #3
 800640a:	701a      	strb	r2, [r3, #0]
  break;
 800640c:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 800640e:	4b04      	ldr	r3, [pc, #16]	; (8006420 <USBH_UserProcess+0x28>)
 8006410:	2202      	movs	r2, #2
 8006412:	701a      	strb	r2, [r3, #0]
  break;
 8006414:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 8006416:	4b02      	ldr	r3, [pc, #8]	; (8006420 <USBH_UserProcess+0x28>)
 8006418:	2201      	movs	r2, #1
 800641a:	701a      	strb	r2, [r3, #0]
}
 800641c:	e7f2      	b.n	8006404 <USBH_UserProcess+0xc>
 800641e:	bf00      	nop
 8006420:	200040b8 	.word	0x200040b8

08006424 <MX_USB_HOST_Init>:
{
 8006424:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006426:	2201      	movs	r2, #1
 8006428:	490b      	ldr	r1, [pc, #44]	; (8006458 <MX_USB_HOST_Init+0x34>)
 800642a:	480c      	ldr	r0, [pc, #48]	; (800645c <MX_USB_HOST_Init+0x38>)
 800642c:	f7fd fd30 	bl	8003e90 <USBH_Init>
 8006430:	b948      	cbnz	r0, 8006446 <MX_USB_HOST_Init+0x22>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MTP_CLASS) != USBH_OK)
 8006432:	490b      	ldr	r1, [pc, #44]	; (8006460 <MX_USB_HOST_Init+0x3c>)
 8006434:	4809      	ldr	r0, [pc, #36]	; (800645c <MX_USB_HOST_Init+0x38>)
 8006436:	f7fd fd69 	bl	8003f0c <USBH_RegisterClass>
 800643a:	b938      	cbnz	r0, 800644c <MX_USB_HOST_Init+0x28>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800643c:	4807      	ldr	r0, [pc, #28]	; (800645c <MX_USB_HOST_Init+0x38>)
 800643e:	f7fd fda8 	bl	8003f92 <USBH_Start>
 8006442:	b930      	cbnz	r0, 8006452 <MX_USB_HOST_Init+0x2e>
}
 8006444:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006446:	f7fa f8c3 	bl	80005d0 <Error_Handler>
 800644a:	e7f2      	b.n	8006432 <MX_USB_HOST_Init+0xe>
    Error_Handler();
 800644c:	f7fa f8c0 	bl	80005d0 <Error_Handler>
 8006450:	e7f4      	b.n	800643c <MX_USB_HOST_Init+0x18>
    Error_Handler();
 8006452:	f7fa f8bd 	bl	80005d0 <Error_Handler>
}
 8006456:	e7f5      	b.n	8006444 <MX_USB_HOST_Init+0x20>
 8006458:	080063f9 	.word	0x080063f9
 800645c:	20004158 	.word	0x20004158
 8006460:	2000000c 	.word	0x2000000c

08006464 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006464:	b530      	push	{r4, r5, lr}
 8006466:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006468:	2300      	movs	r3, #0
 800646a:	9303      	str	r3, [sp, #12]
 800646c:	9304      	str	r3, [sp, #16]
 800646e:	9305      	str	r3, [sp, #20]
 8006470:	9306      	str	r3, [sp, #24]
 8006472:	9307      	str	r3, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006474:	6803      	ldr	r3, [r0, #0]
 8006476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800647a:	d001      	beq.n	8006480 <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800647c:	b009      	add	sp, #36	; 0x24
 800647e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006480:	2500      	movs	r5, #0
 8006482:	9501      	str	r5, [sp, #4]
 8006484:	4c17      	ldr	r4, [pc, #92]	; (80064e4 <HAL_HCD_MspInit+0x80>)
 8006486:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006488:	f043 0301 	orr.w	r3, r3, #1
 800648c:	6323      	str	r3, [r4, #48]	; 0x30
 800648e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006498:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800649c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800649e:	2302      	movs	r3, #2
 80064a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064a4:	2303      	movs	r3, #3
 80064a6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80064a8:	230a      	movs	r3, #10
 80064aa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064ac:	a903      	add	r1, sp, #12
 80064ae:	480e      	ldr	r0, [pc, #56]	; (80064e8 <HAL_HCD_MspInit+0x84>)
 80064b0:	f7fa fab6 	bl	8000a20 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80064b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ba:	6363      	str	r3, [r4, #52]	; 0x34
 80064bc:	9502      	str	r5, [sp, #8]
 80064be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80064c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064c4:	6463      	str	r3, [r4, #68]	; 0x44
 80064c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80064c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064cc:	9302      	str	r3, [sp, #8]
 80064ce:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80064d0:	462a      	mov	r2, r5
 80064d2:	2105      	movs	r1, #5
 80064d4:	2043      	movs	r0, #67	; 0x43
 80064d6:	f7fa fa61 	bl	800099c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80064da:	2043      	movs	r0, #67	; 0x43
 80064dc:	f7fa fa92 	bl	8000a04 <HAL_NVIC_EnableIRQ>
}
 80064e0:	e7cc      	b.n	800647c <HAL_HCD_MspInit+0x18>
 80064e2:	bf00      	nop
 80064e4:	40023800 	.word	0x40023800
 80064e8:	40020000 	.word	0x40020000

080064ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80064ec:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 80064ee:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80064f2:	f7fd fef8 	bl	80042e6 <USBH_LL_IncTimer>
}
 80064f6:	bd08      	pop	{r3, pc}

080064f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80064f8:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 80064fa:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80064fe:	f7fd ff0b 	bl	8004318 <USBH_LL_Connect>
}
 8006502:	bd08      	pop	{r3, pc}

08006504 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006504:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 8006506:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800650a:	f7fd ff17 	bl	800433c <USBH_LL_Disconnect>
}
 800650e:	bd08      	pop	{r3, pc}

08006510 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006510:	b508      	push	{r3, lr}
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8006512:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006516:	f7fd ff2f 	bl	8004378 <USBH_LL_NotifyURBChange>
#endif
}
 800651a:	bd08      	pop	{r3, pc}

0800651c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800651c:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 800651e:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006522:	f7fd fee9 	bl	80042f8 <USBH_LL_PortEnabled>
}
 8006526:	bd08      	pop	{r3, pc}

08006528 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006528:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 800652a:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800652e:	f7fd feef 	bl	8004310 <USBH_LL_PortDisabled>
}
 8006532:	bd08      	pop	{r3, pc}

08006534 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006534:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 8006538:	2b01      	cmp	r3, #1
 800653a:	d001      	beq.n	8006540 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 800653c:	2000      	movs	r0, #0
 800653e:	4770      	bx	lr
{
 8006540:	b510      	push	{r4, lr}
 8006542:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.pData = phost;
 8006544:	480f      	ldr	r0, [pc, #60]	; (8006584 <USBH_LL_Init+0x50>)
 8006546:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800654a:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800654e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006552:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006554:	2308      	movs	r3, #8
 8006556:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006558:	2301      	movs	r3, #1
 800655a:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800655c:	2300      	movs	r3, #0
 800655e:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006560:	2202      	movs	r2, #2
 8006562:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006564:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006566:	f7fa fbe1 	bl	8000d2c <HAL_HCD_Init>
 800656a:	b940      	cbnz	r0, 800657e <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800656c:	4805      	ldr	r0, [pc, #20]	; (8006584 <USBH_LL_Init+0x50>)
 800656e:	f7fb f928 	bl	80017c2 <HAL_HCD_GetCurrentFrame>
 8006572:	4601      	mov	r1, r0
 8006574:	4620      	mov	r0, r4
 8006576:	f7fd feb3 	bl	80042e0 <USBH_LL_SetTimer>
}
 800657a:	2000      	movs	r0, #0
 800657c:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800657e:	f7fa f827 	bl	80005d0 <Error_Handler>
 8006582:	e7f3      	b.n	800656c <USBH_LL_Init+0x38>
 8006584:	2000453c 	.word	0x2000453c

08006588 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006588:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800658a:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800658e:	f7fb f91d 	bl	80017cc <HAL_HCD_GetCurrentSpeed>
 8006592:	2801      	cmp	r0, #1
 8006594:	d004      	beq.n	80065a0 <USBH_LL_GetSpeed+0x18>
 8006596:	2802      	cmp	r0, #2
 8006598:	d004      	beq.n	80065a4 <USBH_LL_GetSpeed+0x1c>
 800659a:	b100      	cbz	r0, 800659e <USBH_LL_GetSpeed+0x16>
  case 2 :
    speed = USBH_SPEED_LOW;
    break;

  default:
   speed = USBH_SPEED_FULL;
 800659c:	2001      	movs	r0, #1
    break;
  }
  return  speed;
}
 800659e:	bd08      	pop	{r3, pc}
    speed = USBH_SPEED_FULL;
 80065a0:	2001      	movs	r0, #1
 80065a2:	e7fc      	b.n	800659e <USBH_LL_GetSpeed+0x16>
    speed = USBH_SPEED_LOW;
 80065a4:	2002      	movs	r0, #2
 80065a6:	e7fa      	b.n	800659e <USBH_LL_GetSpeed+0x16>

080065a8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80065a8:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80065aa:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80065ae:	f7fb f903 	bl	80017b8 <HAL_HCD_HC_GetXferCount>
}
 80065b2:	bd08      	pop	{r3, pc}

080065b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80065b4:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80065b6:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80065ba:	f7fb f8f7 	bl	80017ac <HAL_HCD_HC_GetURBState>
}
 80065be:	bd08      	pop	{r3, pc}

080065c0 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80065c0:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 80065c2:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d004      	beq.n	80065d4 <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80065ca:	20c8      	movs	r0, #200	; 0xc8
 80065cc:	f7fa f9c0 	bl	8000950 <HAL_Delay>
  return USBH_OK;
}
 80065d0:	2000      	movs	r0, #0
 80065d2:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 80065d4:	4608      	mov	r0, r1
 80065d6:	f000 f86d 	bl	80066b4 <MX_DriverVbusFS>
 80065da:	e7f6      	b.n	80065ca <USBH_LL_DriverVBUS+0xa>

080065dc <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80065dc:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 80065e0:	232c      	movs	r3, #44	; 0x2c
 80065e2:	fb03 0301 	mla	r3, r3, r1, r0
 80065e6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80065ea:	b133      	cbz	r3, 80065fa <USBH_LL_SetToggle+0x1e>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80065ec:	232c      	movs	r3, #44	; 0x2c
 80065ee:	fb03 0101 	mla	r1, r3, r1, r0
 80065f2:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 80065f6:	2000      	movs	r0, #0
 80065f8:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 80065fa:	232c      	movs	r3, #44	; 0x2c
 80065fc:	fb03 0101 	mla	r1, r3, r1, r0
 8006600:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
 8006604:	e7f7      	b.n	80065f6 <USBH_LL_SetToggle+0x1a>

08006606 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8006606:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8006608:	f7fa f9a2 	bl	8000950 <HAL_Delay>
}
 800660c:	bd08      	pop	{r3, pc}

0800660e <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 800660e:	2802      	cmp	r0, #2
 8006610:	d805      	bhi.n	800661e <USBH_Get_USB_Status+0x10>
 8006612:	e8df f000 	tbb	[pc, r0]
 8006616:	0405      	.short	0x0405
 8006618:	02          	.byte	0x02
 8006619:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800661a:	2001      	movs	r0, #1
    break;
 800661c:	4770      	bx	lr
      usb_status = USBH_FAIL;
 800661e:	2002      	movs	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8006620:	4770      	bx	lr

08006622 <USBH_LL_Start>:
{
 8006622:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 8006624:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8006628:	f7fb f894 	bl	8001754 <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 800662c:	f7ff ffef 	bl	800660e <USBH_Get_USB_Status>
}
 8006630:	bd08      	pop	{r3, pc}

08006632 <USBH_LL_Stop>:
{
 8006632:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 8006634:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8006638:	f7fb f8a1 	bl	800177e <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 800663c:	f7ff ffe7 	bl	800660e <USBH_Get_USB_Status>
}
 8006640:	bd08      	pop	{r3, pc}

08006642 <USBH_LL_ResetPort>:
{
 8006642:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 8006644:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8006648:	f7fb f8ab 	bl	80017a2 <HAL_HCD_ResetPort>
  usb_status = USBH_Get_USB_Status(hal_status);
 800664c:	f7ff ffdf 	bl	800660e <USBH_Get_USB_Status>
}
 8006650:	bd08      	pop	{r3, pc}

08006652 <USBH_LL_OpenPipe>:
{
 8006652:	b510      	push	{r4, lr}
 8006654:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006656:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800665a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800665e:	9402      	str	r4, [sp, #8]
 8006660:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8006664:	9401      	str	r4, [sp, #4]
 8006666:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800666a:	9400      	str	r4, [sp, #0]
 800666c:	f7fa fb05 	bl	8000c7a <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 8006670:	f7ff ffcd 	bl	800660e <USBH_Get_USB_Status>
}
 8006674:	b004      	add	sp, #16
 8006676:	bd10      	pop	{r4, pc}

08006678 <USBH_LL_ClosePipe>:
{
 8006678:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800667a:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800667e:	f7fa fb43 	bl	8000d08 <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 8006682:	f7ff ffc4 	bl	800660e <USBH_Get_USB_Status>
}
 8006686:	bd08      	pop	{r3, pc}

08006688 <USBH_LL_SubmitURB>:
{
 8006688:	b510      	push	{r4, lr}
 800668a:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800668c:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8006690:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8006694:	9403      	str	r4, [sp, #12]
 8006696:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800669a:	9402      	str	r4, [sp, #8]
 800669c:	9c07      	ldr	r4, [sp, #28]
 800669e:	9401      	str	r4, [sp, #4]
 80066a0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80066a4:	9400      	str	r4, [sp, #0]
 80066a6:	f7fa fb8b 	bl	8000dc0 <HAL_HCD_HC_SubmitRequest>
  usb_status =  USBH_Get_USB_Status(hal_status);
 80066aa:	f7ff ffb0 	bl	800660e <USBH_Get_USB_Status>
}
 80066ae:	b004      	add	sp, #16
 80066b0:	bd10      	pop	{r4, pc}
	...

080066b4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80066b4:	b508      	push	{r3, lr}
  uint8_t data = state;
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80066b6:	b930      	cbnz	r0, 80066c6 <MX_DriverVbusFS+0x12>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80066b8:	2201      	movs	r2, #1
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,(GPIO_PinState)data);
 80066ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066be:	4803      	ldr	r0, [pc, #12]	; (80066cc <MX_DriverVbusFS+0x18>)
 80066c0:	f7fa fa86 	bl	8000bd0 <HAL_GPIO_WritePin>
}
 80066c4:	bd08      	pop	{r3, pc}
    data = GPIO_PIN_RESET;
 80066c6:	2200      	movs	r2, #0
 80066c8:	e7f7      	b.n	80066ba <MX_DriverVbusFS+0x6>
 80066ca:	bf00      	nop
 80066cc:	40020800 	.word	0x40020800

080066d0 <__errno>:
 80066d0:	4b01      	ldr	r3, [pc, #4]	; (80066d8 <__errno+0x8>)
 80066d2:	6818      	ldr	r0, [r3, #0]
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	20000030 	.word	0x20000030

080066dc <__libc_init_array>:
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	4d0d      	ldr	r5, [pc, #52]	; (8006714 <__libc_init_array+0x38>)
 80066e0:	4c0d      	ldr	r4, [pc, #52]	; (8006718 <__libc_init_array+0x3c>)
 80066e2:	1b64      	subs	r4, r4, r5
 80066e4:	10a4      	asrs	r4, r4, #2
 80066e6:	2600      	movs	r6, #0
 80066e8:	42a6      	cmp	r6, r4
 80066ea:	d109      	bne.n	8006700 <__libc_init_array+0x24>
 80066ec:	4d0b      	ldr	r5, [pc, #44]	; (800671c <__libc_init_array+0x40>)
 80066ee:	4c0c      	ldr	r4, [pc, #48]	; (8006720 <__libc_init_array+0x44>)
 80066f0:	f000 f970 	bl	80069d4 <_init>
 80066f4:	1b64      	subs	r4, r4, r5
 80066f6:	10a4      	asrs	r4, r4, #2
 80066f8:	2600      	movs	r6, #0
 80066fa:	42a6      	cmp	r6, r4
 80066fc:	d105      	bne.n	800670a <__libc_init_array+0x2e>
 80066fe:	bd70      	pop	{r4, r5, r6, pc}
 8006700:	f855 3b04 	ldr.w	r3, [r5], #4
 8006704:	4798      	blx	r3
 8006706:	3601      	adds	r6, #1
 8006708:	e7ee      	b.n	80066e8 <__libc_init_array+0xc>
 800670a:	f855 3b04 	ldr.w	r3, [r5], #4
 800670e:	4798      	blx	r3
 8006710:	3601      	adds	r6, #1
 8006712:	e7f2      	b.n	80066fa <__libc_init_array+0x1e>
 8006714:	08006ad8 	.word	0x08006ad8
 8006718:	08006ad8 	.word	0x08006ad8
 800671c:	08006ad8 	.word	0x08006ad8
 8006720:	08006adc 	.word	0x08006adc

08006724 <__retarget_lock_acquire_recursive>:
 8006724:	4770      	bx	lr

08006726 <__retarget_lock_release_recursive>:
 8006726:	4770      	bx	lr

08006728 <malloc>:
 8006728:	4b02      	ldr	r3, [pc, #8]	; (8006734 <malloc+0xc>)
 800672a:	4601      	mov	r1, r0
 800672c:	6818      	ldr	r0, [r3, #0]
 800672e:	f000 b871 	b.w	8006814 <_malloc_r>
 8006732:	bf00      	nop
 8006734:	20000030 	.word	0x20000030

08006738 <free>:
 8006738:	4b02      	ldr	r3, [pc, #8]	; (8006744 <free+0xc>)
 800673a:	4601      	mov	r1, r0
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	f000 b819 	b.w	8006774 <_free_r>
 8006742:	bf00      	nop
 8006744:	20000030 	.word	0x20000030

08006748 <memcpy>:
 8006748:	440a      	add	r2, r1
 800674a:	4291      	cmp	r1, r2
 800674c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006750:	d100      	bne.n	8006754 <memcpy+0xc>
 8006752:	4770      	bx	lr
 8006754:	b510      	push	{r4, lr}
 8006756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800675a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800675e:	4291      	cmp	r1, r2
 8006760:	d1f9      	bne.n	8006756 <memcpy+0xe>
 8006762:	bd10      	pop	{r4, pc}

08006764 <memset>:
 8006764:	4402      	add	r2, r0
 8006766:	4603      	mov	r3, r0
 8006768:	4293      	cmp	r3, r2
 800676a:	d100      	bne.n	800676e <memset+0xa>
 800676c:	4770      	bx	lr
 800676e:	f803 1b01 	strb.w	r1, [r3], #1
 8006772:	e7f9      	b.n	8006768 <memset+0x4>

08006774 <_free_r>:
 8006774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006776:	2900      	cmp	r1, #0
 8006778:	d048      	beq.n	800680c <_free_r+0x98>
 800677a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800677e:	9001      	str	r0, [sp, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	f1a1 0404 	sub.w	r4, r1, #4
 8006786:	bfb8      	it	lt
 8006788:	18e4      	addlt	r4, r4, r3
 800678a:	f000 f917 	bl	80069bc <__malloc_lock>
 800678e:	4a20      	ldr	r2, [pc, #128]	; (8006810 <_free_r+0x9c>)
 8006790:	9801      	ldr	r0, [sp, #4]
 8006792:	6813      	ldr	r3, [r2, #0]
 8006794:	4615      	mov	r5, r2
 8006796:	b933      	cbnz	r3, 80067a6 <_free_r+0x32>
 8006798:	6063      	str	r3, [r4, #4]
 800679a:	6014      	str	r4, [r2, #0]
 800679c:	b003      	add	sp, #12
 800679e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067a2:	f000 b911 	b.w	80069c8 <__malloc_unlock>
 80067a6:	42a3      	cmp	r3, r4
 80067a8:	d90b      	bls.n	80067c2 <_free_r+0x4e>
 80067aa:	6821      	ldr	r1, [r4, #0]
 80067ac:	1862      	adds	r2, r4, r1
 80067ae:	4293      	cmp	r3, r2
 80067b0:	bf04      	itt	eq
 80067b2:	681a      	ldreq	r2, [r3, #0]
 80067b4:	685b      	ldreq	r3, [r3, #4]
 80067b6:	6063      	str	r3, [r4, #4]
 80067b8:	bf04      	itt	eq
 80067ba:	1852      	addeq	r2, r2, r1
 80067bc:	6022      	streq	r2, [r4, #0]
 80067be:	602c      	str	r4, [r5, #0]
 80067c0:	e7ec      	b.n	800679c <_free_r+0x28>
 80067c2:	461a      	mov	r2, r3
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	b10b      	cbz	r3, 80067cc <_free_r+0x58>
 80067c8:	42a3      	cmp	r3, r4
 80067ca:	d9fa      	bls.n	80067c2 <_free_r+0x4e>
 80067cc:	6811      	ldr	r1, [r2, #0]
 80067ce:	1855      	adds	r5, r2, r1
 80067d0:	42a5      	cmp	r5, r4
 80067d2:	d10b      	bne.n	80067ec <_free_r+0x78>
 80067d4:	6824      	ldr	r4, [r4, #0]
 80067d6:	4421      	add	r1, r4
 80067d8:	1854      	adds	r4, r2, r1
 80067da:	42a3      	cmp	r3, r4
 80067dc:	6011      	str	r1, [r2, #0]
 80067de:	d1dd      	bne.n	800679c <_free_r+0x28>
 80067e0:	681c      	ldr	r4, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	6053      	str	r3, [r2, #4]
 80067e6:	4421      	add	r1, r4
 80067e8:	6011      	str	r1, [r2, #0]
 80067ea:	e7d7      	b.n	800679c <_free_r+0x28>
 80067ec:	d902      	bls.n	80067f4 <_free_r+0x80>
 80067ee:	230c      	movs	r3, #12
 80067f0:	6003      	str	r3, [r0, #0]
 80067f2:	e7d3      	b.n	800679c <_free_r+0x28>
 80067f4:	6825      	ldr	r5, [r4, #0]
 80067f6:	1961      	adds	r1, r4, r5
 80067f8:	428b      	cmp	r3, r1
 80067fa:	bf04      	itt	eq
 80067fc:	6819      	ldreq	r1, [r3, #0]
 80067fe:	685b      	ldreq	r3, [r3, #4]
 8006800:	6063      	str	r3, [r4, #4]
 8006802:	bf04      	itt	eq
 8006804:	1949      	addeq	r1, r1, r5
 8006806:	6021      	streq	r1, [r4, #0]
 8006808:	6054      	str	r4, [r2, #4]
 800680a:	e7c7      	b.n	800679c <_free_r+0x28>
 800680c:	b003      	add	sp, #12
 800680e:	bd30      	pop	{r4, r5, pc}
 8006810:	200040bc 	.word	0x200040bc

08006814 <_malloc_r>:
 8006814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006816:	1ccd      	adds	r5, r1, #3
 8006818:	f025 0503 	bic.w	r5, r5, #3
 800681c:	3508      	adds	r5, #8
 800681e:	2d0c      	cmp	r5, #12
 8006820:	bf38      	it	cc
 8006822:	250c      	movcc	r5, #12
 8006824:	2d00      	cmp	r5, #0
 8006826:	4606      	mov	r6, r0
 8006828:	db01      	blt.n	800682e <_malloc_r+0x1a>
 800682a:	42a9      	cmp	r1, r5
 800682c:	d903      	bls.n	8006836 <_malloc_r+0x22>
 800682e:	230c      	movs	r3, #12
 8006830:	6033      	str	r3, [r6, #0]
 8006832:	2000      	movs	r0, #0
 8006834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006836:	f000 f8c1 	bl	80069bc <__malloc_lock>
 800683a:	4921      	ldr	r1, [pc, #132]	; (80068c0 <_malloc_r+0xac>)
 800683c:	680a      	ldr	r2, [r1, #0]
 800683e:	4614      	mov	r4, r2
 8006840:	b99c      	cbnz	r4, 800686a <_malloc_r+0x56>
 8006842:	4f20      	ldr	r7, [pc, #128]	; (80068c4 <_malloc_r+0xb0>)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	b923      	cbnz	r3, 8006852 <_malloc_r+0x3e>
 8006848:	4621      	mov	r1, r4
 800684a:	4630      	mov	r0, r6
 800684c:	f000 f8a6 	bl	800699c <_sbrk_r>
 8006850:	6038      	str	r0, [r7, #0]
 8006852:	4629      	mov	r1, r5
 8006854:	4630      	mov	r0, r6
 8006856:	f000 f8a1 	bl	800699c <_sbrk_r>
 800685a:	1c43      	adds	r3, r0, #1
 800685c:	d123      	bne.n	80068a6 <_malloc_r+0x92>
 800685e:	230c      	movs	r3, #12
 8006860:	6033      	str	r3, [r6, #0]
 8006862:	4630      	mov	r0, r6
 8006864:	f000 f8b0 	bl	80069c8 <__malloc_unlock>
 8006868:	e7e3      	b.n	8006832 <_malloc_r+0x1e>
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	1b5b      	subs	r3, r3, r5
 800686e:	d417      	bmi.n	80068a0 <_malloc_r+0x8c>
 8006870:	2b0b      	cmp	r3, #11
 8006872:	d903      	bls.n	800687c <_malloc_r+0x68>
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	441c      	add	r4, r3
 8006878:	6025      	str	r5, [r4, #0]
 800687a:	e004      	b.n	8006886 <_malloc_r+0x72>
 800687c:	6863      	ldr	r3, [r4, #4]
 800687e:	42a2      	cmp	r2, r4
 8006880:	bf0c      	ite	eq
 8006882:	600b      	streq	r3, [r1, #0]
 8006884:	6053      	strne	r3, [r2, #4]
 8006886:	4630      	mov	r0, r6
 8006888:	f000 f89e 	bl	80069c8 <__malloc_unlock>
 800688c:	f104 000b 	add.w	r0, r4, #11
 8006890:	1d23      	adds	r3, r4, #4
 8006892:	f020 0007 	bic.w	r0, r0, #7
 8006896:	1ac2      	subs	r2, r0, r3
 8006898:	d0cc      	beq.n	8006834 <_malloc_r+0x20>
 800689a:	1a1b      	subs	r3, r3, r0
 800689c:	50a3      	str	r3, [r4, r2]
 800689e:	e7c9      	b.n	8006834 <_malloc_r+0x20>
 80068a0:	4622      	mov	r2, r4
 80068a2:	6864      	ldr	r4, [r4, #4]
 80068a4:	e7cc      	b.n	8006840 <_malloc_r+0x2c>
 80068a6:	1cc4      	adds	r4, r0, #3
 80068a8:	f024 0403 	bic.w	r4, r4, #3
 80068ac:	42a0      	cmp	r0, r4
 80068ae:	d0e3      	beq.n	8006878 <_malloc_r+0x64>
 80068b0:	1a21      	subs	r1, r4, r0
 80068b2:	4630      	mov	r0, r6
 80068b4:	f000 f872 	bl	800699c <_sbrk_r>
 80068b8:	3001      	adds	r0, #1
 80068ba:	d1dd      	bne.n	8006878 <_malloc_r+0x64>
 80068bc:	e7cf      	b.n	800685e <_malloc_r+0x4a>
 80068be:	bf00      	nop
 80068c0:	200040bc 	.word	0x200040bc
 80068c4:	200040c0 	.word	0x200040c0

080068c8 <cleanup_glue>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	460c      	mov	r4, r1
 80068cc:	6809      	ldr	r1, [r1, #0]
 80068ce:	4605      	mov	r5, r0
 80068d0:	b109      	cbz	r1, 80068d6 <cleanup_glue+0xe>
 80068d2:	f7ff fff9 	bl	80068c8 <cleanup_glue>
 80068d6:	4621      	mov	r1, r4
 80068d8:	4628      	mov	r0, r5
 80068da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068de:	f7ff bf49 	b.w	8006774 <_free_r>
	...

080068e4 <_reclaim_reent>:
 80068e4:	4b2c      	ldr	r3, [pc, #176]	; (8006998 <_reclaim_reent+0xb4>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4283      	cmp	r3, r0
 80068ea:	b570      	push	{r4, r5, r6, lr}
 80068ec:	4604      	mov	r4, r0
 80068ee:	d051      	beq.n	8006994 <_reclaim_reent+0xb0>
 80068f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80068f2:	b143      	cbz	r3, 8006906 <_reclaim_reent+0x22>
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d14a      	bne.n	8006990 <_reclaim_reent+0xac>
 80068fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068fc:	6819      	ldr	r1, [r3, #0]
 80068fe:	b111      	cbz	r1, 8006906 <_reclaim_reent+0x22>
 8006900:	4620      	mov	r0, r4
 8006902:	f7ff ff37 	bl	8006774 <_free_r>
 8006906:	6961      	ldr	r1, [r4, #20]
 8006908:	b111      	cbz	r1, 8006910 <_reclaim_reent+0x2c>
 800690a:	4620      	mov	r0, r4
 800690c:	f7ff ff32 	bl	8006774 <_free_r>
 8006910:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006912:	b111      	cbz	r1, 800691a <_reclaim_reent+0x36>
 8006914:	4620      	mov	r0, r4
 8006916:	f7ff ff2d 	bl	8006774 <_free_r>
 800691a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800691c:	b111      	cbz	r1, 8006924 <_reclaim_reent+0x40>
 800691e:	4620      	mov	r0, r4
 8006920:	f7ff ff28 	bl	8006774 <_free_r>
 8006924:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006926:	b111      	cbz	r1, 800692e <_reclaim_reent+0x4a>
 8006928:	4620      	mov	r0, r4
 800692a:	f7ff ff23 	bl	8006774 <_free_r>
 800692e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006930:	b111      	cbz	r1, 8006938 <_reclaim_reent+0x54>
 8006932:	4620      	mov	r0, r4
 8006934:	f7ff ff1e 	bl	8006774 <_free_r>
 8006938:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800693a:	b111      	cbz	r1, 8006942 <_reclaim_reent+0x5e>
 800693c:	4620      	mov	r0, r4
 800693e:	f7ff ff19 	bl	8006774 <_free_r>
 8006942:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006944:	b111      	cbz	r1, 800694c <_reclaim_reent+0x68>
 8006946:	4620      	mov	r0, r4
 8006948:	f7ff ff14 	bl	8006774 <_free_r>
 800694c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800694e:	b111      	cbz	r1, 8006956 <_reclaim_reent+0x72>
 8006950:	4620      	mov	r0, r4
 8006952:	f7ff ff0f 	bl	8006774 <_free_r>
 8006956:	69a3      	ldr	r3, [r4, #24]
 8006958:	b1e3      	cbz	r3, 8006994 <_reclaim_reent+0xb0>
 800695a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800695c:	4620      	mov	r0, r4
 800695e:	4798      	blx	r3
 8006960:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006962:	b1b9      	cbz	r1, 8006994 <_reclaim_reent+0xb0>
 8006964:	4620      	mov	r0, r4
 8006966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800696a:	f7ff bfad 	b.w	80068c8 <cleanup_glue>
 800696e:	5949      	ldr	r1, [r1, r5]
 8006970:	b941      	cbnz	r1, 8006984 <_reclaim_reent+0xa0>
 8006972:	3504      	adds	r5, #4
 8006974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006976:	2d80      	cmp	r5, #128	; 0x80
 8006978:	68d9      	ldr	r1, [r3, #12]
 800697a:	d1f8      	bne.n	800696e <_reclaim_reent+0x8a>
 800697c:	4620      	mov	r0, r4
 800697e:	f7ff fef9 	bl	8006774 <_free_r>
 8006982:	e7ba      	b.n	80068fa <_reclaim_reent+0x16>
 8006984:	680e      	ldr	r6, [r1, #0]
 8006986:	4620      	mov	r0, r4
 8006988:	f7ff fef4 	bl	8006774 <_free_r>
 800698c:	4631      	mov	r1, r6
 800698e:	e7ef      	b.n	8006970 <_reclaim_reent+0x8c>
 8006990:	2500      	movs	r5, #0
 8006992:	e7ef      	b.n	8006974 <_reclaim_reent+0x90>
 8006994:	bd70      	pop	{r4, r5, r6, pc}
 8006996:	bf00      	nop
 8006998:	20000030 	.word	0x20000030

0800699c <_sbrk_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4d06      	ldr	r5, [pc, #24]	; (80069b8 <_sbrk_r+0x1c>)
 80069a0:	2300      	movs	r3, #0
 80069a2:	4604      	mov	r4, r0
 80069a4:	4608      	mov	r0, r1
 80069a6:	602b      	str	r3, [r5, #0]
 80069a8:	f7f9 ff4e 	bl	8000848 <_sbrk>
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	d102      	bne.n	80069b6 <_sbrk_r+0x1a>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	b103      	cbz	r3, 80069b6 <_sbrk_r+0x1a>
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	bd38      	pop	{r3, r4, r5, pc}
 80069b8:	2000484c 	.word	0x2000484c

080069bc <__malloc_lock>:
 80069bc:	4801      	ldr	r0, [pc, #4]	; (80069c4 <__malloc_lock+0x8>)
 80069be:	f7ff beb1 	b.w	8006724 <__retarget_lock_acquire_recursive>
 80069c2:	bf00      	nop
 80069c4:	20004844 	.word	0x20004844

080069c8 <__malloc_unlock>:
 80069c8:	4801      	ldr	r0, [pc, #4]	; (80069d0 <__malloc_unlock+0x8>)
 80069ca:	f7ff beac 	b.w	8006726 <__retarget_lock_release_recursive>
 80069ce:	bf00      	nop
 80069d0:	20004844 	.word	0x20004844

080069d4 <_init>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	bf00      	nop
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr

080069e0 <_fini>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	bf00      	nop
 80069e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e6:	bc08      	pop	{r3}
 80069e8:	469e      	mov	lr, r3
 80069ea:	4770      	bx	lr
