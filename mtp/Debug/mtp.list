
mtp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006928  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006ac8  08006ac8  00016ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bac  08006bac  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08006bac  08006bac  00016bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bb4  08006bb4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb4  08006bb4  00016bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bb8  08006bb8  00016bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08006bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047b8  20000094  08006c50  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000484c  08006c50  0002484c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c761  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000533d  00000000  00000000  0004c825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  00051b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001900  00000000  00000000  00053410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce07  00000000  00000000  00054d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027ff6  00000000  00000000  00071b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fc49  00000000  00000000  00099b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139756  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d8  00000000  00000000  001397a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001c113  00000000  00000000  0013e080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ab0 	.word	0x08006ab0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	08006ab0 	.word	0x08006ab0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e4:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <vApplicationGetIdleTaskMemory+0x10>)
 80004e6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e8:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <vApplicationGetIdleTaskMemory+0x14>)
 80004ea:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	200002b0 	.word	0x200002b0
 80004f8:	200000b0 	.word	0x200000b0

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000500:	2400      	movs	r4, #0
 8000502:	9403      	str	r4, [sp, #12]
 8000504:	9404      	str	r4, [sp, #16]
 8000506:	9405      	str	r4, [sp, #20]
 8000508:	9406      	str	r4, [sp, #24]
 800050a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050c:	9400      	str	r4, [sp, #0]
 800050e:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <MX_GPIO_Init+0xac>)
 8000510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000512:	f042 0204 	orr.w	r2, r2, #4
 8000516:	631a      	str	r2, [r3, #48]	; 0x30
 8000518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800051a:	f002 0204 	and.w	r2, r2, #4
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000522:	9401      	str	r4, [sp, #4]
 8000524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000526:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800052a:	631a      	str	r2, [r3, #48]	; 0x30
 800052c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800052e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000532:	9201      	str	r2, [sp, #4]
 8000534:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	9402      	str	r4, [sp, #8]
 8000538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800053a:	f042 0201 	orr.w	r2, r2, #1
 800053e:	631a      	str	r2, [r3, #48]	; 0x30
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	9302      	str	r3, [sp, #8]
 8000548:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800054a:	4d18      	ldr	r5, [pc, #96]	; (80005ac <MX_GPIO_Init+0xb0>)
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000552:	4628      	mov	r0, r5
 8000554:	f000 fb50 	bl	8000bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000558:	4622      	mov	r2, r4
 800055a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055e:	4628      	mov	r0, r5
 8000560:	f000 fb4a 	bl	8000bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000568:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800056a:	2311      	movs	r3, #17
 800056c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000572:	a903      	add	r1, sp, #12
 8000574:	4628      	mov	r0, r5
 8000576:	f000 fa5f 	bl	8000a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800057a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800057e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2601      	movs	r6, #1
 8000582:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000586:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000588:	a903      	add	r1, sp, #12
 800058a:	4628      	mov	r0, r5
 800058c:	f000 fa54 	bl	8000a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000590:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000592:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000596:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000598:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800059a:	a903      	add	r1, sp, #12
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <MX_GPIO_Init+0xb4>)
 800059e:	f000 fa4b 	bl	8000a38 <HAL_GPIO_Init>

}
 80005a2:	b008      	add	sp, #32
 80005a4:	bd70      	pop	{r4, r5, r6, pc}
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40020800 	.word	0x40020800
 80005b0:	40020000 	.word	0x40020000

080005b4 <startMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startMainTask */
void startMainTask(void const * argument)
{
 80005b4:	b508      	push	{r3, lr}
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80005b6:	f005 ff6f 	bl	8006498 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005ba:	2001      	movs	r0, #1
 80005bc:	f004 fb14 	bl	8004be8 <osDelay>
  for(;;)
 80005c0:	e7fb      	b.n	80005ba <startMainTask+0x6>
	...

080005c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80005c6:	6802      	ldr	r2, [r0, #0]
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d000      	beq.n	80005d0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ce:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80005d0:	f000 f9b4 	bl	800093c <HAL_IncTick>
}
 80005d4:	e7fb      	b.n	80005ce <HAL_TIM_PeriodElapsedCallback+0xa>
 80005d6:	bf00      	nop
 80005d8:	40014800 	.word	0x40014800

080005dc <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005de:	e7fe      	b.n	80005de <Error_Handler+0x2>

080005e0 <MX_USART1_UART_Init>:
{
 80005e0:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80005e2:	480a      	ldr	r0, [pc, #40]	; (800060c <MX_USART1_UART_Init+0x2c>)
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <MX_USART1_UART_Init+0x30>)
 80005e6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80005e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80005ec:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	2300      	movs	r3, #0
 80005f0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005f4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f6:	220c      	movs	r2, #12
 80005f8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005fe:	f001 fe4d 	bl	800229c <HAL_UART_Init>
 8000602:	b900      	cbnz	r0, 8000606 <MX_USART1_UART_Init+0x26>
}
 8000604:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000606:	f7ff ffe9 	bl	80005dc <Error_Handler>
 800060a:	bf00      	nop
 800060c:	20000364 	.word	0x20000364
 8000610:	40011000 	.word	0x40011000

08000614 <SystemClock_Config>:
{
 8000614:	b500      	push	{lr}
 8000616:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000618:	2230      	movs	r2, #48	; 0x30
 800061a:	2100      	movs	r1, #0
 800061c:	a808      	add	r0, sp, #32
 800061e:	f006 f8d9 	bl	80067d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000622:	2300      	movs	r3, #0
 8000624:	9303      	str	r3, [sp, #12]
 8000626:	9304      	str	r3, [sp, #16]
 8000628:	9305      	str	r3, [sp, #20]
 800062a:	9306      	str	r3, [sp, #24]
 800062c:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	4a1f      	ldr	r2, [pc, #124]	; (80006b0 <SystemClock_Config+0x9c>)
 8000632:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000634:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000638:	6411      	str	r1, [r2, #64]	; 0x40
 800063a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800063c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	9302      	str	r3, [sp, #8]
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <SystemClock_Config+0xa0>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000656:	9302      	str	r3, [sp, #8]
 8000658:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065a:	2301      	movs	r3, #1
 800065c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000662:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000668:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800066c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800066e:	2219      	movs	r2, #25
 8000670:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000672:	22c0      	movs	r2, #192	; 0xc0
 8000674:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	a808      	add	r0, sp, #32
 800067e:	f001 f8c7 	bl	8001810 <HAL_RCC_OscConfig>
 8000682:	b988      	cbnz	r0, 80006a8 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000690:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000694:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000698:	2103      	movs	r1, #3
 800069a:	a803      	add	r0, sp, #12
 800069c:	f001 fb06 	bl	8001cac <HAL_RCC_ClockConfig>
 80006a0:	b920      	cbnz	r0, 80006ac <SystemClock_Config+0x98>
}
 80006a2:	b015      	add	sp, #84	; 0x54
 80006a4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80006a8:	f7ff ff98 	bl	80005dc <Error_Handler>
    Error_Handler();
 80006ac:	f7ff ff96 	bl	80005dc <Error_Handler>
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <main>:
{
 80006b8:	b510      	push	{r4, lr}
 80006ba:	b088      	sub	sp, #32
  HAL_Init();
 80006bc:	f000 f924 	bl	8000908 <HAL_Init>
  SystemClock_Config();
 80006c0:	f7ff ffa8 	bl	8000614 <SystemClock_Config>
  MX_GPIO_Init();
 80006c4:	f7ff ff1a 	bl	80004fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006c8:	f7ff ff8a 	bl	80005e0 <MX_USART1_UART_Init>
  osThreadDef(mainTask, startMainTask, osPriorityNormal, 0, 128);
 80006cc:	f10d 0c04 	add.w	ip, sp, #4
 80006d0:	4c08      	ldr	r4, [pc, #32]	; (80006f4 <main+0x3c>)
 80006d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006d8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80006dc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 80006e0:	2100      	movs	r1, #0
 80006e2:	a801      	add	r0, sp, #4
 80006e4:	f004 fa4b 	bl	8004b7e <osThreadCreate>
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <main+0x40>)
 80006ea:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80006ec:	f004 fa42 	bl	8004b74 <osKernelStart>
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <main+0x38>
 80006f2:	bf00      	nop
 80006f4:	08006ac8 	.word	0x08006ac8
 80006f8:	200003a8 	.word	0x200003a8

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b500      	push	{lr}
 80006fe:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000700:	2200      	movs	r2, #0
 8000702:	9200      	str	r2, [sp, #0]
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <HAL_MspInit+0x40>)
 8000706:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000708:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800070c:	6459      	str	r1, [r3, #68]	; 0x44
 800070e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000710:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000714:	9100      	str	r1, [sp, #0]
 8000716:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	9201      	str	r2, [sp, #4]
 800071a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800071c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000720:	6419      	str	r1, [r3, #64]	; 0x40
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000728:	9301      	str	r3, [sp, #4]
 800072a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800072c:	210f      	movs	r1, #15
 800072e:	f06f 0001 	mvn.w	r0, #1
 8000732:	f000 f93b 	bl	80009ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	b003      	add	sp, #12
 8000738:	f85d fb04 	ldr.w	pc, [sp], #4
 800073c:	40023800 	.word	0x40023800

08000740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000740:	b500      	push	{lr}
 8000742:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	2300      	movs	r3, #0
 8000746:	9303      	str	r3, [sp, #12]
 8000748:	9304      	str	r3, [sp, #16]
 800074a:	9305      	str	r3, [sp, #20]
 800074c:	9306      	str	r3, [sp, #24]
 800074e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000750:	6802      	ldr	r2, [r0, #0]
 8000752:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000756:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800075a:	429a      	cmp	r2, r3
 800075c:	d002      	beq.n	8000764 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800075e:	b009      	add	sp, #36	; 0x24
 8000760:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000764:	2100      	movs	r1, #0
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800076c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800076e:	f042 0210 	orr.w	r2, r2, #16
 8000772:	645a      	str	r2, [r3, #68]	; 0x44
 8000774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000776:	f002 0210 	and.w	r2, r2, #16
 800077a:	9201      	str	r2, [sp, #4]
 800077c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	9102      	str	r1, [sp, #8]
 8000780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000782:	f042 0201 	orr.w	r2, r2, #1
 8000786:	631a      	str	r2, [r3, #48]	; 0x30
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	9302      	str	r3, [sp, #8]
 8000790:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000792:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000796:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007a0:	2307      	movs	r3, #7
 80007a2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	a903      	add	r1, sp, #12
 80007a6:	4802      	ldr	r0, [pc, #8]	; (80007b0 <HAL_UART_MspInit+0x70>)
 80007a8:	f000 f946 	bl	8000a38 <HAL_GPIO_Init>
}
 80007ac:	e7d7      	b.n	800075e <HAL_UART_MspInit+0x1e>
 80007ae:	bf00      	nop
 80007b0:	40020000 	.word	0x40020000

080007b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b510      	push	{r4, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	201a      	movs	r0, #26
 80007be:	f000 f8f5 	bl	80009ac <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80007c2:	201a      	movs	r0, #26
 80007c4:	f000 f92a 	bl	8000a1c <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80007c8:	2400      	movs	r4, #0
 80007ca:	9401      	str	r4, [sp, #4]
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <HAL_InitTick+0x68>)
 80007ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80007d4:	645a      	str	r2, [r3, #68]	; 0x44
 80007d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e0:	a902      	add	r1, sp, #8
 80007e2:	a803      	add	r0, sp, #12
 80007e4:	f001 fb38 	bl	8001e58 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007e8:	f001 fb26 	bl	8001e38 <HAL_RCC_GetPCLK2Freq>
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_InitTick+0x6c>)
 80007ee:	fba3 2300 	umull	r2, r3, r3, r0
 80007f2:	0c9b      	lsrs	r3, r3, #18
 80007f4:	3b01      	subs	r3, #1

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <HAL_InitTick+0x70>)
 80007f8:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <HAL_InitTick+0x74>)
 80007fa:	6002      	str	r2, [r0, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80007fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000800:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000802:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 8000804:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	6084      	str	r4, [r0, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000808:	f001 fc92 	bl	8002130 <HAL_TIM_Base_Init>
 800080c:	b110      	cbz	r0, 8000814 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
  }

  /* Return function status */
  return HAL_ERROR;
 800080e:	2001      	movs	r0, #1
}
 8000810:	b008      	add	sp, #32
 8000812:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim11);
 8000814:	4803      	ldr	r0, [pc, #12]	; (8000824 <HAL_InitTick+0x70>)
 8000816:	f001 fb3f 	bl	8001e98 <HAL_TIM_Base_Start_IT>
 800081a:	e7f9      	b.n	8000810 <HAL_InitTick+0x5c>
 800081c:	40023800 	.word	0x40023800
 8000820:	431bde83 	.word	0x431bde83
 8000824:	200003ac 	.word	0x200003ac
 8000828:	40014800 	.word	0x40014800

0800082c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800082c:	e7fe      	b.n	800082c <NMI_Handler>

0800082e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <HardFault_Handler>

08000830 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler>

08000832 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler>

08000834 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler>

08000836 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	4770      	bx	lr

08000838 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000838:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800083a:	4802      	ldr	r0, [pc, #8]	; (8000844 <TIM1_TRG_COM_TIM11_IRQHandler+0xc>)
 800083c:	f001 fb6c 	bl	8001f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000840:	bd08      	pop	{r3, pc}
 8000842:	bf00      	nop
 8000844:	200003ac 	.word	0x200003ac

08000848 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000848:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800084a:	4802      	ldr	r0, [pc, #8]	; (8000854 <OTG_FS_IRQHandler+0xc>)
 800084c:	f000 fef5 	bl	800163a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000850:	bd08      	pop	{r3, pc}
 8000852:	bf00      	nop
 8000854:	20004538 	.word	0x20004538

08000858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000858:	b510      	push	{r4, lr}
 800085a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800085c:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <_sbrk+0x38>)
 800085e:	490d      	ldr	r1, [pc, #52]	; (8000894 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <_sbrk+0x40>)
 8000862:	6800      	ldr	r0, [r0, #0]
 8000864:	b140      	cbz	r0, 8000878 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000866:	480c      	ldr	r0, [pc, #48]	; (8000898 <_sbrk+0x40>)
 8000868:	6800      	ldr	r0, [r0, #0]
 800086a:	4403      	add	r3, r0
 800086c:	1a52      	subs	r2, r2, r1
 800086e:	4293      	cmp	r3, r2
 8000870:	d806      	bhi.n	8000880 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000872:	4a09      	ldr	r2, [pc, #36]	; (8000898 <_sbrk+0x40>)
 8000874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000876:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000878:	4807      	ldr	r0, [pc, #28]	; (8000898 <_sbrk+0x40>)
 800087a:	4c08      	ldr	r4, [pc, #32]	; (800089c <_sbrk+0x44>)
 800087c:	6004      	str	r4, [r0, #0]
 800087e:	e7f2      	b.n	8000866 <_sbrk+0xe>
    errno = ENOMEM;
 8000880:	f005 ff5e 	bl	8006740 <__errno>
 8000884:	230c      	movs	r3, #12
 8000886:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800088c:	e7f3      	b.n	8000876 <_sbrk+0x1e>
 800088e:	bf00      	nop
 8000890:	20020000 	.word	0x20020000
 8000894:	00000400 	.word	0x00000400
 8000898:	200003f4 	.word	0x200003f4
 800089c:	20004850 	.word	0x20004850

080008a0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a0:	4a03      	ldr	r2, [pc, #12]	; (80008b0 <SystemInit+0x10>)
 80008a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80008a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ae:	4770      	bx	lr
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008ba:	490e      	ldr	r1, [pc, #56]	; (80008f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008bc:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008d0:	4c0b      	ldr	r4, [pc, #44]	; (8000900 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008de:	f7ff ffdf 	bl	80008a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e2:	f005 ff33 	bl	800674c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e6:	f7ff fee7 	bl	80006b8 <main>
  bx  lr    
 80008ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80008f8:	08006bbc 	.word	0x08006bbc
  ldr r2, =_sbss
 80008fc:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000900:	2000484c 	.word	0x2000484c

08000904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC_IRQHandler>
	...

08000908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000908:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_Init+0x30>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000912:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800091a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000922:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000924:	2003      	movs	r0, #3
 8000926:	f000 f82f 	bl	8000988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092a:	200f      	movs	r0, #15
 800092c:	f7ff ff42 	bl	80007b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000930:	f7ff fee4 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000934:	2000      	movs	r0, #0
 8000936:	bd08      	pop	{r3, pc}
 8000938:	40023c00 	.word	0x40023c00

0800093c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800093c:	4a03      	ldr	r2, [pc, #12]	; (800094c <HAL_IncTick+0x10>)
 800093e:	6811      	ldr	r1, [r2, #0]
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <HAL_IncTick+0x14>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	440b      	add	r3, r1
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	200003f8 	.word	0x200003f8
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000954:	4b01      	ldr	r3, [pc, #4]	; (800095c <HAL_GetTick+0x8>)
 8000956:	6818      	ldr	r0, [r3, #0]
}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	200003f8 	.word	0x200003f8

08000960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000960:	b538      	push	{r3, r4, r5, lr}
 8000962:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000964:	f7ff fff6 	bl	8000954 <HAL_GetTick>
 8000968:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800096e:	d002      	beq.n	8000976 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <HAL_Delay+0x24>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000976:	f7ff ffed 	bl	8000954 <HAL_GetTick>
 800097a:	1b40      	subs	r0, r0, r5
 800097c:	42a0      	cmp	r0, r4
 800097e:	d3fa      	bcc.n	8000976 <HAL_Delay+0x16>
  {
  }
}
 8000980:	bd38      	pop	{r3, r4, r5, pc}
 8000982:	bf00      	nop
 8000984:	20000004 	.word	0x20000004

08000988 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000988:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800098a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000990:	041b      	lsls	r3, r3, #16
 8000992:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000994:	0200      	lsls	r0, r0, #8
 8000996:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800099a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800099c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80009a4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ac:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <HAL_NVIC_SetPriority+0x68>)
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b6:	f1c3 0c07 	rsb	ip, r3, #7
 80009ba:	f1bc 0f04 	cmp.w	ip, #4
 80009be:	bf28      	it	cs
 80009c0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c4:	f103 0e04 	add.w	lr, r3, #4
 80009c8:	f1be 0f06 	cmp.w	lr, #6
 80009cc:	d918      	bls.n	8000a00 <HAL_NVIC_SetPriority+0x54>
 80009ce:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80009d4:	fa0e fc0c 	lsl.w	ip, lr, ip
 80009d8:	ea21 010c 	bic.w	r1, r1, ip
 80009dc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009de:	fa0e f303 	lsl.w	r3, lr, r3
 80009e2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80009e8:	2800      	cmp	r0, #0
 80009ea:	db0b      	blt.n	8000a04 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	0109      	lsls	r1, r1, #4
 80009ee:	b2c9      	uxtb	r1, r1
 80009f0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80009f4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80009f8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80009fc:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a00:	2300      	movs	r3, #0
 8000a02:	e7e5      	b.n	80009d0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	f000 000f 	and.w	r0, r0, #15
 8000a08:	0109      	lsls	r1, r1, #4
 8000a0a:	b2c9      	uxtb	r1, r1
 8000a0c:	4b02      	ldr	r3, [pc, #8]	; (8000a18 <HAL_NVIC_SetPriority+0x6c>)
 8000a0e:	5419      	strb	r1, [r3, r0]
 8000a10:	e7f4      	b.n	80009fc <HAL_NVIC_SetPriority+0x50>
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00
 8000a18:	e000ed14 	.word	0xe000ed14

08000a1c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	db07      	blt.n	8000a30 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a20:	f000 021f 	and.w	r2, r0, #31
 8000a24:	0940      	lsrs	r0, r0, #5
 8000a26:	2301      	movs	r3, #1
 8000a28:	4093      	lsls	r3, r2
 8000a2a:	4a02      	ldr	r2, [pc, #8]	; (8000a34 <HAL_NVIC_EnableIRQ+0x18>)
 8000a2c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	2b0f      	cmp	r3, #15
 8000a3c:	f200 80d2 	bhi.w	8000be4 <HAL_GPIO_Init+0x1ac>
{
 8000a40:	b570      	push	{r4, r5, r6, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	e060      	b.n	8000b08 <HAL_GPIO_Init+0xd0>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a46:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a48:	005e      	lsls	r6, r3, #1
 8000a4a:	2403      	movs	r4, #3
 8000a4c:	40b4      	lsls	r4, r6
 8000a4e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a52:	68cc      	ldr	r4, [r1, #12]
 8000a54:	40b4      	lsls	r4, r6
 8000a56:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000a58:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a5a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a5c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a60:	684c      	ldr	r4, [r1, #4]
 8000a62:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000a66:	409a      	lsls	r2, r3
 8000a68:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8000a6a:	6042      	str	r2, [r0, #4]
 8000a6c:	e05a      	b.n	8000b24 <HAL_GPIO_Init+0xec>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a6e:	08dc      	lsrs	r4, r3, #3
 8000a70:	3408      	adds	r4, #8
 8000a72:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a76:	f003 0207 	and.w	r2, r3, #7
 8000a7a:	0095      	lsls	r5, r2, #2
 8000a7c:	220f      	movs	r2, #15
 8000a7e:	40aa      	lsls	r2, r5
 8000a80:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a84:	690a      	ldr	r2, [r1, #16]
 8000a86:	40aa      	lsls	r2, r5
 8000a88:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000a8c:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000a90:	e05c      	b.n	8000b4c <HAL_GPIO_Init+0x114>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a92:	2204      	movs	r2, #4
 8000a94:	e000      	b.n	8000a98 <HAL_GPIO_Init+0x60>
 8000a96:	2200      	movs	r2, #0
 8000a98:	fa02 f20e 	lsl.w	r2, r2, lr
 8000a9c:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a9e:	3402      	adds	r4, #2
 8000aa0:	4d51      	ldr	r5, [pc, #324]	; (8000be8 <HAL_GPIO_Init+0x1b0>)
 8000aa2:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aa6:	4a51      	ldr	r2, [pc, #324]	; (8000bec <HAL_GPIO_Init+0x1b4>)
 8000aa8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000aaa:	ea6f 020c 	mvn.w	r2, ip
 8000aae:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ab2:	684e      	ldr	r6, [r1, #4]
 8000ab4:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8000ab8:	d001      	beq.n	8000abe <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8000aba:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8000abe:	4c4b      	ldr	r4, [pc, #300]	; (8000bec <HAL_GPIO_Init+0x1b4>)
 8000ac0:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000ac2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000ac4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ac8:	684e      	ldr	r6, [r1, #4]
 8000aca:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000ace:	d001      	beq.n	8000ad4 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8000ad0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000ad4:	4c45      	ldr	r4, [pc, #276]	; (8000bec <HAL_GPIO_Init+0x1b4>)
 8000ad6:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ad8:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ada:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ade:	684e      	ldr	r6, [r1, #4]
 8000ae0:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8000ae4:	d001      	beq.n	8000aea <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8000ae6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000aea:	4c40      	ldr	r4, [pc, #256]	; (8000bec <HAL_GPIO_Init+0x1b4>)
 8000aec:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000aee:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000af0:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000af2:	684d      	ldr	r5, [r1, #4]
 8000af4:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8000af8:	d001      	beq.n	8000afe <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 8000afa:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8000afe:	4c3b      	ldr	r4, [pc, #236]	; (8000bec <HAL_GPIO_Init+0x1b4>)
 8000b00:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b02:	3301      	adds	r3, #1
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d86b      	bhi.n	8000be0 <HAL_GPIO_Init+0x1a8>
    ioposition = 0x01U << position;
 8000b08:	2201      	movs	r2, #1
 8000b0a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0c:	680c      	ldr	r4, [r1, #0]
 8000b0e:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000b12:	ea32 0404 	bics.w	r4, r2, r4
 8000b16:	d1f4      	bne.n	8000b02 <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b18:	684c      	ldr	r4, [r1, #4]
 8000b1a:	f004 0403 	and.w	r4, r4, #3
 8000b1e:	3c01      	subs	r4, #1
 8000b20:	2c01      	cmp	r4, #1
 8000b22:	d990      	bls.n	8000a46 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b24:	684a      	ldr	r2, [r1, #4]
 8000b26:	f002 0203 	and.w	r2, r2, #3
 8000b2a:	2a03      	cmp	r2, #3
 8000b2c:	d009      	beq.n	8000b42 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->PUPDR;
 8000b2e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b30:	005d      	lsls	r5, r3, #1
 8000b32:	2203      	movs	r2, #3
 8000b34:	40aa      	lsls	r2, r5
 8000b36:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b3a:	688a      	ldr	r2, [r1, #8]
 8000b3c:	40aa      	lsls	r2, r5
 8000b3e:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000b40:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b42:	684a      	ldr	r2, [r1, #4]
 8000b44:	f002 0203 	and.w	r2, r2, #3
 8000b48:	2a02      	cmp	r2, #2
 8000b4a:	d090      	beq.n	8000a6e <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8000b4c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b4e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000b52:	2203      	movs	r2, #3
 8000b54:	fa02 f20e 	lsl.w	r2, r2, lr
 8000b58:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b5c:	684a      	ldr	r2, [r1, #4]
 8000b5e:	f002 0203 	and.w	r2, r2, #3
 8000b62:	fa02 f20e 	lsl.w	r2, r2, lr
 8000b66:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000b68:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b6a:	684a      	ldr	r2, [r1, #4]
 8000b6c:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8000b70:	d0c7      	beq.n	8000b02 <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2200      	movs	r2, #0
 8000b74:	9201      	str	r2, [sp, #4]
 8000b76:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <HAL_GPIO_Init+0x1b8>)
 8000b78:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000b7a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000b7e:	6454      	str	r4, [r2, #68]	; 0x44
 8000b80:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b82:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000b86:	9201      	str	r2, [sp, #4]
 8000b88:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b8a:	089c      	lsrs	r4, r3, #2
 8000b8c:	1ca5      	adds	r5, r4, #2
 8000b8e:	4a16      	ldr	r2, [pc, #88]	; (8000be8 <HAL_GPIO_Init+0x1b0>)
 8000b90:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b94:	f003 0203 	and.w	r2, r3, #3
 8000b98:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8000b9c:	220f      	movs	r2, #15
 8000b9e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ba2:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <HAL_GPIO_Init+0x1bc>)
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f43f af74 	beq.w	8000a96 <HAL_GPIO_Init+0x5e>
 8000bae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	d00e      	beq.n	8000bd4 <HAL_GPIO_Init+0x19c>
 8000bb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d00c      	beq.n	8000bd8 <HAL_GPIO_Init+0x1a0>
 8000bbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	d00a      	beq.n	8000bdc <HAL_GPIO_Init+0x1a4>
 8000bc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	f43f af61 	beq.w	8000a92 <HAL_GPIO_Init+0x5a>
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	e761      	b.n	8000a98 <HAL_GPIO_Init+0x60>
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	e75f      	b.n	8000a98 <HAL_GPIO_Init+0x60>
 8000bd8:	2202      	movs	r2, #2
 8000bda:	e75d      	b.n	8000a98 <HAL_GPIO_Init+0x60>
 8000bdc:	2203      	movs	r2, #3
 8000bde:	e75b      	b.n	8000a98 <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 8000be0:	b002      	add	sp, #8
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40013800 	.word	0x40013800
 8000bec:	40013c00 	.word	0x40013c00
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bf8:	b10a      	cbz	r2, 8000bfe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bfa:	6181      	str	r1, [r0, #24]
 8000bfc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bfe:	0409      	lsls	r1, r1, #16
 8000c00:	6181      	str	r1, [r0, #24]
  }
}
 8000c02:	4770      	bx	lr

08000c04 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000c06:	6806      	ldr	r6, [r0, #0]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8000c08:	6a34      	ldr	r4, [r6, #32]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8000c0a:	f004 070f 	and.w	r7, r4, #15
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8000c0e:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000c12:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d000      	beq.n	8000c1c <HCD_RXQLVL_IRQHandler+0x18>
    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
  }
}
 8000c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c1c:	4605      	mov	r5, r0
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8000c1e:	2c00      	cmp	r4, #0
 8000c20:	d0fb      	beq.n	8000c1a <HCD_RXQLVL_IRQHandler+0x16>
 8000c22:	232c      	movs	r3, #44	; 0x2c
 8000c24:	fb03 0307 	mla	r3, r3, r7, r0
 8000c28:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000c2a:	2900      	cmp	r1, #0
 8000c2c:	d0f5      	beq.n	8000c1a <HCD_RXQLVL_IRQHandler+0x16>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8000c2e:	232c      	movs	r3, #44	; 0x2c
 8000c30:	fb03 0307 	mla	r3, r3, r7, r0
 8000c34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c36:	4422      	add	r2, r4
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d906      	bls.n	8000c4c <HCD_RXQLVL_IRQHandler+0x48>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000c3e:	202c      	movs	r0, #44	; 0x2c
 8000c40:	fb00 5507 	mla	r5, r0, r7, r5
 8000c44:	2304      	movs	r3, #4
 8000c46:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
}
 8000c4a:	e7e6      	b.n	8000c1a <HCD_RXQLVL_IRQHandler+0x16>
          (void)USB_ReadPacket(hhcd->Instance,
 8000c4c:	4622      	mov	r2, r4
 8000c4e:	4630      	mov	r0, r6
 8000c50:	f001 fc11 	bl	8002476 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8000c54:	232c      	movs	r3, #44	; 0x2c
 8000c56:	fb03 5307 	mla	r3, r3, r7, r5
 8000c5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c5c:	4422      	add	r2, r4
 8000c5e:	645a      	str	r2, [r3, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8000c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c62:	4422      	add	r2, r4
 8000c64:	651a      	str	r2, [r3, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8000c66:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 8000c6a:	f8d6 2510 	ldr.w	r2, [r6, #1296]	; 0x510
 8000c6e:	f3c2 42c9 	ubfx	r2, r2, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8000c72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c76:	42a3      	cmp	r3, r4
 8000c78:	d1cf      	bne.n	8000c1a <HCD_RXQLVL_IRQHandler+0x16>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	d0cd      	beq.n	8000c1a <HCD_RXQLVL_IRQHandler+0x16>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000c7e:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000c82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000c86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000c8a:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8000c8e:	232c      	movs	r3, #44	; 0x2c
 8000c90:	fb03 5507 	mla	r5, r3, r7, r5
 8000c94:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8000c98:	f083 0301 	eor.w	r3, r3, #1
 8000c9c:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 8000ca0:	e7bb      	b.n	8000c1a <HCD_RXQLVL_IRQHandler+0x16>

08000ca2 <HAL_HCD_HC_Init>:
{
 8000ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca4:	b085      	sub	sp, #20
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8000cac:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8000cb0:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 8000cb4:	f890 02f8 	ldrb.w	r0, [r0, #760]	; 0x2f8
 8000cb8:	2801      	cmp	r0, #1
 8000cba:	d037      	beq.n	8000d2c <HAL_HCD_HC_Init+0x8a>
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8000cc2:	202c      	movs	r0, #44	; 0x2c
 8000cc4:	fb00 4001 	mla	r0, r0, r1, r4
 8000cc8:	f04f 0c00 	mov.w	ip, #0
 8000ccc:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000cd0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8000cd4:	f8a0 7040 	strh.w	r7, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 8000cd8:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8000cdc:	f880 603f 	strb.w	r6, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000ce0:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
 8000ce4:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  if ((epnum & 0x80U) == 0x80U)
 8000ce8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000cec:	d116      	bne.n	8000d1c <HAL_HCD_HC_Init+0x7a>
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000cee:	202c      	movs	r0, #44	; 0x2c
 8000cf0:	fb00 4001 	mla	r0, r0, r1, r4
 8000cf4:	f04f 0c00 	mov.w	ip, #0
 8000cf8:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 8000cfc:	202c      	movs	r0, #44	; 0x2c
 8000cfe:	fb00 4001 	mla	r0, r0, r1, r4
 8000d02:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  status =  USB_HC_Init(hhcd->Instance,
 8000d06:	9702      	str	r7, [sp, #8]
 8000d08:	9601      	str	r6, [sp, #4]
 8000d0a:	9500      	str	r5, [sp, #0]
 8000d0c:	6820      	ldr	r0, [r4, #0]
 8000d0e:	f001 fcfc 	bl	800270a <USB_HC_Init>
  __HAL_UNLOCK(hhcd);
 8000d12:	2300      	movs	r3, #0
 8000d14:	f884 32f8 	strb.w	r3, [r4, #760]	; 0x2f8
}
 8000d18:	b005      	add	sp, #20
 8000d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000d1c:	202c      	movs	r0, #44	; 0x2c
 8000d1e:	fb00 4001 	mla	r0, r0, r1, r4
 8000d22:	f04f 0c01 	mov.w	ip, #1
 8000d26:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
 8000d2a:	e7e7      	b.n	8000cfc <HAL_HCD_HC_Init+0x5a>
  __HAL_LOCK(hhcd);
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	e7f3      	b.n	8000d18 <HAL_HCD_HC_Init+0x76>

08000d30 <HAL_HCD_HC_Halt>:
  __HAL_LOCK(hhcd);
 8000d30:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d00b      	beq.n	8000d50 <HAL_HCD_HC_Halt+0x20>
{
 8000d38:	b510      	push	{r4, lr}
 8000d3a:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d42:	6800      	ldr	r0, [r0, #0]
 8000d44:	f001 fd75 	bl	8002832 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8000d4e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8000d50:	2002      	movs	r0, #2
}
 8000d52:	4770      	bx	lr

08000d54 <HAL_HCD_Init>:
  if (hhcd == NULL)
 8000d54:	2800      	cmp	r0, #0
 8000d56:	d04d      	beq.n	8000df4 <HAL_HCD_Init+0xa0>
{
 8000d58:	b570      	push	{r4, r5, r6, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	4604      	mov	r4, r0
  USBx = hhcd->Instance;
 8000d5e:	6805      	ldr	r5, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000d60:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d040      	beq.n	8000dea <HAL_HCD_Init+0x96>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000d6e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000d70:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000d74:	d101      	bne.n	8000d7a <HAL_HCD_Init+0x26>
    hhcd->Init.dma_enable = 0U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	6123      	str	r3, [r4, #16]
  __HAL_HCD_DISABLE(hhcd);
 8000d7a:	6820      	ldr	r0, [r4, #0]
 8000d7c:	f001 fb2f 	bl	80023de <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000d80:	46a4      	mov	ip, r4
 8000d82:	f85c 6b10 	ldr.w	r6, [ip], #16
 8000d86:	46ee      	mov	lr, sp
 8000d88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000d8c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000d90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000d94:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000d98:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8000d9c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8000da0:	1d25      	adds	r5, r4, #4
 8000da2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000da6:	4630      	mov	r0, r6
 8000da8:	f001 face 	bl	8002348 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000dac:	2101      	movs	r1, #1
 8000dae:	6820      	ldr	r0, [r4, #0]
 8000db0:	f001 fb93 	bl	80024da <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000db4:	46a4      	mov	ip, r4
 8000db6:	f85c 6b10 	ldr.w	r6, [ip], #16
 8000dba:	46ee      	mov	lr, sp
 8000dbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000dc0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000dc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000dc8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000dcc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8000dd0:	e88e 0003 	stmia.w	lr, {r0, r1}
 8000dd4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000dd8:	4630      	mov	r0, r6
 8000dda:	f001 fbaf 	bl	800253c <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8000dde:	2301      	movs	r3, #1
 8000de0:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  return HAL_OK;
 8000de4:	2000      	movs	r0, #0
}
 8000de6:	b00a      	add	sp, #40	; 0x28
 8000de8:	bd70      	pop	{r4, r5, r6, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8000dea:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 8000dee:	f005 fb73 	bl	80064d8 <HAL_HCD_MspInit>
 8000df2:	e7b9      	b.n	8000d68 <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 8000df4:	2001      	movs	r0, #1
}
 8000df6:	4770      	bx	lr

08000df8 <HAL_HCD_HC_SubmitRequest>:
{
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8000dfe:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000e02:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8000e06:	fb0c 0c01 	mla	ip, ip, r1, r0
 8000e0a:	f88c 203b 	strb.w	r2, [ip, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000e0e:	f88c 303f 	strb.w	r3, [ip, #63]	; 0x3f
  if (token == 0U)
 8000e12:	b97d      	cbnz	r5, 8000e34 <HAL_HCD_HC_SubmitRequest+0x3c>
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000e14:	4664      	mov	r4, ip
 8000e16:	f04f 0c03 	mov.w	ip, #3
 8000e1a:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 8000e1e:	f89d c01c 	ldrb.w	ip, [sp, #28]
 8000e22:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
  switch (ep_type)
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	f200 8081 	bhi.w	8000f2e <HAL_HCD_HC_SubmitRequest+0x136>
 8000e2c:	e8df f003 	tbb	[pc, r3]
 8000e30:	5129790a 	.word	0x5129790a
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e34:	242c      	movs	r4, #44	; 0x2c
 8000e36:	fb04 0401 	mla	r4, r4, r1, r0
 8000e3a:	f04f 0c02 	mov.w	ip, #2
 8000e3e:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
 8000e42:	e7f0      	b.n	8000e26 <HAL_HCD_HC_SubmitRequest+0x2e>
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000e44:	2d01      	cmp	r5, #1
 8000e46:	d172      	bne.n	8000f2e <HAL_HCD_HC_SubmitRequest+0x136>
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d170      	bne.n	8000f2e <HAL_HCD_HC_SubmitRequest+0x136>
        if (length == 0U)
 8000e4c:	b92e      	cbnz	r6, 8000e5a <HAL_HCD_HC_SubmitRequest+0x62>
          hhcd->hc[ch_num].toggle_out = 1U;
 8000e4e:	232c      	movs	r3, #44	; 0x2c
 8000e50:	fb03 0301 	mla	r3, r3, r1, r0
 8000e54:	2201      	movs	r2, #1
 8000e56:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e5a:	232c      	movs	r3, #44	; 0x2c
 8000e5c:	fb03 0301 	mla	r3, r3, r1, r0
 8000e60:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000e64:	b933      	cbnz	r3, 8000e74 <HAL_HCD_HC_SubmitRequest+0x7c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e66:	232c      	movs	r3, #44	; 0x2c
 8000e68:	fb03 0301 	mla	r3, r3, r1, r0
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000e72:	e05c      	b.n	8000f2e <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e74:	232c      	movs	r3, #44	; 0x2c
 8000e76:	fb03 0301 	mla	r3, r3, r1, r0
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000e80:	e055      	b.n	8000f2e <HAL_HCD_HC_SubmitRequest+0x136>
      if (direction == 0U)
 8000e82:	b992      	cbnz	r2, 8000eaa <HAL_HCD_HC_SubmitRequest+0xb2>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e84:	232c      	movs	r3, #44	; 0x2c
 8000e86:	fb03 0301 	mla	r3, r3, r1, r0
 8000e8a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000e8e:	b92b      	cbnz	r3, 8000e9c <HAL_HCD_HC_SubmitRequest+0xa4>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e90:	232c      	movs	r3, #44	; 0x2c
 8000e92:	fb03 0301 	mla	r3, r3, r1, r0
 8000e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000e9a:	e048      	b.n	8000f2e <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e9c:	232c      	movs	r3, #44	; 0x2c
 8000e9e:	fb03 0301 	mla	r3, r3, r1, r0
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000ea8:	e041      	b.n	8000f2e <HAL_HCD_HC_SubmitRequest+0x136>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000eaa:	232c      	movs	r3, #44	; 0x2c
 8000eac:	fb03 0301 	mla	r3, r3, r1, r0
 8000eb0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000eb4:	b933      	cbnz	r3, 8000ec4 <HAL_HCD_HC_SubmitRequest+0xcc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000eb6:	232c      	movs	r3, #44	; 0x2c
 8000eb8:	fb03 0301 	mla	r3, r3, r1, r0
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000ec2:	e034      	b.n	8000f2e <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ec4:	232c      	movs	r3, #44	; 0x2c
 8000ec6:	fb03 0301 	mla	r3, r3, r1, r0
 8000eca:	2202      	movs	r2, #2
 8000ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000ed0:	e02d      	b.n	8000f2e <HAL_HCD_HC_SubmitRequest+0x136>
      if (direction == 0U)
 8000ed2:	b992      	cbnz	r2, 8000efa <HAL_HCD_HC_SubmitRequest+0x102>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000ed4:	232c      	movs	r3, #44	; 0x2c
 8000ed6:	fb03 0301 	mla	r3, r3, r1, r0
 8000eda:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000ede:	b92b      	cbnz	r3, 8000eec <HAL_HCD_HC_SubmitRequest+0xf4>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ee0:	232c      	movs	r3, #44	; 0x2c
 8000ee2:	fb03 0301 	mla	r3, r3, r1, r0
 8000ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000eea:	e020      	b.n	8000f2e <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000eec:	232c      	movs	r3, #44	; 0x2c
 8000eee:	fb03 0301 	mla	r3, r3, r1, r0
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000ef8:	e019      	b.n	8000f2e <HAL_HCD_HC_SubmitRequest+0x136>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000efa:	232c      	movs	r3, #44	; 0x2c
 8000efc:	fb03 0301 	mla	r3, r3, r1, r0
 8000f00:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000f04:	b933      	cbnz	r3, 8000f14 <HAL_HCD_HC_SubmitRequest+0x11c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f06:	232c      	movs	r3, #44	; 0x2c
 8000f08:	fb03 0301 	mla	r3, r3, r1, r0
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000f12:	e00c      	b.n	8000f2e <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f14:	232c      	movs	r3, #44	; 0x2c
 8000f16:	fb03 0301 	mla	r3, r3, r1, r0
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000f20:	e005      	b.n	8000f2e <HAL_HCD_HC_SubmitRequest+0x136>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f22:	232c      	movs	r3, #44	; 0x2c
 8000f24:	fb03 0301 	mla	r3, r3, r1, r0
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000f2e:	232c      	movs	r3, #44	; 0x2c
 8000f30:	fb01 f303 	mul.w	r3, r1, r3
 8000f34:	18c2      	adds	r2, r0, r3
 8000f36:	9c05      	ldr	r4, [sp, #20]
 8000f38:	6454      	str	r4, [r2, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8000f3a:	64d6      	str	r6, [r2, #76]	; 0x4c
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	f882 4060 	strb.w	r4, [r2, #96]	; 0x60
  hhcd->hc[ch_num].xfer_count = 0U;
 8000f42:	6514      	str	r4, [r2, #80]	; 0x50
  hhcd->hc[ch_num].ch_num = ch_num;
 8000f44:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 8000f48:	f882 4061 	strb.w	r4, [r2, #97]	; 0x61
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000f4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000f50:	7c02      	ldrb	r2, [r0, #16]
 8000f52:	4401      	add	r1, r0
 8000f54:	6800      	ldr	r0, [r0, #0]
 8000f56:	f001 fcf1 	bl	800293c <USB_HC_StartXfer>
}
 8000f5a:	bd70      	pop	{r4, r5, r6, pc}

08000f5c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000f5c:	b530      	push	{r4, r5, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000f62:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000f64:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000f68:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 8000f6a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000f6e:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000f70:	9b00      	ldr	r3, [sp, #0]
 8000f72:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000f76:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000f78:	9b01      	ldr	r3, [sp, #4]
 8000f7a:	f013 0f02 	tst.w	r3, #2
 8000f7e:	d007      	beq.n	8000f90 <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000f80:	9b01      	ldr	r3, [sp, #4]
 8000f82:	f013 0f01 	tst.w	r3, #1
 8000f86:	d125      	bne.n	8000fd4 <HCD_Port_IRQHandler+0x78>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8000f88:	9b00      	ldr	r3, [sp, #0]
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000f90:	9b01      	ldr	r3, [sp, #4]
 8000f92:	f013 0f08 	tst.w	r3, #8
 8000f96:	d010      	beq.n	8000fba <HCD_Port_IRQHandler+0x5e>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000f98:	9b00      	ldr	r3, [sp, #0]
 8000f9a:	f043 0308 	orr.w	r3, r3, #8
 8000f9e:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8000fa0:	9b01      	ldr	r3, [sp, #4]
 8000fa2:	f013 0f04 	tst.w	r3, #4
 8000fa6:	d02d      	beq.n	8001004 <HCD_Port_IRQHandler+0xa8>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8000fa8:	69a3      	ldr	r3, [r4, #24]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d015      	beq.n	8000fda <HCD_Port_IRQHandler+0x7e>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8000fae:	68e3      	ldr	r3, [r4, #12]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d022      	beq.n	8000ffa <HCD_Port_IRQHandler+0x9e>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	f005 fae9 	bl	800658c <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8000fba:	9b01      	ldr	r3, [sp, #4]
 8000fbc:	f013 0f20 	tst.w	r3, #32
 8000fc0:	d003      	beq.n	8000fca <HCD_Port_IRQHandler+0x6e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8000fc2:	9b00      	ldr	r3, [sp, #0]
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8000fca:	9b00      	ldr	r3, [sp, #0]
 8000fcc:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
}
 8000fd0:	b003      	add	sp, #12
 8000fd2:	bd30      	pop	{r4, r5, pc}
      HAL_HCD_Connect_Callback(hhcd);
 8000fd4:	f005 fac8 	bl	8006568 <HAL_HCD_Connect_Callback>
 8000fd8:	e7d6      	b.n	8000f88 <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8000fda:	9b01      	ldr	r3, [sp, #4]
 8000fdc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8000fe0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000fe4:	d004      	beq.n	8000ff0 <HCD_Port_IRQHandler+0x94>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	6820      	ldr	r0, [r4, #0]
 8000fea:	f001 fb1d 	bl	8002628 <USB_InitFSLSPClkSel>
 8000fee:	e7e1      	b.n	8000fb4 <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	6820      	ldr	r0, [r4, #0]
 8000ff4:	f001 fb18 	bl	8002628 <USB_InitFSLSPClkSel>
 8000ff8:	e7dc      	b.n	8000fb4 <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 8000ffa:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000ffe:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 8001002:	e7d7      	b.n	8000fb4 <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001004:	4620      	mov	r0, r4
 8001006:	f005 fac7 	bl	8006598 <HAL_HCD_PortDisabled_Callback>
 800100a:	e7d6      	b.n	8000fba <HCD_Port_IRQHandler+0x5e>

0800100c <HCD_HC_IN_IRQHandler>:
{
 800100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100e:	4605      	mov	r5, r0
 8001010:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001012:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001014:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 8001018:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 800101c:	68a3      	ldr	r3, [r4, #8]
 800101e:	f013 0f04 	tst.w	r3, #4
 8001022:	d040      	beq.n	80010a6 <HCD_HC_IN_IRQHandler+0x9a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001024:	2304      	movs	r3, #4
 8001026:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001028:	68e3      	ldr	r3, [r4, #12]
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	60e3      	str	r3, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001030:	68a3      	ldr	r3, [r4, #8]
 8001032:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001036:	f040 8093 	bne.w	8001160 <HCD_HC_IN_IRQHandler+0x154>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800103a:	68a3      	ldr	r3, [r4, #8]
 800103c:	f013 0f01 	tst.w	r3, #1
 8001040:	f000 80d7 	beq.w	80011f2 <HCD_HC_IN_IRQHandler+0x1e6>
    if (hhcd->Init.dma_enable != 0U)
 8001044:	692b      	ldr	r3, [r5, #16]
 8001046:	b143      	cbz	r3, 800105a <HCD_HC_IN_IRQHandler+0x4e>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001048:	232c      	movs	r3, #44	; 0x2c
 800104a:	fb03 5306 	mla	r3, r3, r6, r5
 800104e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001050:	6921      	ldr	r1, [r4, #16]
 8001052:	f3c1 0112 	ubfx	r1, r1, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001056:	1a52      	subs	r2, r2, r1
 8001058:	651a      	str	r2, [r3, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 800105a:	232c      	movs	r3, #44	; 0x2c
 800105c:	fb03 5306 	mla	r3, r3, r6, r5
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001066:	2100      	movs	r1, #0
 8001068:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800106a:	60a2      	str	r2, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800106c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 8081 	beq.w	8001178 <HCD_HC_IN_IRQHandler+0x16c>
 8001076:	2b02      	cmp	r3, #2
 8001078:	d07e      	beq.n	8001178 <HCD_HC_IN_IRQHandler+0x16c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800107a:	2b03      	cmp	r3, #3
 800107c:	f000 8093 	beq.w	80011a6 <HCD_HC_IN_IRQHandler+0x19a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001080:	2b01      	cmp	r3, #1
 8001082:	f040 8083 	bne.w	800118c <HCD_HC_IN_IRQHandler+0x180>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001086:	232c      	movs	r3, #44	; 0x2c
 8001088:	fb03 5306 	mla	r3, r3, r6, r5
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001092:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 8001096:	4051      	eors	r1, r2
 8001098:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800109c:	4631      	mov	r1, r6
 800109e:	4628      	mov	r0, r5
 80010a0:	f005 fa6e 	bl	8006580 <HAL_HCD_HC_NotifyURBChange_Callback>
 80010a4:	e072      	b.n	800118c <HCD_HC_IN_IRQHandler+0x180>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80010a6:	68a3      	ldr	r3, [r4, #8]
 80010a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010ac:	d106      	bne.n	80010bc <HCD_HC_IN_IRQHandler+0xb0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80010ae:	68a3      	ldr	r3, [r4, #8]
 80010b0:	f013 0f20 	tst.w	r3, #32
 80010b4:	d013      	beq.n	80010de <HCD_HC_IN_IRQHandler+0xd2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80010b6:	2320      	movs	r3, #32
 80010b8:	60a3      	str	r3, [r4, #8]
 80010ba:	e7b9      	b.n	8001030 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80010bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c0:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80010c2:	232c      	movs	r3, #44	; 0x2c
 80010c4:	fb03 0301 	mla	r3, r3, r1, r0
 80010c8:	2207      	movs	r2, #7
 80010ca:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80010ce:	68e3      	ldr	r3, [r4, #12]
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010d6:	6800      	ldr	r0, [r0, #0]
 80010d8:	f001 fbab 	bl	8002832 <USB_HC_Halt>
 80010dc:	e7a8      	b.n	8001030 <HCD_HC_IN_IRQHandler+0x24>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80010de:	68a3      	ldr	r3, [r4, #8]
 80010e0:	f013 0f08 	tst.w	r3, #8
 80010e4:	d117      	bne.n	8001116 <HCD_HC_IN_IRQHandler+0x10a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80010e6:	68a3      	ldr	r3, [r4, #8]
 80010e8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80010ec:	d125      	bne.n	800113a <HCD_HC_IN_IRQHandler+0x12e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80010ee:	68a3      	ldr	r3, [r4, #8]
 80010f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80010f4:	d09c      	beq.n	8001030 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80010f6:	68e3      	ldr	r3, [r4, #12]
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80010fe:	232c      	movs	r3, #44	; 0x2c
 8001100:	fb03 0301 	mla	r3, r3, r1, r0
 8001104:	2206      	movs	r2, #6
 8001106:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800110a:	6800      	ldr	r0, [r0, #0]
 800110c:	f001 fb91 	bl	8002832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	60a3      	str	r3, [r4, #8]
 8001114:	e78c      	b.n	8001030 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001116:	68e3      	ldr	r3, [r4, #12]
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800111e:	232c      	movs	r3, #44	; 0x2c
 8001120:	fb03 0301 	mla	r3, r3, r1, r0
 8001124:	2205      	movs	r2, #5
 8001126:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800112a:	2310      	movs	r3, #16
 800112c:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800112e:	2308      	movs	r3, #8
 8001130:	60a3      	str	r3, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001132:	6800      	ldr	r0, [r0, #0]
 8001134:	f001 fb7d 	bl	8002832 <USB_HC_Halt>
 8001138:	e77a      	b.n	8001030 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800113a:	68e3      	ldr	r3, [r4, #12]
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001142:	232c      	movs	r3, #44	; 0x2c
 8001144:	fb03 0301 	mla	r3, r3, r1, r0
 8001148:	2208      	movs	r2, #8
 800114a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800114e:	2310      	movs	r3, #16
 8001150:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001156:	60a3      	str	r3, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001158:	6800      	ldr	r0, [r0, #0]
 800115a:	f001 fb6a 	bl	8002832 <USB_HC_Halt>
 800115e:	e767      	b.n	8001030 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001160:	68e3      	ldr	r3, [r4, #12]
 8001162:	f043 0302 	orr.w	r3, r3, #2
 8001166:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001168:	4631      	mov	r1, r6
 800116a:	6828      	ldr	r0, [r5, #0]
 800116c:	f001 fb61 	bl	8002832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001174:	60a3      	str	r3, [r4, #8]
}
 8001176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001178:	68e3      	ldr	r3, [r4, #12]
 800117a:	f043 0302 	orr.w	r3, r3, #2
 800117e:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001180:	4631      	mov	r1, r6
 8001182:	6828      	ldr	r0, [r5, #0]
 8001184:	f001 fb55 	bl	8002832 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001188:	2310      	movs	r3, #16
 800118a:	60a3      	str	r3, [r4, #8]
    if (hhcd->Init.dma_enable == 1U)
 800118c:	692b      	ldr	r3, [r5, #16]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d01a      	beq.n	80011c8 <HCD_HC_IN_IRQHandler+0x1bc>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001192:	212c      	movs	r1, #44	; 0x2c
 8001194:	fb01 5506 	mla	r5, r1, r6, r5
 8001198:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 800119c:	f083 0301 	eor.w	r3, r3, #1
 80011a0:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 80011a4:	e7e7      	b.n	8001176 <HCD_HC_IN_IRQHandler+0x16a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80011a6:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80011aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011ae:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80011b2:	232c      	movs	r3, #44	; 0x2c
 80011b4:	fb03 5306 	mla	r3, r3, r6, r5
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80011be:	4631      	mov	r1, r6
 80011c0:	4628      	mov	r0, r5
 80011c2:	f005 f9dd 	bl	8006580 <HAL_HCD_HC_NotifyURBChange_Callback>
 80011c6:	e7e1      	b.n	800118c <HCD_HC_IN_IRQHandler+0x180>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80011c8:	232c      	movs	r3, #44	; 0x2c
 80011ca:	fb03 5306 	mla	r3, r3, r6, r5
 80011ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d8:	f013 0f01 	tst.w	r3, #1
 80011dc:	d0cb      	beq.n	8001176 <HCD_HC_IN_IRQHandler+0x16a>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80011de:	232c      	movs	r3, #44	; 0x2c
 80011e0:	fb03 5506 	mla	r5, r3, r6, r5
 80011e4:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 80011e8:	f083 0301 	eor.w	r3, r3, #1
 80011ec:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 80011f0:	e7c1      	b.n	8001176 <HCD_HC_IN_IRQHandler+0x16a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80011f2:	68a3      	ldr	r3, [r4, #8]
 80011f4:	f013 0f02 	tst.w	r3, #2
 80011f8:	d064      	beq.n	80012c4 <HCD_HC_IN_IRQHandler+0x2b8>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80011fa:	68e3      	ldr	r3, [r4, #12]
 80011fc:	f023 0302 	bic.w	r3, r3, #2
 8001200:	60e3      	str	r3, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001202:	232c      	movs	r3, #44	; 0x2c
 8001204:	fb03 5306 	mla	r3, r3, r6, r5
 8001208:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800120c:	2b01      	cmp	r3, #1
 800120e:	d013      	beq.n	8001238 <HCD_HC_IN_IRQHandler+0x22c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001210:	2b05      	cmp	r3, #5
 8001212:	d023      	beq.n	800125c <HCD_HC_IN_IRQHandler+0x250>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001214:	2b06      	cmp	r3, #6
 8001216:	d028      	beq.n	800126a <HCD_HC_IN_IRQHandler+0x25e>
 8001218:	2b08      	cmp	r3, #8
 800121a:	d026      	beq.n	800126a <HCD_HC_IN_IRQHandler+0x25e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800121c:	2b03      	cmp	r3, #3
 800121e:	d042      	beq.n	80012a6 <HCD_HC_IN_IRQHandler+0x29a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001220:	2b07      	cmp	r3, #7
 8001222:	d10f      	bne.n	8001244 <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].ErrCnt++;
 8001224:	232c      	movs	r3, #44	; 0x2c
 8001226:	fb03 5306 	mla	r3, r3, r6, r5
 800122a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800122c:	3201      	adds	r2, #1
 800122e:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001230:	2204      	movs	r2, #4
 8001232:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001236:	e005      	b.n	8001244 <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001238:	232c      	movs	r3, #44	; 0x2c
 800123a:	fb03 5306 	mla	r3, r3, r6, r5
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001244:	2302      	movs	r3, #2
 8001246:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001248:	232c      	movs	r3, #44	; 0x2c
 800124a:	fb03 5306 	mla	r3, r3, r6, r5
 800124e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8001252:	4631      	mov	r1, r6
 8001254:	4628      	mov	r0, r5
 8001256:	f005 f993 	bl	8006580 <HAL_HCD_HC_NotifyURBChange_Callback>
 800125a:	e78c      	b.n	8001176 <HCD_HC_IN_IRQHandler+0x16a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800125c:	232c      	movs	r3, #44	; 0x2c
 800125e:	fb03 5306 	mla	r3, r3, r6, r5
 8001262:	2205      	movs	r2, #5
 8001264:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001268:	e7ec      	b.n	8001244 <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].ErrCnt++;
 800126a:	222c      	movs	r2, #44	; 0x2c
 800126c:	fb02 5206 	mla	r2, r2, r6, r5
 8001270:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001272:	3301      	adds	r3, #1
 8001274:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001276:	2b02      	cmp	r3, #2
 8001278:	d906      	bls.n	8001288 <HCD_HC_IN_IRQHandler+0x27c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800127a:	4613      	mov	r3, r2
 800127c:	2200      	movs	r2, #0
 800127e:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001280:	2204      	movs	r2, #4
 8001282:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001286:	e7dd      	b.n	8001244 <HCD_HC_IN_IRQHandler+0x238>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001288:	232c      	movs	r3, #44	; 0x2c
 800128a:	fb03 5306 	mla	r3, r3, r6, r5
 800128e:	2202      	movs	r2, #2
 8001290:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001294:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001298:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800129c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80012a0:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 80012a4:	e7ce      	b.n	8001244 <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80012a6:	232c      	movs	r3, #44	; 0x2c
 80012a8:	fb03 5306 	mla	r3, r3, r6, r5
 80012ac:	2202      	movs	r2, #2
 80012ae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80012b2:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80012b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80012ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80012be:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 80012c2:	e7bf      	b.n	8001244 <HCD_HC_IN_IRQHandler+0x238>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80012c4:	68a3      	ldr	r3, [r4, #8]
 80012c6:	f013 0f10 	tst.w	r3, #16
 80012ca:	f43f af54 	beq.w	8001176 <HCD_HC_IN_IRQHandler+0x16a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80012ce:	232c      	movs	r3, #44	; 0x2c
 80012d0:	fb03 5306 	mla	r3, r3, r6, r5
 80012d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d00c      	beq.n	80012f6 <HCD_HC_IN_IRQHandler+0x2ea>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80012dc:	b10b      	cbz	r3, 80012e2 <HCD_HC_IN_IRQHandler+0x2d6>
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d106      	bne.n	80012f0 <HCD_HC_IN_IRQHandler+0x2e4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80012e2:	232c      	movs	r3, #44	; 0x2c
 80012e4:	fb03 5306 	mla	r3, r3, r6, r5
 80012e8:	2200      	movs	r2, #0
 80012ea:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 80012ec:	692b      	ldr	r3, [r5, #16]
 80012ee:	b183      	cbz	r3, 8001312 <HCD_HC_IN_IRQHandler+0x306>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80012f0:	2310      	movs	r3, #16
 80012f2:	60a3      	str	r3, [r4, #8]
}
 80012f4:	e73f      	b.n	8001176 <HCD_HC_IN_IRQHandler+0x16a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80012f6:	232c      	movs	r3, #44	; 0x2c
 80012f8:	fb03 5306 	mla	r3, r3, r6, r5
 80012fc:	2200      	movs	r2, #0
 80012fe:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001300:	68e3      	ldr	r3, [r4, #12]
 8001302:	f043 0302 	orr.w	r3, r3, #2
 8001306:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001308:	4631      	mov	r1, r6
 800130a:	6828      	ldr	r0, [r5, #0]
 800130c:	f001 fa91 	bl	8002832 <USB_HC_Halt>
 8001310:	e7ee      	b.n	80012f0 <HCD_HC_IN_IRQHandler+0x2e4>
        hhcd->hc[ch_num].state = HC_NAK;
 8001312:	232c      	movs	r3, #44	; 0x2c
 8001314:	fb03 5306 	mla	r3, r3, r6, r5
 8001318:	2203      	movs	r2, #3
 800131a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800131e:	68e3      	ldr	r3, [r4, #12]
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001326:	4631      	mov	r1, r6
 8001328:	6828      	ldr	r0, [r5, #0]
 800132a:	f001 fa82 	bl	8002832 <USB_HC_Halt>
 800132e:	e7df      	b.n	80012f0 <HCD_HC_IN_IRQHandler+0x2e4>

08001330 <HCD_HC_OUT_IRQHandler>:
{
 8001330:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001332:	6803      	ldr	r3, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001334:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001338:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 800133c:	68a2      	ldr	r2, [r4, #8]
 800133e:	f012 0f04 	tst.w	r2, #4
 8001342:	d006      	beq.n	8001352 <HCD_HC_OUT_IRQHandler+0x22>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001344:	2304      	movs	r3, #4
 8001346:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001348:	68e3      	ldr	r3, [r4, #12]
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	60e3      	str	r3, [r4, #12]
}
 8001350:	bd70      	pop	{r4, r5, r6, pc}
 8001352:	4605      	mov	r5, r0
 8001354:	460e      	mov	r6, r1
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001356:	68a2      	ldr	r2, [r4, #8]
 8001358:	f012 0f20 	tst.w	r2, #32
 800135c:	d018      	beq.n	8001390 <HCD_HC_OUT_IRQHandler+0x60>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800135e:	2320      	movs	r3, #32
 8001360:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001362:	232c      	movs	r3, #44	; 0x2c
 8001364:	fb03 0301 	mla	r3, r3, r1, r0
 8001368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800136c:	2b01      	cmp	r3, #1
 800136e:	d1ef      	bne.n	8001350 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].do_ping = 0U;
 8001370:	232c      	movs	r3, #44	; 0x2c
 8001372:	fb03 0301 	mla	r3, r3, r1, r0
 8001376:	2200      	movs	r2, #0
 8001378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800137c:	2202      	movs	r2, #2
 800137e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001382:	68e3      	ldr	r3, [r4, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001388:	6800      	ldr	r0, [r0, #0]
 800138a:	f001 fa52 	bl	8002832 <USB_HC_Halt>
 800138e:	e7df      	b.n	8001350 <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001390:	68a2      	ldr	r2, [r4, #8]
 8001392:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001396:	d124      	bne.n	80013e2 <HCD_HC_OUT_IRQHandler+0xb2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001398:	68a2      	ldr	r2, [r4, #8]
 800139a:	f012 0f01 	tst.w	r2, #1
 800139e:	d02b      	beq.n	80013f8 <HCD_HC_OUT_IRQHandler+0xc8>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80013a0:	232c      	movs	r3, #44	; 0x2c
 80013a2:	fb03 0301 	mla	r3, r3, r1, r0
 80013a6:	2200      	movs	r2, #0
 80013a8:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80013aa:	68a3      	ldr	r3, [r4, #8]
 80013ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80013b0:	d007      	beq.n	80013c2 <HCD_HC_OUT_IRQHandler+0x92>
      hhcd->hc[ch_num].do_ping = 1U;
 80013b2:	232c      	movs	r3, #44	; 0x2c
 80013b4:	fb03 0301 	mla	r3, r3, r1, r0
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80013be:	2340      	movs	r3, #64	; 0x40
 80013c0:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013c2:	68e3      	ldr	r3, [r4, #12]
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013ca:	4631      	mov	r1, r6
 80013cc:	6828      	ldr	r0, [r5, #0]
 80013ce:	f001 fa30 	bl	8002832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80013d2:	2301      	movs	r3, #1
 80013d4:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80013d6:	212c      	movs	r1, #44	; 0x2c
 80013d8:	fb01 5506 	mla	r5, r1, r6, r5
 80013dc:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 80013e0:	e7b6      	b.n	8001350 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013e2:	68e3      	ldr	r3, [r4, #12]
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013ea:	6800      	ldr	r0, [r0, #0]
 80013ec:	f001 fa21 	bl	8002832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80013f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f4:	60a3      	str	r3, [r4, #8]
 80013f6:	e7ab      	b.n	8001350 <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80013f8:	68a2      	ldr	r2, [r4, #8]
 80013fa:	f012 0f40 	tst.w	r2, #64	; 0x40
 80013fe:	d129      	bne.n	8001454 <HCD_HC_OUT_IRQHandler+0x124>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001400:	68a2      	ldr	r2, [r4, #8]
 8001402:	f012 0f08 	tst.w	r2, #8
 8001406:	d13a      	bne.n	800147e <HCD_HC_OUT_IRQHandler+0x14e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001408:	68a2      	ldr	r2, [r4, #8]
 800140a:	f012 0f10 	tst.w	r2, #16
 800140e:	d046      	beq.n	800149e <HCD_HC_OUT_IRQHandler+0x16e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001410:	232c      	movs	r3, #44	; 0x2c
 8001412:	fb03 0301 	mla	r3, r3, r1, r0
 8001416:	2200      	movs	r2, #0
 8001418:	65da      	str	r2, [r3, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 800141a:	2203      	movs	r2, #3
 800141c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001424:	b95b      	cbnz	r3, 800143e <HCD_HC_OUT_IRQHandler+0x10e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001426:	232c      	movs	r3, #44	; 0x2c
 8001428:	fb03 0301 	mla	r3, r3, r1, r0
 800142c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001430:	b92b      	cbnz	r3, 800143e <HCD_HC_OUT_IRQHandler+0x10e>
        hhcd->hc[ch_num].do_ping = 1U;
 8001432:	232c      	movs	r3, #44	; 0x2c
 8001434:	fb03 0301 	mla	r3, r3, r1, r0
 8001438:	2201      	movs	r2, #1
 800143a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800143e:	68e3      	ldr	r3, [r4, #12]
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001446:	4631      	mov	r1, r6
 8001448:	6828      	ldr	r0, [r5, #0]
 800144a:	f001 f9f2 	bl	8002832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800144e:	2310      	movs	r3, #16
 8001450:	60a3      	str	r3, [r4, #8]
 8001452:	e77d      	b.n	8001350 <HCD_HC_OUT_IRQHandler+0x20>
    hhcd->hc[ch_num].state = HC_NYET;
 8001454:	232c      	movs	r3, #44	; 0x2c
 8001456:	fb03 0301 	mla	r3, r3, r1, r0
 800145a:	2204      	movs	r2, #4
 800145c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8001460:	2201      	movs	r2, #1
 8001462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001466:	2200      	movs	r2, #0
 8001468:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800146a:	68e3      	ldr	r3, [r4, #12]
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001472:	6800      	ldr	r0, [r0, #0]
 8001474:	f001 f9dd 	bl	8002832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001478:	2340      	movs	r3, #64	; 0x40
 800147a:	60a3      	str	r3, [r4, #8]
 800147c:	e768      	b.n	8001350 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800147e:	2308      	movs	r3, #8
 8001480:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001482:	68e3      	ldr	r3, [r4, #12]
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800148a:	6800      	ldr	r0, [r0, #0]
 800148c:	f001 f9d1 	bl	8002832 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001490:	232c      	movs	r3, #44	; 0x2c
 8001492:	fb03 5506 	mla	r5, r3, r6, r5
 8001496:	2305      	movs	r3, #5
 8001498:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 800149c:	e758      	b.n	8001350 <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800149e:	68a2      	ldr	r2, [r4, #8]
 80014a0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80014a4:	d029      	beq.n	80014fa <HCD_HC_OUT_IRQHandler+0x1ca>
    if (hhcd->Init.dma_enable == 0U)
 80014a6:	6903      	ldr	r3, [r0, #16]
 80014a8:	b183      	cbz	r3, 80014cc <HCD_HC_OUT_IRQHandler+0x19c>
      hhcd->hc[ch_num].ErrCnt++;
 80014aa:	222c      	movs	r2, #44	; 0x2c
 80014ac:	fb02 0201 	mla	r2, r2, r1, r0
 80014b0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80014b2:	3301      	adds	r3, #1
 80014b4:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d816      	bhi.n	80014e8 <HCD_HC_OUT_IRQHandler+0x1b8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80014ba:	232c      	movs	r3, #44	; 0x2c
 80014bc:	fb03 0501 	mla	r5, r3, r1, r0
 80014c0:	2302      	movs	r3, #2
 80014c2:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	60a3      	str	r3, [r4, #8]
 80014ca:	e741      	b.n	8001350 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80014cc:	232c      	movs	r3, #44	; 0x2c
 80014ce:	fb03 0301 	mla	r3, r3, r1, r0
 80014d2:	2206      	movs	r2, #6
 80014d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014d8:	68e3      	ldr	r3, [r4, #12]
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014e0:	6800      	ldr	r0, [r0, #0]
 80014e2:	f001 f9a6 	bl	8002832 <USB_HC_Halt>
 80014e6:	e7ee      	b.n	80014c6 <HCD_HC_OUT_IRQHandler+0x196>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80014e8:	4613      	mov	r3, r2
 80014ea:	2200      	movs	r2, #0
 80014ec:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80014ee:	2204      	movs	r2, #4
 80014f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80014f4:	f005 f844 	bl	8006580 <HAL_HCD_HC_NotifyURBChange_Callback>
 80014f8:	e7e5      	b.n	80014c6 <HCD_HC_OUT_IRQHandler+0x196>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80014fa:	68a2      	ldr	r2, [r4, #8]
 80014fc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001500:	d127      	bne.n	8001552 <HCD_HC_OUT_IRQHandler+0x222>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001502:	68a2      	ldr	r2, [r4, #8]
 8001504:	f012 0f02 	tst.w	r2, #2
 8001508:	f43f af22 	beq.w	8001350 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800150c:	68e2      	ldr	r2, [r4, #12]
 800150e:	f022 0202 	bic.w	r2, r2, #2
 8001512:	60e2      	str	r2, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001514:	222c      	movs	r2, #44	; 0x2c
 8001516:	fb02 0201 	mla	r2, r2, r1, r0
 800151a:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 800151e:	2a01      	cmp	r2, #1
 8001520:	d02a      	beq.n	8001578 <HCD_HC_OUT_IRQHandler+0x248>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001522:	2a03      	cmp	r2, #3
 8001524:	d05b      	beq.n	80015de <HCD_HC_OUT_IRQHandler+0x2ae>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001526:	2a04      	cmp	r2, #4
 8001528:	d06b      	beq.n	8001602 <HCD_HC_OUT_IRQHandler+0x2d2>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800152a:	2a05      	cmp	r2, #5
 800152c:	d070      	beq.n	8001610 <HCD_HC_OUT_IRQHandler+0x2e0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800152e:	2a06      	cmp	r2, #6
 8001530:	d001      	beq.n	8001536 <HCD_HC_OUT_IRQHandler+0x206>
 8001532:	2a08      	cmp	r2, #8
 8001534:	d159      	bne.n	80015ea <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].ErrCnt++;
 8001536:	212c      	movs	r1, #44	; 0x2c
 8001538:	fb01 5106 	mla	r1, r1, r6, r5
 800153c:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 800153e:	3201      	adds	r2, #1
 8001540:	65ca      	str	r2, [r1, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001542:	2a02      	cmp	r2, #2
 8001544:	d96a      	bls.n	800161c <HCD_HC_OUT_IRQHandler+0x2ec>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001546:	2200      	movs	r2, #0
 8001548:	65ca      	str	r2, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800154a:	2204      	movs	r2, #4
 800154c:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
 8001550:	e04b      	b.n	80015ea <HCD_HC_OUT_IRQHandler+0x2ba>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001552:	68e3      	ldr	r3, [r4, #12]
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800155a:	6800      	ldr	r0, [r0, #0]
 800155c:	f001 f969 	bl	8002832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001560:	2310      	movs	r3, #16
 8001562:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001568:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800156a:	232c      	movs	r3, #44	; 0x2c
 800156c:	fb03 5506 	mla	r5, r3, r6, r5
 8001570:	2308      	movs	r3, #8
 8001572:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 8001576:	e6eb      	b.n	8001350 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001578:	232c      	movs	r3, #44	; 0x2c
 800157a:	fb03 0301 	mla	r3, r3, r1, r0
 800157e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001582:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001586:	3b02      	subs	r3, #2
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4293      	cmp	r3, r2
 800158c:	d82d      	bhi.n	80015ea <HCD_HC_OUT_IRQHandler+0x2ba>
        if (hhcd->Init.dma_enable == 0U)
 800158e:	6901      	ldr	r1, [r0, #16]
 8001590:	b941      	cbnz	r1, 80015a4 <HCD_HC_OUT_IRQHandler+0x274>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001592:	232c      	movs	r3, #44	; 0x2c
 8001594:	fb03 0306 	mla	r3, r3, r6, r0
 8001598:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800159c:	f082 0201 	eor.w	r2, r2, #1
 80015a0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80015a4:	2901      	cmp	r1, #1
 80015a6:	d120      	bne.n	80015ea <HCD_HC_OUT_IRQHandler+0x2ba>
 80015a8:	232c      	movs	r3, #44	; 0x2c
 80015aa:	fb03 5306 	mla	r3, r3, r6, r5
 80015ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b0:	b1db      	cbz	r3, 80015ea <HCD_HC_OUT_IRQHandler+0x2ba>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80015b2:	222c      	movs	r2, #44	; 0x2c
 80015b4:	fb02 5206 	mla	r2, r2, r6, r5
 80015b8:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80015bc:	4413      	add	r3, r2
 80015be:	3b01      	subs	r3, #1
 80015c0:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 80015c4:	f013 0f01 	tst.w	r3, #1
 80015c8:	d00f      	beq.n	80015ea <HCD_HC_OUT_IRQHandler+0x2ba>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80015ca:	232c      	movs	r3, #44	; 0x2c
 80015cc:	fb03 5306 	mla	r3, r3, r6, r5
 80015d0:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80015d4:	f082 0201 	eor.w	r2, r2, #1
 80015d8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80015dc:	e005      	b.n	80015ea <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80015de:	232c      	movs	r3, #44	; 0x2c
 80015e0:	fb03 0301 	mla	r3, r3, r1, r0
 80015e4:	2202      	movs	r2, #2
 80015e6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80015ea:	2302      	movs	r3, #2
 80015ec:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80015ee:	232c      	movs	r3, #44	; 0x2c
 80015f0:	fb03 5306 	mla	r3, r3, r6, r5
 80015f4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80015f8:	4631      	mov	r1, r6
 80015fa:	4628      	mov	r0, r5
 80015fc:	f004 ffc0 	bl	8006580 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001600:	e6a6      	b.n	8001350 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001602:	232c      	movs	r3, #44	; 0x2c
 8001604:	fb03 0301 	mla	r3, r3, r1, r0
 8001608:	2202      	movs	r2, #2
 800160a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800160e:	e7ec      	b.n	80015ea <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001610:	232c      	movs	r3, #44	; 0x2c
 8001612:	fb03 0301 	mla	r3, r3, r1, r0
 8001616:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800161a:	e7e6      	b.n	80015ea <HCD_HC_OUT_IRQHandler+0x2ba>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800161c:	222c      	movs	r2, #44	; 0x2c
 800161e:	fb02 5206 	mla	r2, r2, r6, r5
 8001622:	2102      	movs	r1, #2
 8001624:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001628:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800162c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001630:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001634:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8001638:	e7d7      	b.n	80015ea <HCD_HC_OUT_IRQHandler+0x2ba>

0800163a <HAL_HCD_IRQHandler>:
{
 800163a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800163c:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800163e:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001640:	4628      	mov	r0, r5
 8001642:	f000 ff46 	bl	80024d2 <USB_GetMode>
 8001646:	2801      	cmp	r0, #1
 8001648:	d000      	beq.n	800164c <HAL_HCD_IRQHandler+0x12>
}
 800164a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800164c:	6820      	ldr	r0, [r4, #0]
 800164e:	f000 ff3c 	bl	80024ca <USB_ReadInterrupts>
 8001652:	2800      	cmp	r0, #0
 8001654:	d0f9      	beq.n	800164a <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001656:	6820      	ldr	r0, [r4, #0]
 8001658:	f000 ff37 	bl	80024ca <USB_ReadInterrupts>
 800165c:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8001660:	d003      	beq.n	800166a <HAL_HCD_IRQHandler+0x30>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001668:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800166a:	6820      	ldr	r0, [r4, #0]
 800166c:	f000 ff2d 	bl	80024ca <USB_ReadInterrupts>
 8001670:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001674:	d003      	beq.n	800167e <HAL_HCD_IRQHandler+0x44>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800167c:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800167e:	6820      	ldr	r0, [r4, #0]
 8001680:	f000 ff23 	bl	80024ca <USB_ReadInterrupts>
 8001684:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8001688:	d003      	beq.n	8001692 <HAL_HCD_IRQHandler+0x58>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001690:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001692:	6820      	ldr	r0, [r4, #0]
 8001694:	f000 ff19 	bl	80024ca <USB_ReadInterrupts>
 8001698:	f010 0f02 	tst.w	r0, #2
 800169c:	d002      	beq.n	80016a4 <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	2202      	movs	r2, #2
 80016a2:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80016a4:	6820      	ldr	r0, [r4, #0]
 80016a6:	f000 ff10 	bl	80024ca <USB_ReadInterrupts>
 80016aa:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 80016ae:	d008      	beq.n	80016c2 <HAL_HCD_IRQHandler+0x88>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016b6:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80016b8:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80016bc:	f013 0f01 	tst.w	r3, #1
 80016c0:	d01d      	beq.n	80016fe <HAL_HCD_IRQHandler+0xc4>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80016c2:	6820      	ldr	r0, [r4, #0]
 80016c4:	f000 ff01 	bl	80024ca <USB_ReadInterrupts>
 80016c8:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80016cc:	d126      	bne.n	800171c <HAL_HCD_IRQHandler+0xe2>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80016ce:	6820      	ldr	r0, [r4, #0]
 80016d0:	f000 fefb 	bl	80024ca <USB_ReadInterrupts>
 80016d4:	f010 0f08 	tst.w	r0, #8
 80016d8:	d124      	bne.n	8001724 <HAL_HCD_IRQHandler+0xea>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	f000 fef5 	bl	80024ca <USB_ReadInterrupts>
 80016e0:	f010 0f10 	tst.w	r0, #16
 80016e4:	d125      	bne.n	8001732 <HAL_HCD_IRQHandler+0xf8>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80016e6:	6820      	ldr	r0, [r4, #0]
 80016e8:	f000 feef 	bl	80024ca <USB_ReadInterrupts>
 80016ec:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80016f0:	d0ab      	beq.n	800164a <HAL_HCD_IRQHandler+0x10>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80016f2:	6820      	ldr	r0, [r4, #0]
 80016f4:	f001 f898 	bl	8002828 <USB_HC_ReadInterrupt>
 80016f8:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016fa:	2600      	movs	r6, #0
 80016fc:	e02c      	b.n	8001758 <HAL_HCD_IRQHandler+0x11e>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80016fe:	2110      	movs	r1, #16
 8001700:	4628      	mov	r0, r5
 8001702:	f000 fe73 	bl	80023ec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001706:	4628      	mov	r0, r5
 8001708:	f000 fe88 	bl	800241c <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800170c:	2101      	movs	r1, #1
 800170e:	6820      	ldr	r0, [r4, #0]
 8001710:	f000 ff8a 	bl	8002628 <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 8001714:	4620      	mov	r0, r4
 8001716:	f004 ff2d 	bl	8006574 <HAL_HCD_Disconnect_Callback>
 800171a:	e7d2      	b.n	80016c2 <HAL_HCD_IRQHandler+0x88>
      HCD_Port_IRQHandler(hhcd);
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff fc1d 	bl	8000f5c <HCD_Port_IRQHandler>
 8001722:	e7d4      	b.n	80016ce <HAL_HCD_IRQHandler+0x94>
      HAL_HCD_SOF_Callback(hhcd);
 8001724:	4620      	mov	r0, r4
 8001726:	f004 ff19 	bl	800655c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	2208      	movs	r2, #8
 800172e:	615a      	str	r2, [r3, #20]
 8001730:	e7d3      	b.n	80016da <HAL_HCD_IRQHandler+0xa0>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001732:	6822      	ldr	r2, [r4, #0]
 8001734:	6993      	ldr	r3, [r2, #24]
 8001736:	f023 0310 	bic.w	r3, r3, #16
 800173a:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff fa61 	bl	8000c04 <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001742:	6822      	ldr	r2, [r4, #0]
 8001744:	6993      	ldr	r3, [r2, #24]
 8001746:	f043 0310 	orr.w	r3, r3, #16
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	e7cb      	b.n	80016e6 <HAL_HCD_IRQHandler+0xac>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800174e:	b2f1      	uxtb	r1, r6
 8001750:	4620      	mov	r0, r4
 8001752:	f7ff fded 	bl	8001330 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001756:	3601      	adds	r6, #1
 8001758:	68a3      	ldr	r3, [r4, #8]
 800175a:	42b3      	cmp	r3, r6
 800175c:	d912      	bls.n	8001784 <HAL_HCD_IRQHandler+0x14a>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800175e:	f006 030f 	and.w	r3, r6, #15
 8001762:	fa27 f303 	lsr.w	r3, r7, r3
 8001766:	f013 0f01 	tst.w	r3, #1
 800176a:	d0f4      	beq.n	8001756 <HAL_HCD_IRQHandler+0x11c>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800176c:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001770:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8001774:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001778:	d0e9      	beq.n	800174e <HAL_HCD_IRQHandler+0x114>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800177a:	b2f1      	uxtb	r1, r6
 800177c:	4620      	mov	r0, r4
 800177e:	f7ff fc45 	bl	800100c <HCD_HC_IN_IRQHandler>
 8001782:	e7e8      	b.n	8001756 <HAL_HCD_IRQHandler+0x11c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001784:	6823      	ldr	r3, [r4, #0]
 8001786:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800178a:	615a      	str	r2, [r3, #20]
 800178c:	e75d      	b.n	800164a <HAL_HCD_IRQHandler+0x10>

0800178e <HAL_HCD_Start>:
  __HAL_LOCK(hhcd);
 800178e:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8001792:	2b01      	cmp	r3, #1
 8001794:	d00e      	beq.n	80017b4 <HAL_HCD_Start+0x26>
{
 8001796:	b510      	push	{r4, lr}
 8001798:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800179a:	2101      	movs	r1, #1
 800179c:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80017a0:	6800      	ldr	r0, [r0, #0]
 80017a2:	f000 ff7f 	bl	80026a4 <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 80017a6:	6820      	ldr	r0, [r4, #0]
 80017a8:	f000 fe13 	bl	80023d2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80017ac:	2000      	movs	r0, #0
 80017ae:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 80017b2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80017b4:	2002      	movs	r0, #2
}
 80017b6:	4770      	bx	lr

080017b8 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 80017b8:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d00b      	beq.n	80017d8 <HAL_HCD_Stop+0x20>
{
 80017c0:	b510      	push	{r4, lr}
 80017c2:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80017c4:	2301      	movs	r3, #1
 80017c6:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80017ca:	6800      	ldr	r0, [r0, #0]
 80017cc:	f001 f96c 	bl	8002aa8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 80017d6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80017d8:	2002      	movs	r0, #2
}
 80017da:	4770      	bx	lr

080017dc <HAL_HCD_ResetPort>:
{
 80017dc:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 80017de:	6800      	ldr	r0, [r0, #0]
 80017e0:	f000 ff41 	bl	8002666 <USB_ResetPort>
}
 80017e4:	bd08      	pop	{r3, pc}

080017e6 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 80017e6:	232c      	movs	r3, #44	; 0x2c
 80017e8:	fb03 0001 	mla	r0, r3, r1, r0
}
 80017ec:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 80017f0:	4770      	bx	lr

080017f2 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 80017f2:	232c      	movs	r3, #44	; 0x2c
 80017f4:	fb03 0001 	mla	r0, r3, r1, r0
}
 80017f8:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80017fa:	4770      	bx	lr

080017fc <HAL_HCD_GetCurrentFrame>:
{
 80017fc:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 80017fe:	6800      	ldr	r0, [r0, #0]
 8001800:	f000 ff7e 	bl	8002700 <USB_GetCurrentFrame>
}
 8001804:	bd08      	pop	{r3, pc}

08001806 <HAL_HCD_GetCurrentSpeed>:
{
 8001806:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 8001808:	6800      	ldr	r0, [r0, #0]
 800180a:	f000 ff6e 	bl	80026ea <USB_GetHostSpeed>
}
 800180e:	bd08      	pop	{r3, pc}

08001810 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001810:	2800      	cmp	r0, #0
 8001812:	f000 81e0 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x3c6>
{
 8001816:	b570      	push	{r4, r5, r6, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181c:	6803      	ldr	r3, [r0, #0]
 800181e:	f013 0f01 	tst.w	r3, #1
 8001822:	d03b      	beq.n	800189c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001824:	4b9f      	ldr	r3, [pc, #636]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b04      	cmp	r3, #4
 800182e:	d02c      	beq.n	800188a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001830:	4b9c      	ldr	r3, [pc, #624]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001838:	2b08      	cmp	r3, #8
 800183a:	d021      	beq.n	8001880 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183c:	6863      	ldr	r3, [r4, #4]
 800183e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001842:	d04f      	beq.n	80018e4 <HAL_RCC_OscConfig+0xd4>
 8001844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001848:	d052      	beq.n	80018f0 <HAL_RCC_OscConfig+0xe0>
 800184a:	4b96      	ldr	r3, [pc, #600]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800185a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800185c:	6863      	ldr	r3, [r4, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d050      	beq.n	8001904 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff f877 	bl	8000954 <HAL_GetTick>
 8001866:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001868:	4b8e      	ldr	r3, [pc, #568]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001870:	d114      	bne.n	800189c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001872:	f7ff f86f 	bl	8000954 <HAL_GetTick>
 8001876:	1b40      	subs	r0, r0, r5
 8001878:	2864      	cmp	r0, #100	; 0x64
 800187a:	d9f5      	bls.n	8001868 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800187c:	2003      	movs	r0, #3
 800187e:	e1b1      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001880:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001888:	d0d8      	beq.n	800183c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188a:	4b86      	ldr	r3, [pc, #536]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001892:	d003      	beq.n	800189c <HAL_RCC_OscConfig+0x8c>
 8001894:	6863      	ldr	r3, [r4, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 819f 	beq.w	8001bda <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189c:	6823      	ldr	r3, [r4, #0]
 800189e:	f013 0f02 	tst.w	r3, #2
 80018a2:	d054      	beq.n	800194e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018a4:	4b7f      	ldr	r3, [pc, #508]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f013 0f0c 	tst.w	r3, #12
 80018ac:	d03e      	beq.n	800192c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ae:	4b7d      	ldr	r3, [pc, #500]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d033      	beq.n	8001922 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018ba:	68e3      	ldr	r3, [r4, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d068      	beq.n	8001992 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c0:	4b79      	ldr	r3, [pc, #484]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff f845 	bl	8000954 <HAL_GetTick>
 80018ca:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018cc:	4b75      	ldr	r3, [pc, #468]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f013 0f02 	tst.w	r3, #2
 80018d4:	d154      	bne.n	8001980 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff f83d 	bl	8000954 <HAL_GetTick>
 80018da:	1b40      	subs	r0, r0, r5
 80018dc:	2802      	cmp	r0, #2
 80018de:	d9f5      	bls.n	80018cc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80018e0:	2003      	movs	r0, #3
 80018e2:	e17f      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e4:	4a6f      	ldr	r2, [pc, #444]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 80018e6:	6813      	ldr	r3, [r2, #0]
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e7b5      	b.n	800185c <HAL_RCC_OscConfig+0x4c>
 80018f0:	4b6c      	ldr	r3, [pc, #432]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e7ab      	b.n	800185c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001904:	f7ff f826 	bl	8000954 <HAL_GetTick>
 8001908:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001912:	d0c3      	beq.n	800189c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff f81e 	bl	8000954 <HAL_GetTick>
 8001918:	1b40      	subs	r0, r0, r5
 800191a:	2864      	cmp	r0, #100	; 0x64
 800191c:	d9f5      	bls.n	800190a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800191e:	2003      	movs	r0, #3
 8001920:	e160      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001922:	4b60      	ldr	r3, [pc, #384]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800192a:	d1c6      	bne.n	80018ba <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192c:	4b5d      	ldr	r3, [pc, #372]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f013 0f02 	tst.w	r3, #2
 8001934:	d003      	beq.n	800193e <HAL_RCC_OscConfig+0x12e>
 8001936:	68e3      	ldr	r3, [r4, #12]
 8001938:	2b01      	cmp	r3, #1
 800193a:	f040 8150 	bne.w	8001bde <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193e:	4a59      	ldr	r2, [pc, #356]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 8001940:	6813      	ldr	r3, [r2, #0]
 8001942:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001946:	6921      	ldr	r1, [r4, #16]
 8001948:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800194c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	f013 0f08 	tst.w	r3, #8
 8001954:	d042      	beq.n	80019dc <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001956:	6963      	ldr	r3, [r4, #20]
 8001958:	b36b      	cbz	r3, 80019b6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195a:	4b53      	ldr	r3, [pc, #332]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 800195c:	2201      	movs	r2, #1
 800195e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001962:	f7fe fff7 	bl	8000954 <HAL_GetTick>
 8001966:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001968:	4b4e      	ldr	r3, [pc, #312]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 800196a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800196c:	f013 0f02 	tst.w	r3, #2
 8001970:	d134      	bne.n	80019dc <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001972:	f7fe ffef 	bl	8000954 <HAL_GetTick>
 8001976:	1b40      	subs	r0, r0, r5
 8001978:	2802      	cmp	r0, #2
 800197a:	d9f5      	bls.n	8001968 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800197c:	2003      	movs	r0, #3
 800197e:	e131      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4a48      	ldr	r2, [pc, #288]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 8001982:	6813      	ldr	r3, [r2, #0]
 8001984:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001988:	6921      	ldr	r1, [r4, #16]
 800198a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	e7dd      	b.n	800194e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001992:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001998:	f7fe ffdc 	bl	8000954 <HAL_GetTick>
 800199c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	4b41      	ldr	r3, [pc, #260]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f013 0f02 	tst.w	r3, #2
 80019a6:	d0d2      	beq.n	800194e <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a8:	f7fe ffd4 	bl	8000954 <HAL_GetTick>
 80019ac:	1b40      	subs	r0, r0, r5
 80019ae:	2802      	cmp	r0, #2
 80019b0:	d9f5      	bls.n	800199e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80019b2:	2003      	movs	r0, #3
 80019b4:	e116      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b6:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019be:	f7fe ffc9 	bl	8000954 <HAL_GetTick>
 80019c2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c4:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 80019c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019c8:	f013 0f02 	tst.w	r3, #2
 80019cc:	d006      	beq.n	80019dc <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ce:	f7fe ffc1 	bl	8000954 <HAL_GetTick>
 80019d2:	1b40      	subs	r0, r0, r5
 80019d4:	2802      	cmp	r0, #2
 80019d6:	d9f5      	bls.n	80019c4 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80019d8:	2003      	movs	r0, #3
 80019da:	e103      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	f013 0f04 	tst.w	r3, #4
 80019e2:	d077      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e4:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80019ec:	d133      	bne.n	8001a56 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 80019f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019fa:	641a      	str	r2, [r3, #64]	; 0x40
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a06:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <HAL_RCC_OscConfig+0x29c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a10:	d023      	beq.n	8001a5a <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a12:	68a3      	ldr	r3, [r4, #8]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d034      	beq.n	8001a82 <HAL_RCC_OscConfig+0x272>
 8001a18:	2b05      	cmp	r3, #5
 8001a1a:	d038      	beq.n	8001a8e <HAL_RCC_OscConfig+0x27e>
 8001a1c:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 8001a1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	671a      	str	r2, [r3, #112]	; 0x70
 8001a26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a28:	f022 0204 	bic.w	r2, r2, #4
 8001a2c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a2e:	68a3      	ldr	r3, [r4, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d03d      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7fe ff8e 	bl	8000954 <HAL_GetTick>
 8001a38:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	f013 0f02 	tst.w	r3, #2
 8001a42:	d146      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a44:	f7fe ff86 	bl	8000954 <HAL_GetTick>
 8001a48:	1b80      	subs	r0, r0, r6
 8001a4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a4e:	4298      	cmp	r0, r3
 8001a50:	d9f3      	bls.n	8001a3a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001a52:	2003      	movs	r0, #3
 8001a54:	e0c6      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001a56:	2500      	movs	r5, #0
 8001a58:	e7d6      	b.n	8001a08 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a5a:	4a14      	ldr	r2, [pc, #80]	; (8001aac <HAL_RCC_OscConfig+0x29c>)
 8001a5c:	6813      	ldr	r3, [r2, #0]
 8001a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a62:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001a64:	f7fe ff76 	bl	8000954 <HAL_GetTick>
 8001a68:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_RCC_OscConfig+0x29c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a72:	d1ce      	bne.n	8001a12 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a74:	f7fe ff6e 	bl	8000954 <HAL_GetTick>
 8001a78:	1b80      	subs	r0, r0, r6
 8001a7a:	2802      	cmp	r0, #2
 8001a7c:	d9f5      	bls.n	8001a6a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001a7e:	2003      	movs	r0, #3
 8001a80:	e0b0      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a82:	4a08      	ldr	r2, [pc, #32]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 8001a84:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a8c:	e7cf      	b.n	8001a2e <HAL_RCC_OscConfig+0x21e>
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_RCC_OscConfig+0x294>)
 8001a90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a92:	f042 0204 	orr.w	r2, r2, #4
 8001a96:	671a      	str	r2, [r3, #112]	; 0x70
 8001a98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	671a      	str	r2, [r3, #112]	; 0x70
 8001aa0:	e7c5      	b.n	8001a2e <HAL_RCC_OscConfig+0x21e>
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	42470000 	.word	0x42470000
 8001aac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab0:	f7fe ff50 	bl	8000954 <HAL_GetTick>
 8001ab4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab6:	4b52      	ldr	r3, [pc, #328]	; (8001c00 <HAL_RCC_OscConfig+0x3f0>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aba:	f013 0f02 	tst.w	r3, #2
 8001abe:	d008      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac0:	f7fe ff48 	bl	8000954 <HAL_GetTick>
 8001ac4:	1b80      	subs	r0, r0, r6
 8001ac6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001aca:	4298      	cmp	r0, r3
 8001acc:	d9f3      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001ace:	2003      	movs	r0, #3
 8001ad0:	e088      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ad2:	b9ed      	cbnz	r5, 8001b10 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad4:	69a3      	ldr	r3, [r4, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8083 	beq.w	8001be2 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001adc:	4a48      	ldr	r2, [pc, #288]	; (8001c00 <HAL_RCC_OscConfig+0x3f0>)
 8001ade:	6892      	ldr	r2, [r2, #8]
 8001ae0:	f002 020c 	and.w	r2, r2, #12
 8001ae4:	2a08      	cmp	r2, #8
 8001ae6:	d051      	beq.n	8001b8c <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d017      	beq.n	8001b1c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aec:	4b45      	ldr	r3, [pc, #276]	; (8001c04 <HAL_RCC_OscConfig+0x3f4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af2:	f7fe ff2f 	bl	8000954 <HAL_GetTick>
 8001af6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af8:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <HAL_RCC_OscConfig+0x3f0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b00:	d042      	beq.n	8001b88 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b02:	f7fe ff27 	bl	8000954 <HAL_GetTick>
 8001b06:	1b00      	subs	r0, r0, r4
 8001b08:	2802      	cmp	r0, #2
 8001b0a:	d9f5      	bls.n	8001af8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	e069      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b10:	4a3b      	ldr	r2, [pc, #236]	; (8001c00 <HAL_RCC_OscConfig+0x3f0>)
 8001b12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	e7db      	b.n	8001ad4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001b1c:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <HAL_RCC_OscConfig+0x3f4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001b22:	f7fe ff17 	bl	8000954 <HAL_GetTick>
 8001b26:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b28:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <HAL_RCC_OscConfig+0x3f0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b30:	d006      	beq.n	8001b40 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b32:	f7fe ff0f 	bl	8000954 <HAL_GetTick>
 8001b36:	1b40      	subs	r0, r0, r5
 8001b38:	2802      	cmp	r0, #2
 8001b3a:	d9f5      	bls.n	8001b28 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	e051      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b40:	69e3      	ldr	r3, [r4, #28]
 8001b42:	6a22      	ldr	r2, [r4, #32]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b48:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b4e:	0852      	lsrs	r2, r2, #1
 8001b50:	3a01      	subs	r2, #1
 8001b52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b5c:	4a28      	ldr	r2, [pc, #160]	; (8001c00 <HAL_RCC_OscConfig+0x3f0>)
 8001b5e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b60:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <HAL_RCC_OscConfig+0x3f4>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001b66:	f7fe fef5 	bl	8000954 <HAL_GetTick>
 8001b6a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_RCC_OscConfig+0x3f0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b74:	d106      	bne.n	8001b84 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b76:	f7fe feed 	bl	8000954 <HAL_GetTick>
 8001b7a:	1b00      	subs	r0, r0, r4
 8001b7c:	2802      	cmp	r0, #2
 8001b7e:	d9f5      	bls.n	8001b6c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001b80:	2003      	movs	r0, #3
 8001b82:	e02f      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001b84:	2000      	movs	r0, #0
 8001b86:	e02d      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
 8001b88:	2000      	movs	r0, #0
 8001b8a:	e02b      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d02b      	beq.n	8001be8 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_RCC_OscConfig+0x3f0>)
 8001b92:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b94:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001b98:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9a:	4291      	cmp	r1, r2
 8001b9c:	d126      	bne.n	8001bec <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ba2:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba4:	428a      	cmp	r2, r1
 8001ba6:	d123      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ba8:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001baa:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001bae:	401a      	ands	r2, r3
 8001bb0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001bb4:	d11e      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bb6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001bba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bbc:	0852      	lsrs	r2, r2, #1
 8001bbe:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bc0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001bc4:	d118      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bc6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001bca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bcc:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001bd0:	d114      	bne.n	8001bfc <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	e006      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001bd6:	2001      	movs	r0, #1
}
 8001bd8:	4770      	bx	lr
        return HAL_ERROR;
 8001bda:	2001      	movs	r0, #1
 8001bdc:	e002      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001bde:	2001      	movs	r0, #1
 8001be0:	e000      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001be2:	2000      	movs	r0, #0
}
 8001be4:	b002      	add	sp, #8
 8001be6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001be8:	2001      	movs	r0, #1
 8001bea:	e7fb      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001bec:	2001      	movs	r0, #1
 8001bee:	e7f9      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	e7f7      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	e7f5      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	e7f3      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	e7f1      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
 8001c00:	40023800 	.word	0x40023800
 8001c04:	42470000 	.word	0x42470000

08001c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c0a:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d03f      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x8e>
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d13f      	bne.n	8001c9a <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001c28:	d012      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c2c:	6859      	ldr	r1, [r3, #4]
 8001c2e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c32:	481c      	ldr	r0, [pc, #112]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c34:	2300      	movs	r3, #0
 8001c36:	fba1 0100 	umull	r0, r1, r1, r0
 8001c3a:	f7fe fad1 	bl	80001e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c3e:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c46:	3301      	adds	r3, #1
 8001c48:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001c4a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001c4e:	e025      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c52:	6859      	ldr	r1, [r3, #4]
 8001c54:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8001c58:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8001c5c:	ebb1 000c 	subs.w	r0, r1, ip
 8001c60:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001c64:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001c68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c6c:	0181      	lsls	r1, r0, #6
 8001c6e:	1a09      	subs	r1, r1, r0
 8001c70:	eb63 030e 	sbc.w	r3, r3, lr
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c7a:	00c9      	lsls	r1, r1, #3
 8001c7c:	eb11 0c0c 	adds.w	ip, r1, ip
 8001c80:	f143 0300 	adc.w	r3, r3, #0
 8001c84:	0299      	lsls	r1, r3, #10
 8001c86:	2300      	movs	r3, #0
 8001c88:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001c8c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001c90:	f7fe faa6 	bl	80001e0 <__aeabi_uldivmod>
 8001c94:	e7d3      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001c96:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c98:	e000      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c9a:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c9c:	bd08      	pop	{r3, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	017d7840 	.word	0x017d7840
 8001ca8:	00f42400 	.word	0x00f42400

08001cac <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001cac:	2800      	cmp	r0, #0
 8001cae:	f000 809b 	beq.w	8001de8 <HAL_RCC_ClockConfig+0x13c>
{
 8001cb2:	b570      	push	{r4, r5, r6, lr}
 8001cb4:	460d      	mov	r5, r1
 8001cb6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <HAL_RCC_ClockConfig+0x14c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	428b      	cmp	r3, r1
 8001cc2:	d208      	bcs.n	8001cd6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc4:	b2cb      	uxtb	r3, r1
 8001cc6:	4a4c      	ldr	r2, [pc, #304]	; (8001df8 <HAL_RCC_ClockConfig+0x14c>)
 8001cc8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	6813      	ldr	r3, [r2, #0]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	428b      	cmp	r3, r1
 8001cd2:	f040 808b 	bne.w	8001dec <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	f013 0f02 	tst.w	r3, #2
 8001cdc:	d017      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cde:	f013 0f04 	tst.w	r3, #4
 8001ce2:	d004      	beq.n	8001cee <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce4:	4a45      	ldr	r2, [pc, #276]	; (8001dfc <HAL_RCC_ClockConfig+0x150>)
 8001ce6:	6893      	ldr	r3, [r2, #8]
 8001ce8:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cec:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	f013 0f08 	tst.w	r3, #8
 8001cf4:	d004      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf6:	4a41      	ldr	r2, [pc, #260]	; (8001dfc <HAL_RCC_ClockConfig+0x150>)
 8001cf8:	6893      	ldr	r3, [r2, #8]
 8001cfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cfe:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d00:	4a3e      	ldr	r2, [pc, #248]	; (8001dfc <HAL_RCC_ClockConfig+0x150>)
 8001d02:	6893      	ldr	r3, [r2, #8]
 8001d04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d08:	68a1      	ldr	r1, [r4, #8]
 8001d0a:	430b      	orrs	r3, r1
 8001d0c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	f013 0f01 	tst.w	r3, #1
 8001d14:	d032      	beq.n	8001d7c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d16:	6863      	ldr	r3, [r4, #4]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d021      	beq.n	8001d60 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d1c:	1e9a      	subs	r2, r3, #2
 8001d1e:	2a01      	cmp	r2, #1
 8001d20:	d925      	bls.n	8001d6e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d22:	4a36      	ldr	r2, [pc, #216]	; (8001dfc <HAL_RCC_ClockConfig+0x150>)
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	f012 0f02 	tst.w	r2, #2
 8001d2a:	d061      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2c:	4933      	ldr	r1, [pc, #204]	; (8001dfc <HAL_RCC_ClockConfig+0x150>)
 8001d2e:	688a      	ldr	r2, [r1, #8]
 8001d30:	f022 0203 	bic.w	r2, r2, #3
 8001d34:	4313      	orrs	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001d38:	f7fe fe0c 	bl	8000954 <HAL_GetTick>
 8001d3c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	4b2f      	ldr	r3, [pc, #188]	; (8001dfc <HAL_RCC_ClockConfig+0x150>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	6862      	ldr	r2, [r4, #4]
 8001d48:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d4c:	d016      	beq.n	8001d7c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4e:	f7fe fe01 	bl	8000954 <HAL_GetTick>
 8001d52:	1b80      	subs	r0, r0, r6
 8001d54:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d58:	4298      	cmp	r0, r3
 8001d5a:	d9f0      	bls.n	8001d3e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	e042      	b.n	8001de6 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d60:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <HAL_RCC_ClockConfig+0x150>)
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001d68:	d1e0      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	e03b      	b.n	8001de6 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6e:	4a23      	ldr	r2, [pc, #140]	; (8001dfc <HAL_RCC_ClockConfig+0x150>)
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001d76:	d1d9      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001d78:	2001      	movs	r0, #1
 8001d7a:	e034      	b.n	8001de6 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <HAL_RCC_ClockConfig+0x14c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	42ab      	cmp	r3, r5
 8001d86:	d907      	bls.n	8001d98 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d88:	b2ea      	uxtb	r2, r5
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_RCC_ClockConfig+0x14c>)
 8001d8c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	42ab      	cmp	r3, r5
 8001d96:	d12d      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	f013 0f04 	tst.w	r3, #4
 8001d9e:	d006      	beq.n	8001dae <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da0:	4a16      	ldr	r2, [pc, #88]	; (8001dfc <HAL_RCC_ClockConfig+0x150>)
 8001da2:	6893      	ldr	r3, [r2, #8]
 8001da4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001da8:	68e1      	ldr	r1, [r4, #12]
 8001daa:	430b      	orrs	r3, r1
 8001dac:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	f013 0f08 	tst.w	r3, #8
 8001db4:	d007      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001db6:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <HAL_RCC_ClockConfig+0x150>)
 8001db8:	6893      	ldr	r3, [r2, #8]
 8001dba:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001dbe:	6921      	ldr	r1, [r4, #16]
 8001dc0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001dc4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dc6:	f7ff ff1f 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_RCC_ClockConfig+0x150>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <HAL_RCC_ClockConfig+0x154>)
 8001dd4:	5cd3      	ldrb	r3, [r2, r3]
 8001dd6:	40d8      	lsrs	r0, r3
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_RCC_ClockConfig+0x158>)
 8001dda:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_RCC_ClockConfig+0x15c>)
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	f7fe fce8 	bl	80007b4 <HAL_InitTick>
  return HAL_OK;
 8001de4:	2000      	movs	r0, #0
}
 8001de6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001de8:	2001      	movs	r0, #1
}
 8001dea:	4770      	bx	lr
      return HAL_ERROR;
 8001dec:	2001      	movs	r0, #1
 8001dee:	e7fa      	b.n	8001de6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001df0:	2001      	movs	r0, #1
 8001df2:	e7f8      	b.n	8001de6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001df4:	2001      	movs	r0, #1
 8001df6:	e7f6      	b.n	8001de6 <HAL_RCC_ClockConfig+0x13a>
 8001df8:	40023c00 	.word	0x40023c00
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	08006b1c 	.word	0x08006b1c
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000008 	.word	0x20000008

08001e0c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001e0c:	4b01      	ldr	r3, [pc, #4]	; (8001e14 <HAL_RCC_GetHCLKFreq+0x8>)
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000

08001e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e18:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e1a:	f7ff fff7 	bl	8001e0c <HAL_RCC_GetHCLKFreq>
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001e26:	4a03      	ldr	r2, [pc, #12]	; (8001e34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001e28:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e2a:	40d8      	lsrs	r0, r3
 8001e2c:	bd08      	pop	{r3, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	08006b2c 	.word	0x08006b2c

08001e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e38:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e3a:	f7ff ffe7 	bl	8001e0c <HAL_RCC_GetHCLKFreq>
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001e46:	4a03      	ldr	r2, [pc, #12]	; (8001e54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e48:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e4a:	40d8      	lsrs	r0, r3
 8001e4c:	bd08      	pop	{r3, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	08006b2c 	.word	0x08006b2c

08001e58 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e58:	230f      	movs	r3, #15
 8001e5a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCC_GetClockConfig+0x34>)
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	f002 0203 	and.w	r2, r2, #3
 8001e64:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001e6c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001e74:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	08db      	lsrs	r3, r3, #3
 8001e7a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001e7e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <HAL_RCC_GetClockConfig+0x38>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	600b      	str	r3, [r1, #0]
}
 8001e8a:	4770      	bx	lr
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40023c00 	.word	0x40023c00

08001e94 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e94:	4770      	bx	lr
	...

08001e98 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e98:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d12f      	bne.n	8001f02 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ea8:	6802      	ldr	r2, [r0, #0]
 8001eaa:	68d3      	ldr	r3, [r2, #12]
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb2:	6803      	ldr	r3, [r0, #0]
 8001eb4:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <HAL_TIM_Base_Start_IT+0x74>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d018      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x54>
 8001eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebe:	d015      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x54>
 8001ec0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d011      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x54>
 8001ec8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d00d      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x54>
 8001ed0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d009      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x54>
 8001ed8:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d005      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ee8:	2000      	movs	r0, #0
 8001eea:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef2:	2a06      	cmp	r2, #6
 8001ef4:	d007      	beq.n	8001f06 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001efe:	2000      	movs	r0, #0
 8001f00:	4770      	bx	lr
    return HAL_ERROR;
 8001f02:	2001      	movs	r0, #1
 8001f04:	4770      	bx	lr
  return HAL_OK;
 8001f06:	2000      	movs	r0, #0
}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40010000 	.word	0x40010000

08001f10 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f10:	4770      	bx	lr

08001f12 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f14:	4770      	bx	lr

08001f16 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIM_IRQHandler>:
{
 8001f18:	b510      	push	{r4, lr}
 8001f1a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f1c:	6803      	ldr	r3, [r0, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	f012 0f02 	tst.w	r2, #2
 8001f24:	d011      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	f012 0f02 	tst.w	r2, #2
 8001f2c:	d00d      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f2e:	f06f 0202 	mvn.w	r2, #2
 8001f32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f34:	2301      	movs	r3, #1
 8001f36:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f38:	6803      	ldr	r3, [r0, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f013 0f03 	tst.w	r3, #3
 8001f40:	d070      	beq.n	8002024 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	f7ff ffe6 	bl	8001f12 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	2300      	movs	r3, #0
 8001f48:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	f012 0f04 	tst.w	r2, #4
 8001f52:	d012      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	f012 0f04 	tst.w	r2, #4
 8001f5a:	d00e      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f5c:	f06f 0204 	mvn.w	r2, #4
 8001f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f62:	2302      	movs	r3, #2
 8001f64:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f6e:	d05f      	beq.n	8002030 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f70:	4620      	mov	r0, r4
 8001f72:	f7ff ffce 	bl	8001f12 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	2300      	movs	r3, #0
 8001f78:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f7a:	6823      	ldr	r3, [r4, #0]
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	f012 0f08 	tst.w	r2, #8
 8001f82:	d012      	beq.n	8001faa <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	f012 0f08 	tst.w	r2, #8
 8001f8a:	d00e      	beq.n	8001faa <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f8c:	f06f 0208 	mvn.w	r2, #8
 8001f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f92:	2304      	movs	r3, #4
 8001f94:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f013 0f03 	tst.w	r3, #3
 8001f9e:	d04e      	beq.n	800203e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f7ff ffb6 	bl	8001f12 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	691a      	ldr	r2, [r3, #16]
 8001fae:	f012 0f10 	tst.w	r2, #16
 8001fb2:	d012      	beq.n	8001fda <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	f012 0f10 	tst.w	r2, #16
 8001fba:	d00e      	beq.n	8001fda <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fbc:	f06f 0210 	mvn.w	r2, #16
 8001fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fc2:	2308      	movs	r3, #8
 8001fc4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001fce:	d03d      	beq.n	800204c <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f7ff ff9e 	bl	8001f12 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fda:	6823      	ldr	r3, [r4, #0]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	f012 0f01 	tst.w	r2, #1
 8001fe2:	d003      	beq.n	8001fec <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	f012 0f01 	tst.w	r2, #1
 8001fea:	d136      	bne.n	800205a <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fec:	6823      	ldr	r3, [r4, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001ffc:	d134      	bne.n	8002068 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ffe:	6823      	ldr	r3, [r4, #0]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002006:	d003      	beq.n	8002010 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800200e:	d132      	bne.n	8002076 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	f012 0f20 	tst.w	r2, #32
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	f012 0f20 	tst.w	r2, #32
 8002020:	d130      	bne.n	8002084 <HAL_TIM_IRQHandler+0x16c>
}
 8002022:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002024:	f7ff ff74 	bl	8001f10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	4620      	mov	r0, r4
 800202a:	f7ff ff73 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
 800202e:	e78a      	b.n	8001f46 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002030:	4620      	mov	r0, r4
 8002032:	f7ff ff6d 	bl	8001f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002036:	4620      	mov	r0, r4
 8002038:	f7ff ff6c 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
 800203c:	e79b      	b.n	8001f76 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203e:	4620      	mov	r0, r4
 8002040:	f7ff ff66 	bl	8001f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	4620      	mov	r0, r4
 8002046:	f7ff ff65 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
 800204a:	e7ac      	b.n	8001fa6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204c:	4620      	mov	r0, r4
 800204e:	f7ff ff5f 	bl	8001f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002052:	4620      	mov	r0, r4
 8002054:	f7ff ff5e 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
 8002058:	e7bd      	b.n	8001fd6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800205a:	f06f 0201 	mvn.w	r2, #1
 800205e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002060:	4620      	mov	r0, r4
 8002062:	f7fe faaf 	bl	80005c4 <HAL_TIM_PeriodElapsedCallback>
 8002066:	e7c1      	b.n	8001fec <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002068:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800206c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800206e:	4620      	mov	r0, r4
 8002070:	f000 f88b 	bl	800218a <HAL_TIMEx_BreakCallback>
 8002074:	e7c3      	b.n	8001ffe <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002076:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800207a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800207c:	4620      	mov	r0, r4
 800207e:	f7ff ff4a 	bl	8001f16 <HAL_TIM_TriggerCallback>
 8002082:	e7c5      	b.n	8002010 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002084:	f06f 0220 	mvn.w	r2, #32
 8002088:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800208a:	4620      	mov	r0, r4
 800208c:	f000 f87c 	bl	8002188 <HAL_TIMEx_CommutCallback>
}
 8002090:	e7c7      	b.n	8002022 <HAL_TIM_IRQHandler+0x10a>
	...

08002094 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002094:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002096:	4a25      	ldr	r2, [pc, #148]	; (800212c <TIM_Base_SetConfig+0x98>)
 8002098:	4290      	cmp	r0, r2
 800209a:	d00e      	beq.n	80020ba <TIM_Base_SetConfig+0x26>
 800209c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020a0:	d00b      	beq.n	80020ba <TIM_Base_SetConfig+0x26>
 80020a2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80020a6:	4290      	cmp	r0, r2
 80020a8:	d007      	beq.n	80020ba <TIM_Base_SetConfig+0x26>
 80020aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020ae:	4290      	cmp	r0, r2
 80020b0:	d003      	beq.n	80020ba <TIM_Base_SetConfig+0x26>
 80020b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020b6:	4290      	cmp	r0, r2
 80020b8:	d103      	bne.n	80020c2 <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80020be:	684a      	ldr	r2, [r1, #4]
 80020c0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020c2:	4a1a      	ldr	r2, [pc, #104]	; (800212c <TIM_Base_SetConfig+0x98>)
 80020c4:	4290      	cmp	r0, r2
 80020c6:	d01a      	beq.n	80020fe <TIM_Base_SetConfig+0x6a>
 80020c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020cc:	d017      	beq.n	80020fe <TIM_Base_SetConfig+0x6a>
 80020ce:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80020d2:	4290      	cmp	r0, r2
 80020d4:	d013      	beq.n	80020fe <TIM_Base_SetConfig+0x6a>
 80020d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020da:	4290      	cmp	r0, r2
 80020dc:	d00f      	beq.n	80020fe <TIM_Base_SetConfig+0x6a>
 80020de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020e2:	4290      	cmp	r0, r2
 80020e4:	d00b      	beq.n	80020fe <TIM_Base_SetConfig+0x6a>
 80020e6:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80020ea:	4290      	cmp	r0, r2
 80020ec:	d007      	beq.n	80020fe <TIM_Base_SetConfig+0x6a>
 80020ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020f2:	4290      	cmp	r0, r2
 80020f4:	d003      	beq.n	80020fe <TIM_Base_SetConfig+0x6a>
 80020f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020fa:	4290      	cmp	r0, r2
 80020fc:	d103      	bne.n	8002106 <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002102:	68ca      	ldr	r2, [r1, #12]
 8002104:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800210a:	694a      	ldr	r2, [r1, #20]
 800210c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800210e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002110:	688b      	ldr	r3, [r1, #8]
 8002112:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002114:	680b      	ldr	r3, [r1, #0]
 8002116:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <TIM_Base_SetConfig+0x98>)
 800211a:	4298      	cmp	r0, r3
 800211c:	d002      	beq.n	8002124 <TIM_Base_SetConfig+0x90>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800211e:	2301      	movs	r3, #1
 8002120:	6143      	str	r3, [r0, #20]
}
 8002122:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002124:	690b      	ldr	r3, [r1, #16]
 8002126:	6303      	str	r3, [r0, #48]	; 0x30
 8002128:	e7f9      	b.n	800211e <TIM_Base_SetConfig+0x8a>
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000

08002130 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002130:	b340      	cbz	r0, 8002184 <HAL_TIM_Base_Init+0x54>
{
 8002132:	b510      	push	{r4, lr}
 8002134:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002136:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800213a:	b1f3      	cbz	r3, 800217a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	2302      	movs	r3, #2
 800213e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002142:	4621      	mov	r1, r4
 8002144:	f851 0b04 	ldr.w	r0, [r1], #4
 8002148:	f7ff ffa4 	bl	8002094 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214c:	2301      	movs	r3, #1
 800214e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002152:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002156:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800215a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800215e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002162:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002166:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800216a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800216e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002172:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002176:	2000      	movs	r0, #0
}
 8002178:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800217a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800217e:	f7ff fe89 	bl	8001e94 <HAL_TIM_Base_MspInit>
 8002182:	e7db      	b.n	800213c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002184:	2001      	movs	r0, #1
}
 8002186:	4770      	bx	lr

08002188 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002188:	4770      	bx	lr

0800218a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800218a:	4770      	bx	lr

0800218c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800218c:	b538      	push	{r3, r4, r5, lr}
 800218e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002190:	6802      	ldr	r2, [r0, #0]
 8002192:	6913      	ldr	r3, [r2, #16]
 8002194:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002198:	68c1      	ldr	r1, [r0, #12]
 800219a:	430b      	orrs	r3, r1
 800219c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800219e:	6883      	ldr	r3, [r0, #8]
 80021a0:	6902      	ldr	r2, [r0, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	6942      	ldr	r2, [r0, #20]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	69c2      	ldr	r2, [r0, #28]
 80021aa:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80021ac:	6801      	ldr	r1, [r0, #0]
 80021ae:	68cb      	ldr	r3, [r1, #12]
 80021b0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80021b4:	f023 030c 	bic.w	r3, r3, #12
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021bc:	6802      	ldr	r2, [r0, #0]
 80021be:	6953      	ldr	r3, [r2, #20]
 80021c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c4:	6981      	ldr	r1, [r0, #24]
 80021c6:	430b      	orrs	r3, r1
 80021c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021ca:	6803      	ldr	r3, [r0, #0]
 80021cc:	4a31      	ldr	r2, [pc, #196]	; (8002294 <UART_SetConfig+0x108>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d006      	beq.n	80021e0 <UART_SetConfig+0x54>
 80021d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d002      	beq.n	80021e0 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021da:	f7ff fe1d 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 80021de:	e001      	b.n	80021e4 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80021e0:	f7ff fe2a 	bl	8001e38 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021e4:	69e3      	ldr	r3, [r4, #28]
 80021e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ea:	d029      	beq.n	8002240 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021ec:	2100      	movs	r1, #0
 80021ee:	1803      	adds	r3, r0, r0
 80021f0:	4149      	adcs	r1, r1
 80021f2:	181b      	adds	r3, r3, r0
 80021f4:	f141 0100 	adc.w	r1, r1, #0
 80021f8:	00c9      	lsls	r1, r1, #3
 80021fa:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	1818      	adds	r0, r3, r0
 8002202:	6863      	ldr	r3, [r4, #4]
 8002204:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002208:	ea4f 7393 	mov.w	r3, r3, lsr #30
 800220c:	f141 0100 	adc.w	r1, r1, #0
 8002210:	f7fd ffe6 	bl	80001e0 <__aeabi_uldivmod>
 8002214:	4d20      	ldr	r5, [pc, #128]	; (8002298 <UART_SetConfig+0x10c>)
 8002216:	fba5 3200 	umull	r3, r2, r5, r0
 800221a:	0951      	lsrs	r1, r2, #5
 800221c:	2364      	movs	r3, #100	; 0x64
 800221e:	fb03 0311 	mls	r3, r3, r1, r0
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	3332      	adds	r3, #50	; 0x32
 8002226:	fba5 2303 	umull	r2, r3, r5, r3
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002230:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	6821      	ldr	r1, [r4, #0]
 800223a:	4413      	add	r3, r2
 800223c:	608b      	str	r3, [r1, #8]
  }
}
 800223e:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002240:	2300      	movs	r3, #0
 8002242:	1802      	adds	r2, r0, r0
 8002244:	eb43 0103 	adc.w	r1, r3, r3
 8002248:	1812      	adds	r2, r2, r0
 800224a:	f141 0100 	adc.w	r1, r1, #0
 800224e:	00c9      	lsls	r1, r1, #3
 8002250:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002254:	00d2      	lsls	r2, r2, #3
 8002256:	1810      	adds	r0, r2, r0
 8002258:	f141 0100 	adc.w	r1, r1, #0
 800225c:	6862      	ldr	r2, [r4, #4]
 800225e:	1892      	adds	r2, r2, r2
 8002260:	415b      	adcs	r3, r3
 8002262:	f7fd ffbd 	bl	80001e0 <__aeabi_uldivmod>
 8002266:	4d0c      	ldr	r5, [pc, #48]	; (8002298 <UART_SetConfig+0x10c>)
 8002268:	fba5 3200 	umull	r3, r2, r5, r0
 800226c:	0951      	lsrs	r1, r2, #5
 800226e:	2364      	movs	r3, #100	; 0x64
 8002270:	fb03 0311 	mls	r3, r3, r1, r0
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	3332      	adds	r3, #50	; 0x32
 8002278:	fba5 2303 	umull	r2, r3, r5, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	005a      	lsls	r2, r3, #1
 8002280:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002284:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	6821      	ldr	r1, [r4, #0]
 800228e:	4413      	add	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
 8002292:	e7d4      	b.n	800223e <UART_SetConfig+0xb2>
 8002294:	40011000 	.word	0x40011000
 8002298:	51eb851f 	.word	0x51eb851f

0800229c <HAL_UART_Init>:
  if (huart == NULL)
 800229c:	b358      	cbz	r0, 80022f6 <HAL_UART_Init+0x5a>
{
 800229e:	b510      	push	{r4, lr}
 80022a0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80022a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022a6:	b30b      	cbz	r3, 80022ec <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80022a8:	2324      	movs	r3, #36	; 0x24
 80022aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80022ae:	6822      	ldr	r2, [r4, #0]
 80022b0:	68d3      	ldr	r3, [r2, #12]
 80022b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022b6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7ff ff67 	bl	800218c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022be:	6822      	ldr	r2, [r4, #0]
 80022c0:	6913      	ldr	r3, [r2, #16]
 80022c2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80022c6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022c8:	6822      	ldr	r2, [r4, #0]
 80022ca:	6953      	ldr	r3, [r2, #20]
 80022cc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80022d0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80022d2:	6822      	ldr	r2, [r4, #0]
 80022d4:	68d3      	ldr	r3, [r2, #12]
 80022d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022da:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022dc:	2000      	movs	r0, #0
 80022de:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022e0:	2320      	movs	r3, #32
 80022e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80022ea:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80022ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80022f0:	f7fe fa26 	bl	8000740 <HAL_UART_MspInit>
 80022f4:	e7d8      	b.n	80022a8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80022f6:	2001      	movs	r0, #1
}
 80022f8:	4770      	bx	lr
	...

080022fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80022fc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002302:	9b01      	ldr	r3, [sp, #4]
 8002304:	3301      	adds	r3, #1
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <USB_CoreReset+0x48>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d814      	bhi.n	8002338 <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800230e:	6903      	ldr	r3, [r0, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	daf6      	bge.n	8002302 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002318:	6903      	ldr	r3, [r0, #16]
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002320:	9b01      	ldr	r3, [sp, #4]
 8002322:	3301      	adds	r3, #1
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	4a07      	ldr	r2, [pc, #28]	; (8002344 <USB_CoreReset+0x48>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d808      	bhi.n	800233e <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800232c:	6903      	ldr	r3, [r0, #16]
 800232e:	f013 0f01 	tst.w	r3, #1
 8002332:	d1f5      	bne.n	8002320 <USB_CoreReset+0x24>

  return HAL_OK;
 8002334:	2000      	movs	r0, #0
 8002336:	e000      	b.n	800233a <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 8002338:	2003      	movs	r0, #3
}
 800233a:	b002      	add	sp, #8
 800233c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800233e:	2003      	movs	r0, #3
 8002340:	e7fb      	b.n	800233a <USB_CoreReset+0x3e>
 8002342:	bf00      	nop
 8002344:	00030d40 	.word	0x00030d40

08002348 <USB_CoreInit>:
{
 8002348:	b084      	sub	sp, #16
 800234a:	b510      	push	{r4, lr}
 800234c:	4604      	mov	r4, r0
 800234e:	a803      	add	r0, sp, #12
 8002350:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002354:	9b08      	ldr	r3, [sp, #32]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d11f      	bne.n	800239a <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800235a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800235c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002360:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002362:	68e3      	ldr	r3, [r4, #12]
 8002364:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800236c:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800236e:	68e3      	ldr	r3, [r4, #12]
 8002370:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002374:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002378:	2b01      	cmp	r3, #1
 800237a:	d009      	beq.n	8002390 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 800237c:	4620      	mov	r0, r4
 800237e:	f7ff ffbd 	bl	80022fc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002382:	9b06      	ldr	r3, [sp, #24]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d01b      	beq.n	80023c0 <USB_CoreInit+0x78>
}
 8002388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800238c:	b004      	add	sp, #16
 800238e:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002390:	68e3      	ldr	r3, [r4, #12]
 8002392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002396:	60e3      	str	r3, [r4, #12]
 8002398:	e7f0      	b.n	800237c <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800239a:	68e3      	ldr	r3, [r4, #12]
 800239c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023a0:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80023a2:	4620      	mov	r0, r4
 80023a4:	f7ff ffaa 	bl	80022fc <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80023a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80023aa:	b923      	cbnz	r3, 80023b6 <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80023ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b2:	63a3      	str	r3, [r4, #56]	; 0x38
 80023b4:	e7e5      	b.n	8002382 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80023b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80023be:	e7e0      	b.n	8002382 <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80023c0:	68a3      	ldr	r3, [r4, #8]
 80023c2:	f043 0306 	orr.w	r3, r3, #6
 80023c6:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80023c8:	68a3      	ldr	r3, [r4, #8]
 80023ca:	f043 0320 	orr.w	r3, r3, #32
 80023ce:	60a3      	str	r3, [r4, #8]
 80023d0:	e7da      	b.n	8002388 <USB_CoreInit+0x40>

080023d2 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80023d2:	6883      	ldr	r3, [r0, #8]
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6083      	str	r3, [r0, #8]
}
 80023da:	2000      	movs	r0, #0
 80023dc:	4770      	bx	lr

080023de <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80023de:	6883      	ldr	r3, [r0, #8]
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	6083      	str	r3, [r0, #8]
}
 80023e6:	2000      	movs	r0, #0
 80023e8:	4770      	bx	lr
	...

080023ec <USB_FlushTxFifo>:
{
 80023ec:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80023f2:	0189      	lsls	r1, r1, #6
 80023f4:	f041 0120 	orr.w	r1, r1, #32
 80023f8:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80023fa:	9b01      	ldr	r3, [sp, #4]
 80023fc:	3301      	adds	r3, #1
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	4a05      	ldr	r2, [pc, #20]	; (8002418 <USB_FlushTxFifo+0x2c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d805      	bhi.n	8002412 <USB_FlushTxFifo+0x26>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002406:	6903      	ldr	r3, [r0, #16]
 8002408:	f013 0f20 	tst.w	r3, #32
 800240c:	d1f5      	bne.n	80023fa <USB_FlushTxFifo+0xe>
  return HAL_OK;
 800240e:	2000      	movs	r0, #0
 8002410:	e000      	b.n	8002414 <USB_FlushTxFifo+0x28>
      return HAL_TIMEOUT;
 8002412:	2003      	movs	r0, #3
}
 8002414:	b002      	add	sp, #8
 8002416:	4770      	bx	lr
 8002418:	00030d40 	.word	0x00030d40

0800241c <USB_FlushRxFifo>:
{
 800241c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002422:	2310      	movs	r3, #16
 8002424:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002426:	9b01      	ldr	r3, [sp, #4]
 8002428:	3301      	adds	r3, #1
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	4a05      	ldr	r2, [pc, #20]	; (8002444 <USB_FlushRxFifo+0x28>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d805      	bhi.n	800243e <USB_FlushRxFifo+0x22>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002432:	6903      	ldr	r3, [r0, #16]
 8002434:	f013 0f10 	tst.w	r3, #16
 8002438:	d1f5      	bne.n	8002426 <USB_FlushRxFifo+0xa>
  return HAL_OK;
 800243a:	2000      	movs	r0, #0
 800243c:	e000      	b.n	8002440 <USB_FlushRxFifo+0x24>
      return HAL_TIMEOUT;
 800243e:	2003      	movs	r0, #3
}
 8002440:	b002      	add	sp, #8
 8002442:	4770      	bx	lr
 8002444:	00030d40 	.word	0x00030d40

08002448 <USB_WritePacket>:
{
 8002448:	b510      	push	{r4, lr}
 800244a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800244e:	b984      	cbnz	r4, 8002472 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002450:	3303      	adds	r3, #3
 8002452:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8002456:	f04f 0c00 	mov.w	ip, #0
 800245a:	e008      	b.n	800246e <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800245c:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8002460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002464:	f851 4b04 	ldr.w	r4, [r1], #4
 8002468:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 800246a:	f10c 0c01 	add.w	ip, ip, #1
 800246e:	45f4      	cmp	ip, lr
 8002470:	d3f4      	bcc.n	800245c <USB_WritePacket+0x14>
}
 8002472:	2000      	movs	r0, #0
 8002474:	bd10      	pop	{r4, pc}

08002476 <USB_ReadPacket>:
{
 8002476:	b500      	push	{lr}
 8002478:	b083      	sub	sp, #12
 800247a:	4684      	mov	ip, r0
 800247c:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 800247e:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8002482:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8002486:	2300      	movs	r3, #0
 8002488:	e005      	b.n	8002496 <USB_ReadPacket+0x20>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800248a:	f50c 5180 	add.w	r1, ip, #4096	; 0x1000
 800248e:	6809      	ldr	r1, [r1, #0]
 8002490:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8002494:	3301      	adds	r3, #1
 8002496:	4573      	cmp	r3, lr
 8002498:	d3f7      	bcc.n	800248a <USB_ReadPacket+0x14>
  if (remaining_bytes != 0U)
 800249a:	b19a      	cbz	r2, 80024c4 <USB_ReadPacket+0x4e>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800249c:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 80024a0:	f8dc 3000 	ldr.w	r3, [ip]
 80024a4:	9301      	str	r3, [sp, #4]
    i = 0U;
 80024a6:	f04f 0c00 	mov.w	ip, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80024aa:	fa5f f38c 	uxtb.w	r3, ip
 80024ae:	00d9      	lsls	r1, r3, #3
 80024b0:	9b01      	ldr	r3, [sp, #4]
 80024b2:	40cb      	lsrs	r3, r1
 80024b4:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 80024b8:	f10c 0c01 	add.w	ip, ip, #1
      remaining_bytes--;
 80024bc:	3a01      	subs	r2, #1
 80024be:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 80024c0:	2a00      	cmp	r2, #0
 80024c2:	d1f2      	bne.n	80024aa <USB_ReadPacket+0x34>
}
 80024c4:	b003      	add	sp, #12
 80024c6:	f85d fb04 	ldr.w	pc, [sp], #4

080024ca <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80024ca:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80024cc:	6980      	ldr	r0, [r0, #24]
}
 80024ce:	4010      	ands	r0, r2
 80024d0:	4770      	bx	lr

080024d2 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80024d2:	6940      	ldr	r0, [r0, #20]
}
 80024d4:	f000 0001 	and.w	r0, r0, #1
 80024d8:	4770      	bx	lr

080024da <USB_SetCurrentMode>:
{
 80024da:	b538      	push	{r3, r4, r5, lr}
 80024dc:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80024de:	68c3      	ldr	r3, [r0, #12]
 80024e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80024e4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80024e6:	2901      	cmp	r1, #1
 80024e8:	d013      	beq.n	8002512 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 80024ea:	bb19      	cbnz	r1, 8002534 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80024ec:	68c3      	ldr	r3, [r0, #12]
 80024ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024f2:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80024f4:	2400      	movs	r4, #0
      HAL_Delay(1U);
 80024f6:	2001      	movs	r0, #1
 80024f8:	f7fe fa32 	bl	8000960 <HAL_Delay>
      ms++;
 80024fc:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80024fe:	4628      	mov	r0, r5
 8002500:	f7ff ffe7 	bl	80024d2 <USB_GetMode>
 8002504:	b108      	cbz	r0, 800250a <USB_SetCurrentMode+0x30>
 8002506:	2c31      	cmp	r4, #49	; 0x31
 8002508:	d9f5      	bls.n	80024f6 <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 800250a:	2c32      	cmp	r4, #50	; 0x32
 800250c:	d014      	beq.n	8002538 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 800250e:	2000      	movs	r0, #0
}
 8002510:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002512:	68c3      	ldr	r3, [r0, #12]
 8002514:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002518:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800251a:	2400      	movs	r4, #0
      HAL_Delay(1U);
 800251c:	2001      	movs	r0, #1
 800251e:	f7fe fa1f 	bl	8000960 <HAL_Delay>
      ms++;
 8002522:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002524:	4628      	mov	r0, r5
 8002526:	f7ff ffd4 	bl	80024d2 <USB_GetMode>
 800252a:	2801      	cmp	r0, #1
 800252c:	d0ed      	beq.n	800250a <USB_SetCurrentMode+0x30>
 800252e:	2c31      	cmp	r4, #49	; 0x31
 8002530:	d9f4      	bls.n	800251c <USB_SetCurrentMode+0x42>
 8002532:	e7ea      	b.n	800250a <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8002534:	2001      	movs	r0, #1
 8002536:	e7eb      	b.n	8002510 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8002538:	2001      	movs	r0, #1
 800253a:	e7e9      	b.n	8002510 <USB_SetCurrentMode+0x36>

0800253c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800253c:	b084      	sub	sp, #16
 800253e:	b510      	push	{r4, lr}
 8002540:	4604      	mov	r4, r0
 8002542:	a803      	add	r0, sp, #12
 8002544:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800254e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002550:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002554:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002556:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002558:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800255c:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800255e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002564:	63a3      	str	r3, [r4, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8002566:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002568:	f413 7f80 	tst.w	r3, #256	; 0x100
 800256c:	d010      	beq.n	8002590 <USB_HostInit+0x54>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800256e:	9b05      	ldr	r3, [sp, #20]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d006      	beq.n	8002582 <USB_HostInit+0x46>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002574:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8002580:	e00c      	b.n	800259c <USB_HostInit+0x60>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002582:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800258e:	e005      	b.n	800259c <USB_HostInit+0x60>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002590:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8002594:	f023 0304 	bic.w	r3, r3, #4
 8002598:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800259c:	2110      	movs	r1, #16
 800259e:	4620      	mov	r0, r4
 80025a0:	f7ff ff24 	bl	80023ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80025a4:	4620      	mov	r0, r4
 80025a6:	f7ff ff39 	bl	800241c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80025aa:	2200      	movs	r2, #0
 80025ac:	e009      	b.n	80025c2 <USB_HostInit+0x86>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80025ae:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 80025b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025b6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 80025ba:	2100      	movs	r1, #0
 80025bc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 80025c0:	3201      	adds	r2, #1
 80025c2:	9b04      	ldr	r3, [sp, #16]
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d8f2      	bhi.n	80025ae <USB_HostInit+0x72>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025d0:	6163      	str	r3, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80025d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80025d8:	d017      	beq.n	800260a <USB_HostInit+0xce>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80025da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025de:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80025e0:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80025e4:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <USB_HostInit+0xe0>)
 80025e8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80025ec:	9b06      	ldr	r3, [sp, #24]
 80025ee:	b91b      	cbnz	r3, 80025f8 <USB_HostInit+0xbc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80025f0:	69a3      	ldr	r3, [r4, #24]
 80025f2:	f043 0310 	orr.w	r3, r3, #16
 80025f6:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80025f8:	69a2      	ldr	r2, [r4, #24]
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <USB_HostInit+0xe4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 8002600:	2000      	movs	r0, #0
 8002602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002606:	b004      	add	sp, #16
 8002608:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800260e:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8002612:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <USB_HostInit+0xe8>)
 8002616:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800261a:	e7e7      	b.n	80025ec <USB_HostInit+0xb0>
 800261c:	00e00300 	.word	0x00e00300
 8002620:	a3200008 	.word	0xa3200008
 8002624:	004000e0 	.word	0x004000e0

08002628 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002628:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 800262c:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8002630:	f023 0303 	bic.w	r3, r3, #3
 8002634:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002638:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 800263c:	f001 0203 	and.w	r2, r1, #3
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 8002646:	2901      	cmp	r1, #1
 8002648:	d003      	beq.n	8002652 <USB_InitFSLSPClkSel+0x2a>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 800264a:	2902      	cmp	r1, #2
 800264c:	d006      	beq.n	800265c <USB_InitFSLSPClkSel+0x34>
  {
    /* ... */
  }

  return HAL_OK;
}
 800264e:	2000      	movs	r0, #0
 8002650:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8002652:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002656:	f8cc 3004 	str.w	r3, [ip, #4]
 800265a:	e7f8      	b.n	800264e <USB_InitFSLSPClkSel+0x26>
    USBx_HOST->HFIR = 6000U;
 800265c:	f241 7370 	movw	r3, #6000	; 0x1770
 8002660:	f8cc 3004 	str.w	r3, [ip, #4]
 8002664:	e7f3      	b.n	800264e <USB_InitFSLSPClkSel+0x26>

08002666 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8002666:	b530      	push	{r4, r5, lr}
 8002668:	b083      	sub	sp, #12
 800266a:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 800266c:	2500      	movs	r5, #0
 800266e:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002670:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002674:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002676:	9b01      	ldr	r3, [sp, #4]
 8002678:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800267c:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800267e:	9b01      	ldr	r3, [sp, #4]
 8002680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002684:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8002688:	2064      	movs	r0, #100	; 0x64
 800268a:	f7fe f969 	bl	8000960 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800268e:	9b01      	ldr	r3, [sp, #4]
 8002690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002694:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8002698:	200a      	movs	r0, #10
 800269a:	f7fe f961 	bl	8000960 <HAL_Delay>

  return HAL_OK;
}
 800269e:	4628      	mov	r0, r5
 80026a0:	b003      	add	sp, #12
 80026a2:	bd30      	pop	{r4, r5, pc}

080026a4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80026a4:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80026aa:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80026ae:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80026b0:	9b01      	ldr	r3, [sp, #4]
 80026b2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80026b6:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80026b8:	9b01      	ldr	r3, [sp, #4]
 80026ba:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80026be:	d101      	bne.n	80026c4 <USB_DriveVbus+0x20>
 80026c0:	2901      	cmp	r1, #1
 80026c2:	d00c      	beq.n	80026de <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80026c4:	9b01      	ldr	r3, [sp, #4]
 80026c6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80026ca:	d005      	beq.n	80026d8 <USB_DriveVbus+0x34>
 80026cc:	b921      	cbnz	r1, 80026d8 <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80026ce:	9b01      	ldr	r3, [sp, #4]
 80026d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026d4:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 80026d8:	2000      	movs	r0, #0
 80026da:	b002      	add	sp, #8
 80026dc:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80026de:	9b01      	ldr	r3, [sp, #4]
 80026e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026e4:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 80026e8:	e7ec      	b.n	80026c4 <USB_DriveVbus+0x20>

080026ea <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80026ea:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80026f0:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80026f4:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80026f6:	9801      	ldr	r0, [sp, #4]
}
 80026f8:	f3c0 4041 	ubfx	r0, r0, #17, #2
 80026fc:	b002      	add	sp, #8
 80026fe:	4770      	bx	lr

08002700 <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8002700:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002704:	6880      	ldr	r0, [r0, #8]
}
 8002706:	b280      	uxth	r0, r0
 8002708:	4770      	bx	lr

0800270a <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800270a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800270e:	4691      	mov	r9, r2
 8002710:	461c      	mov	r4, r3
 8002712:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002716:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 800271a:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 800271e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002722:	609a      	str	r2, [r3, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8002724:	2d03      	cmp	r5, #3
 8002726:	d86a      	bhi.n	80027fe <USB_HC_Init+0xf4>
 8002728:	e8df f005 	tbb	[pc, r5]
 800272c:	18025b02 	.word	0x18025b02
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002730:	f240 429d 	movw	r2, #1181	; 0x49d
 8002734:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8002736:	f019 0f80 	tst.w	r9, #128	; 0x80
 800273a:	d109      	bne.n	8002750 <USB_HC_Init+0x46>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800273c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800273e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002742:	d05e      	beq.n	8002802 <USB_HC_Init+0xf8>
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800274a:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800274c:	2700      	movs	r7, #0
 800274e:	e00c      	b.n	800276a <USB_HC_Init+0x60>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002756:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8002758:	2700      	movs	r7, #0
 800275a:	e006      	b.n	800276a <USB_HC_Init+0x60>
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800275c:	f240 629d 	movw	r2, #1693	; 0x69d
 8002760:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8002762:	f019 0f80 	tst.w	r9, #128	; 0x80
 8002766:	d136      	bne.n	80027d6 <USB_HC_Init+0xcc>
  HAL_StatusTypeDef ret = HAL_OK;
 8002768:	2700      	movs	r7, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800276a:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
 800276e:	f001 010f 	and.w	r1, r1, #15
 8002772:	2201      	movs	r2, #1
 8002774:	fa02 f101 	lsl.w	r1, r2, r1
 8002778:	4319      	orrs	r1, r3
 800277a:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800277e:	6983      	ldr	r3, [r0, #24]
 8002780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002784:	6183      	str	r3, [r0, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8002786:	f019 0f80 	tst.w	r9, #128	; 0x80
 800278a:	d13c      	bne.n	8002806 <USB_HC_Init+0xfc>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 800278c:	f04f 0800 	mov.w	r8, #0
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8002790:	f7ff ffab 	bl	80026ea <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8002794:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d037      	beq.n	800280c <USB_HC_Init+0x102>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 800279c:	2100      	movs	r1, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800279e:	05a3      	lsls	r3, r4, #22
 80027a0:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80027a4:	ea4f 29c9 	mov.w	r9, r9, lsl #11
 80027a8:	f409 49f0 	and.w	r9, r9, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80027ac:	ea43 0309 	orr.w	r3, r3, r9
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80027b0:	04ac      	lsls	r4, r5, #18
 80027b2:	f404 2440 	and.w	r4, r4, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80027b6:	4323      	orrs	r3, r4
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80027b8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80027bc:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80027c0:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80027c2:	ea43 0308 	orr.w	r3, r3, r8
 80027c6:	430b      	orrs	r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80027c8:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500

  if (ep_type == EP_TYPE_INTR)
 80027cc:	2d03      	cmp	r5, #3
 80027ce:	d024      	beq.n	800281a <USB_HC_Init+0x110>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
  }

  return ret;
}
 80027d0:	4638      	mov	r0, r7
 80027d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027dc:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80027de:	2700      	movs	r7, #0
 80027e0:	e7c3      	b.n	800276a <USB_HC_Init+0x60>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80027e2:	f240 2225 	movw	r2, #549	; 0x225
 80027e6:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 80027e8:	f019 0f80 	tst.w	r9, #128	; 0x80
 80027ec:	d101      	bne.n	80027f2 <USB_HC_Init+0xe8>
  HAL_StatusTypeDef ret = HAL_OK;
 80027ee:	2700      	movs	r7, #0
 80027f0:	e7bb      	b.n	800276a <USB_HC_Init+0x60>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80027f8:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80027fa:	2700      	movs	r7, #0
 80027fc:	e7b5      	b.n	800276a <USB_HC_Init+0x60>
  switch (ep_type)
 80027fe:	2701      	movs	r7, #1
 8002800:	e7b3      	b.n	800276a <USB_HC_Init+0x60>
  HAL_StatusTypeDef ret = HAL_OK;
 8002802:	2700      	movs	r7, #0
 8002804:	e7b1      	b.n	800276a <USB_HC_Init+0x60>
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8002806:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 800280a:	e7c1      	b.n	8002790 <USB_HC_Init+0x86>
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800280c:	2802      	cmp	r0, #2
 800280e:	d002      	beq.n	8002816 <USB_HC_Init+0x10c>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8002810:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002814:	e7c3      	b.n	800279e <USB_HC_Init+0x94>
    HCcharLowSpeed = 0U;
 8002816:	2100      	movs	r1, #0
 8002818:	e7c1      	b.n	800279e <USB_HC_Init+0x94>
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800281a:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 800281e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002822:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
 8002826:	e7d3      	b.n	80027d0 <USB_HC_Init+0xc6>

08002828 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002828:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800282c:	6940      	ldr	r0, [r0, #20]
}
 800282e:	b280      	uxth	r0, r0
 8002830:	4770      	bx	lr

08002832 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8002832:	b430      	push	{r4, r5}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002834:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002838:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 800283c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002840:	f3c3 4381 	ubfx	r3, r3, #18, #2
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8002844:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8002848:	6885      	ldr	r5, [r0, #8]
 800284a:	f015 0f20 	tst.w	r5, #32
 800284e:	d002      	beq.n	8002856 <USB_HC_Halt+0x24>
 8002850:	0fe4      	lsrs	r4, r4, #31
 8002852:	2c00      	cmp	r4, #0
 8002854:	d055      	beq.n	8002902 <USB_HC_Halt+0xd0>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002856:	b333      	cbz	r3, 80028a6 <USB_HC_Halt+0x74>
 8002858:	2b02      	cmp	r3, #2
 800285a:	d024      	beq.n	80028a6 <USB_HC_Halt+0x74>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800285c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002860:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002864:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002868:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 800286c:	f413 037f 	ands.w	r3, r3, #16711680	; 0xff0000
 8002870:	d14a      	bne.n	8002908 <USB_HC_Halt+0xd6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002872:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8002876:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800287a:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800287e:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8002882:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002886:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800288a:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800288e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8002892:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      do
      {
        if (++count > 1000U)
 8002896:	3301      	adds	r3, #1
 8002898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800289c:	d831      	bhi.n	8002902 <USB_HC_Halt+0xd0>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800289e:	6811      	ldr	r1, [r2, #0]
 80028a0:	2900      	cmp	r1, #0
 80028a2:	dbf8      	blt.n	8002896 <USB_HC_Halt+0x64>
 80028a4:	e02d      	b.n	8002902 <USB_HC_Halt+0xd0>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80028a6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80028aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028ae:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80028b2:	6883      	ldr	r3, [r0, #8]
 80028b4:	f013 0f20 	tst.w	r3, #32
 80028b8:	d123      	bne.n	8002902 <USB_HC_Halt+0xd0>
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80028ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80028bc:	f413 037f 	ands.w	r3, r3, #16711680	; 0xff0000
 80028c0:	d119      	bne.n	80028f6 <USB_HC_Halt+0xc4>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80028c2:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 80028c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80028ca:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80028ce:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 80028d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80028d6:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80028da:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 80028de:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 80028e2:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
          if (++count > 1000U)
 80028e6:	3301      	adds	r3, #1
 80028e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ec:	d809      	bhi.n	8002902 <USB_HC_Halt+0xd0>
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80028ee:	6811      	ldr	r1, [r2, #0]
 80028f0:	2900      	cmp	r1, #0
 80028f2:	dbf8      	blt.n	80028e6 <USB_HC_Halt+0xb4>
 80028f4:	e005      	b.n	8002902 <USB_HC_Halt+0xd0>
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80028f6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80028fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028fe:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8002902:	2000      	movs	r0, #0
 8002904:	bc30      	pop	{r4, r5}
 8002906:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002908:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800290c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002910:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002914:	e7f5      	b.n	8002902 <USB_HC_Halt+0xd0>
	...

08002918 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002918:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800291c:	4a06      	ldr	r2, [pc, #24]	; (8002938 <USB_DoPing+0x20>)
 800291e:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8002922:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002926:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800292a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800292e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8002932:	2000      	movs	r0, #0
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	80080000 	.word	0x80080000

0800293c <USB_HC_StartXfer>:
{
 800293c:	b530      	push	{r4, r5, lr}
 800293e:	b085      	sub	sp, #20
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8002940:	784b      	ldrb	r3, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8002942:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002944:	f414 7f80 	tst.w	r4, #256	; 0x100
 8002948:	d007      	beq.n	800295a <USB_HC_StartXfer+0x1e>
 800294a:	790c      	ldrb	r4, [r1, #4]
 800294c:	b92c      	cbnz	r4, 800295a <USB_HC_StartXfer+0x1e>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800294e:	2a01      	cmp	r2, #1
 8002950:	d016      	beq.n	8002980 <USB_HC_StartXfer+0x44>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8002952:	b912      	cbnz	r2, 800295a <USB_HC_StartXfer+0x1e>
 8002954:	794c      	ldrb	r4, [r1, #5]
 8002956:	2c01      	cmp	r4, #1
 8002958:	d01f      	beq.n	800299a <USB_HC_StartXfer+0x5e>
  if (hc->xfer_len > 0U)
 800295a:	694c      	ldr	r4, [r1, #20]
 800295c:	b30c      	cbz	r4, 80029a2 <USB_HC_StartXfer+0x66>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800295e:	890d      	ldrh	r5, [r1, #8]
 8002960:	eb04 0c05 	add.w	ip, r4, r5
 8002964:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8002968:	fbbc fcf5 	udiv	ip, ip, r5
 800296c:	fa1f fc8c 	uxth.w	ip, ip
    if (num_packets > max_hc_pkt_count)
 8002970:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8002974:	d917      	bls.n	80029a6 <USB_HC_StartXfer+0x6a>
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8002976:	022d      	lsls	r5, r5, #8
 8002978:	610d      	str	r5, [r1, #16]
      num_packets = max_hc_pkt_count;
 800297a:	f44f 7c80 	mov.w	ip, #256	; 0x100
 800297e:	e012      	b.n	80029a6 <USB_HC_StartXfer+0x6a>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8002980:	79cc      	ldrb	r4, [r1, #7]
 8002982:	b10c      	cbz	r4, 8002988 <USB_HC_StartXfer+0x4c>
 8002984:	2c02      	cmp	r4, #2
 8002986:	d1e4      	bne.n	8002952 <USB_HC_StartXfer+0x16>
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8002988:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800298c:	f8d4 550c 	ldr.w	r5, [r4, #1292]	; 0x50c
 8002990:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8002994:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
 8002998:	e7db      	b.n	8002952 <USB_HC_StartXfer+0x16>
      (void)USB_DoPing(USBx, hc->ch_num);
 800299a:	7849      	ldrb	r1, [r1, #1]
 800299c:	f7ff ffbc 	bl	8002918 <USB_DoPing>
      return HAL_OK;
 80029a0:	e070      	b.n	8002a84 <USB_HC_StartXfer+0x148>
    num_packets = 1U;
 80029a2:	f04f 0c01 	mov.w	ip, #1
  if (hc->ep_is_in != 0U)
 80029a6:	78cd      	ldrb	r5, [r1, #3]
 80029a8:	2d00      	cmp	r5, #0
 80029aa:	d052      	beq.n	8002a52 <USB_HC_StartXfer+0x116>
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80029ac:	890c      	ldrh	r4, [r1, #8]
 80029ae:	fb04 f40c 	mul.w	r4, r4, ip
 80029b2:	610c      	str	r4, [r1, #16]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80029b4:	690c      	ldr	r4, [r1, #16]
 80029b6:	f3c4 0412 	ubfx	r4, r4, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80029ba:	4d3a      	ldr	r5, [pc, #232]	; (8002aa4 <USB_HC_StartXfer+0x168>)
 80029bc:	ea05 4ccc 	and.w	ip, r5, ip, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80029c0:	ea44 040c 	orr.w	r4, r4, ip
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80029c4:	f891 c00a 	ldrb.w	ip, [r1, #10]
 80029c8:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 80029cc:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80029d0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80029d4:	ea44 040c 	orr.w	r4, r4, ip
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80029d8:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
  if (dma != 0U)
 80029dc:	b112      	cbz	r2, 80029e4 <USB_HC_StartXfer+0xa8>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80029de:	68cc      	ldr	r4, [r1, #12]
 80029e0:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80029e4:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 80029e8:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80029ec:	f014 0f01 	tst.w	r4, #1
 80029f0:	bf0c      	ite	eq
 80029f2:	f04f 0e01 	moveq.w	lr, #1
 80029f6:	f04f 0e00 	movne.w	lr, #0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80029fa:	f8d3 5500 	ldr.w	r5, [r3, #1280]	; 0x500
 80029fe:	f025 5500 	bic.w	r5, r5, #536870912	; 0x20000000
 8002a02:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8002a06:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 8002a0a:	ea44 744e 	orr.w	r4, r4, lr, lsl #29
 8002a0e:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a12:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 8002a16:	9403      	str	r4, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a18:	9c03      	ldr	r4, [sp, #12]
 8002a1a:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 8002a1e:	9403      	str	r4, [sp, #12]
  if (hc->ep_is_in != 0U)
 8002a20:	78cc      	ldrb	r4, [r1, #3]
 8002a22:	b1c4      	cbz	r4, 8002a56 <USB_HC_StartXfer+0x11a>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002a24:	9c03      	ldr	r4, [sp, #12]
 8002a26:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002a2a:	9403      	str	r4, [sp, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a2c:	9c03      	ldr	r4, [sp, #12]
 8002a2e:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8002a32:	9403      	str	r4, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a34:	9c03      	ldr	r4, [sp, #12]
 8002a36:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  if (dma != 0U) /* dma mode */
 8002a3a:	bb1a      	cbnz	r2, 8002a84 <USB_HC_StartXfer+0x148>
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8002a3c:	78cb      	ldrb	r3, [r1, #3]
 8002a3e:	bb0b      	cbnz	r3, 8002a84 <USB_HC_StartXfer+0x148>
 8002a40:	694b      	ldr	r3, [r1, #20]
 8002a42:	b1fb      	cbz	r3, 8002a84 <USB_HC_StartXfer+0x148>
    switch (hc->ep_type)
 8002a44:	79ca      	ldrb	r2, [r1, #7]
 8002a46:	2a03      	cmp	r2, #3
 8002a48:	d815      	bhi.n	8002a76 <USB_HC_StartXfer+0x13a>
 8002a4a:	e8df f002 	tbb	[pc, r2]
 8002a4e:	1e09      	.short	0x1e09
 8002a50:	1e09      	.short	0x1e09
    hc->XferSize = hc->xfer_len;
 8002a52:	610c      	str	r4, [r1, #16]
 8002a54:	e7ae      	b.n	80029b4 <USB_HC_StartXfer+0x78>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002a56:	9c03      	ldr	r4, [sp, #12]
 8002a58:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 8002a5c:	9403      	str	r4, [sp, #12]
 8002a5e:	e7e5      	b.n	8002a2c <USB_HC_StartXfer+0xf0>
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002a60:	3303      	adds	r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002a62:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002a64:	b292      	uxth	r2, r2
 8002a66:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d203      	bcs.n	8002a76 <USB_HC_StartXfer+0x13a>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8002a6e:	6983      	ldr	r3, [r0, #24]
 8002a70:	f043 0320 	orr.w	r3, r3, #32
 8002a74:	6183      	str	r3, [r0, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8002a76:	2300      	movs	r3, #0
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	8a8b      	ldrh	r3, [r1, #20]
 8002a7c:	784a      	ldrb	r2, [r1, #1]
 8002a7e:	68c9      	ldr	r1, [r1, #12]
 8002a80:	f7ff fce2 	bl	8002448 <USB_WritePacket>
}
 8002a84:	2000      	movs	r0, #0
 8002a86:	b005      	add	sp, #20
 8002a88:	bd30      	pop	{r4, r5, pc}
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002a8a:	3303      	adds	r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002a8c:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8002a90:	b292      	uxth	r2, r2
 8002a92:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d2ed      	bcs.n	8002a76 <USB_HC_StartXfer+0x13a>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002a9a:	6983      	ldr	r3, [r0, #24]
 8002a9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aa0:	6183      	str	r3, [r0, #24]
 8002aa2:	e7e8      	b.n	8002a76 <USB_HC_StartXfer+0x13a>
 8002aa4:	1ff80000 	.word	0x1ff80000

08002aa8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002aa8:	b510      	push	{r4, lr}
 8002aaa:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t count = 0U;
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002aac:	f7ff fc97 	bl	80023de <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ab0:	2110      	movs	r1, #16
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f7ff fc9a 	bl	80023ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f7ff fcaf 	bl	800241c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	e00a      	b.n	8002ad8 <USB_StopHost+0x30>
  {
    value = USBx_HC(i)->HCCHAR;
 8002ac2:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 8002ac6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002aca:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
 8002ace:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8002ad2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  for (i = 0U; i <= 15U; i++)
 8002ad6:	3201      	adds	r2, #1
 8002ad8:	2a0f      	cmp	r2, #15
 8002ada:	d9f2      	bls.n	8002ac2 <USB_StopHost+0x1a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002adc:	2000      	movs	r0, #0
  uint32_t count = 0U;
 8002ade:	4603      	mov	r3, r0
 8002ae0:	e000      	b.n	8002ae4 <USB_StopHost+0x3c>
  for (i = 0U; i <= 15U; i++)
 8002ae2:	3001      	adds	r0, #1
 8002ae4:	280f      	cmp	r0, #15
 8002ae6:	d813      	bhi.n	8002b10 <USB_StopHost+0x68>
  {
    value = USBx_HC(i)->HCCHAR;
 8002ae8:	eb04 1c40 	add.w	ip, r4, r0, lsl #5
 8002aec:	f50c 61a0 	add.w	r1, ip, #1280	; 0x500
 8002af0:	f8dc 2500 	ldr.w	r2, [ip, #1280]	; 0x500
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002af8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8002afc:	f8cc 2500 	str.w	r2, [ip, #1280]	; 0x500

    do
    {
      if (++count > 1000U)
 8002b00:	3301      	adds	r3, #1
 8002b02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b06:	d8ec      	bhi.n	8002ae2 <USB_StopHost+0x3a>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002b08:	680a      	ldr	r2, [r1, #0]
 8002b0a:	2a00      	cmp	r2, #0
 8002b0c:	dbf8      	blt.n	8002b00 <USB_StopHost+0x58>
 8002b0e:	e7e8      	b.n	8002ae2 <USB_StopHost+0x3a>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b14:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002b18:	6163      	str	r3, [r4, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f7ff fc59 	bl	80023d2 <USB_EnableGlobalInt>

  return HAL_OK;
}
 8002b20:	2000      	movs	r0, #0
 8002b22:	bd10      	pop	{r4, pc}

08002b24 <MTP_FindCtlEndpoint>:
  * @brief  Find MTP Ctl interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindCtlEndpoint(USBH_HandleTypeDef *phost)
{
 8002b24:	4684      	mov	ip, r0
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8002b26:	2300      	movs	r3, #0
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d836      	bhi.n	8002b9a <MTP_FindCtlEndpoint+0x76>
{
 8002b2c:	b510      	push	{r4, lr}
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8002b2e:	469e      	mov	lr, r3
 8002b30:	221a      	movs	r2, #26
 8002b32:	fb02 c203 	mla	r2, r2, r3, ip
 8002b36:	f892 2347 	ldrb.w	r2, [r2, #839]	; 0x347
 8002b3a:	2a06      	cmp	r2, #6
 8002b3c:	d02b      	beq.n	8002b96 <MTP_FindCtlEndpoint+0x72>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8002b3e:	3301      	adds	r3, #1
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d9f3      	bls.n	8002b2e <MTP_FindCtlEndpoint+0xa>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8002b46:	20ff      	movs	r0, #255	; 0xff
}
 8002b48:	bd10      	pop	{r4, pc}
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8002b4a:	3001      	adds	r0, #1
 8002b4c:	b2c0      	uxtb	r0, r0
 8002b4e:	2801      	cmp	r0, #1
 8002b50:	d8f5      	bhi.n	8002b3e <MTP_FindCtlEndpoint+0x1a>
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8002b52:	4604      	mov	r4, r0
 8002b54:	1c42      	adds	r2, r0, #1
 8002b56:	211a      	movs	r1, #26
 8002b58:	fb01 f10e 	mul.w	r1, r1, lr
 8002b5c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002b60:	4462      	add	r2, ip
 8002b62:	f992 2346 	ldrsb.w	r2, [r2, #838]	; 0x346
 8002b66:	2a00      	cmp	r2, #0
 8002b68:	daef      	bge.n	8002b4a <MTP_FindCtlEndpoint+0x26>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002b6a:	1c42      	adds	r2, r0, #1
 8002b6c:	211a      	movs	r1, #26
 8002b6e:	fb01 f10e 	mul.w	r1, r1, lr
 8002b72:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002b76:	4462      	add	r2, ip
 8002b78:	f8b2 2348 	ldrh.w	r2, [r2, #840]	; 0x348
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8002b7c:	2a00      	cmp	r2, #0
 8002b7e:	d0e4      	beq.n	8002b4a <MTP_FindCtlEndpoint+0x26>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_INTERRUPT) == USBH_EP_INTERRUPT))
 8002b80:	3401      	adds	r4, #1
 8002b82:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002b86:	4462      	add	r2, ip
 8002b88:	f892 2347 	ldrb.w	r2, [r2, #839]	; 0x347
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002b8c:	f002 0203 	and.w	r2, r2, #3
 8002b90:	2a03      	cmp	r2, #3
 8002b92:	d1da      	bne.n	8002b4a <MTP_FindCtlEndpoint+0x26>
 8002b94:	e7d8      	b.n	8002b48 <MTP_FindCtlEndpoint+0x24>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8002b96:	2000      	movs	r0, #0
 8002b98:	e7d9      	b.n	8002b4e <MTP_FindCtlEndpoint+0x2a>
  return 0xFFU; /* Invalid Endpoint */
 8002b9a:	20ff      	movs	r0, #255	; 0xff
}
 8002b9c:	4770      	bx	lr

08002b9e <MTP_FindDataOutEndpoint>:
  * @brief  Find MTP DATA OUT interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataOutEndpoint(USBH_HandleTypeDef *phost)
{
 8002b9e:	4684      	mov	ip, r0
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d835      	bhi.n	8002c12 <MTP_FindDataOutEndpoint+0x74>
{
 8002ba6:	b510      	push	{r4, lr}
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8002ba8:	469e      	mov	lr, r3
 8002baa:	221a      	movs	r2, #26
 8002bac:	fb02 c203 	mla	r2, r2, r3, ip
 8002bb0:	f892 2347 	ldrb.w	r2, [r2, #839]	; 0x347
 8002bb4:	2a06      	cmp	r2, #6
 8002bb6:	d02a      	beq.n	8002c0e <MTP_FindDataOutEndpoint+0x70>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8002bb8:	3301      	adds	r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d9f3      	bls.n	8002ba8 <MTP_FindDataOutEndpoint+0xa>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8002bc0:	20ff      	movs	r0, #255	; 0xff
}
 8002bc2:	bd10      	pop	{r4, pc}
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8002bc4:	3001      	adds	r0, #1
 8002bc6:	b2c0      	uxtb	r0, r0
 8002bc8:	2801      	cmp	r0, #1
 8002bca:	d8f5      	bhi.n	8002bb8 <MTP_FindDataOutEndpoint+0x1a>
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 8002bcc:	4604      	mov	r4, r0
 8002bce:	1c42      	adds	r2, r0, #1
 8002bd0:	211a      	movs	r1, #26
 8002bd2:	fb01 f10e 	mul.w	r1, r1, lr
 8002bd6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002bda:	4462      	add	r2, ip
 8002bdc:	f992 2346 	ldrsb.w	r2, [r2, #838]	; 0x346
 8002be0:	2a00      	cmp	r2, #0
 8002be2:	dbef      	blt.n	8002bc4 <MTP_FindDataOutEndpoint+0x26>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002be4:	1c42      	adds	r2, r0, #1
 8002be6:	211a      	movs	r1, #26
 8002be8:	fb01 f10e 	mul.w	r1, r1, lr
 8002bec:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002bf0:	4462      	add	r2, ip
 8002bf2:	f8b2 2348 	ldrh.w	r2, [r2, #840]	; 0x348
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 8002bf6:	2a00      	cmp	r2, #0
 8002bf8:	d0e4      	beq.n	8002bc4 <MTP_FindDataOutEndpoint+0x26>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 8002bfa:	3401      	adds	r4, #1
 8002bfc:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002c00:	4462      	add	r2, ip
 8002c02:	f892 2347 	ldrb.w	r2, [r2, #839]	; 0x347
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002c06:	f012 0f02 	tst.w	r2, #2
 8002c0a:	d0db      	beq.n	8002bc4 <MTP_FindDataOutEndpoint+0x26>
 8002c0c:	e7d9      	b.n	8002bc2 <MTP_FindDataOutEndpoint+0x24>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8002c0e:	2000      	movs	r0, #0
 8002c10:	e7da      	b.n	8002bc8 <MTP_FindDataOutEndpoint+0x2a>
  return 0xFFU; /* Invalid Endpoint */
 8002c12:	20ff      	movs	r0, #255	; 0xff
}
 8002c14:	4770      	bx	lr

08002c16 <MTP_FindDataInEndpoint>:
  * @brief  Find MTP DATA IN interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataInEndpoint(USBH_HandleTypeDef *phost)
{
 8002c16:	4684      	mov	ip, r0
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d835      	bhi.n	8002c8a <MTP_FindDataInEndpoint+0x74>
{
 8002c1e:	b510      	push	{r4, lr}
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8002c20:	469e      	mov	lr, r3
 8002c22:	221a      	movs	r2, #26
 8002c24:	fb02 c203 	mla	r2, r2, r3, ip
 8002c28:	f892 2347 	ldrb.w	r2, [r2, #839]	; 0x347
 8002c2c:	2a06      	cmp	r2, #6
 8002c2e:	d02a      	beq.n	8002c86 <MTP_FindDataInEndpoint+0x70>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 8002c30:	3301      	adds	r3, #1
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d9f3      	bls.n	8002c20 <MTP_FindDataInEndpoint+0xa>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8002c38:	20ff      	movs	r0, #255	; 0xff
}
 8002c3a:	bd10      	pop	{r4, pc}
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8002c3c:	3001      	adds	r0, #1
 8002c3e:	b2c0      	uxtb	r0, r0
 8002c40:	2801      	cmp	r0, #1
 8002c42:	d8f5      	bhi.n	8002c30 <MTP_FindDataInEndpoint+0x1a>
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8002c44:	4604      	mov	r4, r0
 8002c46:	1c42      	adds	r2, r0, #1
 8002c48:	211a      	movs	r1, #26
 8002c4a:	fb01 f10e 	mul.w	r1, r1, lr
 8002c4e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002c52:	4462      	add	r2, ip
 8002c54:	f992 2346 	ldrsb.w	r2, [r2, #838]	; 0x346
 8002c58:	2a00      	cmp	r2, #0
 8002c5a:	daef      	bge.n	8002c3c <MTP_FindDataInEndpoint+0x26>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002c5c:	1c42      	adds	r2, r0, #1
 8002c5e:	211a      	movs	r1, #26
 8002c60:	fb01 f10e 	mul.w	r1, r1, lr
 8002c64:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002c68:	4462      	add	r2, ip
 8002c6a:	f8b2 2348 	ldrh.w	r2, [r2, #840]	; 0x348
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8002c6e:	2a00      	cmp	r2, #0
 8002c70:	d0e4      	beq.n	8002c3c <MTP_FindDataInEndpoint+0x26>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 8002c72:	3401      	adds	r4, #1
 8002c74:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002c78:	4462      	add	r2, ip
 8002c7a:	f892 2347 	ldrb.w	r2, [r2, #839]	; 0x347
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002c7e:	f012 0f02 	tst.w	r2, #2
 8002c82:	d0db      	beq.n	8002c3c <MTP_FindDataInEndpoint+0x26>
 8002c84:	e7d9      	b.n	8002c3a <MTP_FindDataInEndpoint+0x24>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8002c86:	2000      	movs	r0, #0
 8002c88:	e7da      	b.n	8002c40 <MTP_FindDataInEndpoint+0x2a>
  return 0xFFU; /* Invalid Endpoint */
 8002c8a:	20ff      	movs	r0, #255	; 0xff
}
 8002c8c:	4770      	bx	lr

08002c8e <USBH_MTP_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8002c8e:	2000      	movs	r0, #0
 8002c90:	4770      	bx	lr

08002c92 <USBH_MTP_ClassRequest>:
{
 8002c92:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8002c94:	2105      	movs	r1, #5
 8002c96:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 8002ca0:	f001 ffbe 	bl	8004c20 <osMessagePut>
}
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	bd08      	pop	{r3, pc}

08002ca8 <USBH_MTP_InterfaceDeInit>:
{
 8002ca8:	b570      	push	{r4, r5, r6, lr}
 8002caa:	4604      	mov	r4, r0
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8002cac:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8002cb0:	69dd      	ldr	r5, [r3, #28]
  if (MTP_Handle->DataOutPipe != 0U)
 8002cb2:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 8002cb6:	f893 1d2d 	ldrb.w	r1, [r3, #3373]	; 0xd2d
 8002cba:	b9a9      	cbnz	r1, 8002ce8 <USBH_MTP_InterfaceDeInit+0x40>
  if (MTP_Handle->DataInPipe != 0U)
 8002cbc:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 8002cc0:	f893 1d2c 	ldrb.w	r1, [r3, #3372]	; 0xd2c
 8002cc4:	b9e9      	cbnz	r1, 8002d02 <USBH_MTP_InterfaceDeInit+0x5a>
  if (MTP_Handle->NotificationPipe != 0U)
 8002cc6:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 8002cca:	f893 1d2e 	ldrb.w	r1, [r3, #3374]	; 0xd2e
 8002cce:	bb31      	cbnz	r1, 8002d1e <USBH_MTP_InterfaceDeInit+0x76>
  if (phost->pActiveClass->pData != NULL)
 8002cd0:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8002cd4:	69d8      	ldr	r0, [r3, #28]
 8002cd6:	b128      	cbz	r0, 8002ce4 <USBH_MTP_InterfaceDeInit+0x3c>
    USBH_free(phost->pActiveClass->pData);
 8002cd8:	f003 fd66 	bl	80067a8 <free>
    phost->pActiveClass->pData = 0U;
 8002cdc:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	61da      	str	r2, [r3, #28]
}
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
    USBH_ClosePipe(phost, MTP_Handle->DataOutPipe);
 8002ce8:	f001 ff15 	bl	8004b16 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->DataOutPipe);
 8002cec:	f505 5680 	add.w	r6, r5, #4096	; 0x1000
 8002cf0:	f896 1d2d 	ldrb.w	r1, [r6, #3373]	; 0xd2d
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f001 ff26 	bl	8004b46 <USBH_FreePipe>
    MTP_Handle->DataOutPipe = 0U;     /* Reset the Channel as Free */
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f886 3d2d 	strb.w	r3, [r6, #3373]	; 0xd2d
 8002d00:	e7dc      	b.n	8002cbc <USBH_MTP_InterfaceDeInit+0x14>
    USBH_ClosePipe(phost, MTP_Handle->DataInPipe);
 8002d02:	4620      	mov	r0, r4
 8002d04:	f001 ff07 	bl	8004b16 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->DataInPipe);
 8002d08:	f505 5680 	add.w	r6, r5, #4096	; 0x1000
 8002d0c:	f896 1d2c 	ldrb.w	r1, [r6, #3372]	; 0xd2c
 8002d10:	4620      	mov	r0, r4
 8002d12:	f001 ff18 	bl	8004b46 <USBH_FreePipe>
    MTP_Handle->DataInPipe = 0U;     /* Reset the Channel as Free */
 8002d16:	2300      	movs	r3, #0
 8002d18:	f886 3d2c 	strb.w	r3, [r6, #3372]	; 0xd2c
 8002d1c:	e7d3      	b.n	8002cc6 <USBH_MTP_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MTP_Handle->NotificationPipe);
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f001 fef9 	bl	8004b16 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->NotificationPipe);
 8002d24:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 8002d28:	f895 1d2e 	ldrb.w	r1, [r5, #3374]	; 0xd2e
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f001 ff0a 	bl	8004b46 <USBH_FreePipe>
    MTP_Handle->NotificationPipe = 0U;     /* Reset the Channel as Free */
 8002d32:	2300      	movs	r3, #0
 8002d34:	f885 3d2e 	strb.w	r3, [r5, #3374]	; 0xd2e
 8002d38:	e7ca      	b.n	8002cd0 <USBH_MTP_InterfaceDeInit+0x28>

08002d3a <USBH_MTP_InterfaceInit>:
{
 8002d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, USB_MTP_CLASS, 1U, 1U);
 8002d42:	2301      	movs	r3, #1
 8002d44:	461a      	mov	r2, r3
 8002d46:	2106      	movs	r1, #6
 8002d48:	f001 f929 	bl	8003f9e <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8002d4c:	2801      	cmp	r0, #1
 8002d4e:	f200 80c1 	bhi.w	8002ed4 <USBH_MTP_InterfaceInit+0x19a>
 8002d52:	4605      	mov	r5, r0
  USBH_SelectInterface(phost, interface);
 8002d54:	4601      	mov	r1, r0
 8002d56:	4620      	mov	r0, r4
 8002d58:	f001 f917 	bl	8003f8a <USBH_SelectInterface>
  status = USBH_SelectInterface(phost, interface);
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f001 f913 	bl	8003f8a <USBH_SelectInterface>
  if (status != USBH_OK)
 8002d64:	2800      	cmp	r0, #0
 8002d66:	f040 80b9 	bne.w	8002edc <USBH_MTP_InterfaceInit+0x1a2>
  endpoint = MTP_FindCtlEndpoint(phost);
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f7ff feda 	bl	8002b24 <MTP_FindCtlEndpoint>
 8002d70:	4606      	mov	r6, r0
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8002d72:	2801      	cmp	r0, #1
 8002d74:	f200 80b4 	bhi.w	8002ee0 <USBH_MTP_InterfaceInit+0x1a6>
  phost->pActiveClass->pData = (MTP_HandleTypeDef *)USBH_malloc(sizeof(MTP_HandleTypeDef));
 8002d78:	f8d4 737c 	ldr.w	r7, [r4, #892]	; 0x37c
 8002d7c:	f242 10d0 	movw	r0, #8656	; 0x21d0
 8002d80:	f003 fd0a 	bl	8006798 <malloc>
 8002d84:	61f8      	str	r0, [r7, #28]
  MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8002d86:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8002d8a:	69df      	ldr	r7, [r3, #28]
  if (MTP_Handle == NULL)
 8002d8c:	2f00      	cmp	r7, #0
 8002d8e:	f000 80a9 	beq.w	8002ee4 <USBH_MTP_InterfaceInit+0x1aa>
  USBH_memset(MTP_Handle, 0, sizeof(MTP_HandleTypeDef));
 8002d92:	f242 12d0 	movw	r2, #8656	; 0x21d0
 8002d96:	2100      	movs	r1, #0
 8002d98:	4638      	mov	r0, r7
 8002d9a:	f003 fd1b 	bl	80067d4 <memset>
  MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8002d9e:	3601      	adds	r6, #1
 8002da0:	231a      	movs	r3, #26
 8002da2:	fb05 f303 	mul.w	r3, r5, r3
 8002da6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8002daa:	4426      	add	r6, r4
 8002dac:	f896 1346 	ldrb.w	r1, [r6, #838]	; 0x346
 8002db0:	f507 5880 	add.w	r8, r7, #4096	; 0x1000
 8002db4:	f888 1d31 	strb.w	r1, [r8, #3377]	; 0xd31
  MTP_Handle->NotificationEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8002db8:	f8b6 3348 	ldrh.w	r3, [r6, #840]	; 0x348
 8002dbc:	f8a8 3d36 	strh.w	r3, [r8, #3382]	; 0xd36
  MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f001 fead 	bl	8004b20 <USBH_AllocPipe>
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	f888 0d2e 	strb.w	r0, [r8, #3374]	; 0xd2e
  MTP_Handle->events.poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bInterval;
 8002dcc:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 8002dd0:	f8a8 3d44 	strh.w	r3, [r8, #3396]	; 0xd44
  USBH_OpenPipe(phost, MTP_Handle->NotificationPipe,MTP_Handle->NotificationEp,
 8002dd4:	f898 2d31 	ldrb.w	r2, [r8, #3377]	; 0xd31
 8002dd8:	f8b8 3d36 	ldrh.w	r3, [r8, #3382]	; 0xd36
 8002ddc:	9302      	str	r3, [sp, #8]
 8002dde:	2303      	movs	r3, #3
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8002dec:	4620      	mov	r0, r4
 8002dee:	f001 fe82 	bl	8004af6 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MTP_Handle->NotificationPipe, 0U);
 8002df2:	2200      	movs	r2, #0
 8002df4:	f898 1d2e 	ldrb.w	r1, [r8, #3374]	; 0xd2e
 8002df8:	4620      	mov	r0, r4
 8002dfa:	f003 fc27 	bl	800664c <USBH_LL_SetToggle>
  endpoint = MTP_FindDataInEndpoint(phost);
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f7ff ff09 	bl	8002c16 <MTP_FindDataInEndpoint>
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8002e04:	2801      	cmp	r0, #1
 8002e06:	d86f      	bhi.n	8002ee8 <USBH_MTP_InterfaceInit+0x1ae>
  MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8002e08:	3001      	adds	r0, #1
 8002e0a:	231a      	movs	r3, #26
 8002e0c:	fb05 f303 	mul.w	r3, r5, r3
 8002e10:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002e14:	4420      	add	r0, r4
 8002e16:	f890 1346 	ldrb.w	r1, [r0, #838]	; 0x346
 8002e1a:	f888 1d30 	strb.w	r1, [r8, #3376]	; 0xd30
  MTP_Handle->DataInEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8002e1e:	f8b0 3348 	ldrh.w	r3, [r0, #840]	; 0x348
 8002e22:	f8a8 3d34 	strh.w	r3, [r8, #3380]	; 0xd34
  MTP_Handle->DataInPipe = USBH_AllocPipe(phost, MTP_Handle->DataInEp);
 8002e26:	4620      	mov	r0, r4
 8002e28:	f001 fe7a 	bl	8004b20 <USBH_AllocPipe>
 8002e2c:	4601      	mov	r1, r0
 8002e2e:	f888 0d2c 	strb.w	r0, [r8, #3372]	; 0xd2c
  USBH_OpenPipe(phost, MTP_Handle->DataInPipe, MTP_Handle->DataInEp,
 8002e32:	f898 2d30 	ldrb.w	r2, [r8, #3376]	; 0xd30
 8002e36:	f8b8 3d34 	ldrh.w	r3, [r8, #3380]	; 0xd34
 8002e3a:	9302      	str	r3, [sp, #8]
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f001 fe53 	bl	8004af6 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MTP_Handle->DataInPipe, 0U);
 8002e50:	2200      	movs	r2, #0
 8002e52:	f898 1d2c 	ldrb.w	r1, [r8, #3372]	; 0xd2c
 8002e56:	4620      	mov	r0, r4
 8002e58:	f003 fbf8 	bl	800664c <USBH_LL_SetToggle>
  endpoint = MTP_FindDataOutEndpoint(phost);
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7ff fe9e 	bl	8002b9e <MTP_FindDataOutEndpoint>
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8002e62:	2801      	cmp	r0, #1
 8002e64:	d842      	bhi.n	8002eec <USBH_MTP_InterfaceInit+0x1b2>
  MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8002e66:	3001      	adds	r0, #1
 8002e68:	231a      	movs	r3, #26
 8002e6a:	fb05 f303 	mul.w	r3, r5, r3
 8002e6e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002e72:	4423      	add	r3, r4
 8002e74:	f893 1346 	ldrb.w	r1, [r3, #838]	; 0x346
 8002e78:	f888 1d2f 	strb.w	r1, [r8, #3375]	; 0xd2f
  MTP_Handle->DataOutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8002e7c:	f8b3 3348 	ldrh.w	r3, [r3, #840]	; 0x348
 8002e80:	f8a8 3d32 	strh.w	r3, [r8, #3378]	; 0xd32
  MTP_Handle->DataOutPipe = USBH_AllocPipe(phost, MTP_Handle->DataOutEp);
 8002e84:	4620      	mov	r0, r4
 8002e86:	f001 fe4b 	bl	8004b20 <USBH_AllocPipe>
 8002e8a:	4601      	mov	r1, r0
 8002e8c:	f888 0d2d 	strb.w	r0, [r8, #3373]	; 0xd2d
  USBH_OpenPipe(phost, MTP_Handle->DataOutPipe, MTP_Handle->DataOutEp,
 8002e90:	f898 2d2f 	ldrb.w	r2, [r8, #3375]	; 0xd2f
 8002e94:	f8b8 3d32 	ldrh.w	r3, [r8, #3378]	; 0xd32
 8002e98:	9302      	str	r3, [sp, #8]
 8002e9a:	2602      	movs	r6, #2
 8002e9c:	9601      	str	r6, [sp, #4]
 8002e9e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f001 fe24 	bl	8004af6 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MTP_Handle->DataOutPipe, 0U);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f898 1d2d 	ldrb.w	r1, [r8, #3373]	; 0xd2d
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	f003 fbc9 	bl	800664c <USBH_LL_SetToggle>
  MTP_Handle->state = MTP_OPENSESSION;
 8002eba:	f888 6d38 	strb.w	r6, [r8, #3384]	; 0xd38
  MTP_Handle->is_ready = 0U;
 8002ebe:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  MTP_Handle->events.state = MTP_EVENTS_INIT;
 8002ec8:	f888 3d3c 	strb.w	r3, [r8, #3388]	; 0xd3c
  return USBH_PTP_Init(phost);
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f000 faee 	bl	80034ae <USBH_PTP_Init>
 8002ed2:	e000      	b.n	8002ed6 <USBH_MTP_InterfaceInit+0x19c>
    return USBH_FAIL;
 8002ed4:	2002      	movs	r0, #2
}
 8002ed6:	b004      	add	sp, #16
 8002ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return USBH_FAIL;
 8002edc:	2002      	movs	r0, #2
 8002ede:	e7fa      	b.n	8002ed6 <USBH_MTP_InterfaceInit+0x19c>
    return USBH_FAIL;
 8002ee0:	2002      	movs	r0, #2
 8002ee2:	e7f8      	b.n	8002ed6 <USBH_MTP_InterfaceInit+0x19c>
    return USBH_FAIL;
 8002ee4:	2002      	movs	r0, #2
 8002ee6:	e7f6      	b.n	8002ed6 <USBH_MTP_InterfaceInit+0x19c>
    return USBH_FAIL;
 8002ee8:	2002      	movs	r0, #2
 8002eea:	e7f4      	b.n	8002ed6 <USBH_MTP_InterfaceInit+0x19c>
    return USBH_FAIL;
 8002eec:	2002      	movs	r0, #2
 8002eee:	e7f2      	b.n	8002ed6 <USBH_MTP_InterfaceInit+0x19c>

08002ef0 <USBH_MTP_EventsCallback>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(event);
  UNUSED(param);
}
 8002ef0:	4770      	bx	lr

08002ef2 <MTP_DecodeEvent>:
{
 8002ef2:	b508      	push	{r3, lr}
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8002ef4:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8002ef8:	69db      	ldr	r3, [r3, #28]
  code = MTP_Handle->events.container.code;
 8002efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  USBH_MTP_EventsCallback(phost, (uint32_t)code, param1);
 8002efe:	f8d3 2d54 	ldr.w	r2, [r3, #3412]	; 0xd54
 8002f02:	f8b3 1d4e 	ldrh.w	r1, [r3, #3406]	; 0xd4e
 8002f06:	f7ff fff3 	bl	8002ef0 <USBH_MTP_EventsCallback>
}
 8002f0a:	bd08      	pop	{r3, pc}

08002f0c <USBH_MTP_Events>:
{
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	4604      	mov	r4, r0
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8002f10:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8002f14:	69dd      	ldr	r5, [r3, #28]
  switch (MTP_Handle->events.state)
 8002f16:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 8002f1a:	f893 3d3c 	ldrb.w	r3, [r3, #3388]	; 0xd3c
 8002f1e:	b11b      	cbz	r3, 8002f28 <USBH_MTP_Events+0x1c>
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d019      	beq.n	8002f58 <USBH_MTP_Events+0x4c>
}
 8002f24:	2001      	movs	r0, #1
 8002f26:	bd70      	pop	{r4, r5, r6, pc}
      if ((phost->Timer & 1U) == 0U)
 8002f28:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8002f2c:	f013 0f01 	tst.w	r3, #1
 8002f30:	d1f8      	bne.n	8002f24 <USBH_MTP_Events+0x18>
        MTP_Handle->events.timer = phost->Timer;
 8002f32:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8002f36:	f505 5680 	add.w	r6, r5, #4096	; 0x1000
 8002f3a:	f8c6 3d40 	str.w	r3, [r6, #3392]	; 0xd40
        USBH_InterruptReceiveData(phost,
 8002f3e:	f896 3d2e 	ldrb.w	r3, [r6, #3374]	; 0xd2e
 8002f42:	f896 2d36 	ldrb.w	r2, [r6, #3382]	; 0xd36
 8002f46:	f505 51ea 	add.w	r1, r5, #7488	; 0x1d40
 8002f4a:	3108      	adds	r1, #8
 8002f4c:	f001 fdb0 	bl	8004ab0 <USBH_InterruptReceiveData>
        MTP_Handle->events.state = MTP_EVENTS_GETDATA;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f886 3d3c 	strb.w	r3, [r6, #3388]	; 0xd3c
 8002f56:	e7e5      	b.n	8002f24 <USBH_MTP_Events+0x18>
      if (USBH_LL_GetURBState(phost, MTP_Handle->NotificationPipe) == USBH_URB_DONE)
 8002f58:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 8002f5c:	f893 1d2e 	ldrb.w	r1, [r3, #3374]	; 0xd2e
 8002f60:	f003 fb60 	bl	8006624 <USBH_LL_GetURBState>
 8002f64:	2801      	cmp	r0, #1
 8002f66:	d01b      	beq.n	8002fa0 <USBH_MTP_Events+0x94>
      if ((phost->Timer - MTP_Handle->events.timer) >= MTP_Handle->events.poll)
 8002f68:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8002f6c:	f505 5280 	add.w	r2, r5, #4096	; 0x1000
 8002f70:	f8d2 1d40 	ldr.w	r1, [r2, #3392]	; 0xd40
 8002f74:	1a5b      	subs	r3, r3, r1
 8002f76:	f8b2 2d44 	ldrh.w	r2, [r2, #3396]	; 0xd44
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d3d2      	bcc.n	8002f24 <USBH_MTP_Events+0x18>
        MTP_Handle->events.timer = phost->Timer;
 8002f7e:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8002f82:	f505 5280 	add.w	r2, r5, #4096	; 0x1000
 8002f86:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
        USBH_InterruptReceiveData(phost,
 8002f8a:	f892 3d2e 	ldrb.w	r3, [r2, #3374]	; 0xd2e
 8002f8e:	f892 2d36 	ldrb.w	r2, [r2, #3382]	; 0xd36
 8002f92:	f505 51ea 	add.w	r1, r5, #7488	; 0x1d40
 8002f96:	3108      	adds	r1, #8
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f001 fd89 	bl	8004ab0 <USBH_InterruptReceiveData>
 8002f9e:	e7c1      	b.n	8002f24 <USBH_MTP_Events+0x18>
        MTP_DecodeEvent(phost);
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f7ff ffa6 	bl	8002ef2 <MTP_DecodeEvent>
 8002fa6:	e7df      	b.n	8002f68 <USBH_MTP_Events+0x5c>

08002fa8 <USBH_MTP_Process>:
{
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4604      	mov	r4, r0
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8002fac:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8002fb0:	69de      	ldr	r6, [r3, #28]
  switch (MTP_Handle->state)
 8002fb2:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 8002fb6:	f893 5d38 	ldrb.w	r5, [r3, #3384]	; 0xd38
 8002fba:	2d05      	cmp	r5, #5
 8002fbc:	f200 8098 	bhi.w	80030f0 <USBH_MTP_Process+0x148>
 8002fc0:	e8df f005 	tbb	[pc, r5]
 8002fc4:	96031887 	.word	0x96031887
 8002fc8:	4b2c      	.short	0x4b2c
      status = USBH_PTP_OpenSession(phost, 1U);  /* Session '0' is not valid */
 8002fca:	2101      	movs	r1, #1
 8002fcc:	f000 fcac 	bl	8003928 <USBH_PTP_OpenSession>
      if (status == USBH_OK)
 8002fd0:	4605      	mov	r5, r0
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	f040 808a 	bne.w	80030ec <USBH_MTP_Process+0x144>
        MTP_Handle->state = MTP_GETDEVICEINFO;
 8002fd8:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f886 3d38 	strb.w	r3, [r6, #3384]	; 0xd38
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8002fe2:	2105      	movs	r1, #5
 8002fe4:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8002fee:	f001 fe17 	bl	8004c20 <osMessagePut>
 8002ff2:	e07b      	b.n	80030ec <USBH_MTP_Process+0x144>
      status = USBH_PTP_GetDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 8002ff4:	4631      	mov	r1, r6
 8002ff6:	f000 fcd8 	bl	80039aa <USBH_PTP_GetDeviceInfo>
      if (status == USBH_OK)
 8002ffa:	4605      	mov	r5, r0
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	d175      	bne.n	80030ec <USBH_MTP_Process+0x144>
        MTP_Handle->state = MTP_GETSTORAGEIDS;
 8003000:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003004:	2304      	movs	r3, #4
 8003006:	f886 3d38 	strb.w	r3, [r6, #3384]	; 0xd38
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800300a:	2105      	movs	r1, #5
 800300c:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003010:	2200      	movs	r2, #0
 8003012:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8003016:	f001 fe03 	bl	8004c20 <osMessagePut>
 800301a:	e067      	b.n	80030ec <USBH_MTP_Process+0x144>
      status = USBH_PTP_GetStorageIds(phost, &(MTP_Handle->info.storids));
 800301c:	f606 1104 	addw	r1, r6, #2308	; 0x904
 8003020:	f000 fd16 	bl	8003a50 <USBH_PTP_GetStorageIds>
      if (status == USBH_OK)
 8003024:	4605      	mov	r5, r0
 8003026:	2800      	cmp	r0, #0
 8003028:	d160      	bne.n	80030ec <USBH_MTP_Process+0x144>
        for (idx  = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <USBH_MTP_Process+0x88>
 800302e:	3301      	adds	r3, #1
 8003030:	f8d6 2904 	ldr.w	r2, [r6, #2308]	; 0x904
 8003034:	429a      	cmp	r2, r3
 8003036:	d8fa      	bhi.n	800302e <USBH_MTP_Process+0x86>
        MTP_Handle->current_storage_unit = 0U;
 8003038:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 800303c:	2200      	movs	r2, #0
 800303e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
        MTP_Handle->state = MTP_GETSTORAGEINFO;
 8003042:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003046:	2105      	movs	r1, #5
 8003048:	f886 1d38 	strb.w	r1, [r6, #3384]	; 0xd38
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800304c:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003050:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8003054:	f001 fde4 	bl	8004c20 <osMessagePut>
 8003058:	e048      	b.n	80030ec <USBH_MTP_Process+0x144>
                                       MTP_Handle->info.storids.Storage[MTP_Handle->current_storage_unit],
 800305a:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 800305e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
      status = USBH_PTP_GetStorageInfo(phost,
 8003062:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8003066:	0152      	lsls	r2, r2, #5
 8003068:	f502 6212 	add.w	r2, r2, #2336	; 0x920
 800306c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8003070:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003074:	4432      	add	r2, r6
 8003076:	6899      	ldr	r1, [r3, #8]
 8003078:	f000 fd3d 	bl	8003af6 <USBH_PTP_GetStorageInfo>
      if (status == USBH_OK)
 800307c:	4605      	mov	r5, r0
 800307e:	bba8      	cbnz	r0, 80030ec <USBH_MTP_Process+0x144>
        if (++MTP_Handle->current_storage_unit >= MTP_Handle->info.storids.n)
 8003080:	f506 5200 	add.w	r2, r6, #8192	; 0x2000
 8003084:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
 8003088:	3301      	adds	r3, #1
 800308a:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 800308e:	f8d6 2904 	ldr.w	r2, [r6, #2308]	; 0x904
 8003092:	4293      	cmp	r3, r2
 8003094:	d314      	bcc.n	80030c0 <USBH_MTP_Process+0x118>
          MTP_Handle->state = MTP_IDLE;
 8003096:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800309a:	2100      	movs	r1, #0
 800309c:	f883 1d38 	strb.w	r1, [r3, #3384]	; 0xd38
          MTP_Handle->is_ready = 1U;
 80030a0:	f506 5200 	add.w	r2, r6, #8192	; 0x2000
 80030a4:	2001      	movs	r0, #1
 80030a6:	f8c2 01cc 	str.w	r0, [r2, #460]	; 0x1cc
          MTP_Handle->current_storage_unit = 0U;
 80030aa:	f8c2 11c8 	str.w	r1, [r2, #456]	; 0x1c8
          MTP_Handle->params.CurrentStorageId = MTP_Handle->info.storids.Storage[0];
 80030ae:	f8d6 2908 	ldr.w	r2, [r6, #2312]	; 0x908
 80030b2:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80030b6:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80030ba:	2102      	movs	r1, #2
 80030bc:	4620      	mov	r0, r4
 80030be:	4798      	blx	r3
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80030c0:	2105      	movs	r1, #5
 80030c2:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80030c6:	2200      	movs	r2, #0
 80030c8:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80030cc:	f001 fda8 	bl	8004c20 <osMessagePut>
 80030d0:	e00c      	b.n	80030ec <USBH_MTP_Process+0x144>
      USBH_MTP_Events(phost);
 80030d2:	f7ff ff1b 	bl	8002f0c <USBH_MTP_Events>
      osDelay(10U);
 80030d6:	200a      	movs	r0, #10
 80030d8:	f001 fd86 	bl	8004be8 <osDelay>
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80030dc:	2105      	movs	r1, #5
 80030de:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80030e2:	2200      	movs	r2, #0
 80030e4:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80030e8:	f001 fd9a 	bl	8004c20 <osMessagePut>
}
 80030ec:	4628      	mov	r0, r5
 80030ee:	bd70      	pop	{r4, r5, r6, pc}
  switch (MTP_Handle->state)
 80030f0:	2501      	movs	r5, #1
 80030f2:	e7fb      	b.n	80030ec <USBH_MTP_Process+0x144>

080030f4 <PTP_GetString>:
static void PTP_GetString(uint8_t *str, uint8_t *data, uint16_t *len)
{
  uint16_t strlength;
  uint16_t idx;

  *len = data[0];
 80030f4:	780b      	ldrb	r3, [r1, #0]
 80030f6:	8013      	strh	r3, [r2, #0]
  strlength = (uint16_t)(2U * (uint32_t)data[0]);
 80030f8:	f891 c000 	ldrb.w	ip, [r1]
 80030fc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  data ++; /* Adjust the offset ignoring the String Len */

  for (idx = 0U; idx < strlength; idx += 2U)
 8003100:	2300      	movs	r3, #0
 8003102:	e005      	b.n	8003110 <PTP_GetString+0x1c>
  {
    /* Copy Only the string and ignore the UNICODE ID, hence add the src */
    *str = data[idx];
 8003104:	18ca      	adds	r2, r1, r3
 8003106:	7852      	ldrb	r2, [r2, #1]
 8003108:	f800 2b01 	strb.w	r2, [r0], #1
  for (idx = 0U; idx < strlength; idx += 2U)
 800310c:	3302      	adds	r3, #2
 800310e:	b29b      	uxth	r3, r3
 8003110:	4563      	cmp	r3, ip
 8003112:	d3f7      	bcc.n	8003104 <PTP_GetString+0x10>
    str++;
  }
  *str = 0U; /* mark end of string */
 8003114:	2300      	movs	r3, #0
 8003116:	7003      	strb	r3, [r0, #0]
}
 8003118:	4770      	bx	lr

0800311a <PTP_GetStorageInfo>:
{
 800311a:	b530      	push	{r4, r5, lr}
 800311c:	b083      	sub	sp, #12
 800311e:	4614      	mov	r4, r2
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003120:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003124:	69d9      	ldr	r1, [r3, #28]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 8003126:	f501 55ec 	add.w	r5, r1, #7552	; 0x1d80
 800312a:	3510      	adds	r5, #16
  stor_info->StorageType = LE16(&data[PTP_si_StorageType]);
 800312c:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003130:	f893 2d90 	ldrb.w	r2, [r3, #3472]	; 0xd90
 8003134:	f893 0d91 	ldrb.w	r0, [r3, #3473]	; 0xd91
 8003138:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800313c:	8022      	strh	r2, [r4, #0]
  stor_info->FilesystemType = LE16(&data[PTP_si_FilesystemType]);
 800313e:	f893 2d92 	ldrb.w	r2, [r3, #3474]	; 0xd92
 8003142:	f893 0d93 	ldrb.w	r0, [r3, #3475]	; 0xd93
 8003146:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800314a:	8062      	strh	r2, [r4, #2]
  stor_info->AccessCapability = LE16(&data[PTP_si_AccessCapability]);
 800314c:	f893 2d94 	ldrb.w	r2, [r3, #3476]	; 0xd94
 8003150:	f893 0d95 	ldrb.w	r0, [r3, #3477]	; 0xd95
 8003154:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003158:	80a2      	strh	r2, [r4, #4]
  stor_info->MaxCapability = LE64(&data[PTP_si_MaxCapability]);
 800315a:	f893 0d96 	ldrb.w	r0, [r3, #3478]	; 0xd96
 800315e:	f893 2d97 	ldrb.w	r2, [r3, #3479]	; 0xd97
 8003162:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8003166:	f893 2d98 	ldrb.w	r2, [r3, #3480]	; 0xd98
 800316a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800316e:	f893 2d99 	ldrb.w	r2, [r3, #3481]	; 0xd99
 8003172:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8003176:	f893 2d9a 	ldrb.w	r2, [r3, #3482]	; 0xd9a
 800317a:	f893 cd9b 	ldrb.w	ip, [r3, #3483]	; 0xd9b
 800317e:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8003182:	f893 cd9c 	ldrb.w	ip, [r3, #3484]	; 0xd9c
 8003186:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800318a:	f893 cd9d 	ldrb.w	ip, [r3, #3485]	; 0xd9d
 800318e:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 8003192:	60a0      	str	r0, [r4, #8]
 8003194:	60e2      	str	r2, [r4, #12]
  stor_info->FreeSpaceInBytes = LE64(&data[PTP_si_FreeSpaceInBytes]);
 8003196:	f893 0d9e 	ldrb.w	r0, [r3, #3486]	; 0xd9e
 800319a:	f893 2d9f 	ldrb.w	r2, [r3, #3487]	; 0xd9f
 800319e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80031a2:	f893 2da0 	ldrb.w	r2, [r3, #3488]	; 0xda0
 80031a6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80031aa:	f893 2da1 	ldrb.w	r2, [r3, #3489]	; 0xda1
 80031ae:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80031b2:	f893 2da2 	ldrb.w	r2, [r3, #3490]	; 0xda2
 80031b6:	f893 cda3 	ldrb.w	ip, [r3, #3491]	; 0xda3
 80031ba:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80031be:	f893 cda4 	ldrb.w	ip, [r3, #3492]	; 0xda4
 80031c2:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80031c6:	f893 cda5 	ldrb.w	ip, [r3, #3493]	; 0xda5
 80031ca:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 80031ce:	6120      	str	r0, [r4, #16]
 80031d0:	6162      	str	r2, [r4, #20]
  stor_info->FreeSpaceInImages = LE32(&data[PTP_si_FreeSpaceInImages]);
 80031d2:	f893 2da6 	ldrb.w	r2, [r3, #3494]	; 0xda6
 80031d6:	f893 0da7 	ldrb.w	r0, [r3, #3495]	; 0xda7
 80031da:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80031de:	f893 0da8 	ldrb.w	r0, [r3, #3496]	; 0xda8
 80031e2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80031e6:	f893 3da9 	ldrb.w	r3, [r3, #3497]	; 0xda9
 80031ea:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 80031ee:	61a3      	str	r3, [r4, #24]
  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 80031f0:	f10d 0206 	add.w	r2, sp, #6
 80031f4:	f501 51ed 	add.w	r1, r1, #7584	; 0x1da0
 80031f8:	310a      	adds	r1, #10
 80031fa:	f104 001c 	add.w	r0, r4, #28
 80031fe:	f7ff ff79 	bl	80030f4 <PTP_GetString>
  PTP_GetString(stor_info->VolumeLabel, &data[PTP_si_StorageDescription + len * 2U + 1U], &len);
 8003202:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8003206:	0049      	lsls	r1, r1, #1
 8003208:	311b      	adds	r1, #27
 800320a:	f10d 0206 	add.w	r2, sp, #6
 800320e:	4429      	add	r1, r5
 8003210:	f204 101b 	addw	r0, r4, #283	; 0x11b
 8003214:	f7ff ff6e 	bl	80030f4 <PTP_GetString>
}
 8003218:	b003      	add	sp, #12
 800321a:	bd30      	pop	{r4, r5, pc}

0800321c <PTP_GetArray16>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray16(uint16_t *array, uint8_t *data, uint32_t offset)
{
 800321c:	b500      	push	{lr}
 800321e:	4686      	mov	lr, r0
  uint32_t size, idx = 0U;

  size = LE32(&data[offset]);
 8003220:	5c8b      	ldrb	r3, [r1, r2]
 8003222:	eb01 0c02 	add.w	ip, r1, r2
 8003226:	f89c 0001 	ldrb.w	r0, [ip, #1]
 800322a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800322e:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8003232:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003236:	f89c 0003 	ldrb.w	r0, [ip, #3]
 800323a:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  uint32_t size, idx = 0U;
 800323e:	2300      	movs	r3, #0
  while (size > idx)
 8003240:	e008      	b.n	8003254 <PTP_GetArray16+0x38>
  {
    array[idx] = (uint16_t)data[offset + (sizeof(uint16_t) * (idx + 2U))];
 8003242:	f103 0c02 	add.w	ip, r3, #2
 8003246:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800324a:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800324e:	f82e c013 	strh.w	ip, [lr, r3, lsl #1]
    idx++;
 8003252:	3301      	adds	r3, #1
  while (size > idx)
 8003254:	4283      	cmp	r3, r0
 8003256:	d3f4      	bcc.n	8003242 <PTP_GetArray16+0x26>
  }
  return size;
}
 8003258:	f85d fb04 	ldr.w	pc, [sp], #4

0800325c <PTP_DecodeDeviceInfo>:
{
 800325c:	b570      	push	{r4, r5, r6, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	460c      	mov	r4, r1
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003262:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003266:	69d9      	ldr	r1, [r3, #28]
  if (MTP_Handle->ptp.iteration == 0U)
 8003268:	f501 5300 	add.w	r3, r1, #8192	; 0x2000
 800326c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8003270:	b10b      	cbz	r3, 8003276 <PTP_DecodeDeviceInfo+0x1a>
}
 8003272:	b002      	add	sp, #8
 8003274:	bd70      	pop	{r4, r5, r6, pc}
 8003276:	f501 55ec 	add.w	r5, r1, #7552	; 0x1d80
 800327a:	3510      	adds	r5, #16
    dev_info->StandardVersion = LE16(&data[PTP_di_StandardVersion]);
 800327c:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003280:	f893 2d90 	ldrb.w	r2, [r3, #3472]	; 0xd90
 8003284:	f893 0d91 	ldrb.w	r0, [r3, #3473]	; 0xd91
 8003288:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800328c:	8022      	strh	r2, [r4, #0]
    dev_info->VendorExtensionID = LE32(&data[PTP_di_VendorExtensionID]);
 800328e:	f893 2d92 	ldrb.w	r2, [r3, #3474]	; 0xd92
 8003292:	f893 0d93 	ldrb.w	r0, [r3, #3475]	; 0xd93
 8003296:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800329a:	f893 0d94 	ldrb.w	r0, [r3, #3476]	; 0xd94
 800329e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80032a2:	f893 0d95 	ldrb.w	r0, [r3, #3477]	; 0xd95
 80032a6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80032aa:	6062      	str	r2, [r4, #4]
    dev_info->VendorExtensionVersion = LE16(&data[PTP_di_VendorExtensionVersion]);
 80032ac:	f893 2d96 	ldrb.w	r2, [r3, #3478]	; 0xd96
 80032b0:	f893 3d97 	ldrb.w	r3, [r3, #3479]	; 0xd97
 80032b4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80032b8:	8123      	strh	r3, [r4, #8]
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 80032ba:	f10d 0206 	add.w	r2, sp, #6
 80032be:	f501 51ec 	add.w	r1, r1, #7552	; 0x1d80
 80032c2:	3118      	adds	r1, #24
 80032c4:	f104 000a 	add.w	r0, r4, #10
 80032c8:	f7ff ff14 	bl	80030f4 <PTP_GetString>
    totallen = len * 2U + 1U;
 80032cc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80032d0:	0052      	lsls	r2, r2, #1
 80032d2:	1c56      	adds	r6, r2, #1
    dev_info->FunctionalMode = LE16(&data[PTP_di_FunctionalMode + totallen]);
 80032d4:	f102 0309 	add.w	r3, r2, #9
 80032d8:	5ceb      	ldrb	r3, [r5, r3]
 80032da:	18a9      	adds	r1, r5, r2
 80032dc:	7a89      	ldrb	r1, [r1, #10]
 80032de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80032e2:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
    dev_info->OperationsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->OperationsSupported,
 80032e6:	320b      	adds	r2, #11
 80032e8:	4629      	mov	r1, r5
 80032ea:	f504 7088 	add.w	r0, r4, #272	; 0x110
 80032ee:	f7ff ff95 	bl	800321c <PTP_GetArray16>
 80032f2:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
    totallen = totallen + dev_info->OperationsSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 80032f6:	eb06 0240 	add.w	r2, r6, r0, lsl #1
 80032fa:	1d16      	adds	r6, r2, #4
    dev_info->EventsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->EventsSupported,
 80032fc:	320e      	adds	r2, #14
 80032fe:	4629      	mov	r1, r5
 8003300:	f504 70ee 	add.w	r0, r4, #476	; 0x1dc
 8003304:	f7ff ff8a 	bl	800321c <PTP_GetArray16>
 8003308:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    totallen = totallen + dev_info->EventsSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 800330c:	eb06 0240 	add.w	r2, r6, r0, lsl #1
 8003310:	1d16      	adds	r6, r2, #4
    dev_info->DevicePropertiesSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->DevicePropertiesSupported,
 8003312:	320e      	adds	r2, #14
 8003314:	4629      	mov	r1, r5
 8003316:	f504 702a 	add.w	r0, r4, #680	; 0x2a8
 800331a:	f7ff ff7f 	bl	800321c <PTP_GetArray16>
 800331e:	f8c4 02a4 	str.w	r0, [r4, #676]	; 0x2a4
    totallen = totallen + dev_info->DevicePropertiesSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 8003322:	eb06 0240 	add.w	r2, r6, r0, lsl #1
 8003326:	1d16      	adds	r6, r2, #4
    dev_info->CaptureFormats_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->CaptureFormats,
 8003328:	320e      	adds	r2, #14
 800332a:	4629      	mov	r1, r5
 800332c:	f504 705d 	add.w	r0, r4, #884	; 0x374
 8003330:	f7ff ff74 	bl	800321c <PTP_GetArray16>
 8003334:	f8c4 0370 	str.w	r0, [r4, #880]	; 0x370
    totallen = totallen + dev_info->CaptureFormats_len * sizeof(uint16_t) + sizeof(uint32_t);
 8003338:	eb06 0240 	add.w	r2, r6, r0, lsl #1
 800333c:	1d16      	adds	r6, r2, #4
    dev_info->ImageFormats_len =  PTP_GetArray16((uint16_t *)(void *)&dev_info->ImageFormats,
 800333e:	320e      	adds	r2, #14
 8003340:	4629      	mov	r1, r5
 8003342:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 8003346:	f7ff ff69 	bl	800321c <PTP_GetArray16>
 800334a:	f8c4 043c 	str.w	r0, [r4, #1084]	; 0x43c
    totallen = totallen + dev_info->ImageFormats_len * sizeof(uint16_t) + sizeof(uint32_t);
 800334e:	eb06 0140 	add.w	r1, r6, r0, lsl #1
 8003352:	1d0e      	adds	r6, r1, #4
    PTP_GetString(dev_info->Manufacturer, &data[PTP_di_OperationsSupported + totallen], &len);
 8003354:	310e      	adds	r1, #14
 8003356:	f10d 0206 	add.w	r2, sp, #6
 800335a:	4429      	add	r1, r5
 800335c:	f504 60a1 	add.w	r0, r4, #1288	; 0x508
 8003360:	f7ff fec8 	bl	80030f4 <PTP_GetString>
    totallen += len * 2U + 1U;
 8003364:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8003368:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 800336c:	1c4e      	adds	r6, r1, #1
    PTP_GetString(dev_info->Model, &data[PTP_di_OperationsSupported + totallen], &len);
 800336e:	310b      	adds	r1, #11
 8003370:	f10d 0206 	add.w	r2, sp, #6
 8003374:	4429      	add	r1, r5
 8003376:	f204 6007 	addw	r0, r4, #1543	; 0x607
 800337a:	f7ff febb 	bl	80030f4 <PTP_GetString>
    totallen += len * 2U + 1U;
 800337e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8003382:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 8003386:	1c4e      	adds	r6, r1, #1
    PTP_GetString(dev_info->DeviceVersion, &data[PTP_di_OperationsSupported + totallen], &len);
 8003388:	310b      	adds	r1, #11
 800338a:	f10d 0206 	add.w	r2, sp, #6
 800338e:	4429      	add	r1, r5
 8003390:	f204 7006 	addw	r0, r4, #1798	; 0x706
 8003394:	f7ff feae 	bl	80030f4 <PTP_GetString>
    totallen += len * 2U + 1U;
 8003398:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800339c:	eb06 0141 	add.w	r1, r6, r1, lsl #1
    PTP_GetString(dev_info->SerialNumber, &data[PTP_di_OperationsSupported + totallen], &len);
 80033a0:	310b      	adds	r1, #11
 80033a2:	f10d 0206 	add.w	r2, sp, #6
 80033a6:	4429      	add	r1, r5
 80033a8:	f604 0005 	addw	r0, r4, #2053	; 0x805
 80033ac:	f7ff fea2 	bl	80030f4 <PTP_GetString>
}
 80033b0:	e75f      	b.n	8003272 <PTP_DecodeDeviceInfo+0x16>

080033b2 <PTP_GetArray32>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray32(uint32_t *array, uint8_t *data, uint32_t offset)
{
 80033b2:	b570      	push	{r4, r5, r6, lr}
 80033b4:	4605      	mov	r5, r0
  uint32_t size, idx = 0U;

  size = LE32(&data[offset]);
 80033b6:	5c88      	ldrb	r0, [r1, r2]
 80033b8:	188b      	adds	r3, r1, r2
 80033ba:	785c      	ldrb	r4, [r3, #1]
 80033bc:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80033c0:	789c      	ldrb	r4, [r3, #2]
 80033c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80033c6:	78db      	ldrb	r3, [r3, #3]
 80033c8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  uint32_t size, idx = 0U;
 80033cc:	f04f 0e00 	mov.w	lr, #0
  while (size > idx)
 80033d0:	e015      	b.n	80033fe <PTP_GetArray32+0x4c>
  {
    array[idx] = LE32(&data[offset + (sizeof(uint32_t) * (idx + 1U))]);
 80033d2:	f10e 0401 	add.w	r4, lr, #1
 80033d6:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 80033da:	f811 300c 	ldrb.w	r3, [r1, ip]
 80033de:	448c      	add	ip, r1
 80033e0:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80033e4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80033e8:	f89c 6002 	ldrb.w	r6, [ip, #2]
 80033ec:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80033f0:	f89c c003 	ldrb.w	ip, [ip, #3]
 80033f4:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80033f8:	f845 302e 	str.w	r3, [r5, lr, lsl #2]
    idx++;
 80033fc:	46a6      	mov	lr, r4
  while (size > idx)
 80033fe:	4586      	cmp	lr, r0
 8003400:	d3e7      	bcc.n	80033d2 <PTP_GetArray32+0x20>
  }
  return size;
}
 8003402:	bd70      	pop	{r4, r5, r6, pc}

08003404 <PTP_GetStorageIDs>:
{
 8003404:	b510      	push	{r4, lr}
 8003406:	460c      	mov	r4, r1
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003408:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800340c:	69d9      	ldr	r1, [r3, #28]
  stor_ids->n = PTP_GetArray32(stor_ids->Storage, data, 0U);
 800340e:	2200      	movs	r2, #0
 8003410:	f501 51ec 	add.w	r1, r1, #7552	; 0x1d80
 8003414:	3110      	adds	r1, #16
 8003416:	1d20      	adds	r0, r4, #4
 8003418:	f7ff ffcb 	bl	80033b2 <PTP_GetArray32>
 800341c:	6020      	str	r0, [r4, #0]
}
 800341e:	bd10      	pop	{r4, pc}

08003420 <PTP_BufferFullCallback>:
{
 8003420:	b510      	push	{r4, lr}
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003422:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003426:	69d9      	ldr	r1, [r3, #28]
  switch (MTP_Handle->ptp.data_container.code)
 8003428:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800342c:	f8b3 3d8a 	ldrh.w	r3, [r3, #3466]	; 0xd8a
 8003430:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8003434:	3b01      	subs	r3, #1
 8003436:	2b1a      	cmp	r3, #26
 8003438:	d811      	bhi.n	800345e <PTP_BufferFullCallback+0x3e>
 800343a:	e8df f003 	tbb	[pc, r3]
 800343e:	100e      	.short	0x100e
 8003440:	10101010 	.word	0x10101010
 8003444:	10111010 	.word	0x10111010
 8003448:	10291010 	.word	0x10291010
 800344c:	10101010 	.word	0x10101010
 8003450:	10101010 	.word	0x10101010
 8003454:	10101010 	.word	0x10101010
 8003458:	11          	.byte	0x11
 8003459:	00          	.byte	0x00
      PTP_DecodeDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 800345a:	f7ff feff 	bl	800325c <PTP_DecodeDeviceInfo>
}
 800345e:	bd10      	pop	{r4, pc}
      if (MTP_Handle->ptp.iteration == 0U)
 8003460:	f501 5300 	add.w	r3, r1, #8192	; 0x2000
 8003464:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f8      	bne.n	800345e <PTP_BufferFullCallback+0x3e>
        USBH_memcpy(MTP_Handle->ptp.object_ptr, MTP_Handle->ptp.data_container.payload.data, PTP_USB_BULK_PAYLOAD_LEN_READ);
 800346c:	f501 5400 	add.w	r4, r1, #8192	; 0x2000
 8003470:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
 8003474:	f501 51ec 	add.w	r1, r1, #7552	; 0x1d80
 8003478:	3110      	adds	r1, #16
 800347a:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 800347e:	f003 f99b 	bl	80067b8 <memcpy>
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 8003482:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 8003486:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800348a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
 800348e:	e7e6      	b.n	800345e <PTP_BufferFullCallback+0x3e>
      if (MTP_Handle->ptp.iteration == 0U)
 8003490:	f501 5300 	add.w	r3, r1, #8192	; 0x2000
 8003494:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e0      	bne.n	800345e <PTP_BufferFullCallback+0x3e>
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 800349c:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 80034a0:	f8d1 31c4 	ldr.w	r3, [r1, #452]	; 0x1c4
 80034a4:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 80034a8:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
}
 80034ac:	e7d7      	b.n	800345e <PTP_BufferFullCallback+0x3e>

080034ae <USBH_PTP_Init>:
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80034ae:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80034b2:	69db      	ldr	r3, [r3, #28]
  MTP_Handle->ptp.state = PTP_IDLE;
 80034b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034b8:	2000      	movs	r0, #0
 80034ba:	f883 0d60 	strb.w	r0, [r3, #3424]	; 0xd60
  MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
}
 80034c4:	4770      	bx	lr

080034c6 <USBH_PTP_SendRequest>:
{
 80034c6:	b538      	push	{r3, r4, r5, lr}
 80034c8:	460d      	mov	r5, r1
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80034ca:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80034ce:	69dc      	ldr	r4, [r3, #28]
  USBH_memset(&(MTP_Handle->ptp.op_container), 0, sizeof(PTP_OpContainerTypedef));
 80034d0:	2220      	movs	r2, #32
 80034d2:	2100      	movs	r1, #0
 80034d4:	f504 50eb 	add.w	r0, r4, #7520	; 0x1d60
 80034d8:	3004      	adds	r0, #4
 80034da:	f003 f97b 	bl	80067d4 <memset>
  MTP_Handle->ptp.op_container.length = PTP_USB_BULK_REQ_LEN - (sizeof(uint32_t) * (5U - req->Nparam));
 80034de:	f895 2020 	ldrb.w	r2, [r5, #32]
 80034e2:	3203      	adds	r2, #3
 80034e4:	0092      	lsls	r2, r2, #2
 80034e6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80034ea:	f8c3 2d64 	str.w	r2, [r3, #3428]	; 0xd64
  MTP_Handle->ptp.op_container.type = PTP_USB_CONTAINER_COMMAND;
 80034ee:	2201      	movs	r2, #1
 80034f0:	f8a3 2d68 	strh.w	r2, [r3, #3432]	; 0xd68
  MTP_Handle->ptp.op_container.code = req->Code;
 80034f4:	882a      	ldrh	r2, [r5, #0]
 80034f6:	f8a3 2d6a 	strh.w	r2, [r3, #3434]	; 0xd6a
  MTP_Handle->ptp.op_container.trans_id = req->Transaction_ID;
 80034fa:	68aa      	ldr	r2, [r5, #8]
 80034fc:	f8c3 2d6c 	str.w	r2, [r3, #3436]	; 0xd6c
  MTP_Handle->ptp.op_container.param1 = req->Param1;
 8003500:	68ea      	ldr	r2, [r5, #12]
 8003502:	f8c3 2d70 	str.w	r2, [r3, #3440]	; 0xd70
  MTP_Handle->ptp.op_container.param2 = req->Param2;
 8003506:	692a      	ldr	r2, [r5, #16]
 8003508:	f8c3 2d74 	str.w	r2, [r3, #3444]	; 0xd74
  MTP_Handle->ptp.op_container.param3 = req->Param3;
 800350c:	696a      	ldr	r2, [r5, #20]
 800350e:	f8c3 2d78 	str.w	r2, [r3, #3448]	; 0xd78
  MTP_Handle->ptp.op_container.param4 = req->Param4;
 8003512:	69aa      	ldr	r2, [r5, #24]
 8003514:	f8c3 2d7c 	str.w	r2, [r3, #3452]	; 0xd7c
  MTP_Handle->ptp.op_container.param5 = req->Param5;
 8003518:	69ea      	ldr	r2, [r5, #28]
 800351a:	f8c3 2d80 	str.w	r2, [r3, #3456]	; 0xd80
}
 800351e:	2000      	movs	r0, #0
 8003520:	bd38      	pop	{r3, r4, r5, pc}

08003522 <USBH_PTP_GetResponse>:
  MTP_HandleTypeDef  *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003522:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003526:	69db      	ldr	r3, [r3, #28]
  resp->Code = MTP_Handle->ptp.resp_container.code;
 8003528:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800352c:	f8b3 218a 	ldrh.w	r2, [r3, #394]	; 0x18a
 8003530:	800a      	strh	r2, [r1, #0]
  resp->SessionID = MTP_Handle->ptp.session_id;
 8003532:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 8003536:	604a      	str	r2, [r1, #4]
  resp->Transaction_ID = MTP_Handle->ptp.resp_container.trans_id;
 8003538:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 800353c:	608a      	str	r2, [r1, #8]
  resp->Param1 = MTP_Handle->ptp.resp_container.param1;
 800353e:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8003542:	60ca      	str	r2, [r1, #12]
  resp->Param2 = MTP_Handle->ptp.resp_container.param2;
 8003544:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 8003548:	610a      	str	r2, [r1, #16]
  resp->Param3 = MTP_Handle->ptp.resp_container.param3;
 800354a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800354e:	614a      	str	r2, [r1, #20]
  resp->Param4 = MTP_Handle->ptp.resp_container.param4;
 8003550:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8003554:	618a      	str	r2, [r1, #24]
  resp->Param5 = MTP_Handle->ptp.resp_container.param5;
 8003556:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800355a:	61cb      	str	r3, [r1, #28]
}
 800355c:	2000      	movs	r0, #0
 800355e:	4770      	bx	lr

08003560 <USBH_PTP_Process>:
{
 8003560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003562:	b08d      	sub	sp, #52	; 0x34
 8003564:	4605      	mov	r5, r0
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003566:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800356a:	69de      	ldr	r6, [r3, #28]
  switch (MTP_Handle->ptp.state)
 800356c:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 8003570:	f893 4d60 	ldrb.w	r4, [r3, #3424]	; 0xd60
 8003574:	1e63      	subs	r3, r4, #1
 8003576:	2b08      	cmp	r3, #8
 8003578:	f200 81d4 	bhi.w	8003924 <USBH_PTP_Process+0x3c4>
 800357c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003580:	001c0009 	.word	0x001c0009
 8003584:	007d006b 	.word	0x007d006b
 8003588:	010d00fc 	.word	0x010d00fc
 800358c:	019e018f 	.word	0x019e018f
 8003590:	01cc      	.short	0x01cc
                        (uint16_t)MTP_Handle->ptp.op_container.length,
 8003592:	f506 5780 	add.w	r7, r6, #4096	; 0x1000
      USBH_BulkSendData(phost,
 8003596:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 800359a:	f8b7 2d64 	ldrh.w	r2, [r7, #3428]	; 0xd64
 800359e:	2101      	movs	r1, #1
 80035a0:	9100      	str	r1, [sp, #0]
 80035a2:	f506 51eb 	add.w	r1, r6, #7520	; 0x1d60
 80035a6:	3104      	adds	r1, #4
 80035a8:	f001 fa5c 	bl	8004a64 <USBH_BulkSendData>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_WAIT_STATE;
 80035ac:	2302      	movs	r3, #2
 80035ae:	f887 3d60 	strb.w	r3, [r7, #3424]	; 0xd60
}
 80035b2:	4620      	mov	r0, r4
 80035b4:	b00d      	add	sp, #52	; 0x34
 80035b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 80035b8:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 80035bc:	f893 1d2d 	ldrb.w	r1, [r3, #3373]	; 0xd2d
 80035c0:	f003 f830 	bl	8006624 <USBH_LL_GetURBState>
 80035c4:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 80035c6:	2801      	cmp	r0, #1
 80035c8:	d005      	beq.n	80035d6 <USBH_PTP_Process+0x76>
      else if (URB_Status == USBH_URB_NOTREADY)
 80035ca:	2802      	cmp	r0, #2
 80035cc:	d026      	beq.n	800361c <USBH_PTP_Process+0xbc>
      else if (URB_Status == USBH_URB_STALL)
 80035ce:	2805      	cmp	r0, #5
 80035d0:	d032      	beq.n	8003638 <USBH_PTP_Process+0xd8>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80035d2:	2401      	movs	r4, #1
 80035d4:	e7ed      	b.n	80035b2 <USBH_PTP_Process+0x52>
        if (MTP_Handle->ptp.flags == PTP_DP_NODATA)
 80035d6:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 80035da:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80035de:	b96b      	cbnz	r3, 80035fc <USBH_PTP_Process+0x9c>
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 80035e0:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 80035e4:	2307      	movs	r3, #7
 80035e6:	f886 3d60 	strb.w	r3, [r6, #3424]	; 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80035ea:	2102      	movs	r1, #2
 80035ec:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80035f0:	2200      	movs	r2, #0
 80035f2:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 80035f6:	f001 fb13 	bl	8004c20 <osMessagePut>
 80035fa:	e7da      	b.n	80035b2 <USBH_PTP_Process+0x52>
        else  if (MTP_Handle->ptp.flags == PTP_DP_SENDDATA)
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d007      	beq.n	8003610 <USBH_PTP_Process+0xb0>
        else  if (MTP_Handle->ptp.flags == PTP_DP_GETDATA)
 8003600:	2b02      	cmp	r3, #2
 8003602:	d1f2      	bne.n	80035ea <USBH_PTP_Process+0x8a>
          MTP_Handle->ptp.state = PTP_DATA_IN_PHASE_STATE;
 8003604:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003608:	2305      	movs	r3, #5
 800360a:	f886 3d60 	strb.w	r3, [r6, #3424]	; 0xd60
 800360e:	e7ec      	b.n	80035ea <USBH_PTP_Process+0x8a>
          MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 8003610:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003614:	2303      	movs	r3, #3
 8003616:	f886 3d60 	strb.w	r3, [r6, #3424]	; 0xd60
 800361a:	e7e6      	b.n	80035ea <USBH_PTP_Process+0x8a>
        MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800361c:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003620:	2401      	movs	r4, #1
 8003622:	f886 4d60 	strb.w	r4, [r6, #3424]	; 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8003626:	2102      	movs	r1, #2
 8003628:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800362c:	2200      	movs	r2, #0
 800362e:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 8003632:	f001 faf5 	bl	8004c20 <osMessagePut>
 8003636:	e7bc      	b.n	80035b2 <USBH_PTP_Process+0x52>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8003638:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 800363c:	2309      	movs	r3, #9
 800363e:	f886 3d60 	strb.w	r3, [r6, #3424]	; 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8003642:	2102      	movs	r1, #2
 8003644:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003648:	2200      	movs	r2, #0
 800364a:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 800364e:	f001 fae7 	bl	8004c20 <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8003652:	2401      	movs	r4, #1
 8003654:	e7ad      	b.n	80035b2 <USBH_PTP_Process+0x52>
      USBH_BulkSendData(phost,
 8003656:	f506 5780 	add.w	r7, r6, #4096	; 0x1000
 800365a:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 800365e:	f8b7 2d32 	ldrh.w	r2, [r7, #3378]	; 0xd32
 8003662:	f506 5600 	add.w	r6, r6, #8192	; 0x2000
 8003666:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
 800366a:	2401      	movs	r4, #1
 800366c:	9400      	str	r4, [sp, #0]
 800366e:	f001 f9f9 	bl	8004a64 <USBH_BulkSendData>
      MTP_Handle->ptp.state  = PTP_DATA_OUT_PHASE_WAIT_STATE;
 8003672:	2304      	movs	r3, #4
 8003674:	f887 3d60 	strb.w	r3, [r7, #3424]	; 0xd60
      break;
 8003678:	e79b      	b.n	80035b2 <USBH_PTP_Process+0x52>
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 800367a:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800367e:	f893 1d2d 	ldrb.w	r1, [r3, #3373]	; 0xd2d
 8003682:	f002 ffcf 	bl	8006624 <USBH_LL_GetURBState>
 8003686:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8003688:	2801      	cmp	r0, #1
 800368a:	d005      	beq.n	8003698 <USBH_PTP_Process+0x138>
      else if (URB_Status == USBH_URB_NOTREADY)
 800368c:	2802      	cmp	r0, #2
 800368e:	d055      	beq.n	800373c <USBH_PTP_Process+0x1dc>
      else if (URB_Status == USBH_URB_STALL)
 8003690:	2805      	cmp	r0, #5
 8003692:	d062      	beq.n	800375a <USBH_PTP_Process+0x1fa>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8003694:	2401      	movs	r4, #1
 8003696:	e78c      	b.n	80035b2 <USBH_PTP_Process+0x52>
        if (MTP_Handle->ptp.data_length > MTP_Handle->DataOutEpSize)
 8003698:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 800369c:	f8d3 21b4 	ldr.w	r2, [r3, #436]	; 0x1b4
 80036a0:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 80036a4:	f8b3 3d32 	ldrh.w	r3, [r3, #3378]	; 0xd32
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d91f      	bls.n	80036ec <USBH_PTP_Process+0x18c>
          MTP_Handle->ptp.data_ptr += MTP_Handle->DataOutEpSize;
 80036ac:	f506 5100 	add.w	r1, r6, #8192	; 0x2000
 80036b0:	f8d1 01b0 	ldr.w	r0, [r1, #432]	; 0x1b0
 80036b4:	4418      	add	r0, r3
 80036b6:	f8c1 01b0 	str.w	r0, [r1, #432]	; 0x1b0
          MTP_Handle->ptp.data_length -= MTP_Handle->DataOutEpSize;
 80036ba:	1ad2      	subs	r2, r2, r3
 80036bc:	f8c1 21b4 	str.w	r2, [r1, #436]	; 0x1b4
          MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 80036c0:	f8d1 21b8 	ldr.w	r2, [r1, #440]	; 0x1b8
 80036c4:	4413      	add	r3, r2
 80036c6:	f8c1 31b8 	str.w	r3, [r1, #440]	; 0x1b8
          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 80036ca:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80036ce:	d312      	bcc.n	80036f6 <USBH_PTP_Process+0x196>
            PTP_BufferFullCallback(phost);
 80036d0:	4628      	mov	r0, r5
 80036d2:	f7ff fea5 	bl	8003420 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 80036d6:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
            MTP_Handle->ptp.iteration++;
 80036e0:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 80036e4:	3201      	adds	r2, #1
 80036e6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 80036ea:	e004      	b.n	80036f6 <USBH_PTP_Process+0x196>
          MTP_Handle->ptp.data_length = 0U;
 80036ec:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 80036f0:	2200      	movs	r2, #0
 80036f2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
        if (MTP_Handle->ptp.data_length > 0U)
 80036f6:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 80036fa:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80036fe:	b96b      	cbnz	r3, 800371c <USBH_PTP_Process+0x1bc>
          MTP_Handle->ptp.state  = PTP_RESPONSE_STATE;
 8003700:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003704:	2307      	movs	r3, #7
 8003706:	f886 3d60 	strb.w	r3, [r6, #3424]	; 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800370a:	2102      	movs	r1, #2
 800370c:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003710:	2200      	movs	r2, #0
 8003712:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 8003716:	f001 fa83 	bl	8004c20 <osMessagePut>
 800371a:	e74a      	b.n	80035b2 <USBH_PTP_Process+0x52>
          USBH_BulkSendData(phost,
 800371c:	f506 5280 	add.w	r2, r6, #4096	; 0x1000
 8003720:	f892 3d2d 	ldrb.w	r3, [r2, #3373]	; 0xd2d
 8003724:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	; 0xd32
 8003728:	f506 5600 	add.w	r6, r6, #8192	; 0x2000
 800372c:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
 8003730:	2001      	movs	r0, #1
 8003732:	9000      	str	r0, [sp, #0]
 8003734:	4628      	mov	r0, r5
 8003736:	f001 f995 	bl	8004a64 <USBH_BulkSendData>
 800373a:	e7e6      	b.n	800370a <USBH_PTP_Process+0x1aa>
        MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 800373c:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003740:	2303      	movs	r3, #3
 8003742:	f886 3d60 	strb.w	r3, [r6, #3424]	; 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8003746:	2102      	movs	r1, #2
 8003748:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800374c:	2200      	movs	r2, #0
 800374e:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 8003752:	f001 fa65 	bl	8004c20 <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8003756:	2401      	movs	r4, #1
 8003758:	e72b      	b.n	80035b2 <USBH_PTP_Process+0x52>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800375a:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 800375e:	2309      	movs	r3, #9
 8003760:	f886 3d60 	strb.w	r3, [r6, #3424]	; 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8003764:	2102      	movs	r1, #2
 8003766:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800376a:	2200      	movs	r2, #0
 800376c:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 8003770:	f001 fa56 	bl	8004c20 <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8003774:	2401      	movs	r4, #1
 8003776:	e71c      	b.n	80035b2 <USBH_PTP_Process+0x52>
      USBH_BulkReceiveData(phost,
 8003778:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
 800377c:	f506 5600 	add.w	r6, r6, #8192	; 0x2000
 8003780:	f894 3d2c 	ldrb.w	r3, [r4, #3372]	; 0xd2c
 8003784:	f8b4 2d34 	ldrh.w	r2, [r4, #3380]	; 0xd34
 8003788:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
 800378c:	f001 f980 	bl	8004a90 <USBH_BulkReceiveData>
      MTP_Handle->ptp.state  = PTP_DATA_IN_PHASE_WAIT_STATE;
 8003790:	2306      	movs	r3, #6
 8003792:	f884 3d60 	strb.w	r3, [r4, #3424]	; 0xd60
  USBH_StatusTypeDef   status = USBH_BUSY;
 8003796:	2401      	movs	r4, #1
      break;
 8003798:	e70b      	b.n	80035b2 <USBH_PTP_Process+0x52>
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 800379a:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800379e:	f893 1d2c 	ldrb.w	r1, [r3, #3372]	; 0xd2c
 80037a2:	f002 ff3f 	bl	8006624 <USBH_LL_GetURBState>
 80037a6:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 80037a8:	2801      	cmp	r0, #1
 80037aa:	d003      	beq.n	80037b4 <USBH_PTP_Process+0x254>
      else if (URB_Status == USBH_URB_STALL)
 80037ac:	2805      	cmp	r0, #5
 80037ae:	d067      	beq.n	8003880 <USBH_PTP_Process+0x320>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80037b0:	2401      	movs	r4, #1
 80037b2:	e6fe      	b.n	80035b2 <USBH_PTP_Process+0x52>
        len = USBH_LL_GetLastXferSize(phost, MTP_Handle->DataInPipe);
 80037b4:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 80037b8:	f893 1d2c 	ldrb.w	r1, [r3, #3372]	; 0xd2c
 80037bc:	4628      	mov	r0, r5
 80037be:	f002 ff2b 	bl	8006618 <USBH_LL_GetLastXferSize>
        if (MTP_Handle->ptp.data_packet_counter++ == 0U)
 80037c2:	f506 5200 	add.w	r2, r6, #8192	; 0x2000
 80037c6:	f8d2 31c0 	ldr.w	r3, [r2, #448]	; 0x1c0
 80037ca:	1c59      	adds	r1, r3, #1
 80037cc:	f8c2 11c0 	str.w	r1, [r2, #448]	; 0x1c0
 80037d0:	b943      	cbnz	r3, 80037e4 <USBH_PTP_Process+0x284>
          MTP_Handle->ptp.data_length = *(uint32_t *)(void *)(MTP_Handle->ptp.data_ptr);
 80037d2:	4613      	mov	r3, r2
 80037d4:	f8d2 21b0 	ldr.w	r2, [r2, #432]	; 0x1b0
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
          MTP_Handle->ptp.iteration = 0U;
 80037de:	2200      	movs	r2, #0
 80037e0:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        if ((len >=  MTP_Handle->DataInEpSize) && (MTP_Handle->ptp.data_length > 0U))
 80037e4:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 80037e8:	f8b3 3d34 	ldrh.w	r3, [r3, #3380]	; 0xd34
 80037ec:	4283      	cmp	r3, r0
 80037ee:	d832      	bhi.n	8003856 <USBH_PTP_Process+0x2f6>
 80037f0:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 80037f4:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80037f8:	b36b      	cbz	r3, 8003856 <USBH_PTP_Process+0x2f6>
          MTP_Handle->ptp.data_ptr += len;
 80037fa:	f506 5200 	add.w	r2, r6, #8192	; 0x2000
 80037fe:	f8d2 11b0 	ldr.w	r1, [r2, #432]	; 0x1b0
 8003802:	4401      	add	r1, r0
 8003804:	f8c2 11b0 	str.w	r1, [r2, #432]	; 0x1b0
          MTP_Handle->ptp.data_length -= len;
 8003808:	1a1b      	subs	r3, r3, r0
 800380a:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
          MTP_Handle->ptp.data_packet += len;
 800380e:	f8d2 31b8 	ldr.w	r3, [r2, #440]	; 0x1b8
 8003812:	4418      	add	r0, r3
 8003814:	f8c2 01b8 	str.w	r0, [r2, #440]	; 0x1b8
          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 8003818:	f5b0 7f7d 	cmp.w	r0, #1012	; 0x3f4
 800381c:	d20d      	bcs.n	800383a <USBH_PTP_Process+0x2da>
          USBH_BulkReceiveData(phost,
 800381e:	f506 5280 	add.w	r2, r6, #4096	; 0x1000
 8003822:	f506 5600 	add.w	r6, r6, #8192	; 0x2000
 8003826:	f892 3d2c 	ldrb.w	r3, [r2, #3372]	; 0xd2c
 800382a:	f8b2 2d34 	ldrh.w	r2, [r2, #3380]	; 0xd34
 800382e:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
 8003832:	4628      	mov	r0, r5
 8003834:	f001 f92c 	bl	8004a90 <USBH_BulkReceiveData>
 8003838:	e6bb      	b.n	80035b2 <USBH_PTP_Process+0x52>
            PTP_BufferFullCallback(phost);
 800383a:	4628      	mov	r0, r5
 800383c:	f7ff fdf0 	bl	8003420 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 8003840:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 8003844:	2200      	movs	r2, #0
 8003846:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
            MTP_Handle->ptp.iteration++;
 800384a:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 800384e:	3201      	adds	r2, #1
 8003850:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 8003854:	e7e3      	b.n	800381e <USBH_PTP_Process+0x2be>
          MTP_Handle->ptp.data_length -= len;
 8003856:	f506 5200 	add.w	r2, r6, #8192	; 0x2000
 800385a:	f8d2 31b4 	ldr.w	r3, [r2, #436]	; 0x1b4
 800385e:	1a1b      	subs	r3, r3, r0
 8003860:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 8003864:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003868:	2307      	movs	r3, #7
 800386a:	f886 3d60 	strb.w	r3, [r6, #3424]	; 0xd60
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800386e:	2102      	movs	r1, #2
 8003870:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003874:	2200      	movs	r2, #0
 8003876:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 800387a:	f001 f9d1 	bl	8004c20 <osMessagePut>
 800387e:	e698      	b.n	80035b2 <USBH_PTP_Process+0x52>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8003880:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003884:	2309      	movs	r3, #9
 8003886:	f886 3d60 	strb.w	r3, [r6, #3424]	; 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800388a:	2102      	movs	r1, #2
 800388c:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003890:	2200      	movs	r2, #0
 8003892:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 8003896:	f001 f9c3 	bl	8004c20 <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800389a:	2401      	movs	r4, #1
 800389c:	e689      	b.n	80035b2 <USBH_PTP_Process+0x52>
      USBH_BulkReceiveData(phost,
 800389e:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
 80038a2:	f894 3d2c 	ldrb.w	r3, [r4, #3372]	; 0xd2c
 80038a6:	223f      	movs	r2, #63	; 0x3f
 80038a8:	f506 5106 	add.w	r1, r6, #8576	; 0x2180
 80038ac:	3104      	adds	r1, #4
 80038ae:	f001 f8ef 	bl	8004a90 <USBH_BulkReceiveData>
      MTP_Handle->ptp.state  = PTP_RESPONSE_WAIT_STATE;
 80038b2:	2308      	movs	r3, #8
 80038b4:	f884 3d60 	strb.w	r3, [r4, #3424]	; 0xd60
  USBH_StatusTypeDef   status = USBH_BUSY;
 80038b8:	2401      	movs	r4, #1
      break;
 80038ba:	e67a      	b.n	80035b2 <USBH_PTP_Process+0x52>
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 80038bc:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 80038c0:	f893 1d2c 	ldrb.w	r1, [r3, #3372]	; 0xd2c
 80038c4:	f002 feae 	bl	8006624 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80038c8:	2801      	cmp	r0, #1
 80038ca:	d003      	beq.n	80038d4 <USBH_PTP_Process+0x374>
      else if (URB_Status == USBH_URB_STALL)
 80038cc:	2805      	cmp	r0, #5
 80038ce:	d014      	beq.n	80038fa <USBH_PTP_Process+0x39a>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80038d0:	2401      	movs	r4, #1
 80038d2:	e66e      	b.n	80035b2 <USBH_PTP_Process+0x52>
        USBH_PTP_GetResponse(phost, &ptp_container);
 80038d4:	a903      	add	r1, sp, #12
 80038d6:	4628      	mov	r0, r5
 80038d8:	f7ff fe23 	bl	8003522 <USBH_PTP_GetResponse>
        if (ptp_container.Code == PTP_RC_OK)
 80038dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80038e0:	f242 0301 	movw	r3, #8193	; 0x2001
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d006      	beq.n	80038f6 <USBH_PTP_Process+0x396>
          status = USBH_FAIL;
 80038e8:	2402      	movs	r4, #2
        MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 80038ea:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 80038ee:	2301      	movs	r3, #1
 80038f0:	f886 3d61 	strb.w	r3, [r6, #3425]	; 0xd61
 80038f4:	e65d      	b.n	80035b2 <USBH_PTP_Process+0x52>
          status = USBH_OK;
 80038f6:	2400      	movs	r4, #0
 80038f8:	e7f7      	b.n	80038ea <USBH_PTP_Process+0x38a>
        MTP_Handle->ptp.state  = PTP_ERROR;
 80038fa:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 80038fe:	2309      	movs	r3, #9
 8003900:	f886 3d60 	strb.w	r3, [r6, #3424]	; 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8003904:	2102      	movs	r1, #2
 8003906:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800390a:	2200      	movs	r2, #0
 800390c:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 8003910:	f001 f986 	bl	8004c20 <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8003914:	2401      	movs	r4, #1
 8003916:	e64c      	b.n	80035b2 <USBH_PTP_Process+0x52>
      MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 8003918:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 800391c:	2401      	movs	r4, #1
 800391e:	f886 4d61 	strb.w	r4, [r6, #3425]	; 0xd61
      break;
 8003922:	e646      	b.n	80035b2 <USBH_PTP_Process+0x52>
  switch (MTP_Handle->ptp.state)
 8003924:	2401      	movs	r4, #1
 8003926:	e644      	b.n	80035b2 <USBH_PTP_Process+0x52>

08003928 <USBH_PTP_OpenSession>:
  * @param  phost: Host handle
  * @param  session: Session ID (MUST BE > 0U)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_OpenSession(USBH_HandleTypeDef *phost, uint32_t session)
{
 8003928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800392c:	b08a      	sub	sp, #40	; 0x28
 800392e:	4605      	mov	r5, r0
  USBH_StatusTypeDef   status = USBH_BUSY;
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003930:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003934:	69de      	ldr	r6, [r3, #28]
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8003936:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800393a:	f893 4d61 	ldrb.w	r4, [r3, #3425]	; 0xd61
 800393e:	2c01      	cmp	r4, #1
 8003940:	d006      	beq.n	8003950 <USBH_PTP_OpenSession+0x28>
 8003942:	2c02      	cmp	r4, #2
 8003944:	d02d      	beq.n	80039a2 <USBH_PTP_OpenSession+0x7a>
 8003946:	2401      	movs	r4, #1

    default:
      break;
  }
  return status;
}
 8003948:	4620      	mov	r0, r4
 800394a:	b00a      	add	sp, #40	; 0x28
 800394c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MTP_Handle->ptp.transaction_id = 0x00000000U;
 8003950:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 8003954:	2700      	movs	r7, #0
 8003956:	f8c3 71a4 	str.w	r7, [r3, #420]	; 0x1a4
      MTP_Handle->ptp.session_id = session;
 800395a:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
      MTP_Handle->ptp.flags = PTP_DP_NODATA;
 800395e:	f8c3 71ac 	str.w	r7, [r3, #428]	; 0x1ac
      ptp_container.Code = PTP_OC_OpenSession;
 8003962:	f241 0202 	movw	r2, #4098	; 0x1002
 8003966:	f8ad 2004 	strh.w	r2, [sp, #4]
      ptp_container.SessionID = session;
 800396a:	9102      	str	r1, [sp, #8]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 800396c:	f04f 0801 	mov.w	r8, #1
 8003970:	f8c3 81a4 	str.w	r8, [r3, #420]	; 0x1a4
 8003974:	9703      	str	r7, [sp, #12]
      ptp_container.Param1 = session;
 8003976:	9104      	str	r1, [sp, #16]
      ptp_container.Nparam = 1U;
 8003978:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
      USBH_PTP_SendRequest(phost, &ptp_container);
 800397c:	a901      	add	r1, sp, #4
 800397e:	f7ff fda2 	bl	80034c6 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8003982:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003986:	f886 8d60 	strb.w	r8, [r6, #3424]	; 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800398a:	2302      	movs	r3, #2
 800398c:	f886 3d61 	strb.w	r3, [r6, #3425]	; 0xd61
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003990:	2105      	movs	r1, #5
 8003992:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003996:	463a      	mov	r2, r7
 8003998:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
 800399c:	f001 f940 	bl	8004c20 <osMessagePut>
      break;
 80039a0:	e7d2      	b.n	8003948 <USBH_PTP_OpenSession+0x20>
      status = USBH_PTP_Process(phost);
 80039a2:	f7ff fddd 	bl	8003560 <USBH_PTP_Process>
 80039a6:	4604      	mov	r4, r0
      break;
 80039a8:	e7ce      	b.n	8003948 <USBH_PTP_OpenSession+0x20>

080039aa <USBH_PTP_GetDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 80039aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ae:	b08a      	sub	sp, #40	; 0x28
 80039b0:	4604      	mov	r4, r0
  USBH_StatusTypeDef status = USBH_BUSY;
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80039b2:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80039b6:	69de      	ldr	r6, [r3, #28]
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 80039b8:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 80039bc:	f893 5d61 	ldrb.w	r5, [r3, #3425]	; 0xd61
 80039c0:	2d01      	cmp	r5, #1
 80039c2:	d007      	beq.n	80039d4 <USBH_PTP_GetDeviceInfo+0x2a>
 80039c4:	460f      	mov	r7, r1
 80039c6:	2d02      	cmp	r5, #2
 80039c8:	d038      	beq.n	8003a3c <USBH_PTP_GetDeviceInfo+0x92>
 80039ca:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 80039cc:	4628      	mov	r0, r5
 80039ce:	b00a      	add	sp, #40	; 0x28
 80039d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 80039d4:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 80039d8:	f04f 0802 	mov.w	r8, #2
 80039dc:	f8c3 81ac 	str.w	r8, [r3, #428]	; 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 80039e0:	f506 52ec 	add.w	r2, r6, #7552	; 0x1d80
 80039e4:	3204      	adds	r2, #4
 80039e6:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 80039ea:	2700      	movs	r7, #0
 80039ec:	f8c3 71b4 	str.w	r7, [r3, #436]	; 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 80039f0:	f8c3 71c0 	str.w	r7, [r3, #448]	; 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 80039f4:	f8c3 71b8 	str.w	r7, [r3, #440]	; 0x1b8
      ptp_container.Code = PTP_OC_GetDeviceInfo;
 80039f8:	f241 0201 	movw	r2, #4097	; 0x1001
 80039fc:	f8ad 2004 	strh.w	r2, [sp, #4]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8003a00:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 8003a04:	9202      	str	r2, [sp, #8]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 8003a06:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8003a0a:	1c51      	adds	r1, r2, #1
 8003a0c:	f8c3 11a4 	str.w	r1, [r3, #420]	; 0x1a4
 8003a10:	9203      	str	r2, [sp, #12]
      ptp_container.Nparam = 0U;
 8003a12:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
      USBH_PTP_SendRequest(phost, &ptp_container);
 8003a16:	a901      	add	r1, sp, #4
 8003a18:	f7ff fd55 	bl	80034c6 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8003a1c:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003a20:	2301      	movs	r3, #1
 8003a22:	f886 3d60 	strb.w	r3, [r6, #3424]	; 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8003a26:	f886 8d61 	strb.w	r8, [r6, #3425]	; 0xd61
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003a2a:	2105      	movs	r1, #5
 8003a2c:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003a30:	463a      	mov	r2, r7
 8003a32:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8003a36:	f001 f8f3 	bl	8004c20 <osMessagePut>
      break;
 8003a3a:	e7c7      	b.n	80039cc <USBH_PTP_GetDeviceInfo+0x22>
      status = USBH_PTP_Process(phost);
 8003a3c:	f7ff fd90 	bl	8003560 <USBH_PTP_Process>
      if (status == USBH_OK)
 8003a40:	4605      	mov	r5, r0
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d1c2      	bne.n	80039cc <USBH_PTP_GetDeviceInfo+0x22>
        PTP_DecodeDeviceInfo(phost, dev_info);
 8003a46:	4639      	mov	r1, r7
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f7ff fc07 	bl	800325c <PTP_DecodeDeviceInfo>
 8003a4e:	e7bd      	b.n	80039cc <USBH_PTP_GetDeviceInfo+0x22>

08003a50 <USBH_PTP_GetStorageIds>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageIds(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *storage_ids)
{
 8003a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a54:	b08a      	sub	sp, #40	; 0x28
 8003a56:	4604      	mov	r4, r0
  USBH_StatusTypeDef status = USBH_BUSY;
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003a58:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003a5c:	69de      	ldr	r6, [r3, #28]
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8003a5e:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 8003a62:	f893 5d61 	ldrb.w	r5, [r3, #3425]	; 0xd61
 8003a66:	2d01      	cmp	r5, #1
 8003a68:	d007      	beq.n	8003a7a <USBH_PTP_GetStorageIds+0x2a>
 8003a6a:	460f      	mov	r7, r1
 8003a6c:	2d02      	cmp	r5, #2
 8003a6e:	d038      	beq.n	8003ae2 <USBH_PTP_GetStorageIds+0x92>
 8003a70:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 8003a72:	4628      	mov	r0, r5
 8003a74:	b00a      	add	sp, #40	; 0x28
 8003a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8003a7a:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 8003a7e:	f04f 0802 	mov.w	r8, #2
 8003a82:	f8c3 81ac 	str.w	r8, [r3, #428]	; 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 8003a86:	f506 52ec 	add.w	r2, r6, #7552	; 0x1d80
 8003a8a:	3204      	adds	r2, #4
 8003a8c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 8003a90:	2700      	movs	r7, #0
 8003a92:	f8c3 71b4 	str.w	r7, [r3, #436]	; 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 8003a96:	f8c3 71c0 	str.w	r7, [r3, #448]	; 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 8003a9a:	f8c3 71b8 	str.w	r7, [r3, #440]	; 0x1b8
      ptp_container.Code = PTP_OC_GetStorageIDs;
 8003a9e:	f241 0204 	movw	r2, #4100	; 0x1004
 8003aa2:	f8ad 2004 	strh.w	r2, [sp, #4]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8003aa6:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 8003aaa:	9202      	str	r2, [sp, #8]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 8003aac:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8003ab0:	1c51      	adds	r1, r2, #1
 8003ab2:	f8c3 11a4 	str.w	r1, [r3, #420]	; 0x1a4
 8003ab6:	9203      	str	r2, [sp, #12]
      ptp_container.Nparam = 0U;
 8003ab8:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
      USBH_PTP_SendRequest(phost, &ptp_container);
 8003abc:	a901      	add	r1, sp, #4
 8003abe:	f7ff fd02 	bl	80034c6 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8003ac2:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f886 3d60 	strb.w	r3, [r6, #3424]	; 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8003acc:	f886 8d61 	strb.w	r8, [r6, #3425]	; 0xd61
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003ad0:	2105      	movs	r1, #5
 8003ad2:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003ad6:	463a      	mov	r2, r7
 8003ad8:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8003adc:	f001 f8a0 	bl	8004c20 <osMessagePut>
      break;
 8003ae0:	e7c7      	b.n	8003a72 <USBH_PTP_GetStorageIds+0x22>
      status = USBH_PTP_Process(phost);
 8003ae2:	f7ff fd3d 	bl	8003560 <USBH_PTP_Process>
      if (status == USBH_OK)
 8003ae6:	4605      	mov	r5, r0
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	d1c2      	bne.n	8003a72 <USBH_PTP_GetStorageIds+0x22>
        PTP_GetStorageIDs(phost, storage_ids);
 8003aec:	4639      	mov	r1, r7
 8003aee:	4620      	mov	r0, r4
 8003af0:	f7ff fc88 	bl	8003404 <PTP_GetStorageIDs>
 8003af4:	e7bd      	b.n	8003a72 <USBH_PTP_GetStorageIds+0x22>

08003af6 <USBH_PTP_GetStorageInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageInfo(USBH_HandleTypeDef *phost,
                                           uint32_t storage_id,
                                           PTP_StorageInfoTypedef *storage_info)
{
 8003af6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003afa:	b08b      	sub	sp, #44	; 0x2c
 8003afc:	4604      	mov	r4, r0
 8003afe:	460f      	mov	r7, r1
  USBH_StatusTypeDef   status = USBH_BUSY;
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003b00:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003b04:	69de      	ldr	r6, [r3, #28]
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8003b06:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 8003b0a:	f893 5d61 	ldrb.w	r5, [r3, #3425]	; 0xd61
 8003b0e:	2d01      	cmp	r5, #1
 8003b10:	d007      	beq.n	8003b22 <USBH_PTP_GetStorageInfo+0x2c>
 8003b12:	4690      	mov	r8, r2
 8003b14:	2d02      	cmp	r5, #2
 8003b16:	d03a      	beq.n	8003b8e <USBH_PTP_GetStorageInfo+0x98>
 8003b18:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	b00b      	add	sp, #44	; 0x2c
 8003b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8003b22:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 8003b26:	f04f 0902 	mov.w	r9, #2
 8003b2a:	f8c3 91ac 	str.w	r9, [r3, #428]	; 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 8003b2e:	f506 52ec 	add.w	r2, r6, #7552	; 0x1d80
 8003b32:	3204      	adds	r2, #4
 8003b34:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 8003b38:	f04f 0800 	mov.w	r8, #0
 8003b3c:	f8c3 81b4 	str.w	r8, [r3, #436]	; 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 8003b40:	f8c3 81c0 	str.w	r8, [r3, #448]	; 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 8003b44:	f8c3 81b8 	str.w	r8, [r3, #440]	; 0x1b8
      ptp_container.Code = PTP_OC_GetStorageInfo;
 8003b48:	f241 0205 	movw	r2, #4101	; 0x1005
 8003b4c:	f8ad 2004 	strh.w	r2, [sp, #4]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8003b50:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 8003b54:	9202      	str	r2, [sp, #8]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 8003b56:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8003b5a:	1c51      	adds	r1, r2, #1
 8003b5c:	f8c3 11a4 	str.w	r1, [r3, #420]	; 0x1a4
 8003b60:	9203      	str	r2, [sp, #12]
      ptp_container.Param1 = storage_id;
 8003b62:	9704      	str	r7, [sp, #16]
      ptp_container.Nparam = 1U;
 8003b64:	2701      	movs	r7, #1
 8003b66:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
      USBH_PTP_SendRequest(phost, &ptp_container);
 8003b6a:	a901      	add	r1, sp, #4
 8003b6c:	f7ff fcab 	bl	80034c6 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8003b70:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003b74:	f886 7d60 	strb.w	r7, [r6, #3424]	; 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8003b78:	f886 9d61 	strb.w	r9, [r6, #3425]	; 0xd61
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003b7c:	2105      	movs	r1, #5
 8003b7e:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003b82:	4642      	mov	r2, r8
 8003b84:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8003b88:	f001 f84a 	bl	8004c20 <osMessagePut>
      break;
 8003b8c:	e7c5      	b.n	8003b1a <USBH_PTP_GetStorageInfo+0x24>
      status = USBH_PTP_Process(phost);
 8003b8e:	f7ff fce7 	bl	8003560 <USBH_PTP_Process>
      if (status == USBH_OK)
 8003b92:	4605      	mov	r5, r0
 8003b94:	2800      	cmp	r0, #0
 8003b96:	d1c0      	bne.n	8003b1a <USBH_PTP_GetStorageInfo+0x24>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
 8003b98:	4642      	mov	r2, r8
 8003b9a:	4639      	mov	r1, r7
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	f7ff fabc 	bl	800311a <PTP_GetStorageInfo>
 8003ba2:	e7ba      	b.n	8003b1a <USBH_PTP_GetStorageInfo+0x24>

08003ba4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8003ba4:	4684      	mov	ip, r0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e006      	b.n	8003bb8 <DeInitStateMachine+0x14>
  {
    phost->Pipes[i] = 0U;
 8003baa:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8003bae:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	2b0e      	cmp	r3, #14
 8003bba:	d9f6      	bls.n	8003baa <DeInitStateMachine+0x6>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e005      	b.n	8003bcc <DeInitStateMachine+0x28>
  {
    phost->device.Data[i] = 0U;
 8003bc0:	eb0c 0203 	add.w	r2, ip, r3
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	f882 111c 	strb.w	r1, [r2, #284]	; 0x11c
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd0:	d3f6      	bcc.n	8003bc0 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f88c 0000 	strb.w	r0, [ip]
  phost->EnumState = ENUM_IDLE;
 8003bd8:	f88c 0001 	strb.w	r0, [ip, #1]
  phost->RequestState = CMD_SEND;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f88c 3002 	strb.w	r3, [ip, #2]
  phost->Timer = 0U;
 8003be2:	f8cc 03c4 	str.w	r0, [ip, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8003be6:	f88c 3018 	strb.w	r3, [ip, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8003bea:	2240      	movs	r2, #64	; 0x40
 8003bec:	f88c 2006 	strb.w	r2, [ip, #6]
  phost->Control.errorcount = 0U;
 8003bf0:	f88c 0019 	strb.w	r0, [ip, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003bf4:	f88c 031c 	strb.w	r0, [ip, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8003bf8:	f88c 331d 	strb.w	r3, [ip, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8003bfc:	f88c 031f 	strb.w	r0, [ip, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8003c00:	f88c 031e 	strb.w	r0, [ip, #798]	; 0x31e

  return USBH_OK;
}
 8003c04:	4770      	bx	lr

08003c06 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8003c06:	b508      	push	{r3, lr}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003c08:	7803      	ldrb	r3, [r0, #0]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b0b      	cmp	r3, #11
 8003c0e:	d000      	beq.n	8003c12 <USBH_HandleSof+0xc>
  {
    phost->pActiveClass->SOFProcess(phost);
  }
}
 8003c10:	bd08      	pop	{r3, pc}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003c12:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0fa      	beq.n	8003c10 <USBH_HandleSof+0xa>
    phost->pActiveClass->SOFProcess(phost);
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	4798      	blx	r3
}
 8003c1e:	e7f7      	b.n	8003c10 <USBH_HandleSof+0xa>

08003c20 <USBH_HandleEnum>:
{
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	4604      	mov	r4, r0
  switch (phost->EnumState)
 8003c26:	7845      	ldrb	r5, [r0, #1]
 8003c28:	2d07      	cmp	r5, #7
 8003c2a:	f200 8154 	bhi.w	8003ed6 <USBH_HandleEnum+0x2b6>
 8003c2e:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003c32:	0008      	.short	0x0008
 8003c34:	00690048 	.word	0x00690048
 8003c38:	00bf009a 	.word	0x00bf009a
 8003c3c:	011600e5 	.word	0x011600e5
 8003c40:	013f      	.short	0x013f
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8003c42:	2108      	movs	r1, #8
 8003c44:	f000 fe5a 	bl	80048fc <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8003c48:	b118      	cbz	r0, 8003c52 <USBH_HandleEnum+0x32>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003c4a:	2803      	cmp	r0, #3
 8003c4c:	d021      	beq.n	8003c92 <USBH_HandleEnum+0x72>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003c4e:	2501      	movs	r5, #1
 8003c50:	e131      	b.n	8003eb6 <USBH_HandleEnum+0x296>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003c52:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 8003c56:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003c58:	2501      	movs	r5, #1
 8003c5a:	7065      	strb	r5, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8003c5c:	9302      	str	r3, [sp, #8]
 8003c5e:	2600      	movs	r6, #0
 8003c60:	9601      	str	r6, [sp, #4]
 8003c62:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003c6c:	2280      	movs	r2, #128	; 0x80
 8003c6e:	7921      	ldrb	r1, [r4, #4]
 8003c70:	4620      	mov	r0, r4
 8003c72:	f000 ff40 	bl	8004af6 <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8003c76:	79a3      	ldrb	r3, [r4, #6]
 8003c78:	9302      	str	r3, [sp, #8]
 8003c7a:	9601      	str	r6, [sp, #4]
 8003c7c:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003c86:	4632      	mov	r2, r6
 8003c88:	7961      	ldrb	r1, [r4, #5]
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	f000 ff33 	bl	8004af6 <USBH_OpenPipe>
 8003c90:	e111      	b.n	8003eb6 <USBH_HandleEnum+0x296>
        phost->device.EnumCnt++;
 8003c92:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003c96:	3301      	adds	r3, #1
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d903      	bls.n	8003caa <USBH_HandleEnum+0x8a>
          phost->gState = HOST_ABORT_STATE;
 8003ca2:	230d      	movs	r3, #13
 8003ca4:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003ca6:	2501      	movs	r5, #1
 8003ca8:	e105      	b.n	8003eb6 <USBH_HandleEnum+0x296>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8003caa:	7961      	ldrb	r1, [r4, #5]
 8003cac:	4620      	mov	r0, r4
 8003cae:	f000 ff4a 	bl	8004b46 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8003cb2:	7921      	ldrb	r1, [r4, #4]
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f000 ff46 	bl	8004b46 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003cbe:	2501      	movs	r5, #1
 8003cc0:	e0f9      	b.n	8003eb6 <USBH_HandleEnum+0x296>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8003cc2:	2112      	movs	r1, #18
 8003cc4:	f000 fe1a 	bl	80048fc <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8003cc8:	b910      	cbnz	r0, 8003cd0 <USBH_HandleEnum+0xb0>
        phost->EnumState = ENUM_SET_ADDR;
 8003cca:	2302      	movs	r3, #2
 8003ccc:	7063      	strb	r3, [r4, #1]
 8003cce:	e0f2      	b.n	8003eb6 <USBH_HandleEnum+0x296>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003cd0:	2803      	cmp	r0, #3
 8003cd2:	f040 80f0 	bne.w	8003eb6 <USBH_HandleEnum+0x296>
        phost->device.EnumCnt++;
 8003cd6:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003cda:	3301      	adds	r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d902      	bls.n	8003cec <USBH_HandleEnum+0xcc>
          phost->gState = HOST_ABORT_STATE;
 8003ce6:	230d      	movs	r3, #13
 8003ce8:	7023      	strb	r3, [r4, #0]
 8003cea:	e0e4      	b.n	8003eb6 <USBH_HandleEnum+0x296>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8003cec:	7961      	ldrb	r1, [r4, #5]
 8003cee:	4620      	mov	r0, r4
 8003cf0:	f000 ff29 	bl	8004b46 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8003cf4:	7921      	ldrb	r1, [r4, #4]
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	f000 ff25 	bl	8004b46 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8003d00:	7023      	strb	r3, [r4, #0]
 8003d02:	e0d8      	b.n	8003eb6 <USBH_HandleEnum+0x296>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8003d04:	2101      	movs	r1, #1
 8003d06:	f000 fe43 	bl	8004990 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 8003d0a:	b118      	cbz	r0, 8003d14 <USBH_HandleEnum+0xf4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003d0c:	2803      	cmp	r0, #3
 8003d0e:	d024      	beq.n	8003d5a <USBH_HandleEnum+0x13a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003d10:	2501      	movs	r5, #1
 8003d12:	e0d0      	b.n	8003eb6 <USBH_HandleEnum+0x296>
        USBH_Delay(2U);
 8003d14:	2002      	movs	r0, #2
 8003d16:	f002 fcae 	bl	8006676 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8003d1a:	2501      	movs	r5, #1
 8003d1c:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        phost->EnumState = ENUM_GET_CFG_DESC;
 8003d20:	2303      	movs	r3, #3
 8003d22:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8003d24:	79a3      	ldrb	r3, [r4, #6]
 8003d26:	9302      	str	r3, [sp, #8]
 8003d28:	2600      	movs	r6, #0
 8003d2a:	9601      	str	r6, [sp, #4]
 8003d2c:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	462b      	mov	r3, r5
 8003d34:	2280      	movs	r2, #128	; 0x80
 8003d36:	7921      	ldrb	r1, [r4, #4]
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f000 fedc 	bl	8004af6 <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8003d3e:	79a3      	ldrb	r3, [r4, #6]
 8003d40:	9302      	str	r3, [sp, #8]
 8003d42:	9601      	str	r6, [sp, #4]
 8003d44:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003d4e:	4632      	mov	r2, r6
 8003d50:	7961      	ldrb	r1, [r4, #5]
 8003d52:	4620      	mov	r0, r4
 8003d54:	f000 fecf 	bl	8004af6 <USBH_OpenPipe>
 8003d58:	e0ad      	b.n	8003eb6 <USBH_HandleEnum+0x296>
        phost->gState = HOST_ABORT_STATE;
 8003d5a:	230d      	movs	r3, #13
 8003d5c:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003d62:	2501      	movs	r5, #1
 8003d64:	e0a7      	b.n	8003eb6 <USBH_HandleEnum+0x296>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8003d66:	2109      	movs	r1, #9
 8003d68:	f000 fde1 	bl	800492e <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8003d6c:	b918      	cbnz	r0, 8003d76 <USBH_HandleEnum+0x156>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8003d6e:	2304      	movs	r3, #4
 8003d70:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003d72:	2501      	movs	r5, #1
 8003d74:	e09f      	b.n	8003eb6 <USBH_HandleEnum+0x296>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003d76:	2803      	cmp	r0, #3
 8003d78:	d001      	beq.n	8003d7e <USBH_HandleEnum+0x15e>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003d7a:	2501      	movs	r5, #1
 8003d7c:	e09b      	b.n	8003eb6 <USBH_HandleEnum+0x296>
        phost->device.EnumCnt++;
 8003d7e:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003d82:	3301      	adds	r3, #1
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d903      	bls.n	8003d96 <USBH_HandleEnum+0x176>
          phost->gState = HOST_ABORT_STATE;
 8003d8e:	230d      	movs	r3, #13
 8003d90:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003d92:	2501      	movs	r5, #1
 8003d94:	e08f      	b.n	8003eb6 <USBH_HandleEnum+0x296>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8003d96:	7961      	ldrb	r1, [r4, #5]
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f000 fed4 	bl	8004b46 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8003d9e:	7921      	ldrb	r1, [r4, #4]
 8003da0:	4620      	mov	r0, r4
 8003da2:	f000 fed0 	bl	8004b46 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8003daa:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003dac:	2501      	movs	r5, #1
 8003dae:	e082      	b.n	8003eb6 <USBH_HandleEnum+0x296>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8003db0:	f8b0 133a 	ldrh.w	r1, [r0, #826]	; 0x33a
 8003db4:	f000 fdbb 	bl	800492e <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8003db8:	b918      	cbnz	r0, 8003dc2 <USBH_HandleEnum+0x1a2>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8003dba:	2305      	movs	r3, #5
 8003dbc:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003dbe:	2501      	movs	r5, #1
 8003dc0:	e079      	b.n	8003eb6 <USBH_HandleEnum+0x296>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003dc2:	2803      	cmp	r0, #3
 8003dc4:	d001      	beq.n	8003dca <USBH_HandleEnum+0x1aa>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003dc6:	2501      	movs	r5, #1
 8003dc8:	e075      	b.n	8003eb6 <USBH_HandleEnum+0x296>
        phost->device.EnumCnt++;
 8003dca:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003dce:	3301      	adds	r3, #1
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d903      	bls.n	8003de2 <USBH_HandleEnum+0x1c2>
          phost->gState = HOST_ABORT_STATE;
 8003dda:	230d      	movs	r3, #13
 8003ddc:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003dde:	2501      	movs	r5, #1
 8003de0:	e069      	b.n	8003eb6 <USBH_HandleEnum+0x296>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8003de2:	7961      	ldrb	r1, [r4, #5]
 8003de4:	4620      	mov	r0, r4
 8003de6:	f000 feae 	bl	8004b46 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8003dea:	7921      	ldrb	r1, [r4, #4]
 8003dec:	4620      	mov	r0, r4
 8003dee:	f000 feaa 	bl	8004b46 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8003df6:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003df8:	2501      	movs	r5, #1
 8003dfa:	e05c      	b.n	8003eb6 <USBH_HandleEnum+0x296>
      if (phost->device.DevDesc.iManufacturer != 0U)
 8003dfc:	f890 1334 	ldrb.w	r1, [r0, #820]	; 0x334
 8003e00:	b309      	cbz	r1, 8003e46 <USBH_HandleEnum+0x226>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8003e02:	23ff      	movs	r3, #255	; 0xff
 8003e04:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8003e08:	f000 fdaa 	bl	8004960 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8003e0c:	b118      	cbz	r0, 8003e16 <USBH_HandleEnum+0x1f6>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003e0e:	2803      	cmp	r0, #3
 8003e10:	d00d      	beq.n	8003e2e <USBH_HandleEnum+0x20e>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e12:	2501      	movs	r5, #1
 8003e14:	e04f      	b.n	8003eb6 <USBH_HandleEnum+0x296>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003e16:	2306      	movs	r3, #6
 8003e18:	7063      	strb	r3, [r4, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003e1a:	2105      	movs	r1, #5
 8003e1c:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8003e26:	f000 fefb 	bl	8004c20 <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e2a:	2501      	movs	r5, #1
 8003e2c:	e043      	b.n	8003eb6 <USBH_HandleEnum+0x296>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003e2e:	2306      	movs	r3, #6
 8003e30:	7063      	strb	r3, [r4, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003e32:	2105      	movs	r1, #5
 8003e34:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8003e3e:	f000 feef 	bl	8004c20 <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e42:	2501      	movs	r5, #1
 8003e44:	e037      	b.n	8003eb6 <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003e46:	2306      	movs	r3, #6
 8003e48:	7043      	strb	r3, [r0, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003e4a:	2105      	movs	r1, #5
 8003e4c:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 8003e56:	f000 fee3 	bl	8004c20 <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e5a:	2501      	movs	r5, #1
 8003e5c:	e02b      	b.n	8003eb6 <USBH_HandleEnum+0x296>
      if (phost->device.DevDesc.iProduct != 0U)
 8003e5e:	f890 1335 	ldrb.w	r1, [r0, #821]	; 0x335
 8003e62:	b1c9      	cbz	r1, 8003e98 <USBH_HandleEnum+0x278>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8003e64:	23ff      	movs	r3, #255	; 0xff
 8003e66:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8003e6a:	f000 fd79 	bl	8004960 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8003e6e:	b918      	cbnz	r0, 8003e78 <USBH_HandleEnum+0x258>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8003e70:	2307      	movs	r3, #7
 8003e72:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e74:	2501      	movs	r5, #1
 8003e76:	e01e      	b.n	8003eb6 <USBH_HandleEnum+0x296>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003e78:	2803      	cmp	r0, #3
 8003e7a:	d001      	beq.n	8003e80 <USBH_HandleEnum+0x260>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e7c:	2501      	movs	r5, #1
 8003e7e:	e01a      	b.n	8003eb6 <USBH_HandleEnum+0x296>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8003e80:	2307      	movs	r3, #7
 8003e82:	7063      	strb	r3, [r4, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003e84:	2105      	movs	r1, #5
 8003e86:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8003e90:	f000 fec6 	bl	8004c20 <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e94:	2501      	movs	r5, #1
 8003e96:	e00e      	b.n	8003eb6 <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8003e98:	2307      	movs	r3, #7
 8003e9a:	7043      	strb	r3, [r0, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003e9c:	2105      	movs	r1, #5
 8003e9e:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 8003ea8:	f000 feba 	bl	8004c20 <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003eac:	2501      	movs	r5, #1
 8003eae:	e002      	b.n	8003eb6 <USBH_HandleEnum+0x296>
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8003eb0:	f890 5336 	ldrb.w	r5, [r0, #822]	; 0x336
 8003eb4:	b915      	cbnz	r5, 8003ebc <USBH_HandleEnum+0x29c>
}
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	b004      	add	sp, #16
 8003eba:	bd70      	pop	{r4, r5, r6, pc}
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8003ebc:	23ff      	movs	r3, #255	; 0xff
 8003ebe:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	f000 fd4c 	bl	8004960 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8003ec8:	4605      	mov	r5, r0
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d0f3      	beq.n	8003eb6 <USBH_HandleEnum+0x296>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003ece:	2803      	cmp	r0, #3
 8003ed0:	d003      	beq.n	8003eda <USBH_HandleEnum+0x2ba>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003ed2:	2501      	movs	r5, #1
 8003ed4:	e7ef      	b.n	8003eb6 <USBH_HandleEnum+0x296>
  switch (phost->EnumState)
 8003ed6:	2501      	movs	r5, #1
 8003ed8:	e7ed      	b.n	8003eb6 <USBH_HandleEnum+0x296>
          Status = USBH_OK;
 8003eda:	2500      	movs	r5, #0
 8003edc:	e7eb      	b.n	8003eb6 <USBH_HandleEnum+0x296>
	...

08003ee0 <USBH_Init>:
  if (phost == NULL)
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	d03c      	beq.n	8003f5e <USBH_Init+0x7e>
{
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	b08c      	sub	sp, #48	; 0x30
 8003ee8:	460e      	mov	r6, r1
 8003eea:	4605      	mov	r5, r0
  phost->id = id;
 8003eec:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->pActiveClass = NULL;
 8003ef0:	2400      	movs	r4, #0
 8003ef2:	f8c0 437c 	str.w	r4, [r0, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8003ef6:	f8c0 4380 	str.w	r4, [r0, #896]	; 0x380
  DeInitStateMachine(phost);
 8003efa:	f7ff fe53 	bl	8003ba4 <DeInitStateMachine>
  phost->device.PortEnabled = 0U;
 8003efe:	f885 4323 	strb.w	r4, [r5, #803]	; 0x323
  phost->device.is_connected = 0U;
 8003f02:	f885 4320 	strb.w	r4, [r5, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8003f06:	f885 4321 	strb.w	r4, [r5, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8003f0a:	f885 4322 	strb.w	r4, [r5, #802]	; 0x322
  if (pUsrFunc != NULL)
 8003f0e:	b10e      	cbz	r6, 8003f14 <USBH_Init+0x34>
    phost->pUser = pUsrFunc;
 8003f10:	f8c5 63d4 	str.w	r6, [r5, #980]	; 0x3d4
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8003f14:	4c13      	ldr	r4, [pc, #76]	; (8003f64 <USBH_Init+0x84>)
 8003f16:	f10d 0c20 	add.w	ip, sp, #32
 8003f1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f1e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8003f22:	2100      	movs	r1, #0
 8003f24:	4660      	mov	r0, ip
 8003f26:	f000 fe66 	bl	8004bf6 <osMessageCreate>
 8003f2a:	f8c5 03d8 	str.w	r0, [r5, #984]	; 0x3d8
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8003f2e:	f10d 0e04 	add.w	lr, sp, #4
 8003f32:	f104 0c10 	add.w	ip, r4, #16
 8003f36:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003f3a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003f3e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003f42:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8003f46:	4629      	mov	r1, r5
 8003f48:	a801      	add	r0, sp, #4
 8003f4a:	f000 fe18 	bl	8004b7e <osThreadCreate>
 8003f4e:	f8c5 03dc 	str.w	r0, [r5, #988]	; 0x3dc
  USBH_LL_Init(phost);
 8003f52:	4628      	mov	r0, r5
 8003f54:	f002 fb26 	bl	80065a4 <USBH_LL_Init>
  return USBH_OK;
 8003f58:	2000      	movs	r0, #0
}
 8003f5a:	b00c      	add	sp, #48	; 0x30
 8003f5c:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8003f5e:	2002      	movs	r0, #2
}
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	08006ae4 	.word	0x08006ae4

08003f68 <USBH_RegisterClass>:
  if (pclass != NULL)
 8003f68:	460a      	mov	r2, r1
 8003f6a:	b151      	cbz	r1, 8003f82 <USBH_RegisterClass+0x1a>
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8003f6c:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8003f70:	b94b      	cbnz	r3, 8003f86 <USBH_RegisterClass+0x1e>
      phost->pClass[phost->ClassNumber++] = pclass;
 8003f72:	1c59      	adds	r1, r3, #1
 8003f74:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
 8003f78:	33de      	adds	r3, #222	; 0xde
 8003f7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      status = USBH_OK;
 8003f7e:	2000      	movs	r0, #0
 8003f80:	4770      	bx	lr
    status = USBH_FAIL;
 8003f82:	2002      	movs	r0, #2
 8003f84:	4770      	bx	lr
      status = USBH_FAIL;
 8003f86:	2002      	movs	r0, #2
}
 8003f88:	4770      	bx	lr

08003f8a <USBH_SelectInterface>:
  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8003f8a:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 8003f8e:	428b      	cmp	r3, r1
 8003f90:	d903      	bls.n	8003f9a <USBH_SelectInterface+0x10>
    phost->device.current_interface = interface;
 8003f92:	f880 1324 	strb.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8003f96:	2000      	movs	r0, #0
 8003f98:	4770      	bx	lr
    status = USBH_FAIL;
 8003f9a:	2002      	movs	r0, #2
}
 8003f9c:	4770      	bx	lr

08003f9e <USBH_FindInterface>:
{
 8003f9e:	b510      	push	{r4, lr}
 8003fa0:	4604      	mov	r4, r0
  uint8_t if_ix = 0U;
 8003fa2:	2000      	movs	r0, #0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003fa4:	e00b      	b.n	8003fbe <USBH_FindInterface+0x20>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8003fa6:	f04f 0c1a 	mov.w	ip, #26
 8003faa:	fb0c 4e0e 	mla	lr, ip, lr, r4
 8003fae:	f89e c349 	ldrb.w	ip, [lr, #841]	; 0x349
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8003fb2:	459c      	cmp	ip, r3
 8003fb4:	d01c      	beq.n	8003ff0 <USBH_FindInterface+0x52>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8003fb6:	2bff      	cmp	r3, #255	; 0xff
 8003fb8:	d01a      	beq.n	8003ff0 <USBH_FindInterface+0x52>
    if_ix++;
 8003fba:	3001      	adds	r0, #1
 8003fbc:	b2c0      	uxtb	r0, r0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003fbe:	2801      	cmp	r0, #1
 8003fc0:	d815      	bhi.n	8003fee <USBH_FindInterface+0x50>
    pif = &pcfg->Itf_Desc[if_ix];
 8003fc2:	4686      	mov	lr, r0
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8003fc4:	f04f 0c1a 	mov.w	ip, #26
 8003fc8:	fb0c 4c00 	mla	ip, ip, r0, r4
 8003fcc:	f89c c347 	ldrb.w	ip, [ip, #839]	; 0x347
 8003fd0:	458c      	cmp	ip, r1
 8003fd2:	d001      	beq.n	8003fd8 <USBH_FindInterface+0x3a>
 8003fd4:	29ff      	cmp	r1, #255	; 0xff
 8003fd6:	d1f0      	bne.n	8003fba <USBH_FindInterface+0x1c>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8003fd8:	f04f 0c1a 	mov.w	ip, #26
 8003fdc:	fb0c 4c0e 	mla	ip, ip, lr, r4
 8003fe0:	f89c c348 	ldrb.w	ip, [ip, #840]	; 0x348
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8003fe4:	4594      	cmp	ip, r2
 8003fe6:	d0de      	beq.n	8003fa6 <USBH_FindInterface+0x8>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8003fe8:	2aff      	cmp	r2, #255	; 0xff
 8003fea:	d1e6      	bne.n	8003fba <USBH_FindInterface+0x1c>
 8003fec:	e7db      	b.n	8003fa6 <USBH_FindInterface+0x8>
  return 0xFFU;
 8003fee:	20ff      	movs	r0, #255	; 0xff
}
 8003ff0:	bd10      	pop	{r4, pc}

08003ff2 <USBH_Start>:
{
 8003ff2:	b510      	push	{r4, lr}
 8003ff4:	4604      	mov	r4, r0
  USBH_LL_Start(phost);
 8003ff6:	f002 fb4c 	bl	8006692 <USBH_LL_Start>
  USBH_LL_DriverVBUS(phost, TRUE);
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f002 fb17 	bl	8006630 <USBH_LL_DriverVBUS>
}
 8004002:	2000      	movs	r0, #0
 8004004:	bd10      	pop	{r4, pc}

08004006 <USBH_Process>:
{
 8004006:	b530      	push	{r4, r5, lr}
 8004008:	b087      	sub	sp, #28
 800400a:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800400c:	2302      	movs	r3, #2
 800400e:	f88d 3017 	strb.w	r3, [sp, #23]
  if (phost->device.is_disconnected == 1U)
 8004012:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d012      	beq.n	8004042 <USBH_Process+0x3c>
  switch (phost->gState)
 800401c:	7823      	ldrb	r3, [r4, #0]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b0b      	cmp	r3, #11
 8004022:	f200 80e3 	bhi.w	80041ec <USBH_Process+0x1e6>
 8004026:	e8df f013 	tbh	[pc, r3, lsl #1]
 800402a:	000f      	.short	0x000f
 800402c:	00550029 	.word	0x00550029
 8004030:	00e10149 	.word	0x00e10149
 8004034:	01200093 	.word	0x01200093
 8004038:	00c100b0 	.word	0x00c100b0
 800403c:	00ed00d2 	.word	0x00ed00d2
 8004040:	0141      	.short	0x0141
    phost->gState = HOST_DEV_DISCONNECTED;
 8004042:	2303      	movs	r3, #3
 8004044:	7003      	strb	r3, [r0, #0]
 8004046:	e7e9      	b.n	800401c <USBH_Process+0x16>
      if (phost->device.is_connected)
 8004048:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80cd 	beq.w	80041ec <USBH_Process+0x1e6>
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8004052:	2501      	movs	r5, #1
 8004054:	7025      	strb	r5, [r4, #0]
        USBH_Delay(200U);
 8004056:	20c8      	movs	r0, #200	; 0xc8
 8004058:	f002 fb0d 	bl	8006676 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800405c:	4620      	mov	r0, r4
 800405e:	f002 fb28 	bl	80066b2 <USBH_LL_ResetPort>
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8004062:	2200      	movs	r2, #0
 8004064:	f884 231c 	strb.w	r2, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 8004068:	f8c4 23c8 	str.w	r2, [r4, #968]	; 0x3c8
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800406c:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004070:	4629      	mov	r1, r5
 8004072:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004076:	f000 fdd3 	bl	8004c20 <osMessagePut>
 800407a:	e0b7      	b.n	80041ec <USBH_Process+0x1e6>
      if (phost->device.PortEnabled == 1U)
 800407c:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
 8004080:	2b01      	cmp	r3, #1
 8004082:	d00f      	beq.n	80040a4 <USBH_Process+0x9e>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8004084:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8004088:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800408c:	d91b      	bls.n	80040c6 <USBH_Process+0xc0>
          phost->device.RstCnt++;
 800408e:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 8004092:	3301      	adds	r3, #1
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800409a:	2b03      	cmp	r3, #3
 800409c:	d910      	bls.n	80040c0 <USBH_Process+0xba>
            phost->gState = HOST_ABORT_STATE;
 800409e:	230d      	movs	r3, #13
 80040a0:	7023      	strb	r3, [r4, #0]
 80040a2:	e004      	b.n	80040ae <USBH_Process+0xa8>
        phost->device.RstCnt = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80040aa:	2302      	movs	r3, #2
 80040ac:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80040ae:	2101      	movs	r1, #1
 80040b0:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80040b4:	2200      	movs	r2, #0
 80040b6:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80040ba:	f000 fdb1 	bl	8004c20 <osMessagePut>
      break;
 80040be:	e095      	b.n	80041ec <USBH_Process+0x1e6>
            phost->gState = HOST_IDLE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	7023      	strb	r3, [r4, #0]
 80040c4:	e7f3      	b.n	80040ae <USBH_Process+0xa8>
          phost->Timeout += 10U;
 80040c6:	330a      	adds	r3, #10
 80040c8:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
          USBH_Delay(10U);
 80040cc:	200a      	movs	r0, #10
 80040ce:	f002 fad2 	bl	8006676 <USBH_Delay>
 80040d2:	e7ec      	b.n	80040ae <USBH_Process+0xa8>
      if (phost->pUser != NULL)
 80040d4:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80040d8:	b113      	cbz	r3, 80040e0 <USBH_Process+0xda>
        phost->pUser(phost, HOST_USER_CONNECTION);
 80040da:	2104      	movs	r1, #4
 80040dc:	4620      	mov	r0, r4
 80040de:	4798      	blx	r3
      USBH_Delay(100U);
 80040e0:	2064      	movs	r0, #100	; 0x64
 80040e2:	f002 fac8 	bl	8006676 <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
 80040e6:	4620      	mov	r0, r4
 80040e8:	f002 fa86 	bl	80065f8 <USBH_LL_GetSpeed>
 80040ec:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
      phost->gState = HOST_ENUMERATION;
 80040f0:	2305      	movs	r3, #5
 80040f2:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80040f4:	2100      	movs	r1, #0
 80040f6:	4620      	mov	r0, r4
 80040f8:	f000 fd12 	bl	8004b20 <USBH_AllocPipe>
 80040fc:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80040fe:	2180      	movs	r1, #128	; 0x80
 8004100:	4620      	mov	r0, r4
 8004102:	f000 fd0d 	bl	8004b20 <USBH_AllocPipe>
 8004106:	4601      	mov	r1, r0
 8004108:	7120      	strb	r0, [r4, #4]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800410a:	79a3      	ldrb	r3, [r4, #6]
 800410c:	9302      	str	r3, [sp, #8]
 800410e:	2500      	movs	r5, #0
 8004110:	9501      	str	r5, [sp, #4]
 8004112:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800411c:	2280      	movs	r2, #128	; 0x80
 800411e:	4620      	mov	r0, r4
 8004120:	f000 fce9 	bl	8004af6 <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004124:	79a3      	ldrb	r3, [r4, #6]
 8004126:	9302      	str	r3, [sp, #8]
 8004128:	9501      	str	r5, [sp, #4]
 800412a:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8004134:	462a      	mov	r2, r5
 8004136:	7961      	ldrb	r1, [r4, #5]
 8004138:	4620      	mov	r0, r4
 800413a:	f000 fcdc 	bl	8004af6 <USBH_OpenPipe>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800413e:	2101      	movs	r1, #1
 8004140:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004144:	462a      	mov	r2, r5
 8004146:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800414a:	f000 fd69 	bl	8004c20 <osMessagePut>
      break;
 800414e:	e04d      	b.n	80041ec <USBH_Process+0x1e6>
      status = USBH_HandleEnum(phost);
 8004150:	4620      	mov	r0, r4
 8004152:	f7ff fd65 	bl	8003c20 <USBH_HandleEnum>
 8004156:	f88d 0017 	strb.w	r0, [sp, #23]
      if (status == USBH_OK)
 800415a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d144      	bne.n	80041ec <USBH_Process+0x1e6>
        phost->device.current_interface = 0U;
 8004162:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8004166:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
 800416a:	2b01      	cmp	r3, #1
 800416c:	d00a      	beq.n	8004184 <USBH_Process+0x17e>
          phost->gState = HOST_INPUT;
 800416e:	2307      	movs	r3, #7
 8004170:	7023      	strb	r3, [r4, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8004172:	2105      	movs	r1, #5
 8004174:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004178:	2200      	movs	r2, #0
 800417a:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800417e:	f000 fd4f 	bl	8004c20 <osMessagePut>
 8004182:	e033      	b.n	80041ec <USBH_Process+0x1e6>
          phost->gState = HOST_SET_CONFIGURATION;
 8004184:	2308      	movs	r3, #8
 8004186:	7023      	strb	r3, [r4, #0]
 8004188:	e7f3      	b.n	8004172 <USBH_Process+0x16c>
      if (phost->pUser != NULL)
 800418a:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 800418e:	b36b      	cbz	r3, 80041ec <USBH_Process+0x1e6>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8004190:	2101      	movs	r1, #1
 8004192:	4620      	mov	r0, r4
 8004194:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8004196:	2308      	movs	r3, #8
 8004198:	7023      	strb	r3, [r4, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800419a:	2105      	movs	r1, #5
 800419c:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80041a6:	f000 fd3b 	bl	8004c20 <osMessagePut>
 80041aa:	e01f      	b.n	80041ec <USBH_Process+0x1e6>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80041ac:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
 80041b0:	4620      	mov	r0, r4
 80041b2:	f000 fbfe 	bl	80049b2 <USBH_SetCfg>
 80041b6:	b908      	cbnz	r0, 80041bc <USBH_Process+0x1b6>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80041b8:	2309      	movs	r3, #9
 80041ba:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80041bc:	2101      	movs	r1, #1
 80041be:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80041c8:	f000 fd2a 	bl	8004c20 <osMessagePut>
      break;
 80041cc:	e00e      	b.n	80041ec <USBH_Process+0x1e6>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80041ce:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
 80041d2:	f013 0f20 	tst.w	r3, #32
 80041d6:	d10c      	bne.n	80041f2 <USBH_Process+0x1ec>
        phost->gState = HOST_CHECK_CLASS;
 80041d8:	230a      	movs	r3, #10
 80041da:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80041dc:	2101      	movs	r1, #1
 80041de:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80041e8:	f000 fd1a 	bl	8004c20 <osMessagePut>
}
 80041ec:	2000      	movs	r0, #0
 80041ee:	b007      	add	sp, #28
 80041f0:	bd30      	pop	{r4, r5, pc}
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80041f2:	2101      	movs	r1, #1
 80041f4:	4620      	mov	r0, r4
 80041f6:	f000 fbed 	bl	80049d4 <USBH_SetFeature>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d1ee      	bne.n	80041dc <USBH_Process+0x1d6>
          phost->gState = HOST_CHECK_CLASS;
 80041fe:	230a      	movs	r3, #10
 8004200:	7023      	strb	r3, [r4, #0]
 8004202:	e7eb      	b.n	80041dc <USBH_Process+0x1d6>
      if (phost->ClassNumber == 0U)
 8004204:	f8d4 3380 	ldr.w	r3, [r4, #896]	; 0x380
 8004208:	b18b      	cbz	r3, 800422e <USBH_Process+0x228>
        phost->pActiveClass = NULL;
 800420a:	2300      	movs	r3, #0
 800420c:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004210:	b1b3      	cbz	r3, 8004240 <USBH_Process+0x23a>
        if (phost->pActiveClass != NULL)
 8004212:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8004216:	b32b      	cbz	r3, 8004264 <USBH_Process+0x25e>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	4620      	mov	r0, r4
 800421c:	4798      	blx	r3
 800421e:	b9f0      	cbnz	r0, 800425e <USBH_Process+0x258>
            phost->gState = HOST_CLASS_REQUEST;
 8004220:	2306      	movs	r3, #6
 8004222:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8004224:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8004228:	2103      	movs	r1, #3
 800422a:	4620      	mov	r0, r4
 800422c:	4798      	blx	r3
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800422e:	2105      	movs	r1, #5
 8004230:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004234:	2200      	movs	r2, #0
 8004236:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800423a:	f000 fcf1 	bl	8004c20 <osMessagePut>
      break;
 800423e:	e7d5      	b.n	80041ec <USBH_Process+0x1e6>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004240:	f103 02de 	add.w	r2, r3, #222	; 0xde
 8004244:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004248:	7910      	ldrb	r0, [r2, #4]
 800424a:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
 800424e:	4288      	cmp	r0, r1
 8004250:	d002      	beq.n	8004258 <USBH_Process+0x252>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004252:	3301      	adds	r3, #1
 8004254:	b2db      	uxtb	r3, r3
 8004256:	e7db      	b.n	8004210 <USBH_Process+0x20a>
            phost->pActiveClass = phost->pClass[idx];
 8004258:	f8c4 237c 	str.w	r2, [r4, #892]	; 0x37c
            break;
 800425c:	e7d9      	b.n	8004212 <USBH_Process+0x20c>
            phost->gState = HOST_ABORT_STATE;
 800425e:	230d      	movs	r3, #13
 8004260:	7023      	strb	r3, [r4, #0]
 8004262:	e7e4      	b.n	800422e <USBH_Process+0x228>
          phost->gState = HOST_ABORT_STATE;
 8004264:	230d      	movs	r3, #13
 8004266:	7023      	strb	r3, [r4, #0]
 8004268:	e7e1      	b.n	800422e <USBH_Process+0x228>
      if (phost->pActiveClass != NULL)
 800426a:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800426e:	b1d3      	cbz	r3, 80042a6 <USBH_Process+0x2a0>
        status = phost->pActiveClass->Requests(phost);
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	4620      	mov	r0, r4
 8004274:	4798      	blx	r3
 8004276:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 800427a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800427e:	b953      	cbnz	r3, 8004296 <USBH_Process+0x290>
          phost->gState = HOST_CLASS;
 8004280:	230b      	movs	r3, #11
 8004282:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8004284:	2105      	movs	r1, #5
 8004286:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800428a:	2200      	movs	r2, #0
 800428c:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004290:	f000 fcc6 	bl	8004c20 <osMessagePut>
      break;
 8004294:	e7aa      	b.n	80041ec <USBH_Process+0x1e6>
        else if (status == USBH_FAIL)
 8004296:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d1f1      	bne.n	8004284 <USBH_Process+0x27e>
          phost->gState = HOST_ABORT_STATE;
 80042a0:	230d      	movs	r3, #13
 80042a2:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 80042a4:	e7ee      	b.n	8004284 <USBH_Process+0x27e>
        phost->gState = HOST_ABORT_STATE;
 80042a6:	230d      	movs	r3, #13
 80042a8:	7023      	strb	r3, [r4, #0]
 80042aa:	e7eb      	b.n	8004284 <USBH_Process+0x27e>
      if (phost->pActiveClass != NULL)
 80042ac:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d09b      	beq.n	80041ec <USBH_Process+0x1e6>
        phost->pActiveClass->BgndProcess(phost);
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	4620      	mov	r0, r4
 80042b8:	4798      	blx	r3
 80042ba:	e797      	b.n	80041ec <USBH_Process+0x1e6>
      phost->device.is_disconnected = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
      DeInitStateMachine(phost);
 80042c2:	4620      	mov	r0, r4
 80042c4:	f7ff fc6e 	bl	8003ba4 <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 80042c8:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80042cc:	b12b      	cbz	r3, 80042da <USBH_Process+0x2d4>
        phost->pActiveClass->DeInit(phost);
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4620      	mov	r0, r4
 80042d2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 80042da:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80042de:	b113      	cbz	r3, 80042e6 <USBH_Process+0x2e0>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80042e0:	2105      	movs	r1, #5
 80042e2:	4620      	mov	r0, r4
 80042e4:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 80042e6:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d00b      	beq.n	8004308 <USBH_Process+0x302>
        USBH_LL_Start(phost);
 80042f0:	4620      	mov	r0, r4
 80042f2:	f002 f9ce 	bl	8006692 <USBH_LL_Start>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80042f6:	2101      	movs	r1, #1
 80042f8:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004302:	f000 fc8d 	bl	8004c20 <osMessagePut>
      break;
 8004306:	e771      	b.n	80041ec <USBH_Process+0x1e6>
        phost->device.is_ReEnumerated = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        USBH_Start(phost);
 800430e:	4620      	mov	r0, r4
 8004310:	f7ff fe6f 	bl	8003ff2 <USBH_Start>
 8004314:	e7ef      	b.n	80042f6 <USBH_Process+0x2f0>

08004316 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8004316:	b500      	push	{lr}
 8004318:	b085      	sub	sp, #20
 800431a:	4604      	mov	r4, r0
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800431c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004320:	f8d4 13d8 	ldr.w	r1, [r4, #984]	; 0x3d8
 8004324:	a801      	add	r0, sp, #4
 8004326:	f000 fcae 	bl	8004c86 <osMessageGet>
    if (event.status == osEventMessage)
 800432a:	9b01      	ldr	r3, [sp, #4]
 800432c:	2b10      	cmp	r3, #16
 800432e:	d1f5      	bne.n	800431c <USBH_Process_OS+0x6>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8004330:	4620      	mov	r0, r4
 8004332:	f7ff fe68 	bl	8004006 <USBH_Process>
 8004336:	e7f1      	b.n	800431c <USBH_Process_OS+0x6>

08004338 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8004338:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 800433c:	4770      	bx	lr

0800433e <USBH_LL_IncTimer>:
{
 800433e:	b508      	push	{r3, lr}
  phost->Timer++;
 8004340:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
 8004344:	3201      	adds	r2, #1
 8004346:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800434a:	f7ff fc5c 	bl	8003c06 <USBH_HandleSof>
}
 800434e:	bd08      	pop	{r3, pc}

08004350 <USBH_LL_PortEnabled>:
{
 8004350:	b508      	push	{r3, lr}
  phost->device.PortEnabled = 1U;
 8004352:	2101      	movs	r1, #1
 8004354:	f880 1323 	strb.w	r1, [r0, #803]	; 0x323
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004358:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800435c:	2200      	movs	r2, #0
 800435e:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 8004362:	f000 fc5d 	bl	8004c20 <osMessagePut>
}
 8004366:	bd08      	pop	{r3, pc}

08004368 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
}
 800436e:	4770      	bx	lr

08004370 <USBH_LL_Connect>:
{
 8004370:	b510      	push	{r4, lr}
  phost->device.is_connected = 1U;
 8004372:	2101      	movs	r1, #1
 8004374:	f880 1320 	strb.w	r1, [r0, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004378:	2400      	movs	r4, #0
 800437a:	f880 4321 	strb.w	r4, [r0, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800437e:	f880 4322 	strb.w	r4, [r0, #802]	; 0x322
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004382:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004386:	4622      	mov	r2, r4
 8004388:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 800438c:	f000 fc48 	bl	8004c20 <osMessagePut>
}
 8004390:	4620      	mov	r0, r4
 8004392:	bd10      	pop	{r4, pc}

08004394 <USBH_LL_Disconnect>:
{
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
 8004398:	2601      	movs	r6, #1
 800439a:	f880 6321 	strb.w	r6, [r0, #801]	; 0x321
  phost->device.is_connected = 0U;
 800439e:	2500      	movs	r5, #0
 80043a0:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80043a4:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323
  USBH_LL_Stop(phost);
 80043a8:	f002 f97b 	bl	80066a2 <USBH_LL_Stop>
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80043ac:	7921      	ldrb	r1, [r4, #4]
 80043ae:	4620      	mov	r0, r4
 80043b0:	f000 fbc9 	bl	8004b46 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80043b4:	7961      	ldrb	r1, [r4, #5]
 80043b6:	4620      	mov	r0, r4
 80043b8:	f000 fbc5 	bl	8004b46 <USBH_FreePipe>
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80043bc:	f8c4 63e0 	str.w	r6, [r4, #992]	; 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80043c0:	462a      	mov	r2, r5
 80043c2:	4631      	mov	r1, r6
 80043c4:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80043c8:	f000 fc2a 	bl	8004c20 <osMessagePut>
}
 80043cc:	4628      	mov	r0, r5
 80043ce:	bd70      	pop	{r4, r5, r6, pc}

080043d0 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80043d0:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80043d2:	2101      	movs	r1, #1
 80043d4:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80043d8:	2200      	movs	r2, #0
 80043da:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 80043de:	f000 fc1f 	bl	8004c20 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
}
 80043e2:	2000      	movs	r0, #0
 80043e4:	bd08      	pop	{r3, pc}

080043e6 <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80043e6:	780b      	ldrb	r3, [r1, #0]
 80043e8:	7003      	strb	r3, [r0, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80043ea:	784b      	ldrb	r3, [r1, #1]
 80043ec:	7043      	strb	r3, [r0, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80043ee:	788b      	ldrb	r3, [r1, #2]
 80043f0:	f891 c003 	ldrb.w	ip, [r1, #3]
 80043f4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80043f8:	8043      	strh	r3, [r0, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80043fa:	790b      	ldrb	r3, [r1, #4]
 80043fc:	7103      	strb	r3, [r0, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80043fe:	794b      	ldrb	r3, [r1, #5]
 8004400:	7143      	strb	r3, [r0, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8004402:	798b      	ldrb	r3, [r1, #6]
 8004404:	7183      	strb	r3, [r0, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8004406:	79cb      	ldrb	r3, [r1, #7]
 8004408:	71c3      	strb	r3, [r0, #7]

  if (length > 8U)
 800440a:	2a08      	cmp	r2, #8
 800440c:	d916      	bls.n	800443c <USBH_ParseDevDesc+0x56>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800440e:	7a0b      	ldrb	r3, [r1, #8]
 8004410:	7a4a      	ldrb	r2, [r1, #9]
 8004412:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004416:	8103      	strh	r3, [r0, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8004418:	7a8b      	ldrb	r3, [r1, #10]
 800441a:	7aca      	ldrb	r2, [r1, #11]
 800441c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004420:	8143      	strh	r3, [r0, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8004422:	7b0b      	ldrb	r3, [r1, #12]
 8004424:	7b4a      	ldrb	r2, [r1, #13]
 8004426:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800442a:	8183      	strh	r3, [r0, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800442c:	7b8b      	ldrb	r3, [r1, #14]
 800442e:	7383      	strb	r3, [r0, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8004430:	7bcb      	ldrb	r3, [r1, #15]
 8004432:	73c3      	strb	r3, [r0, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8004434:	7c0b      	ldrb	r3, [r1, #16]
 8004436:	7403      	strb	r3, [r0, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8004438:	7c4b      	ldrb	r3, [r1, #17]
 800443a:	7443      	strb	r3, [r0, #17]
  }
}
 800443c:	4770      	bx	lr

0800443e <USBH_ParseInterfaceDesc>:
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800443e:	780b      	ldrb	r3, [r1, #0]
 8004440:	7003      	strb	r3, [r0, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8004442:	784b      	ldrb	r3, [r1, #1]
 8004444:	7043      	strb	r3, [r0, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8004446:	788b      	ldrb	r3, [r1, #2]
 8004448:	7083      	strb	r3, [r0, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800444a:	78cb      	ldrb	r3, [r1, #3]
 800444c:	70c3      	strb	r3, [r0, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800444e:	790b      	ldrb	r3, [r1, #4]
 8004450:	7103      	strb	r3, [r0, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8004452:	794b      	ldrb	r3, [r1, #5]
 8004454:	7143      	strb	r3, [r0, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8004456:	798b      	ldrb	r3, [r1, #6]
 8004458:	7183      	strb	r3, [r0, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800445a:	79cb      	ldrb	r3, [r1, #7]
 800445c:	71c3      	strb	r3, [r0, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800445e:	7a0b      	ldrb	r3, [r1, #8]
 8004460:	7203      	strb	r3, [r0, #8]
}
 8004462:	4770      	bx	lr

08004464 <USBH_ParseEPDesc>:
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8004464:	780b      	ldrb	r3, [r1, #0]
 8004466:	7003      	strb	r3, [r0, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8004468:	784b      	ldrb	r3, [r1, #1]
 800446a:	7043      	strb	r3, [r0, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800446c:	788b      	ldrb	r3, [r1, #2]
 800446e:	7083      	strb	r3, [r0, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8004470:	78cb      	ldrb	r3, [r1, #3]
 8004472:	70c3      	strb	r3, [r0, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8004474:	790b      	ldrb	r3, [r1, #4]
 8004476:	794a      	ldrb	r2, [r1, #5]
 8004478:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800447c:	8083      	strh	r3, [r0, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800447e:	798b      	ldrb	r3, [r1, #6]
 8004480:	7183      	strb	r3, [r0, #6]
}
 8004482:	4770      	bx	lr

08004484 <USBH_ParseStringDesc>:
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8004484:	7843      	ldrb	r3, [r0, #1]
 8004486:	2b03      	cmp	r3, #3
 8004488:	d000      	beq.n	800448c <USBH_ParseStringDesc+0x8>
      *pdest =  psrc[idx];
      pdest++;
    }
    *pdest = 0U; /* mark end of string */
  }
}
 800448a:	4770      	bx	lr
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800448c:	7803      	ldrb	r3, [r0, #0]
 800448e:	3b02      	subs	r3, #2
 8004490:	429a      	cmp	r2, r3
 8004492:	bf28      	it	cs
 8004494:	461a      	movcs	r2, r3
 8004496:	b292      	uxth	r2, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8004498:	2300      	movs	r3, #0
 800449a:	e007      	b.n	80044ac <USBH_ParseStringDesc+0x28>
      *pdest =  psrc[idx];
 800449c:	eb00 0c03 	add.w	ip, r0, r3
 80044a0:	f89c c002 	ldrb.w	ip, [ip, #2]
 80044a4:	f801 cb01 	strb.w	ip, [r1], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 80044a8:	3302      	adds	r3, #2
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d3f5      	bcc.n	800449c <USBH_ParseStringDesc+0x18>
    *pdest = 0U; /* mark end of string */
 80044b0:	2300      	movs	r3, #0
 80044b2:	700b      	strb	r3, [r1, #0]
}
 80044b4:	e7e9      	b.n	800448a <USBH_ParseStringDesc+0x6>

080044b6 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80044b6:	b530      	push	{r4, r5, lr}
 80044b8:	b083      	sub	sp, #12
 80044ba:	4604      	mov	r4, r0
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 80044bc:	7e05      	ldrb	r5, [r0, #24]
 80044be:	1e6b      	subs	r3, r5, #1
 80044c0:	2b0a      	cmp	r3, #10
 80044c2:	f200 815f 	bhi.w	8004784 <USBH_HandleControl+0x2ce>
 80044c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80044ca:	000b      	.short	0x000b
 80044cc:	004a0015 	.word	0x004a0015
 80044d0:	00830056 	.word	0x00830056
 80044d4:	00cd0090 	.word	0x00cd0090
 80044d8:	010600d9 	.word	0x010600d9
 80044dc:	01420113 	.word	0x01420113
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80044e0:	7942      	ldrb	r2, [r0, #5]
 80044e2:	f100 0110 	add.w	r1, r0, #16
 80044e6:	f000 fa86 	bl	80049f6 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80044ea:	2302      	movs	r3, #2
 80044ec:	7623      	strb	r3, [r4, #24]
    default:
      break;
  }

  return status;
}
 80044ee:	4628      	mov	r0, r5
 80044f0:	b003      	add	sp, #12
 80044f2:	bd30      	pop	{r4, r5, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80044f4:	7941      	ldrb	r1, [r0, #5]
 80044f6:	f002 f895 	bl	8006624 <USBH_LL_GetURBState>
 80044fa:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 80044fc:	2801      	cmp	r0, #1
 80044fe:	d005      	beq.n	800450c <USBH_HandleControl+0x56>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8004500:	2804      	cmp	r0, #4
 8004502:	d020      	beq.n	8004546 <USBH_HandleControl+0x90>
 8004504:	2802      	cmp	r0, #2
 8004506:	d01e      	beq.n	8004546 <USBH_HandleControl+0x90>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004508:	2501      	movs	r5, #1
 800450a:	e7f0      	b.n	80044ee <USBH_HandleControl+0x38>
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800450c:	7c23      	ldrb	r3, [r4, #16]
        if (phost->Control.setup.b.wLength.w != 0U)
 800450e:	8ae2      	ldrh	r2, [r4, #22]
 8004510:	b182      	cbz	r2, 8004534 <USBH_HandleControl+0x7e>
          if (direction == USB_D2H)
 8004512:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004516:	d10a      	bne.n	800452e <USBH_HandleControl+0x78>
            phost->Control.state = CTRL_DATA_OUT;
 8004518:	2305      	movs	r3, #5
 800451a:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800451c:	2103      	movs	r1, #3
 800451e:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004522:	2200      	movs	r2, #0
 8004524:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004528:	f000 fb7a 	bl	8004c20 <osMessagePut>
 800452c:	e7df      	b.n	80044ee <USBH_HandleControl+0x38>
            phost->Control.state = CTRL_DATA_IN;
 800452e:	2303      	movs	r3, #3
 8004530:	7623      	strb	r3, [r4, #24]
 8004532:	e7f3      	b.n	800451c <USBH_HandleControl+0x66>
          if (direction == USB_D2H)
 8004534:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004538:	d102      	bne.n	8004540 <USBH_HandleControl+0x8a>
            phost->Control.state = CTRL_STATUS_IN;
 800453a:	2307      	movs	r3, #7
 800453c:	7623      	strb	r3, [r4, #24]
 800453e:	e7ed      	b.n	800451c <USBH_HandleControl+0x66>
            phost->Control.state = CTRL_STATUS_OUT;
 8004540:	2309      	movs	r3, #9
 8004542:	7623      	strb	r3, [r4, #24]
 8004544:	e7ea      	b.n	800451c <USBH_HandleControl+0x66>
          phost->Control.state = CTRL_ERROR;
 8004546:	230b      	movs	r3, #11
 8004548:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800454a:	2103      	movs	r1, #3
 800454c:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004550:	2200      	movs	r2, #0
 8004552:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004556:	f000 fb63 	bl	8004c20 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 800455a:	2501      	movs	r5, #1
 800455c:	e7c7      	b.n	80044ee <USBH_HandleControl+0x38>
      phost->Control.timer = (uint16_t)phost->Timer;
 800455e:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8004562:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8004564:	7903      	ldrb	r3, [r0, #4]
 8004566:	8982      	ldrh	r2, [r0, #12]
 8004568:	6881      	ldr	r1, [r0, #8]
 800456a:	f000 fa6b 	bl	8004a44 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 800456e:	2304      	movs	r3, #4
 8004570:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004572:	2501      	movs	r5, #1
      break;
 8004574:	e7bb      	b.n	80044ee <USBH_HandleControl+0x38>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8004576:	7901      	ldrb	r1, [r0, #4]
 8004578:	f002 f854 	bl	8006624 <USBH_LL_GetURBState>
 800457c:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800457e:	2801      	cmp	r0, #1
 8004580:	d005      	beq.n	800458e <USBH_HandleControl+0xd8>
      if (URB_Status == USBH_URB_STALL)
 8004582:	2d05      	cmp	r5, #5
 8004584:	d00e      	beq.n	80045a4 <USBH_HandleControl+0xee>
        if (URB_Status == USBH_URB_ERROR)
 8004586:	2d04      	cmp	r5, #4
 8004588:	d016      	beq.n	80045b8 <USBH_HandleControl+0x102>
  USBH_StatusTypeDef status = USBH_BUSY;
 800458a:	2501      	movs	r5, #1
 800458c:	e7af      	b.n	80044ee <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_STATUS_OUT;
 800458e:	2309      	movs	r3, #9
 8004590:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004592:	2103      	movs	r1, #3
 8004594:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004598:	2200      	movs	r2, #0
 800459a:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800459e:	f000 fb3f 	bl	8004c20 <osMessagePut>
 80045a2:	e7ee      	b.n	8004582 <USBH_HandleControl+0xcc>
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80045a4:	2503      	movs	r5, #3
 80045a6:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80045aa:	2200      	movs	r2, #0
 80045ac:	4629      	mov	r1, r5
 80045ae:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80045b2:	f000 fb35 	bl	8004c20 <osMessagePut>
 80045b6:	e79a      	b.n	80044ee <USBH_HandleControl+0x38>
          phost->Control.state = CTRL_ERROR;
 80045b8:	230b      	movs	r3, #11
 80045ba:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80045bc:	2103      	movs	r1, #3
 80045be:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80045c8:	f000 fb2a 	bl	8004c20 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 80045cc:	2501      	movs	r5, #1
 80045ce:	e78e      	b.n	80044ee <USBH_HandleControl+0x38>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80045d0:	2501      	movs	r5, #1
 80045d2:	9500      	str	r5, [sp, #0]
 80045d4:	7943      	ldrb	r3, [r0, #5]
 80045d6:	8982      	ldrh	r2, [r0, #12]
 80045d8:	6881      	ldr	r1, [r0, #8]
 80045da:	f000 fa1d 	bl	8004a18 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80045de:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80045e2:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80045e4:	2306      	movs	r3, #6
 80045e6:	7623      	strb	r3, [r4, #24]
      break;
 80045e8:	e781      	b.n	80044ee <USBH_HandleControl+0x38>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80045ea:	7941      	ldrb	r1, [r0, #5]
 80045ec:	f002 f81a 	bl	8006624 <USBH_LL_GetURBState>
 80045f0:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 80045f2:	2801      	cmp	r0, #1
 80045f4:	d007      	beq.n	8004606 <USBH_HandleControl+0x150>
      else if (URB_Status == USBH_URB_STALL)
 80045f6:	2805      	cmp	r0, #5
 80045f8:	d010      	beq.n	800461c <USBH_HandleControl+0x166>
      else if (URB_Status == USBH_URB_NOTREADY)
 80045fa:	2802      	cmp	r0, #2
 80045fc:	d01a      	beq.n	8004634 <USBH_HandleControl+0x17e>
        if (URB_Status == USBH_URB_ERROR)
 80045fe:	2804      	cmp	r0, #4
 8004600:	d024      	beq.n	800464c <USBH_HandleControl+0x196>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004602:	2501      	movs	r5, #1
 8004604:	e773      	b.n	80044ee <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_STATUS_IN;
 8004606:	2307      	movs	r3, #7
 8004608:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800460a:	2103      	movs	r1, #3
 800460c:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004610:	2200      	movs	r2, #0
 8004612:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004616:	f000 fb03 	bl	8004c20 <osMessagePut>
 800461a:	e768      	b.n	80044ee <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_STALLED;
 800461c:	230c      	movs	r3, #12
 800461e:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004620:	2503      	movs	r5, #3
 8004622:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004626:	2200      	movs	r2, #0
 8004628:	4629      	mov	r1, r5
 800462a:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800462e:	f000 faf7 	bl	8004c20 <osMessagePut>
 8004632:	e75c      	b.n	80044ee <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_DATA_OUT;
 8004634:	2305      	movs	r3, #5
 8004636:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004638:	2103      	movs	r1, #3
 800463a:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800463e:	2200      	movs	r2, #0
 8004640:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004644:	f000 faec 	bl	8004c20 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004648:	2501      	movs	r5, #1
 800464a:	e750      	b.n	80044ee <USBH_HandleControl+0x38>
          phost->Control.state = CTRL_ERROR;
 800464c:	230b      	movs	r3, #11
 800464e:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004650:	2103      	movs	r1, #3
 8004652:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004656:	2200      	movs	r2, #0
 8004658:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800465c:	f000 fae0 	bl	8004c20 <osMessagePut>
          status = USBH_FAIL;
 8004660:	2502      	movs	r5, #2
 8004662:	e744      	b.n	80044ee <USBH_HandleControl+0x38>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8004664:	7903      	ldrb	r3, [r0, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	4611      	mov	r1, r2
 800466a:	f000 f9eb 	bl	8004a44 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800466e:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8004672:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8004674:	2308      	movs	r3, #8
 8004676:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004678:	2501      	movs	r5, #1
      break;
 800467a:	e738      	b.n	80044ee <USBH_HandleControl+0x38>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800467c:	7901      	ldrb	r1, [r0, #4]
 800467e:	f001 ffd1 	bl	8006624 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8004682:	2801      	cmp	r0, #1
 8004684:	d005      	beq.n	8004692 <USBH_HandleControl+0x1dc>
      else if (URB_Status == USBH_URB_ERROR)
 8004686:	2804      	cmp	r0, #4
 8004688:	d00f      	beq.n	80046aa <USBH_HandleControl+0x1f4>
        if (URB_Status == USBH_URB_STALL)
 800468a:	2805      	cmp	r0, #5
 800468c:	d019      	beq.n	80046c2 <USBH_HandleControl+0x20c>
  USBH_StatusTypeDef status = USBH_BUSY;
 800468e:	2501      	movs	r5, #1
 8004690:	e72d      	b.n	80044ee <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_COMPLETE;
 8004692:	230d      	movs	r3, #13
 8004694:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004696:	2103      	movs	r1, #3
 8004698:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800469c:	2200      	movs	r2, #0
 800469e:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80046a2:	f000 fabd 	bl	8004c20 <osMessagePut>
        status = USBH_OK;
 80046a6:	2500      	movs	r5, #0
 80046a8:	e721      	b.n	80044ee <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_ERROR;
 80046aa:	230b      	movs	r3, #11
 80046ac:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80046ae:	2103      	movs	r1, #3
 80046b0:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80046ba:	f000 fab1 	bl	8004c20 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 80046be:	2501      	movs	r5, #1
 80046c0:	e715      	b.n	80044ee <USBH_HandleControl+0x38>
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80046c2:	2503      	movs	r5, #3
 80046c4:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80046c8:	2200      	movs	r2, #0
 80046ca:	4629      	mov	r1, r5
 80046cc:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80046d0:	f000 faa6 	bl	8004c20 <osMessagePut>
 80046d4:	e70b      	b.n	80044ee <USBH_HandleControl+0x38>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80046d6:	2501      	movs	r5, #1
 80046d8:	9500      	str	r5, [sp, #0]
 80046da:	7943      	ldrb	r3, [r0, #5]
 80046dc:	2200      	movs	r2, #0
 80046de:	4611      	mov	r1, r2
 80046e0:	f000 f99a 	bl	8004a18 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80046e4:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80046e8:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80046ea:	230a      	movs	r3, #10
 80046ec:	7623      	strb	r3, [r4, #24]
      break;
 80046ee:	e6fe      	b.n	80044ee <USBH_HandleControl+0x38>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80046f0:	7941      	ldrb	r1, [r0, #5]
 80046f2:	f001 ff97 	bl	8006624 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80046f6:	2801      	cmp	r0, #1
 80046f8:	d005      	beq.n	8004706 <USBH_HandleControl+0x250>
      else if (URB_Status == USBH_URB_NOTREADY)
 80046fa:	2802      	cmp	r0, #2
 80046fc:	d00f      	beq.n	800471e <USBH_HandleControl+0x268>
        if (URB_Status == USBH_URB_ERROR)
 80046fe:	2804      	cmp	r0, #4
 8004700:	d019      	beq.n	8004736 <USBH_HandleControl+0x280>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004702:	2501      	movs	r5, #1
 8004704:	e6f3      	b.n	80044ee <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_COMPLETE;
 8004706:	230d      	movs	r3, #13
 8004708:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800470a:	2103      	movs	r1, #3
 800470c:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004710:	2200      	movs	r2, #0
 8004712:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004716:	f000 fa83 	bl	8004c20 <osMessagePut>
        status = USBH_OK;
 800471a:	2500      	movs	r5, #0
 800471c:	e6e7      	b.n	80044ee <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_STATUS_OUT;
 800471e:	2309      	movs	r3, #9
 8004720:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004722:	2103      	movs	r1, #3
 8004724:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004728:	2200      	movs	r2, #0
 800472a:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800472e:	f000 fa77 	bl	8004c20 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004732:	2501      	movs	r5, #1
 8004734:	e6db      	b.n	80044ee <USBH_HandleControl+0x38>
          phost->Control.state = CTRL_ERROR;
 8004736:	230b      	movs	r3, #11
 8004738:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800473a:	2103      	movs	r1, #3
 800473c:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004740:	2200      	movs	r2, #0
 8004742:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8004746:	f000 fa6b 	bl	8004c20 <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 800474a:	2501      	movs	r5, #1
 800474c:	e6cf      	b.n	80044ee <USBH_HandleControl+0x38>
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800474e:	7e43      	ldrb	r3, [r0, #25]
 8004750:	3301      	adds	r3, #1
 8004752:	b2db      	uxtb	r3, r3
 8004754:	7643      	strb	r3, [r0, #25]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d803      	bhi.n	8004762 <USBH_HandleControl+0x2ac>
        phost->Control.state = CTRL_SETUP;
 800475a:	2501      	movs	r5, #1
 800475c:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 800475e:	7085      	strb	r5, [r0, #2]
 8004760:	e6c5      	b.n	80044ee <USBH_HandleControl+0x38>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8004762:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8004766:	2106      	movs	r1, #6
 8004768:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800476a:	2500      	movs	r5, #0
 800476c:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800476e:	7961      	ldrb	r1, [r4, #5]
 8004770:	4620      	mov	r0, r4
 8004772:	f000 f9e8 	bl	8004b46 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8004776:	7921      	ldrb	r1, [r4, #4]
 8004778:	4620      	mov	r0, r4
 800477a:	f000 f9e4 	bl	8004b46 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800477e:	7025      	strb	r5, [r4, #0]
        status = USBH_FAIL;
 8004780:	2502      	movs	r5, #2
 8004782:	e6b4      	b.n	80044ee <USBH_HandleControl+0x38>
  switch (phost->Control.state)
 8004784:	2501      	movs	r5, #1
 8004786:	e6b2      	b.n	80044ee <USBH_HandleControl+0x38>

08004788 <USBH_GetNextDesc>:
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004788:	7803      	ldrb	r3, [r0, #0]
 800478a:	880a      	ldrh	r2, [r1, #0]
 800478c:	4413      	add	r3, r2
 800478e:	800b      	strh	r3, [r1, #0]
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8004790:	7803      	ldrb	r3, [r0, #0]
}
 8004792:	4418      	add	r0, r3
 8004794:	4770      	bx	lr

08004796 <USBH_ParseCfgDesc>:
{
 8004796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	460c      	mov	r4, r1
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800479e:	780b      	ldrb	r3, [r1, #0]
 80047a0:	7003      	strb	r3, [r0, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80047a2:	784b      	ldrb	r3, [r1, #1]
 80047a4:	7043      	strb	r3, [r0, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80047a6:	788b      	ldrb	r3, [r1, #2]
 80047a8:	78c9      	ldrb	r1, [r1, #3]
 80047aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80047ae:	8043      	strh	r3, [r0, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80047b0:	7923      	ldrb	r3, [r4, #4]
 80047b2:	7103      	strb	r3, [r0, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80047b4:	7963      	ldrb	r3, [r4, #5]
 80047b6:	7143      	strb	r3, [r0, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80047b8:	79a3      	ldrb	r3, [r4, #6]
 80047ba:	7183      	strb	r3, [r0, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80047bc:	79e3      	ldrb	r3, [r4, #7]
 80047be:	71c3      	strb	r3, [r0, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80047c0:	7a23      	ldrb	r3, [r4, #8]
 80047c2:	7203      	strb	r3, [r0, #8]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80047c4:	2a09      	cmp	r2, #9
 80047c6:	d944      	bls.n	8004852 <USBH_ParseCfgDesc+0xbc>
 80047c8:	4605      	mov	r5, r0
    ptr = USB_LEN_CFG_DESC;
 80047ca:	2309      	movs	r3, #9
 80047cc:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t                      if_ix = 0U;
 80047d0:	2600      	movs	r6, #0
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80047d2:	2e01      	cmp	r6, #1
 80047d4:	d83d      	bhi.n	8004852 <USBH_ParseCfgDesc+0xbc>
 80047d6:	886a      	ldrh	r2, [r5, #2]
 80047d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d938      	bls.n	8004852 <USBH_ParseCfgDesc+0xbc>
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80047e0:	f10d 0106 	add.w	r1, sp, #6
 80047e4:	4620      	mov	r0, r4
 80047e6:	f7ff ffcf 	bl	8004788 <USBH_GetNextDesc>
 80047ea:	4604      	mov	r4, r0
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80047ec:	7843      	ldrb	r3, [r0, #1]
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d1ef      	bne.n	80047d2 <USBH_ParseCfgDesc+0x3c>
        pif = &cfg_desc->Itf_Desc[if_ix];
 80047f2:	46b0      	mov	r8, r6
 80047f4:	201a      	movs	r0, #26
 80047f6:	fb06 f000 	mul.w	r0, r6, r0
 80047fa:	3008      	adds	r0, #8
 80047fc:	4428      	add	r0, r5
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80047fe:	4621      	mov	r1, r4
 8004800:	3002      	adds	r0, #2
 8004802:	f7ff fe1c 	bl	800443e <USBH_ParseInterfaceDesc>
        ep_ix = 0U;
 8004806:	2700      	movs	r7, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8004808:	231a      	movs	r3, #26
 800480a:	fb03 5308 	mla	r3, r3, r8, r5
 800480e:	7b9b      	ldrb	r3, [r3, #14]
 8004810:	42bb      	cmp	r3, r7
 8004812:	d91b      	bls.n	800484c <USBH_ParseCfgDesc+0xb6>
 8004814:	886a      	ldrh	r2, [r5, #2]
 8004816:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800481a:	429a      	cmp	r2, r3
 800481c:	d916      	bls.n	800484c <USBH_ParseCfgDesc+0xb6>
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800481e:	f10d 0106 	add.w	r1, sp, #6
 8004822:	4620      	mov	r0, r4
 8004824:	f7ff ffb0 	bl	8004788 <USBH_GetNextDesc>
 8004828:	4604      	mov	r4, r0
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800482a:	7843      	ldrb	r3, [r0, #1]
 800482c:	2b05      	cmp	r3, #5
 800482e:	d1eb      	bne.n	8004808 <USBH_ParseCfgDesc+0x72>
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8004830:	3701      	adds	r7, #1
 8004832:	201a      	movs	r0, #26
 8004834:	fb00 f008 	mul.w	r0, r0, r8
 8004838:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 800483c:	3008      	adds	r0, #8
 800483e:	4428      	add	r0, r5
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8004840:	4621      	mov	r1, r4
 8004842:	3004      	adds	r0, #4
 8004844:	f7ff fe0e 	bl	8004464 <USBH_ParseEPDesc>
            ep_ix++;
 8004848:	b2ff      	uxtb	r7, r7
 800484a:	e7dd      	b.n	8004808 <USBH_ParseCfgDesc+0x72>
        if_ix++;
 800484c:	3601      	adds	r6, #1
 800484e:	b2f6      	uxtb	r6, r6
 8004850:	e7bf      	b.n	80047d2 <USBH_ParseCfgDesc+0x3c>
}
 8004852:	b002      	add	sp, #8
 8004854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004858 <USBH_CtlReq>:
{
 8004858:	b538      	push	{r3, r4, r5, lr}
 800485a:	4604      	mov	r4, r0
  switch (phost->RequestState)
 800485c:	7885      	ldrb	r5, [r0, #2]
 800485e:	2d01      	cmp	r5, #1
 8004860:	d004      	beq.n	800486c <USBH_CtlReq+0x14>
 8004862:	2d02      	cmp	r5, #2
 8004864:	d011      	beq.n	800488a <USBH_CtlReq+0x32>
 8004866:	2501      	movs	r5, #1
}
 8004868:	4628      	mov	r0, r5
 800486a:	bd38      	pop	{r3, r4, r5, pc}
      phost->Control.buff = buff;
 800486c:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 800486e:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
 8004870:	2301      	movs	r3, #1
 8004872:	7603      	strb	r3, [r0, #24]
      phost->RequestState = CMD_WAIT;
 8004874:	2302      	movs	r3, #2
 8004876:	7083      	strb	r3, [r0, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004878:	2103      	movs	r1, #3
 800487a:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800487e:	2200      	movs	r2, #0
 8004880:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 8004884:	f000 f9cc 	bl	8004c20 <osMessagePut>
      break;
 8004888:	e7ee      	b.n	8004868 <USBH_CtlReq+0x10>
      status = USBH_HandleControl(phost);
 800488a:	f7ff fe14 	bl	80044b6 <USBH_HandleControl>
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800488e:	4605      	mov	r5, r0
 8004890:	b130      	cbz	r0, 80048a0 <USBH_CtlReq+0x48>
 8004892:	2803      	cmp	r0, #3
 8004894:	d004      	beq.n	80048a0 <USBH_CtlReq+0x48>
      else if (status == USBH_FAIL)
 8004896:	2802      	cmp	r0, #2
 8004898:	d106      	bne.n	80048a8 <USBH_CtlReq+0x50>
        phost->RequestState = CMD_SEND;
 800489a:	2301      	movs	r3, #1
 800489c:	70a3      	strb	r3, [r4, #2]
 800489e:	e003      	b.n	80048a8 <USBH_CtlReq+0x50>
        phost->RequestState = CMD_SEND;
 80048a0:	2301      	movs	r3, #1
 80048a2:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 80048a4:	2300      	movs	r3, #0
 80048a6:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80048a8:	2103      	movs	r1, #3
 80048aa:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80048b4:	f000 f9b4 	bl	8004c20 <osMessagePut>
      break;
 80048b8:	e7d6      	b.n	8004868 <USBH_CtlReq+0x10>

080048ba <USBH_GetDescriptor>:
{
 80048ba:	b508      	push	{r3, lr}
 80048bc:	468e      	mov	lr, r1
 80048be:	4694      	mov	ip, r2
 80048c0:	4619      	mov	r1, r3
 80048c2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 80048c6:	7883      	ldrb	r3, [r0, #2]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d002      	beq.n	80048d2 <USBH_GetDescriptor+0x18>
  return USBH_CtlReq(phost, buff, length);
 80048cc:	f7ff ffc4 	bl	8004858 <USBH_CtlReq>
}
 80048d0:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80048d2:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
 80048d6:	f880 e010 	strb.w	lr, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80048da:	2306      	movs	r3, #6
 80048dc:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80048de:	f8a0 c012 	strh.w	ip, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80048e2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80048e6:	f5bc 7f40 	cmp.w	ip, #768	; 0x300
 80048ea:	d003      	beq.n	80048f4 <USBH_GetDescriptor+0x3a>
      phost->Control.setup.b.wIndex.w = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 80048f0:	82c2      	strh	r2, [r0, #22]
 80048f2:	e7eb      	b.n	80048cc <USBH_GetDescriptor+0x12>
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80048f4:	f240 4309 	movw	r3, #1033	; 0x409
 80048f8:	8283      	strh	r3, [r0, #20]
 80048fa:	e7f9      	b.n	80048f0 <USBH_GetDescriptor+0x36>

080048fc <USBH_Get_DevDesc>:
{
 80048fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048fe:	b083      	sub	sp, #12
 8004900:	4604      	mov	r4, r0
                                   USB_DESC_DEVICE, phost->device.Data,
 8004902:	f500 768e 	add.w	r6, r0, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8004906:	460d      	mov	r5, r1
 8004908:	9100      	str	r1, [sp, #0]
 800490a:	4633      	mov	r3, r6
 800490c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004910:	2100      	movs	r1, #0
 8004912:	f7ff ffd2 	bl	80048ba <USBH_GetDescriptor>
 8004916:	4607      	mov	r7, r0
 8004918:	b110      	cbz	r0, 8004920 <USBH_Get_DevDesc+0x24>
}
 800491a:	4638      	mov	r0, r7
 800491c:	b003      	add	sp, #12
 800491e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8004920:	462a      	mov	r2, r5
 8004922:	4631      	mov	r1, r6
 8004924:	f204 3026 	addw	r0, r4, #806	; 0x326
 8004928:	f7ff fd5d 	bl	80043e6 <USBH_ParseDevDesc>
 800492c:	e7f5      	b.n	800491a <USBH_Get_DevDesc+0x1e>

0800492e <USBH_Get_CfgDesc>:
{
 800492e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004930:	b083      	sub	sp, #12
 8004932:	4604      	mov	r4, r0
 8004934:	460d      	mov	r5, r1
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8004936:	f100 061c 	add.w	r6, r0, #28
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800493a:	9100      	str	r1, [sp, #0]
 800493c:	4633      	mov	r3, r6
 800493e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004942:	2100      	movs	r1, #0
 8004944:	f7ff ffb9 	bl	80048ba <USBH_GetDescriptor>
 8004948:	4607      	mov	r7, r0
 800494a:	b110      	cbz	r0, 8004952 <USBH_Get_CfgDesc+0x24>
}
 800494c:	4638      	mov	r0, r7
 800494e:	b003      	add	sp, #12
 8004950:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8004952:	462a      	mov	r2, r5
 8004954:	4631      	mov	r1, r6
 8004956:	f504 704e 	add.w	r0, r4, #824	; 0x338
 800495a:	f7ff ff1c 	bl	8004796 <USBH_ParseCfgDesc>
 800495e:	e7f5      	b.n	800494c <USBH_Get_CfgDesc+0x1e>

08004960 <USBH_Get_StringDesc>:
{
 8004960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004962:	b083      	sub	sp, #12
 8004964:	4616      	mov	r6, r2
 8004966:	461d      	mov	r5, r3
                                   phost->device.Data, length)) == USBH_OK)
 8004968:	f500 748e 	add.w	r4, r0, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	4623      	mov	r3, r4
 8004970:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8004974:	2100      	movs	r1, #0
 8004976:	f7ff ffa0 	bl	80048ba <USBH_GetDescriptor>
 800497a:	4607      	mov	r7, r0
 800497c:	b110      	cbz	r0, 8004984 <USBH_Get_StringDesc+0x24>
}
 800497e:	4638      	mov	r0, r7
 8004980:	b003      	add	sp, #12
 8004982:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8004984:	462a      	mov	r2, r5
 8004986:	4631      	mov	r1, r6
 8004988:	4620      	mov	r0, r4
 800498a:	f7ff fd7b 	bl	8004484 <USBH_ParseStringDesc>
 800498e:	e7f6      	b.n	800497e <USBH_Get_StringDesc+0x1e>

08004990 <USBH_SetAddress>:
{
 8004990:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8004992:	7883      	ldrb	r3, [r0, #2]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d004      	beq.n	80049a2 <USBH_SetAddress+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8004998:	2200      	movs	r2, #0
 800499a:	4611      	mov	r1, r2
 800499c:	f7ff ff5c 	bl	8004858 <USBH_CtlReq>
}
 80049a0:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80049a2:	2300      	movs	r3, #0
 80049a4:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80049a6:	2205      	movs	r2, #5
 80049a8:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80049aa:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80049ac:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80049ae:	82c3      	strh	r3, [r0, #22]
 80049b0:	e7f2      	b.n	8004998 <USBH_SetAddress+0x8>

080049b2 <USBH_SetCfg>:
{
 80049b2:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 80049b4:	7883      	ldrb	r3, [r0, #2]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d004      	beq.n	80049c4 <USBH_SetCfg+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 80049ba:	2200      	movs	r2, #0
 80049bc:	4611      	mov	r1, r2
 80049be:	f7ff ff4b 	bl	8004858 <USBH_CtlReq>
}
 80049c2:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80049c4:	2300      	movs	r3, #0
 80049c6:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80049c8:	2209      	movs	r2, #9
 80049ca:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80049cc:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80049ce:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80049d0:	82c3      	strh	r3, [r0, #22]
 80049d2:	e7f2      	b.n	80049ba <USBH_SetCfg+0x8>

080049d4 <USBH_SetFeature>:
{
 80049d4:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 80049d6:	7883      	ldrb	r3, [r0, #2]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d004      	beq.n	80049e6 <USBH_SetFeature+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 80049dc:	2200      	movs	r2, #0
 80049de:	4611      	mov	r1, r2
 80049e0:	f7ff ff3a 	bl	8004858 <USBH_CtlReq>
}
 80049e4:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80049e6:	2300      	movs	r3, #0
 80049e8:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80049ea:	2203      	movs	r2, #3
 80049ec:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80049ee:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80049f0:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80049f2:	82c3      	strh	r3, [r0, #22]
 80049f4:	e7f2      	b.n	80049dc <USBH_SetFeature+0x8>

080049f6 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80049f6:	b510      	push	{r4, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	460b      	mov	r3, r1
 80049fc:	4611      	mov	r1, r2

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80049fe:	2400      	movs	r4, #0
 8004a00:	9403      	str	r4, [sp, #12]
 8004a02:	2208      	movs	r2, #8
 8004a04:	9202      	str	r2, [sp, #8]
 8004a06:	9301      	str	r3, [sp, #4]
 8004a08:	9400      	str	r4, [sp, #0]
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	4622      	mov	r2, r4
 8004a0e:	f001 fe73 	bl	80066f8 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 8004a12:	4620      	mov	r0, r4
 8004a14:	b004      	add	sp, #16
 8004a16:	bd10      	pop	{r4, pc}

08004a18 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8004a18:	b530      	push	{r4, r5, lr}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8004a24:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 8004a28:	b105      	cbz	r5, 8004a2c <USBH_CtlSendData+0x14>
  {
    do_ping = 0U;
 8004a2a:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8004a2c:	9303      	str	r3, [sp, #12]
 8004a2e:	9202      	str	r2, [sp, #8]
 8004a30:	9401      	str	r4, [sp, #4]
 8004a32:	2301      	movs	r3, #1
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	2300      	movs	r3, #0
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f001 fe5d 	bl	80066f8 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8004a3e:	2000      	movs	r0, #0
 8004a40:	b005      	add	sp, #20
 8004a42:	bd30      	pop	{r4, r5, pc}

08004a44 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8004a44:	b530      	push	{r4, r5, lr}
 8004a46:	b085      	sub	sp, #20
 8004a48:	460d      	mov	r5, r1
 8004a4a:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8004a4c:	2400      	movs	r4, #0
 8004a4e:	9403      	str	r4, [sp, #12]
 8004a50:	9202      	str	r2, [sp, #8]
 8004a52:	9501      	str	r5, [sp, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	9200      	str	r2, [sp, #0]
 8004a58:	4623      	mov	r3, r4
 8004a5a:	f001 fe4d 	bl	80066f8 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 8004a5e:	4620      	mov	r0, r4
 8004a60:	b005      	add	sp, #20
 8004a62:	bd30      	pop	{r4, r5, pc}

08004a64 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8004a64:	b530      	push	{r4, r5, lr}
 8004a66:	b085      	sub	sp, #20
 8004a68:	460c      	mov	r4, r1
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8004a70:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 8004a74:	b105      	cbz	r5, 8004a78 <USBH_BulkSendData+0x14>
  {
    do_ping = 0U;
 8004a76:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8004a78:	9303      	str	r3, [sp, #12]
 8004a7a:	9202      	str	r2, [sp, #8]
 8004a7c:	9401      	str	r4, [sp, #4]
 8004a7e:	2301      	movs	r3, #1
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	2302      	movs	r3, #2
 8004a84:	2200      	movs	r2, #0
 8004a86:	f001 fe37 	bl	80066f8 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	b005      	add	sp, #20
 8004a8e:	bd30      	pop	{r4, r5, pc}

08004a90 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8004a90:	b530      	push	{r4, r5, lr}
 8004a92:	b085      	sub	sp, #20
 8004a94:	460d      	mov	r5, r1
 8004a96:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8004a98:	2400      	movs	r4, #0
 8004a9a:	9403      	str	r4, [sp, #12]
 8004a9c:	9202      	str	r2, [sp, #8]
 8004a9e:	9501      	str	r5, [sp, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	9200      	str	r2, [sp, #0]
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	f001 fe27 	bl	80066f8 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 8004aaa:	4620      	mov	r0, r4
 8004aac:	b005      	add	sp, #20
 8004aae:	bd30      	pop	{r4, r5, pc}

08004ab0 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8004ab0:	b530      	push	{r4, r5, lr}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	460d      	mov	r5, r1
 8004ab6:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8004ab8:	2400      	movs	r4, #0
 8004aba:	9403      	str	r4, [sp, #12]
 8004abc:	9202      	str	r2, [sp, #8]
 8004abe:	9501      	str	r5, [sp, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	9200      	str	r2, [sp, #0]
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	f001 fe17 	bl	80066f8 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
}
 8004aca:	4620      	mov	r0, r4
 8004acc:	b005      	add	sp, #20
 8004ace:	bd30      	pop	{r4, r5, pc}

08004ad0 <USBH_GetFreePipe>:
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	2b0a      	cmp	r3, #10
 8004ad4:	d80c      	bhi.n	8004af0 <USBH_GetFreePipe+0x20>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8004ad6:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8004ada:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ade:	6852      	ldr	r2, [r2, #4]
 8004ae0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004ae4:	d002      	beq.n	8004aec <USBH_GetFreePipe+0x1c>
  for (idx = 0U ; idx < 11U ; idx++)
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	e7f2      	b.n	8004ad2 <USBH_GetFreePipe+0x2>
    {
      return (uint16_t)idx;
 8004aec:	b298      	uxth	r0, r3
 8004aee:	4770      	bx	lr
    }
  }

  return 0xFFFFU;
 8004af0:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8004af4:	4770      	bx	lr

08004af6 <USBH_OpenPipe>:
{
 8004af6:	b510      	push	{r4, lr}
 8004af8:	b084      	sub	sp, #16
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8004afa:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004afe:	9402      	str	r4, [sp, #8]
 8004b00:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004b04:	9401      	str	r4, [sp, #4]
 8004b06:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004b0a:	9400      	str	r4, [sp, #0]
 8004b0c:	f001 fdd9 	bl	80066c2 <USBH_LL_OpenPipe>
}
 8004b10:	2000      	movs	r0, #0
 8004b12:	b004      	add	sp, #16
 8004b14:	bd10      	pop	{r4, pc}

08004b16 <USBH_ClosePipe>:
{
 8004b16:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 8004b18:	f001 fde6 	bl	80066e8 <USBH_LL_ClosePipe>
}
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	bd08      	pop	{r3, pc}

08004b20 <USBH_AllocPipe>:
{
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	4604      	mov	r4, r0
 8004b24:	460d      	mov	r5, r1
  pipe =  USBH_GetFreePipe(phost);
 8004b26:	f7ff ffd3 	bl	8004ad0 <USBH_GetFreePipe>
  if (pipe != 0xFFFFU)
 8004b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b2e:	4298      	cmp	r0, r3
 8004b30:	d007      	beq.n	8004b42 <USBH_AllocPipe+0x22>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8004b32:	f000 030f 	and.w	r3, r0, #15
 8004b36:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8004b3a:	33e0      	adds	r3, #224	; 0xe0
 8004b3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b40:	605d      	str	r5, [r3, #4]
}
 8004b42:	b2c0      	uxtb	r0, r0
 8004b44:	bd38      	pop	{r3, r4, r5, pc}

08004b46 <USBH_FreePipe>:
  if (idx < 11U)
 8004b46:	290a      	cmp	r1, #10
 8004b48:	d806      	bhi.n	8004b58 <USBH_FreePipe+0x12>
    phost->Pipes[idx] &= 0x7FFFU;
 8004b4a:	31e0      	adds	r1, #224	; 0xe0
 8004b4c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8004b50:	6843      	ldr	r3, [r0, #4]
 8004b52:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004b56:	6043      	str	r3, [r0, #4]
}
 8004b58:	2000      	movs	r0, #0
 8004b5a:	4770      	bx	lr

08004b5c <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8004b5c:	2884      	cmp	r0, #132	; 0x84
 8004b5e:	d001      	beq.n	8004b64 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8004b60:	3003      	adds	r0, #3
 8004b62:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b64:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8004b66:	4770      	bx	lr

08004b68 <inHandlerMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b68:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8004b6c:	3800      	subs	r0, #0
 8004b6e:	bf18      	it	ne
 8004b70:	2001      	movne	r0, #1
 8004b72:	4770      	bx	lr

08004b74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004b74:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004b76:	f000 feb3 	bl	80058e0 <vTaskStartScheduler>
  
  return osOK;
}
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	bd08      	pop	{r3, pc}

08004b7e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004b7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b82:	b087      	sub	sp, #28
 8004b84:	4604      	mov	r4, r0
 8004b86:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004b88:	6945      	ldr	r5, [r0, #20]
 8004b8a:	b1bd      	cbz	r5, 8004bbc <osThreadCreate+0x3e>
 8004b8c:	6986      	ldr	r6, [r0, #24]
 8004b8e:	b1ae      	cbz	r6, 8004bbc <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b90:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8004b94:	f8d0 9000 	ldr.w	r9, [r0]
 8004b98:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8004b9c:	f7ff ffde 	bl	8004b5c <makeFreeRtosPriority>
 8004ba0:	9602      	str	r6, [sp, #8]
 8004ba2:	9501      	str	r5, [sp, #4]
 8004ba4:	9000      	str	r0, [sp, #0]
 8004ba6:	463b      	mov	r3, r7
 8004ba8:	6922      	ldr	r2, [r4, #16]
 8004baa:	4649      	mov	r1, r9
 8004bac:	4640      	mov	r0, r8
 8004bae:	f000 fe27 	bl	8005800 <xTaskCreateStatic>
 8004bb2:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004bb4:	9805      	ldr	r0, [sp, #20]
}
 8004bb6:	b007      	add	sp, #28
 8004bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bbc:	6865      	ldr	r5, [r4, #4]
 8004bbe:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004bc0:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bc4:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8004bc8:	f7ff ffc8 	bl	8004b5c <makeFreeRtosPriority>
 8004bcc:	ab05      	add	r3, sp, #20
 8004bce:	9301      	str	r3, [sp, #4]
 8004bd0:	9000      	str	r0, [sp, #0]
 8004bd2:	463b      	mov	r3, r7
 8004bd4:	fa1f f288 	uxth.w	r2, r8
 8004bd8:	4631      	mov	r1, r6
 8004bda:	4628      	mov	r0, r5
 8004bdc:	f000 fe4b 	bl	8005876 <xTaskCreate>
 8004be0:	2801      	cmp	r0, #1
 8004be2:	d0e7      	beq.n	8004bb4 <osThreadCreate+0x36>
      return NULL;
 8004be4:	2000      	movs	r0, #0
 8004be6:	e7e6      	b.n	8004bb6 <osThreadCreate+0x38>

08004be8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004be8:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004bea:	b900      	cbnz	r0, 8004bee <osDelay+0x6>
 8004bec:	2001      	movs	r0, #1
 8004bee:	f000 ffc9 	bl	8005b84 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	bd08      	pop	{r3, pc}

08004bf6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004bf6:	b500      	push	{lr}
 8004bf8:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004bfa:	6882      	ldr	r2, [r0, #8]
 8004bfc:	b142      	cbz	r2, 8004c10 <osMessageCreate+0x1a>
 8004bfe:	68c3      	ldr	r3, [r0, #12]
 8004c00:	b133      	cbz	r3, 8004c10 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004c02:	2100      	movs	r1, #0
 8004c04:	9100      	str	r1, [sp, #0]
 8004c06:	6841      	ldr	r1, [r0, #4]
 8004c08:	6800      	ldr	r0, [r0, #0]
 8004c0a:	f000 f9b5 	bl	8004f78 <xQueueGenericCreateStatic>
 8004c0e:	e004      	b.n	8004c1a <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004c10:	2200      	movs	r2, #0
 8004c12:	6841      	ldr	r1, [r0, #4]
 8004c14:	6800      	ldr	r0, [r0, #0]
 8004c16:	f000 f9f9 	bl	800500c <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004c1a:	b003      	add	sp, #12
 8004c1c:	f85d fb04 	ldr.w	pc, [sp], #4

08004c20 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004c20:	b530      	push	{r4, r5, lr}
 8004c22:	b085      	sub	sp, #20
 8004c24:	4604      	mov	r4, r0
 8004c26:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8004c2c:	4615      	mov	r5, r2
 8004c2e:	b902      	cbnz	r2, 8004c32 <osMessagePut+0x12>
    ticks = 1;
 8004c30:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8004c32:	f7ff ff99 	bl	8004b68 <inHandlerMode>
 8004c36:	b1a8      	cbz	r0, 8004c64 <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004c38:	2300      	movs	r3, #0
 8004c3a:	aa03      	add	r2, sp, #12
 8004c3c:	a901      	add	r1, sp, #4
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f000 facc 	bl	80051dc <xQueueGenericSendFromISR>
 8004c44:	2801      	cmp	r0, #1
 8004c46:	d118      	bne.n	8004c7a <osMessagePut+0x5a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004c48:	9b03      	ldr	r3, [sp, #12]
 8004c4a:	b1c3      	cbz	r3, 8004c7e <osMessagePut+0x5e>
 8004c4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8004c60:	2000      	movs	r0, #0
 8004c62:	e008      	b.n	8004c76 <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004c64:	2300      	movs	r3, #0
 8004c66:	462a      	mov	r2, r5
 8004c68:	a901      	add	r1, sp, #4
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f000 f9f2 	bl	8005054 <xQueueGenericSend>
 8004c70:	2801      	cmp	r0, #1
 8004c72:	d106      	bne.n	8004c82 <osMessagePut+0x62>
  return osOK;
 8004c74:	2000      	movs	r0, #0
}
 8004c76:	b005      	add	sp, #20
 8004c78:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 8004c7a:	20ff      	movs	r0, #255	; 0xff
 8004c7c:	e7fb      	b.n	8004c76 <osMessagePut+0x56>
  return osOK;
 8004c7e:	2000      	movs	r0, #0
 8004c80:	e7f9      	b.n	8004c76 <osMessagePut+0x56>
      return osErrorOS;
 8004c82:	20ff      	movs	r0, #255	; 0xff
 8004c84:	e7f7      	b.n	8004c76 <osMessagePut+0x56>

08004c86 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004c86:	b570      	push	{r4, r5, r6, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004c8c:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8004c92:	b1e1      	cbz	r1, 8004cce <osMessageGet+0x48>
 8004c94:	460d      	mov	r5, r1
 8004c96:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	9303      	str	r3, [sp, #12]
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004c9c:	f7ff ff64 	bl	8004b68 <inHandlerMode>
 8004ca0:	b300      	cbz	r0, 8004ce4 <osMessageGet+0x5e>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004ca2:	aa03      	add	r2, sp, #12
 8004ca4:	a901      	add	r1, sp, #4
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f000 fbae 	bl	8005408 <xQueueReceiveFromISR>
 8004cac:	2801      	cmp	r0, #1
 8004cae:	d016      	beq.n	8004cde <osMessageGet+0x58>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004cb4:	9b03      	ldr	r3, [sp, #12]
 8004cb6:	b1fb      	cbz	r3, 8004cf8 <osMessageGet+0x72>
 8004cb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	e014      	b.n	8004cf8 <osMessageGet+0x72>
    event.status = osErrorParameter;
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	9300      	str	r3, [sp, #0]
    return event;
 8004cd2:	466b      	mov	r3, sp
 8004cd4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004cd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004cdc:	e011      	b.n	8004d02 <osMessageGet+0x7c>
      event.status = osEventMessage;
 8004cde:	2310      	movs	r3, #16
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	e7e7      	b.n	8004cb4 <osMessageGet+0x2e>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004ce4:	4632      	mov	r2, r6
 8004ce6:	a901      	add	r1, sp, #4
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f000 fade 	bl	80052aa <xQueueReceive>
 8004cee:	2801      	cmp	r0, #1
 8004cf0:	d00a      	beq.n	8004d08 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004cf2:	b106      	cbz	r6, 8004cf6 <osMessageGet+0x70>
 8004cf4:	2640      	movs	r6, #64	; 0x40
 8004cf6:	9600      	str	r6, [sp, #0]
    }
  }
  
  return event;
 8004cf8:	466b      	mov	r3, sp
 8004cfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004cfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004d02:	4620      	mov	r0, r4
 8004d04:	b004      	add	sp, #16
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8004d08:	2310      	movs	r3, #16
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	e7f4      	b.n	8004cf8 <osMessageGet+0x72>

08004d0e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d0e:	f100 0308 	add.w	r3, r0, #8
 8004d12:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d18:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d1a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d1c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d22:	4770      	bx	lr

08004d24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d28:	4770      	bx	lr

08004d2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d2a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d2c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d32:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d34:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d36:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004d38:	6803      	ldr	r3, [r0, #0]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	6003      	str	r3, [r0, #0]
}
 8004d3e:	4770      	bx	lr

08004d40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d40:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d42:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d44:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004d48:	d011      	beq.n	8004d6e <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d4a:	f100 0308 	add.w	r3, r0, #8
 8004d4e:	461c      	mov	r4, r3
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	42aa      	cmp	r2, r5
 8004d56:	d9fa      	bls.n	8004d4e <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d58:	6863      	ldr	r3, [r4, #4]
 8004d5a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d5c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d5e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d60:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d62:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004d64:	6803      	ldr	r3, [r0, #0]
 8004d66:	3301      	adds	r3, #1
 8004d68:	6003      	str	r3, [r0, #0]
}
 8004d6a:	bc30      	pop	{r4, r5}
 8004d6c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d6e:	6904      	ldr	r4, [r0, #16]
 8004d70:	e7f2      	b.n	8004d58 <vListInsert+0x18>

08004d72 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d72:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d74:	6841      	ldr	r1, [r0, #4]
 8004d76:	6882      	ldr	r2, [r0, #8]
 8004d78:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d7a:	6841      	ldr	r1, [r0, #4]
 8004d7c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	4282      	cmp	r2, r0
 8004d82:	d006      	beq.n	8004d92 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d84:	2200      	movs	r2, #0
 8004d86:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	3a01      	subs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d8e:	6818      	ldr	r0, [r3, #0]
}
 8004d90:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d92:	6882      	ldr	r2, [r0, #8]
 8004d94:	605a      	str	r2, [r3, #4]
 8004d96:	e7f5      	b.n	8004d84 <uxListRemove+0x12>

08004d98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d98:	b510      	push	{r4, lr}
 8004d9a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d9c:	f001 f8f2 	bl	8005f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004da0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004da2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d004      	beq.n	8004db2 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8004da8:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8004daa:	f001 f90d 	bl	8005fc8 <vPortExitCritical>

	return xReturn;
}
 8004dae:	4620      	mov	r0, r4
 8004db0:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8004db2:	2401      	movs	r4, #1
 8004db4:	e7f9      	b.n	8004daa <prvIsQueueFull+0x12>

08004db6 <prvIsQueueEmpty>:
{
 8004db6:	b510      	push	{r4, lr}
 8004db8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004dba:	f001 f8e3 	bl	8005f84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004dbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004dc0:	b923      	cbnz	r3, 8004dcc <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8004dc2:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8004dc4:	f001 f900 	bl	8005fc8 <vPortExitCritical>
}
 8004dc8:	4620      	mov	r0, r4
 8004dca:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8004dcc:	2400      	movs	r4, #0
 8004dce:	e7f9      	b.n	8004dc4 <prvIsQueueEmpty+0xe>

08004dd0 <prvCopyDataToQueue>:
{
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dd6:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004dd8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004dda:	b95a      	cbnz	r2, 8004df4 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ddc:	6803      	ldr	r3, [r0, #0]
 8004dde:	b11b      	cbz	r3, 8004de8 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8004de0:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004de2:	3601      	adds	r6, #1
 8004de4:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004de8:	6880      	ldr	r0, [r0, #8]
 8004dea:	f001 f805 	bl	8005df8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60a3      	str	r3, [r4, #8]
 8004df2:	e7f6      	b.n	8004de2 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8004df4:	b96d      	cbnz	r5, 8004e12 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004df6:	6840      	ldr	r0, [r0, #4]
 8004df8:	f001 fcde 	bl	80067b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dfc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004dfe:	6863      	ldr	r3, [r4, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e04:	68a2      	ldr	r2, [r4, #8]
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d319      	bcc.n	8004e3e <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8004e0e:	4628      	mov	r0, r5
 8004e10:	e7e7      	b.n	8004de2 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e12:	68c0      	ldr	r0, [r0, #12]
 8004e14:	f001 fcd0 	bl	80067b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e18:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e1a:	4251      	negs	r1, r2
 8004e1c:	68e3      	ldr	r3, [r4, #12]
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e22:	6822      	ldr	r2, [r4, #0]
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d202      	bcs.n	8004e2e <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e28:	68a3      	ldr	r3, [r4, #8]
 8004e2a:	440b      	add	r3, r1
 8004e2c:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004e2e:	2d02      	cmp	r5, #2
 8004e30:	d001      	beq.n	8004e36 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8004e32:	2000      	movs	r0, #0
 8004e34:	e7d5      	b.n	8004de2 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e36:	b126      	cbz	r6, 8004e42 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8004e38:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	e7d1      	b.n	8004de2 <prvCopyDataToQueue+0x12>
 8004e3e:	4628      	mov	r0, r5
 8004e40:	e7cf      	b.n	8004de2 <prvCopyDataToQueue+0x12>
 8004e42:	2000      	movs	r0, #0
 8004e44:	e7cd      	b.n	8004de2 <prvCopyDataToQueue+0x12>

08004e46 <prvCopyDataFromQueue>:
{
 8004e46:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e48:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004e4a:	b16a      	cbz	r2, 8004e68 <prvCopyDataFromQueue+0x22>
{
 8004e4c:	b510      	push	{r4, lr}
 8004e4e:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e50:	68d9      	ldr	r1, [r3, #12]
 8004e52:	4411      	add	r1, r2
 8004e54:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e56:	689c      	ldr	r4, [r3, #8]
 8004e58:	42a1      	cmp	r1, r4
 8004e5a:	d301      	bcc.n	8004e60 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e60:	68d9      	ldr	r1, [r3, #12]
 8004e62:	f001 fca9 	bl	80067b8 <memcpy>
}
 8004e66:	bd10      	pop	{r4, pc}
 8004e68:	4770      	bx	lr

08004e6a <prvUnlockQueue>:
{
 8004e6a:	b538      	push	{r3, r4, r5, lr}
 8004e6c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8004e6e:	f001 f889 	bl	8005f84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004e72:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8004e76:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e78:	e001      	b.n	8004e7e <prvUnlockQueue+0x14>
			--cTxLock;
 8004e7a:	3c01      	subs	r4, #1
 8004e7c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e7e:	2c00      	cmp	r4, #0
 8004e80:	dd0a      	ble.n	8004e98 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e84:	b143      	cbz	r3, 8004e98 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e86:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004e8a:	f000 ff0b 	bl	8005ca4 <xTaskRemoveFromEventList>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d0f3      	beq.n	8004e7a <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8004e92:	f000 ff9b 	bl	8005dcc <vTaskMissedYield>
 8004e96:	e7f0      	b.n	8004e7a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8004e98:	23ff      	movs	r3, #255	; 0xff
 8004e9a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004e9e:	f001 f893 	bl	8005fc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004ea2:	f001 f86f 	bl	8005f84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004ea6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8004eaa:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eac:	e001      	b.n	8004eb2 <prvUnlockQueue+0x48>
				--cRxLock;
 8004eae:	3c01      	subs	r4, #1
 8004eb0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eb2:	2c00      	cmp	r4, #0
 8004eb4:	dd0a      	ble.n	8004ecc <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eb6:	692b      	ldr	r3, [r5, #16]
 8004eb8:	b143      	cbz	r3, 8004ecc <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eba:	f105 0010 	add.w	r0, r5, #16
 8004ebe:	f000 fef1 	bl	8005ca4 <xTaskRemoveFromEventList>
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d0f3      	beq.n	8004eae <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8004ec6:	f000 ff81 	bl	8005dcc <vTaskMissedYield>
 8004eca:	e7f0      	b.n	8004eae <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8004ecc:	23ff      	movs	r3, #255	; 0xff
 8004ece:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8004ed2:	f001 f879 	bl	8005fc8 <vPortExitCritical>
}
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}

08004ed8 <xQueueGenericReset>:
{
 8004ed8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8004eda:	b1e0      	cbz	r0, 8004f16 <xQueueGenericReset+0x3e>
 8004edc:	460d      	mov	r5, r1
 8004ede:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004ee0:	f001 f850 	bl	8005f84 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004ee8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004eea:	fb01 3002 	mla	r0, r1, r2, r3
 8004eee:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ef4:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ef6:	3a01      	subs	r2, #1
 8004ef8:	fb02 3301 	mla	r3, r2, r1, r3
 8004efc:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004efe:	23ff      	movs	r3, #255	; 0xff
 8004f00:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004f08:	b9fd      	cbnz	r5, 8004f4a <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f0a:	6923      	ldr	r3, [r4, #16]
 8004f0c:	b963      	cbnz	r3, 8004f28 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8004f0e:	f001 f85b 	bl	8005fc8 <vPortExitCritical>
}
 8004f12:	2001      	movs	r0, #1
 8004f14:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004f26:	e7fe      	b.n	8004f26 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f28:	f104 0010 	add.w	r0, r4, #16
 8004f2c:	f000 feba 	bl	8005ca4 <xTaskRemoveFromEventList>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d0ec      	beq.n	8004f0e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8004f34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f3c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	e7e1      	b.n	8004f0e <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f4a:	f104 0010 	add.w	r0, r4, #16
 8004f4e:	f7ff fede 	bl	8004d0e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f52:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004f56:	f7ff feda 	bl	8004d0e <vListInitialise>
 8004f5a:	e7d8      	b.n	8004f0e <xQueueGenericReset+0x36>

08004f5c <prvInitialiseNewQueue>:
{
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	4603      	mov	r3, r0
 8004f60:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f62:	460c      	mov	r4, r1
 8004f64:	b931      	cbnz	r1, 8004f74 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f66:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004f68:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f6a:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	f7ff ffb3 	bl	8004ed8 <xQueueGenericReset>
}
 8004f72:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f74:	6002      	str	r2, [r0, #0]
 8004f76:	e7f7      	b.n	8004f68 <prvInitialiseNewQueue+0xc>

08004f78 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f78:	b940      	cbnz	r0, 8004f8c <xQueueGenericCreateStatic+0x14>
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	e7fe      	b.n	8004f8a <xQueueGenericCreateStatic+0x12>
	{
 8004f8c:	b510      	push	{r4, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	461c      	mov	r4, r3
 8004f92:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8004f94:	b153      	cbz	r3, 8004fac <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f96:	b192      	cbz	r2, 8004fbe <xQueueGenericCreateStatic+0x46>
 8004f98:	b989      	cbnz	r1, 8004fbe <xQueueGenericCreateStatic+0x46>
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	e7fe      	b.n	8004faa <xQueueGenericCreateStatic+0x32>
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8004fbc:	e7fe      	b.n	8004fbc <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fbe:	b16a      	cbz	r2, 8004fdc <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fc0:	2348      	movs	r3, #72	; 0x48
 8004fc2:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	2b48      	cmp	r3, #72	; 0x48
 8004fc8:	d013      	beq.n	8004ff2 <xQueueGenericCreateStatic+0x7a>
 8004fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	e7fe      	b.n	8004fda <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	d0ef      	beq.n	8004fc0 <xQueueGenericCreateStatic+0x48>
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	e7fe      	b.n	8004ff0 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ff2:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ffa:	9400      	str	r4, [sp, #0]
 8004ffc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005000:	4660      	mov	r0, ip
 8005002:	f7ff ffab 	bl	8004f5c <prvInitialiseNewQueue>
	}
 8005006:	4620      	mov	r0, r4
 8005008:	b004      	add	sp, #16
 800500a:	bd10      	pop	{r4, pc}

0800500c <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800500c:	b940      	cbnz	r0, 8005020 <xQueueGenericCreate+0x14>
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	e7fe      	b.n	800501e <xQueueGenericCreate+0x12>
	{
 8005020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005022:	b083      	sub	sp, #12
 8005024:	460d      	mov	r5, r1
 8005026:	4614      	mov	r4, r2
 8005028:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800502a:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800502e:	3048      	adds	r0, #72	; 0x48
 8005030:	f001 f960 	bl	80062f4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005034:	4607      	mov	r7, r0
 8005036:	b150      	cbz	r0, 800504e <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005038:	2300      	movs	r3, #0
 800503a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800503e:	9000      	str	r0, [sp, #0]
 8005040:	4623      	mov	r3, r4
 8005042:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8005046:	4629      	mov	r1, r5
 8005048:	4630      	mov	r0, r6
 800504a:	f7ff ff87 	bl	8004f5c <prvInitialiseNewQueue>
	}
 800504e:	4638      	mov	r0, r7
 8005050:	b003      	add	sp, #12
 8005052:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005054 <xQueueGenericSend>:
{
 8005054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005056:	b085      	sub	sp, #20
 8005058:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800505a:	b188      	cbz	r0, 8005080 <xQueueGenericSend+0x2c>
 800505c:	460f      	mov	r7, r1
 800505e:	461d      	mov	r5, r3
 8005060:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005062:	b1b1      	cbz	r1, 8005092 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005064:	2d02      	cmp	r5, #2
 8005066:	d120      	bne.n	80050aa <xQueueGenericSend+0x56>
 8005068:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800506a:	2b01      	cmp	r3, #1
 800506c:	d01d      	beq.n	80050aa <xQueueGenericSend+0x56>
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	e7fe      	b.n	800507e <xQueueGenericSend+0x2a>
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005090:	e7fe      	b.n	8005090 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005092:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0e5      	beq.n	8005064 <xQueueGenericSend+0x10>
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	e7fe      	b.n	80050a8 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050aa:	f000 fe95 	bl	8005dd8 <xTaskGetSchedulerState>
 80050ae:	4606      	mov	r6, r0
 80050b0:	b958      	cbnz	r0, 80050ca <xQueueGenericSend+0x76>
 80050b2:	9b01      	ldr	r3, [sp, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d048      	beq.n	800514a <xQueueGenericSend+0xf6>
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	e7fe      	b.n	80050c8 <xQueueGenericSend+0x74>
 80050ca:	2600      	movs	r6, #0
 80050cc:	e03d      	b.n	800514a <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050ce:	462a      	mov	r2, r5
 80050d0:	4639      	mov	r1, r7
 80050d2:	4620      	mov	r0, r4
 80050d4:	f7ff fe7c 	bl	8004dd0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050da:	b97b      	cbnz	r3, 80050fc <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 80050dc:	b148      	cbz	r0, 80050f2 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80050de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80050e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80050f2:	f000 ff69 	bl	8005fc8 <vPortExitCritical>
				return pdPASS;
 80050f6:	2001      	movs	r0, #1
}
 80050f8:	b005      	add	sp, #20
 80050fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005100:	f000 fdd0 	bl	8005ca4 <xTaskRemoveFromEventList>
 8005104:	2800      	cmp	r0, #0
 8005106:	d0f4      	beq.n	80050f2 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8005108:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800510c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005110:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	e7e9      	b.n	80050f2 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800511e:	f000 ff53 	bl	8005fc8 <vPortExitCritical>
					return errQUEUE_FULL;
 8005122:	2000      	movs	r0, #0
 8005124:	e7e8      	b.n	80050f8 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005126:	a802      	add	r0, sp, #8
 8005128:	f000 fe02 	bl	8005d30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800512c:	2601      	movs	r6, #1
 800512e:	e019      	b.n	8005164 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8005130:	2300      	movs	r3, #0
 8005132:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005136:	e021      	b.n	800517c <xQueueGenericSend+0x128>
 8005138:	2300      	movs	r3, #0
 800513a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800513e:	e023      	b.n	8005188 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8005140:	4620      	mov	r0, r4
 8005142:	f7ff fe92 	bl	8004e6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005146:	f000 fca1 	bl	8005a8c <xTaskResumeAll>
		taskENTER_CRITICAL();
 800514a:	f000 ff1b 	bl	8005f84 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800514e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005150:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005152:	429a      	cmp	r2, r3
 8005154:	d3bb      	bcc.n	80050ce <xQueueGenericSend+0x7a>
 8005156:	2d02      	cmp	r5, #2
 8005158:	d0b9      	beq.n	80050ce <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800515a:	9b01      	ldr	r3, [sp, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0de      	beq.n	800511e <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8005160:	2e00      	cmp	r6, #0
 8005162:	d0e0      	beq.n	8005126 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8005164:	f000 ff30 	bl	8005fc8 <vPortExitCritical>
		vTaskSuspendAll();
 8005168:	f000 fbfc 	bl	8005964 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800516c:	f000 ff0a 	bl	8005f84 <vPortEnterCritical>
 8005170:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8005174:	b252      	sxtb	r2, r2
 8005176:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800517a:	d0d9      	beq.n	8005130 <xQueueGenericSend+0xdc>
 800517c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8005180:	b252      	sxtb	r2, r2
 8005182:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005186:	d0d7      	beq.n	8005138 <xQueueGenericSend+0xe4>
 8005188:	f000 ff1e 	bl	8005fc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800518c:	a901      	add	r1, sp, #4
 800518e:	a802      	add	r0, sp, #8
 8005190:	f000 fdda 	bl	8005d48 <xTaskCheckForTimeOut>
 8005194:	b9d8      	cbnz	r0, 80051ce <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005196:	4620      	mov	r0, r4
 8005198:	f7ff fdfe 	bl	8004d98 <prvIsQueueFull>
 800519c:	2800      	cmp	r0, #0
 800519e:	d0cf      	beq.n	8005140 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051a0:	9901      	ldr	r1, [sp, #4]
 80051a2:	f104 0010 	add.w	r0, r4, #16
 80051a6:	f000 fd65 	bl	8005c74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051aa:	4620      	mov	r0, r4
 80051ac:	f7ff fe5d 	bl	8004e6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051b0:	f000 fc6c 	bl	8005a8c <xTaskResumeAll>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d1c8      	bne.n	800514a <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 80051b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80051bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	e7bd      	b.n	800514a <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 80051ce:	4620      	mov	r0, r4
 80051d0:	f7ff fe4b 	bl	8004e6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051d4:	f000 fc5a 	bl	8005a8c <xTaskResumeAll>
			return errQUEUE_FULL;
 80051d8:	2000      	movs	r0, #0
 80051da:	e78d      	b.n	80050f8 <xQueueGenericSend+0xa4>

080051dc <xQueueGenericSendFromISR>:
{
 80051dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80051e0:	b190      	cbz	r0, 8005208 <xQueueGenericSendFromISR+0x2c>
 80051e2:	460f      	mov	r7, r1
 80051e4:	4616      	mov	r6, r2
 80051e6:	461c      	mov	r4, r3
 80051e8:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051ea:	b1b1      	cbz	r1, 800521a <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051ec:	2c02      	cmp	r4, #2
 80051ee:	d120      	bne.n	8005232 <xQueueGenericSendFromISR+0x56>
 80051f0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d01d      	beq.n	8005232 <xQueueGenericSendFromISR+0x56>
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	e7fe      	b.n	8005206 <xQueueGenericSendFromISR+0x2a>
 8005208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005218:	e7fe      	b.n	8005218 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800521a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0e5      	beq.n	80051ec <xQueueGenericSendFromISR+0x10>
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	e7fe      	b.n	8005230 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005232:	f000 ffcd 	bl	80061d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005236:	f3ef 8911 	mrs	r9, BASEPRI
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800524a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800524c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800524e:	429a      	cmp	r2, r3
 8005250:	d306      	bcc.n	8005260 <xQueueGenericSendFromISR+0x84>
 8005252:	2c02      	cmp	r4, #2
 8005254:	d004      	beq.n	8005260 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8005256:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005258:	f389 8811 	msr	BASEPRI, r9
}
 800525c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8005260:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8005264:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005268:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800526a:	4622      	mov	r2, r4
 800526c:	4639      	mov	r1, r7
 800526e:	4628      	mov	r0, r5
 8005270:	f7ff fdae 	bl	8004dd0 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005274:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005278:	d006      	beq.n	8005288 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800527a:	f108 0301 	add.w	r3, r8, #1
 800527e:	b25b      	sxtb	r3, r3
 8005280:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8005284:	2001      	movs	r0, #1
 8005286:	e7e7      	b.n	8005258 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005288:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800528a:	b90b      	cbnz	r3, 8005290 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800528c:	2001      	movs	r0, #1
 800528e:	e7e3      	b.n	8005258 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005290:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005294:	f000 fd06 	bl	8005ca4 <xTaskRemoveFromEventList>
 8005298:	b118      	cbz	r0, 80052a2 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800529a:	b126      	cbz	r6, 80052a6 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800529c:	2001      	movs	r0, #1
 800529e:	6030      	str	r0, [r6, #0]
 80052a0:	e7da      	b.n	8005258 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80052a2:	2001      	movs	r0, #1
 80052a4:	e7d8      	b.n	8005258 <xQueueGenericSendFromISR+0x7c>
 80052a6:	2001      	movs	r0, #1
 80052a8:	e7d6      	b.n	8005258 <xQueueGenericSendFromISR+0x7c>

080052aa <xQueueReceive>:
{
 80052aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ac:	b085      	sub	sp, #20
 80052ae:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80052b0:	b190      	cbz	r0, 80052d8 <xQueueReceive+0x2e>
 80052b2:	460f      	mov	r7, r1
 80052b4:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052b6:	b1c1      	cbz	r1, 80052ea <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052b8:	f000 fd8e 	bl	8005dd8 <xTaskGetSchedulerState>
 80052bc:	4606      	mov	r6, r0
 80052be:	bb00      	cbnz	r0, 8005302 <xQueueReceive+0x58>
 80052c0:	9b01      	ldr	r3, [sp, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d05e      	beq.n	8005384 <xQueueReceive+0xda>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	e7fe      	b.n	80052d6 <xQueueReceive+0x2c>
 80052d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80052e8:	e7fe      	b.n	80052e8 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0e3      	beq.n	80052b8 <xQueueReceive+0xe>
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	e7fe      	b.n	8005300 <xQueueReceive+0x56>
 8005302:	2600      	movs	r6, #0
 8005304:	e03e      	b.n	8005384 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005306:	4639      	mov	r1, r7
 8005308:	4620      	mov	r0, r4
 800530a:	f7ff fd9c 	bl	8004e46 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800530e:	3d01      	subs	r5, #1
 8005310:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005312:	6923      	ldr	r3, [r4, #16]
 8005314:	b923      	cbnz	r3, 8005320 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8005316:	f000 fe57 	bl	8005fc8 <vPortExitCritical>
				return pdPASS;
 800531a:	2001      	movs	r0, #1
}
 800531c:	b005      	add	sp, #20
 800531e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005320:	f104 0010 	add.w	r0, r4, #16
 8005324:	f000 fcbe 	bl	8005ca4 <xTaskRemoveFromEventList>
 8005328:	2800      	cmp	r0, #0
 800532a:	d0f4      	beq.n	8005316 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800532c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005334:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	e7e9      	b.n	8005316 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8005342:	f000 fe41 	bl	8005fc8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005346:	2000      	movs	r0, #0
 8005348:	e7e8      	b.n	800531c <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800534a:	a802      	add	r0, sp, #8
 800534c:	f000 fcf0 	bl	8005d30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005350:	2601      	movs	r6, #1
 8005352:	e021      	b.n	8005398 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8005354:	2300      	movs	r3, #0
 8005356:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800535a:	e029      	b.n	80053b0 <xQueueReceive+0x106>
 800535c:	2300      	movs	r3, #0
 800535e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005362:	e02b      	b.n	80053bc <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8005364:	4620      	mov	r0, r4
 8005366:	f7ff fd80 	bl	8004e6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800536a:	f000 fb8f 	bl	8005a8c <xTaskResumeAll>
 800536e:	e009      	b.n	8005384 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8005370:	4620      	mov	r0, r4
 8005372:	f7ff fd7a 	bl	8004e6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005376:	f000 fb89 	bl	8005a8c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800537a:	4620      	mov	r0, r4
 800537c:	f7ff fd1b 	bl	8004db6 <prvIsQueueEmpty>
 8005380:	2800      	cmp	r0, #0
 8005382:	d13f      	bne.n	8005404 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8005384:	f000 fdfe 	bl	8005f84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005388:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800538a:	2d00      	cmp	r5, #0
 800538c:	d1bb      	bne.n	8005306 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800538e:	9b01      	ldr	r3, [sp, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0d6      	beq.n	8005342 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8005394:	2e00      	cmp	r6, #0
 8005396:	d0d8      	beq.n	800534a <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8005398:	f000 fe16 	bl	8005fc8 <vPortExitCritical>
		vTaskSuspendAll();
 800539c:	f000 fae2 	bl	8005964 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053a0:	f000 fdf0 	bl	8005f84 <vPortEnterCritical>
 80053a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80053a8:	b25b      	sxtb	r3, r3
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ae:	d0d1      	beq.n	8005354 <xQueueReceive+0xaa>
 80053b0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80053b4:	b25b      	sxtb	r3, r3
 80053b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ba:	d0cf      	beq.n	800535c <xQueueReceive+0xb2>
 80053bc:	f000 fe04 	bl	8005fc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053c0:	a901      	add	r1, sp, #4
 80053c2:	a802      	add	r0, sp, #8
 80053c4:	f000 fcc0 	bl	8005d48 <xTaskCheckForTimeOut>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	d1d1      	bne.n	8005370 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053cc:	4620      	mov	r0, r4
 80053ce:	f7ff fcf2 	bl	8004db6 <prvIsQueueEmpty>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d0c6      	beq.n	8005364 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053d6:	9901      	ldr	r1, [sp, #4]
 80053d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80053dc:	f000 fc4a 	bl	8005c74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053e0:	4620      	mov	r0, r4
 80053e2:	f7ff fd42 	bl	8004e6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053e6:	f000 fb51 	bl	8005a8c <xTaskResumeAll>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d1ca      	bne.n	8005384 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80053ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80053f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	e7bf      	b.n	8005384 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8005404:	2000      	movs	r0, #0
 8005406:	e789      	b.n	800531c <xQueueReceive+0x72>

08005408 <xQueueReceiveFromISR>:
{
 8005408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800540c:	b1b0      	cbz	r0, 800543c <xQueueReceiveFromISR+0x34>
 800540e:	460d      	mov	r5, r1
 8005410:	4616      	mov	r6, r2
 8005412:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005414:	b1d9      	cbz	r1, 800544e <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005416:	f000 fedb 	bl	80061d0 <vPortValidateInterruptPriority>
	__asm volatile
 800541a:	f3ef 8811 	mrs	r8, BASEPRI
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800542e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005430:	b9cf      	cbnz	r7, 8005466 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8005432:	2000      	movs	r0, #0
	__asm volatile
 8005434:	f388 8811 	msr	BASEPRI, r8
}
 8005438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800544c:	e7fe      	b.n	800544c <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800544e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0e0      	beq.n	8005416 <xQueueReceiveFromISR+0xe>
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	e7fe      	b.n	8005464 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005466:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 800546a:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800546e:	4629      	mov	r1, r5
 8005470:	4620      	mov	r0, r4
 8005472:	f7ff fce8 	bl	8004e46 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005476:	3f01      	subs	r7, #1
 8005478:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800547a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800547e:	d006      	beq.n	800548e <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005480:	f109 0301 	add.w	r3, r9, #1
 8005484:	b25b      	sxtb	r3, r3
 8005486:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800548a:	2001      	movs	r0, #1
 800548c:	e7d2      	b.n	8005434 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800548e:	6923      	ldr	r3, [r4, #16]
 8005490:	b90b      	cbnz	r3, 8005496 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8005492:	2001      	movs	r0, #1
 8005494:	e7ce      	b.n	8005434 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005496:	f104 0010 	add.w	r0, r4, #16
 800549a:	f000 fc03 	bl	8005ca4 <xTaskRemoveFromEventList>
 800549e:	b118      	cbz	r0, 80054a8 <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 80054a0:	b126      	cbz	r6, 80054ac <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80054a2:	2001      	movs	r0, #1
 80054a4:	6030      	str	r0, [r6, #0]
 80054a6:	e7c5      	b.n	8005434 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 80054a8:	2001      	movs	r0, #1
 80054aa:	e7c3      	b.n	8005434 <xQueueReceiveFromISR+0x2c>
 80054ac:	2001      	movs	r0, #1
 80054ae:	e7c1      	b.n	8005434 <xQueueReceiveFromISR+0x2c>

080054b0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054b0:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <prvResetNextTaskUnblockTime+0x24>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	b923      	cbnz	r3, 80054c2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054b8:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <prvResetNextTaskUnblockTime+0x28>)
 80054ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054c2:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <prvResetNextTaskUnblockTime+0x24>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	4b02      	ldr	r3, [pc, #8]	; (80054d8 <prvResetNextTaskUnblockTime+0x28>)
 80054ce:	601a      	str	r2, [r3, #0]
	}
}
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	20000400 	.word	0x20000400
 80054d8:	200004d4 	.word	0x200004d4

080054dc <prvInitialiseNewTask>:
{
 80054dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054e0:	4607      	mov	r7, r0
 80054e2:	4698      	mov	r8, r3
 80054e4:	9d08      	ldr	r5, [sp, #32]
 80054e6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80054ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054ec:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80054ee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80054f2:	3a01      	subs	r2, #1
 80054f4:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054f8:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80054fc:	2900      	cmp	r1, #0
 80054fe:	d046      	beq.n	800558e <prvInitialiseNewTask+0xb2>
 8005500:	468e      	mov	lr, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005502:	f04f 0c00 	mov.w	ip, #0
 8005506:	f1bc 0f0f 	cmp.w	ip, #15
 800550a:	d80b      	bhi.n	8005524 <prvInitialiseNewTask+0x48>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800550c:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8005510:	eb04 030c 	add.w	r3, r4, ip
 8005514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8005518:	f81e 300c 	ldrb.w	r3, [lr, ip]
 800551c:	b113      	cbz	r3, 8005524 <prvInitialiseNewTask+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800551e:	f10c 0c01 	add.w	ip, ip, #1
 8005522:	e7f0      	b.n	8005506 <prvInitialiseNewTask+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005524:	2300      	movs	r3, #0
 8005526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800552a:	2d06      	cmp	r5, #6
 800552c:	d900      	bls.n	8005530 <prvInitialiseNewTask+0x54>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800552e:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8005530:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005532:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005534:	f04f 0a00 	mov.w	sl, #0
 8005538:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800553c:	1d20      	adds	r0, r4, #4
 800553e:	f7ff fbf1 	bl	8004d24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005542:	f104 0018 	add.w	r0, r4, #24
 8005546:	f7ff fbed 	bl	8004d24 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800554a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800554c:	f1c5 0507 	rsb	r5, r5, #7
 8005550:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005552:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8005554:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005558:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800555c:	2260      	movs	r2, #96	; 0x60
 800555e:	4651      	mov	r1, sl
 8005560:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8005564:	f001 f936 	bl	80067d4 <memset>
 8005568:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <prvInitialiseNewTask+0xbc>)
 800556a:	6523      	str	r3, [r4, #80]	; 0x50
 800556c:	4b0b      	ldr	r3, [pc, #44]	; (800559c <prvInitialiseNewTask+0xc0>)
 800556e:	6563      	str	r3, [r4, #84]	; 0x54
 8005570:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <prvInitialiseNewTask+0xc4>)
 8005572:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005574:	4642      	mov	r2, r8
 8005576:	4639      	mov	r1, r7
 8005578:	4630      	mov	r0, r6
 800557a:	f000 fcd5 	bl	8005f28 <pxPortInitialiseStack>
 800557e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005580:	f1b9 0f00 	cmp.w	r9, #0
 8005584:	d001      	beq.n	800558a <prvInitialiseNewTask+0xae>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005586:	f8c9 4000 	str.w	r4, [r9]
}
 800558a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800558e:	2300      	movs	r3, #0
 8005590:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8005594:	e7c9      	b.n	800552a <prvInitialiseNewTask+0x4e>
 8005596:	bf00      	nop
 8005598:	08006b6c 	.word	0x08006b6c
 800559c:	08006b8c 	.word	0x08006b8c
 80055a0:	08006b4c 	.word	0x08006b4c

080055a4 <prvInitialiseTaskLists>:
{
 80055a4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055a6:	2400      	movs	r4, #0
 80055a8:	e007      	b.n	80055ba <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055aa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80055ae:	0093      	lsls	r3, r2, #2
 80055b0:	480e      	ldr	r0, [pc, #56]	; (80055ec <prvInitialiseTaskLists+0x48>)
 80055b2:	4418      	add	r0, r3
 80055b4:	f7ff fbab 	bl	8004d0e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055b8:	3401      	adds	r4, #1
 80055ba:	2c06      	cmp	r4, #6
 80055bc:	d9f5      	bls.n	80055aa <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80055be:	4d0c      	ldr	r5, [pc, #48]	; (80055f0 <prvInitialiseTaskLists+0x4c>)
 80055c0:	4628      	mov	r0, r5
 80055c2:	f7ff fba4 	bl	8004d0e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055c6:	4c0b      	ldr	r4, [pc, #44]	; (80055f4 <prvInitialiseTaskLists+0x50>)
 80055c8:	4620      	mov	r0, r4
 80055ca:	f7ff fba0 	bl	8004d0e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055ce:	480a      	ldr	r0, [pc, #40]	; (80055f8 <prvInitialiseTaskLists+0x54>)
 80055d0:	f7ff fb9d 	bl	8004d0e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80055d4:	4809      	ldr	r0, [pc, #36]	; (80055fc <prvInitialiseTaskLists+0x58>)
 80055d6:	f7ff fb9a 	bl	8004d0e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80055da:	4809      	ldr	r0, [pc, #36]	; (8005600 <prvInitialiseTaskLists+0x5c>)
 80055dc:	f7ff fb97 	bl	8004d0e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80055e0:	4b08      	ldr	r3, [pc, #32]	; (8005604 <prvInitialiseTaskLists+0x60>)
 80055e2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055e4:	4b08      	ldr	r3, [pc, #32]	; (8005608 <prvInitialiseTaskLists+0x64>)
 80055e6:	601c      	str	r4, [r3, #0]
}
 80055e8:	bd38      	pop	{r3, r4, r5, pc}
 80055ea:	bf00      	nop
 80055ec:	20000408 	.word	0x20000408
 80055f0:	200004a8 	.word	0x200004a8
 80055f4:	200004bc 	.word	0x200004bc
 80055f8:	200004e0 	.word	0x200004e0
 80055fc:	2000050c 	.word	0x2000050c
 8005600:	200004f8 	.word	0x200004f8
 8005604:	20000400 	.word	0x20000400
 8005608:	20000404 	.word	0x20000404

0800560c <prvAddNewTaskToReadyList>:
{
 800560c:	b510      	push	{r4, lr}
 800560e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005610:	f000 fcb8 	bl	8005f84 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005614:	4a21      	ldr	r2, [pc, #132]	; (800569c <prvAddNewTaskToReadyList+0x90>)
 8005616:	6813      	ldr	r3, [r2, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800561c:	4b20      	ldr	r3, [pc, #128]	; (80056a0 <prvAddNewTaskToReadyList+0x94>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	b15b      	cbz	r3, 800563a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8005622:	4b20      	ldr	r3, [pc, #128]	; (80056a4 <prvAddNewTaskToReadyList+0x98>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	b96b      	cbnz	r3, 8005644 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005628:	4b1d      	ldr	r3, [pc, #116]	; (80056a0 <prvAddNewTaskToReadyList+0x94>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005630:	429a      	cmp	r2, r3
 8005632:	d807      	bhi.n	8005644 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8005634:	4b1a      	ldr	r3, [pc, #104]	; (80056a0 <prvAddNewTaskToReadyList+0x94>)
 8005636:	601c      	str	r4, [r3, #0]
 8005638:	e004      	b.n	8005644 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800563a:	4b19      	ldr	r3, [pc, #100]	; (80056a0 <prvAddNewTaskToReadyList+0x94>)
 800563c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800563e:	6813      	ldr	r3, [r2, #0]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d028      	beq.n	8005696 <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 8005644:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <prvAddNewTaskToReadyList+0x9c>)
 8005646:	6813      	ldr	r3, [r2, #0]
 8005648:	3301      	adds	r3, #1
 800564a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800564c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800564e:	2301      	movs	r3, #1
 8005650:	4083      	lsls	r3, r0
 8005652:	4a16      	ldr	r2, [pc, #88]	; (80056ac <prvAddNewTaskToReadyList+0xa0>)
 8005654:	6811      	ldr	r1, [r2, #0]
 8005656:	430b      	orrs	r3, r1
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800565e:	1d21      	adds	r1, r4, #4
 8005660:	4b13      	ldr	r3, [pc, #76]	; (80056b0 <prvAddNewTaskToReadyList+0xa4>)
 8005662:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005666:	f7ff fb60 	bl	8004d2a <vListInsertEnd>
	taskEXIT_CRITICAL();
 800566a:	f000 fcad 	bl	8005fc8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800566e:	4b0d      	ldr	r3, [pc, #52]	; (80056a4 <prvAddNewTaskToReadyList+0x98>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	b17b      	cbz	r3, 8005694 <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005674:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <prvAddNewTaskToReadyList+0x94>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800567c:	429a      	cmp	r2, r3
 800567e:	d209      	bcs.n	8005694 <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 8005680:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005688:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	f3bf 8f6f 	isb	sy
}
 8005694:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8005696:	f7ff ff85 	bl	80055a4 <prvInitialiseTaskLists>
 800569a:	e7d3      	b.n	8005644 <prvAddNewTaskToReadyList+0x38>
 800569c:	20000494 	.word	0x20000494
 80056a0:	200003fc 	.word	0x200003fc
 80056a4:	200004f4 	.word	0x200004f4
 80056a8:	200004a0 	.word	0x200004a0
 80056ac:	200004a4 	.word	0x200004a4
 80056b0:	20000408 	.word	0x20000408

080056b4 <prvDeleteTCB>:
	{
 80056b4:	b510      	push	{r4, lr}
 80056b6:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80056b8:	304c      	adds	r0, #76	; 0x4c
 80056ba:	f001 f981 	bl	80069c0 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056be:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 80056c2:	b163      	cbz	r3, 80056de <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d011      	beq.n	80056ec <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d00e      	beq.n	80056ea <prvDeleteTCB+0x36>
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	e7fe      	b.n	80056dc <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 80056de:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80056e0:	f000 fe86 	bl	80063f0 <vPortFree>
				vPortFree( pxTCB );
 80056e4:	4620      	mov	r0, r4
 80056e6:	f000 fe83 	bl	80063f0 <vPortFree>
	}
 80056ea:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80056ec:	4620      	mov	r0, r4
 80056ee:	f000 fe7f 	bl	80063f0 <vPortFree>
 80056f2:	e7fa      	b.n	80056ea <prvDeleteTCB+0x36>

080056f4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056f4:	4b0f      	ldr	r3, [pc, #60]	; (8005734 <prvCheckTasksWaitingTermination+0x40>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	b1d3      	cbz	r3, 8005730 <prvCheckTasksWaitingTermination+0x3c>
{
 80056fa:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80056fc:	f000 fc42 	bl	8005f84 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005700:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <prvCheckTasksWaitingTermination+0x44>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005706:	1d20      	adds	r0, r4, #4
 8005708:	f7ff fb33 	bl	8004d72 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800570c:	4a0b      	ldr	r2, [pc, #44]	; (800573c <prvCheckTasksWaitingTermination+0x48>)
 800570e:	6813      	ldr	r3, [r2, #0]
 8005710:	3b01      	subs	r3, #1
 8005712:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005714:	4a07      	ldr	r2, [pc, #28]	; (8005734 <prvCheckTasksWaitingTermination+0x40>)
 8005716:	6813      	ldr	r3, [r2, #0]
 8005718:	3b01      	subs	r3, #1
 800571a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800571c:	f000 fc54 	bl	8005fc8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005720:	4620      	mov	r0, r4
 8005722:	f7ff ffc7 	bl	80056b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005726:	4b03      	ldr	r3, [pc, #12]	; (8005734 <prvCheckTasksWaitingTermination+0x40>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e6      	bne.n	80056fc <prvCheckTasksWaitingTermination+0x8>
}
 800572e:	bd10      	pop	{r4, pc}
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20000498 	.word	0x20000498
 8005738:	2000050c 	.word	0x2000050c
 800573c:	20000494 	.word	0x20000494

08005740 <prvIdleTask>:
{
 8005740:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8005742:	f7ff ffd7 	bl	80056f4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005746:	4b07      	ldr	r3, [pc, #28]	; (8005764 <prvIdleTask+0x24>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d9f9      	bls.n	8005742 <prvIdleTask+0x2>
				taskYIELD();
 800574e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005756:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	e7ee      	b.n	8005742 <prvIdleTask+0x2>
 8005764:	20000408 	.word	0x20000408

08005768 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	4604      	mov	r4, r0
 800576c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800576e:	4b1d      	ldr	r3, [pc, #116]	; (80057e4 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005770:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005772:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <prvAddCurrentTaskToDelayedList+0x80>)
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	3004      	adds	r0, #4
 8005778:	f7ff fafb 	bl	8004d72 <uxListRemove>
 800577c:	b950      	cbnz	r0, 8005794 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800577e:	4b1a      	ldr	r3, [pc, #104]	; (80057e8 <prvAddCurrentTaskToDelayedList+0x80>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005784:	2301      	movs	r3, #1
 8005786:	fa03 f202 	lsl.w	r2, r3, r2
 800578a:	4918      	ldr	r1, [pc, #96]	; (80057ec <prvAddCurrentTaskToDelayedList+0x84>)
 800578c:	680b      	ldr	r3, [r1, #0]
 800578e:	ea23 0302 	bic.w	r3, r3, r2
 8005792:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005794:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005798:	d00d      	beq.n	80057b6 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800579a:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800579c:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <prvAddCurrentTaskToDelayedList+0x80>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80057a2:	42a6      	cmp	r6, r4
 80057a4:	d910      	bls.n	80057c8 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057a6:	4b12      	ldr	r3, [pc, #72]	; (80057f0 <prvAddCurrentTaskToDelayedList+0x88>)
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <prvAddCurrentTaskToDelayedList+0x80>)
 80057ac:	6819      	ldr	r1, [r3, #0]
 80057ae:	3104      	adds	r1, #4
 80057b0:	f7ff fac6 	bl	8004d40 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057b4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057b6:	2d00      	cmp	r5, #0
 80057b8:	d0ef      	beq.n	800579a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ba:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <prvAddCurrentTaskToDelayedList+0x80>)
 80057bc:	6819      	ldr	r1, [r3, #0]
 80057be:	3104      	adds	r1, #4
 80057c0:	480c      	ldr	r0, [pc, #48]	; (80057f4 <prvAddCurrentTaskToDelayedList+0x8c>)
 80057c2:	f7ff fab2 	bl	8004d2a <vListInsertEnd>
 80057c6:	e7f5      	b.n	80057b4 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057c8:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <prvAddCurrentTaskToDelayedList+0x90>)
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <prvAddCurrentTaskToDelayedList+0x80>)
 80057ce:	6819      	ldr	r1, [r3, #0]
 80057d0:	3104      	adds	r1, #4
 80057d2:	f7ff fab5 	bl	8004d40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057d6:	4b09      	ldr	r3, [pc, #36]	; (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	42a3      	cmp	r3, r4
 80057dc:	d9ea      	bls.n	80057b4 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
 80057de:	4b07      	ldr	r3, [pc, #28]	; (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 80057e0:	601c      	str	r4, [r3, #0]
}
 80057e2:	e7e7      	b.n	80057b4 <prvAddCurrentTaskToDelayedList+0x4c>
 80057e4:	20000520 	.word	0x20000520
 80057e8:	200003fc 	.word	0x200003fc
 80057ec:	200004a4 	.word	0x200004a4
 80057f0:	20000404 	.word	0x20000404
 80057f4:	200004f8 	.word	0x200004f8
 80057f8:	20000400 	.word	0x20000400
 80057fc:	200004d4 	.word	0x200004d4

08005800 <xTaskCreateStatic>:
	{
 8005800:	b530      	push	{r4, r5, lr}
 8005802:	b087      	sub	sp, #28
 8005804:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8005806:	b17c      	cbz	r4, 8005828 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005808:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800580a:	b1b5      	cbz	r5, 800583a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800580c:	25b4      	movs	r5, #180	; 0xb4
 800580e:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005810:	9d04      	ldr	r5, [sp, #16]
 8005812:	2db4      	cmp	r5, #180	; 0xb4
 8005814:	d01a      	beq.n	800584c <xTaskCreateStatic+0x4c>
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	e7fe      	b.n	8005826 <xTaskCreateStatic+0x26>
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8005838:	e7fe      	b.n	8005838 <xTaskCreateStatic+0x38>
 800583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800584a:	e7fe      	b.n	800584a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800584c:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800584e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005850:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005852:	2402      	movs	r4, #2
 8005854:	f885 40b1 	strb.w	r4, [r5, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005858:	2400      	movs	r4, #0
 800585a:	9403      	str	r4, [sp, #12]
 800585c:	9502      	str	r5, [sp, #8]
 800585e:	ac05      	add	r4, sp, #20
 8005860:	9401      	str	r4, [sp, #4]
 8005862:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005864:	9400      	str	r4, [sp, #0]
 8005866:	f7ff fe39 	bl	80054dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800586a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800586c:	f7ff fece 	bl	800560c <prvAddNewTaskToReadyList>
	}
 8005870:	9805      	ldr	r0, [sp, #20]
 8005872:	b007      	add	sp, #28
 8005874:	bd30      	pop	{r4, r5, pc}

08005876 <xTaskCreate>:
	{
 8005876:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800587a:	b085      	sub	sp, #20
 800587c:	4607      	mov	r7, r0
 800587e:	4688      	mov	r8, r1
 8005880:	4614      	mov	r4, r2
 8005882:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005884:	0090      	lsls	r0, r2, #2
 8005886:	f000 fd35 	bl	80062f4 <pvPortMalloc>
			if( pxStack != NULL )
 800588a:	b300      	cbz	r0, 80058ce <xTaskCreate+0x58>
 800588c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800588e:	20b4      	movs	r0, #180	; 0xb4
 8005890:	f000 fd30 	bl	80062f4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005894:	4605      	mov	r5, r0
 8005896:	b1b0      	cbz	r0, 80058c6 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8005898:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800589c:	b1e5      	cbz	r5, 80058d8 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800589e:	2300      	movs	r3, #0
 80058a0:	f885 30b1 	strb.w	r3, [r5, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058a4:	9303      	str	r3, [sp, #12]
 80058a6:	9502      	str	r5, [sp, #8]
 80058a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058aa:	9301      	str	r3, [sp, #4]
 80058ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	4633      	mov	r3, r6
 80058b2:	4622      	mov	r2, r4
 80058b4:	4641      	mov	r1, r8
 80058b6:	4638      	mov	r0, r7
 80058b8:	f7ff fe10 	bl	80054dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058bc:	4628      	mov	r0, r5
 80058be:	f7ff fea5 	bl	800560c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058c2:	2001      	movs	r0, #1
 80058c4:	e005      	b.n	80058d2 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 80058c6:	4648      	mov	r0, r9
 80058c8:	f000 fd92 	bl	80063f0 <vPortFree>
 80058cc:	e7e6      	b.n	800589c <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 80058d2:	b005      	add	sp, #20
 80058d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80058dc:	e7f9      	b.n	80058d2 <xTaskCreate+0x5c>
	...

080058e0 <vTaskStartScheduler>:
{
 80058e0:	b510      	push	{r4, lr}
 80058e2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058e4:	2400      	movs	r4, #0
 80058e6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058e8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058ea:	aa07      	add	r2, sp, #28
 80058ec:	a906      	add	r1, sp, #24
 80058ee:	a805      	add	r0, sp, #20
 80058f0:	f7fa fdf8 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058f4:	9b05      	ldr	r3, [sp, #20]
 80058f6:	9302      	str	r3, [sp, #8]
 80058f8:	9b06      	ldr	r3, [sp, #24]
 80058fa:	9301      	str	r3, [sp, #4]
 80058fc:	9400      	str	r4, [sp, #0]
 80058fe:	4623      	mov	r3, r4
 8005900:	9a07      	ldr	r2, [sp, #28]
 8005902:	4910      	ldr	r1, [pc, #64]	; (8005944 <vTaskStartScheduler+0x64>)
 8005904:	4810      	ldr	r0, [pc, #64]	; (8005948 <vTaskStartScheduler+0x68>)
 8005906:	f7ff ff7b 	bl	8005800 <xTaskCreateStatic>
 800590a:	4b10      	ldr	r3, [pc, #64]	; (800594c <vTaskStartScheduler+0x6c>)
 800590c:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800590e:	b1b8      	cbz	r0, 8005940 <vTaskStartScheduler+0x60>
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005920:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <vTaskStartScheduler+0x70>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	334c      	adds	r3, #76	; 0x4c
 8005926:	4a0b      	ldr	r2, [pc, #44]	; (8005954 <vTaskStartScheduler+0x74>)
 8005928:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800592a:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <vTaskStartScheduler+0x78>)
 800592c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005930:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005932:	4b0a      	ldr	r3, [pc, #40]	; (800595c <vTaskStartScheduler+0x7c>)
 8005934:	2201      	movs	r2, #1
 8005936:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005938:	4b09      	ldr	r3, [pc, #36]	; (8005960 <vTaskStartScheduler+0x80>)
 800593a:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800593c:	f000 fbbc 	bl	80060b8 <xPortStartScheduler>
}
 8005940:	b008      	add	sp, #32
 8005942:	bd10      	pop	{r4, pc}
 8005944:	08006b44 	.word	0x08006b44
 8005948:	08005741 	.word	0x08005741
 800594c:	200004d0 	.word	0x200004d0
 8005950:	200003fc 	.word	0x200003fc
 8005954:	20000030 	.word	0x20000030
 8005958:	200004d4 	.word	0x200004d4
 800595c:	200004f4 	.word	0x200004f4
 8005960:	20000520 	.word	0x20000520

08005964 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005964:	4a02      	ldr	r2, [pc, #8]	; (8005970 <vTaskSuspendAll+0xc>)
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	3301      	adds	r3, #1
 800596a:	6013      	str	r3, [r2, #0]
}
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	2000049c 	.word	0x2000049c

08005974 <xTaskIncrementTick>:
{
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005976:	4b3a      	ldr	r3, [pc, #232]	; (8005a60 <xTaskIncrementTick+0xec>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d169      	bne.n	8005a52 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800597e:	4b39      	ldr	r3, [pc, #228]	; (8005a64 <xTaskIncrementTick+0xf0>)
 8005980:	681d      	ldr	r5, [r3, #0]
 8005982:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8005984:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005986:	b9c5      	cbnz	r5, 80059ba <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8005988:	4b37      	ldr	r3, [pc, #220]	; (8005a68 <xTaskIncrementTick+0xf4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	b143      	cbz	r3, 80059a2 <xTaskIncrementTick+0x2e>
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	e7fe      	b.n	80059a0 <xTaskIncrementTick+0x2c>
 80059a2:	4a31      	ldr	r2, [pc, #196]	; (8005a68 <xTaskIncrementTick+0xf4>)
 80059a4:	6811      	ldr	r1, [r2, #0]
 80059a6:	4b31      	ldr	r3, [pc, #196]	; (8005a6c <xTaskIncrementTick+0xf8>)
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	6010      	str	r0, [r2, #0]
 80059ac:	6019      	str	r1, [r3, #0]
 80059ae:	4a30      	ldr	r2, [pc, #192]	; (8005a70 <xTaskIncrementTick+0xfc>)
 80059b0:	6813      	ldr	r3, [r2, #0]
 80059b2:	3301      	adds	r3, #1
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	f7ff fd7b 	bl	80054b0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059ba:	4b2e      	ldr	r3, [pc, #184]	; (8005a74 <xTaskIncrementTick+0x100>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	42ab      	cmp	r3, r5
 80059c0:	d93d      	bls.n	8005a3e <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 80059c2:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059c4:	4b2c      	ldr	r3, [pc, #176]	; (8005a78 <xTaskIncrementTick+0x104>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80059ce:	009a      	lsls	r2, r3, #2
 80059d0:	4b2a      	ldr	r3, [pc, #168]	; (8005a7c <xTaskIncrementTick+0x108>)
 80059d2:	589b      	ldr	r3, [r3, r2]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d900      	bls.n	80059da <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 80059d8:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 80059da:	4b29      	ldr	r3, [pc, #164]	; (8005a80 <xTaskIncrementTick+0x10c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d03c      	beq.n	8005a5c <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 80059e2:	2701      	movs	r7, #1
	return xSwitchRequired;
 80059e4:	e03a      	b.n	8005a5c <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 80059e6:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059e8:	4b1f      	ldr	r3, [pc, #124]	; (8005a68 <xTaskIncrementTick+0xf4>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	b343      	cbz	r3, 8005a42 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f0:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <xTaskIncrementTick+0xf4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059f8:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80059fa:	429d      	cmp	r5, r3
 80059fc:	d326      	bcc.n	8005a4c <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059fe:	1d26      	adds	r6, r4, #4
 8005a00:	4630      	mov	r0, r6
 8005a02:	f7ff f9b6 	bl	8004d72 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005a08:	b11b      	cbz	r3, 8005a12 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a0a:	f104 0018 	add.w	r0, r4, #24
 8005a0e:	f7ff f9b0 	bl	8004d72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a14:	2201      	movs	r2, #1
 8005a16:	409a      	lsls	r2, r3
 8005a18:	491a      	ldr	r1, [pc, #104]	; (8005a84 <xTaskIncrementTick+0x110>)
 8005a1a:	6808      	ldr	r0, [r1, #0]
 8005a1c:	4302      	orrs	r2, r0
 8005a1e:	600a      	str	r2, [r1, #0]
 8005a20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a24:	009a      	lsls	r2, r3, #2
 8005a26:	4631      	mov	r1, r6
 8005a28:	4814      	ldr	r0, [pc, #80]	; (8005a7c <xTaskIncrementTick+0x108>)
 8005a2a:	4410      	add	r0, r2
 8005a2c:	f7ff f97d 	bl	8004d2a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a32:	4b11      	ldr	r3, [pc, #68]	; (8005a78 <xTaskIncrementTick+0x104>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d2d4      	bcs.n	80059e6 <xTaskIncrementTick+0x72>
 8005a3c:	e7d4      	b.n	80059e8 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8005a3e:	2700      	movs	r7, #0
 8005a40:	e7d2      	b.n	80059e8 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a42:	4b0c      	ldr	r3, [pc, #48]	; (8005a74 <xTaskIncrementTick+0x100>)
 8005a44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a48:	601a      	str	r2, [r3, #0]
					break;
 8005a4a:	e7bb      	b.n	80059c4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8005a4c:	4a09      	ldr	r2, [pc, #36]	; (8005a74 <xTaskIncrementTick+0x100>)
 8005a4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a50:	e7b8      	b.n	80059c4 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8005a52:	4a0d      	ldr	r2, [pc, #52]	; (8005a88 <xTaskIncrementTick+0x114>)
 8005a54:	6813      	ldr	r3, [r2, #0]
 8005a56:	3301      	adds	r3, #1
 8005a58:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005a5a:	2700      	movs	r7, #0
}
 8005a5c:	4638      	mov	r0, r7
 8005a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a60:	2000049c 	.word	0x2000049c
 8005a64:	20000520 	.word	0x20000520
 8005a68:	20000400 	.word	0x20000400
 8005a6c:	20000404 	.word	0x20000404
 8005a70:	200004d8 	.word	0x200004d8
 8005a74:	200004d4 	.word	0x200004d4
 8005a78:	200003fc 	.word	0x200003fc
 8005a7c:	20000408 	.word	0x20000408
 8005a80:	20000524 	.word	0x20000524
 8005a84:	200004a4 	.word	0x200004a4
 8005a88:	200004dc 	.word	0x200004dc

08005a8c <xTaskResumeAll>:
{
 8005a8c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8005a8e:	4b35      	ldr	r3, [pc, #212]	; (8005b64 <xTaskResumeAll+0xd8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	b943      	cbnz	r3, 8005aa6 <xTaskResumeAll+0x1a>
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	e7fe      	b.n	8005aa4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8005aa6:	f000 fa6d 	bl	8005f84 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005aaa:	4b2e      	ldr	r3, [pc, #184]	; (8005b64 <xTaskResumeAll+0xd8>)
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	3a01      	subs	r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d14f      	bne.n	8005b58 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ab8:	4b2b      	ldr	r3, [pc, #172]	; (8005b68 <xTaskResumeAll+0xdc>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	b90b      	cbnz	r3, 8005ac2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8005abe:	2400      	movs	r4, #0
 8005ac0:	e04b      	b.n	8005b5a <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8005ac2:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ac4:	4b29      	ldr	r3, [pc, #164]	; (8005b6c <xTaskResumeAll+0xe0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	b31b      	cbz	r3, 8005b12 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aca:	4b28      	ldr	r3, [pc, #160]	; (8005b6c <xTaskResumeAll+0xe0>)
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ad0:	f104 0018 	add.w	r0, r4, #24
 8005ad4:	f7ff f94d 	bl	8004d72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ad8:	1d25      	adds	r5, r4, #4
 8005ada:	4628      	mov	r0, r5
 8005adc:	f7ff f949 	bl	8004d72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ae0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4083      	lsls	r3, r0
 8005ae6:	4a22      	ldr	r2, [pc, #136]	; (8005b70 <xTaskResumeAll+0xe4>)
 8005ae8:	6811      	ldr	r1, [r2, #0]
 8005aea:	430b      	orrs	r3, r1
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005af2:	4629      	mov	r1, r5
 8005af4:	4b1f      	ldr	r3, [pc, #124]	; (8005b74 <xTaskResumeAll+0xe8>)
 8005af6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005afa:	f7ff f916 	bl	8004d2a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005afe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005b00:	4b1d      	ldr	r3, [pc, #116]	; (8005b78 <xTaskResumeAll+0xec>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d3dc      	bcc.n	8005ac4 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8005b0a:	4b1c      	ldr	r3, [pc, #112]	; (8005b7c <xTaskResumeAll+0xf0>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	e7d8      	b.n	8005ac4 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8005b12:	b10c      	cbz	r4, 8005b18 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8005b14:	f7ff fccc 	bl	80054b0 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b18:	4b19      	ldr	r3, [pc, #100]	; (8005b80 <xTaskResumeAll+0xf4>)
 8005b1a:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005b1c:	b984      	cbnz	r4, 8005b40 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8005b1e:	4b17      	ldr	r3, [pc, #92]	; (8005b7c <xTaskResumeAll+0xf0>)
 8005b20:	681c      	ldr	r4, [r3, #0]
 8005b22:	b1d4      	cbz	r4, 8005b5a <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8005b24:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005b38:	2401      	movs	r4, #1
 8005b3a:	e00e      	b.n	8005b5a <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b3c:	3c01      	subs	r4, #1
 8005b3e:	d007      	beq.n	8005b50 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8005b40:	f7ff ff18 	bl	8005974 <xTaskIncrementTick>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d0f9      	beq.n	8005b3c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8005b48:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <xTaskResumeAll+0xf0>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	e7f5      	b.n	8005b3c <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <xTaskResumeAll+0xf4>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	e7e2      	b.n	8005b1e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8005b58:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005b5a:	f000 fa35 	bl	8005fc8 <vPortExitCritical>
}
 8005b5e:	4620      	mov	r0, r4
 8005b60:	bd38      	pop	{r3, r4, r5, pc}
 8005b62:	bf00      	nop
 8005b64:	2000049c 	.word	0x2000049c
 8005b68:	20000494 	.word	0x20000494
 8005b6c:	200004e0 	.word	0x200004e0
 8005b70:	200004a4 	.word	0x200004a4
 8005b74:	20000408 	.word	0x20000408
 8005b78:	200003fc 	.word	0x200003fc
 8005b7c:	20000524 	.word	0x20000524
 8005b80:	200004dc 	.word	0x200004dc

08005b84 <vTaskDelay>:
	{
 8005b84:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b86:	b1a8      	cbz	r0, 8005bb4 <vTaskDelay+0x30>
 8005b88:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8005b8a:	4b10      	ldr	r3, [pc, #64]	; (8005bcc <vTaskDelay+0x48>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	b143      	cbz	r3, 8005ba2 <vTaskDelay+0x1e>
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	e7fe      	b.n	8005ba0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005ba2:	f7ff fedf 	bl	8005964 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f7ff fddd 	bl	8005768 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005bae:	f7ff ff6d 	bl	8005a8c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005bb2:	b948      	cbnz	r0, 8005bc8 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8005bb4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bbc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	f3bf 8f6f 	isb	sy
	}
 8005bc8:	bd10      	pop	{r4, pc}
 8005bca:	bf00      	nop
 8005bcc:	2000049c 	.word	0x2000049c

08005bd0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bd0:	4b22      	ldr	r3, [pc, #136]	; (8005c5c <vTaskSwitchContext+0x8c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	b11b      	cbz	r3, 8005bde <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8005bd6:	4b22      	ldr	r3, [pc, #136]	; (8005c60 <vTaskSwitchContext+0x90>)
 8005bd8:	2201      	movs	r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8005bde:	4b20      	ldr	r3, [pc, #128]	; (8005c60 <vTaskSwitchContext+0x90>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005be4:	4b1f      	ldr	r3, [pc, #124]	; (8005c64 <vTaskSwitchContext+0x94>)
 8005be6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005be8:	fab3 f383 	clz	r3, r3
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	f1c3 031f 	rsb	r3, r3, #31
 8005bf2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005bf6:	008a      	lsls	r2, r1, #2
 8005bf8:	491b      	ldr	r1, [pc, #108]	; (8005c68 <vTaskSwitchContext+0x98>)
 8005bfa:	588a      	ldr	r2, [r1, r2]
 8005bfc:	b942      	cbnz	r2, 8005c10 <vTaskSwitchContext+0x40>
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	e7fe      	b.n	8005c0e <vTaskSwitchContext+0x3e>
 8005c10:	4915      	ldr	r1, [pc, #84]	; (8005c68 <vTaskSwitchContext+0x98>)
 8005c12:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005c16:	0082      	lsls	r2, r0, #2
 8005c18:	440a      	add	r2, r1
 8005c1a:	6850      	ldr	r0, [r2, #4]
 8005c1c:	6840      	ldr	r0, [r0, #4]
 8005c1e:	6050      	str	r0, [r2, #4]
 8005c20:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8005c24:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8005c28:	3208      	adds	r2, #8
 8005c2a:	4411      	add	r1, r2
 8005c2c:	4288      	cmp	r0, r1
 8005c2e:	d00d      	beq.n	8005c4c <vTaskSwitchContext+0x7c>
 8005c30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c34:	009a      	lsls	r2, r3, #2
 8005c36:	4b0c      	ldr	r3, [pc, #48]	; (8005c68 <vTaskSwitchContext+0x98>)
 8005c38:	4413      	add	r3, r2
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <vTaskSwitchContext+0x9c>)
 8005c40:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	334c      	adds	r3, #76	; 0x4c
 8005c46:	4a0a      	ldr	r2, [pc, #40]	; (8005c70 <vTaskSwitchContext+0xa0>)
 8005c48:	6013      	str	r3, [r2, #0]
}
 8005c4a:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c4c:	6840      	ldr	r0, [r0, #4]
 8005c4e:	4662      	mov	r2, ip
 8005c50:	0091      	lsls	r1, r2, #2
 8005c52:	4a05      	ldr	r2, [pc, #20]	; (8005c68 <vTaskSwitchContext+0x98>)
 8005c54:	440a      	add	r2, r1
 8005c56:	6050      	str	r0, [r2, #4]
 8005c58:	e7ea      	b.n	8005c30 <vTaskSwitchContext+0x60>
 8005c5a:	bf00      	nop
 8005c5c:	2000049c 	.word	0x2000049c
 8005c60:	20000524 	.word	0x20000524
 8005c64:	200004a4 	.word	0x200004a4
 8005c68:	20000408 	.word	0x20000408
 8005c6c:	200003fc 	.word	0x200003fc
 8005c70:	20000030 	.word	0x20000030

08005c74 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005c74:	b158      	cbz	r0, 8005c8e <vTaskPlaceOnEventList+0x1a>
{
 8005c76:	b510      	push	{r4, lr}
 8005c78:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c7a:	4a09      	ldr	r2, [pc, #36]	; (8005ca0 <vTaskPlaceOnEventList+0x2c>)
 8005c7c:	6811      	ldr	r1, [r2, #0]
 8005c7e:	3118      	adds	r1, #24
 8005c80:	f7ff f85e 	bl	8004d40 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c84:	2101      	movs	r1, #1
 8005c86:	4620      	mov	r0, r4
 8005c88:	f7ff fd6e 	bl	8005768 <prvAddCurrentTaskToDelayedList>
}
 8005c8c:	bd10      	pop	{r4, pc}
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8005c9e:	e7fe      	b.n	8005c9e <vTaskPlaceOnEventList+0x2a>
 8005ca0:	200003fc 	.word	0x200003fc

08005ca4 <xTaskRemoveFromEventList>:
{
 8005ca4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca6:	68c3      	ldr	r3, [r0, #12]
 8005ca8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005caa:	b324      	cbz	r4, 8005cf6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cac:	f104 0518 	add.w	r5, r4, #24
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	f7ff f85e 	bl	8004d72 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb6:	4b18      	ldr	r3, [pc, #96]	; (8005d18 <xTaskRemoveFromEventList+0x74>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	bb2b      	cbnz	r3, 8005d08 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cbc:	1d25      	adds	r5, r4, #4
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f7ff f857 	bl	8004d72 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cc4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4083      	lsls	r3, r0
 8005cca:	4a14      	ldr	r2, [pc, #80]	; (8005d1c <xTaskRemoveFromEventList+0x78>)
 8005ccc:	6811      	ldr	r1, [r2, #0]
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	4b11      	ldr	r3, [pc, #68]	; (8005d20 <xTaskRemoveFromEventList+0x7c>)
 8005cda:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005cde:	f7ff f824 	bl	8004d2a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ce2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005ce4:	4b0f      	ldr	r3, [pc, #60]	; (8005d24 <xTaskRemoveFromEventList+0x80>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d911      	bls.n	8005d12 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8005cee:	2001      	movs	r0, #1
 8005cf0:	4b0d      	ldr	r3, [pc, #52]	; (8005d28 <xTaskRemoveFromEventList+0x84>)
 8005cf2:	6018      	str	r0, [r3, #0]
}
 8005cf4:	bd38      	pop	{r3, r4, r5, pc}
 8005cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005d06:	e7fe      	b.n	8005d06 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d08:	4629      	mov	r1, r5
 8005d0a:	4808      	ldr	r0, [pc, #32]	; (8005d2c <xTaskRemoveFromEventList+0x88>)
 8005d0c:	f7ff f80d 	bl	8004d2a <vListInsertEnd>
 8005d10:	e7e7      	b.n	8005ce2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8005d12:	2000      	movs	r0, #0
	return xReturn;
 8005d14:	e7ee      	b.n	8005cf4 <xTaskRemoveFromEventList+0x50>
 8005d16:	bf00      	nop
 8005d18:	2000049c 	.word	0x2000049c
 8005d1c:	200004a4 	.word	0x200004a4
 8005d20:	20000408 	.word	0x20000408
 8005d24:	200003fc 	.word	0x200003fc
 8005d28:	20000524 	.word	0x20000524
 8005d2c:	200004e0 	.word	0x200004e0

08005d30 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d30:	4b03      	ldr	r3, [pc, #12]	; (8005d40 <vTaskInternalSetTimeOutState+0x10>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d36:	4b03      	ldr	r3, [pc, #12]	; (8005d44 <vTaskInternalSetTimeOutState+0x14>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6043      	str	r3, [r0, #4]
}
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	200004d8 	.word	0x200004d8
 8005d44:	20000520 	.word	0x20000520

08005d48 <xTaskCheckForTimeOut>:
{
 8005d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8005d4a:	b1c8      	cbz	r0, 8005d80 <xTaskCheckForTimeOut+0x38>
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8005d50:	b1f9      	cbz	r1, 8005d92 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8005d52:	f000 f917 	bl	8005f84 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005d56:	4b1b      	ldr	r3, [pc, #108]	; (8005dc4 <xTaskCheckForTimeOut+0x7c>)
 8005d58:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d5a:	686b      	ldr	r3, [r5, #4]
 8005d5c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8005d5e:	6822      	ldr	r2, [r4, #0]
 8005d60:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005d64:	d026      	beq.n	8005db4 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d66:	4e18      	ldr	r6, [pc, #96]	; (8005dc8 <xTaskCheckForTimeOut+0x80>)
 8005d68:	6836      	ldr	r6, [r6, #0]
 8005d6a:	682f      	ldr	r7, [r5, #0]
 8005d6c:	42b7      	cmp	r7, r6
 8005d6e:	d001      	beq.n	8005d74 <xTaskCheckForTimeOut+0x2c>
 8005d70:	428b      	cmp	r3, r1
 8005d72:	d924      	bls.n	8005dbe <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d74:	4282      	cmp	r2, r0
 8005d76:	d815      	bhi.n	8005da4 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005d7c:	2401      	movs	r4, #1
 8005d7e:	e01a      	b.n	8005db6 <xTaskCheckForTimeOut+0x6e>
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8005d90:	e7fe      	b.n	8005d90 <xTaskCheckForTimeOut+0x48>
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8005da2:	e7fe      	b.n	8005da2 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8005da4:	1a5b      	subs	r3, r3, r1
 8005da6:	4413      	add	r3, r2
 8005da8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005daa:	4628      	mov	r0, r5
 8005dac:	f7ff ffc0 	bl	8005d30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005db0:	2400      	movs	r4, #0
 8005db2:	e000      	b.n	8005db6 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8005db4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005db6:	f000 f907 	bl	8005fc8 <vPortExitCritical>
}
 8005dba:	4620      	mov	r0, r4
 8005dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8005dbe:	2401      	movs	r4, #1
 8005dc0:	e7f9      	b.n	8005db6 <xTaskCheckForTimeOut+0x6e>
 8005dc2:	bf00      	nop
 8005dc4:	20000520 	.word	0x20000520
 8005dc8:	200004d8 	.word	0x200004d8

08005dcc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005dcc:	4b01      	ldr	r3, [pc, #4]	; (8005dd4 <vTaskMissedYield+0x8>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
}
 8005dd2:	4770      	bx	lr
 8005dd4:	20000524 	.word	0x20000524

08005dd8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005dd8:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <xTaskGetSchedulerState+0x18>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	b133      	cbz	r3, 8005dec <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dde:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <xTaskGetSchedulerState+0x1c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	b10b      	cbz	r3, 8005de8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8005de4:	2000      	movs	r0, #0
	}
 8005de6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8005de8:	2002      	movs	r0, #2
 8005dea:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dec:	2001      	movs	r0, #1
 8005dee:	4770      	bx	lr
 8005df0:	200004f4 	.word	0x200004f4
 8005df4:	2000049c 	.word	0x2000049c

08005df8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d04c      	beq.n	8005e96 <xTaskPriorityDisinherit+0x9e>
	{
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8005e00:	4b27      	ldr	r3, [pc, #156]	; (8005ea0 <xTaskPriorityDisinherit+0xa8>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4283      	cmp	r3, r0
 8005e06:	d008      	beq.n	8005e1a <xTaskPriorityDisinherit+0x22>
 8005e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	e7fe      	b.n	8005e18 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e1a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005e1c:	b943      	cbnz	r3, 8005e30 <xTaskPriorityDisinherit+0x38>
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	e7fe      	b.n	8005e2e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8005e30:	3b01      	subs	r3, #1
 8005e32:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e34:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005e36:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e38:	4291      	cmp	r1, r2
 8005e3a:	d02e      	beq.n	8005e9a <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e3c:	b10b      	cbz	r3, 8005e42 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8005e3e:	2000      	movs	r0, #0
	}
 8005e40:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e42:	1d05      	adds	r5, r0, #4
 8005e44:	4628      	mov	r0, r5
 8005e46:	f7fe ff94 	bl	8004d72 <uxListRemove>
 8005e4a:	b970      	cbnz	r0, 8005e6a <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005e4e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4913      	ldr	r1, [pc, #76]	; (8005ea4 <xTaskPriorityDisinherit+0xac>)
 8005e56:	58cb      	ldr	r3, [r1, r3]
 8005e58:	b93b      	cbnz	r3, 8005e6a <xTaskPriorityDisinherit+0x72>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	fa03 f202 	lsl.w	r2, r3, r2
 8005e60:	4911      	ldr	r1, [pc, #68]	; (8005ea8 <xTaskPriorityDisinherit+0xb0>)
 8005e62:	680b      	ldr	r3, [r1, #0]
 8005e64:	ea23 0302 	bic.w	r3, r3, r2
 8005e68:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e6a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005e6c:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e6e:	f1c0 0307 	rsb	r3, r0, #7
 8005e72:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e74:	2401      	movs	r4, #1
 8005e76:	fa04 f300 	lsl.w	r3, r4, r0
 8005e7a:	4a0b      	ldr	r2, [pc, #44]	; (8005ea8 <xTaskPriorityDisinherit+0xb0>)
 8005e7c:	6811      	ldr	r1, [r2, #0]
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e86:	4629      	mov	r1, r5
 8005e88:	4b06      	ldr	r3, [pc, #24]	; (8005ea4 <xTaskPriorityDisinherit+0xac>)
 8005e8a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005e8e:	f7fe ff4c 	bl	8004d2a <vListInsertEnd>
					xReturn = pdTRUE;
 8005e92:	4620      	mov	r0, r4
 8005e94:	e7d4      	b.n	8005e40 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8005e96:	2000      	movs	r0, #0
	}
 8005e98:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	e7d0      	b.n	8005e40 <xTaskPriorityDisinherit+0x48>
 8005e9e:	bf00      	nop
 8005ea0:	200003fc 	.word	0x200003fc
 8005ea4:	20000408 	.word	0x20000408
 8005ea8:	200004a4 	.word	0x200004a4

08005eac <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005eac:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005eb2:	4b0d      	ldr	r3, [pc, #52]	; (8005ee8 <prvTaskExitError+0x3c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eba:	d008      	beq.n	8005ece <prvTaskExitError+0x22>
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	e7fe      	b.n	8005ecc <prvTaskExitError+0x20>
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ede:	9b01      	ldr	r3, [sp, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0fc      	beq.n	8005ede <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ee4:	b002      	add	sp, #8
 8005ee6:	4770      	bx	lr
 8005ee8:	2000002c 	.word	0x2000002c

08005eec <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005eec:	4808      	ldr	r0, [pc, #32]	; (8005f10 <prvPortStartFirstTask+0x24>)
 8005eee:	6800      	ldr	r0, [r0, #0]
 8005ef0:	6800      	ldr	r0, [r0, #0]
 8005ef2:	f380 8808 	msr	MSP, r0
 8005ef6:	f04f 0000 	mov.w	r0, #0
 8005efa:	f380 8814 	msr	CONTROL, r0
 8005efe:	b662      	cpsie	i
 8005f00:	b661      	cpsie	f
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	df00      	svc	0
 8005f0c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f0e:	0000      	.short	0x0000
 8005f10:	e000ed08 	.word	0xe000ed08

08005f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f24 <vPortEnableVFP+0x10>
 8005f18:	6801      	ldr	r1, [r0, #0]
 8005f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f1e:	6001      	str	r1, [r0, #0]
 8005f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f22:	0000      	.short	0x0000
 8005f24:	e000ed88 	.word	0xe000ed88

08005f28 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f2c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f30:	f021 0101 	bic.w	r1, r1, #1
 8005f34:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f38:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <pxPortInitialiseStack+0x28>)
 8005f3a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f3e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f42:	f06f 0302 	mvn.w	r3, #2
 8005f46:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005f4a:	3844      	subs	r0, #68	; 0x44
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	08005ead 	.word	0x08005ead
	...

08005f60 <SVC_Handler>:
	__asm volatile (
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <pxCurrentTCBConst2>)
 8005f62:	6819      	ldr	r1, [r3, #0]
 8005f64:	6808      	ldr	r0, [r1, #0]
 8005f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6a:	f380 8809 	msr	PSP, r0
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f04f 0000 	mov.w	r0, #0
 8005f76:	f380 8811 	msr	BASEPRI, r0
 8005f7a:	4770      	bx	lr
 8005f7c:	f3af 8000 	nop.w

08005f80 <pxCurrentTCBConst2>:
 8005f80:	200003fc 	.word	0x200003fc

08005f84 <vPortEnterCritical>:
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005f94:	4a0b      	ldr	r2, [pc, #44]	; (8005fc4 <vPortEnterCritical+0x40>)
 8005f96:	6813      	ldr	r3, [r2, #0]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d000      	beq.n	8005fa2 <vPortEnterCritical+0x1e>
}
 8005fa0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fa2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005fa6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8005faa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005fae:	d0f7      	beq.n	8005fa0 <vPortEnterCritical+0x1c>
 8005fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	e7fe      	b.n	8005fc0 <vPortEnterCritical+0x3c>
 8005fc2:	bf00      	nop
 8005fc4:	2000002c 	.word	0x2000002c

08005fc8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005fc8:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <vPortExitCritical+0x28>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	b943      	cbnz	r3, 8005fe0 <vPortExitCritical+0x18>
 8005fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	e7fe      	b.n	8005fde <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	4a03      	ldr	r2, [pc, #12]	; (8005ff0 <vPortExitCritical+0x28>)
 8005fe4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fe6:	b90b      	cbnz	r3, 8005fec <vPortExitCritical+0x24>
	__asm volatile
 8005fe8:	f383 8811 	msr	BASEPRI, r3
}
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	2000002c 	.word	0x2000002c
	...

08006000 <PendSV_Handler>:
	__asm volatile
 8006000:	f3ef 8009 	mrs	r0, PSP
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	4b15      	ldr	r3, [pc, #84]	; (8006060 <pxCurrentTCBConst>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	f01e 0f10 	tst.w	lr, #16
 8006010:	bf08      	it	eq
 8006012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601a:	6010      	str	r0, [r2, #0]
 800601c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006024:	f380 8811 	msr	BASEPRI, r0
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f7ff fdce 	bl	8005bd0 <vTaskSwitchContext>
 8006034:	f04f 0000 	mov.w	r0, #0
 8006038:	f380 8811 	msr	BASEPRI, r0
 800603c:	bc09      	pop	{r0, r3}
 800603e:	6819      	ldr	r1, [r3, #0]
 8006040:	6808      	ldr	r0, [r1, #0]
 8006042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006046:	f01e 0f10 	tst.w	lr, #16
 800604a:	bf08      	it	eq
 800604c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006050:	f380 8809 	msr	PSP, r0
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	f3af 8000 	nop.w

08006060 <pxCurrentTCBConst>:
 8006060:	200003fc 	.word	0x200003fc

08006064 <SysTick_Handler>:
{
 8006064:	b508      	push	{r3, lr}
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006076:	f7ff fc7d 	bl	8005974 <xTaskIncrementTick>
 800607a:	b128      	cbz	r0, 8006088 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800607c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006084:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8006088:	2300      	movs	r3, #0
 800608a:	f383 8811 	msr	BASEPRI, r3
}
 800608e:	bd08      	pop	{r3, pc}

08006090 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006090:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8006094:	2300      	movs	r3, #0
 8006096:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006098:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800609a:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <vPortSetupTimerInterrupt+0x20>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4905      	ldr	r1, [pc, #20]	; (80060b4 <vPortSetupTimerInterrupt+0x24>)
 80060a0:	fba1 1303 	umull	r1, r3, r1, r3
 80060a4:	099b      	lsrs	r3, r3, #6
 80060a6:	3b01      	subs	r3, #1
 80060a8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060aa:	2307      	movs	r3, #7
 80060ac:	6113      	str	r3, [r2, #16]
}
 80060ae:	4770      	bx	lr
 80060b0:	20000000 	.word	0x20000000
 80060b4:	10624dd3 	.word	0x10624dd3

080060b8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80060bc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80060c0:	4b3d      	ldr	r3, [pc, #244]	; (80061b8 <xPortStartScheduler+0x100>)
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d01c      	beq.n	8006100 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80060ca:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80060ce:	4b3b      	ldr	r3, [pc, #236]	; (80061bc <xPortStartScheduler+0x104>)
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d01e      	beq.n	8006112 <xPortStartScheduler+0x5a>
{
 80060d4:	b530      	push	{r4, r5, lr}
 80060d6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060d8:	4b39      	ldr	r3, [pc, #228]	; (80061c0 <xPortStartScheduler+0x108>)
 80060da:	781a      	ldrb	r2, [r3, #0]
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060e0:	22ff      	movs	r2, #255	; 0xff
 80060e2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80060f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060f4:	4a33      	ldr	r2, [pc, #204]	; (80061c4 <xPortStartScheduler+0x10c>)
 80060f6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060f8:	4b33      	ldr	r3, [pc, #204]	; (80061c8 <xPortStartScheduler+0x110>)
 80060fa:	2207      	movs	r2, #7
 80060fc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060fe:	e01b      	b.n	8006138 <xPortStartScheduler+0x80>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006110:	e7fe      	b.n	8006110 <xPortStartScheduler+0x58>
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006122:	e7fe      	b.n	8006122 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8006124:	4a28      	ldr	r2, [pc, #160]	; (80061c8 <xPortStartScheduler+0x110>)
 8006126:	6813      	ldr	r3, [r2, #0]
 8006128:	3b01      	subs	r3, #1
 800612a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800612c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	b2db      	uxtb	r3, r3
 8006134:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006138:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800613c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006140:	d1f0      	bne.n	8006124 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006142:	4b21      	ldr	r3, [pc, #132]	; (80061c8 <xPortStartScheduler+0x110>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b03      	cmp	r3, #3
 8006148:	d008      	beq.n	800615c <xPortStartScheduler+0xa4>
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	e7fe      	b.n	800615a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800615c:	021b      	lsls	r3, r3, #8
 800615e:	4a1a      	ldr	r2, [pc, #104]	; (80061c8 <xPortStartScheduler+0x110>)
 8006160:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006162:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006166:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006168:	9b01      	ldr	r3, [sp, #4]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	4a14      	ldr	r2, [pc, #80]	; (80061c0 <xPortStartScheduler+0x108>)
 800616e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006170:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8006174:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800617c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006180:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006184:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006188:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800618c:	f7ff ff80 	bl	8006090 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006190:	2500      	movs	r5, #0
 8006192:	4b0e      	ldr	r3, [pc, #56]	; (80061cc <xPortStartScheduler+0x114>)
 8006194:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8006196:	f7ff febd 	bl	8005f14 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800619a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800619e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061a2:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 80061a6:	f7ff fea1 	bl	8005eec <prvPortStartFirstTask>
	vTaskSwitchContext();
 80061aa:	f7ff fd11 	bl	8005bd0 <vTaskSwitchContext>
	prvTaskExitError();
 80061ae:	f7ff fe7d 	bl	8005eac <prvTaskExitError>
}
 80061b2:	4628      	mov	r0, r5
 80061b4:	b003      	add	sp, #12
 80061b6:	bd30      	pop	{r4, r5, pc}
 80061b8:	410fc271 	.word	0x410fc271
 80061bc:	410fc270 	.word	0x410fc270
 80061c0:	e000e400 	.word	0xe000e400
 80061c4:	20000528 	.word	0x20000528
 80061c8:	2000052c 	.word	0x2000052c
 80061cc:	2000002c 	.word	0x2000002c

080061d0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80061d0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80061d4:	2b0f      	cmp	r3, #15
 80061d6:	d90f      	bls.n	80061f8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80061d8:	4a11      	ldr	r2, [pc, #68]	; (8006220 <vPortValidateInterruptPriority+0x50>)
 80061da:	5c9b      	ldrb	r3, [r3, r2]
 80061dc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061de:	4a11      	ldr	r2, [pc, #68]	; (8006224 <vPortValidateInterruptPriority+0x54>)
 80061e0:	7812      	ldrb	r2, [r2, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d908      	bls.n	80061f8 <vPortValidateInterruptPriority+0x28>
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	e7fe      	b.n	80061f6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80061fc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8006200:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006204:	4a08      	ldr	r2, [pc, #32]	; (8006228 <vPortValidateInterruptPriority+0x58>)
 8006206:	6812      	ldr	r2, [r2, #0]
 8006208:	4293      	cmp	r3, r2
 800620a:	d908      	bls.n	800621e <vPortValidateInterruptPriority+0x4e>
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	e7fe      	b.n	800621c <vPortValidateInterruptPriority+0x4c>
	}
 800621e:	4770      	bx	lr
 8006220:	e000e3f0 	.word	0xe000e3f0
 8006224:	20000528 	.word	0x20000528
 8006228:	2000052c 	.word	0x2000052c

0800622c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800622c:	4a12      	ldr	r2, [pc, #72]	; (8006278 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800622e:	f012 0f07 	tst.w	r2, #7
 8006232:	d01e      	beq.n	8006272 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006234:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006236:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800623a:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 800623e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006240:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006242:	480e      	ldr	r0, [pc, #56]	; (800627c <prvHeapInit+0x50>)
 8006244:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006246:	2100      	movs	r1, #0
 8006248:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800624a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800624c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800624e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8006252:	480b      	ldr	r0, [pc, #44]	; (8006280 <prvHeapInit+0x54>)
 8006254:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006256:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006258:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800625a:	1a99      	subs	r1, r3, r2
 800625c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800625e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006260:	4b08      	ldr	r3, [pc, #32]	; (8006284 <prvHeapInit+0x58>)
 8006262:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006264:	4b08      	ldr	r3, [pc, #32]	; (8006288 <prvHeapInit+0x5c>)
 8006266:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006268:	4b08      	ldr	r3, [pc, #32]	; (800628c <prvHeapInit+0x60>)
 800626a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800626e:	601a      	str	r2, [r3, #0]
}
 8006270:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006272:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006276:	e7e4      	b.n	8006242 <prvHeapInit+0x16>
 8006278:	20000534 	.word	0x20000534
 800627c:	20004148 	.word	0x20004148
 8006280:	20000530 	.word	0x20000530
 8006284:	2000413c 	.word	0x2000413c
 8006288:	20004138 	.word	0x20004138
 800628c:	20004134 	.word	0x20004134

08006290 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006290:	4b16      	ldr	r3, [pc, #88]	; (80062ec <prvInsertBlockIntoFreeList+0x5c>)
 8006292:	461a      	mov	r2, r3
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4283      	cmp	r3, r0
 8006298:	d3fb      	bcc.n	8006292 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800629a:	6851      	ldr	r1, [r2, #4]
 800629c:	eb02 0c01 	add.w	ip, r2, r1
 80062a0:	4584      	cmp	ip, r0
 80062a2:	d009      	beq.n	80062b8 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062a4:	6841      	ldr	r1, [r0, #4]
 80062a6:	eb00 0c01 	add.w	ip, r0, r1
 80062aa:	4563      	cmp	r3, ip
 80062ac:	d009      	beq.n	80062c2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062ae:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062b0:	4290      	cmp	r0, r2
 80062b2:	d019      	beq.n	80062e8 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062b4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 80062b6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062b8:	6840      	ldr	r0, [r0, #4]
 80062ba:	4401      	add	r1, r0
 80062bc:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80062be:	4610      	mov	r0, r2
 80062c0:	e7f0      	b.n	80062a4 <prvInsertBlockIntoFreeList+0x14>
{
 80062c2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062c4:	4c0a      	ldr	r4, [pc, #40]	; (80062f0 <prvInsertBlockIntoFreeList+0x60>)
 80062c6:	6824      	ldr	r4, [r4, #0]
 80062c8:	42a3      	cmp	r3, r4
 80062ca:	d00b      	beq.n	80062e4 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	4419      	add	r1, r3
 80062d0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062d2:	6813      	ldr	r3, [r2, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80062d8:	4290      	cmp	r0, r2
 80062da:	d000      	beq.n	80062de <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062dc:	6010      	str	r0, [r2, #0]
	}
}
 80062de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062e2:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062e4:	6004      	str	r4, [r0, #0]
 80062e6:	e7f7      	b.n	80062d8 <prvInsertBlockIntoFreeList+0x48>
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	20004148 	.word	0x20004148
 80062f0:	20000530 	.word	0x20000530

080062f4 <pvPortMalloc>:
{
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	4605      	mov	r5, r0
	vTaskSuspendAll();
 80062f8:	f7ff fb34 	bl	8005964 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80062fc:	4b36      	ldr	r3, [pc, #216]	; (80063d8 <pvPortMalloc+0xe4>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	b1a3      	cbz	r3, 800632c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006302:	4b36      	ldr	r3, [pc, #216]	; (80063dc <pvPortMalloc+0xe8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	421d      	tst	r5, r3
 8006308:	d14e      	bne.n	80063a8 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800630a:	b135      	cbz	r5, 800631a <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800630c:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800630e:	f015 0f07 	tst.w	r5, #7
 8006312:	d002      	beq.n	800631a <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006314:	f025 0507 	bic.w	r5, r5, #7
 8006318:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800631a:	2d00      	cmp	r5, #0
 800631c:	d046      	beq.n	80063ac <pvPortMalloc+0xb8>
 800631e:	4b30      	ldr	r3, [pc, #192]	; (80063e0 <pvPortMalloc+0xec>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	42ab      	cmp	r3, r5
 8006324:	d351      	bcc.n	80063ca <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 8006326:	4a2f      	ldr	r2, [pc, #188]	; (80063e4 <pvPortMalloc+0xf0>)
 8006328:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800632a:	e004      	b.n	8006336 <pvPortMalloc+0x42>
			prvHeapInit();
 800632c:	f7ff ff7e 	bl	800622c <prvHeapInit>
 8006330:	e7e7      	b.n	8006302 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8006332:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8006334:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006336:	6863      	ldr	r3, [r4, #4]
 8006338:	42ab      	cmp	r3, r5
 800633a:	d202      	bcs.n	8006342 <pvPortMalloc+0x4e>
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f7      	bne.n	8006332 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8006342:	4b25      	ldr	r3, [pc, #148]	; (80063d8 <pvPortMalloc+0xe4>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	42a3      	cmp	r3, r4
 8006348:	d041      	beq.n	80063ce <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800634a:	6816      	ldr	r6, [r2, #0]
 800634c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006352:	6863      	ldr	r3, [r4, #4]
 8006354:	1b5b      	subs	r3, r3, r5
 8006356:	2b10      	cmp	r3, #16
 8006358:	d910      	bls.n	800637c <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800635a:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800635c:	f010 0f07 	tst.w	r0, #7
 8006360:	d008      	beq.n	8006374 <pvPortMalloc+0x80>
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	e7fe      	b.n	8006372 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006374:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006376:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006378:	f7ff ff8a 	bl	8006290 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800637c:	6862      	ldr	r2, [r4, #4]
 800637e:	4918      	ldr	r1, [pc, #96]	; (80063e0 <pvPortMalloc+0xec>)
 8006380:	680b      	ldr	r3, [r1, #0]
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006386:	4918      	ldr	r1, [pc, #96]	; (80063e8 <pvPortMalloc+0xf4>)
 8006388:	6809      	ldr	r1, [r1, #0]
 800638a:	428b      	cmp	r3, r1
 800638c:	d201      	bcs.n	8006392 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800638e:	4916      	ldr	r1, [pc, #88]	; (80063e8 <pvPortMalloc+0xf4>)
 8006390:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006392:	4b12      	ldr	r3, [pc, #72]	; (80063dc <pvPortMalloc+0xe8>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4313      	orrs	r3, r2
 8006398:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800639e:	4a13      	ldr	r2, [pc, #76]	; (80063ec <pvPortMalloc+0xf8>)
 80063a0:	6813      	ldr	r3, [r2, #0]
 80063a2:	3301      	adds	r3, #1
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	e002      	b.n	80063ae <pvPortMalloc+0xba>
void *pvReturn = NULL;
 80063a8:	2600      	movs	r6, #0
 80063aa:	e000      	b.n	80063ae <pvPortMalloc+0xba>
 80063ac:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 80063ae:	f7ff fb6d 	bl	8005a8c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063b2:	f016 0f07 	tst.w	r6, #7
 80063b6:	d00c      	beq.n	80063d2 <pvPortMalloc+0xde>
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	e7fe      	b.n	80063c8 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 80063ca:	2600      	movs	r6, #0
 80063cc:	e7ef      	b.n	80063ae <pvPortMalloc+0xba>
 80063ce:	2600      	movs	r6, #0
 80063d0:	e7ed      	b.n	80063ae <pvPortMalloc+0xba>
}
 80063d2:	4630      	mov	r0, r6
 80063d4:	bd70      	pop	{r4, r5, r6, pc}
 80063d6:	bf00      	nop
 80063d8:	20000530 	.word	0x20000530
 80063dc:	20004134 	.word	0x20004134
 80063e0:	20004138 	.word	0x20004138
 80063e4:	20004148 	.word	0x20004148
 80063e8:	2000413c 	.word	0x2000413c
 80063ec:	20004140 	.word	0x20004140

080063f0 <vPortFree>:
	if( pv != NULL )
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d034      	beq.n	800645e <vPortFree+0x6e>
{
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80063f8:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063fc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006400:	4a17      	ldr	r2, [pc, #92]	; (8006460 <vPortFree+0x70>)
 8006402:	6812      	ldr	r2, [r2, #0]
 8006404:	4213      	tst	r3, r2
 8006406:	d108      	bne.n	800641a <vPortFree+0x2a>
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	e7fe      	b.n	8006418 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800641a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800641e:	b141      	cbz	r1, 8006432 <vPortFree+0x42>
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	e7fe      	b.n	8006430 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006432:	ea23 0302 	bic.w	r3, r3, r2
 8006436:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800643a:	f7ff fa93 	bl	8005964 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800643e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006442:	4a08      	ldr	r2, [pc, #32]	; (8006464 <vPortFree+0x74>)
 8006444:	6813      	ldr	r3, [r2, #0]
 8006446:	440b      	add	r3, r1
 8006448:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800644a:	4628      	mov	r0, r5
 800644c:	f7ff ff20 	bl	8006290 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006450:	4a05      	ldr	r2, [pc, #20]	; (8006468 <vPortFree+0x78>)
 8006452:	6813      	ldr	r3, [r2, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8006458:	f7ff fb18 	bl	8005a8c <xTaskResumeAll>
}
 800645c:	bd38      	pop	{r3, r4, r5, pc}
 800645e:	4770      	bx	lr
 8006460:	20004134 	.word	0x20004134
 8006464:	20004138 	.word	0x20004138
 8006468:	20004144 	.word	0x20004144

0800646c <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800646c:	2904      	cmp	r1, #4
 800646e:	d00c      	beq.n	800648a <USBH_UserProcess+0x1e>
 8006470:	2905      	cmp	r1, #5
 8006472:	d002      	beq.n	800647a <USBH_UserProcess+0xe>
 8006474:	2902      	cmp	r1, #2
 8006476:	d004      	beq.n	8006482 <USBH_UserProcess+0x16>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006478:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800647a:	4b06      	ldr	r3, [pc, #24]	; (8006494 <USBH_UserProcess+0x28>)
 800647c:	2203      	movs	r2, #3
 800647e:	701a      	strb	r2, [r3, #0]
  break;
 8006480:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 8006482:	4b04      	ldr	r3, [pc, #16]	; (8006494 <USBH_UserProcess+0x28>)
 8006484:	2202      	movs	r2, #2
 8006486:	701a      	strb	r2, [r3, #0]
  break;
 8006488:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 800648a:	4b02      	ldr	r3, [pc, #8]	; (8006494 <USBH_UserProcess+0x28>)
 800648c:	2201      	movs	r2, #1
 800648e:	701a      	strb	r2, [r3, #0]
}
 8006490:	e7f2      	b.n	8006478 <USBH_UserProcess+0xc>
 8006492:	bf00      	nop
 8006494:	20004150 	.word	0x20004150

08006498 <MX_USB_HOST_Init>:
{
 8006498:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800649a:	2201      	movs	r2, #1
 800649c:	490b      	ldr	r1, [pc, #44]	; (80064cc <MX_USB_HOST_Init+0x34>)
 800649e:	480c      	ldr	r0, [pc, #48]	; (80064d0 <MX_USB_HOST_Init+0x38>)
 80064a0:	f7fd fd1e 	bl	8003ee0 <USBH_Init>
 80064a4:	b948      	cbnz	r0, 80064ba <MX_USB_HOST_Init+0x22>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MTP_CLASS) != USBH_OK)
 80064a6:	490b      	ldr	r1, [pc, #44]	; (80064d4 <MX_USB_HOST_Init+0x3c>)
 80064a8:	4809      	ldr	r0, [pc, #36]	; (80064d0 <MX_USB_HOST_Init+0x38>)
 80064aa:	f7fd fd5d 	bl	8003f68 <USBH_RegisterClass>
 80064ae:	b938      	cbnz	r0, 80064c0 <MX_USB_HOST_Init+0x28>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80064b0:	4807      	ldr	r0, [pc, #28]	; (80064d0 <MX_USB_HOST_Init+0x38>)
 80064b2:	f7fd fd9e 	bl	8003ff2 <USBH_Start>
 80064b6:	b930      	cbnz	r0, 80064c6 <MX_USB_HOST_Init+0x2e>
}
 80064b8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80064ba:	f7fa f88f 	bl	80005dc <Error_Handler>
 80064be:	e7f2      	b.n	80064a6 <MX_USB_HOST_Init+0xe>
    Error_Handler();
 80064c0:	f7fa f88c 	bl	80005dc <Error_Handler>
 80064c4:	e7f4      	b.n	80064b0 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 80064c6:	f7fa f889 	bl	80005dc <Error_Handler>
}
 80064ca:	e7f5      	b.n	80064b8 <MX_USB_HOST_Init+0x20>
 80064cc:	0800646d 	.word	0x0800646d
 80064d0:	20004154 	.word	0x20004154
 80064d4:	2000000c 	.word	0x2000000c

080064d8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80064d8:	b530      	push	{r4, r5, lr}
 80064da:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064dc:	2300      	movs	r3, #0
 80064de:	9303      	str	r3, [sp, #12]
 80064e0:	9304      	str	r3, [sp, #16]
 80064e2:	9305      	str	r3, [sp, #20]
 80064e4:	9306      	str	r3, [sp, #24]
 80064e6:	9307      	str	r3, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 80064e8:	6803      	ldr	r3, [r0, #0]
 80064ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064ee:	d001      	beq.n	80064f4 <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80064f0:	b009      	add	sp, #36	; 0x24
 80064f2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064f4:	2500      	movs	r5, #0
 80064f6:	9501      	str	r5, [sp, #4]
 80064f8:	4c16      	ldr	r4, [pc, #88]	; (8006554 <HAL_HCD_MspInit+0x7c>)
 80064fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80064fc:	f043 0301 	orr.w	r3, r3, #1
 8006500:	6323      	str	r3, [r4, #48]	; 0x30
 8006502:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800650c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006510:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006512:	2302      	movs	r3, #2
 8006514:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006516:	2303      	movs	r3, #3
 8006518:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800651a:	230a      	movs	r3, #10
 800651c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800651e:	a903      	add	r1, sp, #12
 8006520:	480d      	ldr	r0, [pc, #52]	; (8006558 <HAL_HCD_MspInit+0x80>)
 8006522:	f7fa fa89 	bl	8000a38 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006526:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800652c:	6363      	str	r3, [r4, #52]	; 0x34
 800652e:	9502      	str	r5, [sp, #8]
 8006530:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006536:	6463      	str	r3, [r4, #68]	; 0x44
 8006538:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800653a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800653e:	9302      	str	r3, [sp, #8]
 8006540:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8006542:	462a      	mov	r2, r5
 8006544:	2105      	movs	r1, #5
 8006546:	2043      	movs	r0, #67	; 0x43
 8006548:	f7fa fa30 	bl	80009ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800654c:	2043      	movs	r0, #67	; 0x43
 800654e:	f7fa fa65 	bl	8000a1c <HAL_NVIC_EnableIRQ>
}
 8006552:	e7cd      	b.n	80064f0 <HAL_HCD_MspInit+0x18>
 8006554:	40023800 	.word	0x40023800
 8006558:	40020000 	.word	0x40020000

0800655c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800655c:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 800655e:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006562:	f7fd feec 	bl	800433e <USBH_LL_IncTimer>
}
 8006566:	bd08      	pop	{r3, pc}

08006568 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006568:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 800656a:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800656e:	f7fd feff 	bl	8004370 <USBH_LL_Connect>
}
 8006572:	bd08      	pop	{r3, pc}

08006574 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006574:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 8006576:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800657a:	f7fd ff0b 	bl	8004394 <USBH_LL_Disconnect>
}
 800657e:	bd08      	pop	{r3, pc}

08006580 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006580:	b508      	push	{r3, lr}
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8006582:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006586:	f7fd ff23 	bl	80043d0 <USBH_LL_NotifyURBChange>
#endif
}
 800658a:	bd08      	pop	{r3, pc}

0800658c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800658c:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 800658e:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006592:	f7fd fedd 	bl	8004350 <USBH_LL_PortEnabled>
}
 8006596:	bd08      	pop	{r3, pc}

08006598 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006598:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 800659a:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800659e:	f7fd fee3 	bl	8004368 <USBH_LL_PortDisabled>
}
 80065a2:	bd08      	pop	{r3, pc}

080065a4 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80065a4:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d001      	beq.n	80065b0 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 80065ac:	2000      	movs	r0, #0
 80065ae:	4770      	bx	lr
{
 80065b0:	b510      	push	{r4, lr}
 80065b2:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.pData = phost;
 80065b4:	480f      	ldr	r0, [pc, #60]	; (80065f4 <USBH_LL_Init+0x50>)
 80065b6:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80065ba:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80065be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80065c2:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80065c4:	2308      	movs	r3, #8
 80065c6:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80065c8:	2301      	movs	r3, #1
 80065ca:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80065cc:	2300      	movs	r3, #0
 80065ce:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80065d0:	2202      	movs	r2, #2
 80065d2:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80065d4:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80065d6:	f7fa fbbd 	bl	8000d54 <HAL_HCD_Init>
 80065da:	b940      	cbnz	r0, 80065ee <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80065dc:	4805      	ldr	r0, [pc, #20]	; (80065f4 <USBH_LL_Init+0x50>)
 80065de:	f7fb f90d 	bl	80017fc <HAL_HCD_GetCurrentFrame>
 80065e2:	4601      	mov	r1, r0
 80065e4:	4620      	mov	r0, r4
 80065e6:	f7fd fea7 	bl	8004338 <USBH_LL_SetTimer>
}
 80065ea:	2000      	movs	r0, #0
 80065ec:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80065ee:	f7f9 fff5 	bl	80005dc <Error_Handler>
 80065f2:	e7f3      	b.n	80065dc <USBH_LL_Init+0x38>
 80065f4:	20004538 	.word	0x20004538

080065f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80065f8:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80065fa:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80065fe:	f7fb f902 	bl	8001806 <HAL_HCD_GetCurrentSpeed>
 8006602:	2801      	cmp	r0, #1
 8006604:	d004      	beq.n	8006610 <USBH_LL_GetSpeed+0x18>
 8006606:	2802      	cmp	r0, #2
 8006608:	d004      	beq.n	8006614 <USBH_LL_GetSpeed+0x1c>
 800660a:	b100      	cbz	r0, 800660e <USBH_LL_GetSpeed+0x16>
  case 2 :
    speed = USBH_SPEED_LOW;
    break;

  default:
   speed = USBH_SPEED_FULL;
 800660c:	2001      	movs	r0, #1
    break;
  }
  return  speed;
}
 800660e:	bd08      	pop	{r3, pc}
    speed = USBH_SPEED_FULL;
 8006610:	2001      	movs	r0, #1
 8006612:	e7fc      	b.n	800660e <USBH_LL_GetSpeed+0x16>
    speed = USBH_SPEED_LOW;
 8006614:	2002      	movs	r0, #2
 8006616:	e7fa      	b.n	800660e <USBH_LL_GetSpeed+0x16>

08006618 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006618:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800661a:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800661e:	f7fb f8e8 	bl	80017f2 <HAL_HCD_HC_GetXferCount>
}
 8006622:	bd08      	pop	{r3, pc}

08006624 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006624:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006626:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800662a:	f7fb f8dc 	bl	80017e6 <HAL_HCD_HC_GetURBState>
}
 800662e:	bd08      	pop	{r3, pc}

08006630 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006630:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8006632:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 8006636:	2b01      	cmp	r3, #1
 8006638:	d004      	beq.n	8006644 <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800663a:	20c8      	movs	r0, #200	; 0xc8
 800663c:	f7fa f990 	bl	8000960 <HAL_Delay>
  return USBH_OK;
}
 8006640:	2000      	movs	r0, #0
 8006642:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 8006644:	4608      	mov	r0, r1
 8006646:	f000 f86d 	bl	8006724 <MX_DriverVbusFS>
 800664a:	e7f6      	b.n	800663a <USBH_LL_DriverVBUS+0xa>

0800664c <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800664c:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8006650:	202c      	movs	r0, #44	; 0x2c
 8006652:	fb00 3001 	mla	r0, r0, r1, r3
 8006656:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
 800665a:	b130      	cbz	r0, 800666a <USBH_LL_SetToggle+0x1e>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800665c:	202c      	movs	r0, #44	; 0x2c
 800665e:	fb00 3301 	mla	r3, r0, r1, r3
 8006662:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8006666:	2000      	movs	r0, #0
 8006668:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 800666a:	202c      	movs	r0, #44	; 0x2c
 800666c:	fb00 3301 	mla	r3, r0, r1, r3
 8006670:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8006674:	e7f7      	b.n	8006666 <USBH_LL_SetToggle+0x1a>

08006676 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8006676:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8006678:	f7fa f972 	bl	8000960 <HAL_Delay>
}
 800667c:	bd08      	pop	{r3, pc}

0800667e <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 800667e:	2802      	cmp	r0, #2
 8006680:	d805      	bhi.n	800668e <USBH_Get_USB_Status+0x10>
 8006682:	e8df f000 	tbb	[pc, r0]
 8006686:	0405      	.short	0x0405
 8006688:	02          	.byte	0x02
 8006689:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800668a:	2001      	movs	r0, #1
    break;
 800668c:	4770      	bx	lr
      usb_status = USBH_FAIL;
 800668e:	2002      	movs	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8006690:	4770      	bx	lr

08006692 <USBH_LL_Start>:
{
 8006692:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 8006694:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8006698:	f7fb f879 	bl	800178e <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 800669c:	f7ff ffef 	bl	800667e <USBH_Get_USB_Status>
}
 80066a0:	bd08      	pop	{r3, pc}

080066a2 <USBH_LL_Stop>:
{
 80066a2:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 80066a4:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80066a8:	f7fb f886 	bl	80017b8 <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 80066ac:	f7ff ffe7 	bl	800667e <USBH_Get_USB_Status>
}
 80066b0:	bd08      	pop	{r3, pc}

080066b2 <USBH_LL_ResetPort>:
{
 80066b2:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 80066b4:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80066b8:	f7fb f890 	bl	80017dc <HAL_HCD_ResetPort>
  usb_status = USBH_Get_USB_Status(hal_status);
 80066bc:	f7ff ffdf 	bl	800667e <USBH_Get_USB_Status>
}
 80066c0:	bd08      	pop	{r3, pc}

080066c2 <USBH_LL_OpenPipe>:
{
 80066c2:	b510      	push	{r4, lr}
 80066c4:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80066c6:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80066ca:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80066ce:	9402      	str	r4, [sp, #8]
 80066d0:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80066d4:	9401      	str	r4, [sp, #4]
 80066d6:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80066da:	9400      	str	r4, [sp, #0]
 80066dc:	f7fa fae1 	bl	8000ca2 <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 80066e0:	f7ff ffcd 	bl	800667e <USBH_Get_USB_Status>
}
 80066e4:	b004      	add	sp, #16
 80066e6:	bd10      	pop	{r4, pc}

080066e8 <USBH_LL_ClosePipe>:
{
 80066e8:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80066ea:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80066ee:	f7fa fb1f 	bl	8000d30 <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 80066f2:	f7ff ffc4 	bl	800667e <USBH_Get_USB_Status>
}
 80066f6:	bd08      	pop	{r3, pc}

080066f8 <USBH_LL_SubmitURB>:
{
 80066f8:	b510      	push	{r4, lr}
 80066fa:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80066fc:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8006700:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8006704:	9403      	str	r4, [sp, #12]
 8006706:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800670a:	9402      	str	r4, [sp, #8]
 800670c:	9c07      	ldr	r4, [sp, #28]
 800670e:	9401      	str	r4, [sp, #4]
 8006710:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8006714:	9400      	str	r4, [sp, #0]
 8006716:	f7fa fb6f 	bl	8000df8 <HAL_HCD_HC_SubmitRequest>
  usb_status =  USBH_Get_USB_Status(hal_status);
 800671a:	f7ff ffb0 	bl	800667e <USBH_Get_USB_Status>
}
 800671e:	b004      	add	sp, #16
 8006720:	bd10      	pop	{r4, pc}
	...

08006724 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006724:	b508      	push	{r3, lr}
  uint8_t data = state;
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006726:	b930      	cbnz	r0, 8006736 <MX_DriverVbusFS+0x12>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8006728:	2201      	movs	r2, #1
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,(GPIO_PinState)data);
 800672a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800672e:	4803      	ldr	r0, [pc, #12]	; (800673c <MX_DriverVbusFS+0x18>)
 8006730:	f7fa fa62 	bl	8000bf8 <HAL_GPIO_WritePin>
}
 8006734:	bd08      	pop	{r3, pc}
    data = GPIO_PIN_RESET;
 8006736:	2200      	movs	r2, #0
 8006738:	e7f7      	b.n	800672a <MX_DriverVbusFS+0x6>
 800673a:	bf00      	nop
 800673c:	40020800 	.word	0x40020800

08006740 <__errno>:
 8006740:	4b01      	ldr	r3, [pc, #4]	; (8006748 <__errno+0x8>)
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	20000030 	.word	0x20000030

0800674c <__libc_init_array>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	4d0d      	ldr	r5, [pc, #52]	; (8006784 <__libc_init_array+0x38>)
 8006750:	4c0d      	ldr	r4, [pc, #52]	; (8006788 <__libc_init_array+0x3c>)
 8006752:	1b64      	subs	r4, r4, r5
 8006754:	10a4      	asrs	r4, r4, #2
 8006756:	2600      	movs	r6, #0
 8006758:	42a6      	cmp	r6, r4
 800675a:	d109      	bne.n	8006770 <__libc_init_array+0x24>
 800675c:	4d0b      	ldr	r5, [pc, #44]	; (800678c <__libc_init_array+0x40>)
 800675e:	4c0c      	ldr	r4, [pc, #48]	; (8006790 <__libc_init_array+0x44>)
 8006760:	f000 f9a6 	bl	8006ab0 <_init>
 8006764:	1b64      	subs	r4, r4, r5
 8006766:	10a4      	asrs	r4, r4, #2
 8006768:	2600      	movs	r6, #0
 800676a:	42a6      	cmp	r6, r4
 800676c:	d105      	bne.n	800677a <__libc_init_array+0x2e>
 800676e:	bd70      	pop	{r4, r5, r6, pc}
 8006770:	f855 3b04 	ldr.w	r3, [r5], #4
 8006774:	4798      	blx	r3
 8006776:	3601      	adds	r6, #1
 8006778:	e7ee      	b.n	8006758 <__libc_init_array+0xc>
 800677a:	f855 3b04 	ldr.w	r3, [r5], #4
 800677e:	4798      	blx	r3
 8006780:	3601      	adds	r6, #1
 8006782:	e7f2      	b.n	800676a <__libc_init_array+0x1e>
 8006784:	08006bb4 	.word	0x08006bb4
 8006788:	08006bb4 	.word	0x08006bb4
 800678c:	08006bb4 	.word	0x08006bb4
 8006790:	08006bb8 	.word	0x08006bb8

08006794 <__retarget_lock_acquire_recursive>:
 8006794:	4770      	bx	lr

08006796 <__retarget_lock_release_recursive>:
 8006796:	4770      	bx	lr

08006798 <malloc>:
 8006798:	4b02      	ldr	r3, [pc, #8]	; (80067a4 <malloc+0xc>)
 800679a:	4601      	mov	r1, r0
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	f000 b88d 	b.w	80068bc <_malloc_r>
 80067a2:	bf00      	nop
 80067a4:	20000030 	.word	0x20000030

080067a8 <free>:
 80067a8:	4b02      	ldr	r3, [pc, #8]	; (80067b4 <free+0xc>)
 80067aa:	4601      	mov	r1, r0
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	f000 b819 	b.w	80067e4 <_free_r>
 80067b2:	bf00      	nop
 80067b4:	20000030 	.word	0x20000030

080067b8 <memcpy>:
 80067b8:	440a      	add	r2, r1
 80067ba:	4291      	cmp	r1, r2
 80067bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80067c0:	d100      	bne.n	80067c4 <memcpy+0xc>
 80067c2:	4770      	bx	lr
 80067c4:	b510      	push	{r4, lr}
 80067c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067ce:	4291      	cmp	r1, r2
 80067d0:	d1f9      	bne.n	80067c6 <memcpy+0xe>
 80067d2:	bd10      	pop	{r4, pc}

080067d4 <memset>:
 80067d4:	4402      	add	r2, r0
 80067d6:	4603      	mov	r3, r0
 80067d8:	4293      	cmp	r3, r2
 80067da:	d100      	bne.n	80067de <memset+0xa>
 80067dc:	4770      	bx	lr
 80067de:	f803 1b01 	strb.w	r1, [r3], #1
 80067e2:	e7f9      	b.n	80067d8 <memset+0x4>

080067e4 <_free_r>:
 80067e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067e6:	2900      	cmp	r1, #0
 80067e8:	d044      	beq.n	8006874 <_free_r+0x90>
 80067ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ee:	9001      	str	r0, [sp, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f1a1 0404 	sub.w	r4, r1, #4
 80067f6:	bfb8      	it	lt
 80067f8:	18e4      	addlt	r4, r4, r3
 80067fa:	f000 f94d 	bl	8006a98 <__malloc_lock>
 80067fe:	4a1e      	ldr	r2, [pc, #120]	; (8006878 <_free_r+0x94>)
 8006800:	9801      	ldr	r0, [sp, #4]
 8006802:	6813      	ldr	r3, [r2, #0]
 8006804:	b933      	cbnz	r3, 8006814 <_free_r+0x30>
 8006806:	6063      	str	r3, [r4, #4]
 8006808:	6014      	str	r4, [r2, #0]
 800680a:	b003      	add	sp, #12
 800680c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006810:	f000 b948 	b.w	8006aa4 <__malloc_unlock>
 8006814:	42a3      	cmp	r3, r4
 8006816:	d908      	bls.n	800682a <_free_r+0x46>
 8006818:	6825      	ldr	r5, [r4, #0]
 800681a:	1961      	adds	r1, r4, r5
 800681c:	428b      	cmp	r3, r1
 800681e:	bf01      	itttt	eq
 8006820:	6819      	ldreq	r1, [r3, #0]
 8006822:	685b      	ldreq	r3, [r3, #4]
 8006824:	1949      	addeq	r1, r1, r5
 8006826:	6021      	streq	r1, [r4, #0]
 8006828:	e7ed      	b.n	8006806 <_free_r+0x22>
 800682a:	461a      	mov	r2, r3
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	b10b      	cbz	r3, 8006834 <_free_r+0x50>
 8006830:	42a3      	cmp	r3, r4
 8006832:	d9fa      	bls.n	800682a <_free_r+0x46>
 8006834:	6811      	ldr	r1, [r2, #0]
 8006836:	1855      	adds	r5, r2, r1
 8006838:	42a5      	cmp	r5, r4
 800683a:	d10b      	bne.n	8006854 <_free_r+0x70>
 800683c:	6824      	ldr	r4, [r4, #0]
 800683e:	4421      	add	r1, r4
 8006840:	1854      	adds	r4, r2, r1
 8006842:	42a3      	cmp	r3, r4
 8006844:	6011      	str	r1, [r2, #0]
 8006846:	d1e0      	bne.n	800680a <_free_r+0x26>
 8006848:	681c      	ldr	r4, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	6053      	str	r3, [r2, #4]
 800684e:	4421      	add	r1, r4
 8006850:	6011      	str	r1, [r2, #0]
 8006852:	e7da      	b.n	800680a <_free_r+0x26>
 8006854:	d902      	bls.n	800685c <_free_r+0x78>
 8006856:	230c      	movs	r3, #12
 8006858:	6003      	str	r3, [r0, #0]
 800685a:	e7d6      	b.n	800680a <_free_r+0x26>
 800685c:	6825      	ldr	r5, [r4, #0]
 800685e:	1961      	adds	r1, r4, r5
 8006860:	428b      	cmp	r3, r1
 8006862:	bf04      	itt	eq
 8006864:	6819      	ldreq	r1, [r3, #0]
 8006866:	685b      	ldreq	r3, [r3, #4]
 8006868:	6063      	str	r3, [r4, #4]
 800686a:	bf04      	itt	eq
 800686c:	1949      	addeq	r1, r1, r5
 800686e:	6021      	streq	r1, [r4, #0]
 8006870:	6054      	str	r4, [r2, #4]
 8006872:	e7ca      	b.n	800680a <_free_r+0x26>
 8006874:	b003      	add	sp, #12
 8006876:	bd30      	pop	{r4, r5, pc}
 8006878:	20004840 	.word	0x20004840

0800687c <sbrk_aligned>:
 800687c:	b570      	push	{r4, r5, r6, lr}
 800687e:	4e0e      	ldr	r6, [pc, #56]	; (80068b8 <sbrk_aligned+0x3c>)
 8006880:	460c      	mov	r4, r1
 8006882:	6831      	ldr	r1, [r6, #0]
 8006884:	4605      	mov	r5, r0
 8006886:	b911      	cbnz	r1, 800688e <sbrk_aligned+0x12>
 8006888:	f000 f8f6 	bl	8006a78 <_sbrk_r>
 800688c:	6030      	str	r0, [r6, #0]
 800688e:	4621      	mov	r1, r4
 8006890:	4628      	mov	r0, r5
 8006892:	f000 f8f1 	bl	8006a78 <_sbrk_r>
 8006896:	1c43      	adds	r3, r0, #1
 8006898:	d00a      	beq.n	80068b0 <sbrk_aligned+0x34>
 800689a:	1cc4      	adds	r4, r0, #3
 800689c:	f024 0403 	bic.w	r4, r4, #3
 80068a0:	42a0      	cmp	r0, r4
 80068a2:	d007      	beq.n	80068b4 <sbrk_aligned+0x38>
 80068a4:	1a21      	subs	r1, r4, r0
 80068a6:	4628      	mov	r0, r5
 80068a8:	f000 f8e6 	bl	8006a78 <_sbrk_r>
 80068ac:	3001      	adds	r0, #1
 80068ae:	d101      	bne.n	80068b4 <sbrk_aligned+0x38>
 80068b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80068b4:	4620      	mov	r0, r4
 80068b6:	bd70      	pop	{r4, r5, r6, pc}
 80068b8:	20004844 	.word	0x20004844

080068bc <_malloc_r>:
 80068bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c0:	1ccd      	adds	r5, r1, #3
 80068c2:	f025 0503 	bic.w	r5, r5, #3
 80068c6:	3508      	adds	r5, #8
 80068c8:	2d0c      	cmp	r5, #12
 80068ca:	bf38      	it	cc
 80068cc:	250c      	movcc	r5, #12
 80068ce:	2d00      	cmp	r5, #0
 80068d0:	4607      	mov	r7, r0
 80068d2:	db01      	blt.n	80068d8 <_malloc_r+0x1c>
 80068d4:	42a9      	cmp	r1, r5
 80068d6:	d905      	bls.n	80068e4 <_malloc_r+0x28>
 80068d8:	230c      	movs	r3, #12
 80068da:	603b      	str	r3, [r7, #0]
 80068dc:	2600      	movs	r6, #0
 80068de:	4630      	mov	r0, r6
 80068e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e4:	4e2e      	ldr	r6, [pc, #184]	; (80069a0 <_malloc_r+0xe4>)
 80068e6:	f000 f8d7 	bl	8006a98 <__malloc_lock>
 80068ea:	6833      	ldr	r3, [r6, #0]
 80068ec:	461c      	mov	r4, r3
 80068ee:	bb34      	cbnz	r4, 800693e <_malloc_r+0x82>
 80068f0:	4629      	mov	r1, r5
 80068f2:	4638      	mov	r0, r7
 80068f4:	f7ff ffc2 	bl	800687c <sbrk_aligned>
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	4604      	mov	r4, r0
 80068fc:	d14d      	bne.n	800699a <_malloc_r+0xde>
 80068fe:	6834      	ldr	r4, [r6, #0]
 8006900:	4626      	mov	r6, r4
 8006902:	2e00      	cmp	r6, #0
 8006904:	d140      	bne.n	8006988 <_malloc_r+0xcc>
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	4631      	mov	r1, r6
 800690a:	4638      	mov	r0, r7
 800690c:	eb04 0803 	add.w	r8, r4, r3
 8006910:	f000 f8b2 	bl	8006a78 <_sbrk_r>
 8006914:	4580      	cmp	r8, r0
 8006916:	d13a      	bne.n	800698e <_malloc_r+0xd2>
 8006918:	6821      	ldr	r1, [r4, #0]
 800691a:	3503      	adds	r5, #3
 800691c:	1a6d      	subs	r5, r5, r1
 800691e:	f025 0503 	bic.w	r5, r5, #3
 8006922:	3508      	adds	r5, #8
 8006924:	2d0c      	cmp	r5, #12
 8006926:	bf38      	it	cc
 8006928:	250c      	movcc	r5, #12
 800692a:	4629      	mov	r1, r5
 800692c:	4638      	mov	r0, r7
 800692e:	f7ff ffa5 	bl	800687c <sbrk_aligned>
 8006932:	3001      	adds	r0, #1
 8006934:	d02b      	beq.n	800698e <_malloc_r+0xd2>
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	442b      	add	r3, r5
 800693a:	6023      	str	r3, [r4, #0]
 800693c:	e00e      	b.n	800695c <_malloc_r+0xa0>
 800693e:	6822      	ldr	r2, [r4, #0]
 8006940:	1b52      	subs	r2, r2, r5
 8006942:	d41e      	bmi.n	8006982 <_malloc_r+0xc6>
 8006944:	2a0b      	cmp	r2, #11
 8006946:	d916      	bls.n	8006976 <_malloc_r+0xba>
 8006948:	1961      	adds	r1, r4, r5
 800694a:	42a3      	cmp	r3, r4
 800694c:	6025      	str	r5, [r4, #0]
 800694e:	bf18      	it	ne
 8006950:	6059      	strne	r1, [r3, #4]
 8006952:	6863      	ldr	r3, [r4, #4]
 8006954:	bf08      	it	eq
 8006956:	6031      	streq	r1, [r6, #0]
 8006958:	5162      	str	r2, [r4, r5]
 800695a:	604b      	str	r3, [r1, #4]
 800695c:	4638      	mov	r0, r7
 800695e:	f104 060b 	add.w	r6, r4, #11
 8006962:	f000 f89f 	bl	8006aa4 <__malloc_unlock>
 8006966:	f026 0607 	bic.w	r6, r6, #7
 800696a:	1d23      	adds	r3, r4, #4
 800696c:	1af2      	subs	r2, r6, r3
 800696e:	d0b6      	beq.n	80068de <_malloc_r+0x22>
 8006970:	1b9b      	subs	r3, r3, r6
 8006972:	50a3      	str	r3, [r4, r2]
 8006974:	e7b3      	b.n	80068de <_malloc_r+0x22>
 8006976:	6862      	ldr	r2, [r4, #4]
 8006978:	42a3      	cmp	r3, r4
 800697a:	bf0c      	ite	eq
 800697c:	6032      	streq	r2, [r6, #0]
 800697e:	605a      	strne	r2, [r3, #4]
 8006980:	e7ec      	b.n	800695c <_malloc_r+0xa0>
 8006982:	4623      	mov	r3, r4
 8006984:	6864      	ldr	r4, [r4, #4]
 8006986:	e7b2      	b.n	80068ee <_malloc_r+0x32>
 8006988:	4634      	mov	r4, r6
 800698a:	6876      	ldr	r6, [r6, #4]
 800698c:	e7b9      	b.n	8006902 <_malloc_r+0x46>
 800698e:	230c      	movs	r3, #12
 8006990:	603b      	str	r3, [r7, #0]
 8006992:	4638      	mov	r0, r7
 8006994:	f000 f886 	bl	8006aa4 <__malloc_unlock>
 8006998:	e7a1      	b.n	80068de <_malloc_r+0x22>
 800699a:	6025      	str	r5, [r4, #0]
 800699c:	e7de      	b.n	800695c <_malloc_r+0xa0>
 800699e:	bf00      	nop
 80069a0:	20004840 	.word	0x20004840

080069a4 <cleanup_glue>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	460c      	mov	r4, r1
 80069a8:	6809      	ldr	r1, [r1, #0]
 80069aa:	4605      	mov	r5, r0
 80069ac:	b109      	cbz	r1, 80069b2 <cleanup_glue+0xe>
 80069ae:	f7ff fff9 	bl	80069a4 <cleanup_glue>
 80069b2:	4621      	mov	r1, r4
 80069b4:	4628      	mov	r0, r5
 80069b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ba:	f7ff bf13 	b.w	80067e4 <_free_r>
	...

080069c0 <_reclaim_reent>:
 80069c0:	4b2c      	ldr	r3, [pc, #176]	; (8006a74 <_reclaim_reent+0xb4>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4283      	cmp	r3, r0
 80069c6:	b570      	push	{r4, r5, r6, lr}
 80069c8:	4604      	mov	r4, r0
 80069ca:	d051      	beq.n	8006a70 <_reclaim_reent+0xb0>
 80069cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80069ce:	b143      	cbz	r3, 80069e2 <_reclaim_reent+0x22>
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d14a      	bne.n	8006a6c <_reclaim_reent+0xac>
 80069d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069d8:	6819      	ldr	r1, [r3, #0]
 80069da:	b111      	cbz	r1, 80069e2 <_reclaim_reent+0x22>
 80069dc:	4620      	mov	r0, r4
 80069de:	f7ff ff01 	bl	80067e4 <_free_r>
 80069e2:	6961      	ldr	r1, [r4, #20]
 80069e4:	b111      	cbz	r1, 80069ec <_reclaim_reent+0x2c>
 80069e6:	4620      	mov	r0, r4
 80069e8:	f7ff fefc 	bl	80067e4 <_free_r>
 80069ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80069ee:	b111      	cbz	r1, 80069f6 <_reclaim_reent+0x36>
 80069f0:	4620      	mov	r0, r4
 80069f2:	f7ff fef7 	bl	80067e4 <_free_r>
 80069f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80069f8:	b111      	cbz	r1, 8006a00 <_reclaim_reent+0x40>
 80069fa:	4620      	mov	r0, r4
 80069fc:	f7ff fef2 	bl	80067e4 <_free_r>
 8006a00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006a02:	b111      	cbz	r1, 8006a0a <_reclaim_reent+0x4a>
 8006a04:	4620      	mov	r0, r4
 8006a06:	f7ff feed 	bl	80067e4 <_free_r>
 8006a0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006a0c:	b111      	cbz	r1, 8006a14 <_reclaim_reent+0x54>
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f7ff fee8 	bl	80067e4 <_free_r>
 8006a14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006a16:	b111      	cbz	r1, 8006a1e <_reclaim_reent+0x5e>
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f7ff fee3 	bl	80067e4 <_free_r>
 8006a1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006a20:	b111      	cbz	r1, 8006a28 <_reclaim_reent+0x68>
 8006a22:	4620      	mov	r0, r4
 8006a24:	f7ff fede 	bl	80067e4 <_free_r>
 8006a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a2a:	b111      	cbz	r1, 8006a32 <_reclaim_reent+0x72>
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f7ff fed9 	bl	80067e4 <_free_r>
 8006a32:	69a3      	ldr	r3, [r4, #24]
 8006a34:	b1e3      	cbz	r3, 8006a70 <_reclaim_reent+0xb0>
 8006a36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a38:	4620      	mov	r0, r4
 8006a3a:	4798      	blx	r3
 8006a3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006a3e:	b1b9      	cbz	r1, 8006a70 <_reclaim_reent+0xb0>
 8006a40:	4620      	mov	r0, r4
 8006a42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a46:	f7ff bfad 	b.w	80069a4 <cleanup_glue>
 8006a4a:	5949      	ldr	r1, [r1, r5]
 8006a4c:	b941      	cbnz	r1, 8006a60 <_reclaim_reent+0xa0>
 8006a4e:	3504      	adds	r5, #4
 8006a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a52:	2d80      	cmp	r5, #128	; 0x80
 8006a54:	68d9      	ldr	r1, [r3, #12]
 8006a56:	d1f8      	bne.n	8006a4a <_reclaim_reent+0x8a>
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f7ff fec3 	bl	80067e4 <_free_r>
 8006a5e:	e7ba      	b.n	80069d6 <_reclaim_reent+0x16>
 8006a60:	680e      	ldr	r6, [r1, #0]
 8006a62:	4620      	mov	r0, r4
 8006a64:	f7ff febe 	bl	80067e4 <_free_r>
 8006a68:	4631      	mov	r1, r6
 8006a6a:	e7ef      	b.n	8006a4c <_reclaim_reent+0x8c>
 8006a6c:	2500      	movs	r5, #0
 8006a6e:	e7ef      	b.n	8006a50 <_reclaim_reent+0x90>
 8006a70:	bd70      	pop	{r4, r5, r6, pc}
 8006a72:	bf00      	nop
 8006a74:	20000030 	.word	0x20000030

08006a78 <_sbrk_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4d06      	ldr	r5, [pc, #24]	; (8006a94 <_sbrk_r+0x1c>)
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	4604      	mov	r4, r0
 8006a80:	4608      	mov	r0, r1
 8006a82:	602b      	str	r3, [r5, #0]
 8006a84:	f7f9 fee8 	bl	8000858 <_sbrk>
 8006a88:	1c43      	adds	r3, r0, #1
 8006a8a:	d102      	bne.n	8006a92 <_sbrk_r+0x1a>
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	b103      	cbz	r3, 8006a92 <_sbrk_r+0x1a>
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	bd38      	pop	{r3, r4, r5, pc}
 8006a94:	20004848 	.word	0x20004848

08006a98 <__malloc_lock>:
 8006a98:	4801      	ldr	r0, [pc, #4]	; (8006aa0 <__malloc_lock+0x8>)
 8006a9a:	f7ff be7b 	b.w	8006794 <__retarget_lock_acquire_recursive>
 8006a9e:	bf00      	nop
 8006aa0:	2000483c 	.word	0x2000483c

08006aa4 <__malloc_unlock>:
 8006aa4:	4801      	ldr	r0, [pc, #4]	; (8006aac <__malloc_unlock+0x8>)
 8006aa6:	f7ff be76 	b.w	8006796 <__retarget_lock_release_recursive>
 8006aaa:	bf00      	nop
 8006aac:	2000483c 	.word	0x2000483c

08006ab0 <_init>:
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	bf00      	nop
 8006ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab6:	bc08      	pop	{r3}
 8006ab8:	469e      	mov	lr, r3
 8006aba:	4770      	bx	lr

08006abc <_fini>:
 8006abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006abe:	bf00      	nop
 8006ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac2:	bc08      	pop	{r3}
 8006ac4:	469e      	mov	lr, r3
 8006ac6:	4770      	bx	lr
