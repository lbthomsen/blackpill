
mtp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006950  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006af0  08006af0  00007af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b74  08006b74  00008080  2**0
                  CONTENTS
  4 .ARM          00000008  08006b74  08006b74  00007b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b7c  08006b7c  00008080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b7c  08006b7c  00007b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b80  08006b80  00007b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006b84  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048dc  20000080  08006c04  00008080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000495c  08006c04  0000895c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b0ef  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054bc  00000000  00000000  0003319f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  00038660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b3  00000000  00000000  00039f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cee2  00000000  00000000  0003b2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025c51  00000000  00000000  000581cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f818  00000000  00000000  0007de1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d636  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004934  00000000  00000000  0011d67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00012a93  00000000  00000000  00121fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  00134a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ad8 	.word	0x08006ad8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08006ad8 	.word	0x08006ad8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800050c:	4b03      	ldr	r3, [pc, #12]	@ (800051c <vApplicationGetIdleTaskMemory+0x10>)
 800050e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000510:	4b03      	ldr	r3, [pc, #12]	@ (8000520 <vApplicationGetIdleTaskMemory+0x14>)
 8000512:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000514:	2380      	movs	r3, #128	@ 0x80
 8000516:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	2000029c 	.word	0x2000029c
 8000520:	2000009c 	.word	0x2000009c

08000524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000528:	2400      	movs	r4, #0
 800052a:	9403      	str	r4, [sp, #12]
 800052c:	9404      	str	r4, [sp, #16]
 800052e:	9405      	str	r4, [sp, #20]
 8000530:	9406      	str	r4, [sp, #24]
 8000532:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000534:	9400      	str	r4, [sp, #0]
 8000536:	4b26      	ldr	r3, [pc, #152]	@ (80005d0 <MX_GPIO_Init+0xac>)
 8000538:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800053a:	f042 0204 	orr.w	r2, r2, #4
 800053e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000540:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000542:	f002 0204 	and.w	r2, r2, #4
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800054a:	9401      	str	r4, [sp, #4]
 800054c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800054e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000552:	631a      	str	r2, [r3, #48]	@ 0x30
 8000554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000556:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800055a:	9201      	str	r2, [sp, #4]
 800055c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	9402      	str	r4, [sp, #8]
 8000560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000562:	f042 0201 	orr.w	r2, r2, #1
 8000566:	631a      	str	r2, [r3, #48]	@ 0x30
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	9302      	str	r3, [sp, #8]
 8000570:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000572:	4d18      	ldr	r5, [pc, #96]	@ (80005d4 <MX_GPIO_Init+0xb0>)
 8000574:	2201      	movs	r2, #1
 8000576:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800057a:	4628      	mov	r0, r5
 800057c:	f000 fb60 	bl	8000c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000580:	4622      	mov	r2, r4
 8000582:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000586:	4628      	mov	r0, r5
 8000588:	f000 fb5a 	bl	8000c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800058c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000590:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000592:	2311      	movs	r3, #17
 8000594:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800059a:	a903      	add	r1, sp, #12
 800059c:	4628      	mov	r0, r5
 800059e:	f000 fa6b 	bl	8000a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80005a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005a6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2601      	movs	r6, #1
 80005aa:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b0:	a903      	add	r1, sp, #12
 80005b2:	4628      	mov	r0, r5
 80005b4:	f000 fa60 	bl	8000a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80005b8:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005be:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c0:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80005c2:	a903      	add	r1, sp, #12
 80005c4:	4804      	ldr	r0, [pc, #16]	@ (80005d8 <MX_GPIO_Init+0xb4>)
 80005c6:	f000 fa57 	bl	8000a78 <HAL_GPIO_Init>

}
 80005ca:	b008      	add	sp, #32
 80005cc:	bd70      	pop	{r4, r5, r6, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40020800 	.word	0x40020800
 80005d8:	40020000 	.word	0x40020000

080005dc <startMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startMainTask */
void startMainTask(void const * argument)
{
 80005dc:	b508      	push	{r3, lr}
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80005de:	f005 ff6f 	bl	80064c0 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f004 fb17 	bl	8004c16 <osDelay>
  for(;;)
 80005e8:	e7fb      	b.n	80005e2 <startMainTask+0x6>
	...

080005ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80005ee:	6802      	ldr	r2, [r0, #0]
 80005f0:	4b03      	ldr	r3, [pc, #12]	@ (8000600 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d000      	beq.n	80005f8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005f6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80005f8:	f000 f9b4 	bl	8000964 <HAL_IncTick>
}
 80005fc:	e7fb      	b.n	80005f6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80005fe:	bf00      	nop
 8000600:	40014800 	.word	0x40014800

08000604 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000604:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000606:	e7fe      	b.n	8000606 <Error_Handler+0x2>

08000608 <MX_USART1_UART_Init>:
{
 8000608:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800060a:	480a      	ldr	r0, [pc, #40]	@ (8000634 <MX_USART1_UART_Init+0x2c>)
 800060c:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <MX_USART1_UART_Init+0x30>)
 800060e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000610:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000614:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	2300      	movs	r3, #0
 8000618:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800061a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800061c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800061e:	220c      	movs	r2, #12
 8000620:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000626:	f001 fe59 	bl	80022dc <HAL_UART_Init>
 800062a:	b900      	cbnz	r0, 800062e <MX_USART1_UART_Init+0x26>
}
 800062c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800062e:	f7ff ffe9 	bl	8000604 <Error_Handler>
 8000632:	bf00      	nop
 8000634:	20000340 	.word	0x20000340
 8000638:	40011000 	.word	0x40011000

0800063c <SystemClock_Config>:
{
 800063c:	b500      	push	{lr}
 800063e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000640:	2230      	movs	r2, #48	@ 0x30
 8000642:	2100      	movs	r1, #0
 8000644:	a808      	add	r0, sp, #32
 8000646:	f006 f94d 	bl	80068e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064a:	2300      	movs	r3, #0
 800064c:	9303      	str	r3, [sp, #12]
 800064e:	9304      	str	r3, [sp, #16]
 8000650:	9305      	str	r3, [sp, #20]
 8000652:	9306      	str	r3, [sp, #24]
 8000654:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemClock_Config+0x9c>)
 800065a:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800065c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000660:	6411      	str	r1, [r2, #64]	@ 0x40
 8000662:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000664:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000668:	9201      	str	r2, [sp, #4]
 800066a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	9302      	str	r3, [sp, #8]
 800066e:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <SystemClock_Config+0xa0>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067e:	9302      	str	r3, [sp, #8]
 8000680:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000682:	2301      	movs	r3, #1
 8000684:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000686:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800068a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000690:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000694:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000696:	2219      	movs	r2, #25
 8000698:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800069a:	22c0      	movs	r2, #192	@ 0xc0
 800069c:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069e:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	a808      	add	r0, sp, #32
 80006a6:	f001 f8d1 	bl	800184c <HAL_RCC_OscConfig>
 80006aa:	b988      	cbnz	r0, 80006d0 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006bc:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006c0:	2103      	movs	r1, #3
 80006c2:	a803      	add	r0, sp, #12
 80006c4:	f001 fb12 	bl	8001cec <HAL_RCC_ClockConfig>
 80006c8:	b920      	cbnz	r0, 80006d4 <SystemClock_Config+0x98>
}
 80006ca:	b015      	add	sp, #84	@ 0x54
 80006cc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80006d0:	f7ff ff98 	bl	8000604 <Error_Handler>
    Error_Handler();
 80006d4:	f7ff ff96 	bl	8000604 <Error_Handler>
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <main>:
{
 80006e0:	b510      	push	{r4, lr}
 80006e2:	b088      	sub	sp, #32
  HAL_Init();
 80006e4:	f000 f924 	bl	8000930 <HAL_Init>
  SystemClock_Config();
 80006e8:	f7ff ffa8 	bl	800063c <SystemClock_Config>
  MX_GPIO_Init();
 80006ec:	f7ff ff1a 	bl	8000524 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006f0:	f7ff ff8a 	bl	8000608 <MX_USART1_UART_Init>
  osThreadDef(mainTask, startMainTask, osPriorityNormal, 0, 128);
 80006f4:	f10d 0c04 	add.w	ip, sp, #4
 80006f8:	4c08      	ldr	r4, [pc, #32]	@ (800071c <main+0x3c>)
 80006fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000700:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000704:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 8000708:	2100      	movs	r1, #0
 800070a:	a801      	add	r0, sp, #4
 800070c:	f004 fa50 	bl	8004bb0 <osThreadCreate>
 8000710:	4b03      	ldr	r3, [pc, #12]	@ (8000720 <main+0x40>)
 8000712:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000714:	f004 fa47 	bl	8004ba6 <osKernelStart>
  while (1)
 8000718:	e7fe      	b.n	8000718 <main+0x38>
 800071a:	bf00      	nop
 800071c:	08006af0 	.word	0x08006af0
 8000720:	2000033c 	.word	0x2000033c

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b500      	push	{lr}
 8000726:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000728:	2200      	movs	r2, #0
 800072a:	9200      	str	r2, [sp, #0]
 800072c:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <HAL_MspInit+0x40>)
 800072e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000730:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8000734:	6459      	str	r1, [r3, #68]	@ 0x44
 8000736:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000738:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 800073c:	9100      	str	r1, [sp, #0]
 800073e:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	9201      	str	r2, [sp, #4]
 8000742:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000744:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000748:	6419      	str	r1, [r3, #64]	@ 0x40
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000754:	210f      	movs	r1, #15
 8000756:	f06f 0001 	mvn.w	r0, #1
 800075a:	f000 f96f 	bl	8000a3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	b003      	add	sp, #12
 8000760:	f85d fb04 	ldr.w	pc, [sp], #4
 8000764:	40023800 	.word	0x40023800

08000768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000768:	b500      	push	{lr}
 800076a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	2300      	movs	r3, #0
 800076e:	9303      	str	r3, [sp, #12]
 8000770:	9304      	str	r3, [sp, #16]
 8000772:	9305      	str	r3, [sp, #20]
 8000774:	9306      	str	r3, [sp, #24]
 8000776:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000778:	6802      	ldr	r2, [r0, #0]
 800077a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800077e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8000782:	429a      	cmp	r2, r3
 8000784:	d002      	beq.n	800078c <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000786:	b009      	add	sp, #36	@ 0x24
 8000788:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800078c:	2100      	movs	r1, #0
 800078e:	9101      	str	r1, [sp, #4]
 8000790:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8000794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000796:	f042 0210 	orr.w	r2, r2, #16
 800079a:	645a      	str	r2, [r3, #68]	@ 0x44
 800079c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800079e:	f002 0210 	and.w	r2, r2, #16
 80007a2:	9201      	str	r2, [sp, #4]
 80007a4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	9102      	str	r1, [sp, #8]
 80007a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007aa:	f042 0201 	orr.w	r2, r2, #1
 80007ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	9302      	str	r3, [sp, #8]
 80007b8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80007be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007c8:	2307      	movs	r3, #7
 80007ca:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	a903      	add	r1, sp, #12
 80007ce:	4802      	ldr	r0, [pc, #8]	@ (80007d8 <HAL_UART_MspInit+0x70>)
 80007d0:	f000 f952 	bl	8000a78 <HAL_GPIO_Init>
}
 80007d4:	e7d7      	b.n	8000786 <HAL_UART_MspInit+0x1e>
 80007d6:	bf00      	nop
 80007d8:	40020000 	.word	0x40020000

080007dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007dc:	b510      	push	{r4, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	201a      	movs	r0, #26
 80007e6:	f000 f929 	bl	8000a3c <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80007ea:	201a      	movs	r0, #26
 80007ec:	f000 f936 	bl	8000a5c <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80007f0:	2400      	movs	r4, #0
 80007f2:	9401      	str	r4, [sp, #4]
 80007f4:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <HAL_InitTick+0x68>)
 80007f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007f8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80007fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80007fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000800:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000808:	a902      	add	r1, sp, #8
 800080a:	a803      	add	r0, sp, #12
 800080c:	f001 fb44 	bl	8001e98 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000810:	f001 fb32 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <HAL_InitTick+0x6c>)
 8000816:	fba3 2300 	umull	r2, r3, r3, r0
 800081a:	0c9b      	lsrs	r3, r3, #18
 800081c:	3b01      	subs	r3, #1

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 800081e:	480b      	ldr	r0, [pc, #44]	@ (800084c <HAL_InitTick+0x70>)
 8000820:	4a0b      	ldr	r2, [pc, #44]	@ (8000850 <HAL_InitTick+0x74>)
 8000822:	6002      	str	r2, [r0, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000824:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000828:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800082a:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 800082c:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082e:	6084      	str	r4, [r0, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000830:	f001 fc9e 	bl	8002170 <HAL_TIM_Base_Init>
 8000834:	b110      	cbz	r0, 800083c <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
  }

  /* Return function status */
  return HAL_ERROR;
 8000836:	2001      	movs	r0, #1
}
 8000838:	b008      	add	sp, #32
 800083a:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim11);
 800083c:	4803      	ldr	r0, [pc, #12]	@ (800084c <HAL_InitTick+0x70>)
 800083e:	f001 fb4b 	bl	8001ed8 <HAL_TIM_Base_Start_IT>
 8000842:	e7f9      	b.n	8000838 <HAL_InitTick+0x5c>
 8000844:	40023800 	.word	0x40023800
 8000848:	431bde83 	.word	0x431bde83
 800084c:	20000384 	.word	0x20000384
 8000850:	40014800 	.word	0x40014800

08000854 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler>

08000856 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler>

08000858 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <MemManage_Handler>

0800085a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler>

0800085c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <UsageFault_Handler>

0800085e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	4770      	bx	lr

08000860 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000860:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000862:	4802      	ldr	r0, [pc, #8]	@ (800086c <TIM1_TRG_COM_TIM11_IRQHandler+0xc>)
 8000864:	f001 fb78 	bl	8001f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000868:	bd08      	pop	{r3, pc}
 800086a:	bf00      	nop
 800086c:	20000384 	.word	0x20000384

08000870 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000870:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000872:	4802      	ldr	r0, [pc, #8]	@ (800087c <OTG_FS_IRQHandler+0xc>)
 8000874:	f000 fefe 	bl	8001674 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000878:	bd08      	pop	{r3, pc}
 800087a:	bf00      	nop
 800087c:	20004510 	.word	0x20004510

08000880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000880:	b510      	push	{r4, lr}
 8000882:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000884:	4a0c      	ldr	r2, [pc, #48]	@ (80008b8 <_sbrk+0x38>)
 8000886:	490d      	ldr	r1, [pc, #52]	@ (80008bc <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000888:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <_sbrk+0x40>)
 800088a:	6800      	ldr	r0, [r0, #0]
 800088c:	b140      	cbz	r0, 80008a0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088e:	480c      	ldr	r0, [pc, #48]	@ (80008c0 <_sbrk+0x40>)
 8000890:	6800      	ldr	r0, [r0, #0]
 8000892:	4403      	add	r3, r0
 8000894:	1a52      	subs	r2, r2, r1
 8000896:	4293      	cmp	r3, r2
 8000898:	d806      	bhi.n	80008a8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800089a:	4a09      	ldr	r2, [pc, #36]	@ (80008c0 <_sbrk+0x40>)
 800089c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800089e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80008a0:	4807      	ldr	r0, [pc, #28]	@ (80008c0 <_sbrk+0x40>)
 80008a2:	4c08      	ldr	r4, [pc, #32]	@ (80008c4 <_sbrk+0x44>)
 80008a4:	6004      	str	r4, [r0, #0]
 80008a6:	e7f2      	b.n	800088e <_sbrk+0xe>
    errno = ENOMEM;
 80008a8:	f006 f892 	bl	80069d0 <__errno>
 80008ac:	230c      	movs	r3, #12
 80008ae:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008b4:	e7f3      	b.n	800089e <_sbrk+0x1e>
 80008b6:	bf00      	nop
 80008b8:	20020000 	.word	0x20020000
 80008bc:	00000400 	.word	0x00000400
 80008c0:	200003cc 	.word	0x200003cc
 80008c4:	20004960 	.word	0x20004960

080008c8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c8:	4a03      	ldr	r2, [pc, #12]	@ (80008d8 <SystemInit+0x10>)
 80008ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80008ce:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d6:	4770      	bx	lr
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000914 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008e0:	480d      	ldr	r0, [pc, #52]	@ (8000918 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008e2:	490e      	ldr	r1, [pc, #56]	@ (800091c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000924 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008f8:	4c0b      	ldr	r4, [pc, #44]	@ (8000928 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000906:	f7ff ffdf 	bl	80008c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090a:	f006 f867 	bl	80069dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090e:	f7ff fee7 	bl	80006e0 <main>
  bx  lr    
 8000912:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000920:	08006b84 	.word	0x08006b84
  ldr r2, =_sbss
 8000924:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000928:	2000495c 	.word	0x2000495c

0800092c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <HAL_Init+0x30>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800093a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000942:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800094a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f863 	bl	8000a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	200f      	movs	r0, #15
 8000954:	f7ff ff42 	bl	80007dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff fee4 	bl	8000724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800095c:	2000      	movs	r0, #0
 800095e:	bd08      	pop	{r3, pc}
 8000960:	40023c00 	.word	0x40023c00

08000964 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000964:	4a03      	ldr	r2, [pc, #12]	@ (8000974 <HAL_IncTick+0x10>)
 8000966:	6811      	ldr	r1, [r2, #0]
 8000968:	4b03      	ldr	r3, [pc, #12]	@ (8000978 <HAL_IncTick+0x14>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	440b      	add	r3, r1
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	200003d0 	.word	0x200003d0
 8000978:	20000004 	.word	0x20000004

0800097c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800097c:	4b01      	ldr	r3, [pc, #4]	@ (8000984 <HAL_GetTick+0x8>)
 800097e:	6818      	ldr	r0, [r3, #0]
}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	200003d0 	.word	0x200003d0

08000988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000988:	b538      	push	{r3, r4, r5, lr}
 800098a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800098c:	f7ff fff6 	bl	800097c <HAL_GetTick>
 8000990:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000992:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8000996:	d002      	beq.n	800099e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000998:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <HAL_Delay+0x24>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800099e:	f7ff ffed 	bl	800097c <HAL_GetTick>
 80009a2:	1b40      	subs	r0, r0, r5
 80009a4:	42a0      	cmp	r0, r4
 80009a6:	d3fa      	bcc.n	800099e <HAL_Delay+0x16>
  {
  }
}
 80009a8:	bd38      	pop	{r3, r4, r5, pc}
 80009aa:	bf00      	nop
 80009ac:	20000004 	.word	0x20000004

080009b0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80009b0:	2800      	cmp	r0, #0
 80009b2:	db08      	blt.n	80009c6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b4:	0109      	lsls	r1, r1, #4
 80009b6:	b2c9      	uxtb	r1, r1
 80009b8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80009bc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80009c0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80009c4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c6:	f000 000f 	and.w	r0, r0, #15
 80009ca:	0109      	lsls	r1, r1, #4
 80009cc:	b2c9      	uxtb	r1, r1
 80009ce:	4b01      	ldr	r3, [pc, #4]	@ (80009d4 <__NVIC_SetPriority+0x24>)
 80009d0:	5419      	strb	r1, [r3, r0]
  }
}
 80009d2:	4770      	bx	lr
 80009d4:	e000ed14 	.word	0xe000ed14

080009d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009da:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009de:	f1c0 0c07 	rsb	ip, r0, #7
 80009e2:	f1bc 0f04 	cmp.w	ip, #4
 80009e6:	bf28      	it	cs
 80009e8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ec:	1d03      	adds	r3, r0, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d90f      	bls.n	8000a12 <NVIC_EncodePriority+0x3a>
 80009f2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80009f8:	fa0e f00c 	lsl.w	r0, lr, ip
 80009fc:	ea21 0100 	bic.w	r1, r1, r0
 8000a00:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a02:	fa0e fe03 	lsl.w	lr, lr, r3
 8000a06:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000a0a:	ea41 0002 	orr.w	r0, r1, r2
 8000a0e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a12:	2300      	movs	r3, #0
 8000a14:	e7ee      	b.n	80009f4 <NVIC_EncodePriority+0x1c>
	...

08000a18 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a18:	4a07      	ldr	r2, [pc, #28]	@ (8000a38 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a1a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000a20:	041b      	lsls	r3, r3, #16
 8000a22:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a24:	0200      	lsls	r0, r0, #8
 8000a26:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a2a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000a34:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a3c:	b510      	push	{r4, lr}
 8000a3e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <HAL_NVIC_SetPriority+0x1c>)
 8000a42:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a44:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000a48:	f7ff ffc6 	bl	80009d8 <NVIC_EncodePriority>
 8000a4c:	4601      	mov	r1, r0
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f7ff ffae 	bl	80009b0 <__NVIC_SetPriority>
}
 8000a54:	bd10      	pop	{r4, pc}
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	2800      	cmp	r0, #0
 8000a5e:	db07      	blt.n	8000a70 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a60:	f000 021f 	and.w	r2, r0, #31
 8000a64:	0940      	lsrs	r0, r0, #5
 8000a66:	2301      	movs	r3, #1
 8000a68:	4093      	lsls	r3, r2
 8000a6a:	4a02      	ldr	r2, [pc, #8]	@ (8000a74 <HAL_NVIC_EnableIRQ+0x18>)
 8000a6c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000e100 	.word	0xe000e100

08000a78 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	2b0f      	cmp	r3, #15
 8000a7c:	f200 80d7 	bhi.w	8000c2e <HAL_GPIO_Init+0x1b6>
{
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	e065      	b.n	8000b52 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a86:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a88:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000a8c:	2403      	movs	r4, #3
 8000a8e:	fa04 f40e 	lsl.w	r4, r4, lr
 8000a92:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a96:	68cc      	ldr	r4, [r1, #12]
 8000a98:	fa04 f40e 	lsl.w	r4, r4, lr
 8000a9c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000a9e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aa0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aa2:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aa6:	684a      	ldr	r2, [r1, #4]
 8000aa8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000aac:	409a      	lsls	r2, r3
 8000aae:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000ab0:	6042      	str	r2, [r0, #4]
 8000ab2:	e05c      	b.n	8000b6e <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ab4:	08dc      	lsrs	r4, r3, #3
 8000ab6:	3408      	adds	r4, #8
 8000ab8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000abc:	f003 0507 	and.w	r5, r3, #7
 8000ac0:	00ad      	lsls	r5, r5, #2
 8000ac2:	f04f 0e0f 	mov.w	lr, #15
 8000ac6:	fa0e fe05 	lsl.w	lr, lr, r5
 8000aca:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ace:	690a      	ldr	r2, [r1, #16]
 8000ad0:	40aa      	lsls	r2, r5
 8000ad2:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000ad6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000ada:	e05c      	b.n	8000b96 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000adc:	2204      	movs	r2, #4
 8000ade:	e000      	b.n	8000ae2 <HAL_GPIO_Init+0x6a>
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ae6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ae8:	3402      	adds	r4, #2
 8000aea:	4d51      	ldr	r5, [pc, #324]	@ (8000c30 <HAL_GPIO_Init+0x1b8>)
 8000aec:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000af0:	4a50      	ldr	r2, [pc, #320]	@ (8000c34 <HAL_GPIO_Init+0x1bc>)
 8000af2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000af4:	ea6f 020c 	mvn.w	r2, ip
 8000af8:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000afc:	684e      	ldr	r6, [r1, #4]
 8000afe:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8000b02:	d001      	beq.n	8000b08 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000b04:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8000b08:	4c4a      	ldr	r4, [pc, #296]	@ (8000c34 <HAL_GPIO_Init+0x1bc>)
 8000b0a:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000b0c:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000b0e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b12:	684e      	ldr	r6, [r1, #4]
 8000b14:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000b18:	d001      	beq.n	8000b1e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000b1a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000b1e:	4c45      	ldr	r4, [pc, #276]	@ (8000c34 <HAL_GPIO_Init+0x1bc>)
 8000b20:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b22:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000b24:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b28:	684e      	ldr	r6, [r1, #4]
 8000b2a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000b2e:	d001      	beq.n	8000b34 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000b30:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000b34:	4c3f      	ldr	r4, [pc, #252]	@ (8000c34 <HAL_GPIO_Init+0x1bc>)
 8000b36:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000b38:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000b3a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b3c:	684d      	ldr	r5, [r1, #4]
 8000b3e:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
 8000b42:	d001      	beq.n	8000b48 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000b44:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8000b48:	4c3a      	ldr	r4, [pc, #232]	@ (8000c34 <HAL_GPIO_Init+0x1bc>)
 8000b4a:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	2b0f      	cmp	r3, #15
 8000b50:	d86b      	bhi.n	8000c2a <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8000b52:	2201      	movs	r2, #1
 8000b54:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b56:	680c      	ldr	r4, [r1, #0]
 8000b58:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000b5c:	ea32 0404 	bics.w	r4, r2, r4
 8000b60:	d1f4      	bne.n	8000b4c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b62:	684c      	ldr	r4, [r1, #4]
 8000b64:	f004 0403 	and.w	r4, r4, #3
 8000b68:	3c01      	subs	r4, #1
 8000b6a:	2c01      	cmp	r4, #1
 8000b6c:	d98b      	bls.n	8000a86 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b6e:	684a      	ldr	r2, [r1, #4]
 8000b70:	f002 0203 	and.w	r2, r2, #3
 8000b74:	2a03      	cmp	r2, #3
 8000b76:	d009      	beq.n	8000b8c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000b78:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b7a:	005d      	lsls	r5, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	40aa      	lsls	r2, r5
 8000b80:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b84:	688a      	ldr	r2, [r1, #8]
 8000b86:	40aa      	lsls	r2, r5
 8000b88:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000b8a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b8c:	684a      	ldr	r2, [r1, #4]
 8000b8e:	f002 0203 	and.w	r2, r2, #3
 8000b92:	2a02      	cmp	r2, #2
 8000b94:	d08e      	beq.n	8000ab4 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000b96:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b98:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ba2:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ba6:	684a      	ldr	r2, [r1, #4]
 8000ba8:	f002 0203 	and.w	r2, r2, #3
 8000bac:	fa02 f20e 	lsl.w	r2, r2, lr
 8000bb0:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000bb2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bb4:	684a      	ldr	r2, [r1, #4]
 8000bb6:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000bba:	d0c7      	beq.n	8000b4c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	9201      	str	r2, [sp, #4]
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c38 <HAL_GPIO_Init+0x1c0>)
 8000bc2:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000bc4:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000bc8:	6454      	str	r4, [r2, #68]	@ 0x44
 8000bca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000bcc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000bd0:	9201      	str	r2, [sp, #4]
 8000bd2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bd4:	089c      	lsrs	r4, r3, #2
 8000bd6:	1ca5      	adds	r5, r4, #2
 8000bd8:	4a15      	ldr	r2, [pc, #84]	@ (8000c30 <HAL_GPIO_Init+0x1b8>)
 8000bda:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bde:	f003 0e03 	and.w	lr, r3, #3
 8000be2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000be6:	220f      	movs	r2, #15
 8000be8:	fa02 f20e 	lsl.w	r2, r2, lr
 8000bec:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bf0:	4a12      	ldr	r2, [pc, #72]	@ (8000c3c <HAL_GPIO_Init+0x1c4>)
 8000bf2:	4290      	cmp	r0, r2
 8000bf4:	f43f af74 	beq.w	8000ae0 <HAL_GPIO_Init+0x68>
 8000bf8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000bfc:	4290      	cmp	r0, r2
 8000bfe:	d00e      	beq.n	8000c1e <HAL_GPIO_Init+0x1a6>
 8000c00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d00c      	beq.n	8000c22 <HAL_GPIO_Init+0x1aa>
 8000c08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c0c:	4290      	cmp	r0, r2
 8000c0e:	d00a      	beq.n	8000c26 <HAL_GPIO_Init+0x1ae>
 8000c10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c14:	4290      	cmp	r0, r2
 8000c16:	f43f af61 	beq.w	8000adc <HAL_GPIO_Init+0x64>
 8000c1a:	2207      	movs	r2, #7
 8000c1c:	e761      	b.n	8000ae2 <HAL_GPIO_Init+0x6a>
 8000c1e:	2201      	movs	r2, #1
 8000c20:	e75f      	b.n	8000ae2 <HAL_GPIO_Init+0x6a>
 8000c22:	2202      	movs	r2, #2
 8000c24:	e75d      	b.n	8000ae2 <HAL_GPIO_Init+0x6a>
 8000c26:	2203      	movs	r2, #3
 8000c28:	e75b      	b.n	8000ae2 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd70      	pop	{r4, r5, r6, pc}
 8000c2e:	4770      	bx	lr
 8000c30:	40013800 	.word	0x40013800
 8000c34:	40013c00 	.word	0x40013c00
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000

08000c40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c40:	b10a      	cbz	r2, 8000c46 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c42:	6181      	str	r1, [r0, #24]
 8000c44:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c46:	0409      	lsls	r1, r1, #16
 8000c48:	6181      	str	r1, [r0, #24]
  }
}
 8000c4a:	4770      	bx	lr

08000c4c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000c4e:	6806      	ldr	r6, [r0, #0]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8000c50:	6a34      	ldr	r4, [r6, #32]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8000c52:	f004 070f 	and.w	r7, r4, #15
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8000c56:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000c5a:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d000      	beq.n	8000c64 <HCD_RXQLVL_IRQHandler+0x18>
    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
  }
}
 8000c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c64:	4605      	mov	r5, r0
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8000c66:	2c00      	cmp	r4, #0
 8000c68:	d0fb      	beq.n	8000c62 <HCD_RXQLVL_IRQHandler+0x16>
 8000c6a:	232c      	movs	r3, #44	@ 0x2c
 8000c6c:	fb03 0307 	mla	r3, r3, r7, r0
 8000c70:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000c72:	2900      	cmp	r1, #0
 8000c74:	d0f5      	beq.n	8000c62 <HCD_RXQLVL_IRQHandler+0x16>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8000c76:	232c      	movs	r3, #44	@ 0x2c
 8000c78:	fb03 0307 	mla	r3, r3, r7, r0
 8000c7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000c7e:	4422      	add	r2, r4
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d906      	bls.n	8000c94 <HCD_RXQLVL_IRQHandler+0x48>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000c86:	232c      	movs	r3, #44	@ 0x2c
 8000c88:	fb03 0507 	mla	r5, r3, r7, r0
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	f885 3060 	strb.w	r3, [r5, #96]	@ 0x60
}
 8000c92:	e7e6      	b.n	8000c62 <HCD_RXQLVL_IRQHandler+0x16>
          (void)USB_ReadPacket(hhcd->Instance,
 8000c94:	4622      	mov	r2, r4
 8000c96:	4630      	mov	r0, r6
 8000c98:	f001 fc0d 	bl	80024b6 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8000c9c:	232c      	movs	r3, #44	@ 0x2c
 8000c9e:	fb03 5307 	mla	r3, r3, r7, r5
 8000ca2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000ca4:	4422      	add	r2, r4
 8000ca6:	645a      	str	r2, [r3, #68]	@ 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8000ca8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000caa:	4422      	add	r2, r4
 8000cac:	651a      	str	r2, [r3, #80]	@ 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8000cae:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 8000cb2:	f8d6 2510 	ldr.w	r2, [r6, #1296]	@ 0x510
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8000cb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d1d1      	bne.n	8000c62 <HCD_RXQLVL_IRQHandler+0x16>
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <HCD_RXQLVL_IRQHandler+0xa0>)
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0cd      	beq.n	8000c62 <HCD_RXQLVL_IRQHandler+0x16>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000cc6:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000cca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000cce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000cd2:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8000cd6:	232c      	movs	r3, #44	@ 0x2c
 8000cd8:	fb03 5307 	mla	r3, r3, r7, r5
 8000cdc:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8000ce0:	f082 0201 	eor.w	r2, r2, #1
 8000ce4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8000ce8:	e7bb      	b.n	8000c62 <HCD_RXQLVL_IRQHandler+0x16>
 8000cea:	bf00      	nop
 8000cec:	1ff80000 	.word	0x1ff80000

08000cf0 <HAL_HCD_HC_Init>:
{
 8000cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8000cfa:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 8000cfe:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
  __HAL_LOCK(hhcd);
 8000d02:	f890 02f8 	ldrb.w	r0, [r0, #760]	@ 0x2f8
 8000d06:	2801      	cmp	r0, #1
 8000d08:	d037      	beq.n	8000d7a <HAL_HCD_HC_Init+0x8a>
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f884 02f8 	strb.w	r0, [r4, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8000d10:	202c      	movs	r0, #44	@ 0x2c
 8000d12:	fb00 4001 	mla	r0, r0, r1, r4
 8000d16:	f04f 0c00 	mov.w	ip, #0
 8000d1a:	f880 c03d 	strb.w	ip, [r0, #61]	@ 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000d1e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8000d22:	f8a0 7040 	strh.w	r7, [r0, #64]	@ 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 8000d26:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8000d2a:	f880 603f 	strb.w	r6, [r0, #63]	@ 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000d2e:	f002 0c7f 	and.w	ip, r2, #127	@ 0x7f
 8000d32:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
  if ((epnum & 0x80U) == 0x80U)
 8000d36:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8000d3a:	d116      	bne.n	8000d6a <HAL_HCD_HC_Init+0x7a>
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000d3c:	202c      	movs	r0, #44	@ 0x2c
 8000d3e:	fb00 4001 	mla	r0, r0, r1, r4
 8000d42:	f04f 0c00 	mov.w	ip, #0
 8000d46:	f880 c03b 	strb.w	ip, [r0, #59]	@ 0x3b
  hhcd->hc[ch_num].speed = speed;
 8000d4a:	202c      	movs	r0, #44	@ 0x2c
 8000d4c:	fb00 4001 	mla	r0, r0, r1, r4
 8000d50:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  status =  USB_HC_Init(hhcd->Instance,
 8000d54:	9702      	str	r7, [sp, #8]
 8000d56:	9601      	str	r6, [sp, #4]
 8000d58:	9500      	str	r5, [sp, #0]
 8000d5a:	6820      	ldr	r0, [r4, #0]
 8000d5c:	f001 fcef 	bl	800273e <USB_HC_Init>
  __HAL_UNLOCK(hhcd);
 8000d60:	2300      	movs	r3, #0
 8000d62:	f884 32f8 	strb.w	r3, [r4, #760]	@ 0x2f8
}
 8000d66:	b005      	add	sp, #20
 8000d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000d6a:	202c      	movs	r0, #44	@ 0x2c
 8000d6c:	fb00 4001 	mla	r0, r0, r1, r4
 8000d70:	f04f 0c01 	mov.w	ip, #1
 8000d74:	f880 c03b 	strb.w	ip, [r0, #59]	@ 0x3b
 8000d78:	e7e7      	b.n	8000d4a <HAL_HCD_HC_Init+0x5a>
  __HAL_LOCK(hhcd);
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	e7f3      	b.n	8000d66 <HAL_HCD_HC_Init+0x76>

08000d7e <HAL_HCD_HC_Halt>:
  __HAL_LOCK(hhcd);
 8000d7e:	f890 32f8 	ldrb.w	r3, [r0, #760]	@ 0x2f8
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d00b      	beq.n	8000d9e <HAL_HCD_HC_Halt+0x20>
{
 8000d86:	b510      	push	{r4, lr}
 8000d88:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	f880 32f8 	strb.w	r3, [r0, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d90:	6800      	ldr	r0, [r0, #0]
 8000d92:	f001 fd67 	bl	8002864 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f884 02f8 	strb.w	r0, [r4, #760]	@ 0x2f8
}
 8000d9c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8000d9e:	2002      	movs	r0, #2
}
 8000da0:	4770      	bx	lr

08000da2 <HAL_HCD_Init>:
  if (hhcd == NULL)
 8000da2:	2800      	cmp	r0, #0
 8000da4:	d04d      	beq.n	8000e42 <HAL_HCD_Init+0xa0>
{
 8000da6:	b570      	push	{r4, r5, r6, lr}
 8000da8:	b08a      	sub	sp, #40	@ 0x28
 8000daa:	4604      	mov	r4, r0
  USBx = hhcd->Instance;
 8000dac:	6805      	ldr	r5, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000dae:	f890 32f9 	ldrb.w	r3, [r0, #761]	@ 0x2f9
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d040      	beq.n	8000e38 <HAL_HCD_Init+0x96>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000db6:	2303      	movs	r3, #3
 8000db8:	f884 32f9 	strb.w	r3, [r4, #761]	@ 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000dbc:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8000dbe:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000dc2:	d101      	bne.n	8000dc8 <HAL_HCD_Init+0x26>
    hhcd->Init.dma_enable = 0U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	6123      	str	r3, [r4, #16]
  __HAL_HCD_DISABLE(hhcd);
 8000dc8:	6820      	ldr	r0, [r4, #0]
 8000dca:	f001 fb28 	bl	800241e <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000dce:	46a4      	mov	ip, r4
 8000dd0:	f85c 6b10 	ldr.w	r6, [ip], #16
 8000dd4:	46ee      	mov	lr, sp
 8000dd6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000dda:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000dde:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000de2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000de6:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8000dea:	e88e 0003 	stmia.w	lr, {r0, r1}
 8000dee:	1d25      	adds	r5, r4, #4
 8000df0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000df4:	4630      	mov	r0, r6
 8000df6:	f001 fac7 	bl	8002388 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	6820      	ldr	r0, [r4, #0]
 8000dfe:	f001 fb85 	bl	800250c <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000e02:	46a4      	mov	ip, r4
 8000e04:	f85c 6b10 	ldr.w	r6, [ip], #16
 8000e08:	46ee      	mov	lr, sp
 8000e0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000e0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000e12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000e16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000e1a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8000e1e:	e88e 0003 	stmia.w	lr, {r0, r1}
 8000e22:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000e26:	4630      	mov	r0, r6
 8000e28:	f001 fba2 	bl	8002570 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	f884 32f9 	strb.w	r3, [r4, #761]	@ 0x2f9
  return HAL_OK;
 8000e32:	2000      	movs	r0, #0
}
 8000e34:	b00a      	add	sp, #40	@ 0x28
 8000e36:	bd70      	pop	{r4, r5, r6, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8000e38:	f880 32f8 	strb.w	r3, [r0, #760]	@ 0x2f8
    HAL_HCD_MspInit(hhcd);
 8000e3c:	f005 fb60 	bl	8006500 <HAL_HCD_MspInit>
 8000e40:	e7b9      	b.n	8000db6 <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 8000e42:	2001      	movs	r0, #1
}
 8000e44:	4770      	bx	lr

08000e46 <HAL_HCD_HC_SubmitRequest>:
{
 8000e46:	b570      	push	{r4, r5, r6, lr}
 8000e48:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8000e4c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000e50:	f04f 0c2c 	mov.w	ip, #44	@ 0x2c
 8000e54:	fb0c 0c01 	mla	ip, ip, r1, r0
 8000e58:	f88c 203b 	strb.w	r2, [ip, #59]	@ 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000e5c:	f88c 303f 	strb.w	r3, [ip, #63]	@ 0x3f
  if (token == 0U)
 8000e60:	b97d      	cbnz	r5, 8000e82 <HAL_HCD_HC_SubmitRequest+0x3c>
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000e62:	4664      	mov	r4, ip
 8000e64:	f04f 0c03 	mov.w	ip, #3
 8000e68:	f884 c042 	strb.w	ip, [r4, #66]	@ 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 8000e6c:	f89d c01c 	ldrb.w	ip, [sp, #28]
 8000e70:	f884 c03d 	strb.w	ip, [r4, #61]	@ 0x3d
  switch (ep_type)
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	f200 8081 	bhi.w	8000f7c <HAL_HCD_HC_SubmitRequest+0x136>
 8000e7a:	e8df f003 	tbb	[pc, r3]
 8000e7e:	790a      	.short	0x790a
 8000e80:	5129      	.short	0x5129
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e82:	242c      	movs	r4, #44	@ 0x2c
 8000e84:	fb04 0401 	mla	r4, r4, r1, r0
 8000e88:	f04f 0c02 	mov.w	ip, #2
 8000e8c:	f884 c042 	strb.w	ip, [r4, #66]	@ 0x42
 8000e90:	e7f0      	b.n	8000e74 <HAL_HCD_HC_SubmitRequest+0x2e>
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000e92:	2d01      	cmp	r5, #1
 8000e94:	d172      	bne.n	8000f7c <HAL_HCD_HC_SubmitRequest+0x136>
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	d170      	bne.n	8000f7c <HAL_HCD_HC_SubmitRequest+0x136>
        if (length == 0U)
 8000e9a:	b92e      	cbnz	r6, 8000ea8 <HAL_HCD_HC_SubmitRequest+0x62>
          hhcd->hc[ch_num].toggle_out = 1U;
 8000e9c:	232c      	movs	r3, #44	@ 0x2c
 8000e9e:	fb03 0301 	mla	r3, r3, r1, r0
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000ea8:	232c      	movs	r3, #44	@ 0x2c
 8000eaa:	fb03 0301 	mla	r3, r3, r1, r0
 8000eae:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8000eb2:	b933      	cbnz	r3, 8000ec2 <HAL_HCD_HC_SubmitRequest+0x7c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000eb4:	232c      	movs	r3, #44	@ 0x2c
 8000eb6:	fb03 0301 	mla	r3, r3, r1, r0
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000ec0:	e05c      	b.n	8000f7c <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ec2:	232c      	movs	r3, #44	@ 0x2c
 8000ec4:	fb03 0301 	mla	r3, r3, r1, r0
 8000ec8:	2202      	movs	r2, #2
 8000eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000ece:	e055      	b.n	8000f7c <HAL_HCD_HC_SubmitRequest+0x136>
      if (direction == 0U)
 8000ed0:	b992      	cbnz	r2, 8000ef8 <HAL_HCD_HC_SubmitRequest+0xb2>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000ed2:	232c      	movs	r3, #44	@ 0x2c
 8000ed4:	fb03 0301 	mla	r3, r3, r1, r0
 8000ed8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8000edc:	b92b      	cbnz	r3, 8000eea <HAL_HCD_HC_SubmitRequest+0xa4>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ede:	232c      	movs	r3, #44	@ 0x2c
 8000ee0:	fb03 0301 	mla	r3, r3, r1, r0
 8000ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000ee8:	e048      	b.n	8000f7c <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000eea:	232c      	movs	r3, #44	@ 0x2c
 8000eec:	fb03 0301 	mla	r3, r3, r1, r0
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000ef6:	e041      	b.n	8000f7c <HAL_HCD_HC_SubmitRequest+0x136>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000ef8:	232c      	movs	r3, #44	@ 0x2c
 8000efa:	fb03 0301 	mla	r3, r3, r1, r0
 8000efe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000f02:	b933      	cbnz	r3, 8000f12 <HAL_HCD_HC_SubmitRequest+0xcc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f04:	232c      	movs	r3, #44	@ 0x2c
 8000f06:	fb03 0301 	mla	r3, r3, r1, r0
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000f10:	e034      	b.n	8000f7c <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f12:	232c      	movs	r3, #44	@ 0x2c
 8000f14:	fb03 0301 	mla	r3, r3, r1, r0
 8000f18:	2202      	movs	r2, #2
 8000f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000f1e:	e02d      	b.n	8000f7c <HAL_HCD_HC_SubmitRequest+0x136>
      if (direction == 0U)
 8000f20:	b992      	cbnz	r2, 8000f48 <HAL_HCD_HC_SubmitRequest+0x102>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f22:	232c      	movs	r3, #44	@ 0x2c
 8000f24:	fb03 0301 	mla	r3, r3, r1, r0
 8000f28:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8000f2c:	b92b      	cbnz	r3, 8000f3a <HAL_HCD_HC_SubmitRequest+0xf4>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f2e:	232c      	movs	r3, #44	@ 0x2c
 8000f30:	fb03 0301 	mla	r3, r3, r1, r0
 8000f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000f38:	e020      	b.n	8000f7c <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f3a:	232c      	movs	r3, #44	@ 0x2c
 8000f3c:	fb03 0301 	mla	r3, r3, r1, r0
 8000f40:	2202      	movs	r2, #2
 8000f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000f46:	e019      	b.n	8000f7c <HAL_HCD_HC_SubmitRequest+0x136>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f48:	232c      	movs	r3, #44	@ 0x2c
 8000f4a:	fb03 0301 	mla	r3, r3, r1, r0
 8000f4e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000f52:	b933      	cbnz	r3, 8000f62 <HAL_HCD_HC_SubmitRequest+0x11c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f54:	232c      	movs	r3, #44	@ 0x2c
 8000f56:	fb03 0301 	mla	r3, r3, r1, r0
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000f60:	e00c      	b.n	8000f7c <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f62:	232c      	movs	r3, #44	@ 0x2c
 8000f64:	fb03 0301 	mla	r3, r3, r1, r0
 8000f68:	2202      	movs	r2, #2
 8000f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000f6e:	e005      	b.n	8000f7c <HAL_HCD_HC_SubmitRequest+0x136>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f70:	232c      	movs	r3, #44	@ 0x2c
 8000f72:	fb03 0301 	mla	r3, r3, r1, r0
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000f7c:	232c      	movs	r3, #44	@ 0x2c
 8000f7e:	fb01 f303 	mul.w	r3, r1, r3
 8000f82:	18c2      	adds	r2, r0, r3
 8000f84:	9c05      	ldr	r4, [sp, #20]
 8000f86:	6454      	str	r4, [r2, #68]	@ 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8000f88:	64d6      	str	r6, [r2, #76]	@ 0x4c
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000f8a:	2400      	movs	r4, #0
 8000f8c:	f882 4060 	strb.w	r4, [r2, #96]	@ 0x60
  hhcd->hc[ch_num].xfer_count = 0U;
 8000f90:	6514      	str	r4, [r2, #80]	@ 0x50
  hhcd->hc[ch_num].ch_num = ch_num;
 8000f92:	f882 1039 	strb.w	r1, [r2, #57]	@ 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 8000f96:	f882 4061 	strb.w	r4, [r2, #97]	@ 0x61
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000f9a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8000f9e:	7c02      	ldrb	r2, [r0, #16]
 8000fa0:	4401      	add	r1, r0
 8000fa2:	6800      	ldr	r0, [r0, #0]
 8000fa4:	f001 fce2 	bl	800296c <USB_HC_StartXfer>
}
 8000fa8:	bd70      	pop	{r4, r5, r6, pc}

08000faa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000faa:	b530      	push	{r4, r5, lr}
 8000fac:	b083      	sub	sp, #12
 8000fae:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000fb0:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000fb2:	f8d5 3440 	ldr.w	r3, [r5, #1088]	@ 0x440
 8000fb6:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 8000fb8:	f8d5 3440 	ldr.w	r3, [r5, #1088]	@ 0x440
 8000fbc:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000fbe:	9b00      	ldr	r3, [sp, #0]
 8000fc0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8000fc4:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000fc6:	9b01      	ldr	r3, [sp, #4]
 8000fc8:	f013 0f02 	tst.w	r3, #2
 8000fcc:	d007      	beq.n	8000fde <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000fce:	9b01      	ldr	r3, [sp, #4]
 8000fd0:	f013 0f01 	tst.w	r3, #1
 8000fd4:	d125      	bne.n	8001022 <HCD_Port_IRQHandler+0x78>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8000fd6:	9b00      	ldr	r3, [sp, #0]
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000fde:	9b01      	ldr	r3, [sp, #4]
 8000fe0:	f013 0f08 	tst.w	r3, #8
 8000fe4:	d010      	beq.n	8001008 <HCD_Port_IRQHandler+0x5e>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000fe6:	9b00      	ldr	r3, [sp, #0]
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8000fee:	9b01      	ldr	r3, [sp, #4]
 8000ff0:	f013 0f04 	tst.w	r3, #4
 8000ff4:	d02d      	beq.n	8001052 <HCD_Port_IRQHandler+0xa8>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8000ff6:	69a3      	ldr	r3, [r4, #24]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d015      	beq.n	8001028 <HCD_Port_IRQHandler+0x7e>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8000ffc:	68e3      	ldr	r3, [r4, #12]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d022      	beq.n	8001048 <HCD_Port_IRQHandler+0x9e>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001002:	4620      	mov	r0, r4
 8001004:	f005 fad6 	bl	80065b4 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001008:	9b01      	ldr	r3, [sp, #4]
 800100a:	f013 0f20 	tst.w	r3, #32
 800100e:	d003      	beq.n	8001018 <HCD_Port_IRQHandler+0x6e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001010:	9b00      	ldr	r3, [sp, #0]
 8001012:	f043 0320 	orr.w	r3, r3, #32
 8001016:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001018:	9b00      	ldr	r3, [sp, #0]
 800101a:	f8c5 3440 	str.w	r3, [r5, #1088]	@ 0x440
}
 800101e:	b003      	add	sp, #12
 8001020:	bd30      	pop	{r4, r5, pc}
      HAL_HCD_Connect_Callback(hhcd);
 8001022:	f005 fab5 	bl	8006590 <HAL_HCD_Connect_Callback>
 8001026:	e7d6      	b.n	8000fd6 <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001028:	9b01      	ldr	r3, [sp, #4]
 800102a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800102e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001032:	d004      	beq.n	800103e <HCD_Port_IRQHandler+0x94>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001034:	2101      	movs	r1, #1
 8001036:	6820      	ldr	r0, [r4, #0]
 8001038:	f001 fb10 	bl	800265c <USB_InitFSLSPClkSel>
 800103c:	e7e1      	b.n	8001002 <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800103e:	2102      	movs	r1, #2
 8001040:	6820      	ldr	r0, [r4, #0]
 8001042:	f001 fb0b 	bl	800265c <USB_InitFSLSPClkSel>
 8001046:	e7dc      	b.n	8001002 <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 8001048:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800104c:	f8c5 2404 	str.w	r2, [r5, #1028]	@ 0x404
 8001050:	e7d7      	b.n	8001002 <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001052:	4620      	mov	r0, r4
 8001054:	f005 fab4 	bl	80065c0 <HAL_HCD_PortDisabled_Callback>
 8001058:	e7d6      	b.n	8001008 <HCD_Port_IRQHandler+0x5e>

0800105a <HCD_HC_IN_IRQHandler>:
{
 800105a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105c:	4605      	mov	r5, r0
 800105e:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001060:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001062:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 8001066:	f507 64a0 	add.w	r4, r7, #1280	@ 0x500
 800106a:	68a3      	ldr	r3, [r4, #8]
 800106c:	f013 0f04 	tst.w	r3, #4
 8001070:	d02a      	beq.n	80010c8 <HCD_HC_IN_IRQHandler+0x6e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001072:	2304      	movs	r3, #4
 8001074:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001076:	68e3      	ldr	r3, [r4, #12]
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	60e3      	str	r3, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800107e:	68a3      	ldr	r3, [r4, #8]
 8001080:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8001084:	d17d      	bne.n	8001182 <HCD_HC_IN_IRQHandler+0x128>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001086:	68a3      	ldr	r3, [r4, #8]
 8001088:	f013 0f01 	tst.w	r3, #1
 800108c:	f000 80d2 	beq.w	8001234 <HCD_HC_IN_IRQHandler+0x1da>
    if (hhcd->Init.dma_enable != 0U)
 8001090:	692b      	ldr	r3, [r5, #16]
 8001092:	b143      	cbz	r3, 80010a6 <HCD_HC_IN_IRQHandler+0x4c>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001094:	232c      	movs	r3, #44	@ 0x2c
 8001096:	fb03 5306 	mla	r3, r3, r6, r5
 800109a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800109c:	6921      	ldr	r1, [r4, #16]
 800109e:	f3c1 0112 	ubfx	r1, r1, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80010a2:	1a52      	subs	r2, r2, r1
 80010a4:	651a      	str	r2, [r3, #80]	@ 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 80010a6:	232c      	movs	r3, #44	@ 0x2c
 80010a8:	fb03 5306 	mla	r3, r3, r6, r5
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 80010b2:	2100      	movs	r1, #0
 80010b4:	65d9      	str	r1, [r3, #92]	@ 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80010b6:	60a2      	str	r2, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80010b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d876      	bhi.n	80011ae <HCD_HC_IN_IRQHandler+0x154>
 80010c0:	e8df f003 	tbb	[pc, r3]
 80010c4:	826b936b 	.word	0x826b936b
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80010c8:	68a3      	ldr	r3, [r4, #8]
 80010ca:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80010ce:	d106      	bne.n	80010de <HCD_HC_IN_IRQHandler+0x84>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80010d0:	68a3      	ldr	r3, [r4, #8]
 80010d2:	f013 0f20 	tst.w	r3, #32
 80010d6:	d013      	beq.n	8001100 <HCD_HC_IN_IRQHandler+0xa6>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80010d8:	2320      	movs	r3, #32
 80010da:	60a3      	str	r3, [r4, #8]
 80010dc:	e7cf      	b.n	800107e <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80010de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e2:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80010e4:	232c      	movs	r3, #44	@ 0x2c
 80010e6:	fb03 0301 	mla	r3, r3, r1, r0
 80010ea:	2207      	movs	r2, #7
 80010ec:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80010f0:	68e3      	ldr	r3, [r4, #12]
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010f8:	6800      	ldr	r0, [r0, #0]
 80010fa:	f001 fbb3 	bl	8002864 <USB_HC_Halt>
 80010fe:	e7be      	b.n	800107e <HCD_HC_IN_IRQHandler+0x24>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001100:	68a3      	ldr	r3, [r4, #8]
 8001102:	f013 0f08 	tst.w	r3, #8
 8001106:	d117      	bne.n	8001138 <HCD_HC_IN_IRQHandler+0xde>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001108:	68a3      	ldr	r3, [r4, #8]
 800110a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800110e:	d125      	bne.n	800115c <HCD_HC_IN_IRQHandler+0x102>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001110:	68a3      	ldr	r3, [r4, #8]
 8001112:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001116:	d0b2      	beq.n	800107e <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001118:	68e3      	ldr	r3, [r4, #12]
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001120:	232c      	movs	r3, #44	@ 0x2c
 8001122:	fb03 0301 	mla	r3, r3, r1, r0
 8001126:	2206      	movs	r2, #6
 8001128:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800112c:	6800      	ldr	r0, [r0, #0]
 800112e:	f001 fb99 	bl	8002864 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001132:	2380      	movs	r3, #128	@ 0x80
 8001134:	60a3      	str	r3, [r4, #8]
 8001136:	e7a2      	b.n	800107e <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001138:	68e3      	ldr	r3, [r4, #12]
 800113a:	f043 0302 	orr.w	r3, r3, #2
 800113e:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001140:	232c      	movs	r3, #44	@ 0x2c
 8001142:	fb03 0301 	mla	r3, r3, r1, r0
 8001146:	2205      	movs	r2, #5
 8001148:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800114c:	2310      	movs	r3, #16
 800114e:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001150:	2308      	movs	r3, #8
 8001152:	60a3      	str	r3, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001154:	6800      	ldr	r0, [r0, #0]
 8001156:	f001 fb85 	bl	8002864 <USB_HC_Halt>
 800115a:	e790      	b.n	800107e <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800115c:	68e3      	ldr	r3, [r4, #12]
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001164:	232c      	movs	r3, #44	@ 0x2c
 8001166:	fb03 0301 	mla	r3, r3, r1, r0
 800116a:	2208      	movs	r2, #8
 800116c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001170:	2310      	movs	r3, #16
 8001172:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001174:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001178:	60a3      	str	r3, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800117a:	6800      	ldr	r0, [r0, #0]
 800117c:	f001 fb72 	bl	8002864 <USB_HC_Halt>
 8001180:	e77d      	b.n	800107e <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001182:	68e3      	ldr	r3, [r4, #12]
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800118a:	4631      	mov	r1, r6
 800118c:	6828      	ldr	r0, [r5, #0]
 800118e:	f001 fb69 	bl	8002864 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001192:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001196:	60a3      	str	r3, [r4, #8]
}
 8001198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800119a:	68e3      	ldr	r3, [r4, #12]
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011a2:	4631      	mov	r1, r6
 80011a4:	6828      	ldr	r0, [r5, #0]
 80011a6:	f001 fb5d 	bl	8002864 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80011aa:	2310      	movs	r3, #16
 80011ac:	60a3      	str	r3, [r4, #8]
    if (hhcd->Init.dma_enable == 1U)
 80011ae:	692b      	ldr	r3, [r5, #16]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d02a      	beq.n	800120a <HCD_HC_IN_IRQHandler+0x1b0>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80011b4:	232c      	movs	r3, #44	@ 0x2c
 80011b6:	fb03 5306 	mla	r3, r3, r6, r5
 80011ba:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 80011be:	f082 0201 	eor.w	r2, r2, #1
 80011c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80011c6:	e7e7      	b.n	8001198 <HCD_HC_IN_IRQHandler+0x13e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80011c8:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 80011cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80011d0:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80011d4:	232c      	movs	r3, #44	@ 0x2c
 80011d6:	fb03 5306 	mla	r3, r3, r6, r5
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80011e0:	4631      	mov	r1, r6
 80011e2:	4628      	mov	r0, r5
 80011e4:	f005 f9e0 	bl	80065a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80011e8:	e7e1      	b.n	80011ae <HCD_HC_IN_IRQHandler+0x154>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80011ea:	232c      	movs	r3, #44	@ 0x2c
 80011ec:	fb03 5306 	mla	r3, r3, r6, r5
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80011f6:	f893 1054 	ldrb.w	r1, [r3, #84]	@ 0x54
 80011fa:	4051      	eors	r1, r2
 80011fc:	f883 1054 	strb.w	r1, [r3, #84]	@ 0x54
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001200:	4631      	mov	r1, r6
 8001202:	4628      	mov	r0, r5
 8001204:	f005 f9d0 	bl	80065a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001208:	e7d1      	b.n	80011ae <HCD_HC_IN_IRQHandler+0x154>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800120a:	232c      	movs	r3, #44	@ 0x2c
 800120c:	fb03 5306 	mla	r3, r3, r6, r5
 8001210:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001212:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	f013 0f01 	tst.w	r3, #1
 800121e:	d0bb      	beq.n	8001198 <HCD_HC_IN_IRQHandler+0x13e>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001220:	232c      	movs	r3, #44	@ 0x2c
 8001222:	fb03 5306 	mla	r3, r3, r6, r5
 8001226:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800122a:	f082 0201 	eor.w	r2, r2, #1
 800122e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001232:	e7b1      	b.n	8001198 <HCD_HC_IN_IRQHandler+0x13e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001234:	68a3      	ldr	r3, [r4, #8]
 8001236:	f013 0f02 	tst.w	r3, #2
 800123a:	d061      	beq.n	8001300 <HCD_HC_IN_IRQHandler+0x2a6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800123c:	68e3      	ldr	r3, [r4, #12]
 800123e:	f023 0302 	bic.w	r3, r3, #2
 8001242:	60e3      	str	r3, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001244:	232c      	movs	r3, #44	@ 0x2c
 8001246:	fb03 5306 	mla	r3, r3, r6, r5
 800124a:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800124e:	3b01      	subs	r3, #1
 8001250:	2b07      	cmp	r3, #7
 8001252:	d80b      	bhi.n	800126c <HCD_HC_IN_IRQHandler+0x212>
 8001254:	e8df f003 	tbb	[pc, r3]
 8001258:	0a3b0a04 	.word	0x0a3b0a04
 800125c:	1d4a1d16 	.word	0x1d4a1d16
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001260:	232c      	movs	r3, #44	@ 0x2c
 8001262:	fb03 5306 	mla	r3, r3, r6, r5
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800126c:	2302      	movs	r3, #2
 800126e:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001270:	232c      	movs	r3, #44	@ 0x2c
 8001272:	fb03 5306 	mla	r3, r3, r6, r5
 8001276:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 800127a:	4631      	mov	r1, r6
 800127c:	4628      	mov	r0, r5
 800127e:	f005 f993 	bl	80065a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001282:	e789      	b.n	8001198 <HCD_HC_IN_IRQHandler+0x13e>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001284:	232c      	movs	r3, #44	@ 0x2c
 8001286:	fb03 5306 	mla	r3, r3, r6, r5
 800128a:	2205      	movs	r2, #5
 800128c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 8001290:	e7ec      	b.n	800126c <HCD_HC_IN_IRQHandler+0x212>
      hhcd->hc[ch_num].ErrCnt++;
 8001292:	222c      	movs	r2, #44	@ 0x2c
 8001294:	fb02 5206 	mla	r2, r2, r6, r5
 8001298:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 800129a:	3301      	adds	r3, #1
 800129c:	65d3      	str	r3, [r2, #92]	@ 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d906      	bls.n	80012b0 <HCD_HC_IN_IRQHandler+0x256>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80012a2:	4613      	mov	r3, r2
 80012a4:	2200      	movs	r2, #0
 80012a6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80012a8:	2204      	movs	r2, #4
 80012aa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 80012ae:	e7dd      	b.n	800126c <HCD_HC_IN_IRQHandler+0x212>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80012b0:	232c      	movs	r3, #44	@ 0x2c
 80012b2:	fb03 5306 	mla	r3, r3, r6, r5
 80012b6:	2202      	movs	r2, #2
 80012b8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80012bc:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80012c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80012c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80012c8:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
 80012cc:	e7ce      	b.n	800126c <HCD_HC_IN_IRQHandler+0x212>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80012ce:	232c      	movs	r3, #44	@ 0x2c
 80012d0:	fb03 5306 	mla	r3, r3, r6, r5
 80012d4:	2202      	movs	r2, #2
 80012d6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80012da:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80012de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80012e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80012e6:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
 80012ea:	e7bf      	b.n	800126c <HCD_HC_IN_IRQHandler+0x212>
      hhcd->hc[ch_num].ErrCnt++;
 80012ec:	232c      	movs	r3, #44	@ 0x2c
 80012ee:	fb03 5306 	mla	r3, r3, r6, r5
 80012f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012f4:	3201      	adds	r2, #1
 80012f6:	65da      	str	r2, [r3, #92]	@ 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80012f8:	2204      	movs	r2, #4
 80012fa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 80012fe:	e7b5      	b.n	800126c <HCD_HC_IN_IRQHandler+0x212>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001300:	68a3      	ldr	r3, [r4, #8]
 8001302:	f013 0f10 	tst.w	r3, #16
 8001306:	f43f af47 	beq.w	8001198 <HCD_HC_IN_IRQHandler+0x13e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800130a:	232c      	movs	r3, #44	@ 0x2c
 800130c:	fb03 5306 	mla	r3, r3, r6, r5
 8001310:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001314:	2b03      	cmp	r3, #3
 8001316:	d00c      	beq.n	8001332 <HCD_HC_IN_IRQHandler+0x2d8>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001318:	b10b      	cbz	r3, 800131e <HCD_HC_IN_IRQHandler+0x2c4>
 800131a:	2b02      	cmp	r3, #2
 800131c:	d106      	bne.n	800132c <HCD_HC_IN_IRQHandler+0x2d2>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800131e:	232c      	movs	r3, #44	@ 0x2c
 8001320:	fb03 5306 	mla	r3, r3, r6, r5
 8001324:	2200      	movs	r2, #0
 8001326:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (hhcd->Init.dma_enable == 0U)
 8001328:	692b      	ldr	r3, [r5, #16]
 800132a:	b183      	cbz	r3, 800134e <HCD_HC_IN_IRQHandler+0x2f4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800132c:	2310      	movs	r3, #16
 800132e:	60a3      	str	r3, [r4, #8]
}
 8001330:	e732      	b.n	8001198 <HCD_HC_IN_IRQHandler+0x13e>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001332:	232c      	movs	r3, #44	@ 0x2c
 8001334:	fb03 5306 	mla	r3, r3, r6, r5
 8001338:	2200      	movs	r2, #0
 800133a:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800133c:	68e3      	ldr	r3, [r4, #12]
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001344:	4631      	mov	r1, r6
 8001346:	6828      	ldr	r0, [r5, #0]
 8001348:	f001 fa8c 	bl	8002864 <USB_HC_Halt>
 800134c:	e7ee      	b.n	800132c <HCD_HC_IN_IRQHandler+0x2d2>
        hhcd->hc[ch_num].state = HC_NAK;
 800134e:	232c      	movs	r3, #44	@ 0x2c
 8001350:	fb03 5306 	mla	r3, r3, r6, r5
 8001354:	2203      	movs	r2, #3
 8001356:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800135a:	68e3      	ldr	r3, [r4, #12]
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001362:	4631      	mov	r1, r6
 8001364:	6828      	ldr	r0, [r5, #0]
 8001366:	f001 fa7d 	bl	8002864 <USB_HC_Halt>
 800136a:	e7df      	b.n	800132c <HCD_HC_IN_IRQHandler+0x2d2>

0800136c <HCD_HC_OUT_IRQHandler>:
{
 800136c:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800136e:	6803      	ldr	r3, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001370:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001374:	f503 64a0 	add.w	r4, r3, #1280	@ 0x500
 8001378:	68a2      	ldr	r2, [r4, #8]
 800137a:	f012 0f04 	tst.w	r2, #4
 800137e:	d006      	beq.n	800138e <HCD_HC_OUT_IRQHandler+0x22>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001380:	2304      	movs	r3, #4
 8001382:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001384:	68e3      	ldr	r3, [r4, #12]
 8001386:	f043 0302 	orr.w	r3, r3, #2
 800138a:	60e3      	str	r3, [r4, #12]
}
 800138c:	bd70      	pop	{r4, r5, r6, pc}
 800138e:	4605      	mov	r5, r0
 8001390:	460e      	mov	r6, r1
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001392:	68a2      	ldr	r2, [r4, #8]
 8001394:	f012 0f20 	tst.w	r2, #32
 8001398:	d018      	beq.n	80013cc <HCD_HC_OUT_IRQHandler+0x60>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800139a:	2320      	movs	r3, #32
 800139c:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800139e:	232c      	movs	r3, #44	@ 0x2c
 80013a0:	fb03 0301 	mla	r3, r3, r1, r0
 80013a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d1ef      	bne.n	800138c <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].do_ping = 0U;
 80013ac:	232c      	movs	r3, #44	@ 0x2c
 80013ae:	fb03 0301 	mla	r3, r3, r1, r0
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80013b8:	2202      	movs	r2, #2
 80013ba:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013be:	68e3      	ldr	r3, [r4, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013c4:	6800      	ldr	r0, [r0, #0]
 80013c6:	f001 fa4d 	bl	8002864 <USB_HC_Halt>
 80013ca:	e7df      	b.n	800138c <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80013cc:	68a2      	ldr	r2, [r4, #8]
 80013ce:	f412 7f00 	tst.w	r2, #512	@ 0x200
 80013d2:	d124      	bne.n	800141e <HCD_HC_OUT_IRQHandler+0xb2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80013d4:	68a2      	ldr	r2, [r4, #8]
 80013d6:	f012 0f01 	tst.w	r2, #1
 80013da:	d02b      	beq.n	8001434 <HCD_HC_OUT_IRQHandler+0xc8>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80013dc:	232c      	movs	r3, #44	@ 0x2c
 80013de:	fb03 0301 	mla	r3, r3, r1, r0
 80013e2:	2200      	movs	r2, #0
 80013e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80013e6:	68a3      	ldr	r3, [r4, #8]
 80013e8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80013ec:	d007      	beq.n	80013fe <HCD_HC_OUT_IRQHandler+0x92>
      hhcd->hc[ch_num].do_ping = 1U;
 80013ee:	232c      	movs	r3, #44	@ 0x2c
 80013f0:	fb03 0301 	mla	r3, r3, r1, r0
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80013fa:	2340      	movs	r3, #64	@ 0x40
 80013fc:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013fe:	68e3      	ldr	r3, [r4, #12]
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001406:	4631      	mov	r1, r6
 8001408:	6828      	ldr	r0, [r5, #0]
 800140a:	f001 fa2b 	bl	8002864 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800140e:	2201      	movs	r2, #1
 8001410:	60a2      	str	r2, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001412:	232c      	movs	r3, #44	@ 0x2c
 8001414:	fb03 5306 	mla	r3, r3, r6, r5
 8001418:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 800141c:	e7b6      	b.n	800138c <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800141e:	68e3      	ldr	r3, [r4, #12]
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001426:	6800      	ldr	r0, [r0, #0]
 8001428:	f001 fa1c 	bl	8002864 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800142c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001430:	60a3      	str	r3, [r4, #8]
 8001432:	e7ab      	b.n	800138c <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001434:	68a2      	ldr	r2, [r4, #8]
 8001436:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800143a:	d129      	bne.n	8001490 <HCD_HC_OUT_IRQHandler+0x124>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800143c:	68a2      	ldr	r2, [r4, #8]
 800143e:	f012 0f08 	tst.w	r2, #8
 8001442:	d13a      	bne.n	80014ba <HCD_HC_OUT_IRQHandler+0x14e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001444:	68a2      	ldr	r2, [r4, #8]
 8001446:	f012 0f10 	tst.w	r2, #16
 800144a:	d046      	beq.n	80014da <HCD_HC_OUT_IRQHandler+0x16e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800144c:	232c      	movs	r3, #44	@ 0x2c
 800144e:	fb03 0301 	mla	r3, r3, r1, r0
 8001452:	2200      	movs	r2, #0
 8001454:	65da      	str	r2, [r3, #92]	@ 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 8001456:	2203      	movs	r2, #3
 8001458:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 800145c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001460:	b95b      	cbnz	r3, 800147a <HCD_HC_OUT_IRQHandler+0x10e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001462:	232c      	movs	r3, #44	@ 0x2c
 8001464:	fb03 0301 	mla	r3, r3, r1, r0
 8001468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800146c:	b92b      	cbnz	r3, 800147a <HCD_HC_OUT_IRQHandler+0x10e>
        hhcd->hc[ch_num].do_ping = 1U;
 800146e:	232c      	movs	r3, #44	@ 0x2c
 8001470:	fb03 0301 	mla	r3, r3, r1, r0
 8001474:	2201      	movs	r2, #1
 8001476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800147a:	68e3      	ldr	r3, [r4, #12]
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001482:	4631      	mov	r1, r6
 8001484:	6828      	ldr	r0, [r5, #0]
 8001486:	f001 f9ed 	bl	8002864 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800148a:	2310      	movs	r3, #16
 800148c:	60a3      	str	r3, [r4, #8]
 800148e:	e77d      	b.n	800138c <HCD_HC_OUT_IRQHandler+0x20>
    hhcd->hc[ch_num].state = HC_NYET;
 8001490:	232c      	movs	r3, #44	@ 0x2c
 8001492:	fb03 0301 	mla	r3, r3, r1, r0
 8001496:	2204      	movs	r2, #4
 8001498:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 800149c:	2201      	movs	r2, #1
 800149e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80014a2:	2200      	movs	r2, #0
 80014a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014a6:	68e3      	ldr	r3, [r4, #12]
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014ae:	6800      	ldr	r0, [r0, #0]
 80014b0:	f001 f9d8 	bl	8002864 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80014b4:	2340      	movs	r3, #64	@ 0x40
 80014b6:	60a3      	str	r3, [r4, #8]
 80014b8:	e768      	b.n	800138c <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80014ba:	2308      	movs	r3, #8
 80014bc:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014be:	68e3      	ldr	r3, [r4, #12]
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014c6:	6800      	ldr	r0, [r0, #0]
 80014c8:	f001 f9cc 	bl	8002864 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80014cc:	232c      	movs	r3, #44	@ 0x2c
 80014ce:	fb03 5306 	mla	r3, r3, r6, r5
 80014d2:	2205      	movs	r2, #5
 80014d4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 80014d8:	e758      	b.n	800138c <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80014da:	68a2      	ldr	r2, [r4, #8]
 80014dc:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80014e0:	d029      	beq.n	8001536 <HCD_HC_OUT_IRQHandler+0x1ca>
    if (hhcd->Init.dma_enable == 0U)
 80014e2:	6903      	ldr	r3, [r0, #16]
 80014e4:	b183      	cbz	r3, 8001508 <HCD_HC_OUT_IRQHandler+0x19c>
      hhcd->hc[ch_num].ErrCnt++;
 80014e6:	222c      	movs	r2, #44	@ 0x2c
 80014e8:	fb02 0201 	mla	r2, r2, r1, r0
 80014ec:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80014ee:	3301      	adds	r3, #1
 80014f0:	65d3      	str	r3, [r2, #92]	@ 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d816      	bhi.n	8001524 <HCD_HC_OUT_IRQHandler+0x1b8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80014f6:	232c      	movs	r3, #44	@ 0x2c
 80014f8:	fb03 0301 	mla	r3, r3, r1, r0
 80014fc:	2202      	movs	r2, #2
 80014fe:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001502:	2380      	movs	r3, #128	@ 0x80
 8001504:	60a3      	str	r3, [r4, #8]
 8001506:	e741      	b.n	800138c <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001508:	232c      	movs	r3, #44	@ 0x2c
 800150a:	fb03 0301 	mla	r3, r3, r1, r0
 800150e:	2206      	movs	r2, #6
 8001510:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001514:	68e3      	ldr	r3, [r4, #12]
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800151c:	6800      	ldr	r0, [r0, #0]
 800151e:	f001 f9a1 	bl	8002864 <USB_HC_Halt>
 8001522:	e7ee      	b.n	8001502 <HCD_HC_OUT_IRQHandler+0x196>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001524:	4613      	mov	r3, r2
 8001526:	2200      	movs	r2, #0
 8001528:	65da      	str	r2, [r3, #92]	@ 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800152a:	2204      	movs	r2, #4
 800152c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8001530:	f005 f83a 	bl	80065a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001534:	e7e5      	b.n	8001502 <HCD_HC_OUT_IRQHandler+0x196>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001536:	68a2      	ldr	r2, [r4, #8]
 8001538:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800153c:	d116      	bne.n	800156c <HCD_HC_OUT_IRQHandler+0x200>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800153e:	68a2      	ldr	r2, [r4, #8]
 8001540:	f012 0f02 	tst.w	r2, #2
 8001544:	f43f af22 	beq.w	800138c <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001548:	68e2      	ldr	r2, [r4, #12]
 800154a:	f022 0202 	bic.w	r2, r2, #2
 800154e:	60e2      	str	r2, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001550:	222c      	movs	r2, #44	@ 0x2c
 8001552:	fb02 0201 	mla	r2, r2, r1, r0
 8001556:	f892 2061 	ldrb.w	r2, [r2, #97]	@ 0x61
 800155a:	3a01      	subs	r2, #1
 800155c:	2a07      	cmp	r2, #7
 800155e:	d852      	bhi.n	8001606 <HCD_HC_OUT_IRQHandler+0x29a>
 8001560:	e8df f002 	tbb	[pc, r2]
 8001564:	5d4b5117 	.word	0x5d4b5117
 8001568:	6b516b64 	.word	0x6b516b64
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800156c:	68e3      	ldr	r3, [r4, #12]
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001574:	6800      	ldr	r0, [r0, #0]
 8001576:	f001 f975 	bl	8002864 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800157a:	2310      	movs	r3, #16
 800157c:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800157e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001582:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001584:	232c      	movs	r3, #44	@ 0x2c
 8001586:	fb03 5306 	mla	r3, r3, r6, r5
 800158a:	2208      	movs	r2, #8
 800158c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8001590:	e6fc      	b.n	800138c <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001592:	232c      	movs	r3, #44	@ 0x2c
 8001594:	fb03 0306 	mla	r3, r3, r6, r0
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800159e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80015a2:	3b02      	subs	r3, #2
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d82d      	bhi.n	8001606 <HCD_HC_OUT_IRQHandler+0x29a>
        if (hhcd->Init.dma_enable == 0U)
 80015aa:	6901      	ldr	r1, [r0, #16]
 80015ac:	b941      	cbnz	r1, 80015c0 <HCD_HC_OUT_IRQHandler+0x254>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80015ae:	232c      	movs	r3, #44	@ 0x2c
 80015b0:	fb03 0306 	mla	r3, r3, r6, r0
 80015b4:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 80015b8:	f082 0201 	eor.w	r2, r2, #1
 80015bc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80015c0:	2901      	cmp	r1, #1
 80015c2:	d120      	bne.n	8001606 <HCD_HC_OUT_IRQHandler+0x29a>
 80015c4:	232c      	movs	r3, #44	@ 0x2c
 80015c6:	fb03 5306 	mla	r3, r3, r6, r5
 80015ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015cc:	b1db      	cbz	r3, 8001606 <HCD_HC_OUT_IRQHandler+0x29a>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80015ce:	222c      	movs	r2, #44	@ 0x2c
 80015d0:	fb02 5206 	mla	r2, r2, r6, r5
 80015d4:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 80015d8:	4413      	add	r3, r2
 80015da:	3b01      	subs	r3, #1
 80015dc:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 80015e0:	f013 0f01 	tst.w	r3, #1
 80015e4:	d00f      	beq.n	8001606 <HCD_HC_OUT_IRQHandler+0x29a>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80015e6:	232c      	movs	r3, #44	@ 0x2c
 80015e8:	fb03 5306 	mla	r3, r3, r6, r5
 80015ec:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 80015f0:	f082 0201 	eor.w	r2, r2, #1
 80015f4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
 80015f8:	e005      	b.n	8001606 <HCD_HC_OUT_IRQHandler+0x29a>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80015fa:	232c      	movs	r3, #44	@ 0x2c
 80015fc:	fb03 0306 	mla	r3, r3, r6, r0
 8001600:	2202      	movs	r2, #2
 8001602:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001606:	2302      	movs	r3, #2
 8001608:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800160a:	232c      	movs	r3, #44	@ 0x2c
 800160c:	fb03 5306 	mla	r3, r3, r6, r5
 8001610:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8001614:	4631      	mov	r1, r6
 8001616:	4628      	mov	r0, r5
 8001618:	f004 ffc6 	bl	80065a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800161c:	e6b6      	b.n	800138c <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800161e:	232c      	movs	r3, #44	@ 0x2c
 8001620:	fb03 0306 	mla	r3, r3, r6, r0
 8001624:	2202      	movs	r2, #2
 8001626:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 800162a:	e7ec      	b.n	8001606 <HCD_HC_OUT_IRQHandler+0x29a>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800162c:	232c      	movs	r3, #44	@ 0x2c
 800162e:	fb03 0306 	mla	r3, r3, r6, r0
 8001632:	2205      	movs	r2, #5
 8001634:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 8001638:	e7e5      	b.n	8001606 <HCD_HC_OUT_IRQHandler+0x29a>
      hhcd->hc[ch_num].ErrCnt++;
 800163a:	212c      	movs	r1, #44	@ 0x2c
 800163c:	fb01 0106 	mla	r1, r1, r6, r0
 8001640:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8001642:	3201      	adds	r2, #1
 8001644:	65ca      	str	r2, [r1, #92]	@ 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001646:	2a02      	cmp	r2, #2
 8001648:	d905      	bls.n	8001656 <HCD_HC_OUT_IRQHandler+0x2ea>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800164a:	2200      	movs	r2, #0
 800164c:	65ca      	str	r2, [r1, #92]	@ 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800164e:	2204      	movs	r2, #4
 8001650:	f881 2060 	strb.w	r2, [r1, #96]	@ 0x60
 8001654:	e7d7      	b.n	8001606 <HCD_HC_OUT_IRQHandler+0x29a>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001656:	222c      	movs	r2, #44	@ 0x2c
 8001658:	fb02 0206 	mla	r2, r2, r6, r0
 800165c:	2102      	movs	r1, #2
 800165e:	f882 1060 	strb.w	r1, [r2, #96]	@ 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001662:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001666:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800166a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800166e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 8001672:	e7c8      	b.n	8001606 <HCD_HC_OUT_IRQHandler+0x29a>

08001674 <HAL_HCD_IRQHandler>:
{
 8001674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001676:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001678:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800167a:	4628      	mov	r0, r5
 800167c:	f000 ff42 	bl	8002504 <USB_GetMode>
 8001680:	2801      	cmp	r0, #1
 8001682:	d000      	beq.n	8001686 <HAL_HCD_IRQHandler+0x12>
}
 8001684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001686:	6820      	ldr	r0, [r4, #0]
 8001688:	f000 ff38 	bl	80024fc <USB_ReadInterrupts>
 800168c:	2800      	cmp	r0, #0
 800168e:	d0f9      	beq.n	8001684 <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001690:	6820      	ldr	r0, [r4, #0]
 8001692:	f000 ff33 	bl	80024fc <USB_ReadInterrupts>
 8001696:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 800169a:	d003      	beq.n	80016a4 <HAL_HCD_IRQHandler+0x30>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80016a2:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80016a4:	6820      	ldr	r0, [r4, #0]
 80016a6:	f000 ff29 	bl	80024fc <USB_ReadInterrupts>
 80016aa:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 80016ae:	d003      	beq.n	80016b8 <HAL_HCD_IRQHandler+0x44>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80016b6:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80016b8:	6820      	ldr	r0, [r4, #0]
 80016ba:	f000 ff1f 	bl	80024fc <USB_ReadInterrupts>
 80016be:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 80016c2:	d003      	beq.n	80016cc <HAL_HCD_IRQHandler+0x58>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016ca:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80016cc:	6820      	ldr	r0, [r4, #0]
 80016ce:	f000 ff15 	bl	80024fc <USB_ReadInterrupts>
 80016d2:	f010 0f02 	tst.w	r0, #2
 80016d6:	d002      	beq.n	80016de <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	2202      	movs	r2, #2
 80016dc:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80016de:	6820      	ldr	r0, [r4, #0]
 80016e0:	f000 ff0c 	bl	80024fc <USB_ReadInterrupts>
 80016e4:	f010 5f00 	tst.w	r0, #536870912	@ 0x20000000
 80016e8:	d008      	beq.n	80016fc <HAL_HCD_IRQHandler+0x88>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80016f0:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80016f2:	f8d5 3440 	ldr.w	r3, [r5, #1088]	@ 0x440
 80016f6:	f013 0f01 	tst.w	r3, #1
 80016fa:	d01d      	beq.n	8001738 <HAL_HCD_IRQHandler+0xc4>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80016fc:	6820      	ldr	r0, [r4, #0]
 80016fe:	f000 fefd 	bl	80024fc <USB_ReadInterrupts>
 8001702:	f010 7f80 	tst.w	r0, #16777216	@ 0x1000000
 8001706:	d126      	bne.n	8001756 <HAL_HCD_IRQHandler+0xe2>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001708:	6820      	ldr	r0, [r4, #0]
 800170a:	f000 fef7 	bl	80024fc <USB_ReadInterrupts>
 800170e:	f010 0f08 	tst.w	r0, #8
 8001712:	d124      	bne.n	800175e <HAL_HCD_IRQHandler+0xea>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001714:	6820      	ldr	r0, [r4, #0]
 8001716:	f000 fef1 	bl	80024fc <USB_ReadInterrupts>
 800171a:	f010 0f10 	tst.w	r0, #16
 800171e:	d125      	bne.n	800176c <HAL_HCD_IRQHandler+0xf8>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001720:	6820      	ldr	r0, [r4, #0]
 8001722:	f000 feeb 	bl	80024fc <USB_ReadInterrupts>
 8001726:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 800172a:	d0ab      	beq.n	8001684 <HAL_HCD_IRQHandler+0x10>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800172c:	6820      	ldr	r0, [r4, #0]
 800172e:	f001 f894 	bl	800285a <USB_HC_ReadInterrupt>
 8001732:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001734:	2600      	movs	r6, #0
 8001736:	e02c      	b.n	8001792 <HAL_HCD_IRQHandler+0x11e>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001738:	2110      	movs	r1, #16
 800173a:	4628      	mov	r0, r5
 800173c:	f000 fe76 	bl	800242c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001740:	4628      	mov	r0, r5
 8001742:	f000 fe8b 	bl	800245c <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001746:	2101      	movs	r1, #1
 8001748:	6820      	ldr	r0, [r4, #0]
 800174a:	f000 ff87 	bl	800265c <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 800174e:	4620      	mov	r0, r4
 8001750:	f004 ff24 	bl	800659c <HAL_HCD_Disconnect_Callback>
 8001754:	e7d2      	b.n	80016fc <HAL_HCD_IRQHandler+0x88>
      HCD_Port_IRQHandler(hhcd);
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff fc27 	bl	8000faa <HCD_Port_IRQHandler>
 800175c:	e7d4      	b.n	8001708 <HAL_HCD_IRQHandler+0x94>
      HAL_HCD_SOF_Callback(hhcd);
 800175e:	4620      	mov	r0, r4
 8001760:	f004 ff10 	bl	8006584 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	2208      	movs	r2, #8
 8001768:	615a      	str	r2, [r3, #20]
 800176a:	e7d3      	b.n	8001714 <HAL_HCD_IRQHandler+0xa0>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800176c:	6822      	ldr	r2, [r4, #0]
 800176e:	6993      	ldr	r3, [r2, #24]
 8001770:	f023 0310 	bic.w	r3, r3, #16
 8001774:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 8001776:	4620      	mov	r0, r4
 8001778:	f7ff fa68 	bl	8000c4c <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800177c:	6822      	ldr	r2, [r4, #0]
 800177e:	6993      	ldr	r3, [r2, #24]
 8001780:	f043 0310 	orr.w	r3, r3, #16
 8001784:	6193      	str	r3, [r2, #24]
 8001786:	e7cb      	b.n	8001720 <HAL_HCD_IRQHandler+0xac>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001788:	b2f1      	uxtb	r1, r6
 800178a:	4620      	mov	r0, r4
 800178c:	f7ff fdee 	bl	800136c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001790:	3601      	adds	r6, #1
 8001792:	68a3      	ldr	r3, [r4, #8]
 8001794:	42b3      	cmp	r3, r6
 8001796:	d912      	bls.n	80017be <HAL_HCD_IRQHandler+0x14a>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001798:	f006 030f 	and.w	r3, r6, #15
 800179c:	fa27 f303 	lsr.w	r3, r7, r3
 80017a0:	f013 0f01 	tst.w	r3, #1
 80017a4:	d0f4      	beq.n	8001790 <HAL_HCD_IRQHandler+0x11c>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80017a6:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 80017aa:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 80017ae:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80017b2:	d0e9      	beq.n	8001788 <HAL_HCD_IRQHandler+0x114>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80017b4:	b2f1      	uxtb	r1, r6
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7ff fc4f 	bl	800105a <HCD_HC_IN_IRQHandler>
 80017bc:	e7e8      	b.n	8001790 <HAL_HCD_IRQHandler+0x11c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80017be:	6823      	ldr	r3, [r4, #0]
 80017c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017c4:	615a      	str	r2, [r3, #20]
 80017c6:	e75d      	b.n	8001684 <HAL_HCD_IRQHandler+0x10>

080017c8 <HAL_HCD_Start>:
  __HAL_LOCK(hhcd);
 80017c8:	f890 32f8 	ldrb.w	r3, [r0, #760]	@ 0x2f8
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d00e      	beq.n	80017ee <HAL_HCD_Start+0x26>
{
 80017d0:	b510      	push	{r4, lr}
 80017d2:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80017d4:	2101      	movs	r1, #1
 80017d6:	f880 12f8 	strb.w	r1, [r0, #760]	@ 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80017da:	6800      	ldr	r0, [r0, #0]
 80017dc:	f000 ff7c 	bl	80026d8 <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 80017e0:	6820      	ldr	r0, [r4, #0]
 80017e2:	f000 fe16 	bl	8002412 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f884 02f8 	strb.w	r0, [r4, #760]	@ 0x2f8
}
 80017ec:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80017ee:	2002      	movs	r0, #2
}
 80017f0:	4770      	bx	lr

080017f2 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 80017f2:	f890 32f8 	ldrb.w	r3, [r0, #760]	@ 0x2f8
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d00b      	beq.n	8001812 <HAL_HCD_Stop+0x20>
{
 80017fa:	b510      	push	{r4, lr}
 80017fc:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80017fe:	2301      	movs	r3, #1
 8001800:	f880 32f8 	strb.w	r3, [r0, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001804:	6800      	ldr	r0, [r0, #0]
 8001806:	f001 f965 	bl	8002ad4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800180a:	2000      	movs	r0, #0
 800180c:	f884 02f8 	strb.w	r0, [r4, #760]	@ 0x2f8
}
 8001810:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001812:	2002      	movs	r0, #2
}
 8001814:	4770      	bx	lr

08001816 <HAL_HCD_ResetPort>:
{
 8001816:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 8001818:	6800      	ldr	r0, [r0, #0]
 800181a:	f000 ff3e 	bl	800269a <USB_ResetPort>
}
 800181e:	bd08      	pop	{r3, pc}

08001820 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8001820:	232c      	movs	r3, #44	@ 0x2c
 8001822:	fb03 0001 	mla	r0, r3, r1, r0
}
 8001826:	f890 0060 	ldrb.w	r0, [r0, #96]	@ 0x60
 800182a:	4770      	bx	lr

0800182c <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 800182c:	232c      	movs	r3, #44	@ 0x2c
 800182e:	fb03 0001 	mla	r0, r3, r1, r0
}
 8001832:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 8001834:	4770      	bx	lr

08001836 <HAL_HCD_GetCurrentFrame>:
{
 8001836:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001838:	6800      	ldr	r0, [r0, #0]
 800183a:	f000 ff7b 	bl	8002734 <USB_GetCurrentFrame>
}
 800183e:	bd08      	pop	{r3, pc}

08001840 <HAL_HCD_GetCurrentSpeed>:
{
 8001840:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 8001842:	6800      	ldr	r0, [r0, #0]
 8001844:	f000 ff6b 	bl	800271e <USB_GetHostSpeed>
}
 8001848:	bd08      	pop	{r3, pc}
	...

0800184c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800184c:	2800      	cmp	r0, #0
 800184e:	f000 81e0 	beq.w	8001c12 <HAL_RCC_OscConfig+0x3c6>
{
 8001852:	b570      	push	{r4, r5, r6, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001858:	6803      	ldr	r3, [r0, #0]
 800185a:	f013 0f01 	tst.w	r3, #1
 800185e:	d03b      	beq.n	80018d8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001860:	4b9f      	ldr	r3, [pc, #636]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b04      	cmp	r3, #4
 800186a:	d02c      	beq.n	80018c6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186c:	4b9c      	ldr	r3, [pc, #624]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001874:	2b08      	cmp	r3, #8
 8001876:	d021      	beq.n	80018bc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001878:	6863      	ldr	r3, [r4, #4]
 800187a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800187e:	d04f      	beq.n	8001920 <HAL_RCC_OscConfig+0xd4>
 8001880:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001884:	d052      	beq.n	800192c <HAL_RCC_OscConfig+0xe0>
 8001886:	4b96      	ldr	r3, [pc, #600]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001896:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001898:	6863      	ldr	r3, [r4, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d050      	beq.n	8001940 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff f86d 	bl	800097c <HAL_GetTick>
 80018a2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a4:	4b8e      	ldr	r3, [pc, #568]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80018ac:	d114      	bne.n	80018d8 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ae:	f7ff f865 	bl	800097c <HAL_GetTick>
 80018b2:	1b40      	subs	r0, r0, r5
 80018b4:	2864      	cmp	r0, #100	@ 0x64
 80018b6:	d9f5      	bls.n	80018a4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80018b8:	2003      	movs	r0, #3
 80018ba:	e1b1      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018bc:	4b88      	ldr	r3, [pc, #544]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80018c4:	d0d8      	beq.n	8001878 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c6:	4b86      	ldr	r3, [pc, #536]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80018ce:	d003      	beq.n	80018d8 <HAL_RCC_OscConfig+0x8c>
 80018d0:	6863      	ldr	r3, [r4, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 819f 	beq.w	8001c16 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	f013 0f02 	tst.w	r3, #2
 80018de:	d054      	beq.n	800198a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018e0:	4b7f      	ldr	r3, [pc, #508]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f013 0f0c 	tst.w	r3, #12
 80018e8:	d03e      	beq.n	8001968 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ea:	4b7d      	ldr	r3, [pc, #500]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d033      	beq.n	800195e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018f6:	68e3      	ldr	r3, [r4, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d068      	beq.n	80019ce <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fc:	4b79      	ldr	r3, [pc, #484]	@ (8001ae4 <HAL_RCC_OscConfig+0x298>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	f7ff f83b 	bl	800097c <HAL_GetTick>
 8001906:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	4b75      	ldr	r3, [pc, #468]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f013 0f02 	tst.w	r3, #2
 8001910:	d154      	bne.n	80019bc <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff f833 	bl	800097c <HAL_GetTick>
 8001916:	1b40      	subs	r0, r0, r5
 8001918:	2802      	cmp	r0, #2
 800191a:	d9f5      	bls.n	8001908 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800191c:	2003      	movs	r0, #3
 800191e:	e17f      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001920:	4a6f      	ldr	r2, [pc, #444]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 8001922:	6813      	ldr	r3, [r2, #0]
 8001924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e7b5      	b.n	8001898 <HAL_RCC_OscConfig+0x4c>
 800192c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e7ab      	b.n	8001898 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001940:	f7ff f81c 	bl	800097c <HAL_GetTick>
 8001944:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	4b66      	ldr	r3, [pc, #408]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800194e:	d0c3      	beq.n	80018d8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff f814 	bl	800097c <HAL_GetTick>
 8001954:	1b40      	subs	r0, r0, r5
 8001956:	2864      	cmp	r0, #100	@ 0x64
 8001958:	d9f5      	bls.n	8001946 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800195a:	2003      	movs	r0, #3
 800195c:	e160      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195e:	4b60      	ldr	r3, [pc, #384]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001966:	d1c6      	bne.n	80018f6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001968:	4b5d      	ldr	r3, [pc, #372]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f013 0f02 	tst.w	r3, #2
 8001970:	d003      	beq.n	800197a <HAL_RCC_OscConfig+0x12e>
 8001972:	68e3      	ldr	r3, [r4, #12]
 8001974:	2b01      	cmp	r3, #1
 8001976:	f040 8150 	bne.w	8001c1a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	4a59      	ldr	r2, [pc, #356]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 800197c:	6813      	ldr	r3, [r2, #0]
 800197e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001982:	6921      	ldr	r1, [r4, #16]
 8001984:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001988:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198a:	6823      	ldr	r3, [r4, #0]
 800198c:	f013 0f08 	tst.w	r3, #8
 8001990:	d042      	beq.n	8001a18 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001992:	6963      	ldr	r3, [r4, #20]
 8001994:	b36b      	cbz	r3, 80019f2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001996:	4b53      	ldr	r3, [pc, #332]	@ (8001ae4 <HAL_RCC_OscConfig+0x298>)
 8001998:	2201      	movs	r2, #1
 800199a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199e:	f7fe ffed 	bl	800097c <HAL_GetTick>
 80019a2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a4:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 80019a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019a8:	f013 0f02 	tst.w	r3, #2
 80019ac:	d134      	bne.n	8001a18 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ae:	f7fe ffe5 	bl	800097c <HAL_GetTick>
 80019b2:	1b40      	subs	r0, r0, r5
 80019b4:	2802      	cmp	r0, #2
 80019b6:	d9f5      	bls.n	80019a4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80019b8:	2003      	movs	r0, #3
 80019ba:	e131      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	4a48      	ldr	r2, [pc, #288]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 80019be:	6813      	ldr	r3, [r2, #0]
 80019c0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80019c4:	6921      	ldr	r1, [r4, #16]
 80019c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	e7dd      	b.n	800198a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80019ce:	4b45      	ldr	r3, [pc, #276]	@ (8001ae4 <HAL_RCC_OscConfig+0x298>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019d4:	f7fe ffd2 	bl	800097c <HAL_GetTick>
 80019d8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019da:	4b41      	ldr	r3, [pc, #260]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f013 0f02 	tst.w	r3, #2
 80019e2:	d0d2      	beq.n	800198a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e4:	f7fe ffca 	bl	800097c <HAL_GetTick>
 80019e8:	1b40      	subs	r0, r0, r5
 80019ea:	2802      	cmp	r0, #2
 80019ec:	d9f5      	bls.n	80019da <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80019ee:	2003      	movs	r0, #3
 80019f0:	e116      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ae4 <HAL_RCC_OscConfig+0x298>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fa:	f7fe ffbf 	bl	800097c <HAL_GetTick>
 80019fe:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a00:	4b37      	ldr	r3, [pc, #220]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 8001a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a04:	f013 0f02 	tst.w	r3, #2
 8001a08:	d006      	beq.n	8001a18 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0a:	f7fe ffb7 	bl	800097c <HAL_GetTick>
 8001a0e:	1b40      	subs	r0, r0, r5
 8001a10:	2802      	cmp	r0, #2
 8001a12:	d9f5      	bls.n	8001a00 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001a14:	2003      	movs	r0, #3
 8001a16:	e103      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	f013 0f04 	tst.w	r3, #4
 8001a1e:	d077      	beq.n	8001b10 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a20:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001a28:	d133      	bne.n	8001a92 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 8001a30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a32:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001a36:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a42:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a44:	4b28      	ldr	r3, [pc, #160]	@ (8001ae8 <HAL_RCC_OscConfig+0x29c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001a4c:	d023      	beq.n	8001a96 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a4e:	68a3      	ldr	r3, [r4, #8]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d034      	beq.n	8001abe <HAL_RCC_OscConfig+0x272>
 8001a54:	2b05      	cmp	r3, #5
 8001a56:	d038      	beq.n	8001aca <HAL_RCC_OscConfig+0x27e>
 8001a58:	4b21      	ldr	r3, [pc, #132]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 8001a5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a64:	f022 0204 	bic.w	r2, r2, #4
 8001a68:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a6a:	68a3      	ldr	r3, [r4, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d03d      	beq.n	8001aec <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7fe ff84 	bl	800097c <HAL_GetTick>
 8001a74:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7a:	f013 0f02 	tst.w	r3, #2
 8001a7e:	d146      	bne.n	8001b0e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7fe ff7c 	bl	800097c <HAL_GetTick>
 8001a84:	1b80      	subs	r0, r0, r6
 8001a86:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a8a:	4298      	cmp	r0, r3
 8001a8c:	d9f3      	bls.n	8001a76 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001a8e:	2003      	movs	r0, #3
 8001a90:	e0c6      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001a92:	2500      	movs	r5, #0
 8001a94:	e7d6      	b.n	8001a44 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a96:	4a14      	ldr	r2, [pc, #80]	@ (8001ae8 <HAL_RCC_OscConfig+0x29c>)
 8001a98:	6813      	ldr	r3, [r2, #0]
 8001a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a9e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001aa0:	f7fe ff6c 	bl	800097c <HAL_GetTick>
 8001aa4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <HAL_RCC_OscConfig+0x29c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001aae:	d1ce      	bne.n	8001a4e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab0:	f7fe ff64 	bl	800097c <HAL_GetTick>
 8001ab4:	1b80      	subs	r0, r0, r6
 8001ab6:	2802      	cmp	r0, #2
 8001ab8:	d9f5      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001aba:	2003      	movs	r0, #3
 8001abc:	e0b0      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001abe:	4a08      	ldr	r2, [pc, #32]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 8001ac0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac8:	e7cf      	b.n	8001a6a <HAL_RCC_OscConfig+0x21e>
 8001aca:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <HAL_RCC_OscConfig+0x294>)
 8001acc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ace:	f042 0204 	orr.w	r2, r2, #4
 8001ad2:	671a      	str	r2, [r3, #112]	@ 0x70
 8001ad4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	671a      	str	r2, [r3, #112]	@ 0x70
 8001adc:	e7c5      	b.n	8001a6a <HAL_RCC_OscConfig+0x21e>
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	42470000 	.word	0x42470000
 8001ae8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aec:	f7fe ff46 	bl	800097c <HAL_GetTick>
 8001af0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af2:	4b52      	ldr	r3, [pc, #328]	@ (8001c3c <HAL_RCC_OscConfig+0x3f0>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af6:	f013 0f02 	tst.w	r3, #2
 8001afa:	d008      	beq.n	8001b0e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afc:	f7fe ff3e 	bl	800097c <HAL_GetTick>
 8001b00:	1b80      	subs	r0, r0, r6
 8001b02:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001b06:	4298      	cmp	r0, r3
 8001b08:	d9f3      	bls.n	8001af2 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001b0a:	2003      	movs	r0, #3
 8001b0c:	e088      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b0e:	b9ed      	cbnz	r5, 8001b4c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b10:	69a3      	ldr	r3, [r4, #24]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8083 	beq.w	8001c1e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b18:	4a48      	ldr	r2, [pc, #288]	@ (8001c3c <HAL_RCC_OscConfig+0x3f0>)
 8001b1a:	6892      	ldr	r2, [r2, #8]
 8001b1c:	f002 020c 	and.w	r2, r2, #12
 8001b20:	2a08      	cmp	r2, #8
 8001b22:	d051      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d017      	beq.n	8001b58 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b28:	4b45      	ldr	r3, [pc, #276]	@ (8001c40 <HAL_RCC_OscConfig+0x3f4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2e:	f7fe ff25 	bl	800097c <HAL_GetTick>
 8001b32:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b34:	4b41      	ldr	r3, [pc, #260]	@ (8001c3c <HAL_RCC_OscConfig+0x3f0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001b3c:	d042      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7fe ff1d 	bl	800097c <HAL_GetTick>
 8001b42:	1b00      	subs	r0, r0, r4
 8001b44:	2802      	cmp	r0, #2
 8001b46:	d9f5      	bls.n	8001b34 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001b48:	2003      	movs	r0, #3
 8001b4a:	e069      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c3c <HAL_RCC_OscConfig+0x3f0>)
 8001b4e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001b50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b56:	e7db      	b.n	8001b10 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001b58:	4b39      	ldr	r3, [pc, #228]	@ (8001c40 <HAL_RCC_OscConfig+0x3f4>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001b5e:	f7fe ff0d 	bl	800097c <HAL_GetTick>
 8001b62:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b64:	4b35      	ldr	r3, [pc, #212]	@ (8001c3c <HAL_RCC_OscConfig+0x3f0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001b6c:	d006      	beq.n	8001b7c <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7fe ff05 	bl	800097c <HAL_GetTick>
 8001b72:	1b40      	subs	r0, r0, r5
 8001b74:	2802      	cmp	r0, #2
 8001b76:	d9f5      	bls.n	8001b64 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001b78:	2003      	movs	r0, #3
 8001b7a:	e051      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b7c:	69e3      	ldr	r3, [r4, #28]
 8001b7e:	6a22      	ldr	r2, [r4, #32]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001b84:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b88:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001b8a:	0852      	lsrs	r2, r2, #1
 8001b8c:	3a01      	subs	r2, #1
 8001b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b92:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001b94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b98:	4a28      	ldr	r2, [pc, #160]	@ (8001c3c <HAL_RCC_OscConfig+0x3f0>)
 8001b9a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b9c:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <HAL_RCC_OscConfig+0x3f4>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001ba2:	f7fe feeb 	bl	800097c <HAL_GetTick>
 8001ba6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba8:	4b24      	ldr	r3, [pc, #144]	@ (8001c3c <HAL_RCC_OscConfig+0x3f0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001bb0:	d106      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7fe fee3 	bl	800097c <HAL_GetTick>
 8001bb6:	1b00      	subs	r0, r0, r4
 8001bb8:	2802      	cmp	r0, #2
 8001bba:	d9f5      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	e02f      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	e02d      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	e02b      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d02b      	beq.n	8001c24 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <HAL_RCC_OscConfig+0x3f0>)
 8001bce:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001bd4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd6:	4291      	cmp	r1, r2
 8001bd8:	d126      	bne.n	8001c28 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bde:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be0:	428a      	cmp	r2, r1
 8001be2:	d123      	bne.n	8001c2c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be6:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001bea:	401a      	ands	r2, r3
 8001bec:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001bf0:	d11e      	bne.n	8001c30 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001bf6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001bf8:	0852      	lsrs	r2, r2, #1
 8001bfa:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bfc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001c00:	d118      	bne.n	8001c34 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c02:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001c06:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c08:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001c0c:	d114      	bne.n	8001c38 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001c0e:	2000      	movs	r0, #0
 8001c10:	e006      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001c12:	2001      	movs	r0, #1
}
 8001c14:	4770      	bx	lr
        return HAL_ERROR;
 8001c16:	2001      	movs	r0, #1
 8001c18:	e002      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001c1e:	2000      	movs	r0, #0
}
 8001c20:	b002      	add	sp, #8
 8001c22:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001c24:	2001      	movs	r0, #1
 8001c26:	e7fb      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001c28:	2001      	movs	r0, #1
 8001c2a:	e7f9      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	e7f7      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
 8001c30:	2001      	movs	r0, #1
 8001c32:	e7f5      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
 8001c34:	2001      	movs	r0, #1
 8001c36:	e7f3      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
 8001c38:	2001      	movs	r0, #1
 8001c3a:	e7f1      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	42470000 	.word	0x42470000

08001c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c44:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c46:	4b26      	ldr	r3, [pc, #152]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d041      	beq.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x92>
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d141      	bne.n	8001cda <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c56:	4b22      	ldr	r3, [pc, #136]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001c64:	d012      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c68:	6859      	ldr	r1, [r3, #4]
 8001c6a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c6e:	481d      	ldr	r0, [pc, #116]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c70:	2300      	movs	r3, #0
 8001c72:	fba1 0100 	umull	r0, r1, r1, r0
 8001c76:	f7fe fab3 	bl	80001e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c82:	3301      	adds	r3, #1
 8001c84:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001c86:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c8a:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c8e:	6858      	ldr	r0, [r3, #4]
 8001c90:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001c94:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001c98:	ebbc 0c00 	subs.w	ip, ip, r0
 8001c9c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001ca0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001ca4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001ca8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001cac:	ebb1 010c 	subs.w	r1, r1, ip
 8001cb0:	eb63 030e 	sbc.w	r3, r3, lr
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001cba:	00c9      	lsls	r1, r1, #3
 8001cbc:	eb11 0c00 	adds.w	ip, r1, r0
 8001cc0:	f143 0300 	adc.w	r3, r3, #0
 8001cc4:	0299      	lsls	r1, r3, #10
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001ccc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001cd0:	f7fe fa86 	bl	80001e0 <__aeabi_uldivmod>
 8001cd4:	e7d1      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001cd6:	4803      	ldr	r0, [pc, #12]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cd8:	e7d7      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cda:	4803      	ldr	r0, [pc, #12]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8001cdc:	e7d5      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x46>
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	017d7840 	.word	0x017d7840
 8001ce8:	00f42400 	.word	0x00f42400

08001cec <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001cec:	2800      	cmp	r0, #0
 8001cee:	f000 809b 	beq.w	8001e28 <HAL_RCC_ClockConfig+0x13c>
{
 8001cf2:	b570      	push	{r4, r5, r6, lr}
 8001cf4:	460d      	mov	r5, r1
 8001cf6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b4f      	ldr	r3, [pc, #316]	@ (8001e38 <HAL_RCC_ClockConfig+0x14c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	428b      	cmp	r3, r1
 8001d02:	d208      	bcs.n	8001d16 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d04:	b2cb      	uxtb	r3, r1
 8001d06:	4a4c      	ldr	r2, [pc, #304]	@ (8001e38 <HAL_RCC_ClockConfig+0x14c>)
 8001d08:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	6813      	ldr	r3, [r2, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	428b      	cmp	r3, r1
 8001d12:	f040 808b 	bne.w	8001e2c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	f013 0f02 	tst.w	r3, #2
 8001d1c:	d017      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1e:	f013 0f04 	tst.w	r3, #4
 8001d22:	d004      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d24:	4a45      	ldr	r2, [pc, #276]	@ (8001e3c <HAL_RCC_ClockConfig+0x150>)
 8001d26:	6893      	ldr	r3, [r2, #8]
 8001d28:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d2c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	f013 0f08 	tst.w	r3, #8
 8001d34:	d004      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d36:	4a41      	ldr	r2, [pc, #260]	@ (8001e3c <HAL_RCC_ClockConfig+0x150>)
 8001d38:	6893      	ldr	r3, [r2, #8]
 8001d3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d3e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d40:	4a3e      	ldr	r2, [pc, #248]	@ (8001e3c <HAL_RCC_ClockConfig+0x150>)
 8001d42:	6893      	ldr	r3, [r2, #8]
 8001d44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d48:	68a1      	ldr	r1, [r4, #8]
 8001d4a:	430b      	orrs	r3, r1
 8001d4c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	f013 0f01 	tst.w	r3, #1
 8001d54:	d032      	beq.n	8001dbc <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d56:	6863      	ldr	r3, [r4, #4]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d021      	beq.n	8001da0 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d5c:	1e9a      	subs	r2, r3, #2
 8001d5e:	2a01      	cmp	r2, #1
 8001d60:	d925      	bls.n	8001dae <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d62:	4a36      	ldr	r2, [pc, #216]	@ (8001e3c <HAL_RCC_ClockConfig+0x150>)
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	f012 0f02 	tst.w	r2, #2
 8001d6a:	d061      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d6c:	4933      	ldr	r1, [pc, #204]	@ (8001e3c <HAL_RCC_ClockConfig+0x150>)
 8001d6e:	688a      	ldr	r2, [r1, #8]
 8001d70:	f022 0203 	bic.w	r2, r2, #3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001d78:	f7fe fe00 	bl	800097c <HAL_GetTick>
 8001d7c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e3c <HAL_RCC_ClockConfig+0x150>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	6862      	ldr	r2, [r4, #4]
 8001d88:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d8c:	d016      	beq.n	8001dbc <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8e:	f7fe fdf5 	bl	800097c <HAL_GetTick>
 8001d92:	1b80      	subs	r0, r0, r6
 8001d94:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001d98:	4298      	cmp	r0, r3
 8001d9a:	d9f0      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	e042      	b.n	8001e26 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da0:	4a26      	ldr	r2, [pc, #152]	@ (8001e3c <HAL_RCC_ClockConfig+0x150>)
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001da8:	d1e0      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001daa:	2001      	movs	r0, #1
 8001dac:	e03b      	b.n	8001e26 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dae:	4a23      	ldr	r2, [pc, #140]	@ (8001e3c <HAL_RCC_ClockConfig+0x150>)
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001db6:	d1d9      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001db8:	2001      	movs	r0, #1
 8001dba:	e034      	b.n	8001e26 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e38 <HAL_RCC_ClockConfig+0x14c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	42ab      	cmp	r3, r5
 8001dc6:	d907      	bls.n	8001dd8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc8:	b2ea      	uxtb	r2, r5
 8001dca:	4b1b      	ldr	r3, [pc, #108]	@ (8001e38 <HAL_RCC_ClockConfig+0x14c>)
 8001dcc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	42ab      	cmp	r3, r5
 8001dd6:	d12d      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	f013 0f04 	tst.w	r3, #4
 8001dde:	d006      	beq.n	8001dee <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de0:	4a16      	ldr	r2, [pc, #88]	@ (8001e3c <HAL_RCC_ClockConfig+0x150>)
 8001de2:	6893      	ldr	r3, [r2, #8]
 8001de4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001de8:	68e1      	ldr	r1, [r4, #12]
 8001dea:	430b      	orrs	r3, r1
 8001dec:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	f013 0f08 	tst.w	r3, #8
 8001df4:	d007      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001df6:	4a11      	ldr	r2, [pc, #68]	@ (8001e3c <HAL_RCC_ClockConfig+0x150>)
 8001df8:	6893      	ldr	r3, [r2, #8]
 8001dfa:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001dfe:	6921      	ldr	r1, [r4, #16]
 8001e00:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e04:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e06:	f7ff ff1d 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <HAL_RCC_ClockConfig+0x150>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e12:	4a0b      	ldr	r2, [pc, #44]	@ (8001e40 <HAL_RCC_ClockConfig+0x154>)
 8001e14:	5cd3      	ldrb	r3, [r2, r3]
 8001e16:	40d8      	lsrs	r0, r3
 8001e18:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <HAL_RCC_ClockConfig+0x158>)
 8001e1a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <HAL_RCC_ClockConfig+0x15c>)
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	f7fe fcdc 	bl	80007dc <HAL_InitTick>
  return HAL_OK;
 8001e24:	2000      	movs	r0, #0
}
 8001e26:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001e28:	2001      	movs	r0, #1
}
 8001e2a:	4770      	bx	lr
      return HAL_ERROR;
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	e7fa      	b.n	8001e26 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001e30:	2001      	movs	r0, #1
 8001e32:	e7f8      	b.n	8001e26 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001e34:	2001      	movs	r0, #1
 8001e36:	e7f6      	b.n	8001e26 <HAL_RCC_ClockConfig+0x13a>
 8001e38:	40023c00 	.word	0x40023c00
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	08006b64 	.word	0x08006b64
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000008 	.word	0x20000008

08001e4c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001e4c:	4b01      	ldr	r3, [pc, #4]	@ (8001e54 <HAL_RCC_GetHCLKFreq+0x8>)
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000000 	.word	0x20000000

08001e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e58:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e5a:	f7ff fff7 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e5e:	4b04      	ldr	r3, [pc, #16]	@ (8001e70 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001e66:	4a03      	ldr	r2, [pc, #12]	@ (8001e74 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001e68:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e6a:	40d8      	lsrs	r0, r3
 8001e6c:	bd08      	pop	{r3, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	08006b5c 	.word	0x08006b5c

08001e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e78:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e7a:	f7ff ffe7 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e7e:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001e86:	4a03      	ldr	r2, [pc, #12]	@ (8001e94 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e88:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e8a:	40d8      	lsrs	r0, r3
 8001e8c:	bd08      	pop	{r3, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800
 8001e94:	08006b5c 	.word	0x08006b5c

08001e98 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e98:	230f      	movs	r3, #15
 8001e9a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <HAL_RCC_GetClockConfig+0x34>)
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	f002 0203 	and.w	r2, r2, #3
 8001ea4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8001eac:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8001eb4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001ebe:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <HAL_RCC_GetClockConfig+0x38>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	600b      	str	r3, [r1, #0]
}
 8001eca:	4770      	bx	lr
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40023c00 	.word	0x40023c00

08001ed4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ed8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d12f      	bne.n	8001f42 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ee8:	6802      	ldr	r2, [r0, #0]
 8001eea:	68d3      	ldr	r3, [r2, #12]
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef2:	6803      	ldr	r3, [r0, #0]
 8001ef4:	4a15      	ldr	r2, [pc, #84]	@ (8001f4c <HAL_TIM_Base_Start_IT+0x74>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d018      	beq.n	8001f2c <HAL_TIM_Base_Start_IT+0x54>
 8001efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001efe:	d015      	beq.n	8001f2c <HAL_TIM_Base_Start_IT+0x54>
 8001f00:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d011      	beq.n	8001f2c <HAL_TIM_Base_Start_IT+0x54>
 8001f08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00d      	beq.n	8001f2c <HAL_TIM_Base_Start_IT+0x54>
 8001f10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d009      	beq.n	8001f2c <HAL_TIM_Base_Start_IT+0x54>
 8001f18:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d005      	beq.n	8001f2c <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f28:	2000      	movs	r0, #0
 8001f2a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f32:	2a06      	cmp	r2, #6
 8001f34:	d007      	beq.n	8001f46 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001f3e:	2000      	movs	r0, #0
 8001f40:	4770      	bx	lr
    return HAL_ERROR;
 8001f42:	2001      	movs	r0, #1
 8001f44:	4770      	bx	lr
  return HAL_OK;
 8001f46:	2000      	movs	r0, #0
}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40010000 	.word	0x40010000

08001f50 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f50:	4770      	bx	lr

08001f52 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f52:	4770      	bx	lr

08001f54 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f54:	4770      	bx	lr

08001f56 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f56:	4770      	bx	lr

08001f58 <HAL_TIM_IRQHandler>:
{
 8001f58:	b510      	push	{r4, lr}
 8001f5a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f5c:	6803      	ldr	r3, [r0, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	f012 0f02 	tst.w	r2, #2
 8001f64:	d011      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	f012 0f02 	tst.w	r2, #2
 8001f6c:	d00d      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f6e:	f06f 0202 	mvn.w	r2, #2
 8001f72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f78:	6803      	ldr	r3, [r0, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f013 0f03 	tst.w	r3, #3
 8001f80:	d070      	beq.n	8002064 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	f7ff ffe6 	bl	8001f52 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f86:	2300      	movs	r3, #0
 8001f88:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	f012 0f04 	tst.w	r2, #4
 8001f92:	d012      	beq.n	8001fba <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	f012 0f04 	tst.w	r2, #4
 8001f9a:	d00e      	beq.n	8001fba <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f9c:	f06f 0204 	mvn.w	r2, #4
 8001fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa6:	6823      	ldr	r3, [r4, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001fae:	d05f      	beq.n	8002070 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f7ff ffce 	bl	8001f52 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	f012 0f08 	tst.w	r2, #8
 8001fc2:	d012      	beq.n	8001fea <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	f012 0f08 	tst.w	r2, #8
 8001fca:	d00e      	beq.n	8001fea <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fcc:	f06f 0208 	mvn.w	r2, #8
 8001fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f013 0f03 	tst.w	r3, #3
 8001fde:	d04e      	beq.n	800207e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f7ff ffb6 	bl	8001f52 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fea:	6823      	ldr	r3, [r4, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	f012 0f10 	tst.w	r2, #16
 8001ff2:	d012      	beq.n	800201a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	f012 0f10 	tst.w	r2, #16
 8001ffa:	d00e      	beq.n	800201a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ffc:	f06f 0210 	mvn.w	r2, #16
 8002000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002002:	2308      	movs	r3, #8
 8002004:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800200e:	d03d      	beq.n	800208c <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002010:	4620      	mov	r0, r4
 8002012:	f7ff ff9e 	bl	8001f52 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	2300      	movs	r3, #0
 8002018:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	f012 0f01 	tst.w	r2, #1
 8002022:	d003      	beq.n	800202c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	f012 0f01 	tst.w	r2, #1
 800202a:	d136      	bne.n	800209a <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002034:	d003      	beq.n	800203e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800203c:	d134      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002046:	d003      	beq.n	8002050 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800204e:	d132      	bne.n	80020b6 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	f012 0f20 	tst.w	r2, #32
 8002058:	d003      	beq.n	8002062 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	f012 0f20 	tst.w	r2, #32
 8002060:	d130      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x16c>
}
 8002062:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002064:	f7ff ff74 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002068:	4620      	mov	r0, r4
 800206a:	f7ff ff73 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
 800206e:	e78a      	b.n	8001f86 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002070:	4620      	mov	r0, r4
 8002072:	f7ff ff6d 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002076:	4620      	mov	r0, r4
 8002078:	f7ff ff6c 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
 800207c:	e79b      	b.n	8001fb6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	4620      	mov	r0, r4
 8002080:	f7ff ff66 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002084:	4620      	mov	r0, r4
 8002086:	f7ff ff65 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
 800208a:	e7ac      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208c:	4620      	mov	r0, r4
 800208e:	f7ff ff5f 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002092:	4620      	mov	r0, r4
 8002094:	f7ff ff5e 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
 8002098:	e7bd      	b.n	8002016 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800209a:	f06f 0201 	mvn.w	r2, #1
 800209e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80020a0:	4620      	mov	r0, r4
 80020a2:	f7fe faa3 	bl	80005ec <HAL_TIM_PeriodElapsedCallback>
 80020a6:	e7c1      	b.n	800202c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80020ae:	4620      	mov	r0, r4
 80020b0:	f000 f88b 	bl	80021ca <HAL_TIMEx_BreakCallback>
 80020b4:	e7c3      	b.n	800203e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80020bc:	4620      	mov	r0, r4
 80020be:	f7ff ff4a 	bl	8001f56 <HAL_TIM_TriggerCallback>
 80020c2:	e7c5      	b.n	8002050 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020c4:	f06f 0220 	mvn.w	r2, #32
 80020c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80020ca:	4620      	mov	r0, r4
 80020cc:	f000 f87c 	bl	80021c8 <HAL_TIMEx_CommutCallback>
}
 80020d0:	e7c7      	b.n	8002062 <HAL_TIM_IRQHandler+0x10a>
	...

080020d4 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020d4:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d6:	4a25      	ldr	r2, [pc, #148]	@ (800216c <TIM_Base_SetConfig+0x98>)
 80020d8:	4290      	cmp	r0, r2
 80020da:	d00e      	beq.n	80020fa <TIM_Base_SetConfig+0x26>
 80020dc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80020e0:	d00b      	beq.n	80020fa <TIM_Base_SetConfig+0x26>
 80020e2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80020e6:	4290      	cmp	r0, r2
 80020e8:	d007      	beq.n	80020fa <TIM_Base_SetConfig+0x26>
 80020ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020ee:	4290      	cmp	r0, r2
 80020f0:	d003      	beq.n	80020fa <TIM_Base_SetConfig+0x26>
 80020f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020f6:	4290      	cmp	r0, r2
 80020f8:	d103      	bne.n	8002102 <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80020fe:	684a      	ldr	r2, [r1, #4]
 8002100:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002102:	4a1a      	ldr	r2, [pc, #104]	@ (800216c <TIM_Base_SetConfig+0x98>)
 8002104:	4290      	cmp	r0, r2
 8002106:	d01a      	beq.n	800213e <TIM_Base_SetConfig+0x6a>
 8002108:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800210c:	d017      	beq.n	800213e <TIM_Base_SetConfig+0x6a>
 800210e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002112:	4290      	cmp	r0, r2
 8002114:	d013      	beq.n	800213e <TIM_Base_SetConfig+0x6a>
 8002116:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800211a:	4290      	cmp	r0, r2
 800211c:	d00f      	beq.n	800213e <TIM_Base_SetConfig+0x6a>
 800211e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002122:	4290      	cmp	r0, r2
 8002124:	d00b      	beq.n	800213e <TIM_Base_SetConfig+0x6a>
 8002126:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800212a:	4290      	cmp	r0, r2
 800212c:	d007      	beq.n	800213e <TIM_Base_SetConfig+0x6a>
 800212e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002132:	4290      	cmp	r0, r2
 8002134:	d003      	beq.n	800213e <TIM_Base_SetConfig+0x6a>
 8002136:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800213a:	4290      	cmp	r0, r2
 800213c:	d103      	bne.n	8002146 <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800213e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002142:	68ca      	ldr	r2, [r1, #12]
 8002144:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002146:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800214a:	694a      	ldr	r2, [r1, #20]
 800214c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800214e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002150:	688b      	ldr	r3, [r1, #8]
 8002152:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002154:	680b      	ldr	r3, [r1, #0]
 8002156:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002158:	4b04      	ldr	r3, [pc, #16]	@ (800216c <TIM_Base_SetConfig+0x98>)
 800215a:	4298      	cmp	r0, r3
 800215c:	d002      	beq.n	8002164 <TIM_Base_SetConfig+0x90>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800215e:	2301      	movs	r3, #1
 8002160:	6143      	str	r3, [r0, #20]
}
 8002162:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002164:	690b      	ldr	r3, [r1, #16]
 8002166:	6303      	str	r3, [r0, #48]	@ 0x30
 8002168:	e7f9      	b.n	800215e <TIM_Base_SetConfig+0x8a>
 800216a:	bf00      	nop
 800216c:	40010000 	.word	0x40010000

08002170 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002170:	b340      	cbz	r0, 80021c4 <HAL_TIM_Base_Init+0x54>
{
 8002172:	b510      	push	{r4, lr}
 8002174:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002176:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800217a:	b1f3      	cbz	r3, 80021ba <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800217c:	2302      	movs	r3, #2
 800217e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002182:	4621      	mov	r1, r4
 8002184:	f851 0b04 	ldr.w	r0, [r1], #4
 8002188:	f7ff ffa4 	bl	80020d4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800218c:	2301      	movs	r3, #1
 800218e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002192:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002196:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800219a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800219e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80021a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021aa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80021ae:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80021b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80021b6:	2000      	movs	r0, #0
}
 80021b8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80021ba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80021be:	f7ff fe89 	bl	8001ed4 <HAL_TIM_Base_MspInit>
 80021c2:	e7db      	b.n	800217c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80021c4:	2001      	movs	r0, #1
}
 80021c6:	4770      	bx	lr

080021c8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021c8:	4770      	bx	lr

080021ca <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021ca:	4770      	bx	lr

080021cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021cc:	b510      	push	{r4, lr}
 80021ce:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021d0:	6802      	ldr	r2, [r0, #0]
 80021d2:	6913      	ldr	r3, [r2, #16]
 80021d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021d8:	68c1      	ldr	r1, [r0, #12]
 80021da:	430b      	orrs	r3, r1
 80021dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021de:	6883      	ldr	r3, [r0, #8]
 80021e0:	6902      	ldr	r2, [r0, #16]
 80021e2:	431a      	orrs	r2, r3
 80021e4:	6943      	ldr	r3, [r0, #20]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	69c3      	ldr	r3, [r0, #28]
 80021ea:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80021ec:	6801      	ldr	r1, [r0, #0]
 80021ee:	68cb      	ldr	r3, [r1, #12]
 80021f0:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80021f4:	f023 030c 	bic.w	r3, r3, #12
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021fc:	6802      	ldr	r2, [r0, #0]
 80021fe:	6953      	ldr	r3, [r2, #20]
 8002200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002204:	6981      	ldr	r1, [r0, #24]
 8002206:	430b      	orrs	r3, r1
 8002208:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800220a:	6803      	ldr	r3, [r0, #0]
 800220c:	4a31      	ldr	r2, [pc, #196]	@ (80022d4 <UART_SetConfig+0x108>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d006      	beq.n	8002220 <UART_SetConfig+0x54>
 8002212:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002216:	4293      	cmp	r3, r2
 8002218:	d002      	beq.n	8002220 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800221a:	f7ff fe1d 	bl	8001e58 <HAL_RCC_GetPCLK1Freq>
 800221e:	e001      	b.n	8002224 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002220:	f7ff fe2a 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002224:	69e3      	ldr	r3, [r4, #28]
 8002226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800222a:	d029      	beq.n	8002280 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800222c:	2100      	movs	r1, #0
 800222e:	1803      	adds	r3, r0, r0
 8002230:	4149      	adcs	r1, r1
 8002232:	181b      	adds	r3, r3, r0
 8002234:	f141 0100 	adc.w	r1, r1, #0
 8002238:	00c9      	lsls	r1, r1, #3
 800223a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	1818      	adds	r0, r3, r0
 8002242:	6863      	ldr	r3, [r4, #4]
 8002244:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002248:	ea4f 7393 	mov.w	r3, r3, lsr #30
 800224c:	f141 0100 	adc.w	r1, r1, #0
 8002250:	f7fd ffc6 	bl	80001e0 <__aeabi_uldivmod>
 8002254:	4a20      	ldr	r2, [pc, #128]	@ (80022d8 <UART_SetConfig+0x10c>)
 8002256:	fba2 3100 	umull	r3, r1, r2, r0
 800225a:	0949      	lsrs	r1, r1, #5
 800225c:	2364      	movs	r3, #100	@ 0x64
 800225e:	fb03 0311 	mls	r3, r3, r1, r0
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	3332      	adds	r3, #50	@ 0x32
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002270:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	6821      	ldr	r1, [r4, #0]
 800227a:	4413      	add	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }
}
 800227e:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002280:	2300      	movs	r3, #0
 8002282:	1802      	adds	r2, r0, r0
 8002284:	eb43 0103 	adc.w	r1, r3, r3
 8002288:	1812      	adds	r2, r2, r0
 800228a:	f141 0100 	adc.w	r1, r1, #0
 800228e:	00c9      	lsls	r1, r1, #3
 8002290:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002294:	00d2      	lsls	r2, r2, #3
 8002296:	1810      	adds	r0, r2, r0
 8002298:	f141 0100 	adc.w	r1, r1, #0
 800229c:	6862      	ldr	r2, [r4, #4]
 800229e:	1892      	adds	r2, r2, r2
 80022a0:	415b      	adcs	r3, r3
 80022a2:	f7fd ff9d 	bl	80001e0 <__aeabi_uldivmod>
 80022a6:	4a0c      	ldr	r2, [pc, #48]	@ (80022d8 <UART_SetConfig+0x10c>)
 80022a8:	fba2 3100 	umull	r3, r1, r2, r0
 80022ac:	0949      	lsrs	r1, r1, #5
 80022ae:	2364      	movs	r3, #100	@ 0x64
 80022b0:	fb03 0311 	mls	r3, r3, r1, r0
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	3332      	adds	r3, #50	@ 0x32
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	095b      	lsrs	r3, r3, #5
 80022be:	005a      	lsls	r2, r3, #1
 80022c0:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80022c4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	6821      	ldr	r1, [r4, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
 80022d2:	e7d4      	b.n	800227e <UART_SetConfig+0xb2>
 80022d4:	40011000 	.word	0x40011000
 80022d8:	51eb851f 	.word	0x51eb851f

080022dc <HAL_UART_Init>:
  if (huart == NULL)
 80022dc:	b358      	cbz	r0, 8002336 <HAL_UART_Init+0x5a>
{
 80022de:	b510      	push	{r4, lr}
 80022e0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80022e2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80022e6:	b30b      	cbz	r3, 800232c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80022e8:	2324      	movs	r3, #36	@ 0x24
 80022ea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 80022ee:	6822      	ldr	r2, [r4, #0]
 80022f0:	68d3      	ldr	r3, [r2, #12]
 80022f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80022f6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80022f8:	4620      	mov	r0, r4
 80022fa:	f7ff ff67 	bl	80021cc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022fe:	6822      	ldr	r2, [r4, #0]
 8002300:	6913      	ldr	r3, [r2, #16]
 8002302:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002306:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002308:	6822      	ldr	r2, [r4, #0]
 800230a:	6953      	ldr	r3, [r2, #20]
 800230c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002310:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002312:	6822      	ldr	r2, [r4, #0]
 8002314:	68d3      	ldr	r3, [r2, #12]
 8002316:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800231a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800231c:	2000      	movs	r0, #0
 800231e:	6420      	str	r0, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002320:	2320      	movs	r3, #32
 8002322:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002326:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 800232a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800232c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_UART_MspInit(huart);
 8002330:	f7fe fa1a 	bl	8000768 <HAL_UART_MspInit>
 8002334:	e7d8      	b.n	80022e8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002336:	2001      	movs	r0, #1
}
 8002338:	4770      	bx	lr
	...

0800233c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800233c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002342:	9b01      	ldr	r3, [sp, #4]
 8002344:	3301      	adds	r3, #1
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	4a0e      	ldr	r2, [pc, #56]	@ (8002384 <USB_CoreReset+0x48>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d814      	bhi.n	8002378 <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800234e:	6903      	ldr	r3, [r0, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	daf6      	bge.n	8002342 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002358:	6903      	ldr	r3, [r0, #16]
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002360:	9b01      	ldr	r3, [sp, #4]
 8002362:	3301      	adds	r3, #1
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	4a07      	ldr	r2, [pc, #28]	@ (8002384 <USB_CoreReset+0x48>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d808      	bhi.n	800237e <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800236c:	6903      	ldr	r3, [r0, #16]
 800236e:	f013 0f01 	tst.w	r3, #1
 8002372:	d1f5      	bne.n	8002360 <USB_CoreReset+0x24>

  return HAL_OK;
 8002374:	2000      	movs	r0, #0
 8002376:	e000      	b.n	800237a <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 8002378:	2003      	movs	r0, #3
}
 800237a:	b002      	add	sp, #8
 800237c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800237e:	2003      	movs	r0, #3
 8002380:	e7fb      	b.n	800237a <USB_CoreReset+0x3e>
 8002382:	bf00      	nop
 8002384:	00030d40 	.word	0x00030d40

08002388 <USB_CoreInit>:
{
 8002388:	b084      	sub	sp, #16
 800238a:	b510      	push	{r4, lr}
 800238c:	4604      	mov	r4, r0
 800238e:	a803      	add	r0, sp, #12
 8002390:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002394:	9b08      	ldr	r3, [sp, #32]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d11f      	bne.n	80023da <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800239a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800239c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023a0:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80023a2:	68e3      	ldr	r3, [r4, #12]
 80023a4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80023a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023ac:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80023ae:	68e3      	ldr	r3, [r4, #12]
 80023b0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80023b4:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80023b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d009      	beq.n	80023d0 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 80023bc:	4620      	mov	r0, r4
 80023be:	f7ff ffbd 	bl	800233c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80023c2:	9b06      	ldr	r3, [sp, #24]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d01b      	beq.n	8002400 <USB_CoreInit+0x78>
}
 80023c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023cc:	b004      	add	sp, #16
 80023ce:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80023d0:	68e3      	ldr	r3, [r4, #12]
 80023d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023d6:	60e3      	str	r3, [r4, #12]
 80023d8:	e7f0      	b.n	80023bc <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80023da:	68e3      	ldr	r3, [r4, #12]
 80023dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023e0:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80023e2:	4620      	mov	r0, r4
 80023e4:	f7ff ffaa 	bl	800233c <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80023e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80023ea:	b923      	cbnz	r3, 80023f6 <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80023ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f2:	63a3      	str	r3, [r4, #56]	@ 0x38
 80023f4:	e7e5      	b.n	80023c2 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80023f6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80023f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80023fe:	e7e0      	b.n	80023c2 <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002400:	68a3      	ldr	r3, [r4, #8]
 8002402:	f043 0306 	orr.w	r3, r3, #6
 8002406:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002408:	68a3      	ldr	r3, [r4, #8]
 800240a:	f043 0320 	orr.w	r3, r3, #32
 800240e:	60a3      	str	r3, [r4, #8]
 8002410:	e7da      	b.n	80023c8 <USB_CoreInit+0x40>

08002412 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002412:	6883      	ldr	r3, [r0, #8]
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6083      	str	r3, [r0, #8]
}
 800241a:	2000      	movs	r0, #0
 800241c:	4770      	bx	lr

0800241e <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800241e:	6883      	ldr	r3, [r0, #8]
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	6083      	str	r3, [r0, #8]
}
 8002426:	2000      	movs	r0, #0
 8002428:	4770      	bx	lr
	...

0800242c <USB_FlushTxFifo>:
{
 800242c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002432:	0189      	lsls	r1, r1, #6
 8002434:	f041 0120 	orr.w	r1, r1, #32
 8002438:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800243a:	9b01      	ldr	r3, [sp, #4]
 800243c:	3301      	adds	r3, #1
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	4a05      	ldr	r2, [pc, #20]	@ (8002458 <USB_FlushTxFifo+0x2c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d805      	bhi.n	8002452 <USB_FlushTxFifo+0x26>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002446:	6903      	ldr	r3, [r0, #16]
 8002448:	f013 0f20 	tst.w	r3, #32
 800244c:	d1f5      	bne.n	800243a <USB_FlushTxFifo+0xe>
  return HAL_OK;
 800244e:	2000      	movs	r0, #0
 8002450:	e000      	b.n	8002454 <USB_FlushTxFifo+0x28>
      return HAL_TIMEOUT;
 8002452:	2003      	movs	r0, #3
}
 8002454:	b002      	add	sp, #8
 8002456:	4770      	bx	lr
 8002458:	00030d40 	.word	0x00030d40

0800245c <USB_FlushRxFifo>:
{
 800245c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002462:	2310      	movs	r3, #16
 8002464:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002466:	9b01      	ldr	r3, [sp, #4]
 8002468:	3301      	adds	r3, #1
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	4a05      	ldr	r2, [pc, #20]	@ (8002484 <USB_FlushRxFifo+0x28>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d805      	bhi.n	800247e <USB_FlushRxFifo+0x22>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002472:	6903      	ldr	r3, [r0, #16]
 8002474:	f013 0f10 	tst.w	r3, #16
 8002478:	d1f5      	bne.n	8002466 <USB_FlushRxFifo+0xa>
  return HAL_OK;
 800247a:	2000      	movs	r0, #0
 800247c:	e000      	b.n	8002480 <USB_FlushRxFifo+0x24>
      return HAL_TIMEOUT;
 800247e:	2003      	movs	r0, #3
}
 8002480:	b002      	add	sp, #8
 8002482:	4770      	bx	lr
 8002484:	00030d40 	.word	0x00030d40

08002488 <USB_WritePacket>:
{
 8002488:	b510      	push	{r4, lr}
 800248a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800248e:	b984      	cbnz	r4, 80024b2 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002490:	3303      	adds	r3, #3
 8002492:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8002496:	f04f 0c00 	mov.w	ip, #0
 800249a:	e008      	b.n	80024ae <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800249c:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 80024a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024a4:	f851 4b04 	ldr.w	r4, [r1], #4
 80024a8:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 80024aa:	f10c 0c01 	add.w	ip, ip, #1
 80024ae:	45f4      	cmp	ip, lr
 80024b0:	d3f4      	bcc.n	800249c <USB_WritePacket+0x14>
}
 80024b2:	2000      	movs	r0, #0
 80024b4:	bd10      	pop	{r4, pc}

080024b6 <USB_ReadPacket>:
{
 80024b6:	b510      	push	{r4, lr}
 80024b8:	4684      	mov	ip, r0
 80024ba:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 80024bc:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 80024c0:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 80024c4:	2300      	movs	r3, #0
 80024c6:	e005      	b.n	80024d4 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80024c8:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 80024cc:	6809      	ldr	r1, [r1, #0]
 80024ce:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 80024d2:	3301      	adds	r3, #1
 80024d4:	4573      	cmp	r3, lr
 80024d6:	d3f7      	bcc.n	80024c8 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 80024d8:	b17a      	cbz	r2, 80024fa <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80024da:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 80024de:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 80024e2:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80024e4:	b2cb      	uxtb	r3, r1
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	fa24 f303 	lsr.w	r3, r4, r3
 80024ec:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 80024f0:	3101      	adds	r1, #1
      remaining_bytes--;
 80024f2:	3a01      	subs	r2, #1
 80024f4:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 80024f6:	2a00      	cmp	r2, #0
 80024f8:	d1f4      	bne.n	80024e4 <USB_ReadPacket+0x2e>
}
 80024fa:	bd10      	pop	{r4, pc}

080024fc <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80024fc:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80024fe:	6980      	ldr	r0, [r0, #24]
}
 8002500:	4010      	ands	r0, r2
 8002502:	4770      	bx	lr

08002504 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002504:	6940      	ldr	r0, [r0, #20]
}
 8002506:	f000 0001 	and.w	r0, r0, #1
 800250a:	4770      	bx	lr

0800250c <USB_SetCurrentMode>:
{
 800250c:	b538      	push	{r3, r4, r5, lr}
 800250e:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002510:	68c3      	ldr	r3, [r0, #12]
 8002512:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8002516:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002518:	2901      	cmp	r1, #1
 800251a:	d013      	beq.n	8002544 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 800251c:	bb19      	cbnz	r1, 8002566 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800251e:	68c3      	ldr	r3, [r0, #12]
 8002520:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002524:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002526:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8002528:	2001      	movs	r0, #1
 800252a:	f7fe fa2d 	bl	8000988 <HAL_Delay>
      ms++;
 800252e:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002530:	4628      	mov	r0, r5
 8002532:	f7ff ffe7 	bl	8002504 <USB_GetMode>
 8002536:	b108      	cbz	r0, 800253c <USB_SetCurrentMode+0x30>
 8002538:	2c31      	cmp	r4, #49	@ 0x31
 800253a:	d9f5      	bls.n	8002528 <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 800253c:	2c32      	cmp	r4, #50	@ 0x32
 800253e:	d014      	beq.n	800256a <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8002540:	2000      	movs	r0, #0
}
 8002542:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002544:	68c3      	ldr	r3, [r0, #12]
 8002546:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800254a:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800254c:	2400      	movs	r4, #0
      HAL_Delay(1U);
 800254e:	2001      	movs	r0, #1
 8002550:	f7fe fa1a 	bl	8000988 <HAL_Delay>
      ms++;
 8002554:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002556:	4628      	mov	r0, r5
 8002558:	f7ff ffd4 	bl	8002504 <USB_GetMode>
 800255c:	2801      	cmp	r0, #1
 800255e:	d0ed      	beq.n	800253c <USB_SetCurrentMode+0x30>
 8002560:	2c31      	cmp	r4, #49	@ 0x31
 8002562:	d9f4      	bls.n	800254e <USB_SetCurrentMode+0x42>
 8002564:	e7ea      	b.n	800253c <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8002566:	2001      	movs	r0, #1
 8002568:	e7eb      	b.n	8002542 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 800256a:	2001      	movs	r0, #1
 800256c:	e7e9      	b.n	8002542 <USB_SetCurrentMode+0x36>
	...

08002570 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002570:	b084      	sub	sp, #16
 8002572:	b510      	push	{r4, lr}
 8002574:	4604      	mov	r4, r0
 8002576:	a803      	add	r0, sp, #12
 8002578:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002582:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002584:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002588:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800258a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800258c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002590:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002592:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002594:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002598:	63a3      	str	r3, [r4, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800259a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800259c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80025a0:	d010      	beq.n	80025c4 <USB_HostInit+0x54>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80025a2:	9b05      	ldr	r3, [sp, #20]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d006      	beq.n	80025b6 <USB_HostInit+0x46>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80025a8:	f8d4 3400 	ldr.w	r3, [r4, #1024]	@ 0x400
 80025ac:	f023 0304 	bic.w	r3, r3, #4
 80025b0:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
 80025b4:	e00c      	b.n	80025d0 <USB_HostInit+0x60>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80025b6:	f8d4 3400 	ldr.w	r3, [r4, #1024]	@ 0x400
 80025ba:	f043 0304 	orr.w	r3, r3, #4
 80025be:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
 80025c2:	e005      	b.n	80025d0 <USB_HostInit+0x60>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80025c4:	f8d4 3400 	ldr.w	r3, [r4, #1024]	@ 0x400
 80025c8:	f023 0304 	bic.w	r3, r3, #4
 80025cc:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80025d0:	2110      	movs	r1, #16
 80025d2:	4620      	mov	r0, r4
 80025d4:	f7ff ff2a 	bl	800242c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80025d8:	4620      	mov	r0, r4
 80025da:	f7ff ff3f 	bl	800245c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80025de:	2200      	movs	r2, #0
 80025e0:	e009      	b.n	80025f6 <USB_HostInit+0x86>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80025e2:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 80025e6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025ea:	f8c3 1508 	str.w	r1, [r3, #1288]	@ 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 80025ee:	2100      	movs	r1, #0
 80025f0:	f8c3 150c 	str.w	r1, [r3, #1292]	@ 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 80025f4:	3201      	adds	r2, #1
 80025f6:	9b04      	ldr	r3, [sp, #16]
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d8f2      	bhi.n	80025e2 <USB_HostInit+0x72>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002604:	6163      	str	r3, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8002606:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002608:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800260c:	d017      	beq.n	800263e <USB_HostInit+0xce>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800260e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002612:	6263      	str	r3, [r4, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8002614:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 8002618:	62a3      	str	r3, [r4, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800261a:	4b0d      	ldr	r3, [pc, #52]	@ (8002650 <USB_HostInit+0xe0>)
 800261c:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002620:	9b06      	ldr	r3, [sp, #24]
 8002622:	b91b      	cbnz	r3, 800262c <USB_HostInit+0xbc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002624:	69a3      	ldr	r3, [r4, #24]
 8002626:	f043 0310 	orr.w	r3, r3, #16
 800262a:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800262c:	69a2      	ldr	r2, [r4, #24]
 800262e:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <USB_HostInit+0xe4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 8002634:	2000      	movs	r0, #0
 8002636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800263a:	b004      	add	sp, #16
 800263c:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 800263e:	2380      	movs	r3, #128	@ 0x80
 8002640:	6263      	str	r3, [r4, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8002642:	f503 03c0 	add.w	r3, r3, #6291456	@ 0x600000
 8002646:	62a3      	str	r3, [r4, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002648:	4b03      	ldr	r3, [pc, #12]	@ (8002658 <USB_HostInit+0xe8>)
 800264a:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 800264e:	e7e7      	b.n	8002620 <USB_HostInit+0xb0>
 8002650:	00e00300 	.word	0x00e00300
 8002654:	a3200008 	.word	0xa3200008
 8002658:	004000e0 	.word	0x004000e0

0800265c <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800265c:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
 8002660:	f8d0 3400 	ldr.w	r3, [r0, #1024]	@ 0x400
 8002664:	f023 0303 	bic.w	r3, r3, #3
 8002668:	f8c0 3400 	str.w	r3, [r0, #1024]	@ 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800266c:	f8d0 3400 	ldr.w	r3, [r0, #1024]	@ 0x400
 8002670:	f001 0203 	and.w	r2, r1, #3
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c0 3400 	str.w	r3, [r0, #1024]	@ 0x400

  if (freq == HCFG_48_MHZ)
 800267a:	2901      	cmp	r1, #1
 800267c:	d003      	beq.n	8002686 <USB_InitFSLSPClkSel+0x2a>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 800267e:	2902      	cmp	r1, #2
 8002680:	d006      	beq.n	8002690 <USB_InitFSLSPClkSel+0x34>
  {
    /* ... */
  }

  return HAL_OK;
}
 8002682:	2000      	movs	r0, #0
 8002684:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8002686:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800268a:	f8cc 3004 	str.w	r3, [ip, #4]
 800268e:	e7f8      	b.n	8002682 <USB_InitFSLSPClkSel+0x26>
    USBx_HOST->HFIR = 6000U;
 8002690:	f241 7370 	movw	r3, #6000	@ 0x1770
 8002694:	f8cc 3004 	str.w	r3, [ip, #4]
 8002698:	e7f3      	b.n	8002682 <USB_InitFSLSPClkSel+0x26>

0800269a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800269a:	b530      	push	{r4, r5, lr}
 800269c:	b083      	sub	sp, #12
 800269e:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 80026a0:	2500      	movs	r5, #0
 80026a2:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 80026a4:	f8d0 3440 	ldr.w	r3, [r0, #1088]	@ 0x440
 80026a8:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80026aa:	9b01      	ldr	r3, [sp, #4]
 80026ac:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80026b0:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80026b2:	9b01      	ldr	r3, [sp, #4]
 80026b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b8:	f8c0 3440 	str.w	r3, [r0, #1088]	@ 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 80026bc:	2064      	movs	r0, #100	@ 0x64
 80026be:	f7fe f963 	bl	8000988 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80026c2:	9b01      	ldr	r3, [sp, #4]
 80026c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026c8:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  HAL_Delay(10U);
 80026cc:	200a      	movs	r0, #10
 80026ce:	f7fe f95b 	bl	8000988 <HAL_Delay>

  return HAL_OK;
}
 80026d2:	4628      	mov	r0, r5
 80026d4:	b003      	add	sp, #12
 80026d6:	bd30      	pop	{r4, r5, pc}

080026d8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80026d8:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80026de:	f8d0 3440 	ldr.w	r3, [r0, #1088]	@ 0x440
 80026e2:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80026e4:	9b01      	ldr	r3, [sp, #4]
 80026e6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80026ea:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80026ec:	9b01      	ldr	r3, [sp, #4]
 80026ee:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80026f2:	d101      	bne.n	80026f8 <USB_DriveVbus+0x20>
 80026f4:	2901      	cmp	r1, #1
 80026f6:	d00c      	beq.n	8002712 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80026f8:	9b01      	ldr	r3, [sp, #4]
 80026fa:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80026fe:	d005      	beq.n	800270c <USB_DriveVbus+0x34>
 8002700:	b921      	cbnz	r1, 800270c <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8002702:	9b01      	ldr	r3, [sp, #4]
 8002704:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002708:	f8c0 3440 	str.w	r3, [r0, #1088]	@ 0x440
  }
  return HAL_OK;
}
 800270c:	2000      	movs	r0, #0
 800270e:	b002      	add	sp, #8
 8002710:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8002712:	9b01      	ldr	r3, [sp, #4]
 8002714:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002718:	f8c0 3440 	str.w	r3, [r0, #1088]	@ 0x440
 800271c:	e7ec      	b.n	80026f8 <USB_DriveVbus+0x20>

0800271e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800271e:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002724:	f8d0 3440 	ldr.w	r3, [r0, #1088]	@ 0x440
 8002728:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800272a:	9801      	ldr	r0, [sp, #4]
}
 800272c:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8002730:	b002      	add	sp, #8
 8002732:	4770      	bx	lr

08002734 <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8002734:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002738:	6880      	ldr	r0, [r0, #8]
}
 800273a:	b280      	uxth	r0, r0
 800273c:	4770      	bx	lr

0800273e <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800273e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002742:	4691      	mov	r9, r2
 8002744:	461c      	mov	r4, r3
 8002746:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800274a:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 800274e:	f506 63a0 	add.w	r3, r6, #1280	@ 0x500
 8002752:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002756:	609a      	str	r2, [r3, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8002758:	2d03      	cmp	r5, #3
 800275a:	d869      	bhi.n	8002830 <USB_HC_Init+0xf2>
 800275c:	e8df f005 	tbb	[pc, r5]
 8002760:	18025a02 	.word	0x18025a02
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002764:	f240 429d 	movw	r2, #1181	@ 0x49d
 8002768:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800276a:	f019 0f80 	tst.w	r9, #128	@ 0x80
 800276e:	d109      	bne.n	8002784 <USB_HC_Init+0x46>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8002770:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002772:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8002776:	d05d      	beq.n	8002834 <USB_HC_Init+0xf6>
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800277e:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8002780:	2700      	movs	r7, #0
 8002782:	e00c      	b.n	800279e <USB_HC_Init+0x60>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800278a:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800278c:	2700      	movs	r7, #0
 800278e:	e006      	b.n	800279e <USB_HC_Init+0x60>
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002790:	f240 629d 	movw	r2, #1693	@ 0x69d
 8002794:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8002796:	f019 0f80 	tst.w	r9, #128	@ 0x80
 800279a:	d135      	bne.n	8002808 <USB_HC_Init+0xca>
  HAL_StatusTypeDef ret = HAL_OK;
 800279c:	2700      	movs	r7, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800279e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	@ 0x418
 80027a2:	f001 010f 	and.w	r1, r1, #15
 80027a6:	2201      	movs	r2, #1
 80027a8:	408a      	lsls	r2, r1
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c0 3418 	str.w	r3, [r0, #1048]	@ 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80027b0:	6983      	ldr	r3, [r0, #24]
 80027b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027b6:	6183      	str	r3, [r0, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80027b8:	f019 0f80 	tst.w	r9, #128	@ 0x80
 80027bc:	d13c      	bne.n	8002838 <USB_HC_Init+0xfa>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 80027be:	f04f 0800 	mov.w	r8, #0
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80027c2:	f7ff ffac 	bl	800271e <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80027c6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d037      	beq.n	800283e <USB_HC_Init+0x100>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 80027ce:	2200      	movs	r2, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80027d0:	05a3      	lsls	r3, r4, #22
 80027d2:	f003 53fe 	and.w	r3, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80027d6:	ea4f 29c9 	mov.w	r9, r9, lsl #11
 80027da:	f409 49f0 	and.w	r9, r9, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80027de:	ea43 0309 	orr.w	r3, r3, r9
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80027e2:	04a9      	lsls	r1, r5, #18
 80027e4:	f401 2140 	and.w	r1, r1, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80027e8:	430b      	orrs	r3, r1
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80027ea:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 80027ee:	f3c1 010a 	ubfx	r1, r1, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80027f2:	430b      	orrs	r3, r1
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80027f4:	ea43 0308 	orr.w	r3, r3, r8
 80027f8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80027fa:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500

  if (ep_type == EP_TYPE_INTR)
 80027fe:	2d03      	cmp	r5, #3
 8002800:	d024      	beq.n	800284c <USB_HC_Init+0x10e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
  }

  return ret;
}
 8002802:	4638      	mov	r0, r7
 8002804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800280e:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8002810:	2700      	movs	r7, #0
 8002812:	e7c4      	b.n	800279e <USB_HC_Init+0x60>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002814:	f240 2225 	movw	r2, #549	@ 0x225
 8002818:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 800281a:	f019 0f80 	tst.w	r9, #128	@ 0x80
 800281e:	d101      	bne.n	8002824 <USB_HC_Init+0xe6>
  HAL_StatusTypeDef ret = HAL_OK;
 8002820:	2700      	movs	r7, #0
 8002822:	e7bc      	b.n	800279e <USB_HC_Init+0x60>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800282a:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800282c:	2700      	movs	r7, #0
 800282e:	e7b6      	b.n	800279e <USB_HC_Init+0x60>
  switch (ep_type)
 8002830:	2701      	movs	r7, #1
 8002832:	e7b4      	b.n	800279e <USB_HC_Init+0x60>
  HAL_StatusTypeDef ret = HAL_OK;
 8002834:	2700      	movs	r7, #0
 8002836:	e7b2      	b.n	800279e <USB_HC_Init+0x60>
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8002838:	f44f 4800 	mov.w	r8, #32768	@ 0x8000
 800283c:	e7c1      	b.n	80027c2 <USB_HC_Init+0x84>
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800283e:	2802      	cmp	r0, #2
 8002840:	d002      	beq.n	8002848 <USB_HC_Init+0x10a>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8002842:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002846:	e7c3      	b.n	80027d0 <USB_HC_Init+0x92>
    HCcharLowSpeed = 0U;
 8002848:	2200      	movs	r2, #0
 800284a:	e7c1      	b.n	80027d0 <USB_HC_Init+0x92>
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800284c:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
 8002850:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002854:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
 8002858:	e7d3      	b.n	8002802 <USB_HC_Init+0xc4>

0800285a <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800285a:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800285e:	6940      	ldr	r0, [r0, #20]
}
 8002860:	b280      	uxth	r0, r0
 8002862:	4770      	bx	lr

08002864 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8002864:	b430      	push	{r4, r5}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002866:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800286a:	f501 62a0 	add.w	r2, r1, #1280	@ 0x500
 800286e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 8002872:	f3c3 4381 	ubfx	r3, r3, #18, #2
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8002876:	f8d1 4500 	ldr.w	r4, [r1, #1280]	@ 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800287a:	6885      	ldr	r5, [r0, #8]
 800287c:	f015 0f20 	tst.w	r5, #32
 8002880:	d002      	beq.n	8002888 <USB_HC_Halt+0x24>
 8002882:	0fe4      	lsrs	r4, r4, #31
 8002884:	2c00      	cmp	r4, #0
 8002886:	d055      	beq.n	8002934 <USB_HC_Halt+0xd0>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002888:	b333      	cbz	r3, 80028d8 <USB_HC_Halt+0x74>
 800288a:	2b02      	cmp	r3, #2
 800288c:	d024      	beq.n	80028d8 <USB_HC_Halt+0x74>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800288e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 8002892:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002896:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800289a:	f8d0 3410 	ldr.w	r3, [r0, #1040]	@ 0x410
 800289e:	f413 037f 	ands.w	r3, r3, #16711680	@ 0xff0000
 80028a2:	d14a      	bne.n	800293a <USB_HC_Halt+0xd6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80028a4:	f8d1 0500 	ldr.w	r0, [r1, #1280]	@ 0x500
 80028a8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80028ac:	f8c1 0500 	str.w	r0, [r1, #1280]	@ 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80028b0:	f8d1 0500 	ldr.w	r0, [r1, #1280]	@ 0x500
 80028b4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80028b8:	f8c1 0500 	str.w	r0, [r1, #1280]	@ 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80028bc:	f8d1 0500 	ldr.w	r0, [r1, #1280]	@ 0x500
 80028c0:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 80028c4:	f8c1 0500 	str.w	r0, [r1, #1280]	@ 0x500
      do
      {
        if (++count > 1000U)
 80028c8:	3301      	adds	r3, #1
 80028ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028ce:	d831      	bhi.n	8002934 <USB_HC_Halt+0xd0>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80028d0:	6811      	ldr	r1, [r2, #0]
 80028d2:	2900      	cmp	r1, #0
 80028d4:	dbf8      	blt.n	80028c8 <USB_HC_Halt+0x64>
 80028d6:	e02d      	b.n	8002934 <USB_HC_Halt+0xd0>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80028d8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 80028dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028e0:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80028e4:	6883      	ldr	r3, [r0, #8]
 80028e6:	f013 0f20 	tst.w	r3, #32
 80028ea:	d123      	bne.n	8002934 <USB_HC_Halt+0xd0>
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80028ec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80028ee:	f413 037f 	ands.w	r3, r3, #16711680	@ 0xff0000
 80028f2:	d119      	bne.n	8002928 <USB_HC_Halt+0xc4>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80028f4:	f8d1 0500 	ldr.w	r0, [r1, #1280]	@ 0x500
 80028f8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80028fc:	f8c1 0500 	str.w	r0, [r1, #1280]	@ 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002900:	f8d1 0500 	ldr.w	r0, [r1, #1280]	@ 0x500
 8002904:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8002908:	f8c1 0500 	str.w	r0, [r1, #1280]	@ 0x500
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800290c:	f8d1 0500 	ldr.w	r0, [r1, #1280]	@ 0x500
 8002910:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8002914:	f8c1 0500 	str.w	r0, [r1, #1280]	@ 0x500
          if (++count > 1000U)
 8002918:	3301      	adds	r3, #1
 800291a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800291e:	d809      	bhi.n	8002934 <USB_HC_Halt+0xd0>
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002920:	6811      	ldr	r1, [r2, #0]
 8002922:	2900      	cmp	r1, #0
 8002924:	dbf8      	blt.n	8002918 <USB_HC_Halt+0xb4>
 8002926:	e005      	b.n	8002934 <USB_HC_Halt+0xd0>
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002928:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 800292c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002930:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8002934:	2000      	movs	r0, #0
 8002936:	bc30      	pop	{r4, r5}
 8002938:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800293a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 800293e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002942:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
 8002946:	e7f5      	b.n	8002934 <USB_HC_Halt+0xd0>

08002948 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002948:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800294c:	4a06      	ldr	r2, [pc, #24]	@ (8002968 <USB_DoPing+0x20>)
 800294e:	f8c0 2510 	str.w	r2, [r0, #1296]	@ 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8002952:	f8d0 3500 	ldr.w	r3, [r0, #1280]	@ 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002956:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800295a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800295e:	f8c0 3500 	str.w	r3, [r0, #1280]	@ 0x500

  return HAL_OK;
}
 8002962:	2000      	movs	r0, #0
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	80080000 	.word	0x80080000

0800296c <USB_HC_StartXfer>:
{
 800296c:	b530      	push	{r4, r5, lr}
 800296e:	b085      	sub	sp, #20
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8002970:	784b      	ldrb	r3, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8002972:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002974:	f414 7f80 	tst.w	r4, #256	@ 0x100
 8002978:	d007      	beq.n	800298a <USB_HC_StartXfer+0x1e>
 800297a:	790c      	ldrb	r4, [r1, #4]
 800297c:	b92c      	cbnz	r4, 800298a <USB_HC_StartXfer+0x1e>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800297e:	2a01      	cmp	r2, #1
 8002980:	d016      	beq.n	80029b0 <USB_HC_StartXfer+0x44>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8002982:	b912      	cbnz	r2, 800298a <USB_HC_StartXfer+0x1e>
 8002984:	794c      	ldrb	r4, [r1, #5]
 8002986:	2c01      	cmp	r4, #1
 8002988:	d01f      	beq.n	80029ca <USB_HC_StartXfer+0x5e>
  if (hc->xfer_len > 0U)
 800298a:	694c      	ldr	r4, [r1, #20]
 800298c:	b30c      	cbz	r4, 80029d2 <USB_HC_StartXfer+0x66>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800298e:	890d      	ldrh	r5, [r1, #8]
 8002990:	eb04 0c05 	add.w	ip, r4, r5
 8002994:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8002998:	fbbc fcf5 	udiv	ip, ip, r5
 800299c:	fa1f fc8c 	uxth.w	ip, ip
    if (num_packets > max_hc_pkt_count)
 80029a0:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 80029a4:	d917      	bls.n	80029d6 <USB_HC_StartXfer+0x6a>
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80029a6:	022d      	lsls	r5, r5, #8
 80029a8:	610d      	str	r5, [r1, #16]
      num_packets = max_hc_pkt_count;
 80029aa:	f44f 7c80 	mov.w	ip, #256	@ 0x100
 80029ae:	e012      	b.n	80029d6 <USB_HC_StartXfer+0x6a>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80029b0:	79cc      	ldrb	r4, [r1, #7]
 80029b2:	b10c      	cbz	r4, 80029b8 <USB_HC_StartXfer+0x4c>
 80029b4:	2c02      	cmp	r4, #2
 80029b6:	d1e4      	bne.n	8002982 <USB_HC_StartXfer+0x16>
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80029b8:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80029bc:	f8d4 550c 	ldr.w	r5, [r4, #1292]	@ 0x50c
 80029c0:	f025 0570 	bic.w	r5, r5, #112	@ 0x70
 80029c4:	f8c4 550c 	str.w	r5, [r4, #1292]	@ 0x50c
 80029c8:	e7db      	b.n	8002982 <USB_HC_StartXfer+0x16>
      (void)USB_DoPing(USBx, hc->ch_num);
 80029ca:	7849      	ldrb	r1, [r1, #1]
 80029cc:	f7ff ffbc 	bl	8002948 <USB_DoPing>
      return HAL_OK;
 80029d0:	e06f      	b.n	8002ab2 <USB_HC_StartXfer+0x146>
    num_packets = 1U;
 80029d2:	f04f 0c01 	mov.w	ip, #1
  if (hc->ep_is_in != 0U)
 80029d6:	78cd      	ldrb	r5, [r1, #3]
 80029d8:	2d00      	cmp	r5, #0
 80029da:	d051      	beq.n	8002a80 <USB_HC_StartXfer+0x114>
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80029dc:	890c      	ldrh	r4, [r1, #8]
 80029de:	fb04 f40c 	mul.w	r4, r4, ip
 80029e2:	610c      	str	r4, [r1, #16]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80029e4:	690c      	ldr	r4, [r1, #16]
 80029e6:	f3c4 0412 	ubfx	r4, r4, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80029ea:	4d39      	ldr	r5, [pc, #228]	@ (8002ad0 <USB_HC_StartXfer+0x164>)
 80029ec:	ea05 4ccc 	and.w	ip, r5, ip, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80029f0:	ea44 040c 	orr.w	r4, r4, ip
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80029f4:	f891 c00a 	ldrb.w	ip, [r1, #10]
 80029f8:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 80029fc:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8002a00:	eb00 1343 	add.w	r3, r0, r3, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002a04:	ea44 040c 	orr.w	r4, r4, ip
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8002a08:	f8c3 4510 	str.w	r4, [r3, #1296]	@ 0x510
  if (dma != 0U)
 8002a0c:	b112      	cbz	r2, 8002a14 <USB_HC_StartXfer+0xa8>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8002a0e:	68cc      	ldr	r4, [r1, #12]
 8002a10:	f8c3 4514 	str.w	r4, [r3, #1300]	@ 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8002a14:	f500 6580 	add.w	r5, r0, #1024	@ 0x400
 8002a18:	68ac      	ldr	r4, [r5, #8]
 8002a1a:	f014 0f01 	tst.w	r4, #1
 8002a1e:	bf0c      	ite	eq
 8002a20:	f04f 0c01 	moveq.w	ip, #1
 8002a24:	f04f 0c00 	movne.w	ip, #0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002a28:	f8d3 4500 	ldr.w	r4, [r3, #1280]	@ 0x500
 8002a2c:	f024 5400 	bic.w	r4, r4, #536870912	@ 0x20000000
 8002a30:	f8c3 4500 	str.w	r4, [r3, #1280]	@ 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8002a34:	f8d3 4500 	ldr.w	r4, [r3, #1280]	@ 0x500
 8002a38:	ea44 744c 	orr.w	r4, r4, ip, lsl #29
 8002a3c:	f8c3 4500 	str.w	r4, [r3, #1280]	@ 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a40:	f8d3 4500 	ldr.w	r4, [r3, #1280]	@ 0x500
 8002a44:	9403      	str	r4, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a46:	9c03      	ldr	r4, [sp, #12]
 8002a48:	f024 4480 	bic.w	r4, r4, #1073741824	@ 0x40000000
 8002a4c:	9403      	str	r4, [sp, #12]
  if (hc->ep_is_in != 0U)
 8002a4e:	78cc      	ldrb	r4, [r1, #3]
 8002a50:	b1c4      	cbz	r4, 8002a84 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002a52:	9c03      	ldr	r4, [sp, #12]
 8002a54:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 8002a58:	9403      	str	r4, [sp, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a5a:	9c03      	ldr	r4, [sp, #12]
 8002a5c:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8002a60:	9403      	str	r4, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a62:	9c03      	ldr	r4, [sp, #12]
 8002a64:	f8c3 4500 	str.w	r4, [r3, #1280]	@ 0x500
  if (dma != 0U) /* dma mode */
 8002a68:	bb1a      	cbnz	r2, 8002ab2 <USB_HC_StartXfer+0x146>
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8002a6a:	78cb      	ldrb	r3, [r1, #3]
 8002a6c:	bb0b      	cbnz	r3, 8002ab2 <USB_HC_StartXfer+0x146>
 8002a6e:	694b      	ldr	r3, [r1, #20]
 8002a70:	b1fb      	cbz	r3, 8002ab2 <USB_HC_StartXfer+0x146>
    switch (hc->ep_type)
 8002a72:	79ca      	ldrb	r2, [r1, #7]
 8002a74:	2a03      	cmp	r2, #3
 8002a76:	d815      	bhi.n	8002aa4 <USB_HC_StartXfer+0x138>
 8002a78:	e8df f002 	tbb	[pc, r2]
 8002a7c:	1e091e09 	.word	0x1e091e09
    hc->XferSize = hc->xfer_len;
 8002a80:	610c      	str	r4, [r1, #16]
 8002a82:	e7af      	b.n	80029e4 <USB_HC_StartXfer+0x78>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002a84:	9c03      	ldr	r4, [sp, #12]
 8002a86:	f424 4400 	bic.w	r4, r4, #32768	@ 0x8000
 8002a8a:	9403      	str	r4, [sp, #12]
 8002a8c:	e7e5      	b.n	8002a5a <USB_HC_StartXfer+0xee>
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002a8e:	3303      	adds	r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002a90:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8002a92:	b292      	uxth	r2, r2
 8002a94:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d203      	bcs.n	8002aa4 <USB_HC_StartXfer+0x138>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8002a9c:	6983      	ldr	r3, [r0, #24]
 8002a9e:	f043 0320 	orr.w	r3, r3, #32
 8002aa2:	6183      	str	r3, [r0, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	8a8b      	ldrh	r3, [r1, #20]
 8002aaa:	784a      	ldrb	r2, [r1, #1]
 8002aac:	68c9      	ldr	r1, [r1, #12]
 8002aae:	f7ff fceb 	bl	8002488 <USB_WritePacket>
}
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	b005      	add	sp, #20
 8002ab6:	bd30      	pop	{r4, r5, pc}
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002ab8:	3303      	adds	r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002aba:	692a      	ldr	r2, [r5, #16]
 8002abc:	b292      	uxth	r2, r2
 8002abe:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d2ee      	bcs.n	8002aa4 <USB_HC_StartXfer+0x138>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002ac6:	6983      	ldr	r3, [r0, #24]
 8002ac8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002acc:	6183      	str	r3, [r0, #24]
 8002ace:	e7e9      	b.n	8002aa4 <USB_HC_StartXfer+0x138>
 8002ad0:	1ff80000 	.word	0x1ff80000

08002ad4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t count = 0U;
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002ad8:	f7ff fca1 	bl	800241e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002adc:	2110      	movs	r1, #16
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f7ff fca4 	bl	800242c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f7ff fcb9 	bl	800245c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002aea:	2200      	movs	r2, #0
 8002aec:	e00a      	b.n	8002b04 <USB_StopHost+0x30>
  {
    value = USBx_HC(i)->HCCHAR;
 8002aee:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 8002af2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002af6:	f023 2380 	bic.w	r3, r3, #2147516416	@ 0x80008000
 8002afa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8002afe:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
  for (i = 0U; i <= 15U; i++)
 8002b02:	3201      	adds	r2, #1
 8002b04:	2a0f      	cmp	r2, #15
 8002b06:	d9f2      	bls.n	8002aee <USB_StopHost+0x1a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002b08:	2000      	movs	r0, #0
  uint32_t count = 0U;
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	e000      	b.n	8002b10 <USB_StopHost+0x3c>
  for (i = 0U; i <= 15U; i++)
 8002b0e:	3001      	adds	r0, #1
 8002b10:	280f      	cmp	r0, #15
 8002b12:	d813      	bhi.n	8002b3c <USB_StopHost+0x68>
  {
    value = USBx_HC(i)->HCCHAR;
 8002b14:	eb04 1c40 	add.w	ip, r4, r0, lsl #5
 8002b18:	f50c 61a0 	add.w	r1, ip, #1280	@ 0x500
 8002b1c:	f8dc 2500 	ldr.w	r2, [ip, #1280]	@ 0x500
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002b20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b24:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8002b28:	f8cc 2500 	str.w	r2, [ip, #1280]	@ 0x500

    do
    {
      if (++count > 1000U)
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b32:	d8ec      	bhi.n	8002b0e <USB_StopHost+0x3a>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002b34:	680a      	ldr	r2, [r1, #0]
 8002b36:	2a00      	cmp	r2, #0
 8002b38:	dbf8      	blt.n	8002b2c <USB_StopHost+0x58>
 8002b3a:	e7e8      	b.n	8002b0e <USB_StopHost+0x3a>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002b3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b40:	f8c4 3414 	str.w	r3, [r4, #1044]	@ 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002b44:	6163      	str	r3, [r4, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002b46:	4620      	mov	r0, r4
 8002b48:	f7ff fc63 	bl	8002412 <USB_EnableGlobalInt>

  return HAL_OK;
}
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	bd10      	pop	{r4, pc}

08002b50 <MTP_FindCtlEndpoint>:
  * @brief  Find MTP Ctl interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindCtlEndpoint(USBH_HandleTypeDef *phost)
{
 8002b50:	4601      	mov	r1, r0
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8002b52:	2300      	movs	r3, #0
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d837      	bhi.n	8002bc8 <MTP_FindCtlEndpoint+0x78>
{
 8002b58:	b510      	push	{r4, lr}
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8002b5a:	469c      	mov	ip, r3
 8002b5c:	221a      	movs	r2, #26
 8002b5e:	fb02 1203 	mla	r2, r2, r3, r1
 8002b62:	f892 2347 	ldrb.w	r2, [r2, #839]	@ 0x347
 8002b66:	2a06      	cmp	r2, #6
 8002b68:	d02c      	beq.n	8002bc4 <MTP_FindCtlEndpoint+0x74>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d9f3      	bls.n	8002b5a <MTP_FindCtlEndpoint+0xa>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8002b72:	20ff      	movs	r0, #255	@ 0xff
}
 8002b74:	bd10      	pop	{r4, pc}
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8002b76:	3001      	adds	r0, #1
 8002b78:	b2c0      	uxtb	r0, r0
 8002b7a:	2801      	cmp	r0, #1
 8002b7c:	d8f5      	bhi.n	8002b6a <MTP_FindCtlEndpoint+0x1a>
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8002b7e:	f100 0e01 	add.w	lr, r0, #1
 8002b82:	221a      	movs	r2, #26
 8002b84:	fb02 f20c 	mul.w	r2, r2, ip
 8002b88:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 8002b8c:	440a      	add	r2, r1
 8002b8e:	f992 2346 	ldrsb.w	r2, [r2, #838]	@ 0x346
 8002b92:	2a00      	cmp	r2, #0
 8002b94:	daef      	bge.n	8002b76 <MTP_FindCtlEndpoint+0x26>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002b96:	221a      	movs	r2, #26
 8002b98:	fb02 f20c 	mul.w	r2, r2, ip
 8002b9c:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 8002ba0:	440a      	add	r2, r1
 8002ba2:	f8b2 2348 	ldrh.w	r2, [r2, #840]	@ 0x348
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8002ba6:	2a00      	cmp	r2, #0
 8002ba8:	d0e5      	beq.n	8002b76 <MTP_FindCtlEndpoint+0x26>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_INTERRUPT) == USBH_EP_INTERRUPT))
 8002baa:	221a      	movs	r2, #26
 8002bac:	fb02 f20c 	mul.w	r2, r2, ip
 8002bb0:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 8002bb4:	440a      	add	r2, r1
 8002bb6:	f892 2347 	ldrb.w	r2, [r2, #839]	@ 0x347
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002bba:	f002 0203 	and.w	r2, r2, #3
 8002bbe:	2a03      	cmp	r2, #3
 8002bc0:	d1d9      	bne.n	8002b76 <MTP_FindCtlEndpoint+0x26>
 8002bc2:	e7d7      	b.n	8002b74 <MTP_FindCtlEndpoint+0x24>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	e7d8      	b.n	8002b7a <MTP_FindCtlEndpoint+0x2a>
  return 0xFFU; /* Invalid Endpoint */
 8002bc8:	20ff      	movs	r0, #255	@ 0xff
}
 8002bca:	4770      	bx	lr

08002bcc <MTP_FindDataOutEndpoint>:
  * @brief  Find MTP DATA OUT interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataOutEndpoint(USBH_HandleTypeDef *phost)
{
 8002bcc:	4601      	mov	r1, r0
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d836      	bhi.n	8002c42 <MTP_FindDataOutEndpoint+0x76>
{
 8002bd4:	b510      	push	{r4, lr}
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8002bd6:	469c      	mov	ip, r3
 8002bd8:	221a      	movs	r2, #26
 8002bda:	fb02 1203 	mla	r2, r2, r3, r1
 8002bde:	f892 2347 	ldrb.w	r2, [r2, #839]	@ 0x347
 8002be2:	2a06      	cmp	r2, #6
 8002be4:	d02b      	beq.n	8002c3e <MTP_FindDataOutEndpoint+0x72>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8002be6:	3301      	adds	r3, #1
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d9f3      	bls.n	8002bd6 <MTP_FindDataOutEndpoint+0xa>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8002bee:	20ff      	movs	r0, #255	@ 0xff
}
 8002bf0:	bd10      	pop	{r4, pc}
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8002bf2:	3001      	adds	r0, #1
 8002bf4:	b2c0      	uxtb	r0, r0
 8002bf6:	2801      	cmp	r0, #1
 8002bf8:	d8f5      	bhi.n	8002be6 <MTP_FindDataOutEndpoint+0x1a>
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 8002bfa:	f100 0e01 	add.w	lr, r0, #1
 8002bfe:	221a      	movs	r2, #26
 8002c00:	fb02 f20c 	mul.w	r2, r2, ip
 8002c04:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 8002c08:	440a      	add	r2, r1
 8002c0a:	f992 2346 	ldrsb.w	r2, [r2, #838]	@ 0x346
 8002c0e:	2a00      	cmp	r2, #0
 8002c10:	dbef      	blt.n	8002bf2 <MTP_FindDataOutEndpoint+0x26>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002c12:	221a      	movs	r2, #26
 8002c14:	fb02 f20c 	mul.w	r2, r2, ip
 8002c18:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 8002c1c:	440a      	add	r2, r1
 8002c1e:	f8b2 2348 	ldrh.w	r2, [r2, #840]	@ 0x348
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 8002c22:	2a00      	cmp	r2, #0
 8002c24:	d0e5      	beq.n	8002bf2 <MTP_FindDataOutEndpoint+0x26>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 8002c26:	221a      	movs	r2, #26
 8002c28:	fb02 f20c 	mul.w	r2, r2, ip
 8002c2c:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 8002c30:	440a      	add	r2, r1
 8002c32:	f892 2347 	ldrb.w	r2, [r2, #839]	@ 0x347
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002c36:	f012 0f02 	tst.w	r2, #2
 8002c3a:	d0da      	beq.n	8002bf2 <MTP_FindDataOutEndpoint+0x26>
 8002c3c:	e7d8      	b.n	8002bf0 <MTP_FindDataOutEndpoint+0x24>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8002c3e:	2000      	movs	r0, #0
 8002c40:	e7d9      	b.n	8002bf6 <MTP_FindDataOutEndpoint+0x2a>
  return 0xFFU; /* Invalid Endpoint */
 8002c42:	20ff      	movs	r0, #255	@ 0xff
}
 8002c44:	4770      	bx	lr

08002c46 <MTP_FindDataInEndpoint>:
  * @brief  Find MTP DATA IN interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataInEndpoint(USBH_HandleTypeDef *phost)
{
 8002c46:	4601      	mov	r1, r0
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d836      	bhi.n	8002cbc <MTP_FindDataInEndpoint+0x76>
{
 8002c4e:	b510      	push	{r4, lr}
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8002c50:	469c      	mov	ip, r3
 8002c52:	221a      	movs	r2, #26
 8002c54:	fb02 1203 	mla	r2, r2, r3, r1
 8002c58:	f892 2347 	ldrb.w	r2, [r2, #839]	@ 0x347
 8002c5c:	2a06      	cmp	r2, #6
 8002c5e:	d02b      	beq.n	8002cb8 <MTP_FindDataInEndpoint+0x72>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 8002c60:	3301      	adds	r3, #1
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d9f3      	bls.n	8002c50 <MTP_FindDataInEndpoint+0xa>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8002c68:	20ff      	movs	r0, #255	@ 0xff
}
 8002c6a:	bd10      	pop	{r4, pc}
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8002c6c:	3001      	adds	r0, #1
 8002c6e:	b2c0      	uxtb	r0, r0
 8002c70:	2801      	cmp	r0, #1
 8002c72:	d8f5      	bhi.n	8002c60 <MTP_FindDataInEndpoint+0x1a>
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8002c74:	f100 0e01 	add.w	lr, r0, #1
 8002c78:	221a      	movs	r2, #26
 8002c7a:	fb02 f20c 	mul.w	r2, r2, ip
 8002c7e:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 8002c82:	440a      	add	r2, r1
 8002c84:	f992 2346 	ldrsb.w	r2, [r2, #838]	@ 0x346
 8002c88:	2a00      	cmp	r2, #0
 8002c8a:	daef      	bge.n	8002c6c <MTP_FindDataInEndpoint+0x26>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002c8c:	221a      	movs	r2, #26
 8002c8e:	fb02 f20c 	mul.w	r2, r2, ip
 8002c92:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 8002c96:	440a      	add	r2, r1
 8002c98:	f8b2 2348 	ldrh.w	r2, [r2, #840]	@ 0x348
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 8002c9c:	2a00      	cmp	r2, #0
 8002c9e:	d0e5      	beq.n	8002c6c <MTP_FindDataInEndpoint+0x26>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 8002ca0:	221a      	movs	r2, #26
 8002ca2:	fb02 f20c 	mul.w	r2, r2, ip
 8002ca6:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 8002caa:	440a      	add	r2, r1
 8002cac:	f892 2347 	ldrb.w	r2, [r2, #839]	@ 0x347
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8002cb0:	f012 0f02 	tst.w	r2, #2
 8002cb4:	d0da      	beq.n	8002c6c <MTP_FindDataInEndpoint+0x26>
 8002cb6:	e7d8      	b.n	8002c6a <MTP_FindDataInEndpoint+0x24>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8002cb8:	2000      	movs	r0, #0
 8002cba:	e7d9      	b.n	8002c70 <MTP_FindDataInEndpoint+0x2a>
  return 0xFFU; /* Invalid Endpoint */
 8002cbc:	20ff      	movs	r0, #255	@ 0xff
}
 8002cbe:	4770      	bx	lr

08002cc0 <USBH_MTP_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	4770      	bx	lr

08002cc4 <USBH_MTP_ClassRequest>:
{
 8002cc4:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8002cc6:	2105      	movs	r1, #5
 8002cc8:	f8c0 13e0 	str.w	r1, [r0, #992]	@ 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f8d0 03d8 	ldr.w	r0, [r0, #984]	@ 0x3d8
 8002cd2:	f001 ffbc 	bl	8004c4e <osMessagePut>
}
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	bd08      	pop	{r3, pc}

08002cda <USBH_MTP_InterfaceDeInit>:
{
 8002cda:	b570      	push	{r4, r5, r6, lr}
 8002cdc:	4604      	mov	r4, r0
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8002cde:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8002ce2:	69dd      	ldr	r5, [r3, #28]
  if (MTP_Handle->DataOutPipe != 0U)
 8002ce4:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 8002ce8:	f893 1d2d 	ldrb.w	r1, [r3, #3373]	@ 0xd2d
 8002cec:	b9a9      	cbnz	r1, 8002d1a <USBH_MTP_InterfaceDeInit+0x40>
  if (MTP_Handle->DataInPipe != 0U)
 8002cee:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 8002cf2:	f893 1d2c 	ldrb.w	r1, [r3, #3372]	@ 0xd2c
 8002cf6:	b9e9      	cbnz	r1, 8002d34 <USBH_MTP_InterfaceDeInit+0x5a>
  if (MTP_Handle->NotificationPipe != 0U)
 8002cf8:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 8002cfc:	f893 1d2e 	ldrb.w	r1, [r3, #3374]	@ 0xd2e
 8002d00:	bb31      	cbnz	r1, 8002d50 <USBH_MTP_InterfaceDeInit+0x76>
  if (phost->pActiveClass->pData != NULL)
 8002d02:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 8002d06:	69d8      	ldr	r0, [r3, #28]
 8002d08:	b128      	cbz	r0, 8002d16 <USBH_MTP_InterfaceDeInit+0x3c>
    USBH_free(phost->pActiveClass->pData);
 8002d0a:	f003 fd35 	bl	8006778 <free>
    phost->pActiveClass->pData = 0U;
 8002d0e:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 8002d12:	2200      	movs	r2, #0
 8002d14:	61da      	str	r2, [r3, #28]
}
 8002d16:	2000      	movs	r0, #0
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
    USBH_ClosePipe(phost, MTP_Handle->DataOutPipe);
 8002d1a:	f001 ff15 	bl	8004b48 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->DataOutPipe);
 8002d1e:	f505 5680 	add.w	r6, r5, #4096	@ 0x1000
 8002d22:	f896 1d2d 	ldrb.w	r1, [r6, #3373]	@ 0xd2d
 8002d26:	4620      	mov	r0, r4
 8002d28:	f001 ff26 	bl	8004b78 <USBH_FreePipe>
    MTP_Handle->DataOutPipe = 0U;     /* Reset the Channel as Free */
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f886 3d2d 	strb.w	r3, [r6, #3373]	@ 0xd2d
 8002d32:	e7dc      	b.n	8002cee <USBH_MTP_InterfaceDeInit+0x14>
    USBH_ClosePipe(phost, MTP_Handle->DataInPipe);
 8002d34:	4620      	mov	r0, r4
 8002d36:	f001 ff07 	bl	8004b48 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->DataInPipe);
 8002d3a:	f505 5680 	add.w	r6, r5, #4096	@ 0x1000
 8002d3e:	f896 1d2c 	ldrb.w	r1, [r6, #3372]	@ 0xd2c
 8002d42:	4620      	mov	r0, r4
 8002d44:	f001 ff18 	bl	8004b78 <USBH_FreePipe>
    MTP_Handle->DataInPipe = 0U;     /* Reset the Channel as Free */
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f886 3d2c 	strb.w	r3, [r6, #3372]	@ 0xd2c
 8002d4e:	e7d3      	b.n	8002cf8 <USBH_MTP_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MTP_Handle->NotificationPipe);
 8002d50:	4620      	mov	r0, r4
 8002d52:	f001 fef9 	bl	8004b48 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->NotificationPipe);
 8002d56:	f505 5580 	add.w	r5, r5, #4096	@ 0x1000
 8002d5a:	f895 1d2e 	ldrb.w	r1, [r5, #3374]	@ 0xd2e
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f001 ff0a 	bl	8004b78 <USBH_FreePipe>
    MTP_Handle->NotificationPipe = 0U;     /* Reset the Channel as Free */
 8002d64:	2300      	movs	r3, #0
 8002d66:	f885 3d2e 	strb.w	r3, [r5, #3374]	@ 0xd2e
 8002d6a:	e7ca      	b.n	8002d02 <USBH_MTP_InterfaceDeInit+0x28>

08002d6c <USBH_MTP_InterfaceInit>:
{
 8002d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, USB_MTP_CLASS, 1U, 1U);
 8002d74:	2301      	movs	r3, #1
 8002d76:	461a      	mov	r2, r3
 8002d78:	2106      	movs	r1, #6
 8002d7a:	f001 f928 	bl	8003fce <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8002d7e:	2801      	cmp	r0, #1
 8002d80:	f200 80c1 	bhi.w	8002f06 <USBH_MTP_InterfaceInit+0x19a>
 8002d84:	4605      	mov	r5, r0
  USBH_SelectInterface(phost, interface);
 8002d86:	4601      	mov	r1, r0
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f001 f916 	bl	8003fba <USBH_SelectInterface>
  status = USBH_SelectInterface(phost, interface);
 8002d8e:	4629      	mov	r1, r5
 8002d90:	4620      	mov	r0, r4
 8002d92:	f001 f912 	bl	8003fba <USBH_SelectInterface>
  if (status != USBH_OK)
 8002d96:	2800      	cmp	r0, #0
 8002d98:	f040 80b9 	bne.w	8002f0e <USBH_MTP_InterfaceInit+0x1a2>
  endpoint = MTP_FindCtlEndpoint(phost);
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f7ff fed7 	bl	8002b50 <MTP_FindCtlEndpoint>
 8002da2:	4606      	mov	r6, r0
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8002da4:	2801      	cmp	r0, #1
 8002da6:	f200 80b4 	bhi.w	8002f12 <USBH_MTP_InterfaceInit+0x1a6>
  phost->pActiveClass->pData = (MTP_HandleTypeDef *)USBH_malloc(sizeof(MTP_HandleTypeDef));
 8002daa:	f8d4 737c 	ldr.w	r7, [r4, #892]	@ 0x37c
 8002dae:	f242 10d0 	movw	r0, #8656	@ 0x21d0
 8002db2:	f003 fcd9 	bl	8006768 <malloc>
 8002db6:	61f8      	str	r0, [r7, #28]
  MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8002db8:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 8002dbc:	69df      	ldr	r7, [r3, #28]
  if (MTP_Handle == NULL)
 8002dbe:	2f00      	cmp	r7, #0
 8002dc0:	f000 80a9 	beq.w	8002f16 <USBH_MTP_InterfaceInit+0x1aa>
  USBH_memset(MTP_Handle, 0, sizeof(MTP_HandleTypeDef));
 8002dc4:	f242 12d0 	movw	r2, #8656	@ 0x21d0
 8002dc8:	2100      	movs	r1, #0
 8002dca:	4638      	mov	r0, r7
 8002dcc:	f003 fd8a 	bl	80068e4 <memset>
  MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8002dd0:	3601      	adds	r6, #1
 8002dd2:	231a      	movs	r3, #26
 8002dd4:	fb05 f303 	mul.w	r3, r5, r3
 8002dd8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8002ddc:	4426      	add	r6, r4
 8002dde:	f896 1346 	ldrb.w	r1, [r6, #838]	@ 0x346
 8002de2:	f507 5880 	add.w	r8, r7, #4096	@ 0x1000
 8002de6:	f888 1d31 	strb.w	r1, [r8, #3377]	@ 0xd31
  MTP_Handle->NotificationEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8002dea:	f8b6 3348 	ldrh.w	r3, [r6, #840]	@ 0x348
 8002dee:	f8a8 3d36 	strh.w	r3, [r8, #3382]	@ 0xd36
  MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 8002df2:	4620      	mov	r0, r4
 8002df4:	f001 fead 	bl	8004b52 <USBH_AllocPipe>
 8002df8:	4601      	mov	r1, r0
 8002dfa:	f888 0d2e 	strb.w	r0, [r8, #3374]	@ 0xd2e
  MTP_Handle->events.poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bInterval;
 8002dfe:	f896 334a 	ldrb.w	r3, [r6, #842]	@ 0x34a
 8002e02:	f8a8 3d44 	strh.w	r3, [r8, #3396]	@ 0xd44
  USBH_OpenPipe(phost, MTP_Handle->NotificationPipe,MTP_Handle->NotificationEp,
 8002e06:	f898 2d31 	ldrb.w	r2, [r8, #3377]	@ 0xd31
 8002e0a:	f8b8 3d36 	ldrh.w	r3, [r8, #3382]	@ 0xd36
 8002e0e:	9302      	str	r3, [sp, #8]
 8002e10:	2303      	movs	r3, #3
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f001 fe82 	bl	8004b28 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MTP_Handle->NotificationPipe, 0U);
 8002e24:	2200      	movs	r2, #0
 8002e26:	f898 1d2e 	ldrb.w	r1, [r8, #3374]	@ 0xd2e
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f003 fc22 	bl	8006674 <USBH_LL_SetToggle>
  endpoint = MTP_FindDataInEndpoint(phost);
 8002e30:	4620      	mov	r0, r4
 8002e32:	f7ff ff08 	bl	8002c46 <MTP_FindDataInEndpoint>
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8002e36:	2801      	cmp	r0, #1
 8002e38:	d86f      	bhi.n	8002f1a <USBH_MTP_InterfaceInit+0x1ae>
  MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8002e3a:	3001      	adds	r0, #1
 8002e3c:	231a      	movs	r3, #26
 8002e3e:	fb05 f303 	mul.w	r3, r5, r3
 8002e42:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002e46:	4423      	add	r3, r4
 8002e48:	f893 1346 	ldrb.w	r1, [r3, #838]	@ 0x346
 8002e4c:	f888 1d30 	strb.w	r1, [r8, #3376]	@ 0xd30
  MTP_Handle->DataInEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8002e50:	f8b3 3348 	ldrh.w	r3, [r3, #840]	@ 0x348
 8002e54:	f8a8 3d34 	strh.w	r3, [r8, #3380]	@ 0xd34
  MTP_Handle->DataInPipe = USBH_AllocPipe(phost, MTP_Handle->DataInEp);
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f001 fe7a 	bl	8004b52 <USBH_AllocPipe>
 8002e5e:	4601      	mov	r1, r0
 8002e60:	f888 0d2c 	strb.w	r0, [r8, #3372]	@ 0xd2c
  USBH_OpenPipe(phost, MTP_Handle->DataInPipe, MTP_Handle->DataInEp,
 8002e64:	f898 2d30 	ldrb.w	r2, [r8, #3376]	@ 0xd30
 8002e68:	f8b8 3d34 	ldrh.w	r3, [r8, #3380]	@ 0xd34
 8002e6c:	9302      	str	r3, [sp, #8]
 8002e6e:	2302      	movs	r3, #2
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f001 fe53 	bl	8004b28 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MTP_Handle->DataInPipe, 0U);
 8002e82:	2200      	movs	r2, #0
 8002e84:	f898 1d2c 	ldrb.w	r1, [r8, #3372]	@ 0xd2c
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f003 fbf3 	bl	8006674 <USBH_LL_SetToggle>
  endpoint = MTP_FindDataOutEndpoint(phost);
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f7ff fe9c 	bl	8002bcc <MTP_FindDataOutEndpoint>
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8002e94:	2801      	cmp	r0, #1
 8002e96:	d842      	bhi.n	8002f1e <USBH_MTP_InterfaceInit+0x1b2>
  MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8002e98:	3001      	adds	r0, #1
 8002e9a:	231a      	movs	r3, #26
 8002e9c:	fb05 f303 	mul.w	r3, r5, r3
 8002ea0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002ea4:	4423      	add	r3, r4
 8002ea6:	f893 1346 	ldrb.w	r1, [r3, #838]	@ 0x346
 8002eaa:	f888 1d2f 	strb.w	r1, [r8, #3375]	@ 0xd2f
  MTP_Handle->DataOutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8002eae:	f8b3 3348 	ldrh.w	r3, [r3, #840]	@ 0x348
 8002eb2:	f8a8 3d32 	strh.w	r3, [r8, #3378]	@ 0xd32
  MTP_Handle->DataOutPipe = USBH_AllocPipe(phost, MTP_Handle->DataOutEp);
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f001 fe4b 	bl	8004b52 <USBH_AllocPipe>
 8002ebc:	4601      	mov	r1, r0
 8002ebe:	f888 0d2d 	strb.w	r0, [r8, #3373]	@ 0xd2d
  USBH_OpenPipe(phost, MTP_Handle->DataOutPipe, MTP_Handle->DataOutEp,
 8002ec2:	f898 2d2f 	ldrb.w	r2, [r8, #3375]	@ 0xd2f
 8002ec6:	f8b8 3d32 	ldrh.w	r3, [r8, #3378]	@ 0xd32
 8002eca:	9302      	str	r3, [sp, #8]
 8002ecc:	2602      	movs	r6, #2
 8002ece:	9601      	str	r6, [sp, #4]
 8002ed0:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 8002eda:	4620      	mov	r0, r4
 8002edc:	f001 fe24 	bl	8004b28 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MTP_Handle->DataOutPipe, 0U);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f898 1d2d 	ldrb.w	r1, [r8, #3373]	@ 0xd2d
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f003 fbc4 	bl	8006674 <USBH_LL_SetToggle>
  MTP_Handle->state = MTP_OPENSESSION;
 8002eec:	f888 6d38 	strb.w	r6, [r8, #3384]	@ 0xd38
  MTP_Handle->is_ready = 0U;
 8002ef0:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  MTP_Handle->events.state = MTP_EVENTS_INIT;
 8002efa:	f888 3d3c 	strb.w	r3, [r8, #3388]	@ 0xd3c
  return USBH_PTP_Init(phost);
 8002efe:	4620      	mov	r0, r4
 8002f00:	f000 faed 	bl	80034de <USBH_PTP_Init>
 8002f04:	e000      	b.n	8002f08 <USBH_MTP_InterfaceInit+0x19c>
    return USBH_FAIL;
 8002f06:	2002      	movs	r0, #2
}
 8002f08:	b004      	add	sp, #16
 8002f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return USBH_FAIL;
 8002f0e:	2002      	movs	r0, #2
 8002f10:	e7fa      	b.n	8002f08 <USBH_MTP_InterfaceInit+0x19c>
    return USBH_FAIL;
 8002f12:	2002      	movs	r0, #2
 8002f14:	e7f8      	b.n	8002f08 <USBH_MTP_InterfaceInit+0x19c>
    return USBH_FAIL;
 8002f16:	2002      	movs	r0, #2
 8002f18:	e7f6      	b.n	8002f08 <USBH_MTP_InterfaceInit+0x19c>
    return USBH_FAIL;
 8002f1a:	2002      	movs	r0, #2
 8002f1c:	e7f4      	b.n	8002f08 <USBH_MTP_InterfaceInit+0x19c>
    return USBH_FAIL;
 8002f1e:	2002      	movs	r0, #2
 8002f20:	e7f2      	b.n	8002f08 <USBH_MTP_InterfaceInit+0x19c>

08002f22 <USBH_MTP_EventsCallback>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(event);
  UNUSED(param);
}
 8002f22:	4770      	bx	lr

08002f24 <MTP_DecodeEvent>:
{
 8002f24:	b508      	push	{r3, lr}
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8002f26:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8002f2a:	69db      	ldr	r3, [r3, #28]
  code = MTP_Handle->events.container.code;
 8002f2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
  USBH_MTP_EventsCallback(phost, (uint32_t)code, param1);
 8002f30:	f8d3 2d54 	ldr.w	r2, [r3, #3412]	@ 0xd54
 8002f34:	f8b3 1d4e 	ldrh.w	r1, [r3, #3406]	@ 0xd4e
 8002f38:	f7ff fff3 	bl	8002f22 <USBH_MTP_EventsCallback>
}
 8002f3c:	bd08      	pop	{r3, pc}

08002f3e <USBH_MTP_Events>:
{
 8002f3e:	b570      	push	{r4, r5, r6, lr}
 8002f40:	4604      	mov	r4, r0
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8002f42:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8002f46:	69dd      	ldr	r5, [r3, #28]
  switch (MTP_Handle->events.state)
 8002f48:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 8002f4c:	f893 3d3c 	ldrb.w	r3, [r3, #3388]	@ 0xd3c
 8002f50:	b11b      	cbz	r3, 8002f5a <USBH_MTP_Events+0x1c>
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d019      	beq.n	8002f8a <USBH_MTP_Events+0x4c>
}
 8002f56:	2001      	movs	r0, #1
 8002f58:	bd70      	pop	{r4, r5, r6, pc}
      if ((phost->Timer & 1U) == 0U)
 8002f5a:	f8d0 33c4 	ldr.w	r3, [r0, #964]	@ 0x3c4
 8002f5e:	f013 0f01 	tst.w	r3, #1
 8002f62:	d1f8      	bne.n	8002f56 <USBH_MTP_Events+0x18>
        MTP_Handle->events.timer = phost->Timer;
 8002f64:	f8d0 33c4 	ldr.w	r3, [r0, #964]	@ 0x3c4
 8002f68:	f505 5680 	add.w	r6, r5, #4096	@ 0x1000
 8002f6c:	f8c6 3d40 	str.w	r3, [r6, #3392]	@ 0xd40
        USBH_InterruptReceiveData(phost,
 8002f70:	f896 3d2e 	ldrb.w	r3, [r6, #3374]	@ 0xd2e
 8002f74:	f896 2d36 	ldrb.w	r2, [r6, #3382]	@ 0xd36
 8002f78:	f505 51ea 	add.w	r1, r5, #7488	@ 0x1d40
 8002f7c:	3108      	adds	r1, #8
 8002f7e:	f001 fdb0 	bl	8004ae2 <USBH_InterruptReceiveData>
        MTP_Handle->events.state = MTP_EVENTS_GETDATA;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f886 3d3c 	strb.w	r3, [r6, #3388]	@ 0xd3c
 8002f88:	e7e5      	b.n	8002f56 <USBH_MTP_Events+0x18>
      if (USBH_LL_GetURBState(phost, MTP_Handle->NotificationPipe) == USBH_URB_DONE)
 8002f8a:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 8002f8e:	f893 1d2e 	ldrb.w	r1, [r3, #3374]	@ 0xd2e
 8002f92:	f003 fb5b 	bl	800664c <USBH_LL_GetURBState>
 8002f96:	2801      	cmp	r0, #1
 8002f98:	d01b      	beq.n	8002fd2 <USBH_MTP_Events+0x94>
      if ((phost->Timer - MTP_Handle->events.timer) >= MTP_Handle->events.poll)
 8002f9a:	f8d4 33c4 	ldr.w	r3, [r4, #964]	@ 0x3c4
 8002f9e:	f505 5280 	add.w	r2, r5, #4096	@ 0x1000
 8002fa2:	f8d2 1d40 	ldr.w	r1, [r2, #3392]	@ 0xd40
 8002fa6:	1a5b      	subs	r3, r3, r1
 8002fa8:	f8b2 2d44 	ldrh.w	r2, [r2, #3396]	@ 0xd44
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d3d2      	bcc.n	8002f56 <USBH_MTP_Events+0x18>
        MTP_Handle->events.timer = phost->Timer;
 8002fb0:	f8d4 33c4 	ldr.w	r3, [r4, #964]	@ 0x3c4
 8002fb4:	f505 5280 	add.w	r2, r5, #4096	@ 0x1000
 8002fb8:	f8c2 3d40 	str.w	r3, [r2, #3392]	@ 0xd40
        USBH_InterruptReceiveData(phost,
 8002fbc:	f892 3d2e 	ldrb.w	r3, [r2, #3374]	@ 0xd2e
 8002fc0:	f892 2d36 	ldrb.w	r2, [r2, #3382]	@ 0xd36
 8002fc4:	f505 51ea 	add.w	r1, r5, #7488	@ 0x1d40
 8002fc8:	3108      	adds	r1, #8
 8002fca:	4620      	mov	r0, r4
 8002fcc:	f001 fd89 	bl	8004ae2 <USBH_InterruptReceiveData>
 8002fd0:	e7c1      	b.n	8002f56 <USBH_MTP_Events+0x18>
        MTP_DecodeEvent(phost);
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f7ff ffa6 	bl	8002f24 <MTP_DecodeEvent>
 8002fd8:	e7df      	b.n	8002f9a <USBH_MTP_Events+0x5c>

08002fda <USBH_MTP_Process>:
{
 8002fda:	b570      	push	{r4, r5, r6, lr}
 8002fdc:	4604      	mov	r4, r0
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8002fde:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8002fe2:	69de      	ldr	r6, [r3, #28]
  switch (MTP_Handle->state)
 8002fe4:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 8002fe8:	f893 5d38 	ldrb.w	r5, [r3, #3384]	@ 0xd38
 8002fec:	2d05      	cmp	r5, #5
 8002fee:	f200 8098 	bhi.w	8003122 <USBH_MTP_Process+0x148>
 8002ff2:	e8df f005 	tbb	[pc, r5]
 8002ff6:	1887      	.short	0x1887
 8002ff8:	4b2c9603 	.word	0x4b2c9603
      status = USBH_PTP_OpenSession(phost, 1U);  /* Session '0' is not valid */
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	f000 fcab 	bl	8003958 <USBH_PTP_OpenSession>
      if (status == USBH_OK)
 8003002:	4605      	mov	r5, r0
 8003004:	2800      	cmp	r0, #0
 8003006:	f040 808a 	bne.w	800311e <USBH_MTP_Process+0x144>
        MTP_Handle->state = MTP_GETDEVICEINFO;
 800300a:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 800300e:	2301      	movs	r3, #1
 8003010:	f886 3d38 	strb.w	r3, [r6, #3384]	@ 0xd38
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003014:	2105      	movs	r1, #5
 8003016:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800301a:	2200      	movs	r2, #0
 800301c:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8003020:	f001 fe15 	bl	8004c4e <osMessagePut>
 8003024:	e07b      	b.n	800311e <USBH_MTP_Process+0x144>
      status = USBH_PTP_GetDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 8003026:	4631      	mov	r1, r6
 8003028:	f000 fcd7 	bl	80039da <USBH_PTP_GetDeviceInfo>
      if (status == USBH_OK)
 800302c:	4605      	mov	r5, r0
 800302e:	2800      	cmp	r0, #0
 8003030:	d175      	bne.n	800311e <USBH_MTP_Process+0x144>
        MTP_Handle->state = MTP_GETSTORAGEIDS;
 8003032:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8003036:	2304      	movs	r3, #4
 8003038:	f886 3d38 	strb.w	r3, [r6, #3384]	@ 0xd38
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800303c:	2105      	movs	r1, #5
 800303e:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003042:	2200      	movs	r2, #0
 8003044:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8003048:	f001 fe01 	bl	8004c4e <osMessagePut>
 800304c:	e067      	b.n	800311e <USBH_MTP_Process+0x144>
      status = USBH_PTP_GetStorageIds(phost, &(MTP_Handle->info.storids));
 800304e:	f606 1104 	addw	r1, r6, #2308	@ 0x904
 8003052:	f000 fd15 	bl	8003a80 <USBH_PTP_GetStorageIds>
      if (status == USBH_OK)
 8003056:	4605      	mov	r5, r0
 8003058:	2800      	cmp	r0, #0
 800305a:	d160      	bne.n	800311e <USBH_MTP_Process+0x144>
        for (idx  = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 800305c:	2300      	movs	r3, #0
 800305e:	e000      	b.n	8003062 <USBH_MTP_Process+0x88>
 8003060:	3301      	adds	r3, #1
 8003062:	f8d6 2904 	ldr.w	r2, [r6, #2308]	@ 0x904
 8003066:	429a      	cmp	r2, r3
 8003068:	d8fa      	bhi.n	8003060 <USBH_MTP_Process+0x86>
        MTP_Handle->current_storage_unit = 0U;
 800306a:	f506 5300 	add.w	r3, r6, #8192	@ 0x2000
 800306e:	2200      	movs	r2, #0
 8003070:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
        MTP_Handle->state = MTP_GETSTORAGEINFO;
 8003074:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8003078:	2105      	movs	r1, #5
 800307a:	f886 1d38 	strb.w	r1, [r6, #3384]	@ 0xd38
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800307e:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003082:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8003086:	f001 fde2 	bl	8004c4e <osMessagePut>
 800308a:	e048      	b.n	800311e <USBH_MTP_Process+0x144>
                                       MTP_Handle->info.storids.Storage[MTP_Handle->current_storage_unit],
 800308c:	f506 5300 	add.w	r3, r6, #8192	@ 0x2000
 8003090:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
      status = USBH_PTP_GetStorageInfo(phost,
 8003094:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8003098:	0152      	lsls	r2, r2, #5
 800309a:	f502 6212 	add.w	r2, r2, #2336	@ 0x920
 800309e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80030a2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80030a6:	4432      	add	r2, r6
 80030a8:	6899      	ldr	r1, [r3, #8]
 80030aa:	f000 fd3c 	bl	8003b26 <USBH_PTP_GetStorageInfo>
      if (status == USBH_OK)
 80030ae:	4605      	mov	r5, r0
 80030b0:	bba8      	cbnz	r0, 800311e <USBH_MTP_Process+0x144>
        if (++MTP_Handle->current_storage_unit >= MTP_Handle->info.storids.n)
 80030b2:	f506 5200 	add.w	r2, r6, #8192	@ 0x2000
 80030b6:	f8d2 31c8 	ldr.w	r3, [r2, #456]	@ 0x1c8
 80030ba:	3301      	adds	r3, #1
 80030bc:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
 80030c0:	f8d6 2904 	ldr.w	r2, [r6, #2308]	@ 0x904
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d314      	bcc.n	80030f2 <USBH_MTP_Process+0x118>
          MTP_Handle->state = MTP_IDLE;
 80030c8:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 80030cc:	2100      	movs	r1, #0
 80030ce:	f883 1d38 	strb.w	r1, [r3, #3384]	@ 0xd38
          MTP_Handle->is_ready = 1U;
 80030d2:	f506 5200 	add.w	r2, r6, #8192	@ 0x2000
 80030d6:	2001      	movs	r0, #1
 80030d8:	f8c2 01cc 	str.w	r0, [r2, #460]	@ 0x1cc
          MTP_Handle->current_storage_unit = 0U;
 80030dc:	f8c2 11c8 	str.w	r1, [r2, #456]	@ 0x1c8
          MTP_Handle->params.CurrentStorageId = MTP_Handle->info.storids.Storage[0];
 80030e0:	f8d6 2908 	ldr.w	r2, [r6, #2312]	@ 0x908
 80030e4:	f8c3 2d18 	str.w	r2, [r3, #3352]	@ 0xd18
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80030e8:	f8d4 33d4 	ldr.w	r3, [r4, #980]	@ 0x3d4
 80030ec:	2102      	movs	r1, #2
 80030ee:	4620      	mov	r0, r4
 80030f0:	4798      	blx	r3
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80030f2:	2105      	movs	r1, #5
 80030f4:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80030f8:	2200      	movs	r2, #0
 80030fa:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 80030fe:	f001 fda6 	bl	8004c4e <osMessagePut>
 8003102:	e00c      	b.n	800311e <USBH_MTP_Process+0x144>
      USBH_MTP_Events(phost);
 8003104:	f7ff ff1b 	bl	8002f3e <USBH_MTP_Events>
      osDelay(10U);
 8003108:	200a      	movs	r0, #10
 800310a:	f001 fd84 	bl	8004c16 <osDelay>
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800310e:	2105      	movs	r1, #5
 8003110:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003114:	2200      	movs	r2, #0
 8003116:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 800311a:	f001 fd98 	bl	8004c4e <osMessagePut>
}
 800311e:	4628      	mov	r0, r5
 8003120:	bd70      	pop	{r4, r5, r6, pc}
  switch (MTP_Handle->state)
 8003122:	2501      	movs	r5, #1
 8003124:	e7fb      	b.n	800311e <USBH_MTP_Process+0x144>

08003126 <PTP_GetString>:
static void PTP_GetString(uint8_t *str, uint8_t *data, uint16_t *len)
{
  uint16_t strlength;
  uint16_t idx;

  *len = data[0];
 8003126:	780b      	ldrb	r3, [r1, #0]
 8003128:	8013      	strh	r3, [r2, #0]
  strlength = (uint16_t)(2U * (uint32_t)data[0]);
 800312a:	f891 c000 	ldrb.w	ip, [r1]
 800312e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  data ++; /* Adjust the offset ignoring the String Len */

  for (idx = 0U; idx < strlength; idx += 2U)
 8003132:	2300      	movs	r3, #0
 8003134:	e005      	b.n	8003142 <PTP_GetString+0x1c>
  {
    /* Copy Only the string and ignore the UNICODE ID, hence add the src */
    *str = data[idx];
 8003136:	18ca      	adds	r2, r1, r3
 8003138:	7852      	ldrb	r2, [r2, #1]
 800313a:	f800 2b01 	strb.w	r2, [r0], #1
  for (idx = 0U; idx < strlength; idx += 2U)
 800313e:	3302      	adds	r3, #2
 8003140:	b29b      	uxth	r3, r3
 8003142:	4563      	cmp	r3, ip
 8003144:	d3f7      	bcc.n	8003136 <PTP_GetString+0x10>
    str++;
  }
  *str = 0U; /* mark end of string */
 8003146:	2300      	movs	r3, #0
 8003148:	7003      	strb	r3, [r0, #0]
}
 800314a:	4770      	bx	lr

0800314c <PTP_GetStorageInfo>:
{
 800314c:	b530      	push	{r4, r5, lr}
 800314e:	b083      	sub	sp, #12
 8003150:	4614      	mov	r4, r2
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003152:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8003156:	69d9      	ldr	r1, [r3, #28]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 8003158:	f501 55ec 	add.w	r5, r1, #7552	@ 0x1d80
 800315c:	3510      	adds	r5, #16
  stor_info->StorageType = LE16(&data[PTP_si_StorageType]);
 800315e:	f501 5380 	add.w	r3, r1, #4096	@ 0x1000
 8003162:	f893 2d90 	ldrb.w	r2, [r3, #3472]	@ 0xd90
 8003166:	f893 0d91 	ldrb.w	r0, [r3, #3473]	@ 0xd91
 800316a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800316e:	8022      	strh	r2, [r4, #0]
  stor_info->FilesystemType = LE16(&data[PTP_si_FilesystemType]);
 8003170:	f893 2d92 	ldrb.w	r2, [r3, #3474]	@ 0xd92
 8003174:	f893 0d93 	ldrb.w	r0, [r3, #3475]	@ 0xd93
 8003178:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800317c:	8062      	strh	r2, [r4, #2]
  stor_info->AccessCapability = LE16(&data[PTP_si_AccessCapability]);
 800317e:	f893 2d94 	ldrb.w	r2, [r3, #3476]	@ 0xd94
 8003182:	f893 0d95 	ldrb.w	r0, [r3, #3477]	@ 0xd95
 8003186:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800318a:	80a2      	strh	r2, [r4, #4]
  stor_info->MaxCapability = LE64(&data[PTP_si_MaxCapability]);
 800318c:	f893 0d96 	ldrb.w	r0, [r3, #3478]	@ 0xd96
 8003190:	f893 2d97 	ldrb.w	r2, [r3, #3479]	@ 0xd97
 8003194:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8003198:	f893 2d98 	ldrb.w	r2, [r3, #3480]	@ 0xd98
 800319c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80031a0:	f893 2d99 	ldrb.w	r2, [r3, #3481]	@ 0xd99
 80031a4:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80031a8:	f893 2d9a 	ldrb.w	r2, [r3, #3482]	@ 0xd9a
 80031ac:	f893 cd9b 	ldrb.w	ip, [r3, #3483]	@ 0xd9b
 80031b0:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80031b4:	f893 cd9c 	ldrb.w	ip, [r3, #3484]	@ 0xd9c
 80031b8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80031bc:	f893 cd9d 	ldrb.w	ip, [r3, #3485]	@ 0xd9d
 80031c0:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 80031c4:	60a0      	str	r0, [r4, #8]
 80031c6:	60e2      	str	r2, [r4, #12]
  stor_info->FreeSpaceInBytes = LE64(&data[PTP_si_FreeSpaceInBytes]);
 80031c8:	f893 0d9e 	ldrb.w	r0, [r3, #3486]	@ 0xd9e
 80031cc:	f893 2d9f 	ldrb.w	r2, [r3, #3487]	@ 0xd9f
 80031d0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80031d4:	f893 2da0 	ldrb.w	r2, [r3, #3488]	@ 0xda0
 80031d8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80031dc:	f893 2da1 	ldrb.w	r2, [r3, #3489]	@ 0xda1
 80031e0:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80031e4:	f893 2da2 	ldrb.w	r2, [r3, #3490]	@ 0xda2
 80031e8:	f893 cda3 	ldrb.w	ip, [r3, #3491]	@ 0xda3
 80031ec:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80031f0:	f893 cda4 	ldrb.w	ip, [r3, #3492]	@ 0xda4
 80031f4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80031f8:	f893 cda5 	ldrb.w	ip, [r3, #3493]	@ 0xda5
 80031fc:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 8003200:	6120      	str	r0, [r4, #16]
 8003202:	6162      	str	r2, [r4, #20]
  stor_info->FreeSpaceInImages = LE32(&data[PTP_si_FreeSpaceInImages]);
 8003204:	f893 2da6 	ldrb.w	r2, [r3, #3494]	@ 0xda6
 8003208:	f893 0da7 	ldrb.w	r0, [r3, #3495]	@ 0xda7
 800320c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003210:	f893 0da8 	ldrb.w	r0, [r3, #3496]	@ 0xda8
 8003214:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003218:	f893 3da9 	ldrb.w	r3, [r3, #3497]	@ 0xda9
 800321c:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8003220:	61a3      	str	r3, [r4, #24]
  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 8003222:	f10d 0206 	add.w	r2, sp, #6
 8003226:	f501 51ed 	add.w	r1, r1, #7584	@ 0x1da0
 800322a:	310a      	adds	r1, #10
 800322c:	f104 001c 	add.w	r0, r4, #28
 8003230:	f7ff ff79 	bl	8003126 <PTP_GetString>
  PTP_GetString(stor_info->VolumeLabel, &data[PTP_si_StorageDescription + len * 2U + 1U], &len);
 8003234:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8003238:	0049      	lsls	r1, r1, #1
 800323a:	311b      	adds	r1, #27
 800323c:	f10d 0206 	add.w	r2, sp, #6
 8003240:	4429      	add	r1, r5
 8003242:	f204 101b 	addw	r0, r4, #283	@ 0x11b
 8003246:	f7ff ff6e 	bl	8003126 <PTP_GetString>
}
 800324a:	b003      	add	sp, #12
 800324c:	bd30      	pop	{r4, r5, pc}

0800324e <PTP_GetArray16>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray16(uint16_t *array, uint8_t *data, uint32_t offset)
{
 800324e:	b500      	push	{lr}
 8003250:	4686      	mov	lr, r0
  uint32_t size, idx = 0U;

  size = LE32(&data[offset]);
 8003252:	5c8b      	ldrb	r3, [r1, r2]
 8003254:	1888      	adds	r0, r1, r2
 8003256:	f890 c001 	ldrb.w	ip, [r0, #1]
 800325a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800325e:	f890 c002 	ldrb.w	ip, [r0, #2]
 8003262:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8003266:	78c0      	ldrb	r0, [r0, #3]
 8003268:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  uint32_t size, idx = 0U;
 800326c:	2300      	movs	r3, #0
  while (size > idx)
 800326e:	e008      	b.n	8003282 <PTP_GetArray16+0x34>
  {
    array[idx] = (uint16_t)data[offset + (sizeof(uint16_t) * (idx + 2U))];
 8003270:	f103 0c02 	add.w	ip, r3, #2
 8003274:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8003278:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800327c:	f82e c013 	strh.w	ip, [lr, r3, lsl #1]
    idx++;
 8003280:	3301      	adds	r3, #1
  while (size > idx)
 8003282:	4283      	cmp	r3, r0
 8003284:	d3f4      	bcc.n	8003270 <PTP_GetArray16+0x22>
  }
  return size;
}
 8003286:	f85d fb04 	ldr.w	pc, [sp], #4

0800328a <PTP_DecodeDeviceInfo>:
{
 800328a:	b570      	push	{r4, r5, r6, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	460c      	mov	r4, r1
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003290:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8003294:	69d9      	ldr	r1, [r3, #28]
  if (MTP_Handle->ptp.iteration == 0U)
 8003296:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
 800329a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800329e:	b10b      	cbz	r3, 80032a4 <PTP_DecodeDeviceInfo+0x1a>
}
 80032a0:	b002      	add	sp, #8
 80032a2:	bd70      	pop	{r4, r5, r6, pc}
 80032a4:	f501 55ec 	add.w	r5, r1, #7552	@ 0x1d80
 80032a8:	3510      	adds	r5, #16
    dev_info->StandardVersion = LE16(&data[PTP_di_StandardVersion]);
 80032aa:	f501 5380 	add.w	r3, r1, #4096	@ 0x1000
 80032ae:	f893 2d90 	ldrb.w	r2, [r3, #3472]	@ 0xd90
 80032b2:	f893 0d91 	ldrb.w	r0, [r3, #3473]	@ 0xd91
 80032b6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80032ba:	8022      	strh	r2, [r4, #0]
    dev_info->VendorExtensionID = LE32(&data[PTP_di_VendorExtensionID]);
 80032bc:	f893 2d92 	ldrb.w	r2, [r3, #3474]	@ 0xd92
 80032c0:	f893 0d93 	ldrb.w	r0, [r3, #3475]	@ 0xd93
 80032c4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80032c8:	f893 0d94 	ldrb.w	r0, [r3, #3476]	@ 0xd94
 80032cc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80032d0:	f893 0d95 	ldrb.w	r0, [r3, #3477]	@ 0xd95
 80032d4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80032d8:	6062      	str	r2, [r4, #4]
    dev_info->VendorExtensionVersion = LE16(&data[PTP_di_VendorExtensionVersion]);
 80032da:	f893 2d96 	ldrb.w	r2, [r3, #3478]	@ 0xd96
 80032de:	f893 3d97 	ldrb.w	r3, [r3, #3479]	@ 0xd97
 80032e2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80032e6:	8123      	strh	r3, [r4, #8]
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 80032e8:	f10d 0206 	add.w	r2, sp, #6
 80032ec:	f501 51ec 	add.w	r1, r1, #7552	@ 0x1d80
 80032f0:	3118      	adds	r1, #24
 80032f2:	f104 000a 	add.w	r0, r4, #10
 80032f6:	f7ff ff16 	bl	8003126 <PTP_GetString>
    totallen = len * 2U + 1U;
 80032fa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80032fe:	0052      	lsls	r2, r2, #1
 8003300:	1c56      	adds	r6, r2, #1
    dev_info->FunctionalMode = LE16(&data[PTP_di_FunctionalMode + totallen]);
 8003302:	f102 0309 	add.w	r3, r2, #9
 8003306:	5ceb      	ldrb	r3, [r5, r3]
 8003308:	18a9      	adds	r1, r5, r2
 800330a:	7a89      	ldrb	r1, [r1, #10]
 800330c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003310:	f8a4 310a 	strh.w	r3, [r4, #266]	@ 0x10a
    dev_info->OperationsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->OperationsSupported,
 8003314:	320b      	adds	r2, #11
 8003316:	4629      	mov	r1, r5
 8003318:	f504 7088 	add.w	r0, r4, #272	@ 0x110
 800331c:	f7ff ff97 	bl	800324e <PTP_GetArray16>
 8003320:	f8c4 010c 	str.w	r0, [r4, #268]	@ 0x10c
    totallen = totallen + dev_info->OperationsSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 8003324:	eb06 0240 	add.w	r2, r6, r0, lsl #1
 8003328:	1d16      	adds	r6, r2, #4
    dev_info->EventsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->EventsSupported,
 800332a:	320e      	adds	r2, #14
 800332c:	4629      	mov	r1, r5
 800332e:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 8003332:	f7ff ff8c 	bl	800324e <PTP_GetArray16>
 8003336:	f8c4 01d8 	str.w	r0, [r4, #472]	@ 0x1d8
    totallen = totallen + dev_info->EventsSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 800333a:	eb06 0240 	add.w	r2, r6, r0, lsl #1
 800333e:	1d16      	adds	r6, r2, #4
    dev_info->DevicePropertiesSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->DevicePropertiesSupported,
 8003340:	320e      	adds	r2, #14
 8003342:	4629      	mov	r1, r5
 8003344:	f504 702a 	add.w	r0, r4, #680	@ 0x2a8
 8003348:	f7ff ff81 	bl	800324e <PTP_GetArray16>
 800334c:	f8c4 02a4 	str.w	r0, [r4, #676]	@ 0x2a4
    totallen = totallen + dev_info->DevicePropertiesSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 8003350:	eb06 0240 	add.w	r2, r6, r0, lsl #1
 8003354:	1d16      	adds	r6, r2, #4
    dev_info->CaptureFormats_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->CaptureFormats,
 8003356:	320e      	adds	r2, #14
 8003358:	4629      	mov	r1, r5
 800335a:	f504 705d 	add.w	r0, r4, #884	@ 0x374
 800335e:	f7ff ff76 	bl	800324e <PTP_GetArray16>
 8003362:	f8c4 0370 	str.w	r0, [r4, #880]	@ 0x370
    totallen = totallen + dev_info->CaptureFormats_len * sizeof(uint16_t) + sizeof(uint32_t);
 8003366:	eb06 0240 	add.w	r2, r6, r0, lsl #1
 800336a:	1d16      	adds	r6, r2, #4
    dev_info->ImageFormats_len =  PTP_GetArray16((uint16_t *)(void *)&dev_info->ImageFormats,
 800336c:	320e      	adds	r2, #14
 800336e:	4629      	mov	r1, r5
 8003370:	f504 6088 	add.w	r0, r4, #1088	@ 0x440
 8003374:	f7ff ff6b 	bl	800324e <PTP_GetArray16>
 8003378:	f8c4 043c 	str.w	r0, [r4, #1084]	@ 0x43c
    totallen = totallen + dev_info->ImageFormats_len * sizeof(uint16_t) + sizeof(uint32_t);
 800337c:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8003380:	1d06      	adds	r6, r0, #4
    PTP_GetString(dev_info->Manufacturer, &data[PTP_di_OperationsSupported + totallen], &len);
 8003382:	f100 010e 	add.w	r1, r0, #14
 8003386:	f10d 0206 	add.w	r2, sp, #6
 800338a:	4429      	add	r1, r5
 800338c:	f504 60a1 	add.w	r0, r4, #1288	@ 0x508
 8003390:	f7ff fec9 	bl	8003126 <PTP_GetString>
    totallen += len * 2U + 1U;
 8003394:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003398:	eb06 0143 	add.w	r1, r6, r3, lsl #1
 800339c:	1c4e      	adds	r6, r1, #1
    PTP_GetString(dev_info->Model, &data[PTP_di_OperationsSupported + totallen], &len);
 800339e:	310b      	adds	r1, #11
 80033a0:	f10d 0206 	add.w	r2, sp, #6
 80033a4:	4429      	add	r1, r5
 80033a6:	f204 6007 	addw	r0, r4, #1543	@ 0x607
 80033aa:	f7ff febc 	bl	8003126 <PTP_GetString>
    totallen += len * 2U + 1U;
 80033ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80033b2:	eb06 0143 	add.w	r1, r6, r3, lsl #1
 80033b6:	1c4e      	adds	r6, r1, #1
    PTP_GetString(dev_info->DeviceVersion, &data[PTP_di_OperationsSupported + totallen], &len);
 80033b8:	310b      	adds	r1, #11
 80033ba:	f10d 0206 	add.w	r2, sp, #6
 80033be:	4429      	add	r1, r5
 80033c0:	f204 7006 	addw	r0, r4, #1798	@ 0x706
 80033c4:	f7ff feaf 	bl	8003126 <PTP_GetString>
    totallen += len * 2U + 1U;
 80033c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80033cc:	eb06 0143 	add.w	r1, r6, r3, lsl #1
    PTP_GetString(dev_info->SerialNumber, &data[PTP_di_OperationsSupported + totallen], &len);
 80033d0:	310b      	adds	r1, #11
 80033d2:	f10d 0206 	add.w	r2, sp, #6
 80033d6:	4429      	add	r1, r5
 80033d8:	f604 0005 	addw	r0, r4, #2053	@ 0x805
 80033dc:	f7ff fea3 	bl	8003126 <PTP_GetString>
}
 80033e0:	e75e      	b.n	80032a0 <PTP_DecodeDeviceInfo+0x16>

080033e2 <PTP_GetArray32>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray32(uint32_t *array, uint8_t *data, uint32_t offset)
{
 80033e2:	b570      	push	{r4, r5, r6, lr}
 80033e4:	4605      	mov	r5, r0
  uint32_t size, idx = 0U;

  size = LE32(&data[offset]);
 80033e6:	5c88      	ldrb	r0, [r1, r2]
 80033e8:	188b      	adds	r3, r1, r2
 80033ea:	785c      	ldrb	r4, [r3, #1]
 80033ec:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80033f0:	789c      	ldrb	r4, [r3, #2]
 80033f2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80033f6:	78db      	ldrb	r3, [r3, #3]
 80033f8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  uint32_t size, idx = 0U;
 80033fc:	f04f 0e00 	mov.w	lr, #0
  while (size > idx)
 8003400:	e015      	b.n	800342e <PTP_GetArray32+0x4c>
  {
    array[idx] = LE32(&data[offset + (sizeof(uint32_t) * (idx + 1U))]);
 8003402:	f10e 0401 	add.w	r4, lr, #1
 8003406:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 800340a:	f811 300c 	ldrb.w	r3, [r1, ip]
 800340e:	448c      	add	ip, r1
 8003410:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8003414:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8003418:	f89c 6002 	ldrb.w	r6, [ip, #2]
 800341c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8003420:	f89c c003 	ldrb.w	ip, [ip, #3]
 8003424:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8003428:	f845 302e 	str.w	r3, [r5, lr, lsl #2]
    idx++;
 800342c:	46a6      	mov	lr, r4
  while (size > idx)
 800342e:	4586      	cmp	lr, r0
 8003430:	d3e7      	bcc.n	8003402 <PTP_GetArray32+0x20>
  }
  return size;
}
 8003432:	bd70      	pop	{r4, r5, r6, pc}

08003434 <PTP_GetStorageIDs>:
{
 8003434:	b510      	push	{r4, lr}
 8003436:	460c      	mov	r4, r1
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003438:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 800343c:	69d9      	ldr	r1, [r3, #28]
  stor_ids->n = PTP_GetArray32(stor_ids->Storage, data, 0U);
 800343e:	2200      	movs	r2, #0
 8003440:	f501 51ec 	add.w	r1, r1, #7552	@ 0x1d80
 8003444:	3110      	adds	r1, #16
 8003446:	1d20      	adds	r0, r4, #4
 8003448:	f7ff ffcb 	bl	80033e2 <PTP_GetArray32>
 800344c:	6020      	str	r0, [r4, #0]
}
 800344e:	bd10      	pop	{r4, pc}

08003450 <PTP_BufferFullCallback>:
{
 8003450:	b510      	push	{r4, lr}
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003452:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8003456:	69d9      	ldr	r1, [r3, #28]
  switch (MTP_Handle->ptp.data_container.code)
 8003458:	f501 5380 	add.w	r3, r1, #4096	@ 0x1000
 800345c:	f8b3 3d8a 	ldrh.w	r3, [r3, #3466]	@ 0xd8a
 8003460:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8003464:	3b01      	subs	r3, #1
 8003466:	2b1a      	cmp	r3, #26
 8003468:	d811      	bhi.n	800348e <PTP_BufferFullCallback+0x3e>
 800346a:	e8df f003 	tbb	[pc, r3]
 800346e:	100e      	.short	0x100e
 8003470:	10101010 	.word	0x10101010
 8003474:	10111010 	.word	0x10111010
 8003478:	10291010 	.word	0x10291010
 800347c:	10101010 	.word	0x10101010
 8003480:	10101010 	.word	0x10101010
 8003484:	10101010 	.word	0x10101010
 8003488:	11          	.byte	0x11
 8003489:	00          	.byte	0x00
      PTP_DecodeDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 800348a:	f7ff fefe 	bl	800328a <PTP_DecodeDeviceInfo>
}
 800348e:	bd10      	pop	{r4, pc}
      if (MTP_Handle->ptp.iteration == 0U)
 8003490:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
 8003494:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f8      	bne.n	800348e <PTP_BufferFullCallback+0x3e>
        USBH_memcpy(MTP_Handle->ptp.object_ptr, MTP_Handle->ptp.data_container.payload.data, PTP_USB_BULK_PAYLOAD_LEN_READ);
 800349c:	f501 5400 	add.w	r4, r1, #8192	@ 0x2000
 80034a0:	f44f 727d 	mov.w	r2, #1012	@ 0x3f4
 80034a4:	f501 51ec 	add.w	r1, r1, #7552	@ 0x1d80
 80034a8:	3110      	adds	r1, #16
 80034aa:	f8d4 01c4 	ldr.w	r0, [r4, #452]	@ 0x1c4
 80034ae:	f003 fabb 	bl	8006a28 <memcpy>
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 80034b2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	@ 0x1c4
 80034b6:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 80034ba:	f8c4 31b0 	str.w	r3, [r4, #432]	@ 0x1b0
 80034be:	e7e6      	b.n	800348e <PTP_BufferFullCallback+0x3e>
      if (MTP_Handle->ptp.iteration == 0U)
 80034c0:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
 80034c4:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e0      	bne.n	800348e <PTP_BufferFullCallback+0x3e>
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 80034cc:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 80034d0:	f8d1 31c4 	ldr.w	r3, [r1, #452]	@ 0x1c4
 80034d4:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 80034d8:	f8c1 31b0 	str.w	r3, [r1, #432]	@ 0x1b0
}
 80034dc:	e7d7      	b.n	800348e <PTP_BufferFullCallback+0x3e>

080034de <USBH_PTP_Init>:
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80034de:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 80034e2:	69db      	ldr	r3, [r3, #28]
  MTP_Handle->ptp.state = PTP_IDLE;
 80034e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034e8:	2000      	movs	r0, #0
 80034ea:	f883 0d60 	strb.w	r0, [r3, #3424]	@ 0xd60
  MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
}
 80034f4:	4770      	bx	lr

080034f6 <USBH_PTP_SendRequest>:
{
 80034f6:	b538      	push	{r3, r4, r5, lr}
 80034f8:	460d      	mov	r5, r1
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80034fa:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 80034fe:	69dc      	ldr	r4, [r3, #28]
  USBH_memset(&(MTP_Handle->ptp.op_container), 0, sizeof(PTP_OpContainerTypedef));
 8003500:	2220      	movs	r2, #32
 8003502:	2100      	movs	r1, #0
 8003504:	f504 50eb 	add.w	r0, r4, #7520	@ 0x1d60
 8003508:	3004      	adds	r0, #4
 800350a:	f003 f9eb 	bl	80068e4 <memset>
  MTP_Handle->ptp.op_container.length = PTP_USB_BULK_REQ_LEN - (sizeof(uint32_t) * (5U - req->Nparam));
 800350e:	f895 2020 	ldrb.w	r2, [r5, #32]
 8003512:	3203      	adds	r2, #3
 8003514:	0092      	lsls	r2, r2, #2
 8003516:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800351a:	f8c3 2d64 	str.w	r2, [r3, #3428]	@ 0xd64
  MTP_Handle->ptp.op_container.type = PTP_USB_CONTAINER_COMMAND;
 800351e:	2201      	movs	r2, #1
 8003520:	f8a3 2d68 	strh.w	r2, [r3, #3432]	@ 0xd68
  MTP_Handle->ptp.op_container.code = req->Code;
 8003524:	882a      	ldrh	r2, [r5, #0]
 8003526:	f8a3 2d6a 	strh.w	r2, [r3, #3434]	@ 0xd6a
  MTP_Handle->ptp.op_container.trans_id = req->Transaction_ID;
 800352a:	68aa      	ldr	r2, [r5, #8]
 800352c:	f8c3 2d6c 	str.w	r2, [r3, #3436]	@ 0xd6c
  MTP_Handle->ptp.op_container.param1 = req->Param1;
 8003530:	68ea      	ldr	r2, [r5, #12]
 8003532:	f8c3 2d70 	str.w	r2, [r3, #3440]	@ 0xd70
  MTP_Handle->ptp.op_container.param2 = req->Param2;
 8003536:	692a      	ldr	r2, [r5, #16]
 8003538:	f8c3 2d74 	str.w	r2, [r3, #3444]	@ 0xd74
  MTP_Handle->ptp.op_container.param3 = req->Param3;
 800353c:	696a      	ldr	r2, [r5, #20]
 800353e:	f8c3 2d78 	str.w	r2, [r3, #3448]	@ 0xd78
  MTP_Handle->ptp.op_container.param4 = req->Param4;
 8003542:	69aa      	ldr	r2, [r5, #24]
 8003544:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c
  MTP_Handle->ptp.op_container.param5 = req->Param5;
 8003548:	69ea      	ldr	r2, [r5, #28]
 800354a:	f8c3 2d80 	str.w	r2, [r3, #3456]	@ 0xd80
}
 800354e:	2000      	movs	r0, #0
 8003550:	bd38      	pop	{r3, r4, r5, pc}

08003552 <USBH_PTP_GetResponse>:
  MTP_HandleTypeDef  *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003552:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8003556:	69db      	ldr	r3, [r3, #28]
  resp->Code = MTP_Handle->ptp.resp_container.code;
 8003558:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800355c:	f8b3 218a 	ldrh.w	r2, [r3, #394]	@ 0x18a
 8003560:	800a      	strh	r2, [r1, #0]
  resp->SessionID = MTP_Handle->ptp.session_id;
 8003562:	f8d3 21a8 	ldr.w	r2, [r3, #424]	@ 0x1a8
 8003566:	604a      	str	r2, [r1, #4]
  resp->Transaction_ID = MTP_Handle->ptp.resp_container.trans_id;
 8003568:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 800356c:	608a      	str	r2, [r1, #8]
  resp->Param1 = MTP_Handle->ptp.resp_container.param1;
 800356e:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8003572:	60ca      	str	r2, [r1, #12]
  resp->Param2 = MTP_Handle->ptp.resp_container.param2;
 8003574:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 8003578:	610a      	str	r2, [r1, #16]
  resp->Param3 = MTP_Handle->ptp.resp_container.param3;
 800357a:	f8d3 2198 	ldr.w	r2, [r3, #408]	@ 0x198
 800357e:	614a      	str	r2, [r1, #20]
  resp->Param4 = MTP_Handle->ptp.resp_container.param4;
 8003580:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 8003584:	618a      	str	r2, [r1, #24]
  resp->Param5 = MTP_Handle->ptp.resp_container.param5;
 8003586:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800358a:	61cb      	str	r3, [r1, #28]
}
 800358c:	2000      	movs	r0, #0
 800358e:	4770      	bx	lr

08003590 <USBH_PTP_Process>:
{
 8003590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003592:	b08d      	sub	sp, #52	@ 0x34
 8003594:	4605      	mov	r5, r0
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003596:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 800359a:	69de      	ldr	r6, [r3, #28]
  switch (MTP_Handle->ptp.state)
 800359c:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 80035a0:	f893 4d60 	ldrb.w	r4, [r3, #3424]	@ 0xd60
 80035a4:	1e63      	subs	r3, r4, #1
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	f200 81d4 	bhi.w	8003954 <USBH_PTP_Process+0x3c4>
 80035ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 80035b0:	001c0009 	.word	0x001c0009
 80035b4:	007d006b 	.word	0x007d006b
 80035b8:	010d00fc 	.word	0x010d00fc
 80035bc:	019e018f 	.word	0x019e018f
 80035c0:	01cc      	.short	0x01cc
                        (uint16_t)MTP_Handle->ptp.op_container.length,
 80035c2:	f506 5780 	add.w	r7, r6, #4096	@ 0x1000
      USBH_BulkSendData(phost,
 80035c6:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	@ 0xd2d
 80035ca:	f8b7 2d64 	ldrh.w	r2, [r7, #3428]	@ 0xd64
 80035ce:	2101      	movs	r1, #1
 80035d0:	9100      	str	r1, [sp, #0]
 80035d2:	f506 51eb 	add.w	r1, r6, #7520	@ 0x1d60
 80035d6:	3104      	adds	r1, #4
 80035d8:	f001 fa5d 	bl	8004a96 <USBH_BulkSendData>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_WAIT_STATE;
 80035dc:	2302      	movs	r3, #2
 80035de:	f887 3d60 	strb.w	r3, [r7, #3424]	@ 0xd60
}
 80035e2:	4620      	mov	r0, r4
 80035e4:	b00d      	add	sp, #52	@ 0x34
 80035e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 80035e8:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 80035ec:	f893 1d2d 	ldrb.w	r1, [r3, #3373]	@ 0xd2d
 80035f0:	f003 f82c 	bl	800664c <USBH_LL_GetURBState>
 80035f4:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 80035f6:	2801      	cmp	r0, #1
 80035f8:	d005      	beq.n	8003606 <USBH_PTP_Process+0x76>
      else if (URB_Status == USBH_URB_NOTREADY)
 80035fa:	2802      	cmp	r0, #2
 80035fc:	d026      	beq.n	800364c <USBH_PTP_Process+0xbc>
      else if (URB_Status == USBH_URB_STALL)
 80035fe:	2805      	cmp	r0, #5
 8003600:	d032      	beq.n	8003668 <USBH_PTP_Process+0xd8>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8003602:	2401      	movs	r4, #1
 8003604:	e7ed      	b.n	80035e2 <USBH_PTP_Process+0x52>
        if (MTP_Handle->ptp.flags == PTP_DP_NODATA)
 8003606:	f506 5300 	add.w	r3, r6, #8192	@ 0x2000
 800360a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 800360e:	b96b      	cbnz	r3, 800362c <USBH_PTP_Process+0x9c>
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 8003610:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8003614:	2307      	movs	r3, #7
 8003616:	f886 3d60 	strb.w	r3, [r6, #3424]	@ 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800361a:	2102      	movs	r1, #2
 800361c:	f8c5 13e0 	str.w	r1, [r5, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003620:	2200      	movs	r2, #0
 8003622:	f8d5 03d8 	ldr.w	r0, [r5, #984]	@ 0x3d8
 8003626:	f001 fb12 	bl	8004c4e <osMessagePut>
 800362a:	e7da      	b.n	80035e2 <USBH_PTP_Process+0x52>
        else  if (MTP_Handle->ptp.flags == PTP_DP_SENDDATA)
 800362c:	2b01      	cmp	r3, #1
 800362e:	d007      	beq.n	8003640 <USBH_PTP_Process+0xb0>
        else  if (MTP_Handle->ptp.flags == PTP_DP_GETDATA)
 8003630:	2b02      	cmp	r3, #2
 8003632:	d1f2      	bne.n	800361a <USBH_PTP_Process+0x8a>
          MTP_Handle->ptp.state = PTP_DATA_IN_PHASE_STATE;
 8003634:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8003638:	2305      	movs	r3, #5
 800363a:	f886 3d60 	strb.w	r3, [r6, #3424]	@ 0xd60
 800363e:	e7ec      	b.n	800361a <USBH_PTP_Process+0x8a>
          MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 8003640:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8003644:	2303      	movs	r3, #3
 8003646:	f886 3d60 	strb.w	r3, [r6, #3424]	@ 0xd60
 800364a:	e7e6      	b.n	800361a <USBH_PTP_Process+0x8a>
        MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800364c:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8003650:	2401      	movs	r4, #1
 8003652:	f886 4d60 	strb.w	r4, [r6, #3424]	@ 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8003656:	2102      	movs	r1, #2
 8003658:	f8c5 13e0 	str.w	r1, [r5, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800365c:	2200      	movs	r2, #0
 800365e:	f8d5 03d8 	ldr.w	r0, [r5, #984]	@ 0x3d8
 8003662:	f001 faf4 	bl	8004c4e <osMessagePut>
 8003666:	e7bc      	b.n	80035e2 <USBH_PTP_Process+0x52>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8003668:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 800366c:	2309      	movs	r3, #9
 800366e:	f886 3d60 	strb.w	r3, [r6, #3424]	@ 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8003672:	2102      	movs	r1, #2
 8003674:	f8c5 13e0 	str.w	r1, [r5, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003678:	2200      	movs	r2, #0
 800367a:	f8d5 03d8 	ldr.w	r0, [r5, #984]	@ 0x3d8
 800367e:	f001 fae6 	bl	8004c4e <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8003682:	2401      	movs	r4, #1
 8003684:	e7ad      	b.n	80035e2 <USBH_PTP_Process+0x52>
      USBH_BulkSendData(phost,
 8003686:	f506 5780 	add.w	r7, r6, #4096	@ 0x1000
 800368a:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	@ 0xd2d
 800368e:	f8b7 2d32 	ldrh.w	r2, [r7, #3378]	@ 0xd32
 8003692:	f506 5600 	add.w	r6, r6, #8192	@ 0x2000
 8003696:	f8d6 11b0 	ldr.w	r1, [r6, #432]	@ 0x1b0
 800369a:	2401      	movs	r4, #1
 800369c:	9400      	str	r4, [sp, #0]
 800369e:	f001 f9fa 	bl	8004a96 <USBH_BulkSendData>
      MTP_Handle->ptp.state  = PTP_DATA_OUT_PHASE_WAIT_STATE;
 80036a2:	2304      	movs	r3, #4
 80036a4:	f887 3d60 	strb.w	r3, [r7, #3424]	@ 0xd60
      break;
 80036a8:	e79b      	b.n	80035e2 <USBH_PTP_Process+0x52>
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 80036aa:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 80036ae:	f893 1d2d 	ldrb.w	r1, [r3, #3373]	@ 0xd2d
 80036b2:	f002 ffcb 	bl	800664c <USBH_LL_GetURBState>
 80036b6:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 80036b8:	2801      	cmp	r0, #1
 80036ba:	d005      	beq.n	80036c8 <USBH_PTP_Process+0x138>
      else if (URB_Status == USBH_URB_NOTREADY)
 80036bc:	2802      	cmp	r0, #2
 80036be:	d055      	beq.n	800376c <USBH_PTP_Process+0x1dc>
      else if (URB_Status == USBH_URB_STALL)
 80036c0:	2805      	cmp	r0, #5
 80036c2:	d062      	beq.n	800378a <USBH_PTP_Process+0x1fa>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80036c4:	2401      	movs	r4, #1
 80036c6:	e78c      	b.n	80035e2 <USBH_PTP_Process+0x52>
        if (MTP_Handle->ptp.data_length > MTP_Handle->DataOutEpSize)
 80036c8:	f506 5300 	add.w	r3, r6, #8192	@ 0x2000
 80036cc:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 80036d0:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 80036d4:	f8b3 3d32 	ldrh.w	r3, [r3, #3378]	@ 0xd32
 80036d8:	429a      	cmp	r2, r3
 80036da:	d91f      	bls.n	800371c <USBH_PTP_Process+0x18c>
          MTP_Handle->ptp.data_ptr += MTP_Handle->DataOutEpSize;
 80036dc:	f506 5100 	add.w	r1, r6, #8192	@ 0x2000
 80036e0:	f8d1 01b0 	ldr.w	r0, [r1, #432]	@ 0x1b0
 80036e4:	4418      	add	r0, r3
 80036e6:	f8c1 01b0 	str.w	r0, [r1, #432]	@ 0x1b0
          MTP_Handle->ptp.data_length -= MTP_Handle->DataOutEpSize;
 80036ea:	1ad2      	subs	r2, r2, r3
 80036ec:	f8c1 21b4 	str.w	r2, [r1, #436]	@ 0x1b4
          MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 80036f0:	f8d1 21b8 	ldr.w	r2, [r1, #440]	@ 0x1b8
 80036f4:	4413      	add	r3, r2
 80036f6:	f8c1 31b8 	str.w	r3, [r1, #440]	@ 0x1b8
          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 80036fa:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80036fe:	d312      	bcc.n	8003726 <USBH_PTP_Process+0x196>
            PTP_BufferFullCallback(phost);
 8003700:	4628      	mov	r0, r5
 8003702:	f7ff fea5 	bl	8003450 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 8003706:	f506 5300 	add.w	r3, r6, #8192	@ 0x2000
 800370a:	2200      	movs	r2, #0
 800370c:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
            MTP_Handle->ptp.iteration++;
 8003710:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 8003714:	3201      	adds	r2, #1
 8003716:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
 800371a:	e004      	b.n	8003726 <USBH_PTP_Process+0x196>
          MTP_Handle->ptp.data_length = 0U;
 800371c:	f506 5300 	add.w	r3, r6, #8192	@ 0x2000
 8003720:	2200      	movs	r2, #0
 8003722:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
        if (MTP_Handle->ptp.data_length > 0U)
 8003726:	f506 5300 	add.w	r3, r6, #8192	@ 0x2000
 800372a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800372e:	b96b      	cbnz	r3, 800374c <USBH_PTP_Process+0x1bc>
          MTP_Handle->ptp.state  = PTP_RESPONSE_STATE;
 8003730:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8003734:	2307      	movs	r3, #7
 8003736:	f886 3d60 	strb.w	r3, [r6, #3424]	@ 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800373a:	2102      	movs	r1, #2
 800373c:	f8c5 13e0 	str.w	r1, [r5, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003740:	2200      	movs	r2, #0
 8003742:	f8d5 03d8 	ldr.w	r0, [r5, #984]	@ 0x3d8
 8003746:	f001 fa82 	bl	8004c4e <osMessagePut>
 800374a:	e74a      	b.n	80035e2 <USBH_PTP_Process+0x52>
          USBH_BulkSendData(phost,
 800374c:	f506 5280 	add.w	r2, r6, #4096	@ 0x1000
 8003750:	f892 3d2d 	ldrb.w	r3, [r2, #3373]	@ 0xd2d
 8003754:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	@ 0xd32
 8003758:	f506 5600 	add.w	r6, r6, #8192	@ 0x2000
 800375c:	f8d6 11b0 	ldr.w	r1, [r6, #432]	@ 0x1b0
 8003760:	2001      	movs	r0, #1
 8003762:	9000      	str	r0, [sp, #0]
 8003764:	4628      	mov	r0, r5
 8003766:	f001 f996 	bl	8004a96 <USBH_BulkSendData>
 800376a:	e7e6      	b.n	800373a <USBH_PTP_Process+0x1aa>
        MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 800376c:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8003770:	2303      	movs	r3, #3
 8003772:	f886 3d60 	strb.w	r3, [r6, #3424]	@ 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8003776:	2102      	movs	r1, #2
 8003778:	f8c5 13e0 	str.w	r1, [r5, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800377c:	2200      	movs	r2, #0
 800377e:	f8d5 03d8 	ldr.w	r0, [r5, #984]	@ 0x3d8
 8003782:	f001 fa64 	bl	8004c4e <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8003786:	2401      	movs	r4, #1
 8003788:	e72b      	b.n	80035e2 <USBH_PTP_Process+0x52>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800378a:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 800378e:	2309      	movs	r3, #9
 8003790:	f886 3d60 	strb.w	r3, [r6, #3424]	@ 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8003794:	2102      	movs	r1, #2
 8003796:	f8c5 13e0 	str.w	r1, [r5, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800379a:	2200      	movs	r2, #0
 800379c:	f8d5 03d8 	ldr.w	r0, [r5, #984]	@ 0x3d8
 80037a0:	f001 fa55 	bl	8004c4e <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80037a4:	2401      	movs	r4, #1
 80037a6:	e71c      	b.n	80035e2 <USBH_PTP_Process+0x52>
      USBH_BulkReceiveData(phost,
 80037a8:	f506 5480 	add.w	r4, r6, #4096	@ 0x1000
 80037ac:	f506 5600 	add.w	r6, r6, #8192	@ 0x2000
 80037b0:	f894 3d2c 	ldrb.w	r3, [r4, #3372]	@ 0xd2c
 80037b4:	f8b4 2d34 	ldrh.w	r2, [r4, #3380]	@ 0xd34
 80037b8:	f8d6 11b0 	ldr.w	r1, [r6, #432]	@ 0x1b0
 80037bc:	f001 f981 	bl	8004ac2 <USBH_BulkReceiveData>
      MTP_Handle->ptp.state  = PTP_DATA_IN_PHASE_WAIT_STATE;
 80037c0:	2306      	movs	r3, #6
 80037c2:	f884 3d60 	strb.w	r3, [r4, #3424]	@ 0xd60
  USBH_StatusTypeDef   status = USBH_BUSY;
 80037c6:	2401      	movs	r4, #1
      break;
 80037c8:	e70b      	b.n	80035e2 <USBH_PTP_Process+0x52>
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 80037ca:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 80037ce:	f893 1d2c 	ldrb.w	r1, [r3, #3372]	@ 0xd2c
 80037d2:	f002 ff3b 	bl	800664c <USBH_LL_GetURBState>
 80037d6:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 80037d8:	2801      	cmp	r0, #1
 80037da:	d003      	beq.n	80037e4 <USBH_PTP_Process+0x254>
      else if (URB_Status == USBH_URB_STALL)
 80037dc:	2805      	cmp	r0, #5
 80037de:	d067      	beq.n	80038b0 <USBH_PTP_Process+0x320>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80037e0:	2401      	movs	r4, #1
 80037e2:	e6fe      	b.n	80035e2 <USBH_PTP_Process+0x52>
        len = USBH_LL_GetLastXferSize(phost, MTP_Handle->DataInPipe);
 80037e4:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 80037e8:	f893 1d2c 	ldrb.w	r1, [r3, #3372]	@ 0xd2c
 80037ec:	4628      	mov	r0, r5
 80037ee:	f002 ff27 	bl	8006640 <USBH_LL_GetLastXferSize>
        if (MTP_Handle->ptp.data_packet_counter++ == 0U)
 80037f2:	f506 5200 	add.w	r2, r6, #8192	@ 0x2000
 80037f6:	f8d2 31c0 	ldr.w	r3, [r2, #448]	@ 0x1c0
 80037fa:	1c59      	adds	r1, r3, #1
 80037fc:	f8c2 11c0 	str.w	r1, [r2, #448]	@ 0x1c0
 8003800:	b943      	cbnz	r3, 8003814 <USBH_PTP_Process+0x284>
          MTP_Handle->ptp.data_length = *(uint32_t *)(void *)(MTP_Handle->ptp.data_ptr);
 8003802:	4613      	mov	r3, r2
 8003804:	f8d2 21b0 	ldr.w	r2, [r2, #432]	@ 0x1b0
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
          MTP_Handle->ptp.iteration = 0U;
 800380e:	2200      	movs	r2, #0
 8003810:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
        if ((len >=  MTP_Handle->DataInEpSize) && (MTP_Handle->ptp.data_length > 0U))
 8003814:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 8003818:	f8b3 3d34 	ldrh.w	r3, [r3, #3380]	@ 0xd34
 800381c:	4283      	cmp	r3, r0
 800381e:	d832      	bhi.n	8003886 <USBH_PTP_Process+0x2f6>
 8003820:	f506 5300 	add.w	r3, r6, #8192	@ 0x2000
 8003824:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8003828:	b36b      	cbz	r3, 8003886 <USBH_PTP_Process+0x2f6>
          MTP_Handle->ptp.data_ptr += len;
 800382a:	f506 5200 	add.w	r2, r6, #8192	@ 0x2000
 800382e:	f8d2 11b0 	ldr.w	r1, [r2, #432]	@ 0x1b0
 8003832:	4401      	add	r1, r0
 8003834:	f8c2 11b0 	str.w	r1, [r2, #432]	@ 0x1b0
          MTP_Handle->ptp.data_length -= len;
 8003838:	1a1b      	subs	r3, r3, r0
 800383a:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
          MTP_Handle->ptp.data_packet += len;
 800383e:	f8d2 31b8 	ldr.w	r3, [r2, #440]	@ 0x1b8
 8003842:	4403      	add	r3, r0
 8003844:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 8003848:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800384c:	d20d      	bcs.n	800386a <USBH_PTP_Process+0x2da>
          USBH_BulkReceiveData(phost,
 800384e:	f506 5280 	add.w	r2, r6, #4096	@ 0x1000
 8003852:	f506 5600 	add.w	r6, r6, #8192	@ 0x2000
 8003856:	f892 3d2c 	ldrb.w	r3, [r2, #3372]	@ 0xd2c
 800385a:	f8b2 2d34 	ldrh.w	r2, [r2, #3380]	@ 0xd34
 800385e:	f8d6 11b0 	ldr.w	r1, [r6, #432]	@ 0x1b0
 8003862:	4628      	mov	r0, r5
 8003864:	f001 f92d 	bl	8004ac2 <USBH_BulkReceiveData>
 8003868:	e6bb      	b.n	80035e2 <USBH_PTP_Process+0x52>
            PTP_BufferFullCallback(phost);
 800386a:	4628      	mov	r0, r5
 800386c:	f7ff fdf0 	bl	8003450 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 8003870:	f506 5300 	add.w	r3, r6, #8192	@ 0x2000
 8003874:	2200      	movs	r2, #0
 8003876:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
            MTP_Handle->ptp.iteration++;
 800387a:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 800387e:	3201      	adds	r2, #1
 8003880:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
 8003884:	e7e3      	b.n	800384e <USBH_PTP_Process+0x2be>
          MTP_Handle->ptp.data_length -= len;
 8003886:	f506 5200 	add.w	r2, r6, #8192	@ 0x2000
 800388a:	f8d2 31b4 	ldr.w	r3, [r2, #436]	@ 0x1b4
 800388e:	1a1b      	subs	r3, r3, r0
 8003890:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 8003894:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8003898:	2307      	movs	r3, #7
 800389a:	f886 3d60 	strb.w	r3, [r6, #3424]	@ 0xd60
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800389e:	2102      	movs	r1, #2
 80038a0:	f8c5 13e0 	str.w	r1, [r5, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8d5 03d8 	ldr.w	r0, [r5, #984]	@ 0x3d8
 80038aa:	f001 f9d0 	bl	8004c4e <osMessagePut>
 80038ae:	e698      	b.n	80035e2 <USBH_PTP_Process+0x52>
        MTP_Handle->ptp.state  = PTP_ERROR;
 80038b0:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 80038b4:	2309      	movs	r3, #9
 80038b6:	f886 3d60 	strb.w	r3, [r6, #3424]	@ 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80038ba:	2102      	movs	r1, #2
 80038bc:	f8c5 13e0 	str.w	r1, [r5, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80038c0:	2200      	movs	r2, #0
 80038c2:	f8d5 03d8 	ldr.w	r0, [r5, #984]	@ 0x3d8
 80038c6:	f001 f9c2 	bl	8004c4e <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80038ca:	2401      	movs	r4, #1
 80038cc:	e689      	b.n	80035e2 <USBH_PTP_Process+0x52>
      USBH_BulkReceiveData(phost,
 80038ce:	f506 5480 	add.w	r4, r6, #4096	@ 0x1000
 80038d2:	f894 3d2c 	ldrb.w	r3, [r4, #3372]	@ 0xd2c
 80038d6:	223f      	movs	r2, #63	@ 0x3f
 80038d8:	f506 5106 	add.w	r1, r6, #8576	@ 0x2180
 80038dc:	3104      	adds	r1, #4
 80038de:	f001 f8f0 	bl	8004ac2 <USBH_BulkReceiveData>
      MTP_Handle->ptp.state  = PTP_RESPONSE_WAIT_STATE;
 80038e2:	2308      	movs	r3, #8
 80038e4:	f884 3d60 	strb.w	r3, [r4, #3424]	@ 0xd60
  USBH_StatusTypeDef   status = USBH_BUSY;
 80038e8:	2401      	movs	r4, #1
      break;
 80038ea:	e67a      	b.n	80035e2 <USBH_PTP_Process+0x52>
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 80038ec:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 80038f0:	f893 1d2c 	ldrb.w	r1, [r3, #3372]	@ 0xd2c
 80038f4:	f002 feaa 	bl	800664c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80038f8:	2801      	cmp	r0, #1
 80038fa:	d003      	beq.n	8003904 <USBH_PTP_Process+0x374>
      else if (URB_Status == USBH_URB_STALL)
 80038fc:	2805      	cmp	r0, #5
 80038fe:	d014      	beq.n	800392a <USBH_PTP_Process+0x39a>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8003900:	2401      	movs	r4, #1
 8003902:	e66e      	b.n	80035e2 <USBH_PTP_Process+0x52>
        USBH_PTP_GetResponse(phost, &ptp_container);
 8003904:	a903      	add	r1, sp, #12
 8003906:	4628      	mov	r0, r5
 8003908:	f7ff fe23 	bl	8003552 <USBH_PTP_GetResponse>
        if (ptp_container.Code == PTP_RC_OK)
 800390c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8003910:	f242 0301 	movw	r3, #8193	@ 0x2001
 8003914:	429a      	cmp	r2, r3
 8003916:	d006      	beq.n	8003926 <USBH_PTP_Process+0x396>
          status = USBH_FAIL;
 8003918:	2402      	movs	r4, #2
        MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800391a:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 800391e:	2301      	movs	r3, #1
 8003920:	f886 3d61 	strb.w	r3, [r6, #3425]	@ 0xd61
 8003924:	e65d      	b.n	80035e2 <USBH_PTP_Process+0x52>
          status = USBH_OK;
 8003926:	2400      	movs	r4, #0
 8003928:	e7f7      	b.n	800391a <USBH_PTP_Process+0x38a>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800392a:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 800392e:	2309      	movs	r3, #9
 8003930:	f886 3d60 	strb.w	r3, [r6, #3424]	@ 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8003934:	2102      	movs	r1, #2
 8003936:	f8c5 13e0 	str.w	r1, [r5, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800393a:	2200      	movs	r2, #0
 800393c:	f8d5 03d8 	ldr.w	r0, [r5, #984]	@ 0x3d8
 8003940:	f001 f985 	bl	8004c4e <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8003944:	2401      	movs	r4, #1
 8003946:	e64c      	b.n	80035e2 <USBH_PTP_Process+0x52>
      MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 8003948:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 800394c:	2401      	movs	r4, #1
 800394e:	f886 4d61 	strb.w	r4, [r6, #3425]	@ 0xd61
      break;
 8003952:	e646      	b.n	80035e2 <USBH_PTP_Process+0x52>
  switch (MTP_Handle->ptp.state)
 8003954:	2401      	movs	r4, #1
 8003956:	e644      	b.n	80035e2 <USBH_PTP_Process+0x52>

08003958 <USBH_PTP_OpenSession>:
  * @param  phost: Host handle
  * @param  session: Session ID (MUST BE > 0U)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_OpenSession(USBH_HandleTypeDef *phost, uint32_t session)
{
 8003958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800395c:	b08a      	sub	sp, #40	@ 0x28
 800395e:	4604      	mov	r4, r0
  USBH_StatusTypeDef   status = USBH_BUSY;
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003960:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8003964:	69de      	ldr	r6, [r3, #28]
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8003966:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 800396a:	f893 5d61 	ldrb.w	r5, [r3, #3425]	@ 0xd61
 800396e:	2d01      	cmp	r5, #1
 8003970:	d003      	beq.n	800397a <USBH_PTP_OpenSession+0x22>
 8003972:	2d02      	cmp	r5, #2
 8003974:	d02d      	beq.n	80039d2 <USBH_PTP_OpenSession+0x7a>
 8003976:	2501      	movs	r5, #1
 8003978:	e027      	b.n	80039ca <USBH_PTP_OpenSession+0x72>
  {
    case PTP_REQ_SEND:
      /* Init session params */
      MTP_Handle->ptp.transaction_id = 0x00000000U;
 800397a:	f506 5300 	add.w	r3, r6, #8192	@ 0x2000
 800397e:	2700      	movs	r7, #0
 8003980:	f8c3 71a4 	str.w	r7, [r3, #420]	@ 0x1a4
      MTP_Handle->ptp.session_id = session;
 8003984:	f8c3 11a8 	str.w	r1, [r3, #424]	@ 0x1a8
      MTP_Handle->ptp.flags = PTP_DP_NODATA;
 8003988:	f8c3 71ac 	str.w	r7, [r3, #428]	@ 0x1ac

      /* Fill operation request params */
      ptp_container.Code = PTP_OC_OpenSession;
 800398c:	f241 0202 	movw	r2, #4098	@ 0x1002
 8003990:	f8ad 2004 	strh.w	r2, [sp, #4]
      ptp_container.SessionID = session;
 8003994:	9102      	str	r1, [sp, #8]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 8003996:	f04f 0801 	mov.w	r8, #1
 800399a:	f8c3 81a4 	str.w	r8, [r3, #420]	@ 0x1a4
 800399e:	9703      	str	r7, [sp, #12]
      ptp_container.Param1 = session;
 80039a0:	9104      	str	r1, [sp, #16]
      ptp_container.Nparam = 1U;
 80039a2:	f88d 8024 	strb.w	r8, [sp, #36]	@ 0x24

      /* convert request packet inti USB raw packet*/
      USBH_PTP_SendRequest(phost, &ptp_container);
 80039a6:	a901      	add	r1, sp, #4
 80039a8:	f7ff fda5 	bl	80034f6 <USBH_PTP_SendRequest>

      /* Setup State machine and start transfer */
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 80039ac:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 80039b0:	f886 8d60 	strb.w	r8, [r6, #3424]	@ 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 80039b4:	2302      	movs	r3, #2
 80039b6:	f886 3d61 	strb.w	r3, [r6, #3425]	@ 0xd61
      status = USBH_BUSY;

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80039ba:	2105      	movs	r1, #5
 80039bc:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80039c0:	463a      	mov	r2, r7
 80039c2:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 80039c6:	f001 f942 	bl	8004c4e <osMessagePut>

    default:
      break;
  }
  return status;
}
 80039ca:	4628      	mov	r0, r5
 80039cc:	b00a      	add	sp, #40	@ 0x28
 80039ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      status = USBH_PTP_Process(phost);
 80039d2:	f7ff fddd 	bl	8003590 <USBH_PTP_Process>
 80039d6:	4605      	mov	r5, r0
      break;
 80039d8:	e7f7      	b.n	80039ca <USBH_PTP_OpenSession+0x72>

080039da <USBH_PTP_GetDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 80039da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039de:	b08a      	sub	sp, #40	@ 0x28
 80039e0:	4604      	mov	r4, r0
  USBH_StatusTypeDef status = USBH_BUSY;
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80039e2:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 80039e6:	69de      	ldr	r6, [r3, #28]
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 80039e8:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 80039ec:	f893 5d61 	ldrb.w	r5, [r3, #3425]	@ 0xd61
 80039f0:	2d01      	cmp	r5, #1
 80039f2:	d004      	beq.n	80039fe <USBH_PTP_GetDeviceInfo+0x24>
 80039f4:	460f      	mov	r7, r1
 80039f6:	2d02      	cmp	r5, #2
 80039f8:	d038      	beq.n	8003a6c <USBH_PTP_GetDeviceInfo+0x92>
 80039fa:	2501      	movs	r5, #1
 80039fc:	e032      	b.n	8003a64 <USBH_PTP_GetDeviceInfo+0x8a>
  {
    case PTP_REQ_SEND:
      /* Set operation request type */
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 80039fe:	f506 5300 	add.w	r3, r6, #8192	@ 0x2000
 8003a02:	f04f 0802 	mov.w	r8, #2
 8003a06:	f8c3 81ac 	str.w	r8, [r3, #428]	@ 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 8003a0a:	f506 52ec 	add.w	r2, r6, #7552	@ 0x1d80
 8003a0e:	3204      	adds	r2, #4
 8003a10:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 8003a14:	2700      	movs	r7, #0
 8003a16:	f8c3 71b4 	str.w	r7, [r3, #436]	@ 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 8003a1a:	f8c3 71c0 	str.w	r7, [r3, #448]	@ 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 8003a1e:	f8c3 71b8 	str.w	r7, [r3, #440]	@ 0x1b8

      /* Fill operation request params */
      ptp_container.Code = PTP_OC_GetDeviceInfo;
 8003a22:	f241 0201 	movw	r2, #4097	@ 0x1001
 8003a26:	f8ad 2004 	strh.w	r2, [sp, #4]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8003a2a:	f8d3 21a8 	ldr.w	r2, [r3, #424]	@ 0x1a8
 8003a2e:	9202      	str	r2, [sp, #8]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 8003a30:	f8d3 21a4 	ldr.w	r2, [r3, #420]	@ 0x1a4
 8003a34:	1c51      	adds	r1, r2, #1
 8003a36:	f8c3 11a4 	str.w	r1, [r3, #420]	@ 0x1a4
 8003a3a:	9203      	str	r2, [sp, #12]
      ptp_container.Nparam = 0U;
 8003a3c:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24

      /* convert request packet inti USB raw packet*/
      USBH_PTP_SendRequest(phost, &ptp_container);
 8003a40:	a901      	add	r1, sp, #4
 8003a42:	f7ff fd58 	bl	80034f6 <USBH_PTP_SendRequest>

      /* Setup State machine and start transfer */
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8003a46:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f886 3d60 	strb.w	r3, [r6, #3424]	@ 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8003a50:	f886 8d61 	strb.w	r8, [r6, #3425]	@ 0xd61
      status = USBH_BUSY;

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003a54:	2105      	movs	r1, #5
 8003a56:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003a5a:	463a      	mov	r2, r7
 8003a5c:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8003a60:	f001 f8f5 	bl	8004c4e <osMessagePut>

    default:
      break;
  }
  return status;
}
 8003a64:	4628      	mov	r0, r5
 8003a66:	b00a      	add	sp, #40	@ 0x28
 8003a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      status = USBH_PTP_Process(phost);
 8003a6c:	f7ff fd90 	bl	8003590 <USBH_PTP_Process>
      if (status == USBH_OK)
 8003a70:	4605      	mov	r5, r0
 8003a72:	2800      	cmp	r0, #0
 8003a74:	d1f6      	bne.n	8003a64 <USBH_PTP_GetDeviceInfo+0x8a>
        PTP_DecodeDeviceInfo(phost, dev_info);
 8003a76:	4639      	mov	r1, r7
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f7ff fc06 	bl	800328a <PTP_DecodeDeviceInfo>
 8003a7e:	e7f1      	b.n	8003a64 <USBH_PTP_GetDeviceInfo+0x8a>

08003a80 <USBH_PTP_GetStorageIds>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageIds(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *storage_ids)
{
 8003a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a84:	b08a      	sub	sp, #40	@ 0x28
 8003a86:	4604      	mov	r4, r0
  USBH_StatusTypeDef status = USBH_BUSY;
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003a88:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8003a8c:	69de      	ldr	r6, [r3, #28]
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8003a8e:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 8003a92:	f893 5d61 	ldrb.w	r5, [r3, #3425]	@ 0xd61
 8003a96:	2d01      	cmp	r5, #1
 8003a98:	d004      	beq.n	8003aa4 <USBH_PTP_GetStorageIds+0x24>
 8003a9a:	460f      	mov	r7, r1
 8003a9c:	2d02      	cmp	r5, #2
 8003a9e:	d038      	beq.n	8003b12 <USBH_PTP_GetStorageIds+0x92>
 8003aa0:	2501      	movs	r5, #1
 8003aa2:	e032      	b.n	8003b0a <USBH_PTP_GetStorageIds+0x8a>
  {
    case PTP_REQ_SEND:
      /* Set operation request type */
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8003aa4:	f506 5300 	add.w	r3, r6, #8192	@ 0x2000
 8003aa8:	f04f 0802 	mov.w	r8, #2
 8003aac:	f8c3 81ac 	str.w	r8, [r3, #428]	@ 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 8003ab0:	f506 52ec 	add.w	r2, r6, #7552	@ 0x1d80
 8003ab4:	3204      	adds	r2, #4
 8003ab6:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 8003aba:	2700      	movs	r7, #0
 8003abc:	f8c3 71b4 	str.w	r7, [r3, #436]	@ 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 8003ac0:	f8c3 71c0 	str.w	r7, [r3, #448]	@ 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 8003ac4:	f8c3 71b8 	str.w	r7, [r3, #440]	@ 0x1b8

      /* Fill operation request params */
      ptp_container.Code = PTP_OC_GetStorageIDs;
 8003ac8:	f241 0204 	movw	r2, #4100	@ 0x1004
 8003acc:	f8ad 2004 	strh.w	r2, [sp, #4]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8003ad0:	f8d3 21a8 	ldr.w	r2, [r3, #424]	@ 0x1a8
 8003ad4:	9202      	str	r2, [sp, #8]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 8003ad6:	f8d3 21a4 	ldr.w	r2, [r3, #420]	@ 0x1a4
 8003ada:	1c51      	adds	r1, r2, #1
 8003adc:	f8c3 11a4 	str.w	r1, [r3, #420]	@ 0x1a4
 8003ae0:	9203      	str	r2, [sp, #12]
      ptp_container.Nparam = 0U;
 8003ae2:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24

      /* convert request packet inti USB raw packet*/
      USBH_PTP_SendRequest(phost, &ptp_container);
 8003ae6:	a901      	add	r1, sp, #4
 8003ae8:	f7ff fd05 	bl	80034f6 <USBH_PTP_SendRequest>

      /* Setup State machine and start transfer */
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8003aec:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8003af0:	2301      	movs	r3, #1
 8003af2:	f886 3d60 	strb.w	r3, [r6, #3424]	@ 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8003af6:	f886 8d61 	strb.w	r8, [r6, #3425]	@ 0xd61
      status = USBH_BUSY;

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003afa:	2105      	movs	r1, #5
 8003afc:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003b00:	463a      	mov	r2, r7
 8003b02:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8003b06:	f001 f8a2 	bl	8004c4e <osMessagePut>

    default:
      break;
  }
  return status;
}
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	b00a      	add	sp, #40	@ 0x28
 8003b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      status = USBH_PTP_Process(phost);
 8003b12:	f7ff fd3d 	bl	8003590 <USBH_PTP_Process>
      if (status == USBH_OK)
 8003b16:	4605      	mov	r5, r0
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	d1f6      	bne.n	8003b0a <USBH_PTP_GetStorageIds+0x8a>
        PTP_GetStorageIDs(phost, storage_ids);
 8003b1c:	4639      	mov	r1, r7
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f7ff fc88 	bl	8003434 <PTP_GetStorageIDs>
 8003b24:	e7f1      	b.n	8003b0a <USBH_PTP_GetStorageIds+0x8a>

08003b26 <USBH_PTP_GetStorageInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageInfo(USBH_HandleTypeDef *phost,
                                           uint32_t storage_id,
                                           PTP_StorageInfoTypedef *storage_info)
{
 8003b26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b2a:	b08b      	sub	sp, #44	@ 0x2c
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	460f      	mov	r7, r1
  USBH_StatusTypeDef   status = USBH_BUSY;
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003b30:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8003b34:	69de      	ldr	r6, [r3, #28]
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8003b36:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 8003b3a:	f893 5d61 	ldrb.w	r5, [r3, #3425]	@ 0xd61
 8003b3e:	2d01      	cmp	r5, #1
 8003b40:	d004      	beq.n	8003b4c <USBH_PTP_GetStorageInfo+0x26>
 8003b42:	4690      	mov	r8, r2
 8003b44:	2d02      	cmp	r5, #2
 8003b46:	d03a      	beq.n	8003bbe <USBH_PTP_GetStorageInfo+0x98>
 8003b48:	2501      	movs	r5, #1
 8003b4a:	e034      	b.n	8003bb6 <USBH_PTP_GetStorageInfo+0x90>
  {
    case PTP_REQ_SEND:
      /* Set operation request type */
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8003b4c:	f506 5300 	add.w	r3, r6, #8192	@ 0x2000
 8003b50:	f04f 0902 	mov.w	r9, #2
 8003b54:	f8c3 91ac 	str.w	r9, [r3, #428]	@ 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 8003b58:	f506 52ec 	add.w	r2, r6, #7552	@ 0x1d80
 8003b5c:	3204      	adds	r2, #4
 8003b5e:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 8003b62:	f04f 0800 	mov.w	r8, #0
 8003b66:	f8c3 81b4 	str.w	r8, [r3, #436]	@ 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 8003b6a:	f8c3 81c0 	str.w	r8, [r3, #448]	@ 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 8003b6e:	f8c3 81b8 	str.w	r8, [r3, #440]	@ 0x1b8

      /* Fill operation request params */
      ptp_container.Code = PTP_OC_GetStorageInfo;
 8003b72:	f241 0205 	movw	r2, #4101	@ 0x1005
 8003b76:	f8ad 2004 	strh.w	r2, [sp, #4]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8003b7a:	f8d3 21a8 	ldr.w	r2, [r3, #424]	@ 0x1a8
 8003b7e:	9202      	str	r2, [sp, #8]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 8003b80:	f8d3 21a4 	ldr.w	r2, [r3, #420]	@ 0x1a4
 8003b84:	1c51      	adds	r1, r2, #1
 8003b86:	f8c3 11a4 	str.w	r1, [r3, #420]	@ 0x1a4
 8003b8a:	9203      	str	r2, [sp, #12]
      ptp_container.Param1 = storage_id;
 8003b8c:	9704      	str	r7, [sp, #16]
      ptp_container.Nparam = 1U;
 8003b8e:	2701      	movs	r7, #1
 8003b90:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24

      /* convert request packet inti USB raw packet*/
      USBH_PTP_SendRequest(phost, &ptp_container);
 8003b94:	a901      	add	r1, sp, #4
 8003b96:	f7ff fcae 	bl	80034f6 <USBH_PTP_SendRequest>

      /* Setup State machine and start transfer */
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8003b9a:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8003b9e:	f886 7d60 	strb.w	r7, [r6, #3424]	@ 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8003ba2:	f886 9d61 	strb.w	r9, [r6, #3425]	@ 0xd61
      status = USBH_BUSY;

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003ba6:	2105      	movs	r1, #5
 8003ba8:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003bac:	4642      	mov	r2, r8
 8003bae:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8003bb2:	f001 f84c 	bl	8004c4e <osMessagePut>

    default:
      break;
  }
  return status;
}
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	b00b      	add	sp, #44	@ 0x2c
 8003bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      status = USBH_PTP_Process(phost);
 8003bbe:	f7ff fce7 	bl	8003590 <USBH_PTP_Process>
      if (status == USBH_OK)
 8003bc2:	4605      	mov	r5, r0
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	d1f6      	bne.n	8003bb6 <USBH_PTP_GetStorageInfo+0x90>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
 8003bc8:	4642      	mov	r2, r8
 8003bca:	4639      	mov	r1, r7
 8003bcc:	4620      	mov	r0, r4
 8003bce:	f7ff fabd 	bl	800314c <PTP_GetStorageInfo>
 8003bd2:	e7f0      	b.n	8003bb6 <USBH_PTP_GetStorageInfo+0x90>

08003bd4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8003bd4:	4684      	mov	ip, r0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e006      	b.n	8003be8 <DeInitStateMachine+0x14>
  {
    phost->Pipes[i] = 0U;
 8003bda:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 8003bde:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8003be2:	2100      	movs	r1, #0
 8003be4:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8003be6:	3301      	adds	r3, #1
 8003be8:	2b0e      	cmp	r3, #14
 8003bea:	d9f6      	bls.n	8003bda <DeInitStateMachine+0x6>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8003bec:	2300      	movs	r3, #0
 8003bee:	e005      	b.n	8003bfc <DeInitStateMachine+0x28>
  {
    phost->device.Data[i] = 0U;
 8003bf0:	eb0c 0203 	add.w	r2, ip, r3
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	f882 111c 	strb.w	r1, [r2, #284]	@ 0x11c
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c00:	d3f6      	bcc.n	8003bf0 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
 8003c02:	2000      	movs	r0, #0
 8003c04:	f88c 0000 	strb.w	r0, [ip]
  phost->EnumState = ENUM_IDLE;
 8003c08:	f88c 0001 	strb.w	r0, [ip, #1]
  phost->RequestState = CMD_SEND;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f88c 3002 	strb.w	r3, [ip, #2]
  phost->Timer = 0U;
 8003c12:	f8cc 03c4 	str.w	r0, [ip, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8003c16:	f88c 3018 	strb.w	r3, [ip, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8003c1a:	2240      	movs	r2, #64	@ 0x40
 8003c1c:	f88c 2006 	strb.w	r2, [ip, #6]
  phost->Control.errorcount = 0U;
 8003c20:	f88c 0019 	strb.w	r0, [ip, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003c24:	f88c 031c 	strb.w	r0, [ip, #796]	@ 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8003c28:	f88c 331d 	strb.w	r3, [ip, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8003c2c:	f88c 031f 	strb.w	r0, [ip, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8003c30:	f88c 031e 	strb.w	r0, [ip, #798]	@ 0x31e

  return USBH_OK;
}
 8003c34:	4770      	bx	lr

08003c36 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8003c36:	b508      	push	{r3, lr}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003c38:	7803      	ldrb	r3, [r0, #0]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b0b      	cmp	r3, #11
 8003c3e:	d000      	beq.n	8003c42 <USBH_HandleSof+0xc>
  {
    phost->pActiveClass->SOFProcess(phost);
  }
}
 8003c40:	bd08      	pop	{r3, pc}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003c42:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0fa      	beq.n	8003c40 <USBH_HandleSof+0xa>
    phost->pActiveClass->SOFProcess(phost);
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	4798      	blx	r3
}
 8003c4e:	e7f7      	b.n	8003c40 <USBH_HandleSof+0xa>

08003c50 <USBH_HandleEnum>:
{
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	4604      	mov	r4, r0
  switch (phost->EnumState)
 8003c56:	7845      	ldrb	r5, [r0, #1]
 8003c58:	2d07      	cmp	r5, #7
 8003c5a:	f200 8154 	bhi.w	8003f06 <USBH_HandleEnum+0x2b6>
 8003c5e:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003c62:	0008      	.short	0x0008
 8003c64:	00690048 	.word	0x00690048
 8003c68:	00bf009a 	.word	0x00bf009a
 8003c6c:	011600e5 	.word	0x011600e5
 8003c70:	013f      	.short	0x013f
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8003c72:	2108      	movs	r1, #8
 8003c74:	f000 fe5b 	bl	800492e <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8003c78:	b118      	cbz	r0, 8003c82 <USBH_HandleEnum+0x32>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003c7a:	2803      	cmp	r0, #3
 8003c7c:	d021      	beq.n	8003cc2 <USBH_HandleEnum+0x72>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003c7e:	2501      	movs	r5, #1
 8003c80:	e131      	b.n	8003ee6 <USBH_HandleEnum+0x296>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003c82:	f894 332d 	ldrb.w	r3, [r4, #813]	@ 0x32d
 8003c86:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003c88:	2501      	movs	r5, #1
 8003c8a:	7065      	strb	r5, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8003c8c:	9302      	str	r3, [sp, #8]
 8003c8e:	2600      	movs	r6, #0
 8003c90:	9601      	str	r6, [sp, #4]
 8003c92:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 8003c9c:	2280      	movs	r2, #128	@ 0x80
 8003c9e:	7921      	ldrb	r1, [r4, #4]
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f000 ff41 	bl	8004b28 <USBH_OpenPipe>
                      (uint16_t)phost->Control.pipe_size);
 8003ca6:	79a3      	ldrb	r3, [r4, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8003ca8:	9302      	str	r3, [sp, #8]
 8003caa:	9601      	str	r6, [sp, #4]
 8003cac:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 8003cb6:	4632      	mov	r2, r6
 8003cb8:	7961      	ldrb	r1, [r4, #5]
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f000 ff34 	bl	8004b28 <USBH_OpenPipe>
 8003cc0:	e111      	b.n	8003ee6 <USBH_HandleEnum+0x296>
        phost->device.EnumCnt++;
 8003cc2:	f894 331e 	ldrb.w	r3, [r4, #798]	@ 0x31e
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f884 331e 	strb.w	r3, [r4, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d903      	bls.n	8003cda <USBH_HandleEnum+0x8a>
          phost->gState = HOST_ABORT_STATE;
 8003cd2:	230d      	movs	r3, #13
 8003cd4:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003cd6:	2501      	movs	r5, #1
 8003cd8:	e105      	b.n	8003ee6 <USBH_HandleEnum+0x296>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8003cda:	7961      	ldrb	r1, [r4, #5]
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f000 ff4b 	bl	8004b78 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8003ce2:	7921      	ldrb	r1, [r4, #4]
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f000 ff47 	bl	8004b78 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8003cea:	2300      	movs	r3, #0
 8003cec:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003cee:	2501      	movs	r5, #1
 8003cf0:	e0f9      	b.n	8003ee6 <USBH_HandleEnum+0x296>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8003cf2:	2112      	movs	r1, #18
 8003cf4:	f000 fe1b 	bl	800492e <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8003cf8:	b910      	cbnz	r0, 8003d00 <USBH_HandleEnum+0xb0>
        phost->EnumState = ENUM_SET_ADDR;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	7063      	strb	r3, [r4, #1]
 8003cfe:	e0f2      	b.n	8003ee6 <USBH_HandleEnum+0x296>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003d00:	2803      	cmp	r0, #3
 8003d02:	f040 80f0 	bne.w	8003ee6 <USBH_HandleEnum+0x296>
        phost->device.EnumCnt++;
 8003d06:	f894 331e 	ldrb.w	r3, [r4, #798]	@ 0x31e
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f884 331e 	strb.w	r3, [r4, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d902      	bls.n	8003d1c <USBH_HandleEnum+0xcc>
          phost->gState = HOST_ABORT_STATE;
 8003d16:	230d      	movs	r3, #13
 8003d18:	7023      	strb	r3, [r4, #0]
 8003d1a:	e0e4      	b.n	8003ee6 <USBH_HandleEnum+0x296>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8003d1c:	7961      	ldrb	r1, [r4, #5]
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f000 ff2a 	bl	8004b78 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8003d24:	7921      	ldrb	r1, [r4, #4]
 8003d26:	4620      	mov	r0, r4
 8003d28:	f000 ff26 	bl	8004b78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8003d30:	7023      	strb	r3, [r4, #0]
 8003d32:	e0d8      	b.n	8003ee6 <USBH_HandleEnum+0x296>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8003d34:	2101      	movs	r1, #1
 8003d36:	f000 fe44 	bl	80049c2 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 8003d3a:	b118      	cbz	r0, 8003d44 <USBH_HandleEnum+0xf4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003d3c:	2803      	cmp	r0, #3
 8003d3e:	d024      	beq.n	8003d8a <USBH_HandleEnum+0x13a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003d40:	2501      	movs	r5, #1
 8003d42:	e0d0      	b.n	8003ee6 <USBH_HandleEnum+0x296>
        USBH_Delay(2U);
 8003d44:	2002      	movs	r0, #2
 8003d46:	f002 fcaa 	bl	800669e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8003d4a:	2501      	movs	r5, #1
 8003d4c:	f884 531c 	strb.w	r5, [r4, #796]	@ 0x31c
        phost->EnumState = ENUM_GET_CFG_DESC;
 8003d50:	2303      	movs	r3, #3
 8003d52:	7063      	strb	r3, [r4, #1]
                      (uint16_t)phost->Control.pipe_size);
 8003d54:	79a3      	ldrb	r3, [r4, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8003d56:	9302      	str	r3, [sp, #8]
 8003d58:	2600      	movs	r6, #0
 8003d5a:	9601      	str	r6, [sp, #4]
 8003d5c:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	462b      	mov	r3, r5
 8003d64:	2280      	movs	r2, #128	@ 0x80
 8003d66:	7921      	ldrb	r1, [r4, #4]
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f000 fedd 	bl	8004b28 <USBH_OpenPipe>
                      (uint16_t)phost->Control.pipe_size);
 8003d6e:	79a3      	ldrb	r3, [r4, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8003d70:	9302      	str	r3, [sp, #8]
 8003d72:	9601      	str	r6, [sp, #4]
 8003d74:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 8003d7e:	4632      	mov	r2, r6
 8003d80:	7961      	ldrb	r1, [r4, #5]
 8003d82:	4620      	mov	r0, r4
 8003d84:	f000 fed0 	bl	8004b28 <USBH_OpenPipe>
 8003d88:	e0ad      	b.n	8003ee6 <USBH_HandleEnum+0x296>
        phost->gState = HOST_ABORT_STATE;
 8003d8a:	230d      	movs	r3, #13
 8003d8c:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003d92:	2501      	movs	r5, #1
 8003d94:	e0a7      	b.n	8003ee6 <USBH_HandleEnum+0x296>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8003d96:	2109      	movs	r1, #9
 8003d98:	f000 fde2 	bl	8004960 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8003d9c:	b918      	cbnz	r0, 8003da6 <USBH_HandleEnum+0x156>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8003d9e:	2304      	movs	r3, #4
 8003da0:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003da2:	2501      	movs	r5, #1
 8003da4:	e09f      	b.n	8003ee6 <USBH_HandleEnum+0x296>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003da6:	2803      	cmp	r0, #3
 8003da8:	d001      	beq.n	8003dae <USBH_HandleEnum+0x15e>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003daa:	2501      	movs	r5, #1
 8003dac:	e09b      	b.n	8003ee6 <USBH_HandleEnum+0x296>
        phost->device.EnumCnt++;
 8003dae:	f894 331e 	ldrb.w	r3, [r4, #798]	@ 0x31e
 8003db2:	3301      	adds	r3, #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f884 331e 	strb.w	r3, [r4, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d903      	bls.n	8003dc6 <USBH_HandleEnum+0x176>
          phost->gState = HOST_ABORT_STATE;
 8003dbe:	230d      	movs	r3, #13
 8003dc0:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003dc2:	2501      	movs	r5, #1
 8003dc4:	e08f      	b.n	8003ee6 <USBH_HandleEnum+0x296>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8003dc6:	7961      	ldrb	r1, [r4, #5]
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f000 fed5 	bl	8004b78 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8003dce:	7921      	ldrb	r1, [r4, #4]
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f000 fed1 	bl	8004b78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8003dda:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003ddc:	2501      	movs	r5, #1
 8003dde:	e082      	b.n	8003ee6 <USBH_HandleEnum+0x296>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8003de0:	f8b0 133a 	ldrh.w	r1, [r0, #826]	@ 0x33a
 8003de4:	f000 fdbc 	bl	8004960 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8003de8:	b918      	cbnz	r0, 8003df2 <USBH_HandleEnum+0x1a2>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8003dea:	2305      	movs	r3, #5
 8003dec:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003dee:	2501      	movs	r5, #1
 8003df0:	e079      	b.n	8003ee6 <USBH_HandleEnum+0x296>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003df2:	2803      	cmp	r0, #3
 8003df4:	d001      	beq.n	8003dfa <USBH_HandleEnum+0x1aa>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003df6:	2501      	movs	r5, #1
 8003df8:	e075      	b.n	8003ee6 <USBH_HandleEnum+0x296>
        phost->device.EnumCnt++;
 8003dfa:	f894 331e 	ldrb.w	r3, [r4, #798]	@ 0x31e
 8003dfe:	3301      	adds	r3, #1
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	f884 331e 	strb.w	r3, [r4, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d903      	bls.n	8003e12 <USBH_HandleEnum+0x1c2>
          phost->gState = HOST_ABORT_STATE;
 8003e0a:	230d      	movs	r3, #13
 8003e0c:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e0e:	2501      	movs	r5, #1
 8003e10:	e069      	b.n	8003ee6 <USBH_HandleEnum+0x296>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8003e12:	7961      	ldrb	r1, [r4, #5]
 8003e14:	4620      	mov	r0, r4
 8003e16:	f000 feaf 	bl	8004b78 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8003e1a:	7921      	ldrb	r1, [r4, #4]
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f000 feab 	bl	8004b78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8003e22:	2300      	movs	r3, #0
 8003e24:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8003e26:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e28:	2501      	movs	r5, #1
 8003e2a:	e05c      	b.n	8003ee6 <USBH_HandleEnum+0x296>
      if (phost->device.DevDesc.iManufacturer != 0U)
 8003e2c:	f890 1334 	ldrb.w	r1, [r0, #820]	@ 0x334
 8003e30:	b309      	cbz	r1, 8003e76 <USBH_HandleEnum+0x226>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8003e32:	23ff      	movs	r3, #255	@ 0xff
 8003e34:	f500 728e 	add.w	r2, r0, #284	@ 0x11c
 8003e38:	f000 fdab 	bl	8004992 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8003e3c:	b118      	cbz	r0, 8003e46 <USBH_HandleEnum+0x1f6>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003e3e:	2803      	cmp	r0, #3
 8003e40:	d00d      	beq.n	8003e5e <USBH_HandleEnum+0x20e>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e42:	2501      	movs	r5, #1
 8003e44:	e04f      	b.n	8003ee6 <USBH_HandleEnum+0x296>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003e46:	2306      	movs	r3, #6
 8003e48:	7063      	strb	r3, [r4, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003e4a:	2105      	movs	r1, #5
 8003e4c:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8003e56:	f000 fefa 	bl	8004c4e <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e5a:	2501      	movs	r5, #1
 8003e5c:	e043      	b.n	8003ee6 <USBH_HandleEnum+0x296>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003e5e:	2306      	movs	r3, #6
 8003e60:	7063      	strb	r3, [r4, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003e62:	2105      	movs	r1, #5
 8003e64:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8003e6e:	f000 feee 	bl	8004c4e <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e72:	2501      	movs	r5, #1
 8003e74:	e037      	b.n	8003ee6 <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003e76:	2306      	movs	r3, #6
 8003e78:	7043      	strb	r3, [r0, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003e7a:	2105      	movs	r1, #5
 8003e7c:	f8c0 13e0 	str.w	r1, [r0, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e80:	2200      	movs	r2, #0
 8003e82:	f8d0 03d8 	ldr.w	r0, [r0, #984]	@ 0x3d8
 8003e86:	f000 fee2 	bl	8004c4e <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e8a:	2501      	movs	r5, #1
 8003e8c:	e02b      	b.n	8003ee6 <USBH_HandleEnum+0x296>
      if (phost->device.DevDesc.iProduct != 0U)
 8003e8e:	f890 1335 	ldrb.w	r1, [r0, #821]	@ 0x335
 8003e92:	b1c9      	cbz	r1, 8003ec8 <USBH_HandleEnum+0x278>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8003e94:	23ff      	movs	r3, #255	@ 0xff
 8003e96:	f500 728e 	add.w	r2, r0, #284	@ 0x11c
 8003e9a:	f000 fd7a 	bl	8004992 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8003e9e:	b918      	cbnz	r0, 8003ea8 <USBH_HandleEnum+0x258>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8003ea0:	2307      	movs	r3, #7
 8003ea2:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003ea4:	2501      	movs	r5, #1
 8003ea6:	e01e      	b.n	8003ee6 <USBH_HandleEnum+0x296>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003ea8:	2803      	cmp	r0, #3
 8003eaa:	d001      	beq.n	8003eb0 <USBH_HandleEnum+0x260>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003eac:	2501      	movs	r5, #1
 8003eae:	e01a      	b.n	8003ee6 <USBH_HandleEnum+0x296>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8003eb0:	2307      	movs	r3, #7
 8003eb2:	7063      	strb	r3, [r4, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003eb4:	2105      	movs	r1, #5
 8003eb6:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8003ec0:	f000 fec5 	bl	8004c4e <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003ec4:	2501      	movs	r5, #1
 8003ec6:	e00e      	b.n	8003ee6 <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8003ec8:	2307      	movs	r3, #7
 8003eca:	7043      	strb	r3, [r0, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003ecc:	2105      	movs	r1, #5
 8003ece:	f8c0 13e0 	str.w	r1, [r0, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8d0 03d8 	ldr.w	r0, [r0, #984]	@ 0x3d8
 8003ed8:	f000 feb9 	bl	8004c4e <osMessagePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003edc:	2501      	movs	r5, #1
 8003ede:	e002      	b.n	8003ee6 <USBH_HandleEnum+0x296>
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8003ee0:	f890 5336 	ldrb.w	r5, [r0, #822]	@ 0x336
 8003ee4:	b915      	cbnz	r5, 8003eec <USBH_HandleEnum+0x29c>
}
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	b004      	add	sp, #16
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8003eec:	23ff      	movs	r3, #255	@ 0xff
 8003eee:	f500 728e 	add.w	r2, r0, #284	@ 0x11c
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	f000 fd4d 	bl	8004992 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8003ef8:	4605      	mov	r5, r0
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d0f3      	beq.n	8003ee6 <USBH_HandleEnum+0x296>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003efe:	2803      	cmp	r0, #3
 8003f00:	d003      	beq.n	8003f0a <USBH_HandleEnum+0x2ba>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003f02:	2501      	movs	r5, #1
 8003f04:	e7ef      	b.n	8003ee6 <USBH_HandleEnum+0x296>
  switch (phost->EnumState)
 8003f06:	2501      	movs	r5, #1
 8003f08:	e7ed      	b.n	8003ee6 <USBH_HandleEnum+0x296>
          Status = USBH_OK;
 8003f0a:	2500      	movs	r5, #0
 8003f0c:	e7eb      	b.n	8003ee6 <USBH_HandleEnum+0x296>
	...

08003f10 <USBH_Init>:
  if (phost == NULL)
 8003f10:	2800      	cmp	r0, #0
 8003f12:	d03c      	beq.n	8003f8e <USBH_Init+0x7e>
{
 8003f14:	b570      	push	{r4, r5, r6, lr}
 8003f16:	b08c      	sub	sp, #48	@ 0x30
 8003f18:	460e      	mov	r6, r1
 8003f1a:	4605      	mov	r5, r0
  phost->id = id;
 8003f1c:	f880 23cc 	strb.w	r2, [r0, #972]	@ 0x3cc
  phost->pActiveClass = NULL;
 8003f20:	2400      	movs	r4, #0
 8003f22:	f8c0 437c 	str.w	r4, [r0, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8003f26:	f8c0 4380 	str.w	r4, [r0, #896]	@ 0x380
  DeInitStateMachine(phost);
 8003f2a:	f7ff fe53 	bl	8003bd4 <DeInitStateMachine>
  phost->device.PortEnabled = 0U;
 8003f2e:	f885 4323 	strb.w	r4, [r5, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8003f32:	f885 4320 	strb.w	r4, [r5, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8003f36:	f885 4321 	strb.w	r4, [r5, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8003f3a:	f885 4322 	strb.w	r4, [r5, #802]	@ 0x322
  if (pUsrFunc != NULL)
 8003f3e:	b10e      	cbz	r6, 8003f44 <USBH_Init+0x34>
    phost->pUser = pUsrFunc;
 8003f40:	f8c5 63d4 	str.w	r6, [r5, #980]	@ 0x3d4
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8003f44:	4c13      	ldr	r4, [pc, #76]	@ (8003f94 <USBH_Init+0x84>)
 8003f46:	f10d 0c20 	add.w	ip, sp, #32
 8003f4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f4e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8003f52:	2100      	movs	r1, #0
 8003f54:	4660      	mov	r0, ip
 8003f56:	f000 fe65 	bl	8004c24 <osMessageCreate>
 8003f5a:	f8c5 03d8 	str.w	r0, [r5, #984]	@ 0x3d8
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8003f5e:	f10d 0e04 	add.w	lr, sp, #4
 8003f62:	f104 0c10 	add.w	ip, r4, #16
 8003f66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003f6a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003f6e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003f72:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8003f76:	4629      	mov	r1, r5
 8003f78:	a801      	add	r0, sp, #4
 8003f7a:	f000 fe19 	bl	8004bb0 <osThreadCreate>
 8003f7e:	f8c5 03dc 	str.w	r0, [r5, #988]	@ 0x3dc
  USBH_LL_Init(phost);
 8003f82:	4628      	mov	r0, r5
 8003f84:	f002 fb22 	bl	80065cc <USBH_LL_Init>
  return USBH_OK;
 8003f88:	2000      	movs	r0, #0
}
 8003f8a:	b00c      	add	sp, #48	@ 0x30
 8003f8c:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8003f8e:	2002      	movs	r0, #2
}
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	08006b0c 	.word	0x08006b0c

08003f98 <USBH_RegisterClass>:
  if (pclass != NULL)
 8003f98:	460a      	mov	r2, r1
 8003f9a:	b151      	cbz	r1, 8003fb2 <USBH_RegisterClass+0x1a>
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8003f9c:	f8d0 3380 	ldr.w	r3, [r0, #896]	@ 0x380
 8003fa0:	b94b      	cbnz	r3, 8003fb6 <USBH_RegisterClass+0x1e>
      phost->pClass[phost->ClassNumber++] = pclass;
 8003fa2:	1c59      	adds	r1, r3, #1
 8003fa4:	f8c0 1380 	str.w	r1, [r0, #896]	@ 0x380
 8003fa8:	33de      	adds	r3, #222	@ 0xde
 8003faa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      status = USBH_OK;
 8003fae:	2000      	movs	r0, #0
 8003fb0:	4770      	bx	lr
    status = USBH_FAIL;
 8003fb2:	2002      	movs	r0, #2
 8003fb4:	4770      	bx	lr
      status = USBH_FAIL;
 8003fb6:	2002      	movs	r0, #2
}
 8003fb8:	4770      	bx	lr

08003fba <USBH_SelectInterface>:
  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8003fba:	f890 333c 	ldrb.w	r3, [r0, #828]	@ 0x33c
 8003fbe:	428b      	cmp	r3, r1
 8003fc0:	d903      	bls.n	8003fca <USBH_SelectInterface+0x10>
    phost->device.current_interface = interface;
 8003fc2:	f880 1324 	strb.w	r1, [r0, #804]	@ 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	4770      	bx	lr
    status = USBH_FAIL;
 8003fca:	2002      	movs	r0, #2
}
 8003fcc:	4770      	bx	lr

08003fce <USBH_FindInterface>:
{
 8003fce:	b510      	push	{r4, lr}
 8003fd0:	4604      	mov	r4, r0
  uint8_t if_ix = 0U;
 8003fd2:	2000      	movs	r0, #0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003fd4:	e00b      	b.n	8003fee <USBH_FindInterface+0x20>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8003fd6:	f04f 0c1a 	mov.w	ip, #26
 8003fda:	fb0c 4e0e 	mla	lr, ip, lr, r4
 8003fde:	f89e c349 	ldrb.w	ip, [lr, #841]	@ 0x349
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8003fe2:	459c      	cmp	ip, r3
 8003fe4:	d01c      	beq.n	8004020 <USBH_FindInterface+0x52>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8003fe6:	2bff      	cmp	r3, #255	@ 0xff
 8003fe8:	d01a      	beq.n	8004020 <USBH_FindInterface+0x52>
    if_ix++;
 8003fea:	3001      	adds	r0, #1
 8003fec:	b2c0      	uxtb	r0, r0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003fee:	2801      	cmp	r0, #1
 8003ff0:	d815      	bhi.n	800401e <USBH_FindInterface+0x50>
    pif = &pcfg->Itf_Desc[if_ix];
 8003ff2:	4686      	mov	lr, r0
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8003ff4:	f04f 0c1a 	mov.w	ip, #26
 8003ff8:	fb0c 4c00 	mla	ip, ip, r0, r4
 8003ffc:	f89c c347 	ldrb.w	ip, [ip, #839]	@ 0x347
 8004000:	458c      	cmp	ip, r1
 8004002:	d001      	beq.n	8004008 <USBH_FindInterface+0x3a>
 8004004:	29ff      	cmp	r1, #255	@ 0xff
 8004006:	d1f0      	bne.n	8003fea <USBH_FindInterface+0x1c>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004008:	f04f 0c1a 	mov.w	ip, #26
 800400c:	fb0c 4c0e 	mla	ip, ip, lr, r4
 8004010:	f89c c348 	ldrb.w	ip, [ip, #840]	@ 0x348
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004014:	4594      	cmp	ip, r2
 8004016:	d0de      	beq.n	8003fd6 <USBH_FindInterface+0x8>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004018:	2aff      	cmp	r2, #255	@ 0xff
 800401a:	d1e6      	bne.n	8003fea <USBH_FindInterface+0x1c>
 800401c:	e7db      	b.n	8003fd6 <USBH_FindInterface+0x8>
  return 0xFFU;
 800401e:	20ff      	movs	r0, #255	@ 0xff
}
 8004020:	bd10      	pop	{r4, pc}

08004022 <USBH_Start>:
{
 8004022:	b510      	push	{r4, lr}
 8004024:	4604      	mov	r4, r0
  USBH_LL_Start(phost);
 8004026:	f002 fb48 	bl	80066ba <USBH_LL_Start>
  USBH_LL_DriverVBUS(phost, TRUE);
 800402a:	2101      	movs	r1, #1
 800402c:	4620      	mov	r0, r4
 800402e:	f002 fb13 	bl	8006658 <USBH_LL_DriverVBUS>
}
 8004032:	2000      	movs	r0, #0
 8004034:	bd10      	pop	{r4, pc}

08004036 <USBH_Process>:
{
 8004036:	b530      	push	{r4, r5, lr}
 8004038:	b087      	sub	sp, #28
 800403a:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800403c:	2302      	movs	r3, #2
 800403e:	f88d 3017 	strb.w	r3, [sp, #23]
  if (phost->device.is_disconnected == 1U)
 8004042:	f890 3321 	ldrb.w	r3, [r0, #801]	@ 0x321
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	d012      	beq.n	8004072 <USBH_Process+0x3c>
  switch (phost->gState)
 800404c:	7823      	ldrb	r3, [r4, #0]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b0b      	cmp	r3, #11
 8004052:	f200 80e3 	bhi.w	800421c <USBH_Process+0x1e6>
 8004056:	e8df f013 	tbh	[pc, r3, lsl #1]
 800405a:	000f      	.short	0x000f
 800405c:	00550029 	.word	0x00550029
 8004060:	00e10149 	.word	0x00e10149
 8004064:	01200093 	.word	0x01200093
 8004068:	00c100b0 	.word	0x00c100b0
 800406c:	00ed00d2 	.word	0x00ed00d2
 8004070:	0141      	.short	0x0141
    phost->gState = HOST_DEV_DISCONNECTED;
 8004072:	2303      	movs	r3, #3
 8004074:	7003      	strb	r3, [r0, #0]
 8004076:	e7e9      	b.n	800404c <USBH_Process+0x16>
      if (phost->device.is_connected)
 8004078:	f894 3320 	ldrb.w	r3, [r4, #800]	@ 0x320
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80cd 	beq.w	800421c <USBH_Process+0x1e6>
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8004082:	2501      	movs	r5, #1
 8004084:	7025      	strb	r5, [r4, #0]
        USBH_Delay(200U);
 8004086:	20c8      	movs	r0, #200	@ 0xc8
 8004088:	f002 fb09 	bl	800669e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800408c:	4620      	mov	r0, r4
 800408e:	f002 fb24 	bl	80066da <USBH_LL_ResetPort>
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8004092:	2200      	movs	r2, #0
 8004094:	f884 231c 	strb.w	r2, [r4, #796]	@ 0x31c
        phost->Timeout = 0U;
 8004098:	f8c4 23c8 	str.w	r2, [r4, #968]	@ 0x3c8
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800409c:	f8c4 53e0 	str.w	r5, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80040a0:	4629      	mov	r1, r5
 80040a2:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 80040a6:	f000 fdd2 	bl	8004c4e <osMessagePut>
 80040aa:	e0b7      	b.n	800421c <USBH_Process+0x1e6>
      if (phost->device.PortEnabled == 1U)
 80040ac:	f894 3323 	ldrb.w	r3, [r4, #803]	@ 0x323
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d00f      	beq.n	80040d4 <USBH_Process+0x9e>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80040b4:	f8d4 33c8 	ldr.w	r3, [r4, #968]	@ 0x3c8
 80040b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040bc:	d91b      	bls.n	80040f6 <USBH_Process+0xc0>
          phost->device.RstCnt++;
 80040be:	f894 331f 	ldrb.w	r3, [r4, #799]	@ 0x31f
 80040c2:	3301      	adds	r3, #1
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f884 331f 	strb.w	r3, [r4, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d910      	bls.n	80040f0 <USBH_Process+0xba>
            phost->gState = HOST_ABORT_STATE;
 80040ce:	230d      	movs	r3, #13
 80040d0:	7023      	strb	r3, [r4, #0]
 80040d2:	e004      	b.n	80040de <USBH_Process+0xa8>
        phost->device.RstCnt = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	f884 331f 	strb.w	r3, [r4, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80040da:	2302      	movs	r3, #2
 80040dc:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80040de:	2101      	movs	r1, #1
 80040e0:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80040e4:	2200      	movs	r2, #0
 80040e6:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 80040ea:	f000 fdb0 	bl	8004c4e <osMessagePut>
      break;
 80040ee:	e095      	b.n	800421c <USBH_Process+0x1e6>
            phost->gState = HOST_IDLE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	7023      	strb	r3, [r4, #0]
 80040f4:	e7f3      	b.n	80040de <USBH_Process+0xa8>
          phost->Timeout += 10U;
 80040f6:	330a      	adds	r3, #10
 80040f8:	f8c4 33c8 	str.w	r3, [r4, #968]	@ 0x3c8
          USBH_Delay(10U);
 80040fc:	200a      	movs	r0, #10
 80040fe:	f002 face 	bl	800669e <USBH_Delay>
 8004102:	e7ec      	b.n	80040de <USBH_Process+0xa8>
      if (phost->pUser != NULL)
 8004104:	f8d4 33d4 	ldr.w	r3, [r4, #980]	@ 0x3d4
 8004108:	b113      	cbz	r3, 8004110 <USBH_Process+0xda>
        phost->pUser(phost, HOST_USER_CONNECTION);
 800410a:	2104      	movs	r1, #4
 800410c:	4620      	mov	r0, r4
 800410e:	4798      	blx	r3
      USBH_Delay(100U);
 8004110:	2064      	movs	r0, #100	@ 0x64
 8004112:	f002 fac4 	bl	800669e <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8004116:	4620      	mov	r0, r4
 8004118:	f002 fa82 	bl	8006620 <USBH_LL_GetSpeed>
 800411c:	f884 031d 	strb.w	r0, [r4, #797]	@ 0x31d
      phost->gState = HOST_ENUMERATION;
 8004120:	2305      	movs	r3, #5
 8004122:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8004124:	2100      	movs	r1, #0
 8004126:	4620      	mov	r0, r4
 8004128:	f000 fd13 	bl	8004b52 <USBH_AllocPipe>
 800412c:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800412e:	2180      	movs	r1, #128	@ 0x80
 8004130:	4620      	mov	r0, r4
 8004132:	f000 fd0e 	bl	8004b52 <USBH_AllocPipe>
 8004136:	4601      	mov	r1, r0
 8004138:	7120      	strb	r0, [r4, #4]
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800413a:	79a3      	ldrb	r3, [r4, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800413c:	9302      	str	r3, [sp, #8]
 800413e:	2500      	movs	r5, #0
 8004140:	9501      	str	r5, [sp, #4]
 8004142:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 800414c:	2280      	movs	r2, #128	@ 0x80
 800414e:	4620      	mov	r0, r4
 8004150:	f000 fcea 	bl	8004b28 <USBH_OpenPipe>
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8004154:	79a3      	ldrb	r3, [r4, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004156:	9302      	str	r3, [sp, #8]
 8004158:	9501      	str	r5, [sp, #4]
 800415a:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 8004164:	462a      	mov	r2, r5
 8004166:	7961      	ldrb	r1, [r4, #5]
 8004168:	4620      	mov	r0, r4
 800416a:	f000 fcdd 	bl	8004b28 <USBH_OpenPipe>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800416e:	2101      	movs	r1, #1
 8004170:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004174:	462a      	mov	r2, r5
 8004176:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 800417a:	f000 fd68 	bl	8004c4e <osMessagePut>
      break;
 800417e:	e04d      	b.n	800421c <USBH_Process+0x1e6>
      status = USBH_HandleEnum(phost);
 8004180:	4620      	mov	r0, r4
 8004182:	f7ff fd65 	bl	8003c50 <USBH_HandleEnum>
 8004186:	f88d 0017 	strb.w	r0, [sp, #23]
      if (status == USBH_OK)
 800418a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d144      	bne.n	800421c <USBH_Process+0x1e6>
        phost->device.current_interface = 0U;
 8004192:	f884 3324 	strb.w	r3, [r4, #804]	@ 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8004196:	f894 3337 	ldrb.w	r3, [r4, #823]	@ 0x337
 800419a:	2b01      	cmp	r3, #1
 800419c:	d00a      	beq.n	80041b4 <USBH_Process+0x17e>
          phost->gState = HOST_INPUT;
 800419e:	2307      	movs	r3, #7
 80041a0:	7023      	strb	r3, [r4, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80041a2:	2105      	movs	r1, #5
 80041a4:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80041a8:	2200      	movs	r2, #0
 80041aa:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 80041ae:	f000 fd4e 	bl	8004c4e <osMessagePut>
 80041b2:	e033      	b.n	800421c <USBH_Process+0x1e6>
          phost->gState = HOST_SET_CONFIGURATION;
 80041b4:	2308      	movs	r3, #8
 80041b6:	7023      	strb	r3, [r4, #0]
 80041b8:	e7f3      	b.n	80041a2 <USBH_Process+0x16c>
      if (phost->pUser != NULL)
 80041ba:	f8d4 33d4 	ldr.w	r3, [r4, #980]	@ 0x3d4
 80041be:	b36b      	cbz	r3, 800421c <USBH_Process+0x1e6>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80041c0:	2101      	movs	r1, #1
 80041c2:	4620      	mov	r0, r4
 80041c4:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80041c6:	2308      	movs	r3, #8
 80041c8:	7023      	strb	r3, [r4, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80041ca:	2105      	movs	r1, #5
 80041cc:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80041d0:	2200      	movs	r2, #0
 80041d2:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 80041d6:	f000 fd3a 	bl	8004c4e <osMessagePut>
 80041da:	e01f      	b.n	800421c <USBH_Process+0x1e6>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80041dc:	f894 133d 	ldrb.w	r1, [r4, #829]	@ 0x33d
 80041e0:	4620      	mov	r0, r4
 80041e2:	f000 fbff 	bl	80049e4 <USBH_SetCfg>
 80041e6:	b908      	cbnz	r0, 80041ec <USBH_Process+0x1b6>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80041e8:	2309      	movs	r3, #9
 80041ea:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80041ec:	2101      	movs	r1, #1
 80041ee:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 80041f8:	f000 fd29 	bl	8004c4e <osMessagePut>
      break;
 80041fc:	e00e      	b.n	800421c <USBH_Process+0x1e6>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80041fe:	f894 333f 	ldrb.w	r3, [r4, #831]	@ 0x33f
 8004202:	f013 0f20 	tst.w	r3, #32
 8004206:	d10c      	bne.n	8004222 <USBH_Process+0x1ec>
        phost->gState = HOST_CHECK_CLASS;
 8004208:	230a      	movs	r3, #10
 800420a:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800420c:	2101      	movs	r1, #1
 800420e:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004212:	2200      	movs	r2, #0
 8004214:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8004218:	f000 fd19 	bl	8004c4e <osMessagePut>
}
 800421c:	2000      	movs	r0, #0
 800421e:	b007      	add	sp, #28
 8004220:	bd30      	pop	{r4, r5, pc}
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8004222:	2101      	movs	r1, #1
 8004224:	4620      	mov	r0, r4
 8004226:	f000 fbee 	bl	8004a06 <USBH_SetFeature>
 800422a:	2800      	cmp	r0, #0
 800422c:	d1ee      	bne.n	800420c <USBH_Process+0x1d6>
          phost->gState = HOST_CHECK_CLASS;
 800422e:	230a      	movs	r3, #10
 8004230:	7023      	strb	r3, [r4, #0]
 8004232:	e7eb      	b.n	800420c <USBH_Process+0x1d6>
      if (phost->ClassNumber == 0U)
 8004234:	f8d4 3380 	ldr.w	r3, [r4, #896]	@ 0x380
 8004238:	b18b      	cbz	r3, 800425e <USBH_Process+0x228>
        phost->pActiveClass = NULL;
 800423a:	2300      	movs	r3, #0
 800423c:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004240:	b1b3      	cbz	r3, 8004270 <USBH_Process+0x23a>
        if (phost->pActiveClass != NULL)
 8004242:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 8004246:	b32b      	cbz	r3, 8004294 <USBH_Process+0x25e>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	4620      	mov	r0, r4
 800424c:	4798      	blx	r3
 800424e:	b9f0      	cbnz	r0, 800428e <USBH_Process+0x258>
            phost->gState = HOST_CLASS_REQUEST;
 8004250:	2306      	movs	r3, #6
 8004252:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8004254:	f8d4 33d4 	ldr.w	r3, [r4, #980]	@ 0x3d4
 8004258:	2103      	movs	r1, #3
 800425a:	4620      	mov	r0, r4
 800425c:	4798      	blx	r3
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800425e:	2105      	movs	r1, #5
 8004260:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004264:	2200      	movs	r2, #0
 8004266:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 800426a:	f000 fcf0 	bl	8004c4e <osMessagePut>
      break;
 800426e:	e7d5      	b.n	800421c <USBH_Process+0x1e6>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004270:	f103 02de 	add.w	r2, r3, #222	@ 0xde
 8004274:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004278:	7910      	ldrb	r0, [r2, #4]
 800427a:	f894 1347 	ldrb.w	r1, [r4, #839]	@ 0x347
 800427e:	4288      	cmp	r0, r1
 8004280:	d002      	beq.n	8004288 <USBH_Process+0x252>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004282:	3301      	adds	r3, #1
 8004284:	b2db      	uxtb	r3, r3
 8004286:	e7db      	b.n	8004240 <USBH_Process+0x20a>
            phost->pActiveClass = phost->pClass[idx];
 8004288:	f8c4 237c 	str.w	r2, [r4, #892]	@ 0x37c
            break;
 800428c:	e7d9      	b.n	8004242 <USBH_Process+0x20c>
            phost->gState = HOST_ABORT_STATE;
 800428e:	230d      	movs	r3, #13
 8004290:	7023      	strb	r3, [r4, #0]
 8004292:	e7e4      	b.n	800425e <USBH_Process+0x228>
          phost->gState = HOST_ABORT_STATE;
 8004294:	230d      	movs	r3, #13
 8004296:	7023      	strb	r3, [r4, #0]
 8004298:	e7e1      	b.n	800425e <USBH_Process+0x228>
      if (phost->pActiveClass != NULL)
 800429a:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 800429e:	b1d3      	cbz	r3, 80042d6 <USBH_Process+0x2a0>
        status = phost->pActiveClass->Requests(phost);
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	4620      	mov	r0, r4
 80042a4:	4798      	blx	r3
 80042a6:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 80042aa:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80042ae:	b953      	cbnz	r3, 80042c6 <USBH_Process+0x290>
          phost->gState = HOST_CLASS;
 80042b0:	230b      	movs	r3, #11
 80042b2:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80042b4:	2105      	movs	r1, #5
 80042b6:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 80042c0:	f000 fcc5 	bl	8004c4e <osMessagePut>
      break;
 80042c4:	e7aa      	b.n	800421c <USBH_Process+0x1e6>
        else if (status == USBH_FAIL)
 80042c6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d1f1      	bne.n	80042b4 <USBH_Process+0x27e>
          phost->gState = HOST_ABORT_STATE;
 80042d0:	230d      	movs	r3, #13
 80042d2:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 80042d4:	e7ee      	b.n	80042b4 <USBH_Process+0x27e>
        phost->gState = HOST_ABORT_STATE;
 80042d6:	230d      	movs	r3, #13
 80042d8:	7023      	strb	r3, [r4, #0]
 80042da:	e7eb      	b.n	80042b4 <USBH_Process+0x27e>
      if (phost->pActiveClass != NULL)
 80042dc:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d09b      	beq.n	800421c <USBH_Process+0x1e6>
        phost->pActiveClass->BgndProcess(phost);
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	4620      	mov	r0, r4
 80042e8:	4798      	blx	r3
 80042ea:	e797      	b.n	800421c <USBH_Process+0x1e6>
      phost->device.is_disconnected = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	f884 3321 	strb.w	r3, [r4, #801]	@ 0x321
      DeInitStateMachine(phost);
 80042f2:	4620      	mov	r0, r4
 80042f4:	f7ff fc6e 	bl	8003bd4 <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 80042f8:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 80042fc:	b12b      	cbz	r3, 800430a <USBH_Process+0x2d4>
        phost->pActiveClass->DeInit(phost);
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4620      	mov	r0, r4
 8004302:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8004304:	2300      	movs	r3, #0
 8004306:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
      if (phost->pUser != NULL)
 800430a:	f8d4 33d4 	ldr.w	r3, [r4, #980]	@ 0x3d4
 800430e:	b113      	cbz	r3, 8004316 <USBH_Process+0x2e0>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8004310:	2105      	movs	r1, #5
 8004312:	4620      	mov	r0, r4
 8004314:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 8004316:	f894 3322 	ldrb.w	r3, [r4, #802]	@ 0x322
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	d00b      	beq.n	8004338 <USBH_Process+0x302>
        USBH_LL_Start(phost);
 8004320:	4620      	mov	r0, r4
 8004322:	f002 f9ca 	bl	80066ba <USBH_LL_Start>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004326:	2101      	movs	r1, #1
 8004328:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800432c:	2200      	movs	r2, #0
 800432e:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8004332:	f000 fc8c 	bl	8004c4e <osMessagePut>
      break;
 8004336:	e771      	b.n	800421c <USBH_Process+0x1e6>
        phost->device.is_ReEnumerated = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	f884 3322 	strb.w	r3, [r4, #802]	@ 0x322
        USBH_Start(phost);
 800433e:	4620      	mov	r0, r4
 8004340:	f7ff fe6f 	bl	8004022 <USBH_Start>
 8004344:	e7ef      	b.n	8004326 <USBH_Process+0x2f0>

08004346 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8004346:	b500      	push	{lr}
 8004348:	b085      	sub	sp, #20
 800434a:	4604      	mov	r4, r0
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800434c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004350:	f8d4 13d8 	ldr.w	r1, [r4, #984]	@ 0x3d8
 8004354:	a801      	add	r0, sp, #4
 8004356:	f000 fcad 	bl	8004cb4 <osMessageGet>
    if (event.status == osEventMessage)
 800435a:	9b01      	ldr	r3, [sp, #4]
 800435c:	2b10      	cmp	r3, #16
 800435e:	d1f5      	bne.n	800434c <USBH_Process_OS+0x6>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8004360:	4620      	mov	r0, r4
 8004362:	f7ff fe68 	bl	8004036 <USBH_Process>
 8004366:	e7f1      	b.n	800434c <USBH_Process_OS+0x6>

08004368 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8004368:	f8c0 13c4 	str.w	r1, [r0, #964]	@ 0x3c4
}
 800436c:	4770      	bx	lr

0800436e <USBH_LL_IncTimer>:
{
 800436e:	b508      	push	{r3, lr}
  phost->Timer++;
 8004370:	f8d0 23c4 	ldr.w	r2, [r0, #964]	@ 0x3c4
 8004374:	3201      	adds	r2, #1
 8004376:	f8c0 23c4 	str.w	r2, [r0, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800437a:	f7ff fc5c 	bl	8003c36 <USBH_HandleSof>
}
 800437e:	bd08      	pop	{r3, pc}

08004380 <USBH_LL_PortEnabled>:
{
 8004380:	b508      	push	{r3, lr}
  phost->device.PortEnabled = 1U;
 8004382:	2101      	movs	r1, #1
 8004384:	f880 1323 	strb.w	r1, [r0, #803]	@ 0x323
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004388:	f8c0 13e0 	str.w	r1, [r0, #992]	@ 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800438c:	2200      	movs	r2, #0
 800438e:	f8d0 03d8 	ldr.w	r0, [r0, #984]	@ 0x3d8
 8004392:	f000 fc5c 	bl	8004c4e <osMessagePut>
}
 8004396:	bd08      	pop	{r3, pc}

08004398 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	f880 3323 	strb.w	r3, [r0, #803]	@ 0x323
}
 800439e:	4770      	bx	lr

080043a0 <USBH_LL_Connect>:
{
 80043a0:	b510      	push	{r4, lr}
  phost->device.is_connected = 1U;
 80043a2:	2101      	movs	r1, #1
 80043a4:	f880 1320 	strb.w	r1, [r0, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80043a8:	2400      	movs	r4, #0
 80043aa:	f880 4321 	strb.w	r4, [r0, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80043ae:	f880 4322 	strb.w	r4, [r0, #802]	@ 0x322
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80043b2:	f8c0 13e0 	str.w	r1, [r0, #992]	@ 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80043b6:	4622      	mov	r2, r4
 80043b8:	f8d0 03d8 	ldr.w	r0, [r0, #984]	@ 0x3d8
 80043bc:	f000 fc47 	bl	8004c4e <osMessagePut>
}
 80043c0:	4620      	mov	r0, r4
 80043c2:	bd10      	pop	{r4, pc}

080043c4 <USBH_LL_Disconnect>:
{
 80043c4:	b570      	push	{r4, r5, r6, lr}
 80043c6:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
 80043c8:	2601      	movs	r6, #1
 80043ca:	f880 6321 	strb.w	r6, [r0, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80043ce:	2500      	movs	r5, #0
 80043d0:	f880 5320 	strb.w	r5, [r0, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80043d4:	f880 5323 	strb.w	r5, [r0, #803]	@ 0x323
  USBH_LL_Stop(phost);
 80043d8:	f002 f977 	bl	80066ca <USBH_LL_Stop>
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80043dc:	7921      	ldrb	r1, [r4, #4]
 80043de:	4620      	mov	r0, r4
 80043e0:	f000 fbca 	bl	8004b78 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80043e4:	7961      	ldrb	r1, [r4, #5]
 80043e6:	4620      	mov	r0, r4
 80043e8:	f000 fbc6 	bl	8004b78 <USBH_FreePipe>
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80043ec:	f8c4 63e0 	str.w	r6, [r4, #992]	@ 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80043f0:	462a      	mov	r2, r5
 80043f2:	4631      	mov	r1, r6
 80043f4:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 80043f8:	f000 fc29 	bl	8004c4e <osMessagePut>
}
 80043fc:	4628      	mov	r0, r5
 80043fe:	bd70      	pop	{r4, r5, r6, pc}

08004400 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8004400:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004402:	2101      	movs	r1, #1
 8004404:	f8c0 13e0 	str.w	r1, [r0, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004408:	2200      	movs	r2, #0
 800440a:	f8d0 03d8 	ldr.w	r0, [r0, #984]	@ 0x3d8
 800440e:	f000 fc1e 	bl	8004c4e <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
}
 8004412:	2000      	movs	r0, #0
 8004414:	bd08      	pop	{r3, pc}

08004416 <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8004416:	780b      	ldrb	r3, [r1, #0]
 8004418:	7003      	strb	r3, [r0, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800441a:	784b      	ldrb	r3, [r1, #1]
 800441c:	7043      	strb	r3, [r0, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800441e:	788b      	ldrb	r3, [r1, #2]
 8004420:	f891 c003 	ldrb.w	ip, [r1, #3]
 8004424:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8004428:	8043      	strh	r3, [r0, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800442a:	790b      	ldrb	r3, [r1, #4]
 800442c:	7103      	strb	r3, [r0, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800442e:	794b      	ldrb	r3, [r1, #5]
 8004430:	7143      	strb	r3, [r0, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8004432:	798b      	ldrb	r3, [r1, #6]
 8004434:	7183      	strb	r3, [r0, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8004436:	79cb      	ldrb	r3, [r1, #7]
 8004438:	71c3      	strb	r3, [r0, #7]

  if (length > 8U)
 800443a:	2a08      	cmp	r2, #8
 800443c:	d916      	bls.n	800446c <USBH_ParseDevDesc+0x56>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800443e:	7a0b      	ldrb	r3, [r1, #8]
 8004440:	7a4a      	ldrb	r2, [r1, #9]
 8004442:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004446:	8103      	strh	r3, [r0, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8004448:	7a8b      	ldrb	r3, [r1, #10]
 800444a:	7aca      	ldrb	r2, [r1, #11]
 800444c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004450:	8143      	strh	r3, [r0, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8004452:	7b0b      	ldrb	r3, [r1, #12]
 8004454:	7b4a      	ldrb	r2, [r1, #13]
 8004456:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800445a:	8183      	strh	r3, [r0, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800445c:	7b8b      	ldrb	r3, [r1, #14]
 800445e:	7383      	strb	r3, [r0, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8004460:	7bcb      	ldrb	r3, [r1, #15]
 8004462:	73c3      	strb	r3, [r0, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8004464:	7c0b      	ldrb	r3, [r1, #16]
 8004466:	7403      	strb	r3, [r0, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8004468:	7c4b      	ldrb	r3, [r1, #17]
 800446a:	7443      	strb	r3, [r0, #17]
  }
}
 800446c:	4770      	bx	lr

0800446e <USBH_ParseInterfaceDesc>:
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800446e:	780b      	ldrb	r3, [r1, #0]
 8004470:	7003      	strb	r3, [r0, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8004472:	784b      	ldrb	r3, [r1, #1]
 8004474:	7043      	strb	r3, [r0, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8004476:	788b      	ldrb	r3, [r1, #2]
 8004478:	7083      	strb	r3, [r0, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800447a:	78cb      	ldrb	r3, [r1, #3]
 800447c:	70c3      	strb	r3, [r0, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800447e:	790b      	ldrb	r3, [r1, #4]
 8004480:	7103      	strb	r3, [r0, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8004482:	794b      	ldrb	r3, [r1, #5]
 8004484:	7143      	strb	r3, [r0, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8004486:	798b      	ldrb	r3, [r1, #6]
 8004488:	7183      	strb	r3, [r0, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800448a:	79cb      	ldrb	r3, [r1, #7]
 800448c:	71c3      	strb	r3, [r0, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800448e:	7a0b      	ldrb	r3, [r1, #8]
 8004490:	7203      	strb	r3, [r0, #8]
}
 8004492:	4770      	bx	lr

08004494 <USBH_ParseEPDesc>:
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8004494:	780b      	ldrb	r3, [r1, #0]
 8004496:	7003      	strb	r3, [r0, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8004498:	784b      	ldrb	r3, [r1, #1]
 800449a:	7043      	strb	r3, [r0, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800449c:	788b      	ldrb	r3, [r1, #2]
 800449e:	7083      	strb	r3, [r0, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80044a0:	78cb      	ldrb	r3, [r1, #3]
 80044a2:	70c3      	strb	r3, [r0, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80044a4:	790b      	ldrb	r3, [r1, #4]
 80044a6:	794a      	ldrb	r2, [r1, #5]
 80044a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80044ac:	8083      	strh	r3, [r0, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80044ae:	798b      	ldrb	r3, [r1, #6]
 80044b0:	7183      	strb	r3, [r0, #6]
}
 80044b2:	4770      	bx	lr

080044b4 <USBH_ParseStringDesc>:
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80044b4:	7843      	ldrb	r3, [r0, #1]
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d000      	beq.n	80044bc <USBH_ParseStringDesc+0x8>
      *pdest =  psrc[idx];
      pdest++;
    }
    *pdest = 0U; /* mark end of string */
  }
}
 80044ba:	4770      	bx	lr
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80044bc:	7803      	ldrb	r3, [r0, #0]
 80044be:	3b02      	subs	r3, #2
 80044c0:	429a      	cmp	r2, r3
 80044c2:	bf28      	it	cs
 80044c4:	461a      	movcs	r2, r3
 80044c6:	b292      	uxth	r2, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 80044c8:	2300      	movs	r3, #0
 80044ca:	e007      	b.n	80044dc <USBH_ParseStringDesc+0x28>
      *pdest =  psrc[idx];
 80044cc:	eb00 0c03 	add.w	ip, r0, r3
 80044d0:	f89c c002 	ldrb.w	ip, [ip, #2]
 80044d4:	f801 cb01 	strb.w	ip, [r1], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 80044d8:	3302      	adds	r3, #2
 80044da:	b29b      	uxth	r3, r3
 80044dc:	4293      	cmp	r3, r2
 80044de:	d3f5      	bcc.n	80044cc <USBH_ParseStringDesc+0x18>
    *pdest = 0U; /* mark end of string */
 80044e0:	2300      	movs	r3, #0
 80044e2:	700b      	strb	r3, [r1, #0]
}
 80044e4:	e7e9      	b.n	80044ba <USBH_ParseStringDesc+0x6>

080044e6 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80044e6:	b530      	push	{r4, r5, lr}
 80044e8:	b083      	sub	sp, #12
 80044ea:	4604      	mov	r4, r0
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 80044ec:	7e05      	ldrb	r5, [r0, #24]
 80044ee:	1e6b      	subs	r3, r5, #1
 80044f0:	2b0a      	cmp	r3, #10
 80044f2:	f200 815e 	bhi.w	80047b2 <USBH_HandleControl+0x2cc>
 80044f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80044fa:	000b      	.short	0x000b
 80044fc:	004a0015 	.word	0x004a0015
 8004500:	00830056 	.word	0x00830056
 8004504:	00cc0090 	.word	0x00cc0090
 8004508:	010500d8 	.word	0x010500d8
 800450c:	01410112 	.word	0x01410112
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8004510:	7942      	ldrb	r2, [r0, #5]
 8004512:	f100 0110 	add.w	r1, r0, #16
 8004516:	f000 fa87 	bl	8004a28 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800451a:	2302      	movs	r3, #2
 800451c:	7623      	strb	r3, [r4, #24]
    default:
      break;
  }

  return status;
}
 800451e:	4628      	mov	r0, r5
 8004520:	b003      	add	sp, #12
 8004522:	bd30      	pop	{r4, r5, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004524:	7941      	ldrb	r1, [r0, #5]
 8004526:	f002 f891 	bl	800664c <USBH_LL_GetURBState>
 800452a:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800452c:	2801      	cmp	r0, #1
 800452e:	d005      	beq.n	800453c <USBH_HandleControl+0x56>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8004530:	2804      	cmp	r0, #4
 8004532:	d020      	beq.n	8004576 <USBH_HandleControl+0x90>
 8004534:	2802      	cmp	r0, #2
 8004536:	d01e      	beq.n	8004576 <USBH_HandleControl+0x90>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004538:	2501      	movs	r5, #1
 800453a:	e7f0      	b.n	800451e <USBH_HandleControl+0x38>
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800453c:	7c23      	ldrb	r3, [r4, #16]
        if (phost->Control.setup.b.wLength.w != 0U)
 800453e:	8ae2      	ldrh	r2, [r4, #22]
 8004540:	b182      	cbz	r2, 8004564 <USBH_HandleControl+0x7e>
          if (direction == USB_D2H)
 8004542:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004546:	d10a      	bne.n	800455e <USBH_HandleControl+0x78>
            phost->Control.state = CTRL_DATA_OUT;
 8004548:	2305      	movs	r3, #5
 800454a:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800454c:	2103      	movs	r1, #3
 800454e:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004552:	2200      	movs	r2, #0
 8004554:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8004558:	f000 fb79 	bl	8004c4e <osMessagePut>
 800455c:	e7df      	b.n	800451e <USBH_HandleControl+0x38>
            phost->Control.state = CTRL_DATA_IN;
 800455e:	2303      	movs	r3, #3
 8004560:	7623      	strb	r3, [r4, #24]
 8004562:	e7f3      	b.n	800454c <USBH_HandleControl+0x66>
          if (direction == USB_D2H)
 8004564:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004568:	d102      	bne.n	8004570 <USBH_HandleControl+0x8a>
            phost->Control.state = CTRL_STATUS_IN;
 800456a:	2307      	movs	r3, #7
 800456c:	7623      	strb	r3, [r4, #24]
 800456e:	e7ed      	b.n	800454c <USBH_HandleControl+0x66>
            phost->Control.state = CTRL_STATUS_OUT;
 8004570:	2309      	movs	r3, #9
 8004572:	7623      	strb	r3, [r4, #24]
 8004574:	e7ea      	b.n	800454c <USBH_HandleControl+0x66>
          phost->Control.state = CTRL_ERROR;
 8004576:	230b      	movs	r3, #11
 8004578:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800457a:	2103      	movs	r1, #3
 800457c:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004580:	2200      	movs	r2, #0
 8004582:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8004586:	f000 fb62 	bl	8004c4e <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 800458a:	2501      	movs	r5, #1
 800458c:	e7c7      	b.n	800451e <USBH_HandleControl+0x38>
      phost->Control.timer = (uint16_t)phost->Timer;
 800458e:	f8d0 33c4 	ldr.w	r3, [r0, #964]	@ 0x3c4
 8004592:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8004594:	7903      	ldrb	r3, [r0, #4]
 8004596:	8982      	ldrh	r2, [r0, #12]
 8004598:	6881      	ldr	r1, [r0, #8]
 800459a:	f000 fa6c 	bl	8004a76 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 800459e:	2304      	movs	r3, #4
 80045a0:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 80045a2:	2501      	movs	r5, #1
      break;
 80045a4:	e7bb      	b.n	800451e <USBH_HandleControl+0x38>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80045a6:	7901      	ldrb	r1, [r0, #4]
 80045a8:	f002 f850 	bl	800664c <USBH_LL_GetURBState>
 80045ac:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 80045ae:	2801      	cmp	r0, #1
 80045b0:	d005      	beq.n	80045be <USBH_HandleControl+0xd8>
      if (URB_Status == USBH_URB_STALL)
 80045b2:	2d05      	cmp	r5, #5
 80045b4:	d00e      	beq.n	80045d4 <USBH_HandleControl+0xee>
        if (URB_Status == USBH_URB_ERROR)
 80045b6:	2d04      	cmp	r5, #4
 80045b8:	d016      	beq.n	80045e8 <USBH_HandleControl+0x102>
  USBH_StatusTypeDef status = USBH_BUSY;
 80045ba:	2501      	movs	r5, #1
 80045bc:	e7af      	b.n	800451e <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_STATUS_OUT;
 80045be:	2309      	movs	r3, #9
 80045c0:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80045c2:	2103      	movs	r1, #3
 80045c4:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80045c8:	2200      	movs	r2, #0
 80045ca:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 80045ce:	f000 fb3e 	bl	8004c4e <osMessagePut>
 80045d2:	e7ee      	b.n	80045b2 <USBH_HandleControl+0xcc>
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80045d4:	2503      	movs	r5, #3
 80045d6:	f8c4 53e0 	str.w	r5, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80045da:	2200      	movs	r2, #0
 80045dc:	4629      	mov	r1, r5
 80045de:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 80045e2:	f000 fb34 	bl	8004c4e <osMessagePut>
 80045e6:	e79a      	b.n	800451e <USBH_HandleControl+0x38>
          phost->Control.state = CTRL_ERROR;
 80045e8:	230b      	movs	r3, #11
 80045ea:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80045ec:	2103      	movs	r1, #3
 80045ee:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 80045f8:	f000 fb29 	bl	8004c4e <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 80045fc:	2501      	movs	r5, #1
 80045fe:	e78e      	b.n	800451e <USBH_HandleControl+0x38>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8004600:	2501      	movs	r5, #1
 8004602:	9500      	str	r5, [sp, #0]
 8004604:	7943      	ldrb	r3, [r0, #5]
 8004606:	8982      	ldrh	r2, [r0, #12]
 8004608:	6881      	ldr	r1, [r0, #8]
 800460a:	f000 fa1e 	bl	8004a4a <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800460e:	f8d4 33c4 	ldr.w	r3, [r4, #964]	@ 0x3c4
 8004612:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8004614:	2306      	movs	r3, #6
 8004616:	7623      	strb	r3, [r4, #24]
      break;
 8004618:	e781      	b.n	800451e <USBH_HandleControl+0x38>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800461a:	7941      	ldrb	r1, [r0, #5]
 800461c:	f002 f816 	bl	800664c <USBH_LL_GetURBState>
 8004620:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8004622:	1e43      	subs	r3, r0, #1
 8004624:	2b04      	cmp	r3, #4
 8004626:	f200 80c6 	bhi.w	80047b6 <USBH_HandleControl+0x2d0>
 800462a:	e8df f003 	tbb	[pc, r3]
 800462e:	1a03      	.short	0x1a03
 8004630:	26c4      	.short	0x26c4
 8004632:	0e          	.byte	0x0e
 8004633:	00          	.byte	0x00
        phost->Control.state = CTRL_STATUS_IN;
 8004634:	2307      	movs	r3, #7
 8004636:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004638:	2103      	movs	r1, #3
 800463a:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800463e:	2200      	movs	r2, #0
 8004640:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8004644:	f000 fb03 	bl	8004c4e <osMessagePut>
 8004648:	e769      	b.n	800451e <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_STALLED;
 800464a:	230c      	movs	r3, #12
 800464c:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800464e:	2503      	movs	r5, #3
 8004650:	f8c4 53e0 	str.w	r5, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004654:	2200      	movs	r2, #0
 8004656:	4629      	mov	r1, r5
 8004658:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 800465c:	f000 faf7 	bl	8004c4e <osMessagePut>
 8004660:	e75d      	b.n	800451e <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_DATA_OUT;
 8004662:	2305      	movs	r3, #5
 8004664:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004666:	2103      	movs	r1, #3
 8004668:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800466c:	2200      	movs	r2, #0
 800466e:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8004672:	f000 faec 	bl	8004c4e <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004676:	2501      	movs	r5, #1
 8004678:	e751      	b.n	800451e <USBH_HandleControl+0x38>
          phost->Control.state = CTRL_ERROR;
 800467a:	230b      	movs	r3, #11
 800467c:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800467e:	2103      	movs	r1, #3
 8004680:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004684:	2200      	movs	r2, #0
 8004686:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 800468a:	f000 fae0 	bl	8004c4e <osMessagePut>
          status = USBH_FAIL;
 800468e:	2502      	movs	r5, #2
 8004690:	e745      	b.n	800451e <USBH_HandleControl+0x38>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8004692:	7903      	ldrb	r3, [r0, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	4611      	mov	r1, r2
 8004698:	f000 f9ed 	bl	8004a76 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800469c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	@ 0x3c4
 80046a0:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80046a2:	2308      	movs	r3, #8
 80046a4:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 80046a6:	2501      	movs	r5, #1
      break;
 80046a8:	e739      	b.n	800451e <USBH_HandleControl+0x38>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80046aa:	7901      	ldrb	r1, [r0, #4]
 80046ac:	f001 ffce 	bl	800664c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80046b0:	2801      	cmp	r0, #1
 80046b2:	d005      	beq.n	80046c0 <USBH_HandleControl+0x1da>
      else if (URB_Status == USBH_URB_ERROR)
 80046b4:	2804      	cmp	r0, #4
 80046b6:	d00f      	beq.n	80046d8 <USBH_HandleControl+0x1f2>
        if (URB_Status == USBH_URB_STALL)
 80046b8:	2805      	cmp	r0, #5
 80046ba:	d019      	beq.n	80046f0 <USBH_HandleControl+0x20a>
  USBH_StatusTypeDef status = USBH_BUSY;
 80046bc:	2501      	movs	r5, #1
 80046be:	e72e      	b.n	800451e <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_COMPLETE;
 80046c0:	230d      	movs	r3, #13
 80046c2:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80046c4:	2103      	movs	r1, #3
 80046c6:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 80046d0:	f000 fabd 	bl	8004c4e <osMessagePut>
        status = USBH_OK;
 80046d4:	2500      	movs	r5, #0
 80046d6:	e722      	b.n	800451e <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_ERROR;
 80046d8:	230b      	movs	r3, #11
 80046da:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80046dc:	2103      	movs	r1, #3
 80046de:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80046e2:	2200      	movs	r2, #0
 80046e4:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 80046e8:	f000 fab1 	bl	8004c4e <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 80046ec:	2501      	movs	r5, #1
 80046ee:	e716      	b.n	800451e <USBH_HandleControl+0x38>
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80046f0:	2503      	movs	r5, #3
 80046f2:	f8c4 53e0 	str.w	r5, [r4, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80046f6:	2200      	movs	r2, #0
 80046f8:	4629      	mov	r1, r5
 80046fa:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 80046fe:	f000 faa6 	bl	8004c4e <osMessagePut>
 8004702:	e70c      	b.n	800451e <USBH_HandleControl+0x38>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8004704:	2501      	movs	r5, #1
 8004706:	9500      	str	r5, [sp, #0]
 8004708:	7943      	ldrb	r3, [r0, #5]
 800470a:	2200      	movs	r2, #0
 800470c:	4611      	mov	r1, r2
 800470e:	f000 f99c 	bl	8004a4a <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8004712:	f8d4 33c4 	ldr.w	r3, [r4, #964]	@ 0x3c4
 8004716:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8004718:	230a      	movs	r3, #10
 800471a:	7623      	strb	r3, [r4, #24]
      break;
 800471c:	e6ff      	b.n	800451e <USBH_HandleControl+0x38>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800471e:	7941      	ldrb	r1, [r0, #5]
 8004720:	f001 ff94 	bl	800664c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8004724:	2801      	cmp	r0, #1
 8004726:	d005      	beq.n	8004734 <USBH_HandleControl+0x24e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8004728:	2802      	cmp	r0, #2
 800472a:	d00f      	beq.n	800474c <USBH_HandleControl+0x266>
        if (URB_Status == USBH_URB_ERROR)
 800472c:	2804      	cmp	r0, #4
 800472e:	d019      	beq.n	8004764 <USBH_HandleControl+0x27e>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004730:	2501      	movs	r5, #1
 8004732:	e6f4      	b.n	800451e <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_COMPLETE;
 8004734:	230d      	movs	r3, #13
 8004736:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004738:	2103      	movs	r1, #3
 800473a:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800473e:	2200      	movs	r2, #0
 8004740:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8004744:	f000 fa83 	bl	8004c4e <osMessagePut>
        status = USBH_OK;
 8004748:	2500      	movs	r5, #0
 800474a:	e6e8      	b.n	800451e <USBH_HandleControl+0x38>
        phost->Control.state = CTRL_STATUS_OUT;
 800474c:	2309      	movs	r3, #9
 800474e:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004750:	2103      	movs	r1, #3
 8004752:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004756:	2200      	movs	r2, #0
 8004758:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 800475c:	f000 fa77 	bl	8004c4e <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004760:	2501      	movs	r5, #1
 8004762:	e6dc      	b.n	800451e <USBH_HandleControl+0x38>
          phost->Control.state = CTRL_ERROR;
 8004764:	230b      	movs	r3, #11
 8004766:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004768:	2103      	movs	r1, #3
 800476a:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800476e:	2200      	movs	r2, #0
 8004770:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 8004774:	f000 fa6b 	bl	8004c4e <osMessagePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004778:	2501      	movs	r5, #1
 800477a:	e6d0      	b.n	800451e <USBH_HandleControl+0x38>
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800477c:	7e43      	ldrb	r3, [r0, #25]
 800477e:	3301      	adds	r3, #1
 8004780:	b2db      	uxtb	r3, r3
 8004782:	7643      	strb	r3, [r0, #25]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d803      	bhi.n	8004790 <USBH_HandleControl+0x2aa>
        phost->Control.state = CTRL_SETUP;
 8004788:	2501      	movs	r5, #1
 800478a:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 800478c:	7085      	strb	r5, [r0, #2]
 800478e:	e6c6      	b.n	800451e <USBH_HandleControl+0x38>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8004790:	f8d0 33d4 	ldr.w	r3, [r0, #980]	@ 0x3d4
 8004794:	2106      	movs	r1, #6
 8004796:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8004798:	2500      	movs	r5, #0
 800479a:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800479c:	7961      	ldrb	r1, [r4, #5]
 800479e:	4620      	mov	r0, r4
 80047a0:	f000 f9ea 	bl	8004b78 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80047a4:	7921      	ldrb	r1, [r4, #4]
 80047a6:	4620      	mov	r0, r4
 80047a8:	f000 f9e6 	bl	8004b78 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80047ac:	7025      	strb	r5, [r4, #0]
        status = USBH_FAIL;
 80047ae:	2502      	movs	r5, #2
 80047b0:	e6b5      	b.n	800451e <USBH_HandleControl+0x38>
  switch (phost->Control.state)
 80047b2:	2501      	movs	r5, #1
 80047b4:	e6b3      	b.n	800451e <USBH_HandleControl+0x38>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80047b6:	2501      	movs	r5, #1
 80047b8:	e6b1      	b.n	800451e <USBH_HandleControl+0x38>

080047ba <USBH_GetNextDesc>:
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80047ba:	880b      	ldrh	r3, [r1, #0]
 80047bc:	7802      	ldrb	r2, [r0, #0]
 80047be:	4413      	add	r3, r2
 80047c0:	800b      	strh	r3, [r1, #0]
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80047c2:	7803      	ldrb	r3, [r0, #0]
}
 80047c4:	4418      	add	r0, r3
 80047c6:	4770      	bx	lr

080047c8 <USBH_ParseCfgDesc>:
{
 80047c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	460c      	mov	r4, r1
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80047d0:	780b      	ldrb	r3, [r1, #0]
 80047d2:	7003      	strb	r3, [r0, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80047d4:	784b      	ldrb	r3, [r1, #1]
 80047d6:	7043      	strb	r3, [r0, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80047d8:	788b      	ldrb	r3, [r1, #2]
 80047da:	78c9      	ldrb	r1, [r1, #3]
 80047dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80047e0:	8043      	strh	r3, [r0, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80047e2:	7923      	ldrb	r3, [r4, #4]
 80047e4:	7103      	strb	r3, [r0, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80047e6:	7963      	ldrb	r3, [r4, #5]
 80047e8:	7143      	strb	r3, [r0, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80047ea:	79a3      	ldrb	r3, [r4, #6]
 80047ec:	7183      	strb	r3, [r0, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80047ee:	79e3      	ldrb	r3, [r4, #7]
 80047f0:	71c3      	strb	r3, [r0, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80047f2:	7a23      	ldrb	r3, [r4, #8]
 80047f4:	7203      	strb	r3, [r0, #8]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80047f6:	2a09      	cmp	r2, #9
 80047f8:	d944      	bls.n	8004884 <USBH_ParseCfgDesc+0xbc>
 80047fa:	4605      	mov	r5, r0
    ptr = USB_LEN_CFG_DESC;
 80047fc:	2309      	movs	r3, #9
 80047fe:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t                      if_ix = 0U;
 8004802:	2600      	movs	r6, #0
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8004804:	2e01      	cmp	r6, #1
 8004806:	d83d      	bhi.n	8004884 <USBH_ParseCfgDesc+0xbc>
 8004808:	886a      	ldrh	r2, [r5, #2]
 800480a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800480e:	429a      	cmp	r2, r3
 8004810:	d938      	bls.n	8004884 <USBH_ParseCfgDesc+0xbc>
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8004812:	f10d 0106 	add.w	r1, sp, #6
 8004816:	4620      	mov	r0, r4
 8004818:	f7ff ffcf 	bl	80047ba <USBH_GetNextDesc>
 800481c:	4604      	mov	r4, r0
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800481e:	7843      	ldrb	r3, [r0, #1]
 8004820:	2b04      	cmp	r3, #4
 8004822:	d1ef      	bne.n	8004804 <USBH_ParseCfgDesc+0x3c>
        pif = &cfg_desc->Itf_Desc[if_ix];
 8004824:	46b0      	mov	r8, r6
 8004826:	201a      	movs	r0, #26
 8004828:	fb06 f000 	mul.w	r0, r6, r0
 800482c:	3008      	adds	r0, #8
 800482e:	4428      	add	r0, r5
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8004830:	4621      	mov	r1, r4
 8004832:	3002      	adds	r0, #2
 8004834:	f7ff fe1b 	bl	800446e <USBH_ParseInterfaceDesc>
        ep_ix = 0U;
 8004838:	2700      	movs	r7, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800483a:	231a      	movs	r3, #26
 800483c:	fb03 5308 	mla	r3, r3, r8, r5
 8004840:	7b9b      	ldrb	r3, [r3, #14]
 8004842:	42bb      	cmp	r3, r7
 8004844:	d91b      	bls.n	800487e <USBH_ParseCfgDesc+0xb6>
 8004846:	886a      	ldrh	r2, [r5, #2]
 8004848:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800484c:	429a      	cmp	r2, r3
 800484e:	d916      	bls.n	800487e <USBH_ParseCfgDesc+0xb6>
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8004850:	f10d 0106 	add.w	r1, sp, #6
 8004854:	4620      	mov	r0, r4
 8004856:	f7ff ffb0 	bl	80047ba <USBH_GetNextDesc>
 800485a:	4604      	mov	r4, r0
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800485c:	7843      	ldrb	r3, [r0, #1]
 800485e:	2b05      	cmp	r3, #5
 8004860:	d1eb      	bne.n	800483a <USBH_ParseCfgDesc+0x72>
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8004862:	3701      	adds	r7, #1
 8004864:	201a      	movs	r0, #26
 8004866:	fb00 f008 	mul.w	r0, r0, r8
 800486a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 800486e:	3008      	adds	r0, #8
 8004870:	4428      	add	r0, r5
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8004872:	4621      	mov	r1, r4
 8004874:	3004      	adds	r0, #4
 8004876:	f7ff fe0d 	bl	8004494 <USBH_ParseEPDesc>
            ep_ix++;
 800487a:	b2ff      	uxtb	r7, r7
 800487c:	e7dd      	b.n	800483a <USBH_ParseCfgDesc+0x72>
        if_ix++;
 800487e:	3601      	adds	r6, #1
 8004880:	b2f6      	uxtb	r6, r6
 8004882:	e7bf      	b.n	8004804 <USBH_ParseCfgDesc+0x3c>
}
 8004884:	b002      	add	sp, #8
 8004886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800488a <USBH_CtlReq>:
{
 800488a:	b538      	push	{r3, r4, r5, lr}
 800488c:	4604      	mov	r4, r0
  switch (phost->RequestState)
 800488e:	7885      	ldrb	r5, [r0, #2]
 8004890:	2d01      	cmp	r5, #1
 8004892:	d003      	beq.n	800489c <USBH_CtlReq+0x12>
 8004894:	2d02      	cmp	r5, #2
 8004896:	d011      	beq.n	80048bc <USBH_CtlReq+0x32>
 8004898:	2501      	movs	r5, #1
 800489a:	e00d      	b.n	80048b8 <USBH_CtlReq+0x2e>
      phost->Control.buff = buff;
 800489c:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 800489e:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
 80048a0:	2301      	movs	r3, #1
 80048a2:	7603      	strb	r3, [r0, #24]
      phost->RequestState = CMD_WAIT;
 80048a4:	2302      	movs	r3, #2
 80048a6:	7083      	strb	r3, [r0, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80048a8:	2103      	movs	r1, #3
 80048aa:	f8c0 13e0 	str.w	r1, [r0, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8d0 03d8 	ldr.w	r0, [r0, #984]	@ 0x3d8
 80048b4:	f000 f9cb 	bl	8004c4e <osMessagePut>
}
 80048b8:	4628      	mov	r0, r5
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
      status = USBH_HandleControl(phost);
 80048bc:	f7ff fe13 	bl	80044e6 <USBH_HandleControl>
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80048c0:	4605      	mov	r5, r0
 80048c2:	b130      	cbz	r0, 80048d2 <USBH_CtlReq+0x48>
 80048c4:	2803      	cmp	r0, #3
 80048c6:	d004      	beq.n	80048d2 <USBH_CtlReq+0x48>
      else if (status == USBH_FAIL)
 80048c8:	2802      	cmp	r0, #2
 80048ca:	d106      	bne.n	80048da <USBH_CtlReq+0x50>
        phost->RequestState = CMD_SEND;
 80048cc:	2301      	movs	r3, #1
 80048ce:	70a3      	strb	r3, [r4, #2]
 80048d0:	e003      	b.n	80048da <USBH_CtlReq+0x50>
        phost->RequestState = CMD_SEND;
 80048d2:	2301      	movs	r3, #1
 80048d4:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80048da:	2103      	movs	r1, #3
 80048dc:	f8c4 13e0 	str.w	r1, [r4, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8d4 03d8 	ldr.w	r0, [r4, #984]	@ 0x3d8
 80048e6:	f000 f9b2 	bl	8004c4e <osMessagePut>
      break;
 80048ea:	e7e5      	b.n	80048b8 <USBH_CtlReq+0x2e>

080048ec <USBH_GetDescriptor>:
{
 80048ec:	b508      	push	{r3, lr}
 80048ee:	468e      	mov	lr, r1
 80048f0:	4694      	mov	ip, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 80048f8:	7883      	ldrb	r3, [r0, #2]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d002      	beq.n	8004904 <USBH_GetDescriptor+0x18>
  return USBH_CtlReq(phost, buff, length);
 80048fe:	f7ff ffc4 	bl	800488a <USBH_CtlReq>
}
 8004902:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8004904:	f06e 0e7f 	orn	lr, lr, #127	@ 0x7f
 8004908:	f880 e010 	strb.w	lr, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800490c:	2306      	movs	r3, #6
 800490e:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8004910:	f8a0 c012 	strh.w	ip, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8004914:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8004918:	f5bc 7f40 	cmp.w	ip, #768	@ 0x300
 800491c:	d003      	beq.n	8004926 <USBH_GetDescriptor+0x3a>
      phost->Control.setup.b.wIndex.w = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8004922:	82c2      	strh	r2, [r0, #22]
 8004924:	e7eb      	b.n	80048fe <USBH_GetDescriptor+0x12>
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8004926:	f240 4309 	movw	r3, #1033	@ 0x409
 800492a:	8283      	strh	r3, [r0, #20]
 800492c:	e7f9      	b.n	8004922 <USBH_GetDescriptor+0x36>

0800492e <USBH_Get_DevDesc>:
{
 800492e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004930:	b083      	sub	sp, #12
 8004932:	4604      	mov	r4, r0
 8004934:	460d      	mov	r5, r1
                                   USB_DESC_DEVICE, phost->device.Data,
 8004936:	f500 768e 	add.w	r6, r0, #284	@ 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800493a:	9100      	str	r1, [sp, #0]
 800493c:	4633      	mov	r3, r6
 800493e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004942:	2100      	movs	r1, #0
 8004944:	f7ff ffd2 	bl	80048ec <USBH_GetDescriptor>
 8004948:	4607      	mov	r7, r0
 800494a:	b110      	cbz	r0, 8004952 <USBH_Get_DevDesc+0x24>
}
 800494c:	4638      	mov	r0, r7
 800494e:	b003      	add	sp, #12
 8004950:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8004952:	462a      	mov	r2, r5
 8004954:	4631      	mov	r1, r6
 8004956:	f204 3026 	addw	r0, r4, #806	@ 0x326
 800495a:	f7ff fd5c 	bl	8004416 <USBH_ParseDevDesc>
 800495e:	e7f5      	b.n	800494c <USBH_Get_DevDesc+0x1e>

08004960 <USBH_Get_CfgDesc>:
{
 8004960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004962:	b083      	sub	sp, #12
 8004964:	4604      	mov	r4, r0
 8004966:	460d      	mov	r5, r1
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8004968:	f100 061c 	add.w	r6, r0, #28
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800496c:	9100      	str	r1, [sp, #0]
 800496e:	4633      	mov	r3, r6
 8004970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004974:	2100      	movs	r1, #0
 8004976:	f7ff ffb9 	bl	80048ec <USBH_GetDescriptor>
 800497a:	4607      	mov	r7, r0
 800497c:	b110      	cbz	r0, 8004984 <USBH_Get_CfgDesc+0x24>
}
 800497e:	4638      	mov	r0, r7
 8004980:	b003      	add	sp, #12
 8004982:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8004984:	462a      	mov	r2, r5
 8004986:	4631      	mov	r1, r6
 8004988:	f504 704e 	add.w	r0, r4, #824	@ 0x338
 800498c:	f7ff ff1c 	bl	80047c8 <USBH_ParseCfgDesc>
 8004990:	e7f5      	b.n	800497e <USBH_Get_CfgDesc+0x1e>

08004992 <USBH_Get_StringDesc>:
{
 8004992:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004994:	b083      	sub	sp, #12
 8004996:	4616      	mov	r6, r2
 8004998:	461d      	mov	r5, r3
                                   phost->device.Data, length)) == USBH_OK)
 800499a:	f500 748e 	add.w	r4, r0, #284	@ 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	4623      	mov	r3, r4
 80049a2:	f441 7240 	orr.w	r2, r1, #768	@ 0x300
 80049a6:	2100      	movs	r1, #0
 80049a8:	f7ff ffa0 	bl	80048ec <USBH_GetDescriptor>
 80049ac:	4607      	mov	r7, r0
 80049ae:	b110      	cbz	r0, 80049b6 <USBH_Get_StringDesc+0x24>
}
 80049b0:	4638      	mov	r0, r7
 80049b2:	b003      	add	sp, #12
 80049b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80049b6:	462a      	mov	r2, r5
 80049b8:	4631      	mov	r1, r6
 80049ba:	4620      	mov	r0, r4
 80049bc:	f7ff fd7a 	bl	80044b4 <USBH_ParseStringDesc>
 80049c0:	e7f6      	b.n	80049b0 <USBH_Get_StringDesc+0x1e>

080049c2 <USBH_SetAddress>:
{
 80049c2:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 80049c4:	7883      	ldrb	r3, [r0, #2]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d004      	beq.n	80049d4 <USBH_SetAddress+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 80049ca:	2200      	movs	r2, #0
 80049cc:	4611      	mov	r1, r2
 80049ce:	f7ff ff5c 	bl	800488a <USBH_CtlReq>
}
 80049d2:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80049d4:	2300      	movs	r3, #0
 80049d6:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80049d8:	2205      	movs	r2, #5
 80049da:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80049dc:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80049de:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80049e0:	82c3      	strh	r3, [r0, #22]
 80049e2:	e7f2      	b.n	80049ca <USBH_SetAddress+0x8>

080049e4 <USBH_SetCfg>:
{
 80049e4:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 80049e6:	7883      	ldrb	r3, [r0, #2]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d004      	beq.n	80049f6 <USBH_SetCfg+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 80049ec:	2200      	movs	r2, #0
 80049ee:	4611      	mov	r1, r2
 80049f0:	f7ff ff4b 	bl	800488a <USBH_CtlReq>
}
 80049f4:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80049f6:	2300      	movs	r3, #0
 80049f8:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80049fa:	2209      	movs	r2, #9
 80049fc:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80049fe:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004a00:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004a02:	82c3      	strh	r3, [r0, #22]
 8004a04:	e7f2      	b.n	80049ec <USBH_SetCfg+0x8>

08004a06 <USBH_SetFeature>:
{
 8004a06:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8004a08:	7883      	ldrb	r3, [r0, #2]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d004      	beq.n	8004a18 <USBH_SetFeature+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8004a0e:	2200      	movs	r2, #0
 8004a10:	4611      	mov	r1, r2
 8004a12:	f7ff ff3a 	bl	800488a <USBH_CtlReq>
}
 8004a16:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004a18:	2300      	movs	r3, #0
 8004a1a:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8004a20:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004a22:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004a24:	82c3      	strh	r3, [r0, #22]
 8004a26:	e7f2      	b.n	8004a0e <USBH_SetFeature+0x8>

08004a28 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8004a28:	b510      	push	{r4, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4611      	mov	r1, r2

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8004a30:	2400      	movs	r4, #0
 8004a32:	9403      	str	r4, [sp, #12]
 8004a34:	2208      	movs	r2, #8
 8004a36:	9202      	str	r2, [sp, #8]
 8004a38:	9301      	str	r3, [sp, #4]
 8004a3a:	9400      	str	r4, [sp, #0]
 8004a3c:	4623      	mov	r3, r4
 8004a3e:	4622      	mov	r2, r4
 8004a40:	f001 fe6e 	bl	8006720 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 8004a44:	4620      	mov	r0, r4
 8004a46:	b004      	add	sp, #16
 8004a48:	bd10      	pop	{r4, pc}

08004a4a <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8004a4a:	b530      	push	{r4, r5, lr}
 8004a4c:	b085      	sub	sp, #20
 8004a4e:	460c      	mov	r4, r1
 8004a50:	4619      	mov	r1, r3
 8004a52:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8004a56:	f890 531d 	ldrb.w	r5, [r0, #797]	@ 0x31d
 8004a5a:	b105      	cbz	r5, 8004a5e <USBH_CtlSendData+0x14>
  {
    do_ping = 0U;
 8004a5c:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8004a5e:	9303      	str	r3, [sp, #12]
 8004a60:	9202      	str	r2, [sp, #8]
 8004a62:	9401      	str	r4, [sp, #4]
 8004a64:	2301      	movs	r3, #1
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f001 fe58 	bl	8006720 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8004a70:	2000      	movs	r0, #0
 8004a72:	b005      	add	sp, #20
 8004a74:	bd30      	pop	{r4, r5, pc}

08004a76 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8004a76:	b530      	push	{r4, r5, lr}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	460d      	mov	r5, r1
 8004a7c:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8004a7e:	2400      	movs	r4, #0
 8004a80:	9403      	str	r4, [sp, #12]
 8004a82:	9202      	str	r2, [sp, #8]
 8004a84:	9501      	str	r5, [sp, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	9200      	str	r2, [sp, #0]
 8004a8a:	4623      	mov	r3, r4
 8004a8c:	f001 fe48 	bl	8006720 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 8004a90:	4620      	mov	r0, r4
 8004a92:	b005      	add	sp, #20
 8004a94:	bd30      	pop	{r4, r5, pc}

08004a96 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8004a96:	b530      	push	{r4, r5, lr}
 8004a98:	b085      	sub	sp, #20
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8004aa2:	f890 531d 	ldrb.w	r5, [r0, #797]	@ 0x31d
 8004aa6:	b105      	cbz	r5, 8004aaa <USBH_BulkSendData+0x14>
  {
    do_ping = 0U;
 8004aa8:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8004aaa:	9303      	str	r3, [sp, #12]
 8004aac:	9202      	str	r2, [sp, #8]
 8004aae:	9401      	str	r4, [sp, #4]
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f001 fe32 	bl	8006720 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8004abc:	2000      	movs	r0, #0
 8004abe:	b005      	add	sp, #20
 8004ac0:	bd30      	pop	{r4, r5, pc}

08004ac2 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8004ac2:	b530      	push	{r4, r5, lr}
 8004ac4:	b085      	sub	sp, #20
 8004ac6:	460d      	mov	r5, r1
 8004ac8:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8004aca:	2400      	movs	r4, #0
 8004acc:	9403      	str	r4, [sp, #12]
 8004ace:	9202      	str	r2, [sp, #8]
 8004ad0:	9501      	str	r5, [sp, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	9200      	str	r2, [sp, #0]
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	f001 fe22 	bl	8006720 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 8004adc:	4620      	mov	r0, r4
 8004ade:	b005      	add	sp, #20
 8004ae0:	bd30      	pop	{r4, r5, pc}

08004ae2 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8004ae2:	b530      	push	{r4, r5, lr}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	460d      	mov	r5, r1
 8004ae8:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8004aea:	2400      	movs	r4, #0
 8004aec:	9403      	str	r4, [sp, #12]
 8004aee:	9202      	str	r2, [sp, #8]
 8004af0:	9501      	str	r5, [sp, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	9200      	str	r2, [sp, #0]
 8004af6:	2303      	movs	r3, #3
 8004af8:	f001 fe12 	bl	8006720 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
}
 8004afc:	4620      	mov	r0, r4
 8004afe:	b005      	add	sp, #20
 8004b00:	bd30      	pop	{r4, r5, pc}

08004b02 <USBH_GetFreePipe>:
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	2b0a      	cmp	r3, #10
 8004b06:	d80c      	bhi.n	8004b22 <USBH_GetFreePipe+0x20>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8004b08:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 8004b0c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004b10:	6852      	ldr	r2, [r2, #4]
 8004b12:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8004b16:	d002      	beq.n	8004b1e <USBH_GetFreePipe+0x1c>
  for (idx = 0U ; idx < 11U ; idx++)
 8004b18:	3301      	adds	r3, #1
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	e7f2      	b.n	8004b04 <USBH_GetFreePipe+0x2>
    {
      return (uint16_t)idx;
 8004b1e:	4618      	mov	r0, r3
 8004b20:	4770      	bx	lr
    }
  }

  return 0xFFFFU;
 8004b22:	f64f 70ff 	movw	r0, #65535	@ 0xffff
}
 8004b26:	4770      	bx	lr

08004b28 <USBH_OpenPipe>:
{
 8004b28:	b510      	push	{r4, lr}
 8004b2a:	b084      	sub	sp, #16
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8004b2c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004b30:	9402      	str	r4, [sp, #8]
 8004b32:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004b36:	9401      	str	r4, [sp, #4]
 8004b38:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004b3c:	9400      	str	r4, [sp, #0]
 8004b3e:	f001 fdd4 	bl	80066ea <USBH_LL_OpenPipe>
}
 8004b42:	2000      	movs	r0, #0
 8004b44:	b004      	add	sp, #16
 8004b46:	bd10      	pop	{r4, pc}

08004b48 <USBH_ClosePipe>:
{
 8004b48:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 8004b4a:	f001 fde1 	bl	8006710 <USBH_LL_ClosePipe>
}
 8004b4e:	2000      	movs	r0, #0
 8004b50:	bd08      	pop	{r3, pc}

08004b52 <USBH_AllocPipe>:
{
 8004b52:	b538      	push	{r3, r4, r5, lr}
 8004b54:	4604      	mov	r4, r0
 8004b56:	460d      	mov	r5, r1
  pipe =  USBH_GetFreePipe(phost);
 8004b58:	f7ff ffd3 	bl	8004b02 <USBH_GetFreePipe>
  if (pipe != 0xFFFFU)
 8004b5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b60:	4298      	cmp	r0, r3
 8004b62:	d007      	beq.n	8004b74 <USBH_AllocPipe+0x22>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8004b64:	f000 030f 	and.w	r3, r0, #15
 8004b68:	f445 4500 	orr.w	r5, r5, #32768	@ 0x8000
 8004b6c:	33e0      	adds	r3, #224	@ 0xe0
 8004b6e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004b72:	6065      	str	r5, [r4, #4]
}
 8004b74:	b2c0      	uxtb	r0, r0
 8004b76:	bd38      	pop	{r3, r4, r5, pc}

08004b78 <USBH_FreePipe>:
  if (idx < 11U)
 8004b78:	290a      	cmp	r1, #10
 8004b7a:	d806      	bhi.n	8004b8a <USBH_FreePipe+0x12>
    phost->Pipes[idx] &= 0x7FFFU;
 8004b7c:	31e0      	adds	r1, #224	@ 0xe0
 8004b7e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8004b82:	6843      	ldr	r3, [r0, #4]
 8004b84:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004b88:	6043      	str	r3, [r0, #4]
}
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	4770      	bx	lr

08004b8e <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8004b8e:	2884      	cmp	r0, #132	@ 0x84
 8004b90:	d001      	beq.n	8004b96 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8004b92:	3003      	adds	r0, #3
 8004b94:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b96:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8004b98:	4770      	bx	lr

08004b9a <inHandlerMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b9a:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8004b9e:	3800      	subs	r0, #0
 8004ba0:	bf18      	it	ne
 8004ba2:	2001      	movne	r0, #1
 8004ba4:	4770      	bx	lr

08004ba6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ba6:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004ba8:	f000 feac 	bl	8005904 <vTaskStartScheduler>
  
  return osOK;
}
 8004bac:	2000      	movs	r0, #0
 8004bae:	bd08      	pop	{r3, pc}

08004bb0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bb4:	b087      	sub	sp, #28
 8004bb6:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004bb8:	6944      	ldr	r4, [r0, #20]
 8004bba:	b1c4      	cbz	r4, 8004bee <osThreadCreate+0x3e>
 8004bbc:	6985      	ldr	r5, [r0, #24]
 8004bbe:	b1b5      	cbz	r5, 8004bee <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bc0:	6847      	ldr	r7, [r0, #4]
 8004bc2:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004bc6:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bca:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8004bce:	f7ff ffde 	bl	8004b8e <makeFreeRtosPriority>
 8004bd2:	9502      	str	r5, [sp, #8]
 8004bd4:	9401      	str	r4, [sp, #4]
 8004bd6:	9000      	str	r0, [sp, #0]
 8004bd8:	4633      	mov	r3, r6
 8004bda:	464a      	mov	r2, r9
 8004bdc:	4641      	mov	r1, r8
 8004bde:	4638      	mov	r0, r7
 8004be0:	f000 fe22 	bl	8005828 <xTaskCreateStatic>
 8004be4:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004be6:	9805      	ldr	r0, [sp, #20]
}
 8004be8:	b007      	add	sp, #28
 8004bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bee:	6844      	ldr	r4, [r0, #4]
 8004bf0:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004bf2:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bf4:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8004bf8:	f7ff ffc9 	bl	8004b8e <makeFreeRtosPriority>
 8004bfc:	ab05      	add	r3, sp, #20
 8004bfe:	9301      	str	r3, [sp, #4]
 8004c00:	9000      	str	r0, [sp, #0]
 8004c02:	4633      	mov	r3, r6
 8004c04:	b2ba      	uxth	r2, r7
 8004c06:	4629      	mov	r1, r5
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f000 fe48 	bl	800589e <xTaskCreate>
 8004c0e:	2801      	cmp	r0, #1
 8004c10:	d0e9      	beq.n	8004be6 <osThreadCreate+0x36>
      return NULL;
 8004c12:	2000      	movs	r0, #0
 8004c14:	e7e8      	b.n	8004be8 <osThreadCreate+0x38>

08004c16 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004c16:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004c18:	b900      	cbnz	r0, 8004c1c <osDelay+0x6>
 8004c1a:	2001      	movs	r0, #1
 8004c1c:	f000 ffc4 	bl	8005ba8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004c20:	2000      	movs	r0, #0
 8004c22:	bd08      	pop	{r3, pc}

08004c24 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004c24:	b500      	push	{lr}
 8004c26:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004c28:	6882      	ldr	r2, [r0, #8]
 8004c2a:	b142      	cbz	r2, 8004c3e <osMessageCreate+0x1a>
 8004c2c:	68c3      	ldr	r3, [r0, #12]
 8004c2e:	b133      	cbz	r3, 8004c3e <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004c30:	2100      	movs	r1, #0
 8004c32:	9100      	str	r1, [sp, #0]
 8004c34:	6841      	ldr	r1, [r0, #4]
 8004c36:	6800      	ldr	r0, [r0, #0]
 8004c38:	f000 f9b5 	bl	8004fa6 <xQueueGenericCreateStatic>
 8004c3c:	e004      	b.n	8004c48 <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	6841      	ldr	r1, [r0, #4]
 8004c42:	6800      	ldr	r0, [r0, #0]
 8004c44:	f000 f9f9 	bl	800503a <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004c48:	b003      	add	sp, #12
 8004c4a:	f85d fb04 	ldr.w	pc, [sp], #4

08004c4e <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004c4e:	b530      	push	{r4, r5, lr}
 8004c50:	b085      	sub	sp, #20
 8004c52:	4604      	mov	r4, r0
 8004c54:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004c56:	2300      	movs	r3, #0
 8004c58:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8004c5a:	4615      	mov	r5, r2
 8004c5c:	b902      	cbnz	r2, 8004c60 <osMessagePut+0x12>
    ticks = 1;
 8004c5e:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8004c60:	f7ff ff9b 	bl	8004b9a <inHandlerMode>
 8004c64:	b1a8      	cbz	r0, 8004c92 <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004c66:	2300      	movs	r3, #0
 8004c68:	aa03      	add	r2, sp, #12
 8004c6a:	a901      	add	r1, sp, #4
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f000 facc 	bl	800520a <xQueueGenericSendFromISR>
 8004c72:	2801      	cmp	r0, #1
 8004c74:	d118      	bne.n	8004ca8 <osMessagePut+0x5a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004c76:	9b03      	ldr	r3, [sp, #12]
 8004c78:	b1c3      	cbz	r3, 8004cac <osMessagePut+0x5e>
 8004c7a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c82:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8004c8e:	2000      	movs	r0, #0
 8004c90:	e008      	b.n	8004ca4 <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004c92:	2300      	movs	r3, #0
 8004c94:	462a      	mov	r2, r5
 8004c96:	a901      	add	r1, sp, #4
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f000 f9f2 	bl	8005082 <xQueueGenericSend>
 8004c9e:	2801      	cmp	r0, #1
 8004ca0:	d106      	bne.n	8004cb0 <osMessagePut+0x62>
  return osOK;
 8004ca2:	2000      	movs	r0, #0
}
 8004ca4:	b005      	add	sp, #20
 8004ca6:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 8004ca8:	20ff      	movs	r0, #255	@ 0xff
 8004caa:	e7fb      	b.n	8004ca4 <osMessagePut+0x56>
  return osOK;
 8004cac:	2000      	movs	r0, #0
 8004cae:	e7f9      	b.n	8004ca4 <osMessagePut+0x56>
      return osErrorOS;
 8004cb0:	20ff      	movs	r0, #255	@ 0xff
 8004cb2:	e7f7      	b.n	8004ca4 <osMessagePut+0x56>

08004cb4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004cba:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8004cc0:	b1e1      	cbz	r1, 8004cfc <osMessageGet+0x48>
 8004cc2:	460d      	mov	r5, r1
 8004cc4:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	9303      	str	r3, [sp, #12]
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004cca:	f7ff ff66 	bl	8004b9a <inHandlerMode>
 8004cce:	b300      	cbz	r0, 8004d12 <osMessageGet+0x5e>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004cd0:	aa03      	add	r2, sp, #12
 8004cd2:	a901      	add	r1, sp, #4
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	f000 fbae 	bl	8005436 <xQueueReceiveFromISR>
 8004cda:	2801      	cmp	r0, #1
 8004cdc:	d016      	beq.n	8004d0c <osMessageGet+0x58>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004ce2:	9b03      	ldr	r3, [sp, #12]
 8004ce4:	b1fb      	cbz	r3, 8004d26 <osMessageGet+0x72>
 8004ce6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004cea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	e014      	b.n	8004d26 <osMessageGet+0x72>
    event.status = osErrorParameter;
 8004cfc:	2380      	movs	r3, #128	@ 0x80
 8004cfe:	9300      	str	r3, [sp, #0]
    return event;
 8004d00:	466b      	mov	r3, sp
 8004d02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d0a:	e011      	b.n	8004d30 <osMessageGet+0x7c>
      event.status = osEventMessage;
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	e7e7      	b.n	8004ce2 <osMessageGet+0x2e>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004d12:	4632      	mov	r2, r6
 8004d14:	a901      	add	r1, sp, #4
 8004d16:	4628      	mov	r0, r5
 8004d18:	f000 fade 	bl	80052d8 <xQueueReceive>
 8004d1c:	2801      	cmp	r0, #1
 8004d1e:	d00a      	beq.n	8004d36 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004d20:	b106      	cbz	r6, 8004d24 <osMessageGet+0x70>
 8004d22:	2640      	movs	r6, #64	@ 0x40
 8004d24:	9600      	str	r6, [sp, #0]
    }
  }
  
  return event;
 8004d26:	466b      	mov	r3, sp
 8004d28:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004d30:	4620      	mov	r0, r4
 8004d32:	b004      	add	sp, #16
 8004d34:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8004d36:	2310      	movs	r3, #16
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	e7f4      	b.n	8004d26 <osMessageGet+0x72>

08004d3c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d3c:	f100 0308 	add.w	r3, r0, #8
 8004d40:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d46:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d48:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d4a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d50:	4770      	bx	lr

08004d52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d56:	4770      	bx	lr

08004d58 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d58:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d5a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d60:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d62:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d64:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004d66:	6803      	ldr	r3, [r0, #0]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	6003      	str	r3, [r0, #0]
}
 8004d6c:	4770      	bx	lr

08004d6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d6e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d70:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d72:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8004d76:	d011      	beq.n	8004d9c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d78:	f100 0308 	add.w	r3, r0, #8
 8004d7c:	461c      	mov	r4, r3
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	42aa      	cmp	r2, r5
 8004d84:	d9fa      	bls.n	8004d7c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d86:	6863      	ldr	r3, [r4, #4]
 8004d88:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d8a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d8c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d8e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d90:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004d92:	6803      	ldr	r3, [r0, #0]
 8004d94:	3301      	adds	r3, #1
 8004d96:	6003      	str	r3, [r0, #0]
}
 8004d98:	bc30      	pop	{r4, r5}
 8004d9a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d9c:	6904      	ldr	r4, [r0, #16]
 8004d9e:	e7f2      	b.n	8004d86 <vListInsert+0x18>

08004da0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004da0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004da2:	6841      	ldr	r1, [r0, #4]
 8004da4:	6882      	ldr	r2, [r0, #8]
 8004da6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004da8:	6841      	ldr	r1, [r0, #4]
 8004daa:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	4282      	cmp	r2, r0
 8004db0:	d006      	beq.n	8004dc0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004db2:	2200      	movs	r2, #0
 8004db4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	3a01      	subs	r2, #1
 8004dba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004dbc:	6818      	ldr	r0, [r3, #0]
}
 8004dbe:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dc0:	6882      	ldr	r2, [r0, #8]
 8004dc2:	605a      	str	r2, [r3, #4]
 8004dc4:	e7f5      	b.n	8004db2 <uxListRemove+0x12>

08004dc6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004dc6:	b510      	push	{r4, lr}
 8004dc8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dca:	f001 f8eb 	bl	8005fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004dce:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004dd0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d004      	beq.n	8004de0 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8004dd6:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8004dd8:	f001 f906 	bl	8005fe8 <vPortExitCritical>

	return xReturn;
}
 8004ddc:	4620      	mov	r0, r4
 8004dde:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8004de0:	2401      	movs	r4, #1
 8004de2:	e7f9      	b.n	8004dd8 <prvIsQueueFull+0x12>

08004de4 <prvIsQueueEmpty>:
{
 8004de4:	b510      	push	{r4, lr}
 8004de6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004de8:	f001 f8dc 	bl	8005fa4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004dec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004dee:	b923      	cbnz	r3, 8004dfa <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8004df0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8004df2:	f001 f8f9 	bl	8005fe8 <vPortExitCritical>
}
 8004df6:	4620      	mov	r0, r4
 8004df8:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8004dfa:	2400      	movs	r4, #0
 8004dfc:	e7f9      	b.n	8004df2 <prvIsQueueEmpty+0xe>

08004dfe <prvCopyDataToQueue>:
{
 8004dfe:	b570      	push	{r4, r5, r6, lr}
 8004e00:	4604      	mov	r4, r0
 8004e02:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e04:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e06:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004e08:	b95a      	cbnz	r2, 8004e22 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e0a:	6803      	ldr	r3, [r0, #0]
 8004e0c:	b11b      	cbz	r3, 8004e16 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8004e0e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e10:	3601      	adds	r6, #1
 8004e12:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8004e14:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e16:	6880      	ldr	r0, [r0, #8]
 8004e18:	f001 f800 	bl	8005e1c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60a3      	str	r3, [r4, #8]
 8004e20:	e7f6      	b.n	8004e10 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8004e22:	b96d      	cbnz	r5, 8004e40 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e24:	6840      	ldr	r0, [r0, #4]
 8004e26:	f001 fdff 	bl	8006a28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e2a:	6863      	ldr	r3, [r4, #4]
 8004e2c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004e2e:	4413      	add	r3, r2
 8004e30:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e32:	68a2      	ldr	r2, [r4, #8]
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d319      	bcc.n	8004e6c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	e7e7      	b.n	8004e10 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e40:	68c0      	ldr	r0, [r0, #12]
 8004e42:	f001 fdf1 	bl	8006a28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e46:	68e3      	ldr	r3, [r4, #12]
 8004e48:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004e4a:	4251      	negs	r1, r2
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e50:	6822      	ldr	r2, [r4, #0]
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d202      	bcs.n	8004e5c <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e56:	68a3      	ldr	r3, [r4, #8]
 8004e58:	440b      	add	r3, r1
 8004e5a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004e5c:	2d02      	cmp	r5, #2
 8004e5e:	d001      	beq.n	8004e64 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8004e60:	2000      	movs	r0, #0
 8004e62:	e7d5      	b.n	8004e10 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e64:	b126      	cbz	r6, 8004e70 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8004e66:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8004e68:	2000      	movs	r0, #0
 8004e6a:	e7d1      	b.n	8004e10 <prvCopyDataToQueue+0x12>
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	e7cf      	b.n	8004e10 <prvCopyDataToQueue+0x12>
 8004e70:	2000      	movs	r0, #0
 8004e72:	e7cd      	b.n	8004e10 <prvCopyDataToQueue+0x12>

08004e74 <prvCopyDataFromQueue>:
{
 8004e74:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e76:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004e78:	b16a      	cbz	r2, 8004e96 <prvCopyDataFromQueue+0x22>
{
 8004e7a:	b510      	push	{r4, lr}
 8004e7c:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e7e:	68d9      	ldr	r1, [r3, #12]
 8004e80:	4411      	add	r1, r2
 8004e82:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e84:	689c      	ldr	r4, [r3, #8]
 8004e86:	42a1      	cmp	r1, r4
 8004e88:	d301      	bcc.n	8004e8e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e8a:	6819      	ldr	r1, [r3, #0]
 8004e8c:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e8e:	68d9      	ldr	r1, [r3, #12]
 8004e90:	f001 fdca 	bl	8006a28 <memcpy>
}
 8004e94:	bd10      	pop	{r4, pc}
 8004e96:	4770      	bx	lr

08004e98 <prvUnlockQueue>:
{
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8004e9c:	f001 f882 	bl	8005fa4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004ea0:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8004ea4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ea6:	e001      	b.n	8004eac <prvUnlockQueue+0x14>
			--cTxLock;
 8004ea8:	3c01      	subs	r4, #1
 8004eaa:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004eac:	2c00      	cmp	r4, #0
 8004eae:	dd0a      	ble.n	8004ec6 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eb0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8004eb2:	b143      	cbz	r3, 8004ec6 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eb4:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8004eb8:	f000 ff06 	bl	8005cc8 <xTaskRemoveFromEventList>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d0f3      	beq.n	8004ea8 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8004ec0:	f000 ff96 	bl	8005df0 <vTaskMissedYield>
 8004ec4:	e7f0      	b.n	8004ea8 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8004ec6:	23ff      	movs	r3, #255	@ 0xff
 8004ec8:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8004ecc:	f001 f88c 	bl	8005fe8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004ed0:	f001 f868 	bl	8005fa4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004ed4:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8004ed8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eda:	e001      	b.n	8004ee0 <prvUnlockQueue+0x48>
				--cRxLock;
 8004edc:	3c01      	subs	r4, #1
 8004ede:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ee0:	2c00      	cmp	r4, #0
 8004ee2:	dd0a      	ble.n	8004efa <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ee4:	692b      	ldr	r3, [r5, #16]
 8004ee6:	b143      	cbz	r3, 8004efa <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ee8:	f105 0010 	add.w	r0, r5, #16
 8004eec:	f000 feec 	bl	8005cc8 <xTaskRemoveFromEventList>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d0f3      	beq.n	8004edc <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8004ef4:	f000 ff7c 	bl	8005df0 <vTaskMissedYield>
 8004ef8:	e7f0      	b.n	8004edc <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8004efa:	23ff      	movs	r3, #255	@ 0xff
 8004efc:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8004f00:	f001 f872 	bl	8005fe8 <vPortExitCritical>
}
 8004f04:	bd38      	pop	{r3, r4, r5, pc}

08004f06 <xQueueGenericReset>:
{
 8004f06:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8004f08:	b1e0      	cbz	r0, 8004f44 <xQueueGenericReset+0x3e>
 8004f0a:	460d      	mov	r5, r1
 8004f0c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004f0e:	f001 f849 	bl	8005fa4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004f16:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004f18:	fb01 3002 	mla	r0, r1, r2, r3
 8004f1c:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f1e:	2000      	movs	r0, #0
 8004f20:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f22:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f24:	3a01      	subs	r2, #1
 8004f26:	fb02 3301 	mla	r3, r2, r1, r3
 8004f2a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f2c:	23ff      	movs	r3, #255	@ 0xff
 8004f2e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f32:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8004f36:	b9fd      	cbnz	r5, 8004f78 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f38:	6923      	ldr	r3, [r4, #16]
 8004f3a:	b963      	cbnz	r3, 8004f56 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8004f3c:	f001 f854 	bl	8005fe8 <vPortExitCritical>
}
 8004f40:	2001      	movs	r0, #1
 8004f42:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004f54:	e7fe      	b.n	8004f54 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f56:	f104 0010 	add.w	r0, r4, #16
 8004f5a:	f000 feb5 	bl	8005cc8 <xTaskRemoveFromEventList>
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	d0ec      	beq.n	8004f3c <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8004f62:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	e7e1      	b.n	8004f3c <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f78:	f104 0010 	add.w	r0, r4, #16
 8004f7c:	f7ff fede 	bl	8004d3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f80:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004f84:	f7ff feda 	bl	8004d3c <vListInitialise>
 8004f88:	e7d8      	b.n	8004f3c <xQueueGenericReset+0x36>

08004f8a <prvInitialiseNewQueue>:
{
 8004f8a:	b510      	push	{r4, lr}
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f90:	460c      	mov	r4, r1
 8004f92:	b931      	cbnz	r1, 8004fa2 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f94:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004f96:	63c3      	str	r3, [r0, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f98:	6404      	str	r4, [r0, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	f7ff ffb3 	bl	8004f06 <xQueueGenericReset>
}
 8004fa0:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fa2:	6002      	str	r2, [r0, #0]
 8004fa4:	e7f7      	b.n	8004f96 <prvInitialiseNewQueue+0xc>

08004fa6 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fa6:	b940      	cbnz	r0, 8004fba <xQueueGenericCreateStatic+0x14>
 8004fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	e7fe      	b.n	8004fb8 <xQueueGenericCreateStatic+0x12>
	{
 8004fba:	b510      	push	{r4, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	461c      	mov	r4, r3
 8004fc0:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8004fc2:	b153      	cbz	r3, 8004fda <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004fc4:	b192      	cbz	r2, 8004fec <xQueueGenericCreateStatic+0x46>
 8004fc6:	b989      	cbnz	r1, 8004fec <xQueueGenericCreateStatic+0x46>
 8004fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	e7fe      	b.n	8004fd8 <xQueueGenericCreateStatic+0x32>
 8004fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8004fea:	e7fe      	b.n	8004fea <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fec:	b16a      	cbz	r2, 800500a <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fee:	2348      	movs	r3, #72	@ 0x48
 8004ff0:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ff2:	9b03      	ldr	r3, [sp, #12]
 8004ff4:	2b48      	cmp	r3, #72	@ 0x48
 8004ff6:	d013      	beq.n	8005020 <xQueueGenericCreateStatic+0x7a>
 8004ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	e7fe      	b.n	8005008 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800500a:	2900      	cmp	r1, #0
 800500c:	d0ef      	beq.n	8004fee <xQueueGenericCreateStatic+0x48>
 800500e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	e7fe      	b.n	800501e <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005020:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005022:	2301      	movs	r3, #1
 8005024:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005028:	9400      	str	r4, [sp, #0]
 800502a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800502e:	4660      	mov	r0, ip
 8005030:	f7ff ffab 	bl	8004f8a <prvInitialiseNewQueue>
	}
 8005034:	4620      	mov	r0, r4
 8005036:	b004      	add	sp, #16
 8005038:	bd10      	pop	{r4, pc}

0800503a <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800503a:	b940      	cbnz	r0, 800504e <xQueueGenericCreate+0x14>
 800503c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	e7fe      	b.n	800504c <xQueueGenericCreate+0x12>
	{
 800504e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005050:	b083      	sub	sp, #12
 8005052:	460d      	mov	r5, r1
 8005054:	4614      	mov	r4, r2
 8005056:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005058:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800505c:	3048      	adds	r0, #72	@ 0x48
 800505e:	f001 f959 	bl	8006314 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005062:	4607      	mov	r7, r0
 8005064:	b150      	cbz	r0, 800507c <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005066:	2300      	movs	r3, #0
 8005068:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800506c:	9000      	str	r0, [sp, #0]
 800506e:	4623      	mov	r3, r4
 8005070:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 8005074:	4629      	mov	r1, r5
 8005076:	4630      	mov	r0, r6
 8005078:	f7ff ff87 	bl	8004f8a <prvInitialiseNewQueue>
	}
 800507c:	4638      	mov	r0, r7
 800507e:	b003      	add	sp, #12
 8005080:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005082 <xQueueGenericSend>:
{
 8005082:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005084:	b085      	sub	sp, #20
 8005086:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005088:	b188      	cbz	r0, 80050ae <xQueueGenericSend+0x2c>
 800508a:	460f      	mov	r7, r1
 800508c:	461d      	mov	r5, r3
 800508e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005090:	b1b1      	cbz	r1, 80050c0 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005092:	2d02      	cmp	r5, #2
 8005094:	d120      	bne.n	80050d8 <xQueueGenericSend+0x56>
 8005096:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005098:	2b01      	cmp	r3, #1
 800509a:	d01d      	beq.n	80050d8 <xQueueGenericSend+0x56>
 800509c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	e7fe      	b.n	80050ac <xQueueGenericSend+0x2a>
 80050ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80050be:	e7fe      	b.n	80050be <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050c0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0e5      	beq.n	8005092 <xQueueGenericSend+0x10>
 80050c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	e7fe      	b.n	80050d6 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050d8:	f000 fe90 	bl	8005dfc <xTaskGetSchedulerState>
 80050dc:	4606      	mov	r6, r0
 80050de:	b958      	cbnz	r0, 80050f8 <xQueueGenericSend+0x76>
 80050e0:	9b01      	ldr	r3, [sp, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d048      	beq.n	8005178 <xQueueGenericSend+0xf6>
 80050e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	e7fe      	b.n	80050f6 <xQueueGenericSend+0x74>
 80050f8:	2600      	movs	r6, #0
 80050fa:	e03d      	b.n	8005178 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050fc:	462a      	mov	r2, r5
 80050fe:	4639      	mov	r1, r7
 8005100:	4620      	mov	r0, r4
 8005102:	f7ff fe7c 	bl	8004dfe <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005106:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005108:	b97b      	cbnz	r3, 800512a <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800510a:	b148      	cbz	r0, 8005120 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800510c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005110:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005114:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005120:	f000 ff62 	bl	8005fe8 <vPortExitCritical>
				return pdPASS;
 8005124:	2001      	movs	r0, #1
}
 8005126:	b005      	add	sp, #20
 8005128:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800512a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800512e:	f000 fdcb 	bl	8005cc8 <xTaskRemoveFromEventList>
 8005132:	2800      	cmp	r0, #0
 8005134:	d0f4      	beq.n	8005120 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8005136:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800513a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800513e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	e7e9      	b.n	8005120 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800514c:	f000 ff4c 	bl	8005fe8 <vPortExitCritical>
					return errQUEUE_FULL;
 8005150:	2000      	movs	r0, #0
 8005152:	e7e8      	b.n	8005126 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005154:	a802      	add	r0, sp, #8
 8005156:	f000 fdfd 	bl	8005d54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800515a:	2601      	movs	r6, #1
 800515c:	e019      	b.n	8005192 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800515e:	2300      	movs	r3, #0
 8005160:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005164:	e021      	b.n	80051aa <xQueueGenericSend+0x128>
 8005166:	2300      	movs	r3, #0
 8005168:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800516c:	e023      	b.n	80051b6 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800516e:	4620      	mov	r0, r4
 8005170:	f7ff fe92 	bl	8004e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005174:	f000 fc9c 	bl	8005ab0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005178:	f000 ff14 	bl	8005fa4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800517c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800517e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005180:	429a      	cmp	r2, r3
 8005182:	d3bb      	bcc.n	80050fc <xQueueGenericSend+0x7a>
 8005184:	2d02      	cmp	r5, #2
 8005186:	d0b9      	beq.n	80050fc <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005188:	9b01      	ldr	r3, [sp, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0de      	beq.n	800514c <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800518e:	2e00      	cmp	r6, #0
 8005190:	d0e0      	beq.n	8005154 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8005192:	f000 ff29 	bl	8005fe8 <vPortExitCritical>
		vTaskSuspendAll();
 8005196:	f000 fbf7 	bl	8005988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800519a:	f000 ff03 	bl	8005fa4 <vPortEnterCritical>
 800519e:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80051a2:	b252      	sxtb	r2, r2
 80051a4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80051a8:	d0d9      	beq.n	800515e <xQueueGenericSend+0xdc>
 80051aa:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80051ae:	b252      	sxtb	r2, r2
 80051b0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80051b4:	d0d7      	beq.n	8005166 <xQueueGenericSend+0xe4>
 80051b6:	f000 ff17 	bl	8005fe8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051ba:	a901      	add	r1, sp, #4
 80051bc:	a802      	add	r0, sp, #8
 80051be:	f000 fdd5 	bl	8005d6c <xTaskCheckForTimeOut>
 80051c2:	b9d8      	cbnz	r0, 80051fc <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051c4:	4620      	mov	r0, r4
 80051c6:	f7ff fdfe 	bl	8004dc6 <prvIsQueueFull>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d0cf      	beq.n	800516e <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051ce:	9901      	ldr	r1, [sp, #4]
 80051d0:	f104 0010 	add.w	r0, r4, #16
 80051d4:	f000 fd60 	bl	8005c98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051d8:	4620      	mov	r0, r4
 80051da:	f7ff fe5d 	bl	8004e98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051de:	f000 fc67 	bl	8005ab0 <xTaskResumeAll>
 80051e2:	2800      	cmp	r0, #0
 80051e4:	d1c8      	bne.n	8005178 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 80051e6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80051ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	e7bd      	b.n	8005178 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 80051fc:	4620      	mov	r0, r4
 80051fe:	f7ff fe4b 	bl	8004e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005202:	f000 fc55 	bl	8005ab0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005206:	2000      	movs	r0, #0
 8005208:	e78d      	b.n	8005126 <xQueueGenericSend+0xa4>

0800520a <xQueueGenericSendFromISR>:
{
 800520a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800520e:	b190      	cbz	r0, 8005236 <xQueueGenericSendFromISR+0x2c>
 8005210:	460f      	mov	r7, r1
 8005212:	4616      	mov	r6, r2
 8005214:	461c      	mov	r4, r3
 8005216:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005218:	b1b1      	cbz	r1, 8005248 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800521a:	2c02      	cmp	r4, #2
 800521c:	d120      	bne.n	8005260 <xQueueGenericSendFromISR+0x56>
 800521e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8005220:	2b01      	cmp	r3, #1
 8005222:	d01d      	beq.n	8005260 <xQueueGenericSendFromISR+0x56>
 8005224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	e7fe      	b.n	8005234 <xQueueGenericSendFromISR+0x2a>
 8005236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005246:	e7fe      	b.n	8005246 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005248:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0e5      	beq.n	800521a <xQueueGenericSendFromISR+0x10>
 800524e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	e7fe      	b.n	800525e <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005260:	f000 ffc6 	bl	80061f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005264:	f3ef 8811 	mrs	r8, BASEPRI
 8005268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005278:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800527a:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800527c:	429a      	cmp	r2, r3
 800527e:	d306      	bcc.n	800528e <xQueueGenericSendFromISR+0x84>
 8005280:	2c02      	cmp	r4, #2
 8005282:	d004      	beq.n	800528e <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8005284:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005286:	f388 8811 	msr	BASEPRI, r8
}
 800528a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800528e:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8005292:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005296:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005298:	4622      	mov	r2, r4
 800529a:	4639      	mov	r1, r7
 800529c:	4628      	mov	r0, r5
 800529e:	f7ff fdae 	bl	8004dfe <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80052a2:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 80052a6:	d006      	beq.n	80052b6 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052a8:	f109 0301 	add.w	r3, r9, #1
 80052ac:	b25b      	sxtb	r3, r3
 80052ae:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 80052b2:	2001      	movs	r0, #1
 80052b4:	e7e7      	b.n	8005286 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052b6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80052b8:	b90b      	cbnz	r3, 80052be <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 80052ba:	2001      	movs	r0, #1
 80052bc:	e7e3      	b.n	8005286 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052be:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80052c2:	f000 fd01 	bl	8005cc8 <xTaskRemoveFromEventList>
 80052c6:	b118      	cbz	r0, 80052d0 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 80052c8:	b126      	cbz	r6, 80052d4 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052ca:	2001      	movs	r0, #1
 80052cc:	6030      	str	r0, [r6, #0]
 80052ce:	e7da      	b.n	8005286 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80052d0:	2001      	movs	r0, #1
 80052d2:	e7d8      	b.n	8005286 <xQueueGenericSendFromISR+0x7c>
 80052d4:	2001      	movs	r0, #1
 80052d6:	e7d6      	b.n	8005286 <xQueueGenericSendFromISR+0x7c>

080052d8 <xQueueReceive>:
{
 80052d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052da:	b085      	sub	sp, #20
 80052dc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80052de:	b190      	cbz	r0, 8005306 <xQueueReceive+0x2e>
 80052e0:	460f      	mov	r7, r1
 80052e2:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052e4:	b1c1      	cbz	r1, 8005318 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052e6:	f000 fd89 	bl	8005dfc <xTaskGetSchedulerState>
 80052ea:	4606      	mov	r6, r0
 80052ec:	bb00      	cbnz	r0, 8005330 <xQueueReceive+0x58>
 80052ee:	9b01      	ldr	r3, [sp, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d05e      	beq.n	80053b2 <xQueueReceive+0xda>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	e7fe      	b.n	8005304 <xQueueReceive+0x2c>
 8005306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005316:	e7fe      	b.n	8005316 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005318:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0e3      	beq.n	80052e6 <xQueueReceive+0xe>
 800531e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	e7fe      	b.n	800532e <xQueueReceive+0x56>
 8005330:	2600      	movs	r6, #0
 8005332:	e03e      	b.n	80053b2 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005334:	4639      	mov	r1, r7
 8005336:	4620      	mov	r0, r4
 8005338:	f7ff fd9c 	bl	8004e74 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800533c:	3d01      	subs	r5, #1
 800533e:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005340:	6923      	ldr	r3, [r4, #16]
 8005342:	b923      	cbnz	r3, 800534e <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8005344:	f000 fe50 	bl	8005fe8 <vPortExitCritical>
				return pdPASS;
 8005348:	2001      	movs	r0, #1
}
 800534a:	b005      	add	sp, #20
 800534c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800534e:	f104 0010 	add.w	r0, r4, #16
 8005352:	f000 fcb9 	bl	8005cc8 <xTaskRemoveFromEventList>
 8005356:	2800      	cmp	r0, #0
 8005358:	d0f4      	beq.n	8005344 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800535a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800535e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005362:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	e7e9      	b.n	8005344 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8005370:	f000 fe3a 	bl	8005fe8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005374:	2000      	movs	r0, #0
 8005376:	e7e8      	b.n	800534a <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005378:	a802      	add	r0, sp, #8
 800537a:	f000 fceb 	bl	8005d54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800537e:	2601      	movs	r6, #1
 8005380:	e021      	b.n	80053c6 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8005382:	2300      	movs	r3, #0
 8005384:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005388:	e029      	b.n	80053de <xQueueReceive+0x106>
 800538a:	2300      	movs	r3, #0
 800538c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005390:	e02b      	b.n	80053ea <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8005392:	4620      	mov	r0, r4
 8005394:	f7ff fd80 	bl	8004e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005398:	f000 fb8a 	bl	8005ab0 <xTaskResumeAll>
 800539c:	e009      	b.n	80053b2 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800539e:	4620      	mov	r0, r4
 80053a0:	f7ff fd7a 	bl	8004e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053a4:	f000 fb84 	bl	8005ab0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053a8:	4620      	mov	r0, r4
 80053aa:	f7ff fd1b 	bl	8004de4 <prvIsQueueEmpty>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d13f      	bne.n	8005432 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 80053b2:	f000 fdf7 	bl	8005fa4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053b6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053b8:	2d00      	cmp	r5, #0
 80053ba:	d1bb      	bne.n	8005334 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80053bc:	9b01      	ldr	r3, [sp, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0d6      	beq.n	8005370 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80053c2:	2e00      	cmp	r6, #0
 80053c4:	d0d8      	beq.n	8005378 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 80053c6:	f000 fe0f 	bl	8005fe8 <vPortExitCritical>
		vTaskSuspendAll();
 80053ca:	f000 fadd 	bl	8005988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053ce:	f000 fde9 	bl	8005fa4 <vPortEnterCritical>
 80053d2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80053d6:	b25b      	sxtb	r3, r3
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053dc:	d0d1      	beq.n	8005382 <xQueueReceive+0xaa>
 80053de:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80053e2:	b25b      	sxtb	r3, r3
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053e8:	d0cf      	beq.n	800538a <xQueueReceive+0xb2>
 80053ea:	f000 fdfd 	bl	8005fe8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053ee:	a901      	add	r1, sp, #4
 80053f0:	a802      	add	r0, sp, #8
 80053f2:	f000 fcbb 	bl	8005d6c <xTaskCheckForTimeOut>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d1d1      	bne.n	800539e <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053fa:	4620      	mov	r0, r4
 80053fc:	f7ff fcf2 	bl	8004de4 <prvIsQueueEmpty>
 8005400:	2800      	cmp	r0, #0
 8005402:	d0c6      	beq.n	8005392 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005404:	9901      	ldr	r1, [sp, #4]
 8005406:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800540a:	f000 fc45 	bl	8005c98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800540e:	4620      	mov	r0, r4
 8005410:	f7ff fd42 	bl	8004e98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005414:	f000 fb4c 	bl	8005ab0 <xTaskResumeAll>
 8005418:	2800      	cmp	r0, #0
 800541a:	d1ca      	bne.n	80053b2 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800541c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005420:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005424:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	e7bf      	b.n	80053b2 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8005432:	2000      	movs	r0, #0
 8005434:	e789      	b.n	800534a <xQueueReceive+0x72>

08005436 <xQueueReceiveFromISR>:
{
 8005436:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800543a:	b1b0      	cbz	r0, 800546a <xQueueReceiveFromISR+0x34>
 800543c:	460d      	mov	r5, r1
 800543e:	4690      	mov	r8, r2
 8005440:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005442:	b1d9      	cbz	r1, 800547c <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005444:	f000 fed4 	bl	80061f0 <vPortValidateInterruptPriority>
	__asm volatile
 8005448:	f3ef 8711 	mrs	r7, BASEPRI
 800544c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800545c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800545e:	b9ce      	cbnz	r6, 8005494 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8005460:	2000      	movs	r0, #0
	__asm volatile
 8005462:	f387 8811 	msr	BASEPRI, r7
}
 8005466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800547a:	e7fe      	b.n	800547a <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800547c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0e0      	beq.n	8005444 <xQueueReceiveFromISR+0xe>
 8005482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	e7fe      	b.n	8005492 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005494:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 8005498:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800549c:	4629      	mov	r1, r5
 800549e:	4620      	mov	r0, r4
 80054a0:	f7ff fce8 	bl	8004e74 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80054a4:	1e73      	subs	r3, r6, #1
 80054a6:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 80054a8:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 80054ac:	d006      	beq.n	80054bc <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80054ae:	f109 0301 	add.w	r3, r9, #1
 80054b2:	b25b      	sxtb	r3, r3
 80054b4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 80054b8:	2001      	movs	r0, #1
 80054ba:	e7d2      	b.n	8005462 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054bc:	6923      	ldr	r3, [r4, #16]
 80054be:	b90b      	cbnz	r3, 80054c4 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 80054c0:	2001      	movs	r0, #1
 80054c2:	e7ce      	b.n	8005462 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054c4:	f104 0010 	add.w	r0, r4, #16
 80054c8:	f000 fbfe 	bl	8005cc8 <xTaskRemoveFromEventList>
 80054cc:	b130      	cbz	r0, 80054dc <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 80054ce:	f1b8 0f00 	cmp.w	r8, #0
 80054d2:	d005      	beq.n	80054e0 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80054d4:	2001      	movs	r0, #1
 80054d6:	f8c8 0000 	str.w	r0, [r8]
 80054da:	e7c2      	b.n	8005462 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 80054dc:	2001      	movs	r0, #1
 80054de:	e7c0      	b.n	8005462 <xQueueReceiveFromISR+0x2c>
 80054e0:	2001      	movs	r0, #1
 80054e2:	e7be      	b.n	8005462 <xQueueReceiveFromISR+0x2c>

080054e4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054e4:	4b08      	ldr	r3, [pc, #32]	@ (8005508 <prvResetNextTaskUnblockTime+0x24>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	b923      	cbnz	r3, 80054f6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054ec:	4b07      	ldr	r3, [pc, #28]	@ (800550c <prvResetNextTaskUnblockTime+0x28>)
 80054ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f6:	4b04      	ldr	r3, [pc, #16]	@ (8005508 <prvResetNextTaskUnblockTime+0x24>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	4b02      	ldr	r3, [pc, #8]	@ (800550c <prvResetNextTaskUnblockTime+0x28>)
 8005502:	601a      	str	r2, [r3, #0]
	}
}
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	20000444 	.word	0x20000444
 800550c:	200003dc 	.word	0x200003dc

08005510 <prvInitialiseNewTask>:
{
 8005510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005514:	4607      	mov	r7, r0
 8005516:	4698      	mov	r8, r3
 8005518:	9d08      	ldr	r5, [sp, #32]
 800551a:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 800551e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005520:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8005522:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005526:	3a01      	subs	r2, #1
 8005528:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800552c:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8005530:	2900      	cmp	r1, #0
 8005532:	d044      	beq.n	80055be <prvInitialiseNewTask+0xae>
 8005534:	4608      	mov	r0, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005536:	f04f 0c00 	mov.w	ip, #0
 800553a:	f1bc 0f0f 	cmp.w	ip, #15
 800553e:	d809      	bhi.n	8005554 <prvInitialiseNewTask+0x44>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005540:	f810 200c 	ldrb.w	r2, [r0, ip]
 8005544:	eb04 030c 	add.w	r3, r4, ip
 8005548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800554c:	b112      	cbz	r2, 8005554 <prvInitialiseNewTask+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800554e:	f10c 0c01 	add.w	ip, ip, #1
 8005552:	e7f2      	b.n	800553a <prvInitialiseNewTask+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005554:	2300      	movs	r3, #0
 8005556:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800555a:	2d06      	cmp	r5, #6
 800555c:	d900      	bls.n	8005560 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800555e:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8005560:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005562:	6465      	str	r5, [r4, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005564:	f04f 0a00 	mov.w	sl, #0
 8005568:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800556c:	1d20      	adds	r0, r4, #4
 800556e:	f7ff fbf0 	bl	8004d52 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005572:	f104 0018 	add.w	r0, r4, #24
 8005576:	f7ff fbec 	bl	8004d52 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800557a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800557c:	f1c5 0507 	rsb	r5, r5, #7
 8005580:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005582:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8005584:	f8c4 a098 	str.w	sl, [r4, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005588:	f884 a09c 	strb.w	sl, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800558c:	224c      	movs	r2, #76	@ 0x4c
 800558e:	4651      	mov	r1, sl
 8005590:	18a0      	adds	r0, r4, r2
 8005592:	f001 f9a7 	bl	80068e4 <memset>
 8005596:	4b0c      	ldr	r3, [pc, #48]	@ (80055c8 <prvInitialiseNewTask+0xb8>)
 8005598:	6523      	str	r3, [r4, #80]	@ 0x50
 800559a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800559e:	6562      	str	r2, [r4, #84]	@ 0x54
 80055a0:	33d0      	adds	r3, #208	@ 0xd0
 80055a2:	65a3      	str	r3, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055a4:	4642      	mov	r2, r8
 80055a6:	4639      	mov	r1, r7
 80055a8:	4630      	mov	r0, r6
 80055aa:	f000 fccd 	bl	8005f48 <pxPortInitialiseStack>
 80055ae:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80055b0:	f1b9 0f00 	cmp.w	r9, #0
 80055b4:	d001      	beq.n	80055ba <prvInitialiseNewTask+0xaa>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055b6:	f8c9 4000 	str.w	r4, [r9]
}
 80055ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055be:	2300      	movs	r3, #0
 80055c0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80055c4:	e7c9      	b.n	800555a <prvInitialiseNewTask+0x4a>
 80055c6:	bf00      	nop
 80055c8:	2000481c 	.word	0x2000481c

080055cc <prvInitialiseTaskLists>:
{
 80055cc:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055ce:	2400      	movs	r4, #0
 80055d0:	e007      	b.n	80055e2 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055d2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80055d6:	0093      	lsls	r3, r2, #2
 80055d8:	480e      	ldr	r0, [pc, #56]	@ (8005614 <prvInitialiseTaskLists+0x48>)
 80055da:	4418      	add	r0, r3
 80055dc:	f7ff fbae 	bl	8004d3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055e0:	3401      	adds	r4, #1
 80055e2:	2c06      	cmp	r4, #6
 80055e4:	d9f5      	bls.n	80055d2 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80055e6:	4d0c      	ldr	r5, [pc, #48]	@ (8005618 <prvInitialiseTaskLists+0x4c>)
 80055e8:	4628      	mov	r0, r5
 80055ea:	f7ff fba7 	bl	8004d3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055ee:	4c0b      	ldr	r4, [pc, #44]	@ (800561c <prvInitialiseTaskLists+0x50>)
 80055f0:	4620      	mov	r0, r4
 80055f2:	f7ff fba3 	bl	8004d3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055f6:	480a      	ldr	r0, [pc, #40]	@ (8005620 <prvInitialiseTaskLists+0x54>)
 80055f8:	f7ff fba0 	bl	8004d3c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80055fc:	4809      	ldr	r0, [pc, #36]	@ (8005624 <prvInitialiseTaskLists+0x58>)
 80055fe:	f7ff fb9d 	bl	8004d3c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005602:	4809      	ldr	r0, [pc, #36]	@ (8005628 <prvInitialiseTaskLists+0x5c>)
 8005604:	f7ff fb9a 	bl	8004d3c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005608:	4b08      	ldr	r3, [pc, #32]	@ (800562c <prvInitialiseTaskLists+0x60>)
 800560a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800560c:	4b08      	ldr	r3, [pc, #32]	@ (8005630 <prvInitialiseTaskLists+0x64>)
 800560e:	601c      	str	r4, [r3, #0]
}
 8005610:	bd38      	pop	{r3, r4, r5, pc}
 8005612:	bf00      	nop
 8005614:	20000470 	.word	0x20000470
 8005618:	2000045c 	.word	0x2000045c
 800561c:	20000448 	.word	0x20000448
 8005620:	2000042c 	.word	0x2000042c
 8005624:	20000418 	.word	0x20000418
 8005628:	20000400 	.word	0x20000400
 800562c:	20000444 	.word	0x20000444
 8005630:	20000440 	.word	0x20000440

08005634 <prvAddNewTaskToReadyList>:
{
 8005634:	b510      	push	{r4, lr}
 8005636:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005638:	f000 fcb4 	bl	8005fa4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800563c:	4a21      	ldr	r2, [pc, #132]	@ (80056c4 <prvAddNewTaskToReadyList+0x90>)
 800563e:	6813      	ldr	r3, [r2, #0]
 8005640:	3301      	adds	r3, #1
 8005642:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005644:	4b20      	ldr	r3, [pc, #128]	@ (80056c8 <prvAddNewTaskToReadyList+0x94>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	b15b      	cbz	r3, 8005662 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800564a:	4b20      	ldr	r3, [pc, #128]	@ (80056cc <prvAddNewTaskToReadyList+0x98>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	b96b      	cbnz	r3, 800566c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005650:	4b1d      	ldr	r3, [pc, #116]	@ (80056c8 <prvAddNewTaskToReadyList+0x94>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005656:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005658:	429a      	cmp	r2, r3
 800565a:	d807      	bhi.n	800566c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800565c:	4b1a      	ldr	r3, [pc, #104]	@ (80056c8 <prvAddNewTaskToReadyList+0x94>)
 800565e:	601c      	str	r4, [r3, #0]
 8005660:	e004      	b.n	800566c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8005662:	4b19      	ldr	r3, [pc, #100]	@ (80056c8 <prvAddNewTaskToReadyList+0x94>)
 8005664:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005666:	6813      	ldr	r3, [r2, #0]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d028      	beq.n	80056be <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 800566c:	4a18      	ldr	r2, [pc, #96]	@ (80056d0 <prvAddNewTaskToReadyList+0x9c>)
 800566e:	6813      	ldr	r3, [r2, #0]
 8005670:	3301      	adds	r3, #1
 8005672:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005674:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005676:	2301      	movs	r3, #1
 8005678:	4083      	lsls	r3, r0
 800567a:	4a16      	ldr	r2, [pc, #88]	@ (80056d4 <prvAddNewTaskToReadyList+0xa0>)
 800567c:	6811      	ldr	r1, [r2, #0]
 800567e:	430b      	orrs	r3, r1
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005686:	1d21      	adds	r1, r4, #4
 8005688:	4b13      	ldr	r3, [pc, #76]	@ (80056d8 <prvAddNewTaskToReadyList+0xa4>)
 800568a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800568e:	f7ff fb63 	bl	8004d58 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005692:	f000 fca9 	bl	8005fe8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005696:	4b0d      	ldr	r3, [pc, #52]	@ (80056cc <prvAddNewTaskToReadyList+0x98>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	b17b      	cbz	r3, 80056bc <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800569c:	4b0a      	ldr	r3, [pc, #40]	@ (80056c8 <prvAddNewTaskToReadyList+0x94>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056a2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d209      	bcs.n	80056bc <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 80056a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80056ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	f3bf 8f6f 	isb	sy
}
 80056bc:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80056be:	f7ff ff85 	bl	80055cc <prvInitialiseTaskLists>
 80056c2:	e7d3      	b.n	800566c <prvAddNewTaskToReadyList+0x38>
 80056c4:	200003fc 	.word	0x200003fc
 80056c8:	200004fc 	.word	0x200004fc
 80056cc:	200003f0 	.word	0x200003f0
 80056d0:	200003e0 	.word	0x200003e0
 80056d4:	200003f4 	.word	0x200003f4
 80056d8:	20000470 	.word	0x20000470

080056dc <prvDeleteTCB>:
	{
 80056dc:	b510      	push	{r4, lr}
 80056de:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80056e0:	304c      	adds	r0, #76	@ 0x4c
 80056e2:	f001 f907 	bl	80068f4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056e6:	f894 309d 	ldrb.w	r3, [r4, #157]	@ 0x9d
 80056ea:	b163      	cbz	r3, 8005706 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d011      	beq.n	8005714 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d00e      	beq.n	8005712 <prvDeleteTCB+0x36>
 80056f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	e7fe      	b.n	8005704 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8005706:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005708:	f000 fe86 	bl	8006418 <vPortFree>
				vPortFree( pxTCB );
 800570c:	4620      	mov	r0, r4
 800570e:	f000 fe83 	bl	8006418 <vPortFree>
	}
 8005712:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005714:	4620      	mov	r0, r4
 8005716:	f000 fe7f 	bl	8006418 <vPortFree>
 800571a:	e7fa      	b.n	8005712 <prvDeleteTCB+0x36>

0800571c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800571c:	4b0f      	ldr	r3, [pc, #60]	@ (800575c <prvCheckTasksWaitingTermination+0x40>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	b1d3      	cbz	r3, 8005758 <prvCheckTasksWaitingTermination+0x3c>
{
 8005722:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8005724:	f000 fc3e 	bl	8005fa4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005728:	4b0d      	ldr	r3, [pc, #52]	@ (8005760 <prvCheckTasksWaitingTermination+0x44>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800572e:	1d20      	adds	r0, r4, #4
 8005730:	f7ff fb36 	bl	8004da0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005734:	4a0b      	ldr	r2, [pc, #44]	@ (8005764 <prvCheckTasksWaitingTermination+0x48>)
 8005736:	6813      	ldr	r3, [r2, #0]
 8005738:	3b01      	subs	r3, #1
 800573a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800573c:	4a07      	ldr	r2, [pc, #28]	@ (800575c <prvCheckTasksWaitingTermination+0x40>)
 800573e:	6813      	ldr	r3, [r2, #0]
 8005740:	3b01      	subs	r3, #1
 8005742:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8005744:	f000 fc50 	bl	8005fe8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005748:	4620      	mov	r0, r4
 800574a:	f7ff ffc7 	bl	80056dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800574e:	4b03      	ldr	r3, [pc, #12]	@ (800575c <prvCheckTasksWaitingTermination+0x40>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e6      	bne.n	8005724 <prvCheckTasksWaitingTermination+0x8>
}
 8005756:	bd10      	pop	{r4, pc}
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	20000414 	.word	0x20000414
 8005760:	20000418 	.word	0x20000418
 8005764:	200003fc 	.word	0x200003fc

08005768 <prvIdleTask>:
{
 8005768:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800576a:	f7ff ffd7 	bl	800571c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800576e:	4b07      	ldr	r3, [pc, #28]	@ (800578c <prvIdleTask+0x24>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d9f9      	bls.n	800576a <prvIdleTask+0x2>
				taskYIELD();
 8005776:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800577a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800577e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	e7ee      	b.n	800576a <prvIdleTask+0x2>
 800578c:	20000470 	.word	0x20000470

08005790 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	4604      	mov	r4, r0
 8005794:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005796:	4b1d      	ldr	r3, [pc, #116]	@ (800580c <prvAddCurrentTaskToDelayedList+0x7c>)
 8005798:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800579a:	4b1d      	ldr	r3, [pc, #116]	@ (8005810 <prvAddCurrentTaskToDelayedList+0x80>)
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	3004      	adds	r0, #4
 80057a0:	f7ff fafe 	bl	8004da0 <uxListRemove>
 80057a4:	b948      	cbnz	r0, 80057ba <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80057a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005810 <prvAddCurrentTaskToDelayedList+0x80>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ac:	2201      	movs	r2, #1
 80057ae:	409a      	lsls	r2, r3
 80057b0:	4918      	ldr	r1, [pc, #96]	@ (8005814 <prvAddCurrentTaskToDelayedList+0x84>)
 80057b2:	680b      	ldr	r3, [r1, #0]
 80057b4:	ea23 0302 	bic.w	r3, r3, r2
 80057b8:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057ba:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80057be:	d00d      	beq.n	80057dc <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057c0:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057c2:	4b13      	ldr	r3, [pc, #76]	@ (8005810 <prvAddCurrentTaskToDelayedList+0x80>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80057c8:	42a6      	cmp	r6, r4
 80057ca:	d910      	bls.n	80057ee <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057cc:	4b12      	ldr	r3, [pc, #72]	@ (8005818 <prvAddCurrentTaskToDelayedList+0x88>)
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005810 <prvAddCurrentTaskToDelayedList+0x80>)
 80057d2:	6819      	ldr	r1, [r3, #0]
 80057d4:	3104      	adds	r1, #4
 80057d6:	f7ff faca 	bl	8004d6e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057da:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057dc:	2d00      	cmp	r5, #0
 80057de:	d0ef      	beq.n	80057c0 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005810 <prvAddCurrentTaskToDelayedList+0x80>)
 80057e2:	6819      	ldr	r1, [r3, #0]
 80057e4:	3104      	adds	r1, #4
 80057e6:	480d      	ldr	r0, [pc, #52]	@ (800581c <prvAddCurrentTaskToDelayedList+0x8c>)
 80057e8:	f7ff fab6 	bl	8004d58 <vListInsertEnd>
 80057ec:	e7f5      	b.n	80057da <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005820 <prvAddCurrentTaskToDelayedList+0x90>)
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	4b07      	ldr	r3, [pc, #28]	@ (8005810 <prvAddCurrentTaskToDelayedList+0x80>)
 80057f4:	6819      	ldr	r1, [r3, #0]
 80057f6:	3104      	adds	r1, #4
 80057f8:	f7ff fab9 	bl	8004d6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057fc:	4b09      	ldr	r3, [pc, #36]	@ (8005824 <prvAddCurrentTaskToDelayedList+0x94>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	42a3      	cmp	r3, r4
 8005802:	d9ea      	bls.n	80057da <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 8005804:	4b07      	ldr	r3, [pc, #28]	@ (8005824 <prvAddCurrentTaskToDelayedList+0x94>)
 8005806:	601c      	str	r4, [r3, #0]
}
 8005808:	e7e7      	b.n	80057da <prvAddCurrentTaskToDelayedList+0x4a>
 800580a:	bf00      	nop
 800580c:	200003f8 	.word	0x200003f8
 8005810:	200004fc 	.word	0x200004fc
 8005814:	200003f4 	.word	0x200003f4
 8005818:	20000440 	.word	0x20000440
 800581c:	20000400 	.word	0x20000400
 8005820:	20000444 	.word	0x20000444
 8005824:	200003dc 	.word	0x200003dc

08005828 <xTaskCreateStatic>:
	{
 8005828:	b530      	push	{r4, r5, lr}
 800582a:	b087      	sub	sp, #28
 800582c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800582e:	b17c      	cbz	r4, 8005850 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005830:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005832:	b1b5      	cbz	r5, 8005862 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005834:	25a0      	movs	r5, #160	@ 0xa0
 8005836:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005838:	9d04      	ldr	r5, [sp, #16]
 800583a:	2da0      	cmp	r5, #160	@ 0xa0
 800583c:	d01a      	beq.n	8005874 <xTaskCreateStatic+0x4c>
 800583e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	e7fe      	b.n	800584e <xTaskCreateStatic+0x26>
 8005850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8005860:	e7fe      	b.n	8005860 <xTaskCreateStatic+0x38>
 8005862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8005872:	e7fe      	b.n	8005872 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005874:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005876:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005878:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800587a:	2402      	movs	r4, #2
 800587c:	f885 409d 	strb.w	r4, [r5, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005880:	2400      	movs	r4, #0
 8005882:	9403      	str	r4, [sp, #12]
 8005884:	9502      	str	r5, [sp, #8]
 8005886:	ac05      	add	r4, sp, #20
 8005888:	9401      	str	r4, [sp, #4]
 800588a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800588c:	9400      	str	r4, [sp, #0]
 800588e:	f7ff fe3f 	bl	8005510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005892:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005894:	f7ff fece 	bl	8005634 <prvAddNewTaskToReadyList>
	}
 8005898:	9805      	ldr	r0, [sp, #20]
 800589a:	b007      	add	sp, #28
 800589c:	bd30      	pop	{r4, r5, pc}

0800589e <xTaskCreate>:
	{
 800589e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058a2:	b085      	sub	sp, #20
 80058a4:	4607      	mov	r7, r0
 80058a6:	4688      	mov	r8, r1
 80058a8:	4614      	mov	r4, r2
 80058aa:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058ac:	0090      	lsls	r0, r2, #2
 80058ae:	f000 fd31 	bl	8006314 <pvPortMalloc>
			if( pxStack != NULL )
 80058b2:	b308      	cbz	r0, 80058f8 <xTaskCreate+0x5a>
 80058b4:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058b6:	20a0      	movs	r0, #160	@ 0xa0
 80058b8:	f000 fd2c 	bl	8006314 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80058bc:	4605      	mov	r5, r0
 80058be:	b1a8      	cbz	r0, 80058ec <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 80058c0:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058c4:	2300      	movs	r3, #0
 80058c6:	f880 309d 	strb.w	r3, [r0, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058ca:	9303      	str	r3, [sp, #12]
 80058cc:	9002      	str	r0, [sp, #8]
 80058ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058d0:	9301      	str	r3, [sp, #4]
 80058d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	4633      	mov	r3, r6
 80058d8:	4622      	mov	r2, r4
 80058da:	4641      	mov	r1, r8
 80058dc:	4638      	mov	r0, r7
 80058de:	f7ff fe17 	bl	8005510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058e2:	4628      	mov	r0, r5
 80058e4:	f7ff fea6 	bl	8005634 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058e8:	2001      	movs	r0, #1
 80058ea:	e007      	b.n	80058fc <xTaskCreate+0x5e>
					vPortFree( pxStack );
 80058ec:	4648      	mov	r0, r9
 80058ee:	f000 fd93 	bl	8006418 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058f6:	e001      	b.n	80058fc <xTaskCreate+0x5e>
 80058f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 80058fc:	b005      	add	sp, #20
 80058fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08005904 <vTaskStartScheduler>:
{
 8005904:	b510      	push	{r4, lr}
 8005906:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005908:	2400      	movs	r4, #0
 800590a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800590c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800590e:	aa07      	add	r2, sp, #28
 8005910:	a906      	add	r1, sp, #24
 8005912:	a805      	add	r0, sp, #20
 8005914:	f7fa fdfa 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005918:	9b05      	ldr	r3, [sp, #20]
 800591a:	9302      	str	r3, [sp, #8]
 800591c:	9b06      	ldr	r3, [sp, #24]
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	9400      	str	r4, [sp, #0]
 8005922:	4623      	mov	r3, r4
 8005924:	9a07      	ldr	r2, [sp, #28]
 8005926:	4910      	ldr	r1, [pc, #64]	@ (8005968 <vTaskStartScheduler+0x64>)
 8005928:	4810      	ldr	r0, [pc, #64]	@ (800596c <vTaskStartScheduler+0x68>)
 800592a:	f7ff ff7d 	bl	8005828 <xTaskCreateStatic>
 800592e:	4b10      	ldr	r3, [pc, #64]	@ (8005970 <vTaskStartScheduler+0x6c>)
 8005930:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8005932:	b1b8      	cbz	r0, 8005964 <vTaskStartScheduler+0x60>
 8005934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005944:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <vTaskStartScheduler+0x70>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	334c      	adds	r3, #76	@ 0x4c
 800594a:	4a0b      	ldr	r2, [pc, #44]	@ (8005978 <vTaskStartScheduler+0x74>)
 800594c:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800594e:	4b0b      	ldr	r3, [pc, #44]	@ (800597c <vTaskStartScheduler+0x78>)
 8005950:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005954:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005956:	4b0a      	ldr	r3, [pc, #40]	@ (8005980 <vTaskStartScheduler+0x7c>)
 8005958:	2201      	movs	r2, #1
 800595a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800595c:	4b09      	ldr	r3, [pc, #36]	@ (8005984 <vTaskStartScheduler+0x80>)
 800595e:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005960:	f000 fbba 	bl	80060d8 <xPortStartScheduler>
}
 8005964:	b008      	add	sp, #32
 8005966:	bd10      	pop	{r4, pc}
 8005968:	08006b54 	.word	0x08006b54
 800596c:	08005769 	.word	0x08005769
 8005970:	200003d8 	.word	0x200003d8
 8005974:	200004fc 	.word	0x200004fc
 8005978:	20000030 	.word	0x20000030
 800597c:	200003dc 	.word	0x200003dc
 8005980:	200003f0 	.word	0x200003f0
 8005984:	200003f8 	.word	0x200003f8

08005988 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005988:	4a02      	ldr	r2, [pc, #8]	@ (8005994 <vTaskSuspendAll+0xc>)
 800598a:	6813      	ldr	r3, [r2, #0]
 800598c:	3301      	adds	r3, #1
 800598e:	6013      	str	r3, [r2, #0]
}
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	200003d4 	.word	0x200003d4

08005998 <xTaskIncrementTick>:
{
 8005998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800599a:	4b3a      	ldr	r3, [pc, #232]	@ (8005a84 <xTaskIncrementTick+0xec>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d169      	bne.n	8005a76 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059a2:	4b39      	ldr	r3, [pc, #228]	@ (8005a88 <xTaskIncrementTick+0xf0>)
 80059a4:	681d      	ldr	r5, [r3, #0]
 80059a6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80059a8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059aa:	b9c5      	cbnz	r5, 80059de <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80059ac:	4b37      	ldr	r3, [pc, #220]	@ (8005a8c <xTaskIncrementTick+0xf4>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	b143      	cbz	r3, 80059c6 <xTaskIncrementTick+0x2e>
 80059b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	e7fe      	b.n	80059c4 <xTaskIncrementTick+0x2c>
 80059c6:	4a31      	ldr	r2, [pc, #196]	@ (8005a8c <xTaskIncrementTick+0xf4>)
 80059c8:	6811      	ldr	r1, [r2, #0]
 80059ca:	4b31      	ldr	r3, [pc, #196]	@ (8005a90 <xTaskIncrementTick+0xf8>)
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	6010      	str	r0, [r2, #0]
 80059d0:	6019      	str	r1, [r3, #0]
 80059d2:	4a30      	ldr	r2, [pc, #192]	@ (8005a94 <xTaskIncrementTick+0xfc>)
 80059d4:	6813      	ldr	r3, [r2, #0]
 80059d6:	3301      	adds	r3, #1
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	f7ff fd83 	bl	80054e4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059de:	4b2e      	ldr	r3, [pc, #184]	@ (8005a98 <xTaskIncrementTick+0x100>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	42ab      	cmp	r3, r5
 80059e4:	d93d      	bls.n	8005a62 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 80059e6:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059e8:	4b2c      	ldr	r3, [pc, #176]	@ (8005a9c <xTaskIncrementTick+0x104>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80059f2:	009a      	lsls	r2, r3, #2
 80059f4:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa0 <xTaskIncrementTick+0x108>)
 80059f6:	589b      	ldr	r3, [r3, r2]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d900      	bls.n	80059fe <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 80059fc:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 80059fe:	4b29      	ldr	r3, [pc, #164]	@ (8005aa4 <xTaskIncrementTick+0x10c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d03c      	beq.n	8005a80 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8005a06:	2701      	movs	r7, #1
	return xSwitchRequired;
 8005a08:	e03a      	b.n	8005a80 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8005a0a:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8005a8c <xTaskIncrementTick+0xf4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	b343      	cbz	r3, 8005a66 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a14:	4b1d      	ldr	r3, [pc, #116]	@ (8005a8c <xTaskIncrementTick+0xf4>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a1c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8005a1e:	429d      	cmp	r5, r3
 8005a20:	d326      	bcc.n	8005a70 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a22:	1d26      	adds	r6, r4, #4
 8005a24:	4630      	mov	r0, r6
 8005a26:	f7ff f9bb 	bl	8004da0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a2a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005a2c:	b11b      	cbz	r3, 8005a36 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a2e:	f104 0018 	add.w	r0, r4, #24
 8005a32:	f7ff f9b5 	bl	8004da0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a36:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005a38:	2201      	movs	r2, #1
 8005a3a:	409a      	lsls	r2, r3
 8005a3c:	491a      	ldr	r1, [pc, #104]	@ (8005aa8 <xTaskIncrementTick+0x110>)
 8005a3e:	6808      	ldr	r0, [r1, #0]
 8005a40:	4302      	orrs	r2, r0
 8005a42:	600a      	str	r2, [r1, #0]
 8005a44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a48:	009a      	lsls	r2, r3, #2
 8005a4a:	4631      	mov	r1, r6
 8005a4c:	4814      	ldr	r0, [pc, #80]	@ (8005aa0 <xTaskIncrementTick+0x108>)
 8005a4e:	4410      	add	r0, r2
 8005a50:	f7ff f982 	bl	8004d58 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a54:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005a56:	4b11      	ldr	r3, [pc, #68]	@ (8005a9c <xTaskIncrementTick+0x104>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d2d4      	bcs.n	8005a0a <xTaskIncrementTick+0x72>
 8005a60:	e7d4      	b.n	8005a0c <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8005a62:	2700      	movs	r7, #0
 8005a64:	e7d2      	b.n	8005a0c <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a66:	4b0c      	ldr	r3, [pc, #48]	@ (8005a98 <xTaskIncrementTick+0x100>)
 8005a68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a6c:	601a      	str	r2, [r3, #0]
					break;
 8005a6e:	e7bb      	b.n	80059e8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8005a70:	4a09      	ldr	r2, [pc, #36]	@ (8005a98 <xTaskIncrementTick+0x100>)
 8005a72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a74:	e7b8      	b.n	80059e8 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8005a76:	4a0d      	ldr	r2, [pc, #52]	@ (8005aac <xTaskIncrementTick+0x114>)
 8005a78:	6813      	ldr	r3, [r2, #0]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005a7e:	2700      	movs	r7, #0
}
 8005a80:	4638      	mov	r0, r7
 8005a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a84:	200003d4 	.word	0x200003d4
 8005a88:	200003f8 	.word	0x200003f8
 8005a8c:	20000444 	.word	0x20000444
 8005a90:	20000440 	.word	0x20000440
 8005a94:	200003e4 	.word	0x200003e4
 8005a98:	200003dc 	.word	0x200003dc
 8005a9c:	200004fc 	.word	0x200004fc
 8005aa0:	20000470 	.word	0x20000470
 8005aa4:	200003e8 	.word	0x200003e8
 8005aa8:	200003f4 	.word	0x200003f4
 8005aac:	200003ec 	.word	0x200003ec

08005ab0 <xTaskResumeAll>:
{
 8005ab0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8005ab2:	4b35      	ldr	r3, [pc, #212]	@ (8005b88 <xTaskResumeAll+0xd8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	b943      	cbnz	r3, 8005aca <xTaskResumeAll+0x1a>
 8005ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	e7fe      	b.n	8005ac8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8005aca:	f000 fa6b 	bl	8005fa4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005ace:	4b2e      	ldr	r3, [pc, #184]	@ (8005b88 <xTaskResumeAll+0xd8>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	3a01      	subs	r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d14f      	bne.n	8005b7c <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005adc:	4b2b      	ldr	r3, [pc, #172]	@ (8005b8c <xTaskResumeAll+0xdc>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	b90b      	cbnz	r3, 8005ae6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8005ae2:	2400      	movs	r4, #0
 8005ae4:	e04b      	b.n	8005b7e <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8005ae6:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ae8:	4b29      	ldr	r3, [pc, #164]	@ (8005b90 <xTaskResumeAll+0xe0>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	b31b      	cbz	r3, 8005b36 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aee:	4b28      	ldr	r3, [pc, #160]	@ (8005b90 <xTaskResumeAll+0xe0>)
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005af4:	f104 0018 	add.w	r0, r4, #24
 8005af8:	f7ff f952 	bl	8004da0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005afc:	1d25      	adds	r5, r4, #4
 8005afe:	4628      	mov	r0, r5
 8005b00:	f7ff f94e 	bl	8004da0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b04:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005b06:	2301      	movs	r3, #1
 8005b08:	4083      	lsls	r3, r0
 8005b0a:	4a22      	ldr	r2, [pc, #136]	@ (8005b94 <xTaskResumeAll+0xe4>)
 8005b0c:	6811      	ldr	r1, [r2, #0]
 8005b0e:	430b      	orrs	r3, r1
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b16:	4629      	mov	r1, r5
 8005b18:	4b1f      	ldr	r3, [pc, #124]	@ (8005b98 <xTaskResumeAll+0xe8>)
 8005b1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005b1e:	f7ff f91b 	bl	8004d58 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b22:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005b24:	4b1d      	ldr	r3, [pc, #116]	@ (8005b9c <xTaskResumeAll+0xec>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d3dc      	bcc.n	8005ae8 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8005b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ba0 <xTaskResumeAll+0xf0>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	e7d8      	b.n	8005ae8 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8005b36:	b10c      	cbz	r4, 8005b3c <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8005b38:	f7ff fcd4 	bl	80054e4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b3c:	4b19      	ldr	r3, [pc, #100]	@ (8005ba4 <xTaskResumeAll+0xf4>)
 8005b3e:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005b40:	b984      	cbnz	r4, 8005b64 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8005b42:	4b17      	ldr	r3, [pc, #92]	@ (8005ba0 <xTaskResumeAll+0xf0>)
 8005b44:	681c      	ldr	r4, [r3, #0]
 8005b46:	b1d4      	cbz	r4, 8005b7e <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8005b48:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005b4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b50:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005b5c:	2401      	movs	r4, #1
 8005b5e:	e00e      	b.n	8005b7e <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b60:	3c01      	subs	r4, #1
 8005b62:	d007      	beq.n	8005b74 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8005b64:	f7ff ff18 	bl	8005998 <xTaskIncrementTick>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d0f9      	beq.n	8005b60 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba0 <xTaskResumeAll+0xf0>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	e7f5      	b.n	8005b60 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8005b74:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba4 <xTaskResumeAll+0xf4>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	e7e2      	b.n	8005b42 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8005b7c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005b7e:	f000 fa33 	bl	8005fe8 <vPortExitCritical>
}
 8005b82:	4620      	mov	r0, r4
 8005b84:	bd38      	pop	{r3, r4, r5, pc}
 8005b86:	bf00      	nop
 8005b88:	200003d4 	.word	0x200003d4
 8005b8c:	200003fc 	.word	0x200003fc
 8005b90:	2000042c 	.word	0x2000042c
 8005b94:	200003f4 	.word	0x200003f4
 8005b98:	20000470 	.word	0x20000470
 8005b9c:	200004fc 	.word	0x200004fc
 8005ba0:	200003e8 	.word	0x200003e8
 8005ba4:	200003ec 	.word	0x200003ec

08005ba8 <vTaskDelay>:
	{
 8005ba8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005baa:	b1a8      	cbz	r0, 8005bd8 <vTaskDelay+0x30>
 8005bac:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8005bae:	4b10      	ldr	r3, [pc, #64]	@ (8005bf0 <vTaskDelay+0x48>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	b143      	cbz	r3, 8005bc6 <vTaskDelay+0x1e>
 8005bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	e7fe      	b.n	8005bc4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005bc6:	f7ff fedf 	bl	8005988 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bca:	2100      	movs	r1, #0
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f7ff fddf 	bl	8005790 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005bd2:	f7ff ff6d 	bl	8005ab0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005bd6:	b948      	cbnz	r0, 8005bec <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8005bd8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005bdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005be0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	f3bf 8f6f 	isb	sy
	}
 8005bec:	bd10      	pop	{r4, pc}
 8005bee:	bf00      	nop
 8005bf0:	200003d4 	.word	0x200003d4

08005bf4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bf4:	4b22      	ldr	r3, [pc, #136]	@ (8005c80 <vTaskSwitchContext+0x8c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	b11b      	cbz	r3, 8005c02 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8005bfa:	4b22      	ldr	r3, [pc, #136]	@ (8005c84 <vTaskSwitchContext+0x90>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8005c02:	4b20      	ldr	r3, [pc, #128]	@ (8005c84 <vTaskSwitchContext+0x90>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c08:	4b1f      	ldr	r3, [pc, #124]	@ (8005c88 <vTaskSwitchContext+0x94>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c0c:	fab3 f383 	clz	r3, r3
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f1c3 031f 	rsb	r3, r3, #31
 8005c16:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005c1a:	008a      	lsls	r2, r1, #2
 8005c1c:	491b      	ldr	r1, [pc, #108]	@ (8005c8c <vTaskSwitchContext+0x98>)
 8005c1e:	588a      	ldr	r2, [r1, r2]
 8005c20:	b942      	cbnz	r2, 8005c34 <vTaskSwitchContext+0x40>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	e7fe      	b.n	8005c32 <vTaskSwitchContext+0x3e>
 8005c34:	4815      	ldr	r0, [pc, #84]	@ (8005c8c <vTaskSwitchContext+0x98>)
 8005c36:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005c3a:	008a      	lsls	r2, r1, #2
 8005c3c:	4402      	add	r2, r0
 8005c3e:	6851      	ldr	r1, [r2, #4]
 8005c40:	6849      	ldr	r1, [r1, #4]
 8005c42:	6051      	str	r1, [r2, #4]
 8005c44:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8005c48:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8005c4c:	3208      	adds	r2, #8
 8005c4e:	4402      	add	r2, r0
 8005c50:	4291      	cmp	r1, r2
 8005c52:	d00d      	beq.n	8005c70 <vTaskSwitchContext+0x7c>
 8005c54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c58:	009a      	lsls	r2, r3, #2
 8005c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c8c <vTaskSwitchContext+0x98>)
 8005c5c:	4413      	add	r3, r2
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	4b0b      	ldr	r3, [pc, #44]	@ (8005c90 <vTaskSwitchContext+0x9c>)
 8005c64:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	334c      	adds	r3, #76	@ 0x4c
 8005c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c94 <vTaskSwitchContext+0xa0>)
 8005c6c:	6013      	str	r3, [r2, #0]
}
 8005c6e:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c70:	6848      	ldr	r0, [r1, #4]
 8005c72:	4662      	mov	r2, ip
 8005c74:	0091      	lsls	r1, r2, #2
 8005c76:	4a05      	ldr	r2, [pc, #20]	@ (8005c8c <vTaskSwitchContext+0x98>)
 8005c78:	440a      	add	r2, r1
 8005c7a:	6050      	str	r0, [r2, #4]
 8005c7c:	e7ea      	b.n	8005c54 <vTaskSwitchContext+0x60>
 8005c7e:	bf00      	nop
 8005c80:	200003d4 	.word	0x200003d4
 8005c84:	200003e8 	.word	0x200003e8
 8005c88:	200003f4 	.word	0x200003f4
 8005c8c:	20000470 	.word	0x20000470
 8005c90:	200004fc 	.word	0x200004fc
 8005c94:	20000030 	.word	0x20000030

08005c98 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005c98:	b158      	cbz	r0, 8005cb2 <vTaskPlaceOnEventList+0x1a>
{
 8005c9a:	b510      	push	{r4, lr}
 8005c9c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c9e:	4a09      	ldr	r2, [pc, #36]	@ (8005cc4 <vTaskPlaceOnEventList+0x2c>)
 8005ca0:	6811      	ldr	r1, [r2, #0]
 8005ca2:	3118      	adds	r1, #24
 8005ca4:	f7ff f863 	bl	8004d6e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ca8:	2101      	movs	r1, #1
 8005caa:	4620      	mov	r0, r4
 8005cac:	f7ff fd70 	bl	8005790 <prvAddCurrentTaskToDelayedList>
}
 8005cb0:	bd10      	pop	{r4, pc}
 8005cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8005cc2:	e7fe      	b.n	8005cc2 <vTaskPlaceOnEventList+0x2a>
 8005cc4:	200004fc 	.word	0x200004fc

08005cc8 <xTaskRemoveFromEventList>:
{
 8005cc8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cca:	68c3      	ldr	r3, [r0, #12]
 8005ccc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005cce:	b324      	cbz	r4, 8005d1a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cd0:	f104 0518 	add.w	r5, r4, #24
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f7ff f863 	bl	8004da0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cda:	4b18      	ldr	r3, [pc, #96]	@ (8005d3c <xTaskRemoveFromEventList+0x74>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	bb2b      	cbnz	r3, 8005d2c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ce0:	1d25      	adds	r5, r4, #4
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f7ff f85c 	bl	8004da0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ce8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005cea:	2301      	movs	r3, #1
 8005cec:	4083      	lsls	r3, r0
 8005cee:	4a14      	ldr	r2, [pc, #80]	@ (8005d40 <xTaskRemoveFromEventList+0x78>)
 8005cf0:	6811      	ldr	r1, [r2, #0]
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	4b11      	ldr	r3, [pc, #68]	@ (8005d44 <xTaskRemoveFromEventList+0x7c>)
 8005cfe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005d02:	f7ff f829 	bl	8004d58 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d06:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005d08:	4b0f      	ldr	r3, [pc, #60]	@ (8005d48 <xTaskRemoveFromEventList+0x80>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d911      	bls.n	8005d36 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8005d12:	2001      	movs	r0, #1
 8005d14:	4b0d      	ldr	r3, [pc, #52]	@ (8005d4c <xTaskRemoveFromEventList+0x84>)
 8005d16:	6018      	str	r0, [r3, #0]
}
 8005d18:	bd38      	pop	{r3, r4, r5, pc}
 8005d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005d2a:	e7fe      	b.n	8005d2a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	4808      	ldr	r0, [pc, #32]	@ (8005d50 <xTaskRemoveFromEventList+0x88>)
 8005d30:	f7ff f812 	bl	8004d58 <vListInsertEnd>
 8005d34:	e7e7      	b.n	8005d06 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8005d36:	2000      	movs	r0, #0
	return xReturn;
 8005d38:	e7ee      	b.n	8005d18 <xTaskRemoveFromEventList+0x50>
 8005d3a:	bf00      	nop
 8005d3c:	200003d4 	.word	0x200003d4
 8005d40:	200003f4 	.word	0x200003f4
 8005d44:	20000470 	.word	0x20000470
 8005d48:	200004fc 	.word	0x200004fc
 8005d4c:	200003e8 	.word	0x200003e8
 8005d50:	2000042c 	.word	0x2000042c

08005d54 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d54:	4b03      	ldr	r3, [pc, #12]	@ (8005d64 <vTaskInternalSetTimeOutState+0x10>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d5a:	4b03      	ldr	r3, [pc, #12]	@ (8005d68 <vTaskInternalSetTimeOutState+0x14>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6043      	str	r3, [r0, #4]
}
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	200003e4 	.word	0x200003e4
 8005d68:	200003f8 	.word	0x200003f8

08005d6c <xTaskCheckForTimeOut>:
{
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8005d6e:	b1c8      	cbz	r0, 8005da4 <xTaskCheckForTimeOut+0x38>
 8005d70:	460c      	mov	r4, r1
 8005d72:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8005d74:	b1f9      	cbz	r1, 8005db6 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8005d76:	f000 f915 	bl	8005fa4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005de8 <xTaskCheckForTimeOut+0x7c>)
 8005d7c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d7e:	686b      	ldr	r3, [r5, #4]
 8005d80:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8005d82:	6822      	ldr	r2, [r4, #0]
 8005d84:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8005d88:	d026      	beq.n	8005dd8 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d8a:	4e18      	ldr	r6, [pc, #96]	@ (8005dec <xTaskCheckForTimeOut+0x80>)
 8005d8c:	6836      	ldr	r6, [r6, #0]
 8005d8e:	682f      	ldr	r7, [r5, #0]
 8005d90:	42b7      	cmp	r7, r6
 8005d92:	d001      	beq.n	8005d98 <xTaskCheckForTimeOut+0x2c>
 8005d94:	428b      	cmp	r3, r1
 8005d96:	d924      	bls.n	8005de2 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d98:	4282      	cmp	r2, r0
 8005d9a:	d815      	bhi.n	8005dc8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005da0:	2401      	movs	r4, #1
 8005da2:	e01a      	b.n	8005dda <xTaskCheckForTimeOut+0x6e>
 8005da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8005db4:	e7fe      	b.n	8005db4 <xTaskCheckForTimeOut+0x48>
 8005db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8005dc6:	e7fe      	b.n	8005dc6 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8005dc8:	1a5b      	subs	r3, r3, r1
 8005dca:	4413      	add	r3, r2
 8005dcc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f7ff ffc0 	bl	8005d54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dd4:	2400      	movs	r4, #0
 8005dd6:	e000      	b.n	8005dda <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8005dd8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005dda:	f000 f905 	bl	8005fe8 <vPortExitCritical>
}
 8005dde:	4620      	mov	r0, r4
 8005de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8005de2:	2401      	movs	r4, #1
 8005de4:	e7f9      	b.n	8005dda <xTaskCheckForTimeOut+0x6e>
 8005de6:	bf00      	nop
 8005de8:	200003f8 	.word	0x200003f8
 8005dec:	200003e4 	.word	0x200003e4

08005df0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005df0:	4b01      	ldr	r3, [pc, #4]	@ (8005df8 <vTaskMissedYield+0x8>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
}
 8005df6:	4770      	bx	lr
 8005df8:	200003e8 	.word	0x200003e8

08005dfc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005dfc:	4b05      	ldr	r3, [pc, #20]	@ (8005e14 <xTaskGetSchedulerState+0x18>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	b133      	cbz	r3, 8005e10 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e02:	4b05      	ldr	r3, [pc, #20]	@ (8005e18 <xTaskGetSchedulerState+0x1c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	b10b      	cbz	r3, 8005e0c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e08:	2000      	movs	r0, #0
	}
 8005e0a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8005e0c:	2002      	movs	r0, #2
 8005e0e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e10:	2001      	movs	r0, #1
 8005e12:	4770      	bx	lr
 8005e14:	200003f0 	.word	0x200003f0
 8005e18:	200003d4 	.word	0x200003d4

08005e1c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d04b      	beq.n	8005eb8 <xTaskPriorityDisinherit+0x9c>
	{
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8005e24:	4b26      	ldr	r3, [pc, #152]	@ (8005ec0 <xTaskPriorityDisinherit+0xa4>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4283      	cmp	r3, r0
 8005e2a:	d008      	beq.n	8005e3e <xTaskPriorityDisinherit+0x22>
 8005e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	e7fe      	b.n	8005e3c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e3e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8005e40:	b943      	cbnz	r3, 8005e54 <xTaskPriorityDisinherit+0x38>
 8005e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	e7fe      	b.n	8005e52 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8005e54:	3b01      	subs	r3, #1
 8005e56:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e58:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005e5a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8005e5c:	4291      	cmp	r1, r2
 8005e5e:	d02d      	beq.n	8005ebc <xTaskPriorityDisinherit+0xa0>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e60:	b10b      	cbz	r3, 8005e66 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8005e62:	2000      	movs	r0, #0
	}
 8005e64:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e66:	1d05      	adds	r5, r0, #4
 8005e68:	4628      	mov	r0, r5
 8005e6a:	f7fe ff99 	bl	8004da0 <uxListRemove>
 8005e6e:	b968      	cbnz	r0, 8005e8c <xTaskPriorityDisinherit+0x70>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e70:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005e72:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005e76:	0092      	lsls	r2, r2, #2
 8005e78:	4912      	ldr	r1, [pc, #72]	@ (8005ec4 <xTaskPriorityDisinherit+0xa8>)
 8005e7a:	588a      	ldr	r2, [r1, r2]
 8005e7c:	b932      	cbnz	r2, 8005e8c <xTaskPriorityDisinherit+0x70>
 8005e7e:	2201      	movs	r2, #1
 8005e80:	409a      	lsls	r2, r3
 8005e82:	4911      	ldr	r1, [pc, #68]	@ (8005ec8 <xTaskPriorityDisinherit+0xac>)
 8005e84:	680b      	ldr	r3, [r1, #0]
 8005e86:	ea23 0302 	bic.w	r3, r3, r2
 8005e8a:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e8c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8005e8e:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e90:	f1c0 0307 	rsb	r3, r0, #7
 8005e94:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e96:	2401      	movs	r4, #1
 8005e98:	fa04 f300 	lsl.w	r3, r4, r0
 8005e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ec8 <xTaskPriorityDisinherit+0xac>)
 8005e9e:	6811      	ldr	r1, [r2, #0]
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	4b06      	ldr	r3, [pc, #24]	@ (8005ec4 <xTaskPriorityDisinherit+0xa8>)
 8005eac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005eb0:	f7fe ff52 	bl	8004d58 <vListInsertEnd>
					xReturn = pdTRUE;
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	e7d5      	b.n	8005e64 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8005eb8:	2000      	movs	r0, #0
	}
 8005eba:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	e7d1      	b.n	8005e64 <xTaskPriorityDisinherit+0x48>
 8005ec0:	200004fc 	.word	0x200004fc
 8005ec4:	20000470 	.word	0x20000470
 8005ec8:	200003f4 	.word	0x200003f4

08005ecc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ecc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f08 <prvTaskExitError+0x3c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005eda:	d008      	beq.n	8005eee <prvTaskExitError+0x22>
 8005edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	e7fe      	b.n	8005eec <prvTaskExitError+0x20>
 8005eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005efe:	9b01      	ldr	r3, [sp, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0fc      	beq.n	8005efe <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f04:	b002      	add	sp, #8
 8005f06:	4770      	bx	lr
 8005f08:	2000002c 	.word	0x2000002c

08005f0c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f0c:	4808      	ldr	r0, [pc, #32]	@ (8005f30 <prvPortStartFirstTask+0x24>)
 8005f0e:	6800      	ldr	r0, [r0, #0]
 8005f10:	6800      	ldr	r0, [r0, #0]
 8005f12:	f380 8808 	msr	MSP, r0
 8005f16:	f04f 0000 	mov.w	r0, #0
 8005f1a:	f380 8814 	msr	CONTROL, r0
 8005f1e:	b662      	cpsie	i
 8005f20:	b661      	cpsie	f
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	df00      	svc	0
 8005f2c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f2e:	0000      	.short	0x0000
 8005f30:	e000ed08 	.word	0xe000ed08

08005f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005f44 <vPortEnableVFP+0x10>
 8005f38:	6801      	ldr	r1, [r0, #0]
 8005f3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005f3e:	6001      	str	r1, [r0, #0]
 8005f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f42:	0000      	.short	0x0000
 8005f44:	e000ed88 	.word	0xe000ed88

08005f48 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f4c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f50:	f021 0101 	bic.w	r1, r1, #1
 8005f54:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f58:	4b05      	ldr	r3, [pc, #20]	@ (8005f70 <pxPortInitialiseStack+0x28>)
 8005f5a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f5e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f62:	f06f 0302 	mvn.w	r3, #2
 8005f66:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005f6a:	3844      	subs	r0, #68	@ 0x44
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	08005ecd 	.word	0x08005ecd
	...

08005f80 <SVC_Handler>:
	__asm volatile (
 8005f80:	4b07      	ldr	r3, [pc, #28]	@ (8005fa0 <pxCurrentTCBConst2>)
 8005f82:	6819      	ldr	r1, [r3, #0]
 8005f84:	6808      	ldr	r0, [r1, #0]
 8005f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8a:	f380 8809 	msr	PSP, r0
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f04f 0000 	mov.w	r0, #0
 8005f96:	f380 8811 	msr	BASEPRI, r0
 8005f9a:	4770      	bx	lr
 8005f9c:	f3af 8000 	nop.w

08005fa0 <pxCurrentTCBConst2>:
 8005fa0:	200004fc 	.word	0x200004fc

08005fa4 <vPortEnterCritical>:
 8005fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8005fe4 <vPortEnterCritical+0x40>)
 8005fb6:	6813      	ldr	r3, [r2, #0]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d000      	beq.n	8005fc2 <vPortEnterCritical+0x1e>
}
 8005fc0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fc2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005fc6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8005fca:	f013 0fff 	tst.w	r3, #255	@ 0xff
 8005fce:	d0f7      	beq.n	8005fc0 <vPortEnterCritical+0x1c>
 8005fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	e7fe      	b.n	8005fe0 <vPortEnterCritical+0x3c>
 8005fe2:	bf00      	nop
 8005fe4:	2000002c 	.word	0x2000002c

08005fe8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005fe8:	4b09      	ldr	r3, [pc, #36]	@ (8006010 <vPortExitCritical+0x28>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	b943      	cbnz	r3, 8006000 <vPortExitCritical+0x18>
 8005fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	e7fe      	b.n	8005ffe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006000:	3b01      	subs	r3, #1
 8006002:	4a03      	ldr	r2, [pc, #12]	@ (8006010 <vPortExitCritical+0x28>)
 8006004:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006006:	b90b      	cbnz	r3, 800600c <vPortExitCritical+0x24>
	__asm volatile
 8006008:	f383 8811 	msr	BASEPRI, r3
}
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	2000002c 	.word	0x2000002c
	...

08006020 <PendSV_Handler>:
	__asm volatile
 8006020:	f3ef 8009 	mrs	r0, PSP
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	4b15      	ldr	r3, [pc, #84]	@ (8006080 <pxCurrentTCBConst>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	f01e 0f10 	tst.w	lr, #16
 8006030:	bf08      	it	eq
 8006032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603a:	6010      	str	r0, [r2, #0]
 800603c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006040:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006044:	f380 8811 	msr	BASEPRI, r0
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f7ff fdd0 	bl	8005bf4 <vTaskSwitchContext>
 8006054:	f04f 0000 	mov.w	r0, #0
 8006058:	f380 8811 	msr	BASEPRI, r0
 800605c:	bc09      	pop	{r0, r3}
 800605e:	6819      	ldr	r1, [r3, #0]
 8006060:	6808      	ldr	r0, [r1, #0]
 8006062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006066:	f01e 0f10 	tst.w	lr, #16
 800606a:	bf08      	it	eq
 800606c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006070:	f380 8809 	msr	PSP, r0
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	f3af 8000 	nop.w

08006080 <pxCurrentTCBConst>:
 8006080:	200004fc 	.word	0x200004fc

08006084 <SysTick_Handler>:
{
 8006084:	b508      	push	{r3, lr}
	__asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006096:	f7ff fc7f 	bl	8005998 <xTaskIncrementTick>
 800609a:	b128      	cbz	r0, 80060a8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800609c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80060a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80060a8:	2300      	movs	r3, #0
 80060aa:	f383 8811 	msr	BASEPRI, r3
}
 80060ae:	bd08      	pop	{r3, pc}

080060b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060b0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80060b4:	2300      	movs	r3, #0
 80060b6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060b8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060ba:	4b05      	ldr	r3, [pc, #20]	@ (80060d0 <vPortSetupTimerInterrupt+0x20>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4905      	ldr	r1, [pc, #20]	@ (80060d4 <vPortSetupTimerInterrupt+0x24>)
 80060c0:	fba1 1303 	umull	r1, r3, r1, r3
 80060c4:	099b      	lsrs	r3, r3, #6
 80060c6:	3b01      	subs	r3, #1
 80060c8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060ca:	2307      	movs	r3, #7
 80060cc:	6113      	str	r3, [r2, #16]
}
 80060ce:	4770      	bx	lr
 80060d0:	20000000 	.word	0x20000000
 80060d4:	10624dd3 	.word	0x10624dd3

080060d8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80060dc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80060e0:	4b3d      	ldr	r3, [pc, #244]	@ (80061d8 <xPortStartScheduler+0x100>)
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d01c      	beq.n	8006120 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060e6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80060ea:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80060ee:	4b3b      	ldr	r3, [pc, #236]	@ (80061dc <xPortStartScheduler+0x104>)
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d01e      	beq.n	8006132 <xPortStartScheduler+0x5a>
{
 80060f4:	b530      	push	{r4, r5, lr}
 80060f6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060f8:	4b39      	ldr	r3, [pc, #228]	@ (80061e0 <xPortStartScheduler+0x108>)
 80060fa:	781a      	ldrb	r2, [r3, #0]
 80060fc:	b2d2      	uxtb	r2, r2
 80060fe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006100:	22ff      	movs	r2, #255	@ 0xff
 8006102:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800610c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006110:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006114:	4a33      	ldr	r2, [pc, #204]	@ (80061e4 <xPortStartScheduler+0x10c>)
 8006116:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006118:	4b33      	ldr	r3, [pc, #204]	@ (80061e8 <xPortStartScheduler+0x110>)
 800611a:	2207      	movs	r2, #7
 800611c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800611e:	e01b      	b.n	8006158 <xPortStartScheduler+0x80>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006130:	e7fe      	b.n	8006130 <xPortStartScheduler+0x58>
 8006132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006142:	e7fe      	b.n	8006142 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8006144:	4a28      	ldr	r2, [pc, #160]	@ (80061e8 <xPortStartScheduler+0x110>)
 8006146:	6813      	ldr	r3, [r2, #0]
 8006148:	3b01      	subs	r3, #1
 800614a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800614c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	b2db      	uxtb	r3, r3
 8006154:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006158:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800615c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006160:	d1f0      	bne.n	8006144 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006162:	4b21      	ldr	r3, [pc, #132]	@ (80061e8 <xPortStartScheduler+0x110>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b03      	cmp	r3, #3
 8006168:	d008      	beq.n	800617c <xPortStartScheduler+0xa4>
 800616a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	e7fe      	b.n	800617a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800617c:	021b      	lsls	r3, r3, #8
 800617e:	4a1a      	ldr	r2, [pc, #104]	@ (80061e8 <xPortStartScheduler+0x110>)
 8006180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006182:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006186:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006188:	9b01      	ldr	r3, [sp, #4]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	4a14      	ldr	r2, [pc, #80]	@ (80061e0 <xPortStartScheduler+0x108>)
 800618e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006190:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8006194:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006198:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800619c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061a0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80061a4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80061a8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80061ac:	f7ff ff80 	bl	80060b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80061b0:	2500      	movs	r5, #0
 80061b2:	4b0e      	ldr	r3, [pc, #56]	@ (80061ec <xPortStartScheduler+0x114>)
 80061b4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80061b6:	f7ff febd 	bl	8005f34 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061ba:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80061be:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80061c2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80061c6:	f7ff fea1 	bl	8005f0c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80061ca:	f7ff fd13 	bl	8005bf4 <vTaskSwitchContext>
	prvTaskExitError();
 80061ce:	f7ff fe7d 	bl	8005ecc <prvTaskExitError>
}
 80061d2:	4628      	mov	r0, r5
 80061d4:	b003      	add	sp, #12
 80061d6:	bd30      	pop	{r4, r5, pc}
 80061d8:	410fc271 	.word	0x410fc271
 80061dc:	410fc270 	.word	0x410fc270
 80061e0:	e000e400 	.word	0xe000e400
 80061e4:	20000504 	.word	0x20000504
 80061e8:	20000500 	.word	0x20000500
 80061ec:	2000002c 	.word	0x2000002c

080061f0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80061f0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80061f4:	2b0f      	cmp	r3, #15
 80061f6:	d90f      	bls.n	8006218 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80061f8:	4a11      	ldr	r2, [pc, #68]	@ (8006240 <vPortValidateInterruptPriority+0x50>)
 80061fa:	5c9b      	ldrb	r3, [r3, r2]
 80061fc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061fe:	4a11      	ldr	r2, [pc, #68]	@ (8006244 <vPortValidateInterruptPriority+0x54>)
 8006200:	7812      	ldrb	r2, [r2, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d908      	bls.n	8006218 <vPortValidateInterruptPriority+0x28>
 8006206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	e7fe      	b.n	8006216 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006218:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800621c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8006220:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006224:	4a08      	ldr	r2, [pc, #32]	@ (8006248 <vPortValidateInterruptPriority+0x58>)
 8006226:	6812      	ldr	r2, [r2, #0]
 8006228:	4293      	cmp	r3, r2
 800622a:	d908      	bls.n	800623e <vPortValidateInterruptPriority+0x4e>
 800622c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	e7fe      	b.n	800623c <vPortValidateInterruptPriority+0x4c>
	}
 800623e:	4770      	bx	lr
 8006240:	e000e3f0 	.word	0xe000e3f0
 8006244:	20000504 	.word	0x20000504
 8006248:	20000500 	.word	0x20000500

0800624c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800624c:	4a12      	ldr	r2, [pc, #72]	@ (8006298 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800624e:	f012 0f07 	tst.w	r2, #7
 8006252:	d01e      	beq.n	8006292 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006254:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006256:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800625a:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 800625e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006260:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006262:	480e      	ldr	r0, [pc, #56]	@ (800629c <prvHeapInit+0x50>)
 8006264:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006266:	2100      	movs	r1, #0
 8006268:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800626a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800626c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800626e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8006272:	480b      	ldr	r0, [pc, #44]	@ (80062a0 <prvHeapInit+0x54>)
 8006274:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006276:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006278:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800627a:	1a99      	subs	r1, r3, r2
 800627c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800627e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006280:	4b08      	ldr	r3, [pc, #32]	@ (80062a4 <prvHeapInit+0x58>)
 8006282:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006284:	4b08      	ldr	r3, [pc, #32]	@ (80062a8 <prvHeapInit+0x5c>)
 8006286:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006288:	4b08      	ldr	r3, [pc, #32]	@ (80062ac <prvHeapInit+0x60>)
 800628a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800628e:	601a      	str	r2, [r3, #0]
}
 8006290:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006292:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006296:	e7e4      	b.n	8006262 <prvHeapInit+0x16>
 8006298:	20000528 	.word	0x20000528
 800629c:	20000520 	.word	0x20000520
 80062a0:	2000051c 	.word	0x2000051c
 80062a4:	20000514 	.word	0x20000514
 80062a8:	20000518 	.word	0x20000518
 80062ac:	20000508 	.word	0x20000508

080062b0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062b0:	4b16      	ldr	r3, [pc, #88]	@ (800630c <prvInsertBlockIntoFreeList+0x5c>)
 80062b2:	461a      	mov	r2, r3
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4283      	cmp	r3, r0
 80062b8:	d3fb      	bcc.n	80062b2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062ba:	6851      	ldr	r1, [r2, #4]
 80062bc:	eb02 0c01 	add.w	ip, r2, r1
 80062c0:	4584      	cmp	ip, r0
 80062c2:	d009      	beq.n	80062d8 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062c4:	6841      	ldr	r1, [r0, #4]
 80062c6:	eb00 0c01 	add.w	ip, r0, r1
 80062ca:	4563      	cmp	r3, ip
 80062cc:	d009      	beq.n	80062e2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062ce:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062d0:	4290      	cmp	r0, r2
 80062d2:	d019      	beq.n	8006308 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062d4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 80062d6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062d8:	6840      	ldr	r0, [r0, #4]
 80062da:	4401      	add	r1, r0
 80062dc:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80062de:	4610      	mov	r0, r2
 80062e0:	e7f0      	b.n	80062c4 <prvInsertBlockIntoFreeList+0x14>
{
 80062e2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062e4:	4c0a      	ldr	r4, [pc, #40]	@ (8006310 <prvInsertBlockIntoFreeList+0x60>)
 80062e6:	6824      	ldr	r4, [r4, #0]
 80062e8:	42a3      	cmp	r3, r4
 80062ea:	d00b      	beq.n	8006304 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	4419      	add	r1, r3
 80062f0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062f2:	6813      	ldr	r3, [r2, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80062f8:	4290      	cmp	r0, r2
 80062fa:	d000      	beq.n	80062fe <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062fc:	6010      	str	r0, [r2, #0]
	}
}
 80062fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006302:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006304:	6004      	str	r4, [r0, #0]
 8006306:	e7f7      	b.n	80062f8 <prvInsertBlockIntoFreeList+0x48>
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	20000520 	.word	0x20000520
 8006310:	2000051c 	.word	0x2000051c

08006314 <pvPortMalloc>:
{
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006318:	f7ff fb36 	bl	8005988 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800631c:	4b38      	ldr	r3, [pc, #224]	@ (8006400 <pvPortMalloc+0xec>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	b1b3      	cbz	r3, 8006350 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006322:	4b38      	ldr	r3, [pc, #224]	@ (8006404 <pvPortMalloc+0xf0>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	421c      	tst	r4, r3
 8006328:	d150      	bne.n	80063cc <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 800632a:	2c00      	cmp	r4, #0
 800632c:	d050      	beq.n	80063d0 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 800632e:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006332:	f014 0f07 	tst.w	r4, #7
 8006336:	d002      	beq.n	800633e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006338:	f022 0207 	bic.w	r2, r2, #7
 800633c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800633e:	2a00      	cmp	r2, #0
 8006340:	d055      	beq.n	80063ee <pvPortMalloc+0xda>
 8006342:	4b31      	ldr	r3, [pc, #196]	@ (8006408 <pvPortMalloc+0xf4>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4293      	cmp	r3, r2
 8006348:	d353      	bcc.n	80063f2 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 800634a:	4930      	ldr	r1, [pc, #192]	@ (800640c <pvPortMalloc+0xf8>)
 800634c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800634e:	e004      	b.n	800635a <pvPortMalloc+0x46>
			prvHeapInit();
 8006350:	f7ff ff7c 	bl	800624c <prvHeapInit>
 8006354:	e7e5      	b.n	8006322 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8006356:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8006358:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800635a:	6863      	ldr	r3, [r4, #4]
 800635c:	4293      	cmp	r3, r2
 800635e:	d202      	bcs.n	8006366 <pvPortMalloc+0x52>
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1f7      	bne.n	8006356 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8006366:	4b26      	ldr	r3, [pc, #152]	@ (8006400 <pvPortMalloc+0xec>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	42a3      	cmp	r3, r4
 800636c:	d043      	beq.n	80063f6 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800636e:	680d      	ldr	r5, [r1, #0]
 8006370:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006376:	6863      	ldr	r3, [r4, #4]
 8006378:	1a9b      	subs	r3, r3, r2
 800637a:	2b10      	cmp	r3, #16
 800637c:	d910      	bls.n	80063a0 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800637e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006380:	f010 0f07 	tst.w	r0, #7
 8006384:	d008      	beq.n	8006398 <pvPortMalloc+0x84>
 8006386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	e7fe      	b.n	8006396 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006398:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800639a:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800639c:	f7ff ff88 	bl	80062b0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063a0:	6862      	ldr	r2, [r4, #4]
 80063a2:	4919      	ldr	r1, [pc, #100]	@ (8006408 <pvPortMalloc+0xf4>)
 80063a4:	680b      	ldr	r3, [r1, #0]
 80063a6:	1a9b      	subs	r3, r3, r2
 80063a8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063aa:	4919      	ldr	r1, [pc, #100]	@ (8006410 <pvPortMalloc+0xfc>)
 80063ac:	6809      	ldr	r1, [r1, #0]
 80063ae:	428b      	cmp	r3, r1
 80063b0:	d201      	bcs.n	80063b6 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063b2:	4917      	ldr	r1, [pc, #92]	@ (8006410 <pvPortMalloc+0xfc>)
 80063b4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063b6:	4b13      	ldr	r3, [pc, #76]	@ (8006404 <pvPortMalloc+0xf0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 80063c2:	4a14      	ldr	r2, [pc, #80]	@ (8006414 <pvPortMalloc+0x100>)
 80063c4:	6813      	ldr	r3, [r2, #0]
 80063c6:	3301      	adds	r3, #1
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	e002      	b.n	80063d2 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 80063cc:	2500      	movs	r5, #0
 80063ce:	e000      	b.n	80063d2 <pvPortMalloc+0xbe>
 80063d0:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 80063d2:	f7ff fb6d 	bl	8005ab0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063d6:	f015 0f07 	tst.w	r5, #7
 80063da:	d00e      	beq.n	80063fa <pvPortMalloc+0xe6>
 80063dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	e7fe      	b.n	80063ec <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 80063ee:	2500      	movs	r5, #0
 80063f0:	e7ef      	b.n	80063d2 <pvPortMalloc+0xbe>
 80063f2:	2500      	movs	r5, #0
 80063f4:	e7ed      	b.n	80063d2 <pvPortMalloc+0xbe>
 80063f6:	2500      	movs	r5, #0
 80063f8:	e7eb      	b.n	80063d2 <pvPortMalloc+0xbe>
}
 80063fa:	4628      	mov	r0, r5
 80063fc:	bd38      	pop	{r3, r4, r5, pc}
 80063fe:	bf00      	nop
 8006400:	2000051c 	.word	0x2000051c
 8006404:	20000508 	.word	0x20000508
 8006408:	20000518 	.word	0x20000518
 800640c:	20000520 	.word	0x20000520
 8006410:	20000514 	.word	0x20000514
 8006414:	20000510 	.word	0x20000510

08006418 <vPortFree>:
	if( pv != NULL )
 8006418:	2800      	cmp	r0, #0
 800641a:	d034      	beq.n	8006486 <vPortFree+0x6e>
{
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8006420:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006424:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006428:	4a17      	ldr	r2, [pc, #92]	@ (8006488 <vPortFree+0x70>)
 800642a:	6812      	ldr	r2, [r2, #0]
 800642c:	4213      	tst	r3, r2
 800642e:	d108      	bne.n	8006442 <vPortFree+0x2a>
 8006430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	e7fe      	b.n	8006440 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006442:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006446:	b141      	cbz	r1, 800645a <vPortFree+0x42>
 8006448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	e7fe      	b.n	8006458 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800645a:	ea23 0302 	bic.w	r3, r3, r2
 800645e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006462:	f7ff fa91 	bl	8005988 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006466:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800646a:	4a08      	ldr	r2, [pc, #32]	@ (800648c <vPortFree+0x74>)
 800646c:	6813      	ldr	r3, [r2, #0]
 800646e:	440b      	add	r3, r1
 8006470:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006472:	4628      	mov	r0, r5
 8006474:	f7ff ff1c 	bl	80062b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006478:	4a05      	ldr	r2, [pc, #20]	@ (8006490 <vPortFree+0x78>)
 800647a:	6813      	ldr	r3, [r2, #0]
 800647c:	3301      	adds	r3, #1
 800647e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8006480:	f7ff fb16 	bl	8005ab0 <xTaskResumeAll>
}
 8006484:	bd38      	pop	{r3, r4, r5, pc}
 8006486:	4770      	bx	lr
 8006488:	20000508 	.word	0x20000508
 800648c:	20000518 	.word	0x20000518
 8006490:	2000050c 	.word	0x2000050c

08006494 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006494:	2904      	cmp	r1, #4
 8006496:	d00c      	beq.n	80064b2 <USBH_UserProcess+0x1e>
 8006498:	2905      	cmp	r1, #5
 800649a:	d002      	beq.n	80064a2 <USBH_UserProcess+0xe>
 800649c:	2902      	cmp	r1, #2
 800649e:	d004      	beq.n	80064aa <USBH_UserProcess+0x16>
 80064a0:	4770      	bx	lr
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80064a2:	4b06      	ldr	r3, [pc, #24]	@ (80064bc <USBH_UserProcess+0x28>)
 80064a4:	2203      	movs	r2, #3
 80064a6:	701a      	strb	r2, [r3, #0]
  break;
 80064a8:	4770      	bx	lr

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80064aa:	4b04      	ldr	r3, [pc, #16]	@ (80064bc <USBH_UserProcess+0x28>)
 80064ac:	2202      	movs	r2, #2
 80064ae:	701a      	strb	r2, [r3, #0]
  break;
 80064b0:	4770      	bx	lr

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80064b2:	4b02      	ldr	r3, [pc, #8]	@ (80064bc <USBH_UserProcess+0x28>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	701a      	strb	r2, [r3, #0]

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	20004128 	.word	0x20004128

080064c0 <MX_USB_HOST_Init>:
{
 80064c0:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80064c2:	2201      	movs	r2, #1
 80064c4:	490b      	ldr	r1, [pc, #44]	@ (80064f4 <MX_USB_HOST_Init+0x34>)
 80064c6:	480c      	ldr	r0, [pc, #48]	@ (80064f8 <MX_USB_HOST_Init+0x38>)
 80064c8:	f7fd fd22 	bl	8003f10 <USBH_Init>
 80064cc:	b948      	cbnz	r0, 80064e2 <MX_USB_HOST_Init+0x22>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MTP_CLASS) != USBH_OK)
 80064ce:	490b      	ldr	r1, [pc, #44]	@ (80064fc <MX_USB_HOST_Init+0x3c>)
 80064d0:	4809      	ldr	r0, [pc, #36]	@ (80064f8 <MX_USB_HOST_Init+0x38>)
 80064d2:	f7fd fd61 	bl	8003f98 <USBH_RegisterClass>
 80064d6:	b938      	cbnz	r0, 80064e8 <MX_USB_HOST_Init+0x28>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80064d8:	4807      	ldr	r0, [pc, #28]	@ (80064f8 <MX_USB_HOST_Init+0x38>)
 80064da:	f7fd fda2 	bl	8004022 <USBH_Start>
 80064de:	b930      	cbnz	r0, 80064ee <MX_USB_HOST_Init+0x2e>
}
 80064e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80064e2:	f7fa f88f 	bl	8000604 <Error_Handler>
 80064e6:	e7f2      	b.n	80064ce <MX_USB_HOST_Init+0xe>
    Error_Handler();
 80064e8:	f7fa f88c 	bl	8000604 <Error_Handler>
 80064ec:	e7f4      	b.n	80064d8 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 80064ee:	f7fa f889 	bl	8000604 <Error_Handler>
}
 80064f2:	e7f5      	b.n	80064e0 <MX_USB_HOST_Init+0x20>
 80064f4:	08006495 	.word	0x08006495
 80064f8:	2000412c 	.word	0x2000412c
 80064fc:	2000000c 	.word	0x2000000c

08006500 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006500:	b530      	push	{r4, r5, lr}
 8006502:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006504:	2300      	movs	r3, #0
 8006506:	9303      	str	r3, [sp, #12]
 8006508:	9304      	str	r3, [sp, #16]
 800650a:	9305      	str	r3, [sp, #20]
 800650c:	9306      	str	r3, [sp, #24]
 800650e:	9307      	str	r3, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006510:	6803      	ldr	r3, [r0, #0]
 8006512:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006516:	d001      	beq.n	800651c <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006518:	b009      	add	sp, #36	@ 0x24
 800651a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800651c:	2500      	movs	r5, #0
 800651e:	9501      	str	r5, [sp, #4]
 8006520:	4c16      	ldr	r4, [pc, #88]	@ (800657c <HAL_HCD_MspInit+0x7c>)
 8006522:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006524:	f043 0301 	orr.w	r3, r3, #1
 8006528:	6323      	str	r3, [r4, #48]	@ 0x30
 800652a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006534:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006538:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800653a:	2302      	movs	r3, #2
 800653c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800653e:	2303      	movs	r3, #3
 8006540:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006542:	230a      	movs	r3, #10
 8006544:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006546:	a903      	add	r1, sp, #12
 8006548:	480d      	ldr	r0, [pc, #52]	@ (8006580 <HAL_HCD_MspInit+0x80>)
 800654a:	f7fa fa95 	bl	8000a78 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800654e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006554:	6363      	str	r3, [r4, #52]	@ 0x34
 8006556:	9502      	str	r5, [sp, #8]
 8006558:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800655a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800655e:	6463      	str	r3, [r4, #68]	@ 0x44
 8006560:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006566:	9302      	str	r3, [sp, #8]
 8006568:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800656a:	462a      	mov	r2, r5
 800656c:	2105      	movs	r1, #5
 800656e:	2043      	movs	r0, #67	@ 0x43
 8006570:	f7fa fa64 	bl	8000a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006574:	2043      	movs	r0, #67	@ 0x43
 8006576:	f7fa fa71 	bl	8000a5c <HAL_NVIC_EnableIRQ>
}
 800657a:	e7cd      	b.n	8006518 <HAL_HCD_MspInit+0x18>
 800657c:	40023800 	.word	0x40023800
 8006580:	40020000 	.word	0x40020000

08006584 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006584:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 8006586:	f8d0 0300 	ldr.w	r0, [r0, #768]	@ 0x300
 800658a:	f7fd fef0 	bl	800436e <USBH_LL_IncTimer>
}
 800658e:	bd08      	pop	{r3, pc}

08006590 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006590:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 8006592:	f8d0 0300 	ldr.w	r0, [r0, #768]	@ 0x300
 8006596:	f7fd ff03 	bl	80043a0 <USBH_LL_Connect>
}
 800659a:	bd08      	pop	{r3, pc}

0800659c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800659c:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 800659e:	f8d0 0300 	ldr.w	r0, [r0, #768]	@ 0x300
 80065a2:	f7fd ff0f 	bl	80043c4 <USBH_LL_Disconnect>
}
 80065a6:	bd08      	pop	{r3, pc}

080065a8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80065a8:	b508      	push	{r3, lr}
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80065aa:	f8d0 0300 	ldr.w	r0, [r0, #768]	@ 0x300
 80065ae:	f7fd ff27 	bl	8004400 <USBH_LL_NotifyURBChange>
#endif
}
 80065b2:	bd08      	pop	{r3, pc}

080065b4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80065b4:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 80065b6:	f8d0 0300 	ldr.w	r0, [r0, #768]	@ 0x300
 80065ba:	f7fd fee1 	bl	8004380 <USBH_LL_PortEnabled>
}
 80065be:	bd08      	pop	{r3, pc}

080065c0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80065c0:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 80065c2:	f8d0 0300 	ldr.w	r0, [r0, #768]	@ 0x300
 80065c6:	f7fd fee7 	bl	8004398 <USBH_LL_PortDisabled>
}
 80065ca:	bd08      	pop	{r3, pc}

080065cc <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80065cc:	f890 33cc 	ldrb.w	r3, [r0, #972]	@ 0x3cc
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d001      	beq.n	80065d8 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 80065d4:	2000      	movs	r0, #0
 80065d6:	4770      	bx	lr
{
 80065d8:	b510      	push	{r4, lr}
 80065da:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.pData = phost;
 80065dc:	480f      	ldr	r0, [pc, #60]	@ (800661c <USBH_LL_Init+0x50>)
 80065de:	f8c0 4300 	str.w	r4, [r0, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80065e2:	f8c4 03d0 	str.w	r0, [r4, #976]	@ 0x3d0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80065e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80065ea:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80065ec:	2308      	movs	r3, #8
 80065ee:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80065f0:	2301      	movs	r3, #1
 80065f2:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80065f4:	2300      	movs	r3, #0
 80065f6:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80065f8:	2202      	movs	r2, #2
 80065fa:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80065fc:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80065fe:	f7fa fbd0 	bl	8000da2 <HAL_HCD_Init>
 8006602:	b940      	cbnz	r0, 8006616 <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006604:	4805      	ldr	r0, [pc, #20]	@ (800661c <USBH_LL_Init+0x50>)
 8006606:	f7fb f916 	bl	8001836 <HAL_HCD_GetCurrentFrame>
 800660a:	4601      	mov	r1, r0
 800660c:	4620      	mov	r0, r4
 800660e:	f7fd feab 	bl	8004368 <USBH_LL_SetTimer>
}
 8006612:	2000      	movs	r0, #0
 8006614:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006616:	f7f9 fff5 	bl	8000604 <Error_Handler>
 800661a:	e7f3      	b.n	8006604 <USBH_LL_Init+0x38>
 800661c:	20004510 	.word	0x20004510

08006620 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006620:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006622:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 8006626:	f7fb f90b 	bl	8001840 <HAL_HCD_GetCurrentSpeed>
 800662a:	2801      	cmp	r0, #1
 800662c:	d004      	beq.n	8006638 <USBH_LL_GetSpeed+0x18>
 800662e:	2802      	cmp	r0, #2
 8006630:	d004      	beq.n	800663c <USBH_LL_GetSpeed+0x1c>
 8006632:	b120      	cbz	r0, 800663e <USBH_LL_GetSpeed+0x1e>
  case 2 :
    speed = USBH_SPEED_LOW;
    break;

  default:
   speed = USBH_SPEED_FULL;
 8006634:	2001      	movs	r0, #1
 8006636:	e002      	b.n	800663e <USBH_LL_GetSpeed+0x1e>
    speed = USBH_SPEED_FULL;
 8006638:	2001      	movs	r0, #1
 800663a:	e000      	b.n	800663e <USBH_LL_GetSpeed+0x1e>
    speed = USBH_SPEED_LOW;
 800663c:	2002      	movs	r0, #2
    break;
  }
  return  speed;
}
 800663e:	bd08      	pop	{r3, pc}

08006640 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006640:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006642:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 8006646:	f7fb f8f1 	bl	800182c <HAL_HCD_HC_GetXferCount>
}
 800664a:	bd08      	pop	{r3, pc}

0800664c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800664c:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800664e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 8006652:	f7fb f8e5 	bl	8001820 <HAL_HCD_HC_GetURBState>
}
 8006656:	bd08      	pop	{r3, pc}

08006658 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006658:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800665a:	f890 33cc 	ldrb.w	r3, [r0, #972]	@ 0x3cc
 800665e:	2b01      	cmp	r3, #1
 8006660:	d004      	beq.n	800666c <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006662:	20c8      	movs	r0, #200	@ 0xc8
 8006664:	f7fa f990 	bl	8000988 <HAL_Delay>
  return USBH_OK;
}
 8006668:	2000      	movs	r0, #0
 800666a:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 800666c:	4608      	mov	r0, r1
 800666e:	f000 f86d 	bl	800674c <MX_DriverVbusFS>
 8006672:	e7f6      	b.n	8006662 <USBH_LL_DriverVBUS+0xa>

08006674 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006674:	f8d0 33d0 	ldr.w	r3, [r0, #976]	@ 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8006678:	202c      	movs	r0, #44	@ 0x2c
 800667a:	fb00 3001 	mla	r0, r0, r1, r3
 800667e:	f890 003b 	ldrb.w	r0, [r0, #59]	@ 0x3b
 8006682:	b130      	cbz	r0, 8006692 <USBH_LL_SetToggle+0x1e>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006684:	202c      	movs	r0, #44	@ 0x2c
 8006686:	fb00 3101 	mla	r1, r0, r1, r3
 800668a:	f881 2054 	strb.w	r2, [r1, #84]	@ 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 800668e:	2000      	movs	r0, #0
 8006690:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8006692:	202c      	movs	r0, #44	@ 0x2c
 8006694:	fb00 3101 	mla	r1, r0, r1, r3
 8006698:	f881 2055 	strb.w	r2, [r1, #85]	@ 0x55
 800669c:	e7f7      	b.n	800668e <USBH_LL_SetToggle+0x1a>

0800669e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800669e:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80066a0:	f7fa f972 	bl	8000988 <HAL_Delay>
}
 80066a4:	bd08      	pop	{r3, pc}

080066a6 <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 80066a6:	2802      	cmp	r0, #2
 80066a8:	d805      	bhi.n	80066b6 <USBH_Get_USB_Status+0x10>
 80066aa:	e8df f000 	tbb	[pc, r0]
 80066ae:	0405      	.short	0x0405
 80066b0:	02          	.byte	0x02
 80066b1:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80066b2:	2001      	movs	r0, #1
    break;
 80066b4:	4770      	bx	lr
      usb_status = USBH_FAIL;
 80066b6:	2002      	movs	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 80066b8:	4770      	bx	lr

080066ba <USBH_LL_Start>:
{
 80066ba:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 80066bc:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 80066c0:	f7fb f882 	bl	80017c8 <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 80066c4:	f7ff ffef 	bl	80066a6 <USBH_Get_USB_Status>
}
 80066c8:	bd08      	pop	{r3, pc}

080066ca <USBH_LL_Stop>:
{
 80066ca:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 80066cc:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 80066d0:	f7fb f88f 	bl	80017f2 <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 80066d4:	f7ff ffe7 	bl	80066a6 <USBH_Get_USB_Status>
}
 80066d8:	bd08      	pop	{r3, pc}

080066da <USBH_LL_ResetPort>:
{
 80066da:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 80066dc:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 80066e0:	f7fb f899 	bl	8001816 <HAL_HCD_ResetPort>
  usb_status = USBH_Get_USB_Status(hal_status);
 80066e4:	f7ff ffdf 	bl	80066a6 <USBH_Get_USB_Status>
}
 80066e8:	bd08      	pop	{r3, pc}

080066ea <USBH_LL_OpenPipe>:
{
 80066ea:	b510      	push	{r4, lr}
 80066ec:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80066ee:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 80066f2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80066f6:	9402      	str	r4, [sp, #8]
 80066f8:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80066fc:	9401      	str	r4, [sp, #4]
 80066fe:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8006702:	9400      	str	r4, [sp, #0]
 8006704:	f7fa faf4 	bl	8000cf0 <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 8006708:	f7ff ffcd 	bl	80066a6 <USBH_Get_USB_Status>
}
 800670c:	b004      	add	sp, #16
 800670e:	bd10      	pop	{r4, pc}

08006710 <USBH_LL_ClosePipe>:
{
 8006710:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006712:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 8006716:	f7fa fb32 	bl	8000d7e <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 800671a:	f7ff ffc4 	bl	80066a6 <USBH_Get_USB_Status>
}
 800671e:	bd08      	pop	{r3, pc}

08006720 <USBH_LL_SubmitURB>:
{
 8006720:	b510      	push	{r4, lr}
 8006722:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006724:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 8006728:	f89d 4024 	ldrb.w	r4, [sp, #36]	@ 0x24
 800672c:	9403      	str	r4, [sp, #12]
 800672e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8006732:	9402      	str	r4, [sp, #8]
 8006734:	9c07      	ldr	r4, [sp, #28]
 8006736:	9401      	str	r4, [sp, #4]
 8006738:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800673c:	9400      	str	r4, [sp, #0]
 800673e:	f7fa fb82 	bl	8000e46 <HAL_HCD_HC_SubmitRequest>
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006742:	f7ff ffb0 	bl	80066a6 <USBH_Get_USB_Status>
}
 8006746:	b004      	add	sp, #16
 8006748:	bd10      	pop	{r4, pc}
	...

0800674c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800674c:	b508      	push	{r3, lr}
  uint8_t data = state;
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800674e:	b930      	cbnz	r0, 800675e <MX_DriverVbusFS+0x12>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8006750:	2201      	movs	r2, #1
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,(GPIO_PinState)data);
 8006752:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006756:	4803      	ldr	r0, [pc, #12]	@ (8006764 <MX_DriverVbusFS+0x18>)
 8006758:	f7fa fa72 	bl	8000c40 <HAL_GPIO_WritePin>
}
 800675c:	bd08      	pop	{r3, pc}
    data = GPIO_PIN_RESET;
 800675e:	2200      	movs	r2, #0
 8006760:	e7f7      	b.n	8006752 <MX_DriverVbusFS+0x6>
 8006762:	bf00      	nop
 8006764:	40020800 	.word	0x40020800

08006768 <malloc>:
 8006768:	4b02      	ldr	r3, [pc, #8]	@ (8006774 <malloc+0xc>)
 800676a:	4601      	mov	r1, r0
 800676c:	6818      	ldr	r0, [r3, #0]
 800676e:	f000 b82d 	b.w	80067cc <_malloc_r>
 8006772:	bf00      	nop
 8006774:	20000030 	.word	0x20000030

08006778 <free>:
 8006778:	4b02      	ldr	r3, [pc, #8]	@ (8006784 <free+0xc>)
 800677a:	4601      	mov	r1, r0
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	f000 b961 	b.w	8006a44 <_free_r>
 8006782:	bf00      	nop
 8006784:	20000030 	.word	0x20000030

08006788 <sbrk_aligned>:
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	4e0f      	ldr	r6, [pc, #60]	@ (80067c8 <sbrk_aligned+0x40>)
 800678c:	460c      	mov	r4, r1
 800678e:	6831      	ldr	r1, [r6, #0]
 8006790:	4605      	mov	r5, r0
 8006792:	b911      	cbnz	r1, 800679a <sbrk_aligned+0x12>
 8006794:	f000 f90c 	bl	80069b0 <_sbrk_r>
 8006798:	6030      	str	r0, [r6, #0]
 800679a:	4621      	mov	r1, r4
 800679c:	4628      	mov	r0, r5
 800679e:	f000 f907 	bl	80069b0 <_sbrk_r>
 80067a2:	1c43      	adds	r3, r0, #1
 80067a4:	d103      	bne.n	80067ae <sbrk_aligned+0x26>
 80067a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80067aa:	4620      	mov	r0, r4
 80067ac:	bd70      	pop	{r4, r5, r6, pc}
 80067ae:	1cc4      	adds	r4, r0, #3
 80067b0:	f024 0403 	bic.w	r4, r4, #3
 80067b4:	42a0      	cmp	r0, r4
 80067b6:	d0f8      	beq.n	80067aa <sbrk_aligned+0x22>
 80067b8:	1a21      	subs	r1, r4, r0
 80067ba:	4628      	mov	r0, r5
 80067bc:	f000 f8f8 	bl	80069b0 <_sbrk_r>
 80067c0:	3001      	adds	r0, #1
 80067c2:	d1f2      	bne.n	80067aa <sbrk_aligned+0x22>
 80067c4:	e7ef      	b.n	80067a6 <sbrk_aligned+0x1e>
 80067c6:	bf00      	nop
 80067c8:	20004814 	.word	0x20004814

080067cc <_malloc_r>:
 80067cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067d0:	1ccd      	adds	r5, r1, #3
 80067d2:	f025 0503 	bic.w	r5, r5, #3
 80067d6:	3508      	adds	r5, #8
 80067d8:	2d0c      	cmp	r5, #12
 80067da:	bf38      	it	cc
 80067dc:	250c      	movcc	r5, #12
 80067de:	2d00      	cmp	r5, #0
 80067e0:	4606      	mov	r6, r0
 80067e2:	db01      	blt.n	80067e8 <_malloc_r+0x1c>
 80067e4:	42a9      	cmp	r1, r5
 80067e6:	d904      	bls.n	80067f2 <_malloc_r+0x26>
 80067e8:	230c      	movs	r3, #12
 80067ea:	6033      	str	r3, [r6, #0]
 80067ec:	2000      	movs	r0, #0
 80067ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80068c8 <_malloc_r+0xfc>
 80067f6:	f000 f869 	bl	80068cc <__malloc_lock>
 80067fa:	f8d8 3000 	ldr.w	r3, [r8]
 80067fe:	461c      	mov	r4, r3
 8006800:	bb44      	cbnz	r4, 8006854 <_malloc_r+0x88>
 8006802:	4629      	mov	r1, r5
 8006804:	4630      	mov	r0, r6
 8006806:	f7ff ffbf 	bl	8006788 <sbrk_aligned>
 800680a:	1c43      	adds	r3, r0, #1
 800680c:	4604      	mov	r4, r0
 800680e:	d158      	bne.n	80068c2 <_malloc_r+0xf6>
 8006810:	f8d8 4000 	ldr.w	r4, [r8]
 8006814:	4627      	mov	r7, r4
 8006816:	2f00      	cmp	r7, #0
 8006818:	d143      	bne.n	80068a2 <_malloc_r+0xd6>
 800681a:	2c00      	cmp	r4, #0
 800681c:	d04b      	beq.n	80068b6 <_malloc_r+0xea>
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	4639      	mov	r1, r7
 8006822:	4630      	mov	r0, r6
 8006824:	eb04 0903 	add.w	r9, r4, r3
 8006828:	f000 f8c2 	bl	80069b0 <_sbrk_r>
 800682c:	4581      	cmp	r9, r0
 800682e:	d142      	bne.n	80068b6 <_malloc_r+0xea>
 8006830:	6821      	ldr	r1, [r4, #0]
 8006832:	1a6d      	subs	r5, r5, r1
 8006834:	4629      	mov	r1, r5
 8006836:	4630      	mov	r0, r6
 8006838:	f7ff ffa6 	bl	8006788 <sbrk_aligned>
 800683c:	3001      	adds	r0, #1
 800683e:	d03a      	beq.n	80068b6 <_malloc_r+0xea>
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	442b      	add	r3, r5
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	f8d8 3000 	ldr.w	r3, [r8]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	bb62      	cbnz	r2, 80068a8 <_malloc_r+0xdc>
 800684e:	f8c8 7000 	str.w	r7, [r8]
 8006852:	e00f      	b.n	8006874 <_malloc_r+0xa8>
 8006854:	6822      	ldr	r2, [r4, #0]
 8006856:	1b52      	subs	r2, r2, r5
 8006858:	d420      	bmi.n	800689c <_malloc_r+0xd0>
 800685a:	2a0b      	cmp	r2, #11
 800685c:	d917      	bls.n	800688e <_malloc_r+0xc2>
 800685e:	1961      	adds	r1, r4, r5
 8006860:	42a3      	cmp	r3, r4
 8006862:	6025      	str	r5, [r4, #0]
 8006864:	bf18      	it	ne
 8006866:	6059      	strne	r1, [r3, #4]
 8006868:	6863      	ldr	r3, [r4, #4]
 800686a:	bf08      	it	eq
 800686c:	f8c8 1000 	streq.w	r1, [r8]
 8006870:	5162      	str	r2, [r4, r5]
 8006872:	604b      	str	r3, [r1, #4]
 8006874:	4630      	mov	r0, r6
 8006876:	f000 f82f 	bl	80068d8 <__malloc_unlock>
 800687a:	f104 000b 	add.w	r0, r4, #11
 800687e:	1d23      	adds	r3, r4, #4
 8006880:	f020 0007 	bic.w	r0, r0, #7
 8006884:	1ac2      	subs	r2, r0, r3
 8006886:	bf1c      	itt	ne
 8006888:	1a1b      	subne	r3, r3, r0
 800688a:	50a3      	strne	r3, [r4, r2]
 800688c:	e7af      	b.n	80067ee <_malloc_r+0x22>
 800688e:	6862      	ldr	r2, [r4, #4]
 8006890:	42a3      	cmp	r3, r4
 8006892:	bf0c      	ite	eq
 8006894:	f8c8 2000 	streq.w	r2, [r8]
 8006898:	605a      	strne	r2, [r3, #4]
 800689a:	e7eb      	b.n	8006874 <_malloc_r+0xa8>
 800689c:	4623      	mov	r3, r4
 800689e:	6864      	ldr	r4, [r4, #4]
 80068a0:	e7ae      	b.n	8006800 <_malloc_r+0x34>
 80068a2:	463c      	mov	r4, r7
 80068a4:	687f      	ldr	r7, [r7, #4]
 80068a6:	e7b6      	b.n	8006816 <_malloc_r+0x4a>
 80068a8:	461a      	mov	r2, r3
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	42a3      	cmp	r3, r4
 80068ae:	d1fb      	bne.n	80068a8 <_malloc_r+0xdc>
 80068b0:	2300      	movs	r3, #0
 80068b2:	6053      	str	r3, [r2, #4]
 80068b4:	e7de      	b.n	8006874 <_malloc_r+0xa8>
 80068b6:	230c      	movs	r3, #12
 80068b8:	6033      	str	r3, [r6, #0]
 80068ba:	4630      	mov	r0, r6
 80068bc:	f000 f80c 	bl	80068d8 <__malloc_unlock>
 80068c0:	e794      	b.n	80067ec <_malloc_r+0x20>
 80068c2:	6005      	str	r5, [r0, #0]
 80068c4:	e7d6      	b.n	8006874 <_malloc_r+0xa8>
 80068c6:	bf00      	nop
 80068c8:	20004818 	.word	0x20004818

080068cc <__malloc_lock>:
 80068cc:	4801      	ldr	r0, [pc, #4]	@ (80068d4 <__malloc_lock+0x8>)
 80068ce:	f000 b8a9 	b.w	8006a24 <__retarget_lock_acquire_recursive>
 80068d2:	bf00      	nop
 80068d4:	20004958 	.word	0x20004958

080068d8 <__malloc_unlock>:
 80068d8:	4801      	ldr	r0, [pc, #4]	@ (80068e0 <__malloc_unlock+0x8>)
 80068da:	f000 b8a4 	b.w	8006a26 <__retarget_lock_release_recursive>
 80068de:	bf00      	nop
 80068e0:	20004958 	.word	0x20004958

080068e4 <memset>:
 80068e4:	4402      	add	r2, r0
 80068e6:	4603      	mov	r3, r0
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d100      	bne.n	80068ee <memset+0xa>
 80068ec:	4770      	bx	lr
 80068ee:	f803 1b01 	strb.w	r1, [r3], #1
 80068f2:	e7f9      	b.n	80068e8 <memset+0x4>

080068f4 <_reclaim_reent>:
 80068f4:	4b2d      	ldr	r3, [pc, #180]	@ (80069ac <_reclaim_reent+0xb8>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4283      	cmp	r3, r0
 80068fa:	b570      	push	{r4, r5, r6, lr}
 80068fc:	4604      	mov	r4, r0
 80068fe:	d053      	beq.n	80069a8 <_reclaim_reent+0xb4>
 8006900:	69c3      	ldr	r3, [r0, #28]
 8006902:	b31b      	cbz	r3, 800694c <_reclaim_reent+0x58>
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	b163      	cbz	r3, 8006922 <_reclaim_reent+0x2e>
 8006908:	2500      	movs	r5, #0
 800690a:	69e3      	ldr	r3, [r4, #28]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	5959      	ldr	r1, [r3, r5]
 8006910:	b9b1      	cbnz	r1, 8006940 <_reclaim_reent+0x4c>
 8006912:	3504      	adds	r5, #4
 8006914:	2d80      	cmp	r5, #128	@ 0x80
 8006916:	d1f8      	bne.n	800690a <_reclaim_reent+0x16>
 8006918:	69e3      	ldr	r3, [r4, #28]
 800691a:	4620      	mov	r0, r4
 800691c:	68d9      	ldr	r1, [r3, #12]
 800691e:	f000 f891 	bl	8006a44 <_free_r>
 8006922:	69e3      	ldr	r3, [r4, #28]
 8006924:	6819      	ldr	r1, [r3, #0]
 8006926:	b111      	cbz	r1, 800692e <_reclaim_reent+0x3a>
 8006928:	4620      	mov	r0, r4
 800692a:	f000 f88b 	bl	8006a44 <_free_r>
 800692e:	69e3      	ldr	r3, [r4, #28]
 8006930:	689d      	ldr	r5, [r3, #8]
 8006932:	b15d      	cbz	r5, 800694c <_reclaim_reent+0x58>
 8006934:	4629      	mov	r1, r5
 8006936:	4620      	mov	r0, r4
 8006938:	682d      	ldr	r5, [r5, #0]
 800693a:	f000 f883 	bl	8006a44 <_free_r>
 800693e:	e7f8      	b.n	8006932 <_reclaim_reent+0x3e>
 8006940:	680e      	ldr	r6, [r1, #0]
 8006942:	4620      	mov	r0, r4
 8006944:	f000 f87e 	bl	8006a44 <_free_r>
 8006948:	4631      	mov	r1, r6
 800694a:	e7e1      	b.n	8006910 <_reclaim_reent+0x1c>
 800694c:	6961      	ldr	r1, [r4, #20]
 800694e:	b111      	cbz	r1, 8006956 <_reclaim_reent+0x62>
 8006950:	4620      	mov	r0, r4
 8006952:	f000 f877 	bl	8006a44 <_free_r>
 8006956:	69e1      	ldr	r1, [r4, #28]
 8006958:	b111      	cbz	r1, 8006960 <_reclaim_reent+0x6c>
 800695a:	4620      	mov	r0, r4
 800695c:	f000 f872 	bl	8006a44 <_free_r>
 8006960:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006962:	b111      	cbz	r1, 800696a <_reclaim_reent+0x76>
 8006964:	4620      	mov	r0, r4
 8006966:	f000 f86d 	bl	8006a44 <_free_r>
 800696a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800696c:	b111      	cbz	r1, 8006974 <_reclaim_reent+0x80>
 800696e:	4620      	mov	r0, r4
 8006970:	f000 f868 	bl	8006a44 <_free_r>
 8006974:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006976:	b111      	cbz	r1, 800697e <_reclaim_reent+0x8a>
 8006978:	4620      	mov	r0, r4
 800697a:	f000 f863 	bl	8006a44 <_free_r>
 800697e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006980:	b111      	cbz	r1, 8006988 <_reclaim_reent+0x94>
 8006982:	4620      	mov	r0, r4
 8006984:	f000 f85e 	bl	8006a44 <_free_r>
 8006988:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800698a:	b111      	cbz	r1, 8006992 <_reclaim_reent+0x9e>
 800698c:	4620      	mov	r0, r4
 800698e:	f000 f859 	bl	8006a44 <_free_r>
 8006992:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006994:	b111      	cbz	r1, 800699c <_reclaim_reent+0xa8>
 8006996:	4620      	mov	r0, r4
 8006998:	f000 f854 	bl	8006a44 <_free_r>
 800699c:	6a23      	ldr	r3, [r4, #32]
 800699e:	b11b      	cbz	r3, 80069a8 <_reclaim_reent+0xb4>
 80069a0:	4620      	mov	r0, r4
 80069a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80069a6:	4718      	bx	r3
 80069a8:	bd70      	pop	{r4, r5, r6, pc}
 80069aa:	bf00      	nop
 80069ac:	20000030 	.word	0x20000030

080069b0 <_sbrk_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	4d06      	ldr	r5, [pc, #24]	@ (80069cc <_sbrk_r+0x1c>)
 80069b4:	2300      	movs	r3, #0
 80069b6:	4604      	mov	r4, r0
 80069b8:	4608      	mov	r0, r1
 80069ba:	602b      	str	r3, [r5, #0]
 80069bc:	f7f9 ff60 	bl	8000880 <_sbrk>
 80069c0:	1c43      	adds	r3, r0, #1
 80069c2:	d102      	bne.n	80069ca <_sbrk_r+0x1a>
 80069c4:	682b      	ldr	r3, [r5, #0]
 80069c6:	b103      	cbz	r3, 80069ca <_sbrk_r+0x1a>
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	bd38      	pop	{r3, r4, r5, pc}
 80069cc:	20004954 	.word	0x20004954

080069d0 <__errno>:
 80069d0:	4b01      	ldr	r3, [pc, #4]	@ (80069d8 <__errno+0x8>)
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	20000030 	.word	0x20000030

080069dc <__libc_init_array>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	4d0d      	ldr	r5, [pc, #52]	@ (8006a14 <__libc_init_array+0x38>)
 80069e0:	4c0d      	ldr	r4, [pc, #52]	@ (8006a18 <__libc_init_array+0x3c>)
 80069e2:	1b64      	subs	r4, r4, r5
 80069e4:	10a4      	asrs	r4, r4, #2
 80069e6:	2600      	movs	r6, #0
 80069e8:	42a6      	cmp	r6, r4
 80069ea:	d109      	bne.n	8006a00 <__libc_init_array+0x24>
 80069ec:	4d0b      	ldr	r5, [pc, #44]	@ (8006a1c <__libc_init_array+0x40>)
 80069ee:	4c0c      	ldr	r4, [pc, #48]	@ (8006a20 <__libc_init_array+0x44>)
 80069f0:	f000 f872 	bl	8006ad8 <_init>
 80069f4:	1b64      	subs	r4, r4, r5
 80069f6:	10a4      	asrs	r4, r4, #2
 80069f8:	2600      	movs	r6, #0
 80069fa:	42a6      	cmp	r6, r4
 80069fc:	d105      	bne.n	8006a0a <__libc_init_array+0x2e>
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a04:	4798      	blx	r3
 8006a06:	3601      	adds	r6, #1
 8006a08:	e7ee      	b.n	80069e8 <__libc_init_array+0xc>
 8006a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a0e:	4798      	blx	r3
 8006a10:	3601      	adds	r6, #1
 8006a12:	e7f2      	b.n	80069fa <__libc_init_array+0x1e>
 8006a14:	08006b7c 	.word	0x08006b7c
 8006a18:	08006b7c 	.word	0x08006b7c
 8006a1c:	08006b7c 	.word	0x08006b7c
 8006a20:	08006b80 	.word	0x08006b80

08006a24 <__retarget_lock_acquire_recursive>:
 8006a24:	4770      	bx	lr

08006a26 <__retarget_lock_release_recursive>:
 8006a26:	4770      	bx	lr

08006a28 <memcpy>:
 8006a28:	440a      	add	r2, r1
 8006a2a:	4291      	cmp	r1, r2
 8006a2c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006a30:	d100      	bne.n	8006a34 <memcpy+0xc>
 8006a32:	4770      	bx	lr
 8006a34:	b510      	push	{r4, lr}
 8006a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a3e:	4291      	cmp	r1, r2
 8006a40:	d1f9      	bne.n	8006a36 <memcpy+0xe>
 8006a42:	bd10      	pop	{r4, pc}

08006a44 <_free_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	4605      	mov	r5, r0
 8006a48:	2900      	cmp	r1, #0
 8006a4a:	d041      	beq.n	8006ad0 <_free_r+0x8c>
 8006a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a50:	1f0c      	subs	r4, r1, #4
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bfb8      	it	lt
 8006a56:	18e4      	addlt	r4, r4, r3
 8006a58:	f7ff ff38 	bl	80068cc <__malloc_lock>
 8006a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ad4 <_free_r+0x90>)
 8006a5e:	6813      	ldr	r3, [r2, #0]
 8006a60:	b933      	cbnz	r3, 8006a70 <_free_r+0x2c>
 8006a62:	6063      	str	r3, [r4, #4]
 8006a64:	6014      	str	r4, [r2, #0]
 8006a66:	4628      	mov	r0, r5
 8006a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a6c:	f7ff bf34 	b.w	80068d8 <__malloc_unlock>
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	d908      	bls.n	8006a86 <_free_r+0x42>
 8006a74:	6820      	ldr	r0, [r4, #0]
 8006a76:	1821      	adds	r1, r4, r0
 8006a78:	428b      	cmp	r3, r1
 8006a7a:	bf01      	itttt	eq
 8006a7c:	6819      	ldreq	r1, [r3, #0]
 8006a7e:	685b      	ldreq	r3, [r3, #4]
 8006a80:	1809      	addeq	r1, r1, r0
 8006a82:	6021      	streq	r1, [r4, #0]
 8006a84:	e7ed      	b.n	8006a62 <_free_r+0x1e>
 8006a86:	461a      	mov	r2, r3
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	b10b      	cbz	r3, 8006a90 <_free_r+0x4c>
 8006a8c:	42a3      	cmp	r3, r4
 8006a8e:	d9fa      	bls.n	8006a86 <_free_r+0x42>
 8006a90:	6811      	ldr	r1, [r2, #0]
 8006a92:	1850      	adds	r0, r2, r1
 8006a94:	42a0      	cmp	r0, r4
 8006a96:	d10b      	bne.n	8006ab0 <_free_r+0x6c>
 8006a98:	6820      	ldr	r0, [r4, #0]
 8006a9a:	4401      	add	r1, r0
 8006a9c:	1850      	adds	r0, r2, r1
 8006a9e:	4283      	cmp	r3, r0
 8006aa0:	6011      	str	r1, [r2, #0]
 8006aa2:	d1e0      	bne.n	8006a66 <_free_r+0x22>
 8006aa4:	6818      	ldr	r0, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	6053      	str	r3, [r2, #4]
 8006aaa:	4408      	add	r0, r1
 8006aac:	6010      	str	r0, [r2, #0]
 8006aae:	e7da      	b.n	8006a66 <_free_r+0x22>
 8006ab0:	d902      	bls.n	8006ab8 <_free_r+0x74>
 8006ab2:	230c      	movs	r3, #12
 8006ab4:	602b      	str	r3, [r5, #0]
 8006ab6:	e7d6      	b.n	8006a66 <_free_r+0x22>
 8006ab8:	6820      	ldr	r0, [r4, #0]
 8006aba:	1821      	adds	r1, r4, r0
 8006abc:	428b      	cmp	r3, r1
 8006abe:	bf04      	itt	eq
 8006ac0:	6819      	ldreq	r1, [r3, #0]
 8006ac2:	685b      	ldreq	r3, [r3, #4]
 8006ac4:	6063      	str	r3, [r4, #4]
 8006ac6:	bf04      	itt	eq
 8006ac8:	1809      	addeq	r1, r1, r0
 8006aca:	6021      	streq	r1, [r4, #0]
 8006acc:	6054      	str	r4, [r2, #4]
 8006ace:	e7ca      	b.n	8006a66 <_free_r+0x22>
 8006ad0:	bd38      	pop	{r3, r4, r5, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20004818 	.word	0x20004818

08006ad8 <_init>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	bf00      	nop
 8006adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ade:	bc08      	pop	{r3}
 8006ae0:	469e      	mov	lr, r3
 8006ae2:	4770      	bx	lr

08006ae4 <_fini>:
 8006ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae6:	bf00      	nop
 8006ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aea:	bc08      	pop	{r3}
 8006aec:	469e      	mov	lr, r3
 8006aee:	4770      	bx	lr
