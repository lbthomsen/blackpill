
comptest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009df4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08009f94  08009f94  00019f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a084  0800a084  00020418  2**0
                  CONTENTS
  4 .ARM          00000008  0800a084  0800a084  0001a084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a08c  0800a08c  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a08c  0800a08c  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a090  0800a090  0001a090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  0800a094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009088  20000418  0800a4ac  00020418  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200094a0  0800a4ac  000294a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020129  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004833  00000000  00000000  00040571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00044da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00045c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b184  00000000  00000000  00046918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017118  00000000  00000000  00061a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089807  00000000  00000000  00078bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001023bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c98  00000000  00000000  00102410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000418 	.word	0x20000418
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009f7c 	.word	0x08009f7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000041c 	.word	0x2000041c
 80001dc:	08009f7c 	.word	0x08009f7c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	4b20      	ldr	r3, [pc, #128]	; (8000614 <MX_GPIO_Init+0x9c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a1f      	ldr	r2, [pc, #124]	; (8000614 <MX_GPIO_Init+0x9c>)
 8000598:	f043 0304 	orr.w	r3, r3, #4
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <MX_GPIO_Init+0x9c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0304 	and.w	r3, r3, #4
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b19      	ldr	r3, [pc, #100]	; (8000614 <MX_GPIO_Init+0x9c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a18      	ldr	r2, [pc, #96]	; (8000614 <MX_GPIO_Init+0x9c>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <MX_GPIO_Init+0x9c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_GPIO_Init+0x9c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a11      	ldr	r2, [pc, #68]	; (8000614 <MX_GPIO_Init+0x9c>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_GPIO_Init+0x9c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e8:	480b      	ldr	r0, [pc, #44]	; (8000618 <MX_GPIO_Init+0xa0>)
 80005ea:	f000 fd25 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005f4:	2311      	movs	r3, #17
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	4619      	mov	r1, r3
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_GPIO_Init+0xa0>)
 8000608:	f000 fb92 	bl	8000d30 <HAL_GPIO_Init>

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40020800 	.word	0x40020800

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 f9dd 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f81d 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f7ff ffa5 	bl	8000578 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 800062e:	f000 f92b 	bl	8000888 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000632:	f003 fe7f 	bl	8004334 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0, last_blink = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]

  while (1)
  {

	  now = HAL_GetTick();
 800063e:	f000 fa35 	bl	8000aac <HAL_GetTick>
 8000642:	6038      	str	r0, [r7, #0]

	  if (now - last_blink >= 500) {
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800064e:	d3f6      	bcc.n	800063e <main+0x22>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000650:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <main+0x44>)
 8000656:	f000 fd08 	bl	800106a <HAL_GPIO_TogglePin>

		  last_blink = now;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	607b      	str	r3, [r7, #4]
	  now = HAL_GetTick();
 800065e:	e7ee      	b.n	800063e <main+0x22>
 8000660:	40020800 	.word	0x40020800

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f009 f846 	bl	8009704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <SystemClock_Config+0xc8>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a26      	ldr	r2, [pc, #152]	; (800072c <SystemClock_Config+0xc8>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <SystemClock_Config+0xc8>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <SystemClock_Config+0xcc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a20      	ldr	r2, [pc, #128]	; (8000730 <SystemClock_Config+0xcc>)
 80006ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <SystemClock_Config+0xcc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006d4:	2319      	movs	r3, #25
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006d8:	23c0      	movs	r3, #192	; 0xc0
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fe89 	bl	8002400 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f4:	f000 f81e 	bl	8000734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2103      	movs	r1, #3
 8000714:	4618      	mov	r0, r3
 8000716:	f002 f8eb 	bl	80028f0 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000720:	f000 f808 	bl	8000734 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	; 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <HAL_MspInit+0x4c>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <HAL_MspInit+0x4c>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6453      	str	r3, [r2, #68]	; 0x44
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <HAL_MspInit+0x4c>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_MspInit+0x4c>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <HAL_MspInit+0x4c>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	6413      	str	r3, [r2, #64]	; 0x40
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_MspInit+0x4c>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <NMI_Handler+0x4>

08000796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <MemManage_Handler+0x4>

080007a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <UsageFault_Handler+0x4>

080007ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007dc:	f000 f952 	bl	8000a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007e8:	4802      	ldr	r0, [pc, #8]	; (80007f4 <OTG_FS_IRQHandler+0x10>)
 80007ea:	f000 fda8 	bl	800133e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000718 	.word	0x20000718

080007f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000800:	4a14      	ldr	r2, [pc, #80]	; (8000854 <_sbrk+0x5c>)
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <_sbrk+0x60>)
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <_sbrk+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d102      	bne.n	800081a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <_sbrk+0x64>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <_sbrk+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <_sbrk+0x64>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	429a      	cmp	r2, r3
 8000826:	d207      	bcs.n	8000838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000828:	f008 ff34 	bl	8009694 <__errno>
 800082c:	4603      	mov	r3, r0
 800082e:	220c      	movs	r2, #12
 8000830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000836:	e009      	b.n	800084c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <_sbrk+0x64>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <_sbrk+0x64>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <_sbrk+0x64>)
 8000848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800084a:	68fb      	ldr	r3, [r7, #12]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20020000 	.word	0x20020000
 8000858:	00000400 	.word	0x00000400
 800085c:	20000434 	.word	0x20000434
 8000860:	200094a0 	.word	0x200094a0

08000864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <SystemInit+0x20>)
 800086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086e:	4a05      	ldr	r2, [pc, #20]	; (8000884 <SystemInit+0x20>)
 8000870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000892:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	2204      	movs	r2, #4
 8000898:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089c:	2202      	movs	r2, #2
 800089e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	f000 fbe7 	bl	800109e <HAL_PCD_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008d6:	f7ff ff2d 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000718 	.word	0x20000718

080008e4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000904:	d13a      	bne.n	800097c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <HAL_PCD_MspInit+0xa0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a1d      	ldr	r2, [pc, #116]	; (8000984 <HAL_PCD_MspInit+0xa0>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <HAL_PCD_MspInit+0xa0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000922:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000934:	230a      	movs	r3, #10
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4812      	ldr	r0, [pc, #72]	; (8000988 <HAL_PCD_MspInit+0xa4>)
 8000940:	f000 f9f6 	bl	8000d30 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_PCD_MspInit+0xa0>)
 8000946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000948:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_PCD_MspInit+0xa0>)
 800094a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094e:	6353      	str	r3, [r2, #52]	; 0x34
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_PCD_MspInit+0xa0>)
 8000956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_PCD_MspInit+0xa0>)
 800095a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095e:	6453      	str	r3, [r2, #68]	; 0x44
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_PCD_MspInit+0xa0>)
 8000962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	2043      	movs	r0, #67	; 0x43
 8000972:	f000 f9a6 	bl	8000cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000976:	2043      	movs	r0, #67	; 0x43
 8000978:	f000 f9bf 	bl	8000cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40020000 	.word	0x40020000

0800098c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800098c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000992:	490e      	ldr	r1, [pc, #56]	; (80009cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000998:	e002      	b.n	80009a0 <LoopCopyDataInit>

0800099a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800099c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099e:	3304      	adds	r3, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a4:	d3f9      	bcc.n	800099a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a6:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009a8:	4c0b      	ldr	r4, [pc, #44]	; (80009d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ac:	e001      	b.n	80009b2 <LoopFillZerobss>

080009ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b0:	3204      	adds	r2, #4

080009b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b4:	d3fb      	bcc.n	80009ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009b6:	f7ff ff55 	bl	8000864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ba:	f008 fe71 	bl	80096a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009be:	f7ff fe2d 	bl	800061c <main>
  bx  lr    
 80009c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009cc:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 80009d0:	0800a094 	.word	0x0800a094
  ldr r2, =_sbss
 80009d4:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 80009d8:	200094a0 	.word	0x200094a0

080009dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC_IRQHandler>
	...

080009e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <HAL_Init+0x40>)
 80009ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_Init+0x40>)
 80009f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_Init+0x40>)
 8000a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 f94f 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0e:	200f      	movs	r0, #15
 8000a10:	f000 f808 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a14:	f7ff fe94 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023c00 	.word	0x40023c00

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0x54>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_InitTick+0x58>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f967 	bl	8000d16 <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00e      	b.n	8000a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d80a      	bhi.n	8000a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	f000 f92f 	bl	8000cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <HAL_InitTick+0x5c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e000      	b.n	8000a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000004 	.word	0x20000004

08000a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x20>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000b20 	.word	0x20000b20

08000aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_GetTick+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000b20 	.word	0x20000b20

08000ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000acc:	f7ff ffee 	bl	8000aac <HAL_GetTick>
 8000ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000adc:	d005      	beq.n	8000aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_Delay+0x44>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aea:	bf00      	nop
 8000aec:	f7ff ffde 	bl	8000aac <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d8f7      	bhi.n	8000aec <HAL_Delay+0x28>
  {
  }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4907      	ldr	r1, [pc, #28]	; (8000ba8 <__NVIC_EnableIRQ+0x38>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	; (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
         );
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	; 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c78:	d301      	bcc.n	8000c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00f      	b.n	8000c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <SysTick_Config+0x40>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c86:	210f      	movs	r1, #15
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f7ff ff8e 	bl	8000bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <SysTick_Config+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <SysTick_Config+0x40>)
 8000c98:	2207      	movs	r2, #7
 8000c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff29 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd4:	f7ff ff3e 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff ff8e 	bl	8000c00 <NVIC_EncodePriority>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff5d 	bl	8000bac <__NVIC_SetPriority>
}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff31 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffa2 	bl	8000c68 <SysTick_Config>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	; 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	e159      	b.n	8001000 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 8148 	bne.w	8000ffa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d005      	beq.n	8000d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d130      	bne.n	8000de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	f003 0201 	and.w	r2, r3, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d017      	beq.n	8000e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d123      	bne.n	8000e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	08da      	lsrs	r2, r3, #3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3208      	adds	r2, #8
 8000e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	69b9      	ldr	r1, [r7, #24]
 8000e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0203 	and.w	r2, r3, #3
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80a2 	beq.w	8000ffa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b57      	ldr	r3, [pc, #348]	; (8001018 <HAL_GPIO_Init+0x2e8>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a56      	ldr	r2, [pc, #344]	; (8001018 <HAL_GPIO_Init+0x2e8>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b54      	ldr	r3, [pc, #336]	; (8001018 <HAL_GPIO_Init+0x2e8>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed2:	4a52      	ldr	r2, [pc, #328]	; (800101c <HAL_GPIO_Init+0x2ec>)
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	220f      	movs	r2, #15
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a49      	ldr	r2, [pc, #292]	; (8001020 <HAL_GPIO_Init+0x2f0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d019      	beq.n	8000f32 <HAL_GPIO_Init+0x202>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a48      	ldr	r2, [pc, #288]	; (8001024 <HAL_GPIO_Init+0x2f4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_GPIO_Init+0x1fe>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a47      	ldr	r2, [pc, #284]	; (8001028 <HAL_GPIO_Init+0x2f8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d00d      	beq.n	8000f2a <HAL_GPIO_Init+0x1fa>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a46      	ldr	r2, [pc, #280]	; (800102c <HAL_GPIO_Init+0x2fc>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d007      	beq.n	8000f26 <HAL_GPIO_Init+0x1f6>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a45      	ldr	r2, [pc, #276]	; (8001030 <HAL_GPIO_Init+0x300>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d101      	bne.n	8000f22 <HAL_GPIO_Init+0x1f2>
 8000f1e:	2304      	movs	r3, #4
 8000f20:	e008      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f22:	2307      	movs	r3, #7
 8000f24:	e006      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f26:	2303      	movs	r3, #3
 8000f28:	e004      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e002      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f32:	2300      	movs	r3, #0
 8000f34:	69fa      	ldr	r2, [r7, #28]
 8000f36:	f002 0203 	and.w	r2, r2, #3
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	4093      	lsls	r3, r2
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f44:	4935      	ldr	r1, [pc, #212]	; (800101c <HAL_GPIO_Init+0x2ec>)
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f52:	4b38      	ldr	r3, [pc, #224]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f76:	4a2f      	ldr	r2, [pc, #188]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa0:	4a24      	ldr	r2, [pc, #144]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fca:	4a1a      	ldr	r2, [pc, #104]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff4:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	2b0f      	cmp	r3, #15
 8001004:	f67f aea2 	bls.w	8000d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40013800 	.word	0x40013800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400
 8001028:	40020800 	.word	0x40020800
 800102c:	40020c00 	.word	0x40020c00
 8001030:	40021000 	.word	0x40021000
 8001034:	40013c00 	.word	0x40013c00

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001054:	e003      	b.n	800105e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	041a      	lsls	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800106a:	b480      	push	{r7}
 800106c:	b085      	sub	sp, #20
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	460b      	mov	r3, r1
 8001074:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800107c:	887a      	ldrh	r2, [r7, #2]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4013      	ands	r3, r2
 8001082:	041a      	lsls	r2, r3, #16
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43d9      	mvns	r1, r3
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	400b      	ands	r3, r1
 800108c:	431a      	orrs	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	619a      	str	r2, [r3, #24]
}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800109e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a0:	b08f      	sub	sp, #60	; 0x3c
 80010a2:	af0a      	add	r7, sp, #40	; 0x28
 80010a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e10f      	b.n	80012d0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d106      	bne.n	80010d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fc0a 	bl	80008e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2203      	movs	r2, #3
 80010d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 febb 	bl	8002e6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	687e      	ldr	r6, [r7, #4]
 80010fc:	466d      	mov	r5, sp
 80010fe:	f106 0410 	add.w	r4, r6, #16
 8001102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800110e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001112:	1d33      	adds	r3, r6, #4
 8001114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001116:	6838      	ldr	r0, [r7, #0]
 8001118:	f001 fd92 	bl	8002c40 <USB_CoreInit>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2202      	movs	r2, #2
 8001126:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e0d0      	b.n	80012d0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f001 fea9 	bl	8002e8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800113a:	2300      	movs	r3, #0
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e04a      	b.n	80011d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	1a9b      	subs	r3, r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	333d      	adds	r3, #61	; 0x3d
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	1a9b      	subs	r3, r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	333c      	adds	r3, #60	; 0x3c
 8001164:	7bfa      	ldrb	r2, [r7, #15]
 8001166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	b298      	uxth	r0, r3
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	3342      	adds	r3, #66	; 0x42
 800117c:	4602      	mov	r2, r0
 800117e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	333f      	adds	r3, #63	; 0x3f
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	3344      	adds	r3, #68	; 0x44
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	1a9b      	subs	r3, r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	3348      	adds	r3, #72	; 0x48
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	1a9b      	subs	r3, r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	3350      	adds	r3, #80	; 0x50
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	3301      	adds	r3, #1
 80011d4:	73fb      	strb	r3, [r7, #15]
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d3af      	bcc.n	8001140 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e044      	b.n	8001270 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	1a9b      	subs	r3, r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	1a9b      	subs	r3, r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	1a9b      	subs	r3, r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	1a9b      	subs	r3, r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	3301      	adds	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	429a      	cmp	r2, r3
 8001278:	d3b5      	bcc.n	80011e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	687e      	ldr	r6, [r7, #4]
 8001282:	466d      	mov	r5, sp
 8001284:	f106 0410 	add.w	r4, r6, #16
 8001288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800128c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001290:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001294:	e885 0003 	stmia.w	r5, {r0, r1}
 8001298:	1d33      	adds	r3, r6, #4
 800129a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800129c:	6838      	ldr	r0, [r7, #0]
 800129e:	f001 fe41 	bl	8002f24 <USB_DevInit>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2202      	movs	r2, #2
 80012ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e00d      	b.n	80012d0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 febd 	bl	8004048 <USB_DevDisconnect>

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <HAL_PCD_Start+0x1c>
 80012f0:	2302      	movs	r3, #2
 80012f2:	e020      	b.n	8001336 <HAL_PCD_Start+0x5e>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	2b01      	cmp	r3, #1
 8001302:	d109      	bne.n	8001318 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001308:	2b01      	cmp	r3, #1
 800130a:	d005      	beq.n	8001318 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001310:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f001 fd93 	bl	8002e48 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f002 fe6d 	bl	8004006 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800133e:	b590      	push	{r4, r7, lr}
 8001340:	b08d      	sub	sp, #52	; 0x34
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f002 ff2b 	bl	80041b0 <USB_GetMode>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	f040 839d 	bne.w	8001a9c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f002 fe8f 	bl	800408a <USB_ReadInterrupts>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8393 	beq.w	8001a9a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fe86 	bl	800408a <USB_ReadInterrupts>
 800137e:	4603      	mov	r3, r0
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b02      	cmp	r3, #2
 8001386:	d107      	bne.n	8001398 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f002 0202 	and.w	r2, r2, #2
 8001396:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f002 fe74 	bl	800408a <USB_ReadInterrupts>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	d161      	bne.n	8001470 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699a      	ldr	r2, [r3, #24]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0210 	bic.w	r2, r2, #16
 80013ba:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	f003 020f 	and.w	r2, r3, #15
 80013c8:	4613      	mov	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	1a9b      	subs	r3, r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	3304      	adds	r3, #4
 80013da:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	0c5b      	lsrs	r3, r3, #17
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d124      	bne.n	8001432 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d035      	beq.n	8001460 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001402:	b29b      	uxth	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	6a38      	ldr	r0, [r7, #32]
 8001408:	f002 fcab 	bl	8003d62 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001418:	441a      	add	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	699a      	ldr	r2, [r3, #24]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800142a:	441a      	add	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	619a      	str	r2, [r3, #24]
 8001430:	e016      	b.n	8001460 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	0c5b      	lsrs	r3, r3, #17
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	2b06      	cmp	r3, #6
 800143c:	d110      	bne.n	8001460 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001444:	2208      	movs	r2, #8
 8001446:	4619      	mov	r1, r3
 8001448:	6a38      	ldr	r0, [r7, #32]
 800144a:	f002 fc8a 	bl	8003d62 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	699a      	ldr	r2, [r3, #24]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800145a:	441a      	add	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	699a      	ldr	r2, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0210 	orr.w	r2, r2, #16
 800146e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f002 fe08 	bl	800408a <USB_ReadInterrupts>
 800147a:	4603      	mov	r3, r0
 800147c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001480:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001484:	d16e      	bne.n	8001564 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f002 fe0e 	bl	80040b0 <USB_ReadDevAllOutEpInterrupt>
 8001494:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001496:	e062      	b.n	800155e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d057      	beq.n	8001552 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f002 fe33 	bl	8004118 <USB_ReadDevOutEPInterrupt>
 80014b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00c      	beq.n	80014d8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	015a      	lsls	r2, r3, #5
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ca:	461a      	mov	r2, r3
 80014cc:	2301      	movs	r3, #1
 80014ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fdde 	bl	8002094 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00c      	beq.n	80014fc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	015a      	lsls	r2, r3, #5
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	4413      	add	r3, r2
 80014ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ee:	461a      	mov	r2, r3
 80014f0:	2308      	movs	r3, #8
 80014f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fed8 	bl	80022ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	2b00      	cmp	r3, #0
 8001504:	d008      	beq.n	8001518 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	015a      	lsls	r2, r3, #5
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	4413      	add	r3, r2
 800150e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001512:	461a      	mov	r2, r3
 8001514:	2310      	movs	r3, #16
 8001516:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	2b00      	cmp	r3, #0
 8001520:	d008      	beq.n	8001534 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	015a      	lsls	r2, r3, #5
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4413      	add	r3, r2
 800152a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800152e:	461a      	mov	r2, r3
 8001530:	2320      	movs	r3, #32
 8001532:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d009      	beq.n	8001552 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	015a      	lsls	r2, r3, #5
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	4413      	add	r3, r2
 8001546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800154a:	461a      	mov	r2, r3
 800154c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001550:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	3301      	adds	r3, #1
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001560:	2b00      	cmp	r3, #0
 8001562:	d199      	bne.n	8001498 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f002 fd8e 	bl	800408a <USB_ReadInterrupts>
 800156e:	4603      	mov	r3, r0
 8001570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001574:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001578:	f040 80c0 	bne.w	80016fc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f002 fdaf 	bl	80040e4 <USB_ReadDevAllInEpInterrupt>
 8001586:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800158c:	e0b2      	b.n	80016f4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80a7 	beq.w	80016e8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fdd5 	bl	8004154 <USB_ReadDevInEPInterrupt>
 80015aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d057      	beq.n	8001666 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	2201      	movs	r2, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69f9      	ldr	r1, [r7, #28]
 80015d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015d6:	4013      	ands	r3, r2
 80015d8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	015a      	lsls	r2, r3, #5
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4413      	add	r3, r2
 80015e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e6:	461a      	mov	r2, r3
 80015e8:	2301      	movs	r3, #1
 80015ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d132      	bne.n	800165a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	1a9b      	subs	r3, r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	3348      	adds	r3, #72	; 0x48
 8001604:	6819      	ldr	r1, [r3, #0]
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4403      	add	r3, r0
 8001614:	3344      	adds	r3, #68	; 0x44
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4419      	add	r1, r3
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4403      	add	r3, r0
 8001628:	3348      	adds	r3, #72	; 0x48
 800162a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	2b00      	cmp	r3, #0
 8001630:	d113      	bne.n	800165a <HAL_PCD_IRQHandler+0x31c>
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	1a9b      	subs	r3, r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	3350      	adds	r3, #80	; 0x50
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d108      	bne.n	800165a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001652:	461a      	mov	r2, r3
 8001654:	2101      	movs	r1, #1
 8001656:	f002 fddd 	bl	8004214 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4619      	mov	r1, r3
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f007 fd5d 	bl	8009120 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800167c:	461a      	mov	r2, r3
 800167e:	2308      	movs	r3, #8
 8001680:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	015a      	lsls	r2, r3, #5
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	4413      	add	r3, r2
 8001694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001698:	461a      	mov	r2, r3
 800169a:	2310      	movs	r3, #16
 800169c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016b4:	461a      	mov	r2, r3
 80016b6:	2340      	movs	r3, #64	; 0x40
 80016b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d0:	461a      	mov	r2, r3
 80016d2:	2302      	movs	r3, #2
 80016d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 fc48 	bl	8001f78 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3301      	adds	r3, #1
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f0:	085b      	lsrs	r3, r3, #1
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f47f af49 	bne.w	800158e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f002 fcc2 	bl	800408a <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800170c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001710:	d122      	bne.n	8001758 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800172c:	2b01      	cmp	r3, #1
 800172e:	d108      	bne.n	8001742 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001738:	2100      	movs	r1, #0
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 fe54 	bl	80023e8 <HAL_PCDEx_LPM_Callback>
 8001740:	e002      	b.n	8001748 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f007 fd62 	bl	800920c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001756:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f002 fc94 	bl	800408a <USB_ReadInterrupts>
 8001762:	4603      	mov	r3, r0
 8001764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800176c:	d112      	bne.n	8001794 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b01      	cmp	r3, #1
 800177c:	d102      	bne.n	8001784 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f007 fd1e 	bl	80091c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001792:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f002 fc76 	bl	800408a <USB_ReadInterrupts>
 800179e:	4603      	mov	r3, r0
 80017a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a8:	f040 80c7 	bne.w	800193a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2110      	movs	r1, #16
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 fd10 	bl	80031ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d0:	e056      	b.n	8001880 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017de:	461a      	mov	r2, r3
 80017e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	015a      	lsls	r2, r3, #5
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f6:	0151      	lsls	r1, r2, #5
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	440a      	add	r2, r1
 80017fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001800:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001804:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	4413      	add	r3, r2
 800180e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001816:	0151      	lsls	r1, r2, #5
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	440a      	add	r2, r1
 800181c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001820:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001824:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001828:	015a      	lsls	r2, r3, #5
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	4413      	add	r3, r2
 800182e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001832:	461a      	mov	r2, r3
 8001834:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001838:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	015a      	lsls	r2, r3, #5
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	4413      	add	r3, r2
 8001842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800184a:	0151      	lsls	r1, r2, #5
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	440a      	add	r2, r1
 8001850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001854:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001858:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800186a:	0151      	lsls	r1, r2, #5
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	440a      	add	r2, r1
 8001870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001874:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001878:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	3301      	adds	r3, #1
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001886:	429a      	cmp	r2, r3
 8001888:	d3a3      	bcc.n	80017d2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001898:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800189c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d016      	beq.n	80018d4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b6:	f043 030b 	orr.w	r3, r3, #11
 80018ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018cc:	f043 030b 	orr.w	r3, r3, #11
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	e015      	b.n	8001900 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018fa:	f043 030b 	orr.w	r3, r3, #11
 80018fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800190e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001912:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001924:	461a      	mov	r2, r3
 8001926:	f002 fc75 	bl	8004214 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f002 fba3 	bl	800408a <USB_ReadInterrupts>
 8001944:	4603      	mov	r3, r0
 8001946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800194a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800194e:	d124      	bne.n	800199a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f002 fc39 	bl	80041cc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f001 fca1 	bl	80032a6 <USB_GetDevSpeed>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681c      	ldr	r4, [r3, #0]
 8001970:	f001 f95a 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8001974:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800197a:	b2db      	uxtb	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	4620      	mov	r0, r4
 8001980:	f001 f9c0 	bl	8002d04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f007 fbf3 	bl	8009170 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001998:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 fb73 	bl	800408a <USB_ReadInterrupts>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d10a      	bne.n	80019c4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f007 fbd0 	bl	8009154 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	695a      	ldr	r2, [r3, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f002 0208 	and.w	r2, r2, #8
 80019c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f002 fb5e 	bl	800408a <USB_ReadInterrupts>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019d8:	d10f      	bne.n	80019fa <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	4619      	mov	r1, r3
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f007 fc31 	bl	800924c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 fb43 	bl	800408a <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a0e:	d10f      	bne.n	8001a30 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	4619      	mov	r1, r3
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f007 fc04 	bl	8009228 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	695a      	ldr	r2, [r3, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fb28 	bl	800408a <USB_ReadInterrupts>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a44:	d10a      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f007 fc12 	bl	8009270 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f002 fb12 	bl	800408a <USB_ReadInterrupts>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d115      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f007 fc02 	bl	800928c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6859      	ldr	r1, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	e000      	b.n	8001a9c <HAL_PCD_IRQHandler+0x75e>
      return;
 8001a9a:	bf00      	nop
    }
  }
}
 8001a9c:	3734      	adds	r7, #52	; 0x34
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd90      	pop	{r4, r7, pc}

08001aa2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_PCD_SetAddress+0x1a>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e013      	b.n	8001ae4 <HAL_PCD_SetAddress+0x42>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	78fa      	ldrb	r2, [r7, #3]
 8001ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 fa70 	bl	8003fba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	4608      	mov	r0, r1
 8001af6:	4611      	mov	r1, r2
 8001af8:	461a      	mov	r2, r3
 8001afa:	4603      	mov	r3, r0
 8001afc:	70fb      	strb	r3, [r7, #3]
 8001afe:	460b      	mov	r3, r1
 8001b00:	803b      	strh	r3, [r7, #0]
 8001b02:	4613      	mov	r3, r2
 8001b04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da0f      	bge.n	8001b32 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	f003 020f 	and.w	r2, r3, #15
 8001b18:	4613      	mov	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	3338      	adds	r3, #56	; 0x38
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	3304      	adds	r3, #4
 8001b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	705a      	strb	r2, [r3, #1]
 8001b30:	e00f      	b.n	8001b52 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	f003 020f 	and.w	r2, r3, #15
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4413      	add	r3, r2
 8001b48:	3304      	adds	r3, #4
 8001b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b5e:	883a      	ldrh	r2, [r7, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	78ba      	ldrb	r2, [r7, #2]
 8001b68:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	785b      	ldrb	r3, [r3, #1]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d004      	beq.n	8001b7c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b7c:	78bb      	ldrb	r3, [r7, #2]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d102      	bne.n	8001b88 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_PCD_EP_Open+0xaa>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e00e      	b.n	8001bb4 <HAL_PCD_EP_Open+0xc8>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68f9      	ldr	r1, [r7, #12]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f001 fba3 	bl	80032f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001bb2:	7afb      	ldrb	r3, [r7, #11]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	da0f      	bge.n	8001bf0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	f003 020f 	and.w	r2, r3, #15
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	3338      	adds	r3, #56	; 0x38
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	3304      	adds	r3, #4
 8001be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2201      	movs	r2, #1
 8001bec:	705a      	strb	r2, [r3, #1]
 8001bee:	e00f      	b.n	8001c10 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	f003 020f 	and.w	r2, r3, #15
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	3304      	adds	r3, #4
 8001c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_PCD_EP_Close+0x6e>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e00e      	b.n	8001c48 <HAL_PCD_EP_Close+0x8c>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68f9      	ldr	r1, [r7, #12]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f001 fbe1 	bl	8003400 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c60:	7afb      	ldrb	r3, [r7, #11]
 8001c62:	f003 020f 	and.w	r2, r3, #15
 8001c66:	4613      	mov	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4413      	add	r3, r2
 8001c76:	3304      	adds	r3, #4
 8001c78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c92:	7afb      	ldrb	r3, [r7, #11]
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d102      	bne.n	8001cac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cac:	7afb      	ldrb	r3, [r7, #11]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	6979      	ldr	r1, [r7, #20]
 8001cc4:	f001 febc 	bl	8003a40 <USB_EP0StartXfer>
 8001cc8:	e008      	b.n	8001cdc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6979      	ldr	r1, [r7, #20]
 8001cd8:	f001 fc6e 	bl	80035b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001d08:	681b      	ldr	r3, [r3, #0]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	460b      	mov	r3, r1
 8001d24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d26:	7afb      	ldrb	r3, [r7, #11]
 8001d28:	f003 020f 	and.w	r2, r3, #15
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	3338      	adds	r3, #56	; 0x38
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4413      	add	r3, r2
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2201      	movs	r2, #1
 8001d54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d56:	7afb      	ldrb	r3, [r7, #11]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d70:	7afb      	ldrb	r3, [r7, #11]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	6979      	ldr	r1, [r7, #20]
 8001d88:	f001 fe5a 	bl	8003a40 <USB_EP0StartXfer>
 8001d8c:	e008      	b.n	8001da0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	6979      	ldr	r1, [r7, #20]
 8001d9c:	f001 fc0c 	bl	80035b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	f003 020f 	and.w	r2, r3, #15
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d901      	bls.n	8001dc8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e050      	b.n	8001e6a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	da0f      	bge.n	8001df0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	f003 020f 	and.w	r2, r3, #15
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	3338      	adds	r3, #56	; 0x38
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	3304      	adds	r3, #4
 8001de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	705a      	strb	r2, [r3, #1]
 8001dee:	e00d      	b.n	8001e0c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	3304      	adds	r3, #4
 8001e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_PCD_EP_SetStall+0x82>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e01e      	b.n	8001e6a <HAL_PCD_EP_SetStall+0xc0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68f9      	ldr	r1, [r7, #12]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f001 ffe9 	bl	8003e12 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10a      	bne.n	8001e60 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	b2d9      	uxtb	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f002 f9da 	bl	8004214 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	f003 020f 	and.w	r2, r3, #15
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d901      	bls.n	8001e90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e042      	b.n	8001f16 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	da0f      	bge.n	8001eb8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	f003 020f 	and.w	r2, r3, #15
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	3338      	adds	r3, #56	; 0x38
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	3304      	adds	r3, #4
 8001eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	705a      	strb	r2, [r3, #1]
 8001eb6:	e00f      	b.n	8001ed8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	f003 020f 	and.w	r2, r3, #15
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	3304      	adds	r3, #4
 8001ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_PCD_EP_ClrStall+0x86>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e00e      	b.n	8001f16 <HAL_PCD_EP_ClrStall+0xa4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68f9      	ldr	r1, [r7, #12]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 fff1 	bl	8003eee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_PCD_EP_Flush+0x1a>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e01b      	b.n	8001f70 <HAL_PCD_EP_Flush+0x52>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	da09      	bge.n	8001f5c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	4619      	mov	r1, r3
 8001f54:	4610      	mov	r0, r2
 8001f56:	f001 f949 	bl	80031ec <USB_FlushTxFifo>
 8001f5a:	e004      	b.n	8001f66 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 f967 	bl	8003234 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	1a9b      	subs	r3, r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	3338      	adds	r3, #56	; 0x38
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	699a      	ldr	r2, [r3, #24]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d901      	bls.n	8001fb0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e06c      	b.n	800208a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d902      	bls.n	8001fcc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	3303      	adds	r3, #3
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fd4:	e02b      	b.n	800202e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d902      	bls.n	8001ff2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3303      	adds	r3, #3
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	68d9      	ldr	r1, [r3, #12]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800200a:	b2db      	uxtb	r3, r3
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	4603      	mov	r3, r0
 8002010:	6978      	ldr	r0, [r7, #20]
 8002012:	f001 fe68 	bl	8003ce6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	441a      	add	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	441a      	add	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	b29b      	uxth	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	429a      	cmp	r2, r3
 8002042:	d809      	bhi.n	8002058 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	699a      	ldr	r2, [r3, #24]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800204c:	429a      	cmp	r2, r3
 800204e:	d203      	bcs.n	8002058 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1be      	bne.n	8001fd6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	429a      	cmp	r2, r3
 8002062:	d811      	bhi.n	8002088 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	2201      	movs	r2, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	43db      	mvns	r3, r3
 800207e:	6939      	ldr	r1, [r7, #16]
 8002080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002084:	4013      	ands	r3, r2
 8002086:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	333c      	adds	r3, #60	; 0x3c
 80020ac:	3304      	adds	r3, #4
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	f040 80a0 	bne.w	800220c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d015      	beq.n	8002102 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4a72      	ldr	r2, [pc, #456]	; (80022a4 <PCD_EP_OutXfrComplete_int+0x210>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	f240 80dd 	bls.w	800229a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80d7 	beq.w	800229a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f8:	461a      	mov	r2, r3
 80020fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020fe:	6093      	str	r3, [r2, #8]
 8002100:	e0cb      	b.n	800229a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	2b00      	cmp	r3, #0
 800210a:	d009      	beq.n	8002120 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4413      	add	r3, r2
 8002114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002118:	461a      	mov	r2, r3
 800211a:	2320      	movs	r3, #32
 800211c:	6093      	str	r3, [r2, #8]
 800211e:	e0bc      	b.n	800229a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 80b7 	bne.w	800229a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a5d      	ldr	r2, [pc, #372]	; (80022a4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d90f      	bls.n	8002154 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214a:	461a      	mov	r2, r3
 800214c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002150:	6093      	str	r3, [r2, #8]
 8002152:	e0a2      	b.n	800229a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002166:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	0159      	lsls	r1, r3, #5
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	440b      	add	r3, r1
 8002170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800217a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4403      	add	r3, r0
 800218a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800218e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	1a9b      	subs	r3, r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021a2:	6819      	ldr	r1, [r3, #0]
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4403      	add	r3, r0
 80021b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4419      	add	r1, r3
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4403      	add	r3, r0
 80021c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021cc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d114      	bne.n	80021fe <PCD_EP_OutXfrComplete_int+0x16a>
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d108      	bne.n	80021fe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021f6:	461a      	mov	r2, r3
 80021f8:	2101      	movs	r1, #1
 80021fa:	f002 f80b 	bl	8004214 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	4619      	mov	r1, r3
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f006 ff70 	bl	80090ea <HAL_PCD_DataOutStageCallback>
 800220a:	e046      	b.n	800229a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4a26      	ldr	r2, [pc, #152]	; (80022a8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d124      	bne.n	800225e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4413      	add	r3, r2
 8002226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222a:	461a      	mov	r2, r3
 800222c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002230:	6093      	str	r3, [r2, #8]
 8002232:	e032      	b.n	800229a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224a:	461a      	mov	r2, r3
 800224c:	2320      	movs	r3, #32
 800224e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f006 ff47 	bl	80090ea <HAL_PCD_DataOutStageCallback>
 800225c:	e01d      	b.n	800229a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d114      	bne.n	800228e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d108      	bne.n	800228e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002286:	461a      	mov	r2, r3
 8002288:	2100      	movs	r1, #0
 800228a:	f001 ffc3 	bl	8004214 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f006 ff28 	bl	80090ea <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	4f54300a 	.word	0x4f54300a
 80022a8:	4f54310a 	.word	0x4f54310a

080022ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	333c      	adds	r3, #60	; 0x3c
 80022c4:	3304      	adds	r3, #4
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a15      	ldr	r2, [pc, #84]	; (8002334 <PCD_EP_OutSetupPacket_int+0x88>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d90e      	bls.n	8002300 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d009      	beq.n	8002300 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f8:	461a      	mov	r2, r3
 80022fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f006 fee0 	bl	80090c6 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <PCD_EP_OutSetupPacket_int+0x88>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d90c      	bls.n	8002328 <PCD_EP_OutSetupPacket_int+0x7c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d108      	bne.n	8002328 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002320:	461a      	mov	r2, r3
 8002322:	2101      	movs	r1, #1
 8002324:	f001 ff76 	bl	8004214 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	4f54300a 	.word	0x4f54300a

08002338 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	70fb      	strb	r3, [r7, #3]
 8002344:	4613      	mov	r3, r2
 8002346:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d107      	bne.n	8002366 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002356:	883b      	ldrh	r3, [r7, #0]
 8002358:	0419      	lsls	r1, r3, #16
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	430a      	orrs	r2, r1
 8002362:	629a      	str	r2, [r3, #40]	; 0x28
 8002364:	e028      	b.n	80023b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	4413      	add	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
 8002378:	e00d      	b.n	8002396 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	3340      	adds	r3, #64	; 0x40
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	0c1b      	lsrs	r3, r3, #16
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	4413      	add	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	3301      	adds	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	3b01      	subs	r3, #1
 800239c:	429a      	cmp	r2, r3
 800239e:	d3ec      	bcc.n	800237a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023a0:	883b      	ldrh	r3, [r7, #0]
 80023a2:	0418      	lsls	r0, r3, #16
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6819      	ldr	r1, [r3, #0]
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	4302      	orrs	r2, r0
 80023b0:	3340      	adds	r3, #64	; 0x40
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	460b      	mov	r3, r1
 80023d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e264      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d075      	beq.n	800250a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800241e:	4ba3      	ldr	r3, [pc, #652]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b04      	cmp	r3, #4
 8002428:	d00c      	beq.n	8002444 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242a:	4ba0      	ldr	r3, [pc, #640]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002432:	2b08      	cmp	r3, #8
 8002434:	d112      	bne.n	800245c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002436:	4b9d      	ldr	r3, [pc, #628]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002442:	d10b      	bne.n	800245c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002444:	4b99      	ldr	r3, [pc, #612]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d05b      	beq.n	8002508 <HAL_RCC_OscConfig+0x108>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d157      	bne.n	8002508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e23f      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002464:	d106      	bne.n	8002474 <HAL_RCC_OscConfig+0x74>
 8002466:	4b91      	ldr	r3, [pc, #580]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a90      	ldr	r2, [pc, #576]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e01d      	b.n	80024b0 <HAL_RCC_OscConfig+0xb0>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x98>
 800247e:	4b8b      	ldr	r3, [pc, #556]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a8a      	ldr	r2, [pc, #552]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b88      	ldr	r3, [pc, #544]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a87      	ldr	r2, [pc, #540]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e00b      	b.n	80024b0 <HAL_RCC_OscConfig+0xb0>
 8002498:	4b84      	ldr	r3, [pc, #528]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a83      	ldr	r2, [pc, #524]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 800249e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b81      	ldr	r3, [pc, #516]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a80      	ldr	r2, [pc, #512]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 80024aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d013      	beq.n	80024e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe faf8 	bl	8000aac <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c0:	f7fe faf4 	bl	8000aac <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e204      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b76      	ldr	r3, [pc, #472]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0xc0>
 80024de:	e014      	b.n	800250a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe fae4 	bl	8000aac <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e8:	f7fe fae0 	bl	8000aac <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e1f0      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	4b6c      	ldr	r3, [pc, #432]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0xe8>
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d063      	beq.n	80025de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002516:	4b65      	ldr	r3, [pc, #404]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002522:	4b62      	ldr	r3, [pc, #392]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800252a:	2b08      	cmp	r3, #8
 800252c:	d11c      	bne.n	8002568 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252e:	4b5f      	ldr	r3, [pc, #380]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d116      	bne.n	8002568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	4b5c      	ldr	r3, [pc, #368]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_RCC_OscConfig+0x152>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e1c4      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002552:	4b56      	ldr	r3, [pc, #344]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4952      	ldr	r1, [pc, #328]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	e03a      	b.n	80025de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d020      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002570:	4b4f      	ldr	r3, [pc, #316]	; (80026b0 <HAL_RCC_OscConfig+0x2b0>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7fe fa99 	bl	8000aac <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800257e:	f7fe fa95 	bl	8000aac <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e1a5      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	4b46      	ldr	r3, [pc, #280]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4b43      	ldr	r3, [pc, #268]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4940      	ldr	r1, [pc, #256]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
 80025b0:	e015      	b.n	80025de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b2:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <HAL_RCC_OscConfig+0x2b0>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe fa78 	bl	8000aac <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c0:	f7fe fa74 	bl	8000aac <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e184      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	4b36      	ldr	r3, [pc, #216]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d030      	beq.n	800264c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f2:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <HAL_RCC_OscConfig+0x2b4>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7fe fa58 	bl	8000aac <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002600:	f7fe fa54 	bl	8000aac <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e164      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x200>
 800261e:	e015      	b.n	800264c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002620:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <HAL_RCC_OscConfig+0x2b4>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002626:	f7fe fa41 	bl	8000aac <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262e:	f7fe fa3d 	bl	8000aac <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e14d      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80a0 	beq.w	800279a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10f      	bne.n	800268a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_RCC_OscConfig+0x2ac>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002686:	2301      	movs	r3, #1
 8002688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCC_OscConfig+0x2b8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d121      	bne.n	80026da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <HAL_RCC_OscConfig+0x2b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <HAL_RCC_OscConfig+0x2b8>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a2:	f7fe fa03 	bl	8000aac <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	e011      	b.n	80026ce <HAL_RCC_OscConfig+0x2ce>
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	42470000 	.word	0x42470000
 80026b4:	42470e80 	.word	0x42470e80
 80026b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026bc:	f7fe f9f6 	bl	8000aac <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e106      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ce:	4b85      	ldr	r3, [pc, #532]	; (80028e4 <HAL_RCC_OscConfig+0x4e4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d106      	bne.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
 80026e2:	4b81      	ldr	r3, [pc, #516]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	4a80      	ldr	r2, [pc, #512]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6713      	str	r3, [r2, #112]	; 0x70
 80026ee:	e01c      	b.n	800272a <HAL_RCC_OscConfig+0x32a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d10c      	bne.n	8002712 <HAL_RCC_OscConfig+0x312>
 80026f8:	4b7b      	ldr	r3, [pc, #492]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	4a7a      	ldr	r2, [pc, #488]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	6713      	str	r3, [r2, #112]	; 0x70
 8002704:	4b78      	ldr	r3, [pc, #480]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	4a77      	ldr	r2, [pc, #476]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6713      	str	r3, [r2, #112]	; 0x70
 8002710:	e00b      	b.n	800272a <HAL_RCC_OscConfig+0x32a>
 8002712:	4b75      	ldr	r3, [pc, #468]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	4a74      	ldr	r2, [pc, #464]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6713      	str	r3, [r2, #112]	; 0x70
 800271e:	4b72      	ldr	r3, [pc, #456]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	4a71      	ldr	r2, [pc, #452]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 8002724:	f023 0304 	bic.w	r3, r3, #4
 8002728:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d015      	beq.n	800275e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002732:	f7fe f9bb 	bl	8000aac <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7fe f9b7 	bl	8000aac <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0c5      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002750:	4b65      	ldr	r3, [pc, #404]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ee      	beq.n	800273a <HAL_RCC_OscConfig+0x33a>
 800275c:	e014      	b.n	8002788 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275e:	f7fe f9a5 	bl	8000aac <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002764:	e00a      	b.n	800277c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7fe f9a1 	bl	8000aac <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f241 3288 	movw	r2, #5000	; 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e0af      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277c:	4b5a      	ldr	r3, [pc, #360]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ee      	bne.n	8002766 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d105      	bne.n	800279a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278e:	4b56      	ldr	r3, [pc, #344]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a55      	ldr	r2, [pc, #340]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 8002794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 809b 	beq.w	80028da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027a4:	4b50      	ldr	r3, [pc, #320]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d05c      	beq.n	800286a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d141      	bne.n	800283c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b8:	4b4c      	ldr	r3, [pc, #304]	; (80028ec <HAL_RCC_OscConfig+0x4ec>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fe f975 	bl	8000aac <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c6:	f7fe f971 	bl	8000aac <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e081      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d8:	4b43      	ldr	r3, [pc, #268]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	019b      	lsls	r3, r3, #6
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	3b01      	subs	r3, #1
 80027fe:	041b      	lsls	r3, r3, #16
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	061b      	lsls	r3, r3, #24
 8002808:	4937      	ldr	r1, [pc, #220]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800280e:	4b37      	ldr	r3, [pc, #220]	; (80028ec <HAL_RCC_OscConfig+0x4ec>)
 8002810:	2201      	movs	r2, #1
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe f94a 	bl	8000aac <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe f946 	bl	8000aac <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e056      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282e:	4b2e      	ldr	r3, [pc, #184]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x41c>
 800283a:	e04e      	b.n	80028da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283c:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <HAL_RCC_OscConfig+0x4ec>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002842:	f7fe f933 	bl	8000aac <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284a:	f7fe f92f 	bl	8000aac <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e03f      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285c:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f0      	bne.n	800284a <HAL_RCC_OscConfig+0x44a>
 8002868:	e037      	b.n	80028da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e032      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <HAL_RCC_OscConfig+0x4e8>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d028      	beq.n	80028d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d121      	bne.n	80028d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d11a      	bne.n	80028d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a6:	4013      	ands	r3, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d111      	bne.n	80028d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	3b01      	subs	r3, #1
 80028c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40007000 	.word	0x40007000
 80028e8:	40023800 	.word	0x40023800
 80028ec:	42470060 	.word	0x42470060

080028f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0cc      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002904:	4b68      	ldr	r3, [pc, #416]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d90c      	bls.n	800292c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b65      	ldr	r3, [pc, #404]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b63      	ldr	r3, [pc, #396]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0b8      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d020      	beq.n	800297a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002944:	4b59      	ldr	r3, [pc, #356]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a58      	ldr	r2, [pc, #352]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800294e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800295c:	4b53      	ldr	r3, [pc, #332]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4a52      	ldr	r2, [pc, #328]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	4b50      	ldr	r3, [pc, #320]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	494d      	ldr	r1, [pc, #308]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d044      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b47      	ldr	r3, [pc, #284]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d119      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e07f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d003      	beq.n	80029ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ae:	4b3f      	ldr	r3, [pc, #252]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e06f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029be:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e067      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ce:	4b37      	ldr	r3, [pc, #220]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f023 0203 	bic.w	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4934      	ldr	r1, [pc, #208]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e0:	f7fe f864 	bl	8000aac <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e8:	f7fe f860 	bl	8000aac <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e04f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 020c 	and.w	r2, r3, #12
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d1eb      	bne.n	80029e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a10:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d20c      	bcs.n	8002a38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e032      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4916      	ldr	r1, [pc, #88]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	490e      	ldr	r1, [pc, #56]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a76:	f000 f821 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	490a      	ldr	r1, [pc, #40]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a88:	5ccb      	ldrb	r3, [r1, r3]
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	4a09      	ldr	r2, [pc, #36]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd ffc4 	bl	8000a24 <HAL_InitTick>

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023c00 	.word	0x40023c00
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	0800a01c 	.word	0x0800a01c
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	20000004 	.word	0x20000004

08002abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002abc:	b5b0      	push	{r4, r5, r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	6079      	str	r1, [r7, #4]
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	60f9      	str	r1, [r7, #12]
 8002aca:	2100      	movs	r1, #0
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ace:	2100      	movs	r1, #0
 8002ad0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ad2:	4952      	ldr	r1, [pc, #328]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x160>)
 8002ad4:	6889      	ldr	r1, [r1, #8]
 8002ad6:	f001 010c 	and.w	r1, r1, #12
 8002ada:	2908      	cmp	r1, #8
 8002adc:	d00d      	beq.n	8002afa <HAL_RCC_GetSysClockFreq+0x3e>
 8002ade:	2908      	cmp	r1, #8
 8002ae0:	f200 8094 	bhi.w	8002c0c <HAL_RCC_GetSysClockFreq+0x150>
 8002ae4:	2900      	cmp	r1, #0
 8002ae6:	d002      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x32>
 8002ae8:	2904      	cmp	r1, #4
 8002aea:	d003      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x38>
 8002aec:	e08e      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aee:	4b4c      	ldr	r3, [pc, #304]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x164>)
 8002af0:	60bb      	str	r3, [r7, #8]
       break;
 8002af2:	e08e      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af4:	4b4b      	ldr	r3, [pc, #300]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x168>)
 8002af6:	60bb      	str	r3, [r7, #8]
      break;
 8002af8:	e08b      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002afa:	4948      	ldr	r1, [pc, #288]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x160>)
 8002afc:	6849      	ldr	r1, [r1, #4]
 8002afe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002b02:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b04:	4945      	ldr	r1, [pc, #276]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x160>)
 8002b06:	6849      	ldr	r1, [r1, #4]
 8002b08:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002b0c:	2900      	cmp	r1, #0
 8002b0e:	d024      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b10:	4942      	ldr	r1, [pc, #264]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x160>)
 8002b12:	6849      	ldr	r1, [r1, #4]
 8002b14:	0989      	lsrs	r1, r1, #6
 8002b16:	4608      	mov	r0, r1
 8002b18:	f04f 0100 	mov.w	r1, #0
 8002b1c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002b20:	f04f 0500 	mov.w	r5, #0
 8002b24:	ea00 0204 	and.w	r2, r0, r4
 8002b28:	ea01 0305 	and.w	r3, r1, r5
 8002b2c:	493d      	ldr	r1, [pc, #244]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b2e:	fb01 f003 	mul.w	r0, r1, r3
 8002b32:	2100      	movs	r1, #0
 8002b34:	fb01 f102 	mul.w	r1, r1, r2
 8002b38:	1844      	adds	r4, r0, r1
 8002b3a:	493a      	ldr	r1, [pc, #232]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b3c:	fba2 0101 	umull	r0, r1, r2, r1
 8002b40:	1863      	adds	r3, r4, r1
 8002b42:	4619      	mov	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	461a      	mov	r2, r3
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	f7fd fb98 	bl	8000280 <__aeabi_uldivmod>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4613      	mov	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	e04a      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5a:	4b30      	ldr	r3, [pc, #192]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x160>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	099b      	lsrs	r3, r3, #6
 8002b60:	461a      	mov	r2, r3
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	ea02 0400 	and.w	r4, r2, r0
 8002b72:	ea03 0501 	and.w	r5, r3, r1
 8002b76:	4620      	mov	r0, r4
 8002b78:	4629      	mov	r1, r5
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	014b      	lsls	r3, r1, #5
 8002b84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b88:	0142      	lsls	r2, r0, #5
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	1b00      	subs	r0, r0, r4
 8002b90:	eb61 0105 	sbc.w	r1, r1, r5
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	018b      	lsls	r3, r1, #6
 8002b9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ba2:	0182      	lsls	r2, r0, #6
 8002ba4:	1a12      	subs	r2, r2, r0
 8002ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8002baa:	f04f 0000 	mov.w	r0, #0
 8002bae:	f04f 0100 	mov.w	r1, #0
 8002bb2:	00d9      	lsls	r1, r3, #3
 8002bb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bb8:	00d0      	lsls	r0, r2, #3
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	1912      	adds	r2, r2, r4
 8002bc0:	eb45 0303 	adc.w	r3, r5, r3
 8002bc4:	f04f 0000 	mov.w	r0, #0
 8002bc8:	f04f 0100 	mov.w	r1, #0
 8002bcc:	0299      	lsls	r1, r3, #10
 8002bce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002bd2:	0290      	lsls	r0, r2, #10
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	461a      	mov	r2, r3
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	f7fd fb4c 	bl	8000280 <__aeabi_uldivmod>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4613      	mov	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x160>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	0c1b      	lsrs	r3, r3, #16
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c08:	60bb      	str	r3, [r7, #8]
      break;
 8002c0a:	e002      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x164>)
 8002c0e:	60bb      	str	r3, [r7, #8]
      break;
 8002c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c12:	68bb      	ldr	r3, [r7, #8]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	00f42400 	.word	0x00f42400
 8002c24:	017d7840 	.word	0x017d7840

08002c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000000 	.word	0x20000000

08002c40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c40:	b084      	sub	sp, #16
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	f107 001c 	add.w	r0, r7, #28
 8002c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d122      	bne.n	8002c9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d105      	bne.n	8002c92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f001 fb1c 	bl	80042d0 <USB_CoreReset>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	73fb      	strb	r3, [r7, #15]
 8002c9c:	e01a      	b.n	8002cd4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f001 fb10 	bl	80042d0 <USB_CoreReset>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	639a      	str	r2, [r3, #56]	; 0x38
 8002cc6:	e005      	b.n	8002cd4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d10b      	bne.n	8002cf2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f043 0206 	orr.w	r2, r3, #6
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f043 0220 	orr.w	r2, r3, #32
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cfe:	b004      	add	sp, #16
 8002d00:	4770      	bx	lr
	...

08002d04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d165      	bne.n	8002de4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4a41      	ldr	r2, [pc, #260]	; (8002e20 <USB_SetTurnaroundTime+0x11c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d906      	bls.n	8002d2e <USB_SetTurnaroundTime+0x2a>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4a40      	ldr	r2, [pc, #256]	; (8002e24 <USB_SetTurnaroundTime+0x120>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d202      	bcs.n	8002d2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d28:	230f      	movs	r3, #15
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	e062      	b.n	8002df4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	4a3c      	ldr	r2, [pc, #240]	; (8002e24 <USB_SetTurnaroundTime+0x120>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d306      	bcc.n	8002d44 <USB_SetTurnaroundTime+0x40>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4a3b      	ldr	r2, [pc, #236]	; (8002e28 <USB_SetTurnaroundTime+0x124>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d202      	bcs.n	8002d44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d3e:	230e      	movs	r3, #14
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	e057      	b.n	8002df4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4a38      	ldr	r2, [pc, #224]	; (8002e28 <USB_SetTurnaroundTime+0x124>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d306      	bcc.n	8002d5a <USB_SetTurnaroundTime+0x56>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4a37      	ldr	r2, [pc, #220]	; (8002e2c <USB_SetTurnaroundTime+0x128>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d202      	bcs.n	8002d5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d54:	230d      	movs	r3, #13
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e04c      	b.n	8002df4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4a33      	ldr	r2, [pc, #204]	; (8002e2c <USB_SetTurnaroundTime+0x128>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d306      	bcc.n	8002d70 <USB_SetTurnaroundTime+0x6c>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4a32      	ldr	r2, [pc, #200]	; (8002e30 <USB_SetTurnaroundTime+0x12c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d802      	bhi.n	8002d70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d6a:	230c      	movs	r3, #12
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e041      	b.n	8002df4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4a2f      	ldr	r2, [pc, #188]	; (8002e30 <USB_SetTurnaroundTime+0x12c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d906      	bls.n	8002d86 <USB_SetTurnaroundTime+0x82>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4a2e      	ldr	r2, [pc, #184]	; (8002e34 <USB_SetTurnaroundTime+0x130>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d802      	bhi.n	8002d86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d80:	230b      	movs	r3, #11
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	e036      	b.n	8002df4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4a2a      	ldr	r2, [pc, #168]	; (8002e34 <USB_SetTurnaroundTime+0x130>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d906      	bls.n	8002d9c <USB_SetTurnaroundTime+0x98>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	4a29      	ldr	r2, [pc, #164]	; (8002e38 <USB_SetTurnaroundTime+0x134>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d802      	bhi.n	8002d9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d96:	230a      	movs	r3, #10
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e02b      	b.n	8002df4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <USB_SetTurnaroundTime+0x134>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d906      	bls.n	8002db2 <USB_SetTurnaroundTime+0xae>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4a25      	ldr	r2, [pc, #148]	; (8002e3c <USB_SetTurnaroundTime+0x138>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d202      	bcs.n	8002db2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002dac:	2309      	movs	r3, #9
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	e020      	b.n	8002df4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4a21      	ldr	r2, [pc, #132]	; (8002e3c <USB_SetTurnaroundTime+0x138>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d306      	bcc.n	8002dc8 <USB_SetTurnaroundTime+0xc4>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4a20      	ldr	r2, [pc, #128]	; (8002e40 <USB_SetTurnaroundTime+0x13c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d802      	bhi.n	8002dc8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	e015      	b.n	8002df4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <USB_SetTurnaroundTime+0x13c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d906      	bls.n	8002dde <USB_SetTurnaroundTime+0xda>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <USB_SetTurnaroundTime+0x140>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d202      	bcs.n	8002dde <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002dd8:	2307      	movs	r3, #7
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	e00a      	b.n	8002df4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002dde:	2306      	movs	r3, #6
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e007      	b.n	8002df4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002dea:	2309      	movs	r3, #9
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	e001      	b.n	8002df4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002df0:	2309      	movs	r3, #9
 8002df2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	029b      	lsls	r3, r3, #10
 8002e08:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	00d8acbf 	.word	0x00d8acbf
 8002e24:	00e4e1c0 	.word	0x00e4e1c0
 8002e28:	00f42400 	.word	0x00f42400
 8002e2c:	01067380 	.word	0x01067380
 8002e30:	011a499f 	.word	0x011a499f
 8002e34:	01312cff 	.word	0x01312cff
 8002e38:	014ca43f 	.word	0x014ca43f
 8002e3c:	016e3600 	.word	0x016e3600
 8002e40:	01a6ab1f 	.word	0x01a6ab1f
 8002e44:	01e84800 	.word	0x01e84800

08002e48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f043 0201 	orr.w	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f023 0201 	bic.w	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d115      	bne.n	8002eda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f7fd fe02 	bl	8000ac4 <HAL_Delay>
      ms++;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f001 f972 	bl	80041b0 <USB_GetMode>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d01e      	beq.n	8002f10 <USB_SetCurrentMode+0x84>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b31      	cmp	r3, #49	; 0x31
 8002ed6:	d9f0      	bls.n	8002eba <USB_SetCurrentMode+0x2e>
 8002ed8:	e01a      	b.n	8002f10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d115      	bne.n	8002f0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002eec:	2001      	movs	r0, #1
 8002eee:	f7fd fde9 	bl	8000ac4 <HAL_Delay>
      ms++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f001 f959 	bl	80041b0 <USB_GetMode>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <USB_SetCurrentMode+0x84>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b31      	cmp	r3, #49	; 0x31
 8002f08:	d9f0      	bls.n	8002eec <USB_SetCurrentMode+0x60>
 8002f0a:	e001      	b.n	8002f10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e005      	b.n	8002f1c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b32      	cmp	r3, #50	; 0x32
 8002f14:	d101      	bne.n	8002f1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f24:	b084      	sub	sp, #16
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b086      	sub	sp, #24
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	e009      	b.n	8002f58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	3340      	adds	r3, #64	; 0x40
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	2200      	movs	r2, #0
 8002f50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	3301      	adds	r3, #1
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b0e      	cmp	r3, #14
 8002f5c:	d9f2      	bls.n	8002f44 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d11c      	bne.n	8002f9e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f72:	f043 0302 	orr.w	r3, r3, #2
 8002f76:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f9c:	e00b      	b.n	8002fb6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc8:	4619      	mov	r1, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	680b      	ldr	r3, [r1, #0]
 8002fd4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d10c      	bne.n	8002ff6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d104      	bne.n	8002fec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f945 	bl	8003274 <USB_SetDevSpeed>
 8002fea:	e008      	b.n	8002ffe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002fec:	2101      	movs	r1, #1
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f940 	bl	8003274 <USB_SetDevSpeed>
 8002ff4:	e003      	b.n	8002ffe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002ff6:	2103      	movs	r1, #3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f93b 	bl	8003274 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ffe:	2110      	movs	r1, #16
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f8f3 	bl	80031ec <USB_FlushTxFifo>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f90f 	bl	8003234 <USB_FlushRxFifo>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003026:	461a      	mov	r2, r3
 8003028:	2300      	movs	r3, #0
 800302a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003032:	461a      	mov	r2, r3
 8003034:	2300      	movs	r3, #0
 8003036:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303e:	461a      	mov	r2, r3
 8003040:	2300      	movs	r3, #0
 8003042:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003044:	2300      	movs	r3, #0
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	e043      	b.n	80030d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800305c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003060:	d118      	bne.n	8003094 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4413      	add	r3, r2
 8003070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003074:	461a      	mov	r2, r3
 8003076:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	e013      	b.n	80030a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800308a:	461a      	mov	r2, r3
 800308c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e008      	b.n	80030a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a0:	461a      	mov	r2, r3
 80030a2:	2300      	movs	r3, #0
 80030a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b2:	461a      	mov	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c4:	461a      	mov	r2, r3
 80030c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	3301      	adds	r3, #1
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d3b7      	bcc.n	800304a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	e043      	b.n	8003168 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030f6:	d118      	bne.n	800312a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10a      	bne.n	8003114 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310a:	461a      	mov	r2, r3
 800310c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e013      	b.n	800313c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003120:	461a      	mov	r2, r3
 8003122:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	e008      	b.n	800313c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003136:	461a      	mov	r2, r3
 8003138:	2300      	movs	r3, #0
 800313a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003148:	461a      	mov	r2, r3
 800314a:	2300      	movs	r3, #0
 800314c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315a:	461a      	mov	r2, r3
 800315c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003160:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	3301      	adds	r3, #1
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	429a      	cmp	r2, r3
 800316e:	d3b7      	bcc.n	80030e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800317e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003182:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003190:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	2b00      	cmp	r3, #0
 8003196:	d105      	bne.n	80031a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f043 0210 	orr.w	r2, r3, #16
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699a      	ldr	r2, [r3, #24]
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <USB_DevInit+0x2c4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f043 0208 	orr.w	r2, r3, #8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80031c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d107      	bne.n	80031d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031d0:	f043 0304 	orr.w	r3, r3, #4
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031e4:	b004      	add	sp, #16
 80031e6:	4770      	bx	lr
 80031e8:	803c3800 	.word	0x803c3800

080031ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	019b      	lsls	r3, r3, #6
 80031fe:	f043 0220 	orr.w	r2, r3, #32
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3301      	adds	r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	4a08      	ldr	r2, [pc, #32]	; (8003230 <USB_FlushTxFifo+0x44>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e006      	b.n	8003224 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b20      	cmp	r3, #32
 8003220:	d0f1      	beq.n	8003206 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	00030d40 	.word	0x00030d40

08003234 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2210      	movs	r2, #16
 8003244:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	3301      	adds	r3, #1
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	4a08      	ldr	r2, [pc, #32]	; (8003270 <USB_FlushRxFifo+0x3c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e006      	b.n	8003264 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b10      	cmp	r3, #16
 8003260:	d0f1      	beq.n	8003246 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	00030d40 	.word	0x00030d40

08003274 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	68f9      	ldr	r1, [r7, #12]
 8003290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003294:	4313      	orrs	r3, r2
 8003296:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b087      	sub	sp, #28
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0306 	and.w	r3, r3, #6
 80032be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d102      	bne.n	80032cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80032c6:	2300      	movs	r3, #0
 80032c8:	75fb      	strb	r3, [r7, #23]
 80032ca:	e00a      	b.n	80032e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d002      	beq.n	80032d8 <USB_GetDevSpeed+0x32>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b06      	cmp	r3, #6
 80032d6:	d102      	bne.n	80032de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80032d8:	2302      	movs	r3, #2
 80032da:	75fb      	strb	r3, [r7, #23]
 80032dc:	e001      	b.n	80032e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80032de:	230f      	movs	r3, #15
 80032e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	785b      	ldrb	r3, [r3, #1]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d13a      	bne.n	8003382 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	2101      	movs	r1, #1
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	b29b      	uxth	r3, r3
 8003324:	68f9      	ldr	r1, [r7, #12]
 8003326:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800332a:	4313      	orrs	r3, r2
 800332c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4413      	add	r3, r2
 8003336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d155      	bne.n	80033f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4413      	add	r3, r2
 800334c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	78db      	ldrb	r3, [r3, #3]
 800335e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003360:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	059b      	lsls	r3, r3, #22
 8003366:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003368:	4313      	orrs	r3, r2
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	0151      	lsls	r1, r2, #5
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	440a      	add	r2, r1
 8003372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	e036      	b.n	80033f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003388:	69da      	ldr	r2, [r3, #28]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	2101      	movs	r1, #1
 8003394:	fa01 f303 	lsl.w	r3, r1, r3
 8003398:	041b      	lsls	r3, r3, #16
 800339a:	68f9      	ldr	r1, [r7, #12]
 800339c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d11a      	bne.n	80033f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	78db      	ldrb	r3, [r3, #3]
 80033d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033d6:	430b      	orrs	r3, r1
 80033d8:	4313      	orrs	r3, r2
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	0151      	lsls	r1, r2, #5
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	440a      	add	r2, r1
 80033e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	785b      	ldrb	r3, [r3, #1]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d161      	bne.n	80034e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800342e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003432:	d11f      	bne.n	8003474 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	0151      	lsls	r1, r2, #5
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	440a      	add	r2, r1
 800344a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800344e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003452:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	0151      	lsls	r1, r2, #5
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	440a      	add	r2, r1
 800346a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800346e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003472:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	2101      	movs	r1, #1
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	b29b      	uxth	r3, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	68f9      	ldr	r1, [r7, #12]
 8003490:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003494:	4013      	ands	r3, r2
 8003496:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800349e:	69da      	ldr	r2, [r3, #28]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	2101      	movs	r1, #1
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	68f9      	ldr	r1, [r7, #12]
 80034b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034b8:	4013      	ands	r3, r2
 80034ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	0159      	lsls	r1, r3, #5
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	440b      	add	r3, r1
 80034d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d6:	4619      	mov	r1, r3
 80034d8:	4b35      	ldr	r3, [pc, #212]	; (80035b0 <USB_DeactivateEndpoint+0x1b0>)
 80034da:	4013      	ands	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
 80034de:	e060      	b.n	80035a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f6:	d11f      	bne.n	8003538 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	0151      	lsls	r1, r2, #5
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	440a      	add	r2, r1
 800350e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003512:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003516:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	0151      	lsls	r1, r2, #5
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	440a      	add	r2, r1
 800352e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003532:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003536:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	2101      	movs	r1, #1
 800354a:	fa01 f303 	lsl.w	r3, r1, r3
 800354e:	041b      	lsls	r3, r3, #16
 8003550:	43db      	mvns	r3, r3
 8003552:	68f9      	ldr	r1, [r7, #12]
 8003554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003558:	4013      	ands	r3, r2
 800355a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	041b      	lsls	r3, r3, #16
 8003574:	43db      	mvns	r3, r3
 8003576:	68f9      	ldr	r1, [r7, #12]
 8003578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800357c:	4013      	ands	r3, r2
 800357e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	0159      	lsls	r1, r3, #5
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	440b      	add	r3, r1
 8003596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359a:	4619      	mov	r1, r3
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <USB_DeactivateEndpoint+0x1b4>)
 800359e:	4013      	ands	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	ec337800 	.word	0xec337800
 80035b4:	eff37800 	.word	0xeff37800

080035b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	; 0x28
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	4613      	mov	r3, r2
 80035c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	f040 815c 	bne.w	8003892 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d132      	bne.n	8003648 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	0151      	lsls	r1, r2, #5
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	440a      	add	r2, r1
 80035f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003600:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003604:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	0151      	lsls	r1, r2, #5
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	440a      	add	r2, r1
 800361c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003624:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	0151      	lsls	r1, r2, #5
 8003638:	69fa      	ldr	r2, [r7, #28]
 800363a:	440a      	add	r2, r1
 800363c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003640:	0cdb      	lsrs	r3, r3, #19
 8003642:	04db      	lsls	r3, r3, #19
 8003644:	6113      	str	r3, [r2, #16]
 8003646:	e074      	b.n	8003732 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	0151      	lsls	r1, r2, #5
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	440a      	add	r2, r1
 800365e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003662:	0cdb      	lsrs	r3, r3, #19
 8003664:	04db      	lsls	r3, r3, #19
 8003666:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	0151      	lsls	r1, r2, #5
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	440a      	add	r2, r1
 800367e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003682:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003686:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800368a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003698:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	6959      	ldr	r1, [r3, #20]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	440b      	add	r3, r1
 80036a4:	1e59      	subs	r1, r3, #1
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80036ae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80036b0:	4b9d      	ldr	r3, [pc, #628]	; (8003928 <USB_EPStartXfer+0x370>)
 80036b2:	400b      	ands	r3, r1
 80036b4:	69b9      	ldr	r1, [r7, #24]
 80036b6:	0148      	lsls	r0, r1, #5
 80036b8:	69f9      	ldr	r1, [r7, #28]
 80036ba:	4401      	add	r1, r0
 80036bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80036c0:	4313      	orrs	r3, r2
 80036c2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036da:	69b9      	ldr	r1, [r7, #24]
 80036dc:	0148      	lsls	r0, r1, #5
 80036de:	69f9      	ldr	r1, [r7, #28]
 80036e0:	4401      	add	r1, r0
 80036e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80036e6:	4313      	orrs	r3, r2
 80036e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	78db      	ldrb	r3, [r3, #3]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d11f      	bne.n	8003732 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	0151      	lsls	r1, r2, #5
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	440a      	add	r2, r1
 8003708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800370c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003710:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	0151      	lsls	r1, r2, #5
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	440a      	add	r2, r1
 8003728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800372c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003730:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d14b      	bne.n	80037d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d009      	beq.n	8003754 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374c:	461a      	mov	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	78db      	ldrb	r3, [r3, #3]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d128      	bne.n	80037ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d110      	bne.n	800378e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	0151      	lsls	r1, r2, #5
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	440a      	add	r2, r1
 8003782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003786:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	e00f      	b.n	80037ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	0151      	lsls	r1, r2, #5
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	440a      	add	r2, r1
 80037a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	0151      	lsls	r1, r2, #5
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	440a      	add	r2, r1
 80037c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e12f      	b.n	8003a30 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	0151      	lsls	r1, r2, #5
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	440a      	add	r2, r1
 80037e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	78db      	ldrb	r3, [r3, #3]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d015      	beq.n	8003824 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8117 	beq.w	8003a30 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	69f9      	ldr	r1, [r7, #28]
 800381a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800381e:	4313      	orrs	r3, r2
 8003820:	634b      	str	r3, [r1, #52]	; 0x34
 8003822:	e105      	b.n	8003a30 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d110      	bne.n	8003856 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	0151      	lsls	r1, r2, #5
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	440a      	add	r2, r1
 800384a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800384e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	e00f      	b.n	8003876 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	0151      	lsls	r1, r2, #5
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	440a      	add	r2, r1
 800386c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003874:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	68d9      	ldr	r1, [r3, #12]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	781a      	ldrb	r2, [r3, #0]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	b298      	uxth	r0, r3
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	4603      	mov	r3, r0
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fa2b 	bl	8003ce6 <USB_WritePacket>
 8003890:	e0ce      	b.n	8003a30 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	4413      	add	r3, r2
 800389a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	0151      	lsls	r1, r2, #5
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	440a      	add	r2, r1
 80038a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038ac:	0cdb      	lsrs	r3, r3, #19
 80038ae:	04db      	lsls	r3, r3, #19
 80038b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	0151      	lsls	r1, r2, #5
 80038c4:	69fa      	ldr	r2, [r7, #28]
 80038c6:	440a      	add	r2, r1
 80038c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d126      	bne.n	800392c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f4:	69b9      	ldr	r1, [r7, #24]
 80038f6:	0148      	lsls	r0, r1, #5
 80038f8:	69f9      	ldr	r1, [r7, #28]
 80038fa:	4401      	add	r1, r0
 80038fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003900:	4313      	orrs	r3, r2
 8003902:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	0151      	lsls	r1, r2, #5
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	440a      	add	r2, r1
 800391a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800391e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003922:	6113      	str	r3, [r2, #16]
 8003924:	e036      	b.n	8003994 <USB_EPStartXfer+0x3dc>
 8003926:	bf00      	nop
 8003928:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4413      	add	r3, r2
 8003936:	1e5a      	subs	r2, r3, #1
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	8afb      	ldrh	r3, [r7, #22]
 8003952:	04d9      	lsls	r1, r3, #19
 8003954:	4b39      	ldr	r3, [pc, #228]	; (8003a3c <USB_EPStartXfer+0x484>)
 8003956:	400b      	ands	r3, r1
 8003958:	69b9      	ldr	r1, [r7, #24]
 800395a:	0148      	lsls	r0, r1, #5
 800395c:	69f9      	ldr	r1, [r7, #28]
 800395e:	4401      	add	r1, r0
 8003960:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003964:	4313      	orrs	r3, r2
 8003966:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	8af9      	ldrh	r1, [r7, #22]
 800397c:	fb01 f303 	mul.w	r3, r1, r3
 8003980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003984:	69b9      	ldr	r1, [r7, #24]
 8003986:	0148      	lsls	r0, r1, #5
 8003988:	69f9      	ldr	r1, [r7, #28]
 800398a:	4401      	add	r1, r0
 800398c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003990:	4313      	orrs	r3, r2
 8003992:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d10d      	bne.n	80039b6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	68d9      	ldr	r1, [r3, #12]
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b2:	460a      	mov	r2, r1
 80039b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	78db      	ldrb	r3, [r3, #3]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d128      	bne.n	8003a10 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d110      	bne.n	80039f0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	0151      	lsls	r1, r2, #5
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	440a      	add	r2, r1
 80039e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e00f      	b.n	8003a10 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	0151      	lsls	r1, r2, #5
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	440a      	add	r2, r1
 8003a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	0151      	lsls	r1, r2, #5
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	440a      	add	r2, r1
 8003a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3720      	adds	r7, #32
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	1ff80000 	.word	0x1ff80000

08003a40 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	785b      	ldrb	r3, [r3, #1]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	f040 80cd 	bne.w	8003bfc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d132      	bne.n	8003ad0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	0151      	lsls	r1, r2, #5
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	440a      	add	r2, r1
 8003a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	0151      	lsls	r1, r2, #5
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	440a      	add	r2, r1
 8003aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003aac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	0151      	lsls	r1, r2, #5
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	440a      	add	r2, r1
 8003ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ac8:	0cdb      	lsrs	r3, r3, #19
 8003aca:	04db      	lsls	r3, r3, #19
 8003acc:	6113      	str	r3, [r2, #16]
 8003ace:	e04e      	b.n	8003b6e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	0151      	lsls	r1, r2, #5
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	440a      	add	r2, r1
 8003ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aea:	0cdb      	lsrs	r3, r3, #19
 8003aec:	04db      	lsls	r3, r3, #19
 8003aee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	0151      	lsls	r1, r2, #5
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	440a      	add	r2, r1
 8003b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b12:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d903      	bls.n	8003b28 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	0151      	lsls	r1, r2, #5
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	440a      	add	r2, r1
 8003b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b54:	691a      	ldr	r2, [r3, #16]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b5e:	6939      	ldr	r1, [r7, #16]
 8003b60:	0148      	lsls	r0, r1, #5
 8003b62:	6979      	ldr	r1, [r7, #20]
 8003b64:	4401      	add	r1, r0
 8003b66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d11e      	bne.n	8003bb2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b88:	461a      	mov	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	0151      	lsls	r1, r2, #5
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	440a      	add	r2, r1
 8003ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003baa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	e092      	b.n	8003cd8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	0151      	lsls	r1, r2, #5
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	440a      	add	r2, r1
 8003bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bd0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d07e      	beq.n	8003cd8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	2101      	movs	r1, #1
 8003bec:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf0:	6979      	ldr	r1, [r7, #20]
 8003bf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	634b      	str	r3, [r1, #52]	; 0x34
 8003bfa:	e06d      	b.n	8003cd8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	0151      	lsls	r1, r2, #5
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	440a      	add	r2, r1
 8003c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c16:	0cdb      	lsrs	r3, r3, #19
 8003c18:	04db      	lsls	r3, r3, #19
 8003c1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	0151      	lsls	r1, r2, #5
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	440a      	add	r2, r1
 8003c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c3e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	0151      	lsls	r1, r2, #5
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	440a      	add	r2, r1
 8003c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c86:	6939      	ldr	r1, [r7, #16]
 8003c88:	0148      	lsls	r0, r1, #5
 8003c8a:	6979      	ldr	r1, [r7, #20]
 8003c8c:	4401      	add	r1, r0
 8003c8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c92:	4313      	orrs	r3, r2
 8003c94:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d10d      	bne.n	8003cb8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d009      	beq.n	8003cb8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	68d9      	ldr	r1, [r3, #12]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb4:	460a      	mov	r2, r1
 8003cb6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	0151      	lsls	r1, r2, #5
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	440a      	add	r2, r1
 8003cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	371c      	adds	r7, #28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b089      	sub	sp, #36	; 0x24
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	71fb      	strb	r3, [r7, #7]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003d04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d123      	bne.n	8003d54 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003d0c:	88bb      	ldrh	r3, [r7, #4]
 8003d0e:	3303      	adds	r3, #3
 8003d10:	089b      	lsrs	r3, r3, #2
 8003d12:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	e018      	b.n	8003d4c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	031a      	lsls	r2, r3, #12
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d26:	461a      	mov	r2, r3
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3301      	adds	r3, #1
 8003d32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	3301      	adds	r3, #1
 8003d38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	3301      	adds	r3, #1
 8003d44:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	61bb      	str	r3, [r7, #24]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d3e2      	bcc.n	8003d1a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3724      	adds	r7, #36	; 0x24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b08b      	sub	sp, #44	; 0x2c
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003d78:	88fb      	ldrh	r3, [r7, #6]
 8003d7a:	089b      	lsrs	r3, r3, #2
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003d80:	88fb      	ldrh	r3, [r7, #6]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	623b      	str	r3, [r7, #32]
 8003d8c:	e014      	b.n	8003db8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	3301      	adds	r3, #1
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	3301      	adds	r3, #1
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	3301      	adds	r3, #1
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	3301      	adds	r3, #1
 8003db6:	623b      	str	r3, [r7, #32]
 8003db8:	6a3a      	ldr	r2, [r7, #32]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d3e6      	bcc.n	8003d8e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003dc0:	8bfb      	ldrh	r3, [r7, #30]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01e      	beq.n	8003e04 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	f107 0310 	add.w	r3, r7, #16
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	fa22 f303 	lsr.w	r3, r2, r3
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	701a      	strb	r2, [r3, #0]
      i++;
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	3301      	adds	r3, #1
 8003df0:	623b      	str	r3, [r7, #32]
      pDest++;
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	3301      	adds	r3, #1
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003df8:	8bfb      	ldrh	r3, [r7, #30]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003dfe:	8bfb      	ldrh	r3, [r7, #30]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1ea      	bne.n	8003dda <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	372c      	adds	r7, #44	; 0x2c
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b085      	sub	sp, #20
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	785b      	ldrb	r3, [r3, #1]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d12c      	bne.n	8003e88 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	db12      	blt.n	8003e66 <USB_EPSetStall+0x54>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00f      	beq.n	8003e66 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	0151      	lsls	r1, r2, #5
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	440a      	add	r2, r1
 8003e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e64:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	0151      	lsls	r1, r2, #5
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	440a      	add	r2, r1
 8003e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	e02b      	b.n	8003ee0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	db12      	blt.n	8003ec0 <USB_EPSetStall+0xae>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00f      	beq.n	8003ec0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ebe:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	0151      	lsls	r1, r2, #5
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	440a      	add	r2, r1
 8003ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ede:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	785b      	ldrb	r3, [r3, #1]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d128      	bne.n	8003f5c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	0151      	lsls	r1, r2, #5
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	440a      	add	r2, r1
 8003f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	78db      	ldrb	r3, [r3, #3]
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d003      	beq.n	8003f3a <USB_EPClearStall+0x4c>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	78db      	ldrb	r3, [r3, #3]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d138      	bne.n	8003fac <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	0151      	lsls	r1, r2, #5
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	440a      	add	r2, r1
 8003f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e027      	b.n	8003fac <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	0151      	lsls	r1, r2, #5
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	440a      	add	r2, r1
 8003f72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	78db      	ldrb	r3, [r3, #3]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d003      	beq.n	8003f8c <USB_EPClearStall+0x9e>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	78db      	ldrb	r3, [r3, #3]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d10f      	bne.n	8003fac <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	0151      	lsls	r1, r2, #5
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003faa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b085      	sub	sp, #20
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fd8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003fdc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	78fb      	ldrb	r3, [r7, #3]
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004006:	b480      	push	{r7}
 8004008:	b085      	sub	sp, #20
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004020:	f023 0303 	bic.w	r3, r3, #3
 8004024:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004034:	f023 0302 	bic.w	r3, r3, #2
 8004038:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004062:	f023 0303 	bic.w	r3, r3, #3
 8004066:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004076:	f043 0302 	orr.w	r3, r3, #2
 800407a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800408a:	b480      	push	{r7}
 800408c:	b085      	sub	sp, #20
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4013      	ands	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80040a2:	68fb      	ldr	r3, [r7, #12]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	4013      	ands	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	0c1b      	lsrs	r3, r3, #16
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	4013      	ands	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	b29b      	uxth	r3, r3
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	4013      	ands	r3, r2
 8004144:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004146:	68bb      	ldr	r3, [r7, #8]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
 8004184:	01db      	lsls	r3, r3, #7
 8004186:	b2db      	uxtb	r3, r3
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4013      	ands	r3, r2
 80041a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80041a2:	68bb      	ldr	r3, [r7, #8]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f003 0301 	and.w	r3, r3, #1
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80041ea:	f023 0307 	bic.w	r3, r3, #7
 80041ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004202:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	460b      	mov	r3, r1
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	333c      	adds	r3, #60	; 0x3c
 800422a:	3304      	adds	r3, #4
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	4a26      	ldr	r2, [pc, #152]	; (80042cc <USB_EP0_OutStart+0xb8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d90a      	bls.n	800424e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004248:	d101      	bne.n	800424e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	e037      	b.n	80042be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004254:	461a      	mov	r2, r3
 8004256:	2300      	movs	r3, #0
 8004258:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004268:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800426c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800427c:	f043 0318 	orr.w	r3, r3, #24
 8004280:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004290:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004294:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004296:	7afb      	ldrb	r3, [r7, #11]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d10f      	bne.n	80042bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a2:	461a      	mov	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80042ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	4f54300a 	.word	0x4f54300a

080042d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3301      	adds	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	4a13      	ldr	r2, [pc, #76]	; (8004330 <USB_CoreReset+0x60>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d901      	bls.n	80042ec <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e01a      	b.n	8004322 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	daf3      	bge.n	80042dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f043 0201 	orr.w	r2, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3301      	adds	r3, #1
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	4a09      	ldr	r2, [pc, #36]	; (8004330 <USB_CoreReset+0x60>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d901      	bls.n	8004314 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e006      	b.n	8004322 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b01      	cmp	r3, #1
 800431e:	d0f1      	beq.n	8004304 <USB_CoreReset+0x34>

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	00030d40 	.word	0x00030d40

08004334 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8004338:	f001 fa6e 	bl	8005818 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 800433c:	2200      	movs	r2, #0
 800433e:	491b      	ldr	r1, [pc, #108]	; (80043ac <MX_USB_DEVICE_Init+0x78>)
 8004340:	481b      	ldr	r0, [pc, #108]	; (80043b0 <MX_USB_DEVICE_Init+0x7c>)
 8004342:	f003 fd38 	bl	8007db6 <USBD_Init>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 800434c:	f7fc f9f2 	bl	8000734 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8004350:	4918      	ldr	r1, [pc, #96]	; (80043b4 <MX_USB_DEVICE_Init+0x80>)
 8004352:	4817      	ldr	r0, [pc, #92]	; (80043b0 <MX_USB_DEVICE_Init+0x7c>)
 8004354:	f003 fd5b 	bl	8007e0e <USBD_RegisterClass>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800435e:	f7fc f9e9 	bl	8000734 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8004362:	4915      	ldr	r1, [pc, #84]	; (80043b8 <MX_USB_DEVICE_Init+0x84>)
 8004364:	4812      	ldr	r0, [pc, #72]	; (80043b0 <MX_USB_DEVICE_Init+0x7c>)
 8004366:	f000 fedf 	bl	8005128 <USBD_CDC_ACM_RegisterInterface>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8004370:	f7fc f9e0 	bl	8000734 <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 8004374:	4911      	ldr	r1, [pc, #68]	; (80043bc <MX_USB_DEVICE_Init+0x88>)
 8004376:	480e      	ldr	r0, [pc, #56]	; (80043b0 <MX_USB_DEVICE_Init+0x7c>)
 8004378:	f001 fe2e 	bl	8005fd8 <USBD_CUSTOM_HID_RegisterInterface>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8004382:	f7fc f9d7 	bl	8000734 <Error_Handler>
  {
    Error_Handler();
  }
#endif
#if (USBD_USE_MSC == 1)
  if (USBD_MSC_RegisterStorage(&hUsbDevice, &USBD_Storage_Interface_fops) != USBD_OK)
 8004386:	490e      	ldr	r1, [pc, #56]	; (80043c0 <MX_USB_DEVICE_Init+0x8c>)
 8004388:	4809      	ldr	r0, [pc, #36]	; (80043b0 <MX_USB_DEVICE_Init+0x7c>)
 800438a:	f002 f883 	bl	8006494 <USBD_MSC_RegisterStorage>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <MX_USB_DEVICE_Init+0x64>
  {
    Error_Handler();
 8004394:	f7fc f9ce 	bl	8000734 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8004398:	4805      	ldr	r0, [pc, #20]	; (80043b0 <MX_USB_DEVICE_Init+0x7c>)
 800439a:	f003 fd76 	bl	8007e8a <USBD_Start>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <MX_USB_DEVICE_Init+0x74>
  {
    Error_Handler();
 80043a4:	f7fc f9c6 	bl	8000734 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80043a8:	bf00      	nop
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000020 	.word	0x20000020
 80043b0:	20000b24 	.word	0x20000b24
 80043b4:	200001a4 	.word	0x200001a4
 80043b8:	2000000c 	.word	0x2000000c
 80043bc:	20000094 	.word	0x20000094
 80043c0:	200000a4 	.word	0x200000a4

080043c4 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 80043ce:	79fb      	ldrb	r3, [r7, #7]
 80043d0:	01db      	lsls	r3, r3, #7
 80043d2:	4a06      	ldr	r2, [pc, #24]	; (80043ec <CDC_Init+0x28>)
 80043d4:	441a      	add	r2, r3
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	4905      	ldr	r1, [pc, #20]	; (80043f0 <CDC_Init+0x2c>)
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fede 	bl	800519c <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 80043e0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000e40 	.word	0x20000e40
 80043f0:	20000b24 	.word	0x20000b24

080043f4 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 80043fe:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	603a      	str	r2, [r7, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	4603      	mov	r3, r0
 8004418:	71fb      	strb	r3, [r7, #7]
 800441a:	460b      	mov	r3, r1
 800441c:	71bb      	strb	r3, [r7, #6]
 800441e:	4613      	mov	r3, r2
 8004420:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8004422:	79bb      	ldrb	r3, [r7, #6]
 8004424:	2b23      	cmp	r3, #35	; 0x23
 8004426:	f200 80b6 	bhi.w	8004596 <CDC_Control+0x18a>
 800442a:	a201      	add	r2, pc, #4	; (adr r2, 8004430 <CDC_Control+0x24>)
 800442c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004430:	08004597 	.word	0x08004597
 8004434:	08004597 	.word	0x08004597
 8004438:	08004597 	.word	0x08004597
 800443c:	08004597 	.word	0x08004597
 8004440:	08004597 	.word	0x08004597
 8004444:	08004597 	.word	0x08004597
 8004448:	08004597 	.word	0x08004597
 800444c:	08004597 	.word	0x08004597
 8004450:	08004597 	.word	0x08004597
 8004454:	08004597 	.word	0x08004597
 8004458:	08004597 	.word	0x08004597
 800445c:	08004597 	.word	0x08004597
 8004460:	08004597 	.word	0x08004597
 8004464:	08004597 	.word	0x08004597
 8004468:	08004597 	.word	0x08004597
 800446c:	08004597 	.word	0x08004597
 8004470:	08004597 	.word	0x08004597
 8004474:	08004597 	.word	0x08004597
 8004478:	08004597 	.word	0x08004597
 800447c:	08004597 	.word	0x08004597
 8004480:	08004597 	.word	0x08004597
 8004484:	08004597 	.word	0x08004597
 8004488:	08004597 	.word	0x08004597
 800448c:	08004597 	.word	0x08004597
 8004490:	08004597 	.word	0x08004597
 8004494:	08004597 	.word	0x08004597
 8004498:	08004597 	.word	0x08004597
 800449c:	08004597 	.word	0x08004597
 80044a0:	08004597 	.word	0x08004597
 80044a4:	08004597 	.word	0x08004597
 80044a8:	08004597 	.word	0x08004597
 80044ac:	08004597 	.word	0x08004597
 80044b0:	080044c1 	.word	0x080044c1
 80044b4:	08004521 	.word	0x08004521
 80044b8:	08004597 	.word	0x08004597
 80044bc:	08004597 	.word	0x08004597
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	3301      	adds	r3, #1
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	3302      	adds	r3, #2
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 80044d8:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	3303      	adds	r3, #3
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	061b      	lsls	r3, r3, #24
 80044e2:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	4611      	mov	r1, r2
 80044e8:	4a2f      	ldr	r2, [pc, #188]	; (80045a8 <CDC_Control+0x19c>)
 80044ea:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	7911      	ldrb	r1, [r2, #4]
 80044f4:	4a2c      	ldr	r2, [pc, #176]	; (80045a8 <CDC_Control+0x19c>)
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4413      	add	r3, r2
 80044fa:	460a      	mov	r2, r1
 80044fc:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	7951      	ldrb	r1, [r2, #5]
 8004504:	4a28      	ldr	r2, [pc, #160]	; (80045a8 <CDC_Control+0x19c>)
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4413      	add	r3, r2
 800450a:	460a      	mov	r2, r1
 800450c:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	7991      	ldrb	r1, [r2, #6]
 8004514:	4a24      	ldr	r2, [pc, #144]	; (80045a8 <CDC_Control+0x19c>)
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	4413      	add	r3, r2
 800451a:	460a      	mov	r2, r1
 800451c:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 800451e:	e03b      	b.n	8004598 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	4a21      	ldr	r2, [pc, #132]	; (80045a8 <CDC_Control+0x19c>)
 8004524:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004528:	b2da      	uxtb	r2, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	4a1d      	ldr	r2, [pc, #116]	; (80045a8 <CDC_Control+0x19c>)
 8004532:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004536:	0a1a      	lsrs	r2, r3, #8
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	3301      	adds	r3, #1
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	4a19      	ldr	r2, [pc, #100]	; (80045a8 <CDC_Control+0x19c>)
 8004544:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004548:	0c1a      	lsrs	r2, r3, #16
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	3302      	adds	r3, #2
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	4a14      	ldr	r2, [pc, #80]	; (80045a8 <CDC_Control+0x19c>)
 8004556:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800455a:	0e1a      	lsrs	r2, r3, #24
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	3303      	adds	r3, #3
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	3204      	adds	r2, #4
 800456a:	490f      	ldr	r1, [pc, #60]	; (80045a8 <CDC_Control+0x19c>)
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	440b      	add	r3, r1
 8004570:	791b      	ldrb	r3, [r3, #4]
 8004572:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	3205      	adds	r2, #5
 800457a:	490b      	ldr	r1, [pc, #44]	; (80045a8 <CDC_Control+0x19c>)
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	440b      	add	r3, r1
 8004580:	795b      	ldrb	r3, [r3, #5]
 8004582:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	3206      	adds	r2, #6
 800458a:	4907      	ldr	r1, [pc, #28]	; (80045a8 <CDC_Control+0x19c>)
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	440b      	add	r3, r1
 8004590:	799b      	ldrb	r3, [r3, #6]
 8004592:	7013      	strb	r3, [r2, #0]
    break;
 8004594:	e000      	b.n	8004598 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8004596:	bf00      	nop
  }

  return (USBD_OK);
 8004598:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800459a:	4618      	mov	r0, r3
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	20000f48 	.word	0x20000f48

080045ac <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	b29a      	uxth	r2, r3
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 f825 	bl	8004614 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	4907      	ldr	r1, [pc, #28]	; (80045ec <CDC_Receive+0x40>)
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 fde3 	bl	800519c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	4904      	ldr	r1, [pc, #16]	; (80045ec <CDC_Receive+0x40>)
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fe3e 	bl	800525c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80045e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000b24 	.word	0x20000b24

080045f0 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	461a      	mov	r2, r3
 80045fc:	4603      	mov	r3, r0
 80045fe:	73fb      	strb	r3, [r7, #15]
 8004600:	4613      	mov	r3, r2
 8004602:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	71fb      	strb	r3, [r7, #7]
 8004620:	4613      	mov	r3, r2
 8004622:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004628:	2300      	movs	r3, #0
 800462a:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004632:	fb02 f303 	mul.w	r3, r2, r3
 8004636:	4a0e      	ldr	r2, [pc, #56]	; (8004670 <CDC_Transmit+0x5c>)
 8004638:	4413      	add	r3, r2
 800463a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 8004646:	2301      	movs	r3, #1
 8004648:	e00d      	b.n	8004666 <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 800464a:	88bb      	ldrh	r3, [r7, #4]
 800464c:	79f8      	ldrb	r0, [r7, #7]
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	4908      	ldr	r1, [pc, #32]	; (8004674 <CDC_Transmit+0x60>)
 8004652:	f000 fd7f 	bl	8005154 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	4906      	ldr	r1, [pc, #24]	; (8004674 <CDC_Transmit+0x60>)
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fdbc 	bl	80051d8 <USBD_CDC_TransmitPacket>
 8004660:	4603      	mov	r3, r0
 8004662:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8004664:	7bfb      	ldrb	r3, [r7, #15]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	2000915c 	.word	0x2000915c
 8004674:	20000b24 	.word	0x20000b24

08004678 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	6039      	str	r1, [r7, #0]
 8004682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2212      	movs	r2, #18
 8004688:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800468a:	4b03      	ldr	r3, [pc, #12]	; (8004698 <USBD_DeviceDescriptor+0x20>)
}
 800468c:	4618      	mov	r0, r3
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	2000003c 	.word	0x2000003c

0800469c <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	6039      	str	r1, [r7, #0]
 80046a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2204      	movs	r2, #4
 80046ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80046ae:	4b03      	ldr	r3, [pc, #12]	; (80046bc <USBD_LangIDStrDescriptor+0x20>)
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	20000050 	.word	0x20000050

080046c0 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	6039      	str	r1, [r7, #0]
 80046ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d105      	bne.n	80046de <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	4907      	ldr	r1, [pc, #28]	; (80046f4 <USBD_ProductStrDescriptor+0x34>)
 80046d6:	4808      	ldr	r0, [pc, #32]	; (80046f8 <USBD_ProductStrDescriptor+0x38>)
 80046d8:	f004 fc15 	bl	8008f06 <USBD_GetString>
 80046dc:	e004      	b.n	80046e8 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	4904      	ldr	r1, [pc, #16]	; (80046f4 <USBD_ProductStrDescriptor+0x34>)
 80046e2:	4805      	ldr	r0, [pc, #20]	; (80046f8 <USBD_ProductStrDescriptor+0x38>)
 80046e4:	f004 fc0f 	bl	8008f06 <USBD_GetString>
  }
  return USBD_StrDesc;
 80046e8:	4b02      	ldr	r3, [pc, #8]	; (80046f4 <USBD_ProductStrDescriptor+0x34>)
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000f50 	.word	0x20000f50
 80046f8:	08009f94 	.word	0x08009f94

080046fc <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	6039      	str	r1, [r7, #0]
 8004706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	4904      	ldr	r1, [pc, #16]	; (800471c <USBD_ManufacturerStrDescriptor+0x20>)
 800470c:	4804      	ldr	r0, [pc, #16]	; (8004720 <USBD_ManufacturerStrDescriptor+0x24>)
 800470e:	f004 fbfa 	bl	8008f06 <USBD_GetString>
  return USBD_StrDesc;
 8004712:	4b02      	ldr	r3, [pc, #8]	; (800471c <USBD_ManufacturerStrDescriptor+0x20>)
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000f50 	.word	0x20000f50
 8004720:	08009fac 	.word	0x08009fac

08004724 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	6039      	str	r1, [r7, #0]
 800472e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	221a      	movs	r2, #26
 8004734:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8004736:	f000 f843 	bl	80047c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800473a:	4b02      	ldr	r3, [pc, #8]	; (8004744 <USBD_SerialStrDescriptor+0x20>)
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20000054 	.word	0x20000054

08004748 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	6039      	str	r1, [r7, #0]
 8004752:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8004754:	79fb      	ldrb	r3, [r7, #7]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d105      	bne.n	8004766 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	4907      	ldr	r1, [pc, #28]	; (800477c <USBD_ConfigStrDescriptor+0x34>)
 800475e:	4808      	ldr	r0, [pc, #32]	; (8004780 <USBD_ConfigStrDescriptor+0x38>)
 8004760:	f004 fbd1 	bl	8008f06 <USBD_GetString>
 8004764:	e004      	b.n	8004770 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	4904      	ldr	r1, [pc, #16]	; (800477c <USBD_ConfigStrDescriptor+0x34>)
 800476a:	4805      	ldr	r0, [pc, #20]	; (8004780 <USBD_ConfigStrDescriptor+0x38>)
 800476c:	f004 fbcb 	bl	8008f06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004770:	4b02      	ldr	r3, [pc, #8]	; (800477c <USBD_ConfigStrDescriptor+0x34>)
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000f50 	.word	0x20000f50
 8004780:	08009fc0 	.word	0x08009fc0

08004784 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	6039      	str	r1, [r7, #0]
 800478e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d105      	bne.n	80047a2 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	4907      	ldr	r1, [pc, #28]	; (80047b8 <USBD_InterfaceStrDescriptor+0x34>)
 800479a:	4808      	ldr	r0, [pc, #32]	; (80047bc <USBD_InterfaceStrDescriptor+0x38>)
 800479c:	f004 fbb3 	bl	8008f06 <USBD_GetString>
 80047a0:	e004      	b.n	80047ac <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	4904      	ldr	r1, [pc, #16]	; (80047b8 <USBD_InterfaceStrDescriptor+0x34>)
 80047a6:	4805      	ldr	r0, [pc, #20]	; (80047bc <USBD_InterfaceStrDescriptor+0x38>)
 80047a8:	f004 fbad 	bl	8008f06 <USBD_GetString>
  }
  return USBD_StrDesc;
 80047ac:	4b02      	ldr	r3, [pc, #8]	; (80047b8 <USBD_InterfaceStrDescriptor+0x34>)
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000f50 	.word	0x20000f50
 80047bc:	08009fd0 	.word	0x08009fd0

080047c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80047c6:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <Get_SerialNum+0x44>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80047cc:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <Get_SerialNum+0x48>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80047d2:	4b0e      	ldr	r3, [pc, #56]	; (800480c <Get_SerialNum+0x4c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4413      	add	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80047e6:	2208      	movs	r2, #8
 80047e8:	4909      	ldr	r1, [pc, #36]	; (8004810 <Get_SerialNum+0x50>)
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 f814 	bl	8004818 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80047f0:	2204      	movs	r2, #4
 80047f2:	4908      	ldr	r1, [pc, #32]	; (8004814 <Get_SerialNum+0x54>)
 80047f4:	68b8      	ldr	r0, [r7, #8]
 80047f6:	f000 f80f 	bl	8004818 <IntToUnicode>
  }
}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	1fff7a10 	.word	0x1fff7a10
 8004808:	1fff7a14 	.word	0x1fff7a14
 800480c:	1fff7a18 	.word	0x1fff7a18
 8004810:	20000056 	.word	0x20000056
 8004814:	20000066 	.word	0x20000066

08004818 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	4613      	mov	r3, r2
 8004824:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800482a:	2300      	movs	r3, #0
 800482c:	75fb      	strb	r3, [r7, #23]
 800482e:	e027      	b.n	8004880 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	0f1b      	lsrs	r3, r3, #28
 8004834:	2b09      	cmp	r3, #9
 8004836:	d80b      	bhi.n	8004850 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	0f1b      	lsrs	r3, r3, #28
 800483c:	b2da      	uxtb	r2, r3
 800483e:	7dfb      	ldrb	r3, [r7, #23]
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	4619      	mov	r1, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	440b      	add	r3, r1
 8004848:	3230      	adds	r2, #48	; 0x30
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	e00a      	b.n	8004866 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	0f1b      	lsrs	r3, r3, #28
 8004854:	b2da      	uxtb	r2, r3
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	4619      	mov	r1, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	440b      	add	r3, r1
 8004860:	3237      	adds	r2, #55	; 0x37
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800486c:	7dfb      	ldrb	r3, [r7, #23]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	3301      	adds	r3, #1
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	4413      	add	r3, r2
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	3301      	adds	r3, #1
 800487e:	75fb      	strb	r3, [r7, #23]
 8004880:	7dfa      	ldrb	r2, [r7, #23]
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	429a      	cmp	r2, r3
 8004886:	d3d3      	bcc.n	8004830 <IntToUnicode+0x18>
  }
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 8004896:	b480      	push	{r7}
 8004898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800489a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800489c:	4618      	mov	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 80048a6:	b480      	push	{r7}
 80048a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80048aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t event_idx, uint8_t state)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	4603      	mov	r3, r0
 80048be:	460a      	mov	r2, r1
 80048c0:	71fb      	strb	r3, [r7, #7]
 80048c2:	4613      	mov	r3, r2
 80048c4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 80048c6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <STORAGE_Init>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init(uint8_t lun)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80048de:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <STORAGE_GetCapacity>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	22c8      	movs	r2, #200	; 0xc8
 80048fe:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004906:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8004908:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <STORAGE_IsReady>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady(uint8_t lun)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	4603      	mov	r3, r0
 800491e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8004920:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8004922:	4618      	mov	r0, r3
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <STORAGE_IsWriteProtected>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected(uint8_t lun)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	4603      	mov	r3, r0
 8004936:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8004938:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800493a:	4618      	mov	r0, r3
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <STORAGE_Read>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8004948:	b480      	push	{r7}
 800494a:	b089      	sub	sp, #36	; 0x24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	461a      	mov	r2, r3
 8004954:	4603      	mov	r3, r0
 8004956:	73fb      	strb	r3, [r7, #15]
 8004958:	4613      	mov	r3, r2
 800495a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

  uint32_t bytecount = blk_len*STORAGE_BLK_SIZ;
 800495c:	89bb      	ldrh	r3, [r7, #12]
 800495e:	025b      	lsls	r3, r3, #9
 8004960:	61bb      	str	r3, [r7, #24]
  uint32_t mem_address = blk_addr*STORAGE_BLK_SIZ;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	025b      	lsls	r3, r3, #9
 8004966:	617b      	str	r3, [r7, #20]

  for(uint32_t i=0; i<bytecount; i++)
 8004968:	2300      	movs	r3, #0
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	e00b      	b.n	8004986 <STORAGE_Read+0x3e>
      {
	  buf[i] = MSC_Storage[mem_address+i];
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	441a      	add	r2, r3
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	440b      	add	r3, r1
 800497a:	4908      	ldr	r1, [pc, #32]	; (800499c <STORAGE_Read+0x54>)
 800497c:	5c8a      	ldrb	r2, [r1, r2]
 800497e:	701a      	strb	r2, [r3, #0]
  for(uint32_t i=0; i<bytecount; i++)
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	3301      	adds	r3, #1
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	429a      	cmp	r2, r3
 800498c:	d3ef      	bcc.n	800496e <STORAGE_Read+0x26>
      }

  return (USBD_OK);
 800498e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8004990:	4618      	mov	r0, r3
 8004992:	3724      	adds	r7, #36	; 0x24
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	20001150 	.word	0x20001150

080049a0 <STORAGE_Write>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b089      	sub	sp, #36	; 0x24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	461a      	mov	r2, r3
 80049ac:	4603      	mov	r3, r0
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	4613      	mov	r3, r2
 80049b2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */

   uint32_t bytecount = blk_len*STORAGE_BLK_SIZ;
 80049b4:	89bb      	ldrh	r3, [r7, #12]
 80049b6:	025b      	lsls	r3, r3, #9
 80049b8:	61bb      	str	r3, [r7, #24]
   uint32_t mem_address = blk_addr*STORAGE_BLK_SIZ;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	025b      	lsls	r3, r3, #9
 80049be:	617b      	str	r3, [r7, #20]

    for(uint32_t i=0; i<bytecount; i++)
 80049c0:	2300      	movs	r3, #0
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	e00b      	b.n	80049de <STORAGE_Write+0x3e>
    {
	MSC_Storage[mem_address+i] = buf[i];
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	441a      	add	r2, r3
 80049cc:	6979      	ldr	r1, [r7, #20]
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	440b      	add	r3, r1
 80049d2:	7811      	ldrb	r1, [r2, #0]
 80049d4:	4a07      	ldr	r2, [pc, #28]	; (80049f4 <STORAGE_Write+0x54>)
 80049d6:	54d1      	strb	r1, [r2, r3]
    for(uint32_t i=0; i<bytecount; i++)
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	3301      	adds	r3, #1
 80049dc:	61fb      	str	r3, [r7, #28]
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d3ef      	bcc.n	80049c6 <STORAGE_Write+0x26>
    }

  return (USBD_OK);
 80049e6:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3724      	adds	r7, #36	; 0x24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	20001150 	.word	0x20001150

080049f8 <STORAGE_GetMaxLun>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80049fc:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	73fb      	strb	r3, [r7, #15]
 8004a1c:	e0c6      	b.n	8004bac <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004a24:	fb02 f303 	mul.w	r3, r2, r3
 8004a28:	4a65      	ldr	r2, [pc, #404]	; (8004bc0 <USBD_CDC_Init+0x1b8>)
 8004a2a:	4413      	add	r3, r2
 8004a2c:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	7c1b      	ldrb	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d13d      	bne.n	8004ab2 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	4a62      	ldr	r2, [pc, #392]	; (8004bc4 <USBD_CDC_Init+0x1bc>)
 8004a3a:	5cd1      	ldrb	r1, [r2, r3]
 8004a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a40:	2202      	movs	r2, #2
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f004 fcb7 	bl	80093b6 <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	4a5e      	ldr	r2, [pc, #376]	; (8004bc4 <USBD_CDC_Init+0x1bc>)
 8004a4c:	5cd3      	ldrb	r3, [r2, r3]
 8004a4e:	f003 020f 	and.w	r2, r3, #15
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	3324      	adds	r3, #36	; 0x24
 8004a60:	2201      	movs	r2, #1
 8004a62:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	4a58      	ldr	r2, [pc, #352]	; (8004bc8 <USBD_CDC_Init+0x1c0>)
 8004a68:	5cd1      	ldrb	r1, [r2, r3]
 8004a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a6e:	2202      	movs	r2, #2
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f004 fca0 	bl	80093b6 <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	4a53      	ldr	r2, [pc, #332]	; (8004bc8 <USBD_CDC_Init+0x1c0>)
 8004a7a:	5cd3      	ldrb	r3, [r2, r3]
 8004a7c:	f003 020f 	and.w	r2, r3, #15
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004a90:	2201      	movs	r2, #1
 8004a92:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	4a4d      	ldr	r2, [pc, #308]	; (8004bcc <USBD_CDC_Init+0x1c4>)
 8004a98:	5cd3      	ldrb	r3, [r2, r3]
 8004a9a:	f003 020f 	and.w	r2, r3, #15
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	3326      	adds	r3, #38	; 0x26
 8004aac:	2210      	movs	r2, #16
 8004aae:	801a      	strh	r2, [r3, #0]
 8004ab0:	e03a      	b.n	8004b28 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	4a43      	ldr	r2, [pc, #268]	; (8004bc4 <USBD_CDC_Init+0x1bc>)
 8004ab6:	5cd1      	ldrb	r1, [r2, r3]
 8004ab8:	2340      	movs	r3, #64	; 0x40
 8004aba:	2202      	movs	r2, #2
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f004 fc7a 	bl	80093b6 <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	4a3f      	ldr	r2, [pc, #252]	; (8004bc4 <USBD_CDC_Init+0x1bc>)
 8004ac6:	5cd3      	ldrb	r3, [r2, r3]
 8004ac8:	f003 020f 	and.w	r2, r3, #15
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	3324      	adds	r3, #36	; 0x24
 8004ada:	2201      	movs	r2, #1
 8004adc:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	4a39      	ldr	r2, [pc, #228]	; (8004bc8 <USBD_CDC_Init+0x1c0>)
 8004ae2:	5cd1      	ldrb	r1, [r2, r3]
 8004ae4:	2340      	movs	r3, #64	; 0x40
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f004 fc64 	bl	80093b6 <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	4a35      	ldr	r2, [pc, #212]	; (8004bc8 <USBD_CDC_Init+0x1c0>)
 8004af2:	5cd3      	ldrb	r3, [r2, r3]
 8004af4:	f003 020f 	and.w	r2, r3, #15
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	440b      	add	r3, r1
 8004b04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004b08:	2201      	movs	r2, #1
 8004b0a:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
 8004b0e:	4a2f      	ldr	r2, [pc, #188]	; (8004bcc <USBD_CDC_Init+0x1c4>)
 8004b10:	5cd3      	ldrb	r3, [r2, r3]
 8004b12:	f003 020f 	and.w	r2, r3, #15
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	3326      	adds	r3, #38	; 0x26
 8004b24:	2210      	movs	r2, #16
 8004b26:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	4a28      	ldr	r2, [pc, #160]	; (8004bcc <USBD_CDC_Init+0x1c4>)
 8004b2c:	5cd1      	ldrb	r1, [r2, r3]
 8004b2e:	2308      	movs	r3, #8
 8004b30:	2203      	movs	r2, #3
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f004 fc3f 	bl	80093b6 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
 8004b3a:	4a24      	ldr	r2, [pc, #144]	; (8004bcc <USBD_CDC_Init+0x1c4>)
 8004b3c:	5cd3      	ldrb	r3, [r2, r3]
 8004b3e:	f003 020f 	and.w	r2, r3, #15
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	3324      	adds	r3, #36	; 0x24
 8004b50:	2201      	movs	r2, #1
 8004b52:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	7bfa      	ldrb	r2, [r7, #15]
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	7c1b      	ldrb	r3, [r3, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10b      	bne.n	8004b92 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	4a12      	ldr	r2, [pc, #72]	; (8004bc8 <USBD_CDC_Init+0x1c0>)
 8004b7e:	5cd1      	ldrb	r1, [r2, r3]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f004 fd21 	bl	80095d2 <USBD_LL_PrepareReceive>
 8004b90:	e009      	b.n	8004ba6 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	4a0c      	ldr	r2, [pc, #48]	; (8004bc8 <USBD_CDC_Init+0x1c0>)
 8004b96:	5cd1      	ldrb	r1, [r2, r3]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b9e:	2340      	movs	r3, #64	; 0x40
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f004 fd16 	bl	80095d2 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f43f af35 	beq.w	8004a1e <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	2000915c 	.word	0x2000915c
 8004bc4:	20009154 	.word	0x20009154
 8004bc8:	20009150 	.word	0x20009150
 8004bcc:	20009380 	.word	0x20009380

08004bd0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004bdc:	2300      	movs	r3, #0
 8004bde:	73fb      	strb	r3, [r7, #15]
 8004be0:	e057      	b.n	8004c92 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	4a2f      	ldr	r2, [pc, #188]	; (8004ca4 <USBD_CDC_DeInit+0xd4>)
 8004be6:	5cd3      	ldrb	r3, [r2, r3]
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f004 fc09 	bl	8009402 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	4a2c      	ldr	r2, [pc, #176]	; (8004ca4 <USBD_CDC_DeInit+0xd4>)
 8004bf4:	5cd3      	ldrb	r3, [r2, r3]
 8004bf6:	f003 020f 	and.w	r2, r3, #15
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	3324      	adds	r3, #36	; 0x24
 8004c08:	2200      	movs	r2, #0
 8004c0a:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	4a26      	ldr	r2, [pc, #152]	; (8004ca8 <USBD_CDC_DeInit+0xd8>)
 8004c10:	5cd3      	ldrb	r3, [r2, r3]
 8004c12:	4619      	mov	r1, r3
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f004 fbf4 	bl	8009402 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	4a22      	ldr	r2, [pc, #136]	; (8004ca8 <USBD_CDC_DeInit+0xd8>)
 8004c1e:	5cd3      	ldrb	r3, [r2, r3]
 8004c20:	f003 020f 	and.w	r2, r3, #15
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004c34:	2200      	movs	r2, #0
 8004c36:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	4a1c      	ldr	r2, [pc, #112]	; (8004cac <USBD_CDC_DeInit+0xdc>)
 8004c3c:	5cd3      	ldrb	r3, [r2, r3]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f004 fbde 	bl	8009402 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	4a18      	ldr	r2, [pc, #96]	; (8004cac <USBD_CDC_DeInit+0xdc>)
 8004c4a:	5cd3      	ldrb	r3, [r2, r3]
 8004c4c:	f003 020f 	and.w	r2, r3, #15
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3324      	adds	r3, #36	; 0x24
 8004c5e:	2200      	movs	r2, #0
 8004c60:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	4a11      	ldr	r2, [pc, #68]	; (8004cac <USBD_CDC_DeInit+0xdc>)
 8004c66:	5cd3      	ldrb	r3, [r2, r3]
 8004c68:	f003 020f 	and.w	r2, r3, #15
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	3326      	adds	r3, #38	; 0x26
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	7bfa      	ldrb	r2, [r7, #15]
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	73fb      	strb	r3, [r7, #15]
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0a4      	beq.n	8004be2 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20009154 	.word	0x20009154
 8004ca8:	20009150 	.word	0x20009150
 8004cac:	20009380 	.word	0x20009380

08004cb0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004cb0:	b590      	push	{r4, r7, lr}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004cce:	2300      	movs	r3, #0
 8004cd0:	757b      	strb	r3, [r7, #21]
 8004cd2:	e015      	b.n	8004d00 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	889b      	ldrh	r3, [r3, #4]
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	7d7b      	ldrb	r3, [r7, #21]
 8004cdc:	496d      	ldr	r1, [pc, #436]	; (8004e94 <USBD_CDC_Setup+0x1e4>)
 8004cde:	5ccb      	ldrb	r3, [r1, r3]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d007      	beq.n	8004cf4 <USBD_CDC_Setup+0x44>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	889b      	ldrh	r3, [r3, #4]
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	7d7b      	ldrb	r3, [r7, #21]
 8004cec:	496a      	ldr	r1, [pc, #424]	; (8004e98 <USBD_CDC_Setup+0x1e8>)
 8004cee:	5ccb      	ldrb	r3, [r1, r3]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d102      	bne.n	8004cfa <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 8004cf4:	7d7b      	ldrb	r3, [r7, #21]
 8004cf6:	75bb      	strb	r3, [r7, #22]
      break;
 8004cf8:	e005      	b.n	8004d06 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004cfa:	7d7b      	ldrb	r3, [r7, #21]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	757b      	strb	r3, [r7, #21]
 8004d00:	7d7b      	ldrb	r3, [r7, #21]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0e6      	beq.n	8004cd4 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 8004d06:	7dbb      	ldrb	r3, [r7, #22]
 8004d08:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004d0c:	fb02 f303 	mul.w	r3, r2, r3
 8004d10:	4a62      	ldr	r2, [pc, #392]	; (8004e9c <USBD_CDC_Setup+0x1ec>)
 8004d12:	4413      	add	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d04a      	beq.n	8004db8 <USBD_CDC_Setup+0x108>
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	f040 80aa 	bne.w	8004e7c <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	88db      	ldrh	r3, [r3, #6]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d038      	beq.n	8004da2 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	b25b      	sxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	da1d      	bge.n	8004d76 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d40:	689c      	ldr	r4, [r3, #8]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	7859      	ldrb	r1, [r3, #1]
 8004d46:	7dbb      	ldrb	r3, [r7, #22]
 8004d48:	025b      	lsls	r3, r3, #9
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	441a      	add	r2, r3
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	88db      	ldrh	r3, [r3, #6]
 8004d52:	7db8      	ldrb	r0, [r7, #22]
 8004d54:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	88db      	ldrh	r3, [r3, #6]
 8004d5a:	2b07      	cmp	r3, #7
 8004d5c:	bf28      	it	cs
 8004d5e:	2307      	movcs	r3, #7
 8004d60:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 8004d62:	7dbb      	ldrb	r3, [r7, #22]
 8004d64:	025b      	lsls	r3, r3, #9
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4413      	add	r3, r2
 8004d6a:	89fa      	ldrh	r2, [r7, #14]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f004 f929 	bl	8008fc6 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8004d74:	e089      	b.n	8004e8a <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	785a      	ldrb	r2, [r3, #1]
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	88db      	ldrh	r3, [r3, #6]
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8004d8c:	7dbb      	ldrb	r3, [r7, #22]
 8004d8e:	025b      	lsls	r3, r3, #9
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	18d1      	adds	r1, r2, r3
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	88db      	ldrh	r3, [r3, #6]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f004 f93f 	bl	800901e <USBD_CtlPrepareRx>
    break;
 8004da0:	e073      	b.n	8004e8a <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004da8:	689c      	ldr	r4, [r3, #8]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	7859      	ldrb	r1, [r3, #1]
 8004dae:	7db8      	ldrb	r0, [r7, #22]
 8004db0:	2300      	movs	r3, #0
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	47a0      	blx	r4
    break;
 8004db6:	e068      	b.n	8004e8a <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	785b      	ldrb	r3, [r3, #1]
 8004dbc:	2b0b      	cmp	r3, #11
 8004dbe:	d852      	bhi.n	8004e66 <USBD_CDC_Setup+0x1b6>
 8004dc0:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <USBD_CDC_Setup+0x118>)
 8004dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc6:	bf00      	nop
 8004dc8:	08004df9 	.word	0x08004df9
 8004dcc:	08004e75 	.word	0x08004e75
 8004dd0:	08004e67 	.word	0x08004e67
 8004dd4:	08004e67 	.word	0x08004e67
 8004dd8:	08004e67 	.word	0x08004e67
 8004ddc:	08004e67 	.word	0x08004e67
 8004de0:	08004e67 	.word	0x08004e67
 8004de4:	08004e67 	.word	0x08004e67
 8004de8:	08004e67 	.word	0x08004e67
 8004dec:	08004e67 	.word	0x08004e67
 8004df0:	08004e23 	.word	0x08004e23
 8004df4:	08004e4d 	.word	0x08004e4d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d107      	bne.n	8004e14 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e04:	f107 030a 	add.w	r3, r7, #10
 8004e08:	2202      	movs	r2, #2
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f004 f8da 	bl	8008fc6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004e12:	e032      	b.n	8004e7a <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8004e14:	6839      	ldr	r1, [r7, #0]
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f004 f864 	bl	8008ee4 <USBD_CtlError>
        ret = USBD_FAIL;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e20:	e02b      	b.n	8004e7a <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d107      	bne.n	8004e3e <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004e2e:	f107 030d 	add.w	r3, r7, #13
 8004e32:	2201      	movs	r2, #1
 8004e34:	4619      	mov	r1, r3
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f004 f8c5 	bl	8008fc6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004e3c:	e01d      	b.n	8004e7a <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8004e3e:	6839      	ldr	r1, [r7, #0]
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f004 f84f 	bl	8008ee4 <USBD_CtlError>
        ret = USBD_FAIL;
 8004e46:	2303      	movs	r3, #3
 8004e48:	75fb      	strb	r3, [r7, #23]
      break;
 8004e4a:	e016      	b.n	8004e7a <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d00f      	beq.n	8004e78 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8004e58:	6839      	ldr	r1, [r7, #0]
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f004 f842 	bl	8008ee4 <USBD_CtlError>
        ret = USBD_FAIL;
 8004e60:	2303      	movs	r3, #3
 8004e62:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004e64:	e008      	b.n	8004e78 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004e66:	6839      	ldr	r1, [r7, #0]
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f004 f83b 	bl	8008ee4 <USBD_CtlError>
      ret = USBD_FAIL;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	75fb      	strb	r3, [r7, #23]
      break;
 8004e72:	e002      	b.n	8004e7a <USBD_CDC_Setup+0x1ca>
      break;
 8004e74:	bf00      	nop
 8004e76:	e008      	b.n	8004e8a <USBD_CDC_Setup+0x1da>
      break;
 8004e78:	bf00      	nop
    }
    break;
 8004e7a:	e006      	b.n	8004e8a <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f004 f830 	bl	8008ee4 <USBD_CtlError>
    ret = USBD_FAIL;
 8004e84:	2303      	movs	r3, #3
 8004e86:	75fb      	strb	r3, [r7, #23]
    break;
 8004e88:	bf00      	nop
  }

  return (uint8_t)ret;
 8004e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	371c      	adds	r7, #28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd90      	pop	{r4, r7, pc}
 8004e94:	20009158 	.word	0x20009158
 8004e98:	2000937c 	.word	0x2000937c
 8004e9c:	2000915c 	.word	0x2000915c

08004ea0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ea0:	b590      	push	{r4, r7, lr}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004eac:	2300      	movs	r3, #0
 8004eae:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8004eb6:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	75bb      	strb	r3, [r7, #22]
 8004ec0:	e00d      	b.n	8004ede <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	7dbb      	ldrb	r3, [r7, #22]
 8004ec6:	4934      	ldr	r1, [pc, #208]	; (8004f98 <USBD_CDC_DataIn+0xf8>)
 8004ec8:	5ccb      	ldrb	r3, [r1, r3]
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d102      	bne.n	8004ed8 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8004ed2:	7dbb      	ldrb	r3, [r7, #22]
 8004ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ed6:	e005      	b.n	8004ee4 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004ed8:	7dbb      	ldrb	r3, [r7, #22]
 8004eda:	3301      	adds	r3, #1
 8004edc:	75bb      	strb	r3, [r7, #22]
 8004ede:	7dbb      	ldrb	r3, [r7, #22]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0ee      	beq.n	8004ec2 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8004ee4:	7dfb      	ldrb	r3, [r7, #23]
 8004ee6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004eea:	fb02 f303 	mul.w	r3, r2, r3
 8004eee:	4a2b      	ldr	r2, [pc, #172]	; (8004f9c <USBD_CDC_DataIn+0xfc>)
 8004ef0:	4413      	add	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004ef4:	78fa      	ldrb	r2, [r7, #3]
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	3318      	adds	r3, #24
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d029      	beq.n	8004f5e <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004f0a:	78fa      	ldrb	r2, [r7, #3]
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	3318      	adds	r3, #24
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	78f9      	ldrb	r1, [r7, #3]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	460b      	mov	r3, r1
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	1a5b      	subs	r3, r3, r1
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4403      	add	r3, r0
 8004f2a:	3344      	adds	r3, #68	; 0x44
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004f32:	fb03 f301 	mul.w	r3, r3, r1
 8004f36:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d110      	bne.n	8004f5e <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004f3c:	78fa      	ldrb	r2, [r7, #3]
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	3318      	adds	r3, #24
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004f50:	78f9      	ldrb	r1, [r7, #3]
 8004f52:	2300      	movs	r3, #0
 8004f54:	2200      	movs	r2, #0
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f004 fb1a 	bl	8009590 <USBD_LL_Transmit>
 8004f5c:	e016      	b.n	8004f8c <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00c      	beq.n	8004f8c <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f78:	691c      	ldr	r4, [r3, #16]
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004f86:	78fb      	ldrb	r3, [r7, #3]
 8004f88:	7df8      	ldrb	r0, [r7, #23]
 8004f8a:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd90      	pop	{r4, r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20009154 	.word	0x20009154
 8004f9c:	2000915c 	.word	0x2000915c

08004fa0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	73bb      	strb	r3, [r7, #14]
 8004fb8:	e00b      	b.n	8004fd2 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8004fba:	7bbb      	ldrb	r3, [r7, #14]
 8004fbc:	4a17      	ldr	r2, [pc, #92]	; (800501c <USBD_CDC_DataOut+0x7c>)
 8004fbe:	5cd3      	ldrb	r3, [r2, r3]
 8004fc0:	78fa      	ldrb	r2, [r7, #3]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d102      	bne.n	8004fcc <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8004fc6:	7bbb      	ldrb	r3, [r7, #14]
 8004fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8004fca:	e005      	b.n	8004fd8 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004fcc:	7bbb      	ldrb	r3, [r7, #14]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	73bb      	strb	r3, [r7, #14]
 8004fd2:	7bbb      	ldrb	r3, [r7, #14]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f0      	beq.n	8004fba <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004fde:	fb02 f303 	mul.w	r3, r2, r3
 8004fe2:	4a0f      	ldr	r2, [pc, #60]	; (8005020 <USBD_CDC_DataOut+0x80>)
 8004fe4:	4413      	add	r3, r2
 8004fe6:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	4619      	mov	r1, r3
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f004 fb11 	bl	8009614 <USBD_LL_GetRxDataSize>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800500e:	7bf8      	ldrb	r0, [r7, #15]
 8005010:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20009150 	.word	0x20009150
 8005020:	2000915c 	.word	0x2000915c

08005024 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005024:	b590      	push	{r4, r7, lr}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800502c:	2300      	movs	r3, #0
 800502e:	60bb      	str	r3, [r7, #8]

  if (hcdc == NULL)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <USBD_CDC_EP0_RxReady+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8005036:	2303      	movs	r3, #3
 8005038:	e030      	b.n	800509c <USBD_CDC_EP0_RxReady+0x78>
  }

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800503a:	2300      	movs	r3, #0
 800503c:	73fb      	strb	r3, [r7, #15]
 800503e:	e029      	b.n	8005094 <USBD_CDC_EP0_RxReady+0x70>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005046:	fb02 f303 	mul.w	r3, r2, r3
 800504a:	4a16      	ldr	r2, [pc, #88]	; (80050a4 <USBD_CDC_EP0_RxReady+0x80>)
 800504c:	4413      	add	r3, r2
 800504e:	60bb      	str	r3, [r7, #8]

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005056:	2b00      	cmp	r3, #0
 8005058:	d019      	beq.n	800508e <USBD_CDC_EP0_RxReady+0x6a>
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005060:	2bff      	cmp	r3, #255	; 0xff
 8005062:	d014      	beq.n	800508e <USBD_CDC_EP0_RxReady+0x6a>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800506a:	689c      	ldr	r4, [r3, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	025b      	lsls	r3, r3, #9
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	441a      	add	r2, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005080:	b29b      	uxth	r3, r3
 8005082:	7bf8      	ldrb	r0, [r7, #15]
 8005084:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	22ff      	movs	r2, #255	; 0xff
 800508a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	3301      	adds	r3, #1
 8005092:	73fb      	strb	r3, [r7, #15]
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0d2      	beq.n	8005040 <USBD_CDC_EP0_RxReady+0x1c>
    }
  }

  return (uint8_t)USBD_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd90      	pop	{r4, r7, pc}
 80050a4:	2000915c 	.word	0x2000915c

080050a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	224b      	movs	r2, #75	; 0x4b
 80050b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80050b6:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	20000158 	.word	0x20000158

080050c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	224b      	movs	r2, #75	; 0x4b
 80050d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80050d6:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	2000010c 	.word	0x2000010c

080050e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	224b      	movs	r2, #75	; 0x4b
 80050f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80050f6:	4b03      	ldr	r3, [pc, #12]	; (8005104 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	20000158 	.word	0x20000158

08005108 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	220a      	movs	r2, #10
 8005114:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005116:	4b03      	ldr	r3, [pc, #12]	; (8005124 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	200000c4 	.word	0x200000c4

08005128 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005138:	2303      	movs	r3, #3
 800513a:	e004      	b.n	8005146 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
	...

08005154 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4603      	mov	r3, r0
 8005162:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800516e:	fb02 f303 	mul.w	r3, r2, r3
 8005172:	4a09      	ldr	r2, [pc, #36]	; (8005198 <USBD_CDC_SetTxBuffer+0x44>)
 8005174:	4413      	add	r3, r2
 8005176:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	2000915c 	.word	0x2000915c

0800519c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80051b4:	fb02 f303 	mul.w	r3, r2, r3
 80051b8:	4a06      	ldr	r2, [pc, #24]	; (80051d4 <USBD_CDC_SetRxBuffer+0x38>)
 80051ba:	4413      	add	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	2000915c 	.word	0x2000915c

080051d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	6039      	str	r1, [r7, #0]
 80051e2:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80051e8:	2301      	movs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 80051ec:	79fb      	ldrb	r3, [r7, #7]
 80051ee:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	4a17      	ldr	r2, [pc, #92]	; (8005254 <USBD_CDC_TransmitPacket+0x7c>)
 80051f8:	4413      	add	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005202:	2b00      	cmp	r3, #0
 8005204:	d121      	bne.n	800524a <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2201      	movs	r2, #1
 800520a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	4a11      	ldr	r2, [pc, #68]	; (8005258 <USBD_CDC_TransmitPacket+0x80>)
 8005212:	5cd3      	ldrb	r3, [r2, r3]
 8005214:	f003 020f 	and.w	r2, r3, #15
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800521e:	6838      	ldr	r0, [r7, #0]
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4403      	add	r3, r0
 800522a:	3318      	adds	r3, #24
 800522c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	4a09      	ldr	r2, [pc, #36]	; (8005258 <USBD_CDC_TransmitPacket+0x80>)
 8005232:	5cd1      	ldrb	r1, [r2, r3]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005240:	6838      	ldr	r0, [r7, #0]
 8005242:	f004 f9a5 	bl	8009590 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800524a:	7bfb      	ldrb	r3, [r7, #15]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	2000915c 	.word	0x2000915c
 8005258:	20009154 	.word	0x20009154

0800525c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	6039      	str	r1, [r7, #0]
 8005266:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 800526c:	79fb      	ldrb	r3, [r7, #7]
 800526e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005272:	fb02 f303 	mul.w	r3, r2, r3
 8005276:	4a11      	ldr	r2, [pc, #68]	; (80052bc <USBD_CDC_ReceivePacket+0x60>)
 8005278:	4413      	add	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	7c1b      	ldrb	r3, [r3, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10b      	bne.n	800529c <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	4a0e      	ldr	r2, [pc, #56]	; (80052c0 <USBD_CDC_ReceivePacket+0x64>)
 8005288:	5cd1      	ldrb	r1, [r2, r3]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005294:	6838      	ldr	r0, [r7, #0]
 8005296:	f004 f99c 	bl	80095d2 <USBD_LL_PrepareReceive>
 800529a:	e009      	b.n	80052b0 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	4a08      	ldr	r2, [pc, #32]	; (80052c0 <USBD_CDC_ReceivePacket+0x64>)
 80052a0:	5cd1      	ldrb	r1, [r2, r3]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052a8:	2340      	movs	r3, #64	; 0x40
 80052aa:	6838      	ldr	r0, [r7, #0]
 80052ac:	f004 f991 	bl	80095d2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	2000915c 	.word	0x2000915c
 80052c0:	20009150 	.word	0x20009150

080052c4 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	4608      	mov	r0, r1
 80052ce:	4611      	mov	r1, r2
 80052d0:	461a      	mov	r2, r3
 80052d2:	4603      	mov	r3, r0
 80052d4:	70fb      	strb	r3, [r7, #3]
 80052d6:	460b      	mov	r3, r1
 80052d8:	70bb      	strb	r3, [r7, #2]
 80052da:	4613      	mov	r3, r2
 80052dc:	707b      	strb	r3, [r7, #1]
  desc += 9;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3309      	adds	r3, #9
 80052e2:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80052e4:	2300      	movs	r3, #0
 80052e6:	73fb      	strb	r3, [r7, #15]
 80052e8:	e05b      	b.n	80053a2 <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3302      	adds	r3, #2
 80052ee:	78fa      	ldrb	r2, [r7, #3]
 80052f0:	701a      	strb	r2, [r3, #0]
    desc[7] = str_idx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3307      	adds	r3, #7
 80052f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80052fa:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	330a      	adds	r3, #10
 8005300:	78fa      	ldrb	r2, [r7, #3]
 8005302:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	331a      	adds	r3, #26
 8005308:	78ba      	ldrb	r2, [r7, #2]
 800530a:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3322      	adds	r3, #34	; 0x22
 8005310:	78fa      	ldrb	r2, [r7, #3]
 8005312:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3323      	adds	r3, #35	; 0x23
 8005318:	78ba      	ldrb	r2, [r7, #2]
 800531a:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3326      	adds	r3, #38	; 0x26
 8005320:	7e3a      	ldrb	r2, [r7, #24]
 8005322:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	332d      	adds	r3, #45	; 0x2d
 8005328:	78ba      	ldrb	r2, [r7, #2]
 800532a:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3336      	adds	r3, #54	; 0x36
 8005330:	7f3a      	ldrb	r2, [r7, #28]
 8005332:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	333d      	adds	r3, #61	; 0x3d
 8005338:	787a      	ldrb	r2, [r7, #1]
 800533a:	701a      	strb	r2, [r3, #0]

    desc += 66;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3342      	adds	r3, #66	; 0x42
 8005340:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 8005342:	7bfb      	ldrb	r3, [r7, #15]
 8005344:	491c      	ldr	r1, [pc, #112]	; (80053b8 <USBD_Update_CDC_ACM_DESC+0xf4>)
 8005346:	787a      	ldrb	r2, [r7, #1]
 8005348:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	491b      	ldr	r1, [pc, #108]	; (80053bc <USBD_Update_CDC_ACM_DESC+0xf8>)
 800534e:	7f3a      	ldrb	r2, [r7, #28]
 8005350:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	491a      	ldr	r1, [pc, #104]	; (80053c0 <USBD_Update_CDC_ACM_DESC+0xfc>)
 8005356:	7e3a      	ldrb	r2, [r7, #24]
 8005358:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	4919      	ldr	r1, [pc, #100]	; (80053c4 <USBD_Update_CDC_ACM_DESC+0x100>)
 800535e:	78fa      	ldrb	r2, [r7, #3]
 8005360:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	4918      	ldr	r1, [pc, #96]	; (80053c8 <USBD_Update_CDC_ACM_DESC+0x104>)
 8005366:	78ba      	ldrb	r2, [r7, #2]
 8005368:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 800536a:	7bfb      	ldrb	r3, [r7, #15]
 800536c:	4917      	ldr	r1, [pc, #92]	; (80053cc <USBD_Update_CDC_ACM_DESC+0x108>)
 800536e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005372:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8005374:	787b      	ldrb	r3, [r7, #1]
 8005376:	3302      	adds	r3, #2
 8005378:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 800537a:	787b      	ldrb	r3, [r7, #1]
 800537c:	3301      	adds	r3, #1
 800537e:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8005380:	7f3b      	ldrb	r3, [r7, #28]
 8005382:	3301      	adds	r3, #1
 8005384:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8005386:	f897 3020 	ldrb.w	r3, [r7, #32]
 800538a:	3301      	adds	r3, #1
 800538c:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	3302      	adds	r3, #2
 8005394:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8005396:	78fb      	ldrb	r3, [r7, #3]
 8005398:	3301      	adds	r3, #1
 800539a:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	3301      	adds	r3, #1
 80053a0:	73fb      	strb	r3, [r7, #15]
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0a0      	beq.n	80052ea <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	20009154 	.word	0x20009154
 80053bc:	20009150 	.word	0x20009150
 80053c0:	20009380 	.word	0x20009380
 80053c4:	20009158 	.word	0x20009158
 80053c8:	2000937c 	.word	0x2000937c
 80053cc:	20009378 	.word	0x20009378

080053d0 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 80053dc:	4b0b      	ldr	r3, [pc, #44]	; (800540c <USBD_COMPOSITE_Init+0x3c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	78fa      	ldrb	r2, [r7, #3]
 80053e2:	4611      	mov	r1, r2
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 80053e8:	4b09      	ldr	r3, [pc, #36]	; (8005410 <USBD_COMPOSITE_Init+0x40>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	78fa      	ldrb	r2, [r7, #3]
 80053ee:	4611      	mov	r1, r2
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	4798      	blx	r3
#endif
#if (USBD_USE_UVC == 1)
  USBD_VIDEO.Init(pdev, cfgidx);
#endif
#if (USBD_USE_MSC == 1)
  USBD_MSC.Init(pdev, cfgidx);
 80053f4:	4b07      	ldr	r3, [pc, #28]	; (8005414 <USBD_COMPOSITE_Init+0x44>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	78fa      	ldrb	r2, [r7, #3]
 80053fa:	4611      	mov	r1, r2
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	200000d0 	.word	0x200000d0
 8005410:	200001f0 	.word	0x200001f0
 8005414:	200002c8 	.word	0x200002c8

08005418 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <USBD_COMPOSITE_DeInit+0x3c>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	78fa      	ldrb	r2, [r7, #3]
 800542a:	4611      	mov	r1, r2
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 8005430:	4b09      	ldr	r3, [pc, #36]	; (8005458 <USBD_COMPOSITE_DeInit+0x40>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	78fa      	ldrb	r2, [r7, #3]
 8005436:	4611      	mov	r1, r2
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4798      	blx	r3
#endif
#if (USBD_USE_UVC == 1)
  USBD_VIDEO.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_MSC == 1)
  USBD_MSC.DeInit(pdev, cfgidx);
 800543c:	4b07      	ldr	r3, [pc, #28]	; (800545c <USBD_COMPOSITE_DeInit+0x44>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	78fa      	ldrb	r2, [r7, #3]
 8005442:	4611      	mov	r1, r2
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	200000d0 	.word	0x200000d0
 8005458:	200001f0 	.word	0x200001f0
 800545c:	200002c8 	.word	0x200002c8

08005460 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800546a:	2300      	movs	r3, #0
 800546c:	73fb      	strb	r3, [r7, #15]
 800546e:	e019      	b.n	80054a4 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	889b      	ldrh	r3, [r3, #4]
 8005474:	b2da      	uxtb	r2, r3
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	491c      	ldr	r1, [pc, #112]	; (80054ec <USBD_COMPOSITE_Setup+0x8c>)
 800547a:	5ccb      	ldrb	r3, [r1, r3]
 800547c:	429a      	cmp	r2, r3
 800547e:	d007      	beq.n	8005490 <USBD_COMPOSITE_Setup+0x30>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	889b      	ldrh	r3, [r3, #4]
 8005484:	b2da      	uxtb	r2, r3
 8005486:	7bfb      	ldrb	r3, [r7, #15]
 8005488:	4919      	ldr	r1, [pc, #100]	; (80054f0 <USBD_COMPOSITE_Setup+0x90>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	429a      	cmp	r2, r3
 800548e:	d106      	bne.n	800549e <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8005490:	4b18      	ldr	r3, [pc, #96]	; (80054f4 <USBD_COMPOSITE_Setup+0x94>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	6839      	ldr	r1, [r7, #0]
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	4798      	blx	r3
 800549a:	4603      	mov	r3, r0
 800549c:	e022      	b.n	80054e4 <USBD_COMPOSITE_Setup+0x84>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	3301      	adds	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0e2      	beq.n	8005470 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	889b      	ldrh	r3, [r3, #4]
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	4b11      	ldr	r3, [pc, #68]	; (80054f8 <USBD_COMPOSITE_Setup+0x98>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d106      	bne.n	80054c6 <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 80054b8:	4b10      	ldr	r3, [pc, #64]	; (80054fc <USBD_COMPOSITE_Setup+0x9c>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	4798      	blx	r3
 80054c2:	4603      	mov	r3, r0
 80054c4:	e00e      	b.n	80054e4 <USBD_COMPOSITE_Setup+0x84>
  {
    return USBD_VIDEO.Setup(pdev, req);
  }
#endif
#if (USBD_USE_MSC == 1)
  if (LOBYTE(req->wIndex) == MSC_ITF_NBR)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	889b      	ldrh	r3, [r3, #4]
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	4b0c      	ldr	r3, [pc, #48]	; (8005500 <USBD_COMPOSITE_Setup+0xa0>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d106      	bne.n	80054e2 <USBD_COMPOSITE_Setup+0x82>
  {
    return USBD_MSC.Setup(pdev, req);
 80054d4:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <USBD_COMPOSITE_Setup+0xa4>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	4798      	blx	r3
 80054de:	4603      	mov	r3, r0
 80054e0:	e000      	b.n	80054e4 <USBD_COMPOSITE_Setup+0x84>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 80054e2:	2303      	movs	r3, #3
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20009158 	.word	0x20009158
 80054f0:	2000937c 	.word	0x2000937c
 80054f4:	200000d0 	.word	0x200000d0
 80054f8:	20000478 	.word	0x20000478
 80054fc:	200001f0 	.word	0x200001f0
 8005500:	20000494 	.word	0x20000494
 8005504:	200002c8 	.word	0x200002c8

08005508 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005514:	2300      	movs	r3, #0
 8005516:	73fb      	strb	r3, [r7, #15]
 8005518:	e01a      	b.n	8005550 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800551a:	78fa      	ldrb	r2, [r7, #3]
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	491f      	ldr	r1, [pc, #124]	; (800559c <USBD_COMPOSITE_DataIn+0x94>)
 8005520:	5ccb      	ldrb	r3, [r1, r3]
 8005522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005526:	429a      	cmp	r2, r3
 8005528:	d007      	beq.n	800553a <USBD_COMPOSITE_DataIn+0x32>
 800552a:	78fa      	ldrb	r2, [r7, #3]
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	491c      	ldr	r1, [pc, #112]	; (80055a0 <USBD_COMPOSITE_DataIn+0x98>)
 8005530:	5ccb      	ldrb	r3, [r1, r3]
 8005532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005536:	429a      	cmp	r2, r3
 8005538:	d107      	bne.n	800554a <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800553a:	4b1a      	ldr	r3, [pc, #104]	; (80055a4 <USBD_COMPOSITE_DataIn+0x9c>)
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	78fa      	ldrb	r2, [r7, #3]
 8005540:	4611      	mov	r1, r2
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
 8005546:	4603      	mov	r3, r0
 8005548:	e024      	b.n	8005594 <USBD_COMPOSITE_DataIn+0x8c>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	3301      	adds	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0e1      	beq.n	800551a <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	4b13      	ldr	r3, [pc, #76]	; (80055a8 <USBD_COMPOSITE_DataIn+0xa0>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005560:	429a      	cmp	r2, r3
 8005562:	d107      	bne.n	8005574 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 8005564:	4b11      	ldr	r3, [pc, #68]	; (80055ac <USBD_COMPOSITE_DataIn+0xa4>)
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	78fa      	ldrb	r2, [r7, #3]
 800556a:	4611      	mov	r1, r2
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	4798      	blx	r3
 8005570:	4603      	mov	r3, r0
 8005572:	e00f      	b.n	8005594 <USBD_COMPOSITE_DataIn+0x8c>
  {
    return USBD_VIDEO.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_MSC == 1)
  if (epnum == (MSC_IN_EP & 0x7F))
 8005574:	78fa      	ldrb	r2, [r7, #3]
 8005576:	4b0e      	ldr	r3, [pc, #56]	; (80055b0 <USBD_COMPOSITE_DataIn+0xa8>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800557e:	429a      	cmp	r2, r3
 8005580:	d107      	bne.n	8005592 <USBD_COMPOSITE_DataIn+0x8a>
  {
    return USBD_MSC.DataIn(pdev, epnum);
 8005582:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <USBD_COMPOSITE_DataIn+0xac>)
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	78fa      	ldrb	r2, [r7, #3]
 8005588:	4611      	mov	r1, r2
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	4798      	blx	r3
 800558e:	4603      	mov	r3, r0
 8005590:	e000      	b.n	8005594 <USBD_COMPOSITE_DataIn+0x8c>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8005592:	2303      	movs	r3, #3
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20009154 	.word	0x20009154
 80055a0:	20009380 	.word	0x20009380
 80055a4:	200000d0 	.word	0x200000d0
 80055a8:	200001ee 	.word	0x200001ee
 80055ac:	200001f0 	.word	0x200001f0
 80055b0:	200002c6 	.word	0x200002c6
 80055b4:	200002c8 	.word	0x200002c8

080055b8 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 80055c0:	4b06      	ldr	r3, [pc, #24]	; (80055dc <USBD_COMPOSITE_EP0_RxReady+0x24>)
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 80055c8:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <USBD_COMPOSITE_EP0_RxReady+0x28>)
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	200000d0 	.word	0x200000d0
 80055e0:	200001f0 	.word	0x200001f0

080055e4 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	460b      	mov	r3, r1
 8005634:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005650:	2300      	movs	r3, #0
 8005652:	73fb      	strb	r3, [r7, #15]
 8005654:	e010      	b.n	8005678 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	4a18      	ldr	r2, [pc, #96]	; (80056bc <USBD_COMPOSITE_DataOut+0x78>)
 800565a:	5cd3      	ldrb	r3, [r2, r3]
 800565c:	78fa      	ldrb	r2, [r7, #3]
 800565e:	429a      	cmp	r2, r3
 8005660:	d107      	bne.n	8005672 <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8005662:	4b17      	ldr	r3, [pc, #92]	; (80056c0 <USBD_COMPOSITE_DataOut+0x7c>)
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	78fa      	ldrb	r2, [r7, #3]
 8005668:	4611      	mov	r1, r2
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	4798      	blx	r3
 800566e:	4603      	mov	r3, r0
 8005670:	e020      	b.n	80056b4 <USBD_COMPOSITE_DataOut+0x70>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	3301      	adds	r3, #1
 8005676:	73fb      	strb	r3, [r7, #15]
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0eb      	beq.n	8005656 <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 800567e:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <USBD_COMPOSITE_DataOut+0x80>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	429a      	cmp	r2, r3
 8005686:	d107      	bne.n	8005698 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 8005688:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <USBD_COMPOSITE_DataOut+0x84>)
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	78fa      	ldrb	r2, [r7, #3]
 800568e:	4611      	mov	r1, r2
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	4798      	blx	r3
 8005694:	4603      	mov	r3, r0
 8005696:	e00d      	b.n	80056b4 <USBD_COMPOSITE_DataOut+0x70>
  }
#endif
#if (USBD_USE_UVC == 1)
#endif
#if (USBD_USE_MSC == 1)
  if (epnum == MSC_OUT_EP)
 8005698:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <USBD_COMPOSITE_DataOut+0x88>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	78fa      	ldrb	r2, [r7, #3]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d107      	bne.n	80056b2 <USBD_COMPOSITE_DataOut+0x6e>
  {
    return USBD_MSC.DataOut(pdev, epnum);
 80056a2:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <USBD_COMPOSITE_DataOut+0x8c>)
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	78fa      	ldrb	r2, [r7, #3]
 80056a8:	4611      	mov	r1, r2
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	4798      	blx	r3
 80056ae:	4603      	mov	r3, r0
 80056b0:	e000      	b.n	80056b4 <USBD_COMPOSITE_DataOut+0x70>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 80056b2:	2303      	movs	r3, #3
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	20009150 	.word	0x20009150
 80056c0:	200000d0 	.word	0x200000d0
 80056c4:	200001ef 	.word	0x200001ef
 80056c8:	200001f0 	.word	0x200001f0
 80056cc:	200002c7 	.word	0x200002c7
 80056d0:	200002c8 	.word	0x200002c8

080056d4 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2282      	movs	r2, #130	; 0x82
 80056e0:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 80056e2:	4b03      	ldr	r3, [pc, #12]	; (80056f0 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	20009384 	.word	0x20009384

080056f4 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2282      	movs	r2, #130	; 0x82
 8005700:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 8005702:	4b03      	ldr	r3, [pc, #12]	; (8005710 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	20009408 	.word	0x20009408

08005714 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2282      	movs	r2, #130	; 0x82
 8005720:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8005722:	4b03      	ldr	r3, [pc, #12]	; (8005730 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	20009384 	.word	0x20009384

08005734 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	220a      	movs	r2, #10
 8005740:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8005742:	4b03      	ldr	r3, [pc, #12]	; (8005750 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	200001e4 	.word	0x200001e4

08005754 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08a      	sub	sp, #40	; 0x28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	460b      	mov	r3, r1
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8005762:	4b25      	ldr	r3, [pc, #148]	; (80057f8 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	7afa      	ldrb	r2, [r7, #11]
 8005768:	429a      	cmp	r2, r3
 800576a:	d840      	bhi.n	80057ee <USBD_COMPOSITE_GetUsrStringDesc+0x9a>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	f107 0318 	add.w	r3, r7, #24
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	605a      	str	r2, [r3, #4]
 800577a:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800577c:	2300      	movs	r3, #0
 800577e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005782:	e01a      	b.n	80057ba <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8005784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005788:	4a1c      	ldr	r2, [pc, #112]	; (80057fc <USBD_COMPOSITE_GetUsrStringDesc+0xa8>)
 800578a:	5cd3      	ldrb	r3, [r2, r3]
 800578c:	7afa      	ldrb	r2, [r7, #11]
 800578e:	429a      	cmp	r2, r3
 8005790:	d10e      	bne.n	80057b0 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8005792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005796:	f107 0014 	add.w	r0, r7, #20
 800579a:	4a19      	ldr	r2, [pc, #100]	; (8005800 <USBD_COMPOSITE_GetUsrStringDesc+0xac>)
 800579c:	2110      	movs	r1, #16
 800579e:	f003 ffb9 	bl	8009714 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 80057a2:	f107 0314 	add.w	r3, r7, #20
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	4916      	ldr	r1, [pc, #88]	; (8005804 <USBD_COMPOSITE_GetUsrStringDesc+0xb0>)
 80057aa:	4618      	mov	r0, r3
 80057ac:	f003 fbab 	bl	8008f06 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80057b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057b4:	3301      	adds	r3, #1
 80057b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80057ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0e0      	beq.n	8005784 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 80057c2:	4b11      	ldr	r3, [pc, #68]	; (8005808 <USBD_COMPOSITE_GetUsrStringDesc+0xb4>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	7afa      	ldrb	r2, [r7, #11]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d104      	bne.n	80057d6 <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	490d      	ldr	r1, [pc, #52]	; (8005804 <USBD_COMPOSITE_GetUsrStringDesc+0xb0>)
 80057d0:	480e      	ldr	r0, [pc, #56]	; (800580c <USBD_COMPOSITE_GetUsrStringDesc+0xb8>)
 80057d2:	f003 fb98 	bl	8008f06 <USBD_GetString>
    {
      USBD_GetString((uint8_t *)UVC_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_MSC == 1)
    if (index == MSC_BOT_STR_DESC_IDX)
 80057d6:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <USBD_COMPOSITE_GetUsrStringDesc+0xbc>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	7afa      	ldrb	r2, [r7, #11]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d104      	bne.n	80057ea <USBD_COMPOSITE_GetUsrStringDesc+0x96>
    {
      USBD_GetString((uint8_t *)MSC_BOT_STR_DESC, USBD_StrDesc, length);
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	4908      	ldr	r1, [pc, #32]	; (8005804 <USBD_COMPOSITE_GetUsrStringDesc+0xb0>)
 80057e4:	480b      	ldr	r0, [pc, #44]	; (8005814 <USBD_COMPOSITE_GetUsrStringDesc+0xc0>)
 80057e6:	f003 fb8e 	bl	8008f06 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 80057ea:	4b06      	ldr	r3, [pc, #24]	; (8005804 <USBD_COMPOSITE_GetUsrStringDesc+0xb0>)
 80057ec:	e000      	b.n	80057f0 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80057ee:	2300      	movs	r3, #0
  }
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3728      	adds	r7, #40	; 0x28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	200001e0 	.word	0x200001e0
 80057fc:	20009378 	.word	0x20009378
 8005800:	08009fe4 	.word	0x08009fe4
 8005804:	20000438 	.word	0x20000438
 8005808:	20000479 	.word	0x20000479
 800580c:	08009ff4 	.word	0x08009ff4
 8005810:	20000495 	.word	0x20000495
 8005814:	0800a008 	.word	0x0800a008

08005818 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8005818:	b590      	push	{r4, r7, lr}
 800581a:	b089      	sub	sp, #36	; 0x24
 800581c:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 800581e:	2300      	movs	r3, #0
 8005820:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 8005826:	2381      	movs	r3, #129	; 0x81
 8005828:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 800582a:	2301      	movs	r3, #1
 800582c:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 800582e:	2300      	movs	r3, #0
 8005830:	727b      	strb	r3, [r7, #9]

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8005832:	4b93      	ldr	r3, [pc, #588]	; (8005a80 <USBD_COMPOSITE_Mount_Class+0x268>)
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	1d3a      	adds	r2, r7, #4
 8005838:	4610      	mov	r0, r2
 800583a:	4798      	blx	r3
 800583c:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800583e:	7a7b      	ldrb	r3, [r7, #9]
 8005840:	3301      	adds	r3, #1
 8005842:	b2d8      	uxtb	r0, r3
 8005844:	7afb      	ldrb	r3, [r7, #11]
 8005846:	3301      	adds	r3, #1
 8005848:	b2db      	uxtb	r3, r3
 800584a:	4a8e      	ldr	r2, [pc, #568]	; (8005a84 <USBD_COMPOSITE_Mount_Class+0x26c>)
 800584c:	7812      	ldrb	r2, [r2, #0]
 800584e:	7afc      	ldrb	r4, [r7, #11]
 8005850:	7a79      	ldrb	r1, [r7, #9]
 8005852:	9202      	str	r2, [sp, #8]
 8005854:	7aba      	ldrb	r2, [r7, #10]
 8005856:	9201      	str	r2, [sp, #4]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	4623      	mov	r3, r4
 800585c:	4602      	mov	r2, r0
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f7ff fd30 	bl	80052c4 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3309      	adds	r3, #9
 8005868:	88ba      	ldrh	r2, [r7, #4]
 800586a:	3a09      	subs	r2, #9
 800586c:	4619      	mov	r1, r3
 800586e:	4886      	ldr	r0, [pc, #536]	; (8005a88 <USBD_COMPOSITE_Mount_Class+0x270>)
 8005870:	f003 ff3a 	bl	80096e8 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8005874:	4b82      	ldr	r3, [pc, #520]	; (8005a80 <USBD_COMPOSITE_Mount_Class+0x268>)
 8005876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005878:	1d3a      	adds	r2, r7, #4
 800587a:	4610      	mov	r0, r2
 800587c:	4798      	blx	r3
 800587e:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8005880:	7a7b      	ldrb	r3, [r7, #9]
 8005882:	3301      	adds	r3, #1
 8005884:	b2d8      	uxtb	r0, r3
 8005886:	7afb      	ldrb	r3, [r7, #11]
 8005888:	3301      	adds	r3, #1
 800588a:	b2db      	uxtb	r3, r3
 800588c:	4a7d      	ldr	r2, [pc, #500]	; (8005a84 <USBD_COMPOSITE_Mount_Class+0x26c>)
 800588e:	7812      	ldrb	r2, [r2, #0]
 8005890:	7afc      	ldrb	r4, [r7, #11]
 8005892:	7a79      	ldrb	r1, [r7, #9]
 8005894:	9202      	str	r2, [sp, #8]
 8005896:	7aba      	ldrb	r2, [r7, #10]
 8005898:	9201      	str	r2, [sp, #4]
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	4623      	mov	r3, r4
 800589e:	4602      	mov	r2, r0
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f7ff fd0f 	bl	80052c4 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3309      	adds	r3, #9
 80058aa:	88ba      	ldrh	r2, [r7, #4]
 80058ac:	3a09      	subs	r2, #9
 80058ae:	4619      	mov	r1, r3
 80058b0:	4876      	ldr	r0, [pc, #472]	; (8005a8c <USBD_COMPOSITE_Mount_Class+0x274>)
 80058b2:	f003 ff19 	bl	80096e8 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 80058b6:	7afb      	ldrb	r3, [r7, #11]
 80058b8:	3302      	adds	r3, #2
 80058ba:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 80058bc:	7abb      	ldrb	r3, [r7, #10]
 80058be:	3301      	adds	r3, #1
 80058c0:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 80058c2:	7a7b      	ldrb	r3, [r7, #9]
 80058c4:	3302      	adds	r3, #2
 80058c6:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 80058c8:	4b6e      	ldr	r3, [pc, #440]	; (8005a84 <USBD_COMPOSITE_Mount_Class+0x26c>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	3301      	adds	r3, #1
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	4b6c      	ldr	r3, [pc, #432]	; (8005a84 <USBD_COMPOSITE_Mount_Class+0x26c>)
 80058d2:	701a      	strb	r2, [r3, #0]
  in_ep_track += 1;
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 80058d4:	4b6e      	ldr	r3, [pc, #440]	; (8005a90 <USBD_COMPOSITE_Mount_Class+0x278>)
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	1d3a      	adds	r2, r7, #4
 80058da:	4610      	mov	r0, r2
 80058dc:	4798      	blx	r3
 80058de:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 80058e0:	4b68      	ldr	r3, [pc, #416]	; (8005a84 <USBD_COMPOSITE_Mount_Class+0x26c>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	7ab8      	ldrb	r0, [r7, #10]
 80058e6:	7afa      	ldrb	r2, [r7, #11]
 80058e8:	7a79      	ldrb	r1, [r7, #9]
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	4603      	mov	r3, r0
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fb88 	bl	8006004 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3309      	adds	r3, #9
 80058f8:	88ba      	ldrh	r2, [r7, #4]
 80058fa:	3a09      	subs	r2, #9
 80058fc:	4619      	mov	r1, r3
 80058fe:	4865      	ldr	r0, [pc, #404]	; (8005a94 <USBD_COMPOSITE_Mount_Class+0x27c>)
 8005900:	f003 fef2 	bl	80096e8 <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 8005904:	4b62      	ldr	r3, [pc, #392]	; (8005a90 <USBD_COMPOSITE_Mount_Class+0x278>)
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	1d3a      	adds	r2, r7, #4
 800590a:	4610      	mov	r0, r2
 800590c:	4798      	blx	r3
 800590e:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005910:	4b5c      	ldr	r3, [pc, #368]	; (8005a84 <USBD_COMPOSITE_Mount_Class+0x26c>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	7ab8      	ldrb	r0, [r7, #10]
 8005916:	7afa      	ldrb	r2, [r7, #11]
 8005918:	7a79      	ldrb	r1, [r7, #9]
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	4603      	mov	r3, r0
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 fb70 	bl	8006004 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3309      	adds	r3, #9
 8005928:	88ba      	ldrh	r2, [r7, #4]
 800592a:	3a09      	subs	r2, #9
 800592c:	4619      	mov	r1, r3
 800592e:	485a      	ldr	r0, [pc, #360]	; (8005a98 <USBD_COMPOSITE_Mount_Class+0x280>)
 8005930:	f003 feda 	bl	80096e8 <memcpy>
  in_ep_track += 1;
 8005934:	7afb      	ldrb	r3, [r7, #11]
 8005936:	3301      	adds	r3, #1
 8005938:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 800593a:	7abb      	ldrb	r3, [r7, #10]
 800593c:	3301      	adds	r3, #1
 800593e:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 8005940:	7a7b      	ldrb	r3, [r7, #9]
 8005942:	3301      	adds	r3, #1
 8005944:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8005946:	4b4f      	ldr	r3, [pc, #316]	; (8005a84 <USBD_COMPOSITE_Mount_Class+0x26c>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	3301      	adds	r3, #1
 800594c:	b2da      	uxtb	r2, r3
 800594e:	4b4d      	ldr	r3, [pc, #308]	; (8005a84 <USBD_COMPOSITE_Mount_Class+0x26c>)
 8005950:	701a      	strb	r2, [r3, #0]
  in_ep_track += 1;
  interface_no_track += 2;
  USBD_Track_String_Index += 1;
#endif
#if (USBD_USE_MSC == 1)
  ptr = USBD_MSC.GetFSConfigDescriptor(&len);
 8005952:	4b52      	ldr	r3, [pc, #328]	; (8005a9c <USBD_COMPOSITE_Mount_Class+0x284>)
 8005954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005956:	1d3a      	adds	r2, r7, #4
 8005958:	4610      	mov	r0, r2
 800595a:	4798      	blx	r3
 800595c:	60f8      	str	r0, [r7, #12]
  USBD_Update_MSC_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800595e:	4b49      	ldr	r3, [pc, #292]	; (8005a84 <USBD_COMPOSITE_Mount_Class+0x26c>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	7ab8      	ldrb	r0, [r7, #10]
 8005964:	7afa      	ldrb	r2, [r7, #11]
 8005966:	7a79      	ldrb	r1, [r7, #9]
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	4603      	mov	r3, r0
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 fda7 	bl	80064c0 <USBD_Update_MSC_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_MSC_DESC, ptr + 0x09, len - 0x09);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3309      	adds	r3, #9
 8005976:	88ba      	ldrh	r2, [r7, #4]
 8005978:	3a09      	subs	r2, #9
 800597a:	4619      	mov	r1, r3
 800597c:	4848      	ldr	r0, [pc, #288]	; (8005aa0 <USBD_COMPOSITE_Mount_Class+0x288>)
 800597e:	f003 feb3 	bl	80096e8 <memcpy>

  ptr = USBD_MSC.GetHSConfigDescriptor(&len);
 8005982:	4b46      	ldr	r3, [pc, #280]	; (8005a9c <USBD_COMPOSITE_Mount_Class+0x284>)
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	1d3a      	adds	r2, r7, #4
 8005988:	4610      	mov	r0, r2
 800598a:	4798      	blx	r3
 800598c:	60f8      	str	r0, [r7, #12]
  USBD_Update_MSC_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800598e:	4b3d      	ldr	r3, [pc, #244]	; (8005a84 <USBD_COMPOSITE_Mount_Class+0x26c>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	7ab8      	ldrb	r0, [r7, #10]
 8005994:	7afa      	ldrb	r2, [r7, #11]
 8005996:	7a79      	ldrb	r1, [r7, #9]
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	4603      	mov	r3, r0
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 fd8f 	bl	80064c0 <USBD_Update_MSC_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_MSC_DESC, ptr + 0x09, len - 0x09);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3309      	adds	r3, #9
 80059a6:	88ba      	ldrh	r2, [r7, #4]
 80059a8:	3a09      	subs	r2, #9
 80059aa:	4619      	mov	r1, r3
 80059ac:	483d      	ldr	r0, [pc, #244]	; (8005aa4 <USBD_COMPOSITE_Mount_Class+0x28c>)
 80059ae:	f003 fe9b 	bl	80096e8 <memcpy>
  in_ep_track += 1;
 80059b2:	7afb      	ldrb	r3, [r7, #11]
 80059b4:	3301      	adds	r3, #1
 80059b6:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 80059b8:	7abb      	ldrb	r3, [r7, #10]
 80059ba:	3301      	adds	r3, #1
 80059bc:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 80059be:	7a7b      	ldrb	r3, [r7, #9]
 80059c0:	3301      	adds	r3, #1
 80059c2:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 80059c4:	4b2f      	ldr	r3, [pc, #188]	; (8005a84 <USBD_COMPOSITE_Mount_Class+0x26c>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	3301      	adds	r3, #1
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	4b2d      	ldr	r3, [pc, #180]	; (8005a84 <USBD_COMPOSITE_Mount_Class+0x26c>)
 80059ce:	701a      	strb	r2, [r3, #0]
  out_ep_track += 1;
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 80059d0:	2382      	movs	r3, #130	; 0x82
 80059d2:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 80059d4:	4b34      	ldr	r3, [pc, #208]	; (8005aa8 <USBD_COMPOSITE_Mount_Class+0x290>)
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2209      	movs	r2, #9
 80059dc:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3301      	adds	r3, #1
 80059e2:	2202      	movs	r2, #2
 80059e4:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3302      	adds	r3, #2
 80059ea:	88fa      	ldrh	r2, [r7, #6]
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	0a1b      	lsrs	r3, r3, #8
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3303      	adds	r3, #3
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3304      	adds	r3, #4
 8005a02:	7a7a      	ldrb	r2, [r7, #9]
 8005a04:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3305      	adds	r3, #5
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3306      	adds	r3, #6
 8005a12:	2200      	movs	r2, #0
 8005a14:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	3307      	adds	r3, #7
 8005a1a:	22c0      	movs	r2, #192	; 0xc0
 8005a1c:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3308      	adds	r3, #8
 8005a22:	2232      	movs	r2, #50	; 0x32
 8005a24:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 8005a26:	4b21      	ldr	r3, [pc, #132]	; (8005aac <USBD_COMPOSITE_Mount_Class+0x294>)
 8005a28:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2209      	movs	r2, #9
 8005a2e:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3301      	adds	r3, #1
 8005a34:	2202      	movs	r2, #2
 8005a36:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3302      	adds	r3, #2
 8005a3c:	88fa      	ldrh	r2, [r7, #6]
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	0a1b      	lsrs	r3, r3, #8
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	3303      	adds	r3, #3
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	3304      	adds	r3, #4
 8005a54:	7a7a      	ldrb	r2, [r7, #9]
 8005a56:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3305      	adds	r3, #5
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3306      	adds	r3, #6
 8005a64:	2200      	movs	r2, #0
 8005a66:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3307      	adds	r3, #7
 8005a6c:	22c0      	movs	r2, #192	; 0xc0
 8005a6e:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3308      	adds	r3, #8
 8005a74:	2232      	movs	r2, #50	; 0x32
 8005a76:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8005a78:	bf00      	nop
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd90      	pop	{r4, r7, pc}
 8005a80:	200000d0 	.word	0x200000d0
 8005a84:	200001e0 	.word	0x200001e0
 8005a88:	20009411 	.word	0x20009411
 8005a8c:	2000938d 	.word	0x2000938d
 8005a90:	200001f0 	.word	0x200001f0
 8005a94:	20009453 	.word	0x20009453
 8005a98:	200093cf 	.word	0x200093cf
 8005a9c:	200002c8 	.word	0x200002c8
 8005aa0:	20009473 	.word	0x20009473
 8005aa4:	200093ef 	.word	0x200093ef
 8005aa8:	20009384 	.word	0x20009384
 8005aac:	20009408 	.word	0x20009408

08005ab0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 8005abc:	4b43      	ldr	r3, [pc, #268]	; (8005bcc <USBD_CUSTOM_HID_Init+0x11c>)
 8005abe:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d105      	bne.n	8005ad2 <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
    return (uint8_t)USBD_EMEM;
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e077      	b.n	8005bc2 <USBD_CUSTOM_HID_Init+0x112>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	7c1b      	ldrb	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d11b      	bne.n	8005b1a <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005ae2:	4b3b      	ldr	r3, [pc, #236]	; (8005bd0 <USBD_CUSTOM_HID_Init+0x120>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	f003 020f 	and.w	r2, r3, #15
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	3326      	adds	r3, #38	; 0x26
 8005af8:	2205      	movs	r2, #5
 8005afa:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005afc:	4b35      	ldr	r3, [pc, #212]	; (8005bd4 <USBD_CUSTOM_HID_Init+0x124>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f003 020f 	and.w	r2, r3, #15
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	440b      	add	r3, r1
 8005b10:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005b14:	2205      	movs	r2, #5
 8005b16:	801a      	strh	r2, [r3, #0]
 8005b18:	e01a      	b.n	8005b50 <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005b1a:	4b2d      	ldr	r3, [pc, #180]	; (8005bd0 <USBD_CUSTOM_HID_Init+0x120>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	f003 020f 	and.w	r2, r3, #15
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	3326      	adds	r3, #38	; 0x26
 8005b30:	2205      	movs	r2, #5
 8005b32:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005b34:	4b27      	ldr	r3, [pc, #156]	; (8005bd4 <USBD_CUSTOM_HID_Init+0x124>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	f003 020f 	and.w	r2, r3, #15
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	440b      	add	r3, r1
 8005b48:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005b4c:	2205      	movs	r2, #5
 8005b4e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 8005b50:	4b1f      	ldr	r3, [pc, #124]	; (8005bd0 <USBD_CUSTOM_HID_Init+0x120>)
 8005b52:	7819      	ldrb	r1, [r3, #0]
 8005b54:	2302      	movs	r3, #2
 8005b56:	2203      	movs	r2, #3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f003 fc2c 	bl	80093b6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 8005b5e:	4b1c      	ldr	r3, [pc, #112]	; (8005bd0 <USBD_CUSTOM_HID_Init+0x120>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	f003 020f 	and.w	r2, r3, #15
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	440b      	add	r3, r1
 8005b72:	3324      	adds	r3, #36	; 0x24
 8005b74:	2201      	movs	r2, #1
 8005b76:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 8005b78:	4b16      	ldr	r3, [pc, #88]	; (8005bd4 <USBD_CUSTOM_HID_Init+0x124>)
 8005b7a:	7819      	ldrb	r1, [r3, #0]
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	2203      	movs	r2, #3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f003 fc18 	bl	80093b6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 8005b86:	4b13      	ldr	r3, [pc, #76]	; (8005bd4 <USBD_CUSTOM_HID_Init+0x124>)
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	f003 020f 	and.w	r2, r3, #15
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	440b      	add	r3, r1
 8005b9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 8005bb2:	4b08      	ldr	r3, [pc, #32]	; (8005bd4 <USBD_CUSTOM_HID_Init+0x124>)
 8005bb4:	7819      	ldrb	r1, [r3, #0]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	2302      	movs	r3, #2
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f003 fd09 	bl	80095d2 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	2000047c 	.word	0x2000047c
 8005bd0:	200001ee 	.word	0x200001ee
 8005bd4:	200001ef 	.word	0x200001ef

08005bd8 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 8005be4:	4b2a      	ldr	r3, [pc, #168]	; (8005c90 <USBD_CUSTOM_HID_DeInit+0xb8>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f003 fc09 	bl	8009402 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 8005bf0:	4b27      	ldr	r3, [pc, #156]	; (8005c90 <USBD_CUSTOM_HID_DeInit+0xb8>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	f003 020f 	and.w	r2, r3, #15
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	3324      	adds	r3, #36	; 0x24
 8005c06:	2200      	movs	r2, #0
 8005c08:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 8005c0a:	4b21      	ldr	r3, [pc, #132]	; (8005c90 <USBD_CUSTOM_HID_DeInit+0xb8>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	f003 020f 	and.w	r2, r3, #15
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	3326      	adds	r3, #38	; 0x26
 8005c20:	2200      	movs	r2, #0
 8005c22:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 8005c24:	4b1b      	ldr	r3, [pc, #108]	; (8005c94 <USBD_CUSTOM_HID_DeInit+0xbc>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	4619      	mov	r1, r3
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f003 fbe9 	bl	8009402 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 8005c30:	4b18      	ldr	r3, [pc, #96]	; (8005c94 <USBD_CUSTOM_HID_DeInit+0xbc>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	f003 020f 	and.w	r2, r3, #15
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	440b      	add	r3, r1
 8005c44:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c48:	2200      	movs	r2, #0
 8005c4a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 8005c4c:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <USBD_CUSTOM_HID_DeInit+0xbc>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	f003 020f 	and.w	r2, r3, #15
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	4613      	mov	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	440b      	add	r3, r1
 8005c60:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005c64:	2200      	movs	r2, #0
 8005c66:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d008      	beq.n	8005c84 <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
  }

  return (uint8_t)USBD_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	200001ee 	.word	0x200001ee
 8005c94:	200001ef 	.word	0x200001ef

08005c98 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005ca8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e0ed      	b.n	8005ea0 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d052      	beq.n	8005d76 <USBD_CUSTOM_HID_Setup+0xde>
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	f040 80dd 	bne.w	8005e90 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	785b      	ldrb	r3, [r3, #1]
 8005cda:	3b02      	subs	r3, #2
 8005cdc:	2b09      	cmp	r3, #9
 8005cde:	d842      	bhi.n	8005d66 <USBD_CUSTOM_HID_Setup+0xce>
 8005ce0:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <USBD_CUSTOM_HID_Setup+0x50>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005d41 	.word	0x08005d41
 8005cec:	08005d1f 	.word	0x08005d1f
 8005cf0:	08005d67 	.word	0x08005d67
 8005cf4:	08005d67 	.word	0x08005d67
 8005cf8:	08005d67 	.word	0x08005d67
 8005cfc:	08005d67 	.word	0x08005d67
 8005d00:	08005d67 	.word	0x08005d67
 8005d04:	08005d51 	.word	0x08005d51
 8005d08:	08005d2f 	.word	0x08005d2f
 8005d0c:	08005d11 	.word	0x08005d11
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	885b      	ldrh	r3, [r3, #2]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	461a      	mov	r2, r3
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	605a      	str	r2, [r3, #4]
      break;
 8005d1c:	e02a      	b.n	8005d74 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	3304      	adds	r3, #4
 8005d22:	2201      	movs	r2, #1
 8005d24:	4619      	mov	r1, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f003 f94d 	bl	8008fc6 <USBD_CtlSendData>
      break;
 8005d2c:	e022      	b.n	8005d74 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	885b      	ldrh	r3, [r3, #2]
 8005d32:	0a1b      	lsrs	r3, r3, #8
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	609a      	str	r2, [r3, #8]
      break;
 8005d3e:	e019      	b.n	8005d74 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	3308      	adds	r3, #8
 8005d44:	2201      	movs	r2, #1
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f003 f93c 	bl	8008fc6 <USBD_CtlSendData>
      break;
 8005d4e:	e011      	b.n	8005d74 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2201      	movs	r2, #1
 8005d54:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005d56:	6939      	ldr	r1, [r7, #16]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	88db      	ldrh	r3, [r3, #6]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f003 f95d 	bl	800901e <USBD_CtlPrepareRx>
      break;
 8005d64:	e006      	b.n	8005d74 <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f003 f8bb 	bl	8008ee4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	75fb      	strb	r3, [r7, #23]
      break;
 8005d72:	bf00      	nop
    }
    break;
 8005d74:	e093      	b.n	8005e9e <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	785b      	ldrb	r3, [r3, #1]
 8005d7a:	2b0b      	cmp	r3, #11
 8005d7c:	d87f      	bhi.n	8005e7e <USBD_CUSTOM_HID_Setup+0x1e6>
 8005d7e:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <USBD_CUSTOM_HID_Setup+0xec>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005db5 	.word	0x08005db5
 8005d88:	08005e8d 	.word	0x08005e8d
 8005d8c:	08005e7f 	.word	0x08005e7f
 8005d90:	08005e7f 	.word	0x08005e7f
 8005d94:	08005e7f 	.word	0x08005e7f
 8005d98:	08005e7f 	.word	0x08005e7f
 8005d9c:	08005ddf 	.word	0x08005ddf
 8005da0:	08005e7f 	.word	0x08005e7f
 8005da4:	08005e7f 	.word	0x08005e7f
 8005da8:	08005e7f 	.word	0x08005e7f
 8005dac:	08005e2d 	.word	0x08005e2d
 8005db0:	08005e57 	.word	0x08005e57
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d107      	bne.n	8005dd0 <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005dc0:	f107 030e 	add.w	r3, r7, #14
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f003 f8fc 	bl	8008fc6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005dce:	e05e      	b.n	8005e8e <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f003 f886 	bl	8008ee4 <USBD_CtlError>
        ret = USBD_FAIL;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	75fb      	strb	r3, [r7, #23]
      break;
 8005ddc:	e057      	b.n	8005e8e <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	885b      	ldrh	r3, [r3, #2]
 8005de2:	0a1b      	lsrs	r3, r3, #8
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	2b22      	cmp	r3, #34	; 0x22
 8005de8:	d10b      	bne.n	8005e02 <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	88db      	ldrh	r3, [r3, #6]
 8005dee:	2b21      	cmp	r3, #33	; 0x21
 8005df0:	bf28      	it	cs
 8005df2:	2321      	movcs	r3, #33	; 0x21
 8005df4:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	61bb      	str	r3, [r7, #24]
 8005e00:	e00d      	b.n	8005e1e <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	885b      	ldrh	r3, [r3, #2]
 8005e06:	0a1b      	lsrs	r3, r3, #8
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b21      	cmp	r3, #33	; 0x21
 8005e0c:	d107      	bne.n	8005e1e <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 8005e0e:	4b26      	ldr	r3, [pc, #152]	; (8005ea8 <USBD_CUSTOM_HID_Setup+0x210>)
 8005e10:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	88db      	ldrh	r3, [r3, #6]
 8005e16:	2b09      	cmp	r3, #9
 8005e18:	bf28      	it	cs
 8005e1a:	2309      	movcs	r3, #9
 8005e1c:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e1e:	8bfb      	ldrh	r3, [r7, #30]
 8005e20:	461a      	mov	r2, r3
 8005e22:	69b9      	ldr	r1, [r7, #24]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f003 f8ce 	bl	8008fc6 <USBD_CtlSendData>
      break;
 8005e2a:	e030      	b.n	8005e8e <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d107      	bne.n	8005e48 <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	330c      	adds	r3, #12
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f003 f8c0 	bl	8008fc6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005e46:	e022      	b.n	8005e8e <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f003 f84a 	bl	8008ee4 <USBD_CtlError>
        ret = USBD_FAIL;
 8005e50:	2303      	movs	r3, #3
 8005e52:	75fb      	strb	r3, [r7, #23]
      break;
 8005e54:	e01b      	b.n	8005e8e <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d106      	bne.n	8005e70 <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	885b      	ldrh	r3, [r3, #2]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	461a      	mov	r2, r3
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005e6e:	e00e      	b.n	8005e8e <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f003 f836 	bl	8008ee4 <USBD_CtlError>
        ret = USBD_FAIL;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e7c:	e007      	b.n	8005e8e <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f003 f82f 	bl	8008ee4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e86:	2303      	movs	r3, #3
 8005e88:	75fb      	strb	r3, [r7, #23]
      break;
 8005e8a:	e000      	b.n	8005e8e <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 8005e8c:	bf00      	nop
    }
    break;
 8005e8e:	e006      	b.n	8005e9e <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f003 f826 	bl	8008ee4 <USBD_CtlError>
    ret = USBD_FAIL;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	75fb      	strb	r3, [r7, #23]
    break;
 8005e9c:	bf00      	nop
  }
  return (uint8_t)ret;
 8005e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3720      	adds	r7, #32
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	200002b0 	.word	0x200002b0

08005eac <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2229      	movs	r2, #41	; 0x29
 8005eb8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8005eba:	4b03      	ldr	r3, [pc, #12]	; (8005ec8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	2000022c 	.word	0x2000022c

08005ecc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2229      	movs	r2, #41	; 0x29
 8005ed8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8005eda:	4b03      	ldr	r3, [pc, #12]	; (8005ee8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	20000258 	.word	0x20000258

08005eec <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2229      	movs	r2, #41	; 0x29
 8005ef8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8005efa:	4b03      	ldr	r3, [pc, #12]	; (8005f08 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	20000284 	.word	0x20000284

08005f0c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005f1e:	2200      	movs	r2, #0
 8005f20:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e00e      	b.n	8005f68 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005f50:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	7810      	ldrb	r0, [r2, #0]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	7852      	ldrb	r2, [r2, #1]
 8005f62:	4611      	mov	r1, r2
 8005f64:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005f7e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e011      	b.n	8005fae <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d10c      	bne.n	8005fac <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	7810      	ldrb	r0, [r2, #0]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	7852      	ldrb	r2, [r2, #1]
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	220a      	movs	r2, #10
 8005fc4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005fc6:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	200002bc 	.word	0x200002bc

08005fd8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e004      	b.n	8005ff6 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc

  return (uint8_t)USBD_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
	...

08006004 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	4608      	mov	r0, r1
 800600e:	4611      	mov	r1, r2
 8006010:	461a      	mov	r2, r3
 8006012:	4603      	mov	r3, r0
 8006014:	70fb      	strb	r3, [r7, #3]
 8006016:	460b      	mov	r3, r1
 8006018:	70bb      	strb	r3, [r7, #2]
 800601a:	4613      	mov	r3, r2
 800601c:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	330b      	adds	r3, #11
 8006022:	78fa      	ldrb	r2, [r7, #3]
 8006024:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3311      	adds	r3, #17
 800602a:	7c3a      	ldrb	r2, [r7, #16]
 800602c:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	331d      	adds	r3, #29
 8006032:	78ba      	ldrb	r2, [r7, #2]
 8006034:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3324      	adds	r3, #36	; 0x24
 800603a:	787a      	ldrb	r2, [r7, #1]
 800603c:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800603e:	4a09      	ldr	r2, [pc, #36]	; (8006064 <USBD_Update_HID_Custom_DESC+0x60>)
 8006040:	78bb      	ldrb	r3, [r7, #2]
 8006042:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 8006044:	4a08      	ldr	r2, [pc, #32]	; (8006068 <USBD_Update_HID_Custom_DESC+0x64>)
 8006046:	787b      	ldrb	r3, [r7, #1]
 8006048:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800604a:	4a08      	ldr	r2, [pc, #32]	; (800606c <USBD_Update_HID_Custom_DESC+0x68>)
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 8006050:	4a07      	ldr	r2, [pc, #28]	; (8006070 <USBD_Update_HID_Custom_DESC+0x6c>)
 8006052:	7c3b      	ldrb	r3, [r7, #16]
 8006054:	7013      	strb	r3, [r2, #0]
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	200001ee 	.word	0x200001ee
 8006068:	200001ef 	.word	0x200001ef
 800606c:	20000478 	.word	0x20000478
 8006070:	20000479 	.word	0x20000479

08006074 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = &USBD_MSC_Instance;
 8006080:	4b37      	ldr	r3, [pc, #220]	; (8006160 <USBD_MSC_Init+0xec>)
 8006082:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d105      	bne.n	8006096 <USBD_MSC_Init+0x22>
  {
    pdev->pClassData_MSC = NULL;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
    return (uint8_t)USBD_EMEM;
 8006092:	2302      	movs	r3, #2
 8006094:	e060      	b.n	8006158 <USBD_MSC_Init+0xe4>
  }

  pdev->pClassData_MSC = (void *)hmsc;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	7c1b      	ldrb	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d12b      	bne.n	80060fe <USBD_MSC_Init+0x8a>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80060a6:	4b2f      	ldr	r3, [pc, #188]	; (8006164 <USBD_MSC_Init+0xf0>)
 80060a8:	7819      	ldrb	r1, [r3, #0]
 80060aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060ae:	2202      	movs	r2, #2
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f003 f980 	bl	80093b6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 80060b6:	4b2b      	ldr	r3, [pc, #172]	; (8006164 <USBD_MSC_Init+0xf0>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	f003 020f 	and.w	r2, r3, #15
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060ce:	2201      	movs	r2, #1
 80060d0:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80060d2:	4b25      	ldr	r3, [pc, #148]	; (8006168 <USBD_MSC_Init+0xf4>)
 80060d4:	7819      	ldrb	r1, [r3, #0]
 80060d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060da:	2202      	movs	r2, #2
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f003 f96a 	bl	80093b6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 80060e2:	4b21      	ldr	r3, [pc, #132]	; (8006168 <USBD_MSC_Init+0xf4>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	f003 020f 	and.w	r2, r3, #15
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	3324      	adds	r3, #36	; 0x24
 80060f8:	2201      	movs	r2, #1
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	e028      	b.n	8006150 <USBD_MSC_Init+0xdc>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80060fe:	4b19      	ldr	r3, [pc, #100]	; (8006164 <USBD_MSC_Init+0xf0>)
 8006100:	7819      	ldrb	r1, [r3, #0]
 8006102:	2340      	movs	r3, #64	; 0x40
 8006104:	2202      	movs	r2, #2
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f003 f955 	bl	80093b6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 800610c:	4b15      	ldr	r3, [pc, #84]	; (8006164 <USBD_MSC_Init+0xf0>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	f003 020f 	and.w	r2, r3, #15
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	4613      	mov	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	440b      	add	r3, r1
 8006120:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006124:	2201      	movs	r2, #1
 8006126:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006128:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <USBD_MSC_Init+0xf4>)
 800612a:	7819      	ldrb	r1, [r3, #0]
 800612c:	2340      	movs	r3, #64	; 0x40
 800612e:	2202      	movs	r2, #2
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f003 f940 	bl	80093b6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 8006136:	4b0c      	ldr	r3, [pc, #48]	; (8006168 <USBD_MSC_Init+0xf4>)
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	f003 020f 	and.w	r2, r3, #15
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	440b      	add	r3, r1
 800614a:	3324      	adds	r3, #36	; 0x24
 800614c:	2201      	movs	r2, #1
 800614e:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f9ed 	bl	8006530 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	20000498 	.word	0x20000498
 8006164:	200002c7 	.word	0x200002c7
 8006168:	200002c6 	.word	0x200002c6

0800616c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_OUT_EP);
 8006178:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <USBD_MSC_DeInit+0x7c>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f003 f93f 	bl	8009402 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 0U;
 8006184:	4b18      	ldr	r3, [pc, #96]	; (80061e8 <USBD_MSC_DeInit+0x7c>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	f003 020f 	and.w	r2, r3, #15
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	440b      	add	r3, r1
 8006198:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800619c:	2200      	movs	r2, #0
 800619e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_IN_EP);
 80061a0:	4b12      	ldr	r3, [pc, #72]	; (80061ec <USBD_MSC_DeInit+0x80>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	4619      	mov	r1, r3
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f003 f92b 	bl	8009402 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 0U;
 80061ac:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <USBD_MSC_DeInit+0x80>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	f003 020f 	and.w	r2, r3, #15
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	3324      	adds	r3, #36	; 0x24
 80061c2:	2200      	movs	r2, #0
 80061c4:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassData_MSC != NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d006      	beq.n	80061de <USBD_MSC_DeInit+0x72>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fa1f 	bl	8006614 <MSC_BOT_DeInit>
#if (0)
    (void)USBD_free(pdev->pClassData_MSC);
#endif
    pdev->pClassData_MSC = NULL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
  }

  return (uint8_t)USBD_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	200002c7 	.word	0x200002c7
 80061ec:	200002c6 	.word	0x200002c6

080061f0 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006200:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006210:	2303      	movs	r3, #3
 8006212:	e0db      	b.n	80063cc <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800621c:	2b00      	cmp	r3, #0
 800621e:	d04e      	beq.n	80062be <USBD_MSC_Setup+0xce>
 8006220:	2b20      	cmp	r3, #32
 8006222:	f040 80cb 	bne.w	80063bc <USBD_MSC_Setup+0x1cc>
  {
  /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	785b      	ldrb	r3, [r3, #1]
 800622a:	2bfe      	cmp	r3, #254	; 0xfe
 800622c:	d002      	beq.n	8006234 <USBD_MSC_Setup+0x44>
 800622e:	2bff      	cmp	r3, #255	; 0xff
 8006230:	d025      	beq.n	800627e <USBD_MSC_Setup+0x8e>
 8006232:	e03c      	b.n	80062ae <USBD_MSC_Setup+0xbe>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue == 0U) && (req->wLength == 1U) &&
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	885b      	ldrh	r3, [r3, #2]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d119      	bne.n	8006270 <USBD_MSC_Setup+0x80>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	88db      	ldrh	r3, [r3, #6]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d115      	bne.n	8006270 <USBD_MSC_Setup+0x80>
          ((req->bmRequest & 0x80U) == 0x80U))
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	b25b      	sxtb	r3, r3
      if ((req->wValue == 0U) && (req->wLength == 1U) &&
 800624a:	2b00      	cmp	r3, #0
 800624c:	da10      	bge.n	8006270 <USBD_MSC_Setup+0x80>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetMaxLun();
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	4798      	blx	r3
 8006258:	4603      	mov	r3, r0
 800625a:	461a      	mov	r2, r3
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2201      	movs	r2, #1
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f002 fead 	bl	8008fc6 <USBD_CtlSendData>
 800626c:	bf00      	nop
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800626e:	e025      	b.n	80062bc <USBD_MSC_Setup+0xcc>
        USBD_CtlError(pdev, req);
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f002 fe36 	bl	8008ee4 <USBD_CtlError>
        ret = USBD_FAIL;
 8006278:	2303      	movs	r3, #3
 800627a:	75fb      	strb	r3, [r7, #23]
      break;
 800627c:	e01e      	b.n	80062bc <USBD_MSC_Setup+0xcc>

    case BOT_RESET:
      if ((req->wValue == 0U) && (req->wLength == 0U) &&
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	885b      	ldrh	r3, [r3, #2]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10c      	bne.n	80062a0 <USBD_MSC_Setup+0xb0>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	88db      	ldrh	r3, [r3, #6]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d108      	bne.n	80062a0 <USBD_MSC_Setup+0xb0>
          ((req->bmRequest & 0x80U) != 0x80U))
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	b25b      	sxtb	r3, r3
      if ((req->wValue == 0U) && (req->wLength == 0U) &&
 8006294:	2b00      	cmp	r3, #0
 8006296:	db03      	blt.n	80062a0 <USBD_MSC_Setup+0xb0>
      {
        MSC_BOT_Reset(pdev);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f98b 	bl	80065b4 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800629e:	e00d      	b.n	80062bc <USBD_MSC_Setup+0xcc>
        USBD_CtlError(pdev, req);
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f002 fe1e 	bl	8008ee4 <USBD_CtlError>
        ret = USBD_FAIL;
 80062a8:	2303      	movs	r3, #3
 80062aa:	75fb      	strb	r3, [r7, #23]
      break;
 80062ac:	e006      	b.n	80062bc <USBD_MSC_Setup+0xcc>

    default:
      USBD_CtlError(pdev, req);
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f002 fe17 	bl	8008ee4 <USBD_CtlError>
      ret = USBD_FAIL;
 80062b6:	2303      	movs	r3, #3
 80062b8:	75fb      	strb	r3, [r7, #23]
      break;
 80062ba:	bf00      	nop
    }
    break;
 80062bc:	e085      	b.n	80063ca <USBD_MSC_Setup+0x1da>
  /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	2b0b      	cmp	r3, #11
 80062c4:	d871      	bhi.n	80063aa <USBD_MSC_Setup+0x1ba>
 80062c6:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <USBD_MSC_Setup+0xdc>)
 80062c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062cc:	080062fd 	.word	0x080062fd
 80062d0:	08006379 	.word	0x08006379
 80062d4:	080063ab 	.word	0x080063ab
 80062d8:	080063ab 	.word	0x080063ab
 80062dc:	080063ab 	.word	0x080063ab
 80062e0:	080063ab 	.word	0x080063ab
 80062e4:	080063ab 	.word	0x080063ab
 80062e8:	080063ab 	.word	0x080063ab
 80062ec:	080063ab 	.word	0x080063ab
 80062f0:	080063ab 	.word	0x080063ab
 80062f4:	08006327 	.word	0x08006327
 80062f8:	08006351 	.word	0x08006351
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b03      	cmp	r3, #3
 8006306:	d107      	bne.n	8006318 <USBD_MSC_Setup+0x128>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006308:	f107 030e 	add.w	r3, r7, #14
 800630c:	2202      	movs	r2, #2
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f002 fe58 	bl	8008fc6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006316:	e050      	b.n	80063ba <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f002 fde2 	bl	8008ee4 <USBD_CtlError>
        ret = USBD_FAIL;
 8006320:	2303      	movs	r3, #3
 8006322:	75fb      	strb	r3, [r7, #23]
      break;
 8006324:	e049      	b.n	80063ba <USBD_MSC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b03      	cmp	r3, #3
 8006330:	d107      	bne.n	8006342 <USBD_MSC_Setup+0x152>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	3304      	adds	r3, #4
 8006336:	2201      	movs	r2, #1
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f002 fe43 	bl	8008fc6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006340:	e03b      	b.n	80063ba <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f002 fdcd 	bl	8008ee4 <USBD_CtlError>
        ret = USBD_FAIL;
 800634a:	2303      	movs	r3, #3
 800634c:	75fb      	strb	r3, [r7, #23]
      break;
 800634e:	e034      	b.n	80063ba <USBD_MSC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b03      	cmp	r3, #3
 800635a:	d106      	bne.n	800636a <USBD_MSC_Setup+0x17a>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	885b      	ldrh	r3, [r3, #2]
 8006360:	b2db      	uxtb	r3, r3
 8006362:	461a      	mov	r2, r3
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006368:	e027      	b.n	80063ba <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f002 fdb9 	bl	8008ee4 <USBD_CtlError>
        ret = USBD_FAIL;
 8006372:	2303      	movs	r3, #3
 8006374:	75fb      	strb	r3, [r7, #23]
      break;
 8006376:	e020      	b.n	80063ba <USBD_MSC_Setup+0x1ca>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b03      	cmp	r3, #3
 8006382:	d119      	bne.n	80063b8 <USBD_MSC_Setup+0x1c8>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	885b      	ldrh	r3, [r3, #2]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d115      	bne.n	80063b8 <USBD_MSC_Setup+0x1c8>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	889b      	ldrh	r3, [r3, #4]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f003 f853 	bl	8009440 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	889b      	ldrh	r3, [r3, #4]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fae6 	bl	8006974 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 80063a8:	e006      	b.n	80063b8 <USBD_MSC_Setup+0x1c8>

    default:
      USBD_CtlError(pdev, req);
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f002 fd99 	bl	8008ee4 <USBD_CtlError>
      ret = USBD_FAIL;
 80063b2:	2303      	movs	r3, #3
 80063b4:	75fb      	strb	r3, [r7, #23]
      break;
 80063b6:	e000      	b.n	80063ba <USBD_MSC_Setup+0x1ca>
      break;
 80063b8:	bf00      	nop
    }
    break;
 80063ba:	e006      	b.n	80063ca <USBD_MSC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f002 fd90 	bl	8008ee4 <USBD_CtlError>
    ret = USBD_FAIL;
 80063c4:	2303      	movs	r3, #3
 80063c6:	75fb      	strb	r3, [r7, #23]
    break;
 80063c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80063ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f929 	bl	800663c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f94f 	bl	80066a8 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8006422:	4b03      	ldr	r3, [pc, #12]	; (8006430 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	20000304 	.word	0x20000304

08006434 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006442:	4b03      	ldr	r3, [pc, #12]	; (8006450 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	20000324 	.word	0x20000324

08006454 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2220      	movs	r2, #32
 8006460:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006462:	4b03      	ldr	r3, [pc, #12]	; (8006470 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	20000344 	.word	0x20000344

08006474 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	220a      	movs	r2, #10
 8006480:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006482:	4b03      	ldr	r3, [pc, #12]	; (8006490 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006484:	4618      	mov	r0, r3
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	20000364 	.word	0x20000364

08006494 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e004      	b.n	80064b2 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData_MSC = fops;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

  return (uint8_t)USBD_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
	...

080064c0 <USBD_Update_MSC_DESC>:

void USBD_Update_MSC_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	4608      	mov	r0, r1
 80064ca:	4611      	mov	r1, r2
 80064cc:	461a      	mov	r2, r3
 80064ce:	4603      	mov	r3, r0
 80064d0:	70fb      	strb	r3, [r7, #3]
 80064d2:	460b      	mov	r3, r1
 80064d4:	70bb      	strb	r3, [r7, #2]
 80064d6:	4613      	mov	r3, r2
 80064d8:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	330b      	adds	r3, #11
 80064de:	78fa      	ldrb	r2, [r7, #3]
 80064e0:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3311      	adds	r3, #17
 80064e6:	7c3a      	ldrb	r2, [r7, #16]
 80064e8:	701a      	strb	r2, [r3, #0]
  desc[20] = in_ep;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3314      	adds	r3, #20
 80064ee:	78ba      	ldrb	r2, [r7, #2]
 80064f0:	701a      	strb	r2, [r3, #0]
  desc[27] = out_ep;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	331b      	adds	r3, #27
 80064f6:	787a      	ldrb	r2, [r7, #1]
 80064f8:	701a      	strb	r2, [r3, #0]

  MSC_IN_EP = in_ep;
 80064fa:	4a09      	ldr	r2, [pc, #36]	; (8006520 <USBD_Update_MSC_DESC+0x60>)
 80064fc:	78bb      	ldrb	r3, [r7, #2]
 80064fe:	7013      	strb	r3, [r2, #0]
  MSC_OUT_EP = out_ep;
 8006500:	4a08      	ldr	r2, [pc, #32]	; (8006524 <USBD_Update_MSC_DESC+0x64>)
 8006502:	787b      	ldrb	r3, [r7, #1]
 8006504:	7013      	strb	r3, [r2, #0]
  MSC_ITF_NBR = itf_no;
 8006506:	4a08      	ldr	r2, [pc, #32]	; (8006528 <USBD_Update_MSC_DESC+0x68>)
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	7013      	strb	r3, [r2, #0]
  MSC_BOT_STR_DESC_IDX = str_idx;
 800650c:	4a07      	ldr	r2, [pc, #28]	; (800652c <USBD_Update_MSC_DESC+0x6c>)
 800650e:	7c3b      	ldrb	r3, [r7, #16]
 8006510:	7013      	strb	r3, [r2, #0]
}
 8006512:	bf00      	nop
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	200002c6 	.word	0x200002c6
 8006524:	200002c7 	.word	0x200002c7
 8006528:	20000494 	.word	0x20000494
 800652c:	20000495 	.word	0x20000495

08006530 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800653e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d02d      	beq.n	80065a2 <MSC_BOT_Init+0x72>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Init(0U);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2000      	movs	r0, #0
 8006574:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_OUT_EP);
 8006576:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <MSC_BOT_Init+0x7c>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f002 ff5f 	bl	8009440 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_IN_EP);
 8006582:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <MSC_BOT_Init+0x80>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f002 ff59 	bl	8009440 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 800658e:	4b07      	ldr	r3, [pc, #28]	; (80065ac <MSC_BOT_Init+0x7c>)
 8006590:	7819      	ldrb	r1, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006598:	231f      	movs	r3, #31
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f003 f819 	bl	80095d2 <USBD_LL_PrepareReceive>
 80065a0:	e000      	b.n	80065a4 <MSC_BOT_Init+0x74>
    return;
 80065a2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	200002c7 	.word	0x200002c7
 80065b0:	200002c6 	.word	0x200002c6

080065b4 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80065c2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d01b      	beq.n	8006602 <MSC_BOT_Reset+0x4e>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_IN_EP);
 80065d6:	4b0d      	ldr	r3, [pc, #52]	; (800660c <MSC_BOT_Reset+0x58>)
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f002 ff6d 	bl	80094bc <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_OUT_EP);
 80065e2:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <MSC_BOT_Reset+0x5c>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f002 ff67 	bl	80094bc <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 80065ee:	4b08      	ldr	r3, [pc, #32]	; (8006610 <MSC_BOT_Reset+0x5c>)
 80065f0:	7819      	ldrb	r1, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80065f8:	231f      	movs	r3, #31
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f002 ffe9 	bl	80095d2 <USBD_LL_PrepareReceive>
 8006600:	e000      	b.n	8006604 <MSC_BOT_Reset+0x50>
    return;
 8006602:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	200002c6 	.word	0x200002c6
 8006610:	200002c7 	.word	0x200002c7

08006614 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006622:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	721a      	strb	r2, [r3, #8]
  }
}
 8006630:	bf00      	nop
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800664e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d020      	beq.n	8006698 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	7a1b      	ldrb	r3, [r3, #8]
 800665a:	2b02      	cmp	r3, #2
 800665c:	d005      	beq.n	800666a <MSC_BOT_DataIn+0x2e>
 800665e:	2b02      	cmp	r3, #2
 8006660:	db1c      	blt.n	800669c <MSC_BOT_DataIn+0x60>
 8006662:	3b03      	subs	r3, #3
 8006664:	2b01      	cmp	r3, #1
 8006666:	d819      	bhi.n	800669c <MSC_BOT_DataIn+0x60>
 8006668:	e011      	b.n	800668e <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006676:	461a      	mov	r2, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f9b1 	bl	80069e0 <SCSI_ProcessCmd>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	da0d      	bge.n	80066a0 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006684:	2101      	movs	r1, #1
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f900 	bl	800688c <MSC_BOT_SendCSW>
      }
      break;
 800668c:	e008      	b.n	80066a0 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800668e:	2100      	movs	r1, #0
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f8fb 	bl	800688c <MSC_BOT_SendCSW>
      break;
 8006696:	e004      	b.n	80066a2 <MSC_BOT_DataIn+0x66>
    return;
 8006698:	bf00      	nop
 800669a:	e002      	b.n	80066a2 <MSC_BOT_DataIn+0x66>

    default:
      break;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <MSC_BOT_DataIn+0x66>
      break;
 80066a0:	bf00      	nop
  }
}
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80066ba:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d01c      	beq.n	80066fc <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	7a1b      	ldrb	r3, [r3, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <MSC_BOT_DataOut+0x28>
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d004      	beq.n	80066d8 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80066ce:	e018      	b.n	8006702 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f819 	bl	8006708 <MSC_BOT_CBW_Decode>
      break;
 80066d6:	e014      	b.n	8006702 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80066e4:	461a      	mov	r2, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f97a 	bl	80069e0 <SCSI_ProcessCmd>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	da06      	bge.n	8006700 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80066f2:	2101      	movs	r1, #1
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f8c9 	bl	800688c <MSC_BOT_SendCSW>
      break;
 80066fa:	e001      	b.n	8006700 <MSC_BOT_DataOut+0x58>
    return;
 80066fc:	bf00      	nop
 80066fe:	e000      	b.n	8006702 <MSC_BOT_DataOut+0x5a>
      break;
 8006700:	bf00      	nop
  }
}
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006716:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d079      	beq.n	8006812 <MSC_BOT_CBW_Decode+0x10a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 8006736:	4b3a      	ldr	r3, [pc, #232]	; (8006820 <MSC_BOT_CBW_Decode+0x118>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f002 ff69 	bl	8009614 <USBD_LL_GetRxDataSize>
 8006742:	4603      	mov	r3, r0
 8006744:	2b1f      	cmp	r3, #31
 8006746:	d114      	bne.n	8006772 <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 800674e:	4a35      	ldr	r2, [pc, #212]	; (8006824 <MSC_BOT_CBW_Decode+0x11c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d10e      	bne.n	8006772 <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800675a:	2b01      	cmp	r3, #1
 800675c:	d809      	bhi.n	8006772 <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bCBLength > 16U))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800676e:	2b10      	cmp	r3, #16
 8006770:	d90e      	bls.n	8006790 <MSC_BOT_CBW_Decode+0x88>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006778:	2320      	movs	r3, #32
 800677a:	2205      	movs	r2, #5
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fdda 	bl	8007336 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2202      	movs	r2, #2
 8006786:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f8b5 	bl	80068f8 <MSC_BOT_Abort>
 800678e:	e043      	b.n	8006818 <MSC_BOT_CBW_Decode+0x110>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800679c:	461a      	mov	r2, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f91e 	bl	80069e0 <SCSI_ProcessCmd>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	da0c      	bge.n	80067c4 <MSC_BOT_CBW_Decode+0xbc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	7a1b      	ldrb	r3, [r3, #8]
 80067ae:	2b05      	cmp	r3, #5
 80067b0:	d104      	bne.n	80067bc <MSC_BOT_CBW_Decode+0xb4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80067b2:	2101      	movs	r1, #1
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f869 	bl	800688c <MSC_BOT_SendCSW>
 80067ba:	e02d      	b.n	8006818 <MSC_BOT_CBW_Decode+0x110>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f89b 	bl	80068f8 <MSC_BOT_Abort>
 80067c2:	e029      	b.n	8006818 <MSC_BOT_CBW_Decode+0x110>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	7a1b      	ldrb	r3, [r3, #8]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d024      	beq.n	8006816 <MSC_BOT_CBW_Decode+0x10e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d020      	beq.n	8006816 <MSC_BOT_CBW_Decode+0x10e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d01c      	beq.n	8006816 <MSC_BOT_CBW_Decode+0x10e>
    {
      if (hmsc->bot_data_length > 0U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d009      	beq.n	80067f8 <MSC_BOT_CBW_Decode+0xf0>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f103 0110 	add.w	r1, r3, #16
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	461a      	mov	r2, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f819 	bl	8006828 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80067f6:	e00f      	b.n	8006818 <MSC_BOT_CBW_Decode+0x110>
      }
      else if (hmsc->bot_data_length == 0U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <MSC_BOT_CBW_Decode+0x102>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006800:	2100      	movs	r1, #0
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f842 	bl	800688c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006808:	e006      	b.n	8006818 <MSC_BOT_CBW_Decode+0x110>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f874 	bl	80068f8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8006810:	e002      	b.n	8006818 <MSC_BOT_CBW_Decode+0x110>
    return;
 8006812:	bf00      	nop
 8006814:	e000      	b.n	8006818 <MSC_BOT_CBW_Decode+0x110>
      }
    }
    else
    {
      return;
 8006816:	bf00      	nop
    }
  }
}
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	200002c7 	.word	0x200002c7
 8006824:	43425355 	.word	0x43425355

08006828 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800683a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	4293      	cmp	r3, r2
 8006846:	bf28      	it	cs
 8006848:	4613      	movcs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d016      	beq.n	8006880 <MSC_BOT_SendData+0x58>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	1ad2      	subs	r2, r2, r3
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2204      	movs	r2, #4
 800686e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, pbuf, length);
 8006870:	4b05      	ldr	r3, [pc, #20]	; (8006888 <MSC_BOT_SendData+0x60>)
 8006872:	7819      	ldrb	r1, [r3, #0]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f002 fe89 	bl	8009590 <USBD_LL_Transmit>
 800687e:	e000      	b.n	8006882 <MSC_BOT_SendData+0x5a>
    return;
 8006880:	bf00      	nop
}
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	200002c6 	.word	0x200002c6

0800688c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800689e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d01d      	beq.n	80068e2 <MSC_BOT_SendCSW+0x56>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4a10      	ldr	r2, [pc, #64]	; (80068ec <MSC_BOT_SendCSW+0x60>)
 80068aa:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	78fa      	ldrb	r2, [r7, #3]
 80068b2:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, (uint8_t *)&hmsc->csw,
 80068bc:	4b0c      	ldr	r3, [pc, #48]	; (80068f0 <MSC_BOT_SendCSW+0x64>)
 80068be:	7819      	ldrb	r1, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 720c 	add.w	r2, r3, #560	; 0x230
 80068c6:	230d      	movs	r3, #13
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f002 fe61 	bl	8009590 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 80068ce:	4b09      	ldr	r3, [pc, #36]	; (80068f4 <MSC_BOT_SendCSW+0x68>)
 80068d0:	7819      	ldrb	r1, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80068d8:	231f      	movs	r3, #31
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f002 fe79 	bl	80095d2 <USBD_LL_PrepareReceive>
 80068e0:	e000      	b.n	80068e4 <MSC_BOT_SendCSW+0x58>
    return;
 80068e2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	53425355 	.word	0x53425355
 80068f0:	200002c6 	.word	0x200002c6
 80068f4:	200002c7 	.word	0x200002c7

080068f8 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006906:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d02a      	beq.n	8006964 <MSC_BOT_Abort+0x6c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10e      	bne.n	8006936 <MSC_BOT_Abort+0x3e>
      (hmsc->cbw.dDataLength != 0U) &&
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <MSC_BOT_Abort+0x3e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8006926:	2b00      	cmp	r3, #0
 8006928:	d105      	bne.n	8006936 <MSC_BOT_Abort+0x3e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 800692a:	4b10      	ldr	r3, [pc, #64]	; (800696c <MSC_BOT_Abort+0x74>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f002 fda4 	bl	800947e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 8006936:	4b0e      	ldr	r3, [pc, #56]	; (8006970 <MSC_BOT_Abort+0x78>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f002 fd9e 	bl	800947e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	7a5b      	ldrb	r3, [r3, #9]
 8006946:	2b02      	cmp	r3, #2
 8006948:	d10d      	bne.n	8006966 <MSC_BOT_Abort+0x6e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 800694a:	4b09      	ldr	r3, [pc, #36]	; (8006970 <MSC_BOT_Abort+0x78>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f002 fd94 	bl	800947e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 8006956:	4b05      	ldr	r3, [pc, #20]	; (800696c <MSC_BOT_Abort+0x74>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f002 fd8e 	bl	800947e <USBD_LL_StallEP>
 8006962:	e000      	b.n	8006966 <MSC_BOT_Abort+0x6e>
    return;
 8006964:	bf00      	nop
  }
}
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	200002c7 	.word	0x200002c7
 8006970:	200002c6 	.word	0x200002c6

08006974 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006986:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d01d      	beq.n	80069ca <MSC_BOT_CplClrFeature+0x56>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	7a5b      	ldrb	r3, [r3, #9]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d10c      	bne.n	80069b0 <MSC_BOT_CplClrFeature+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 8006996:	4b10      	ldr	r3, [pc, #64]	; (80069d8 <MSC_BOT_CplClrFeature+0x64>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f002 fd6e 	bl	800947e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 80069a2:	4b0e      	ldr	r3, [pc, #56]	; (80069dc <MSC_BOT_CplClrFeature+0x68>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f002 fd68 	bl	800947e <USBD_LL_StallEP>
 80069ae:	e00f      	b.n	80069d0 <MSC_BOT_CplClrFeature+0x5c>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80069b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	da0a      	bge.n	80069ce <MSC_BOT_CplClrFeature+0x5a>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	7a5b      	ldrb	r3, [r3, #9]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d006      	beq.n	80069ce <MSC_BOT_CplClrFeature+0x5a>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80069c0:	2101      	movs	r1, #1
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff ff62 	bl	800688c <MSC_BOT_SendCSW>
 80069c8:	e002      	b.n	80069d0 <MSC_BOT_CplClrFeature+0x5c>
    return;
 80069ca:	bf00      	nop
 80069cc:	e000      	b.n	80069d0 <MSC_BOT_CplClrFeature+0x5c>
  }
  else
  {
    return;
 80069ce:	bf00      	nop
  }
}
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	200002c6 	.word	0x200002c6
 80069dc:	200002c7 	.word	0x200002c7

080069e0 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	460b      	mov	r3, r1
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80069f4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d102      	bne.n	8006a02 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 80069fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a00:	e168      	b.n	8006cd4 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2baa      	cmp	r3, #170	; 0xaa
 8006a08:	f000 8144 	beq.w	8006c94 <SCSI_ProcessCmd+0x2b4>
 8006a0c:	2baa      	cmp	r3, #170	; 0xaa
 8006a0e:	f300 8153 	bgt.w	8006cb8 <SCSI_ProcessCmd+0x2d8>
 8006a12:	2ba8      	cmp	r3, #168	; 0xa8
 8006a14:	f000 812c 	beq.w	8006c70 <SCSI_ProcessCmd+0x290>
 8006a18:	2ba8      	cmp	r3, #168	; 0xa8
 8006a1a:	f300 814d 	bgt.w	8006cb8 <SCSI_ProcessCmd+0x2d8>
 8006a1e:	2b5a      	cmp	r3, #90	; 0x5a
 8006a20:	f300 80c0 	bgt.w	8006ba4 <SCSI_ProcessCmd+0x1c4>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f2c0 8147 	blt.w	8006cb8 <SCSI_ProcessCmd+0x2d8>
 8006a2a:	2b5a      	cmp	r3, #90	; 0x5a
 8006a2c:	f200 8144 	bhi.w	8006cb8 <SCSI_ProcessCmd+0x2d8>
 8006a30:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <SCSI_ProcessCmd+0x58>)
 8006a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a36:	bf00      	nop
 8006a38:	08006bab 	.word	0x08006bab
 8006a3c:	08006cb9 	.word	0x08006cb9
 8006a40:	08006cb9 	.word	0x08006cb9
 8006a44:	08006bbd 	.word	0x08006bbd
 8006a48:	08006cb9 	.word	0x08006cb9
 8006a4c:	08006cb9 	.word	0x08006cb9
 8006a50:	08006cb9 	.word	0x08006cb9
 8006a54:	08006cb9 	.word	0x08006cb9
 8006a58:	08006cb9 	.word	0x08006cb9
 8006a5c:	08006cb9 	.word	0x08006cb9
 8006a60:	08006cb9 	.word	0x08006cb9
 8006a64:	08006cb9 	.word	0x08006cb9
 8006a68:	08006cb9 	.word	0x08006cb9
 8006a6c:	08006cb9 	.word	0x08006cb9
 8006a70:	08006cb9 	.word	0x08006cb9
 8006a74:	08006cb9 	.word	0x08006cb9
 8006a78:	08006cb9 	.word	0x08006cb9
 8006a7c:	08006cb9 	.word	0x08006cb9
 8006a80:	08006bcf 	.word	0x08006bcf
 8006a84:	08006cb9 	.word	0x08006cb9
 8006a88:	08006cb9 	.word	0x08006cb9
 8006a8c:	08006cb9 	.word	0x08006cb9
 8006a90:	08006cb9 	.word	0x08006cb9
 8006a94:	08006cb9 	.word	0x08006cb9
 8006a98:	08006cb9 	.word	0x08006cb9
 8006a9c:	08006cb9 	.word	0x08006cb9
 8006aa0:	08006c05 	.word	0x08006c05
 8006aa4:	08006be1 	.word	0x08006be1
 8006aa8:	08006cb9 	.word	0x08006cb9
 8006aac:	08006cb9 	.word	0x08006cb9
 8006ab0:	08006bf3 	.word	0x08006bf3
 8006ab4:	08006cb9 	.word	0x08006cb9
 8006ab8:	08006cb9 	.word	0x08006cb9
 8006abc:	08006cb9 	.word	0x08006cb9
 8006ac0:	08006cb9 	.word	0x08006cb9
 8006ac4:	08006c29 	.word	0x08006c29
 8006ac8:	08006cb9 	.word	0x08006cb9
 8006acc:	08006c3b 	.word	0x08006c3b
 8006ad0:	08006cb9 	.word	0x08006cb9
 8006ad4:	08006cb9 	.word	0x08006cb9
 8006ad8:	08006c5f 	.word	0x08006c5f
 8006adc:	08006cb9 	.word	0x08006cb9
 8006ae0:	08006c83 	.word	0x08006c83
 8006ae4:	08006cb9 	.word	0x08006cb9
 8006ae8:	08006cb9 	.word	0x08006cb9
 8006aec:	08006cb9 	.word	0x08006cb9
 8006af0:	08006cb9 	.word	0x08006cb9
 8006af4:	08006ca7 	.word	0x08006ca7
 8006af8:	08006cb9 	.word	0x08006cb9
 8006afc:	08006cb9 	.word	0x08006cb9
 8006b00:	08006cb9 	.word	0x08006cb9
 8006b04:	08006cb9 	.word	0x08006cb9
 8006b08:	08006cb9 	.word	0x08006cb9
 8006b0c:	08006cb9 	.word	0x08006cb9
 8006b10:	08006cb9 	.word	0x08006cb9
 8006b14:	08006cb9 	.word	0x08006cb9
 8006b18:	08006cb9 	.word	0x08006cb9
 8006b1c:	08006cb9 	.word	0x08006cb9
 8006b20:	08006cb9 	.word	0x08006cb9
 8006b24:	08006cb9 	.word	0x08006cb9
 8006b28:	08006cb9 	.word	0x08006cb9
 8006b2c:	08006cb9 	.word	0x08006cb9
 8006b30:	08006cb9 	.word	0x08006cb9
 8006b34:	08006cb9 	.word	0x08006cb9
 8006b38:	08006cb9 	.word	0x08006cb9
 8006b3c:	08006cb9 	.word	0x08006cb9
 8006b40:	08006cb9 	.word	0x08006cb9
 8006b44:	08006cb9 	.word	0x08006cb9
 8006b48:	08006cb9 	.word	0x08006cb9
 8006b4c:	08006cb9 	.word	0x08006cb9
 8006b50:	08006cb9 	.word	0x08006cb9
 8006b54:	08006cb9 	.word	0x08006cb9
 8006b58:	08006cb9 	.word	0x08006cb9
 8006b5c:	08006cb9 	.word	0x08006cb9
 8006b60:	08006cb9 	.word	0x08006cb9
 8006b64:	08006cb9 	.word	0x08006cb9
 8006b68:	08006cb9 	.word	0x08006cb9
 8006b6c:	08006cb9 	.word	0x08006cb9
 8006b70:	08006cb9 	.word	0x08006cb9
 8006b74:	08006cb9 	.word	0x08006cb9
 8006b78:	08006cb9 	.word	0x08006cb9
 8006b7c:	08006cb9 	.word	0x08006cb9
 8006b80:	08006cb9 	.word	0x08006cb9
 8006b84:	08006cb9 	.word	0x08006cb9
 8006b88:	08006cb9 	.word	0x08006cb9
 8006b8c:	08006cb9 	.word	0x08006cb9
 8006b90:	08006cb9 	.word	0x08006cb9
 8006b94:	08006cb9 	.word	0x08006cb9
 8006b98:	08006cb9 	.word	0x08006cb9
 8006b9c:	08006cb9 	.word	0x08006cb9
 8006ba0:	08006c17 	.word	0x08006c17
 8006ba4:	2b9e      	cmp	r3, #158	; 0x9e
 8006ba6:	d051      	beq.n	8006c4c <SCSI_ProcessCmd+0x26c>
 8006ba8:	e086      	b.n	8006cb8 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8006baa:	7afb      	ldrb	r3, [r7, #11]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f893 	bl	8006cdc <SCSI_TestUnitReady>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8006bba:	e089      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8006bbc:	7afb      	ldrb	r3, [r7, #11]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 fb38 	bl	8007238 <SCSI_RequestSense>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	75fb      	strb	r3, [r7, #23]
      break;
 8006bcc:	e080      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8006bce:	7afb      	ldrb	r3, [r7, #11]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 f8d1 	bl	8006d7c <SCSI_Inquiry>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bde:	e077      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8006be0:	7afb      	ldrb	r3, [r7, #11]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	4619      	mov	r1, r3
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 fbec 	bl	80073c4 <SCSI_StartStopUnit>
 8006bec:	4603      	mov	r3, r0
 8006bee:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf0:	e06e      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8006bf2:	7afb      	ldrb	r3, [r7, #11]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 fc34 	bl	8007466 <SCSI_AllowPreventRemovable>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	75fb      	strb	r3, [r7, #23]
      break;
 8006c02:	e065      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8006c04:	7afb      	ldrb	r3, [r7, #11]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fabc 	bl	8007188 <SCSI_ModeSense6>
 8006c10:	4603      	mov	r3, r0
 8006c12:	75fb      	strb	r3, [r7, #23]
      break;
 8006c14:	e05c      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8006c16:	7afb      	ldrb	r3, [r7, #11]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 fadf 	bl	80071e0 <SCSI_ModeSense10>
 8006c22:	4603      	mov	r3, r0
 8006c24:	75fb      	strb	r3, [r7, #23]
      break;
 8006c26:	e053      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8006c28:	7afb      	ldrb	r3, [r7, #11]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 fa37 	bl	80070a2 <SCSI_ReadFormatCapacity>
 8006c34:	4603      	mov	r3, r0
 8006c36:	75fb      	strb	r3, [r7, #23]
      break;
 8006c38:	e04a      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8006c3a:	7afb      	ldrb	r3, [r7, #11]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f90f 	bl	8006e64 <SCSI_ReadCapacity10>
 8006c46:	4603      	mov	r3, r0
 8006c48:	75fb      	strb	r3, [r7, #23]
      break;
 8006c4a:	e041      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8006c4c:	7afb      	ldrb	r3, [r7, #11]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	4619      	mov	r1, r3
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f97b 	bl	8006f4e <SCSI_ReadCapacity16>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c5c:	e038      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8006c5e:	7afb      	ldrb	r3, [r7, #11]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	4619      	mov	r1, r3
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 fc27 	bl	80074b8 <SCSI_Read10>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c6e:	e02f      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8006c70:	7afb      	ldrb	r3, [r7, #11]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	4619      	mov	r1, r3
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 fcbe 	bl	80075f8 <SCSI_Read12>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c80:	e026      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8006c82:	7afb      	ldrb	r3, [r7, #11]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	4619      	mov	r1, r3
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 fd61 	bl	8007750 <SCSI_Write10>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	75fb      	strb	r3, [r7, #23]
      break;
 8006c92:	e01d      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8006c94:	7afb      	ldrb	r3, [r7, #11]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 fe20 	bl	80078e0 <SCSI_Write12>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca4:	e014      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8006ca6:	7afb      	ldrb	r3, [r7, #11]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	4619      	mov	r1, r3
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 feef 	bl	8007a90 <SCSI_Verify10>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb6:	e00b      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006cb8:	7af9      	ldrb	r1, [r7, #11]
 8006cba:	2320      	movs	r3, #32
 8006cbc:	2205      	movs	r2, #5
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 fb39 	bl	8007336 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8006cca:	23ff      	movs	r3, #255	; 0xff
 8006ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cce:	bf00      	nop
  }

  return ret;
 8006cd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006cf0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d102      	bne.n	8006cfe <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8006cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cfc:	e03a      	b.n	8006d74 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00a      	beq.n	8006d1e <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006d0e:	2320      	movs	r3, #32
 8006d10:	2205      	movs	r2, #5
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 fb0f 	bl	8007336 <SCSI_SenseCode>

    return -1;
 8006d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d1c:	e02a      	b.n	8006d74 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d10b      	bne.n	8006d40 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006d28:	7af9      	ldrb	r1, [r7, #11]
 8006d2a:	233a      	movs	r3, #58	; 0x3a
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 fb01 	bl	8007336 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2205      	movs	r2, #5
 8006d38:	721a      	strb	r2, [r3, #8]
    return -1;
 8006d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d3e:	e019      	b.n	8006d74 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	7afa      	ldrb	r2, [r7, #11]
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	4798      	blx	r3
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00b      	beq.n	8006d6c <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006d54:	7af9      	ldrb	r1, [r7, #11]
 8006d56:	233a      	movs	r3, #58	; 0x3a
 8006d58:	2202      	movs	r2, #2
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 faeb 	bl	8007336 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	2205      	movs	r2, #5
 8006d64:	721a      	strb	r2, [r3, #8]

    return -1;
 8006d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d6a:	e003      	b.n	8006d74 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	60da      	str	r2, [r3, #12]

  return 0;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	460b      	mov	r3, r1
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006d90:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d102      	bne.n	8006d9e <SCSI_Inquiry+0x22>
  {
    return -1;
 8006d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d9c:	e05a      	b.n	8006e54 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006dae:	2320      	movs	r3, #32
 8006db0:	2205      	movs	r2, #5
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 fabf 	bl	8007336 <SCSI_SenseCode>
    return -1;
 8006db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dbc:	e04a      	b.n	8006e54 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d020      	beq.n	8006e0e <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	3302      	adds	r3, #2
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d105      	bne.n	8006de2 <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8006dd6:	2206      	movs	r2, #6
 8006dd8:	4920      	ldr	r1, [pc, #128]	; (8006e5c <SCSI_Inquiry+0xe0>)
 8006dda:	69b8      	ldr	r0, [r7, #24]
 8006ddc:	f000 ffc2 	bl	8007d64 <SCSI_UpdateBotData>
 8006de0:	e037      	b.n	8006e52 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3302      	adds	r3, #2
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b80      	cmp	r3, #128	; 0x80
 8006dea:	d105      	bne.n	8006df8 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8006dec:	2208      	movs	r2, #8
 8006dee:	491c      	ldr	r1, [pc, #112]	; (8006e60 <SCSI_Inquiry+0xe4>)
 8006df0:	69b8      	ldr	r0, [r7, #24]
 8006df2:	f000 ffb7 	bl	8007d64 <SCSI_UpdateBotData>
 8006df6:	e02c      	b.n	8006e52 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006dfe:	2324      	movs	r3, #36	; 0x24
 8006e00:	2205      	movs	r2, #5
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 fa97 	bl	8007336 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8006e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e0c:	e022      	b.n	8006e54 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData_MSC)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006e14:	69d9      	ldr	r1, [r3, #28]
 8006e16:	7afa      	ldrb	r2, [r7, #11]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	3304      	adds	r3, #4
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	3305      	adds	r3, #5
 8006e2e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3304      	adds	r3, #4
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	8bfa      	ldrh	r2, [r7, #30]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d303      	bcc.n	8006e46 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3304      	adds	r3, #4
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8006e46:	8bfb      	ldrh	r3, [r7, #30]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6979      	ldr	r1, [r7, #20]
 8006e4c:	69b8      	ldr	r0, [r7, #24]
 8006e4e:	f000 ff89 	bl	8007d64 <SCSI_UpdateBotData>
  }

  return 0;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3720      	adds	r7, #32
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	20000370 	.word	0x20000370
 8006e60:	20000378 	.word	0x20000378

08006e64 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006e78:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d102      	bne.n	8006e86 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8006e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e84:	e05f      	b.n	8006f46 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8006e9a:	7af8      	ldrb	r0, [r7, #11]
 8006e9c:	4798      	blx	r3
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006ea2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d104      	bne.n	8006eb4 <SCSI_ReadCapacity10+0x50>
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d108      	bne.n	8006ec6 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006eb4:	7af9      	ldrb	r1, [r7, #11]
 8006eb6:	233a      	movs	r3, #58	; 0x3a
 8006eb8:	2202      	movs	r2, #2
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fa3b 	bl	8007336 <SCSI_SenseCode>
    return -1;
 8006ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ec4:	e03f      	b.n	8006f46 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	0e1b      	lsrs	r3, r3, #24
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006edc:	3b01      	subs	r3, #1
 8006ede:	0c1b      	lsrs	r3, r3, #16
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006eec:	3b01      	subs	r3, #1
 8006eee:	0a1b      	lsrs	r3, r3, #8
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	3b01      	subs	r3, #1
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006f0c:	161b      	asrs	r3, r3, #24
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006f1a:	141b      	asrs	r3, r3, #16
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006f28:	0a1b      	lsrs	r3, r3, #8
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2208      	movs	r2, #8
 8006f42:	60da      	str	r2, [r3, #12]

  return 0;
 8006f44:	2300      	movs	r3, #0

}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b088      	sub	sp, #32
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	460b      	mov	r3, r1
 8006f58:	607a      	str	r2, [r7, #4]
 8006f5a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006f62:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d102      	bne.n	8006f70 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8006f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f6e:	e094      	b.n	800709a <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8006f84:	7af8      	ldrb	r0, [r7, #11]
 8006f86:	4798      	blx	r3
 8006f88:	4603      	mov	r3, r0
 8006f8a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006f8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d104      	bne.n	8006f9e <SCSI_ReadCapacity16+0x50>
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d108      	bne.n	8006fb0 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006f9e:	7af9      	ldrb	r1, [r7, #11]
 8006fa0:	233a      	movs	r3, #58	; 0x3a
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f9c6 	bl	8007336 <SCSI_SenseCode>
    return -1;
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fae:	e074      	b.n	800709a <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	330a      	adds	r3, #10
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	330b      	adds	r3, #11
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006fc0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	330c      	adds	r3, #12
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8006fca:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	320d      	adds	r2, #13
 8006fd0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8006fd2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	77fb      	strb	r3, [r7, #31]
 8006fdc:	e007      	b.n	8006fee <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8006fde:	7ffb      	ldrb	r3, [r7, #31]
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006fe8:	7ffb      	ldrb	r3, [r7, #31]
 8006fea:	3301      	adds	r3, #1
 8006fec:	77fb      	strb	r3, [r7, #31]
 8006fee:	7ffa      	ldrb	r2, [r7, #31]
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d3f2      	bcc.n	8006fde <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ffe:	3b01      	subs	r3, #1
 8007000:	0e1b      	lsrs	r3, r3, #24
 8007002:	b2da      	uxtb	r2, r3
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800700e:	3b01      	subs	r3, #1
 8007010:	0c1b      	lsrs	r3, r3, #16
 8007012:	b2da      	uxtb	r2, r3
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800701e:	3b01      	subs	r3, #1
 8007020:	0a1b      	lsrs	r3, r3, #8
 8007022:	b2da      	uxtb	r2, r3
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800702e:	b2db      	uxtb	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b2da      	uxtb	r2, r3
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800703e:	161b      	asrs	r3, r3, #24
 8007040:	b2da      	uxtb	r2, r3
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800704c:	141b      	asrs	r3, r3, #16
 800704e:	b2da      	uxtb	r2, r3
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800705a:	0a1b      	lsrs	r3, r3, #8
 800705c:	b29b      	uxth	r3, r3
 800705e:	b2da      	uxtb	r2, r3
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800706a:	b2da      	uxtb	r2, r3
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	330a      	adds	r3, #10
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	330b      	adds	r3, #11
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007080:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	330c      	adds	r3, #12
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800708a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	320d      	adds	r2, #13
 8007090:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007092:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	60da      	str	r2, [r3, #12]

  return 0;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3720      	adds	r7, #32
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b088      	sub	sp, #32
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	460b      	mov	r3, r1
 80070ac:	607a      	str	r2, [r7, #4]
 80070ae:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80070b6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d102      	bne.n	80070c4 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 80070be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070c2:	e05c      	b.n	800717e <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &blk_nbr, &blk_size);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f107 0214 	add.w	r2, r7, #20
 80070d0:	f107 0110 	add.w	r1, r7, #16
 80070d4:	7af8      	ldrb	r0, [r7, #11]
 80070d6:	4798      	blx	r3
 80070d8:	4603      	mov	r3, r0
 80070da:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80070dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d104      	bne.n	80070ee <SCSI_ReadFormatCapacity+0x4c>
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d108      	bne.n	8007100 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80070ee:	7af9      	ldrb	r1, [r7, #11]
 80070f0:	233a      	movs	r3, #58	; 0x3a
 80070f2:	2202      	movs	r2, #2
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 f91e 	bl	8007336 <SCSI_SenseCode>
    return -1;
 80070fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070fe:	e03e      	b.n	800717e <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8007100:	2300      	movs	r3, #0
 8007102:	83fb      	strh	r3, [r7, #30]
 8007104:	e007      	b.n	8007116 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8007106:	8bfb      	ldrh	r3, [r7, #30]
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	4413      	add	r3, r2
 800710c:	2200      	movs	r2, #0
 800710e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8007110:	8bfb      	ldrh	r3, [r7, #30]
 8007112:	3301      	adds	r3, #1
 8007114:	83fb      	strh	r3, [r7, #30]
 8007116:	8bfb      	ldrh	r3, [r7, #30]
 8007118:	2b0b      	cmp	r3, #11
 800711a:	d9f4      	bls.n	8007106 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	2208      	movs	r2, #8
 8007120:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	3b01      	subs	r3, #1
 8007126:	0e1b      	lsrs	r3, r3, #24
 8007128:	b2da      	uxtb	r2, r3
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	3b01      	subs	r3, #1
 8007132:	0c1b      	lsrs	r3, r3, #16
 8007134:	b2da      	uxtb	r2, r3
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	3b01      	subs	r3, #1
 800713e:	0a1b      	lsrs	r3, r3, #8
 8007140:	b2da      	uxtb	r2, r3
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	3b01      	subs	r3, #1
 800714c:	b2da      	uxtb	r2, r3
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	2202      	movs	r2, #2
 8007156:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007158:	8abb      	ldrh	r3, [r7, #20]
 800715a:	141b      	asrs	r3, r3, #16
 800715c:	b2da      	uxtb	r2, r3
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007162:	8abb      	ldrh	r3, [r7, #20]
 8007164:	0a1b      	lsrs	r3, r3, #8
 8007166:	b29b      	uxth	r3, r3
 8007168:	b2da      	uxtb	r2, r3
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800716e:	8abb      	ldrh	r3, [r7, #20]
 8007170:	b2da      	uxtb	r2, r3
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	220c      	movs	r2, #12
 800717a:	60da      	str	r2, [r3, #12]

  return 0;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3720      	adds	r7, #32
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	460b      	mov	r3, r1
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800719c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800719e:	2317      	movs	r3, #23
 80071a0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <SCSI_ModeSense6+0x26>
  {
    return -1;
 80071a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071ac:	e011      	b.n	80071d2 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3304      	adds	r3, #4
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	8afa      	ldrh	r2, [r7, #22]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d303      	bcc.n	80071c4 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3304      	adds	r3, #4
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80071c4:	8afb      	ldrh	r3, [r7, #22]
 80071c6:	461a      	mov	r2, r3
 80071c8:	4904      	ldr	r1, [pc, #16]	; (80071dc <SCSI_ModeSense6+0x54>)
 80071ca:	6938      	ldr	r0, [r7, #16]
 80071cc:	f000 fdca 	bl	8007d64 <SCSI_UpdateBotData>

  return 0;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20000380 	.word	0x20000380

080071e0 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	460b      	mov	r3, r1
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80071f4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80071f6:	231b      	movs	r3, #27
 80071f8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d102      	bne.n	8007206 <SCSI_ModeSense10+0x26>
  {
    return -1;
 8007200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007204:	e011      	b.n	800722a <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3308      	adds	r3, #8
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	b29b      	uxth	r3, r3
 800720e:	8afa      	ldrh	r2, [r7, #22]
 8007210:	429a      	cmp	r2, r3
 8007212:	d303      	bcc.n	800721c <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3308      	adds	r3, #8
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800721c:	8afb      	ldrh	r3, [r7, #22]
 800721e:	461a      	mov	r2, r3
 8007220:	4904      	ldr	r1, [pc, #16]	; (8007234 <SCSI_ModeSense10+0x54>)
 8007222:	6938      	ldr	r0, [r7, #16]
 8007224:	f000 fd9e 	bl	8007d64 <SCSI_UpdateBotData>

  return 0;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20000398 	.word	0x20000398

08007238 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	460b      	mov	r3, r1
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800724c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d102      	bne.n	800725a <SCSI_RequestSense+0x22>
  {
    return -1;
 8007254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007258:	e069      	b.n	800732e <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10a      	bne.n	800727a <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800726a:	2320      	movs	r3, #32
 800726c:	2205      	movs	r2, #5
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 f861 	bl	8007336 <SCSI_SenseCode>
    return -1;
 8007274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007278:	e059      	b.n	800732e <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800727a:	2300      	movs	r3, #0
 800727c:	75fb      	strb	r3, [r7, #23]
 800727e:	e007      	b.n	8007290 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8007280:	7dfb      	ldrb	r3, [r7, #23]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	4413      	add	r3, r2
 8007286:	2200      	movs	r2, #0
 8007288:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	3301      	adds	r3, #1
 800728e:	75fb      	strb	r3, [r7, #23]
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	2b11      	cmp	r3, #17
 8007294:	d9f4      	bls.n	8007280 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	2270      	movs	r2, #112	; 0x70
 800729a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	220c      	movs	r2, #12
 80072a0:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d02e      	beq.n	8007310 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80072b8:	461a      	mov	r2, r3
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	3248      	adds	r2, #72	; 0x48
 80072be:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	3348      	adds	r3, #72	; 0x48
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	4413      	add	r3, r2
 80072d4:	791a      	ldrb	r2, [r3, #4]
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	3348      	adds	r3, #72	; 0x48
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	4413      	add	r3, r2
 80072e8:	795a      	ldrb	r2, [r3, #5]
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80072f4:	3301      	adds	r3, #1
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007304:	2b04      	cmp	r3, #4
 8007306:	d103      	bne.n	8007310 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2212      	movs	r2, #18
 8007314:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	3304      	adds	r3, #4
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b12      	cmp	r3, #18
 800731e:	d805      	bhi.n	800732c <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3304      	adds	r3, #4
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	4608      	mov	r0, r1
 8007340:	4611      	mov	r1, r2
 8007342:	461a      	mov	r2, r3
 8007344:	4603      	mov	r3, r0
 8007346:	70fb      	strb	r3, [r7, #3]
 8007348:	460b      	mov	r3, r1
 800734a:	70bb      	strb	r3, [r7, #2]
 800734c:	4613      	mov	r3, r2
 800734e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007356:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d02c      	beq.n	80073b8 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007364:	461a      	mov	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3248      	adds	r2, #72	; 0x48
 800736a:	78b9      	ldrb	r1, [r7, #2]
 800736c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	3348      	adds	r3, #72	; 0x48
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	4413      	add	r3, r2
 800737e:	787a      	ldrb	r2, [r7, #1]
 8007380:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	3348      	adds	r3, #72	; 0x48
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	4413      	add	r3, r2
 8007390:	2200      	movs	r2, #0
 8007392:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800739a:	3301      	adds	r3, #1
 800739c:	b2da      	uxtb	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d105      	bne.n	80073ba <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 80073b6:	e000      	b.n	80073ba <SCSI_SenseCode+0x84>
    return;
 80073b8:	bf00      	nop
  }
}
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	460b      	mov	r3, r1
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80073d8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 80073e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073e4:	e03b      	b.n	800745e <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d10f      	bne.n	8007410 <SCSI_StartStopUnit+0x4c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3304      	adds	r3, #4
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d108      	bne.n	8007410 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80073fe:	7af9      	ldrb	r1, [r7, #11]
 8007400:	2324      	movs	r3, #36	; 0x24
 8007402:	2205      	movs	r2, #5
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7ff ff96 	bl	8007336 <SCSI_SenseCode>

    return -1;
 800740a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800740e:	e026      	b.n	800745e <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3304      	adds	r3, #4
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	2b01      	cmp	r3, #1
 800741c:	d104      	bne.n	8007428 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007426:	e016      	b.n	8007456 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3304      	adds	r3, #4
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d104      	bne.n	8007440 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2202      	movs	r2, #2
 800743a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800743e:	e00a      	b.n	8007456 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3304      	adds	r3, #4
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	2b03      	cmp	r3, #3
 800744c:	d103      	bne.n	8007456 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2200      	movs	r2, #0
 800745a:	60da      	str	r2, [r3, #12]

  return 0;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007466:	b480      	push	{r7}
 8007468:	b087      	sub	sp, #28
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	460b      	mov	r3, r1
 8007470:	607a      	str	r2, [r7, #4]
 8007472:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800747a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d102      	bne.n	8007488 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 8007482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007486:	e011      	b.n	80074ac <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3304      	adds	r3, #4
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d104      	bne.n	800749c <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800749a:	e003      	b.n	80074a4 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2200      	movs	r2, #0
 80074a8:	60da      	str	r2, [r3, #12]

  return 0;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	371c      	adds	r7, #28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	460b      	mov	r3, r1
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80074cc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d102      	bne.n	80074da <SCSI_Read10+0x22>
  {
    return -1;
 80074d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074d8:	e08a      	b.n	80075f0 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	7a1b      	ldrb	r3, [r3, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d17c      	bne.n	80075dc <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80074e8:	b25b      	sxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	db0a      	blt.n	8007504 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80074f4:	2320      	movs	r3, #32
 80074f6:	2205      	movs	r2, #5
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff ff1c 	bl	8007336 <SCSI_SenseCode>
      return -1;
 80074fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007502:	e075      	b.n	80075f0 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800750a:	2b02      	cmp	r3, #2
 800750c:	d108      	bne.n	8007520 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800750e:	7af9      	ldrb	r1, [r7, #11]
 8007510:	233a      	movs	r3, #58	; 0x3a
 8007512:	2202      	movs	r2, #2
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f7ff ff0e 	bl	8007336 <SCSI_SenseCode>

      return -1;
 800751a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800751e:	e067      	b.n	80075f0 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	7afa      	ldrb	r2, [r7, #11]
 800752a:	4610      	mov	r0, r2
 800752c:	4798      	blx	r3
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d008      	beq.n	8007546 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007534:	7af9      	ldrb	r1, [r7, #11]
 8007536:	233a      	movs	r3, #58	; 0x3a
 8007538:	2202      	movs	r2, #2
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff fefb 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007544:	e054      	b.n	80075f0 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3302      	adds	r3, #2
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3303      	adds	r3, #3
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007556:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3304      	adds	r3, #4
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007560:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	3205      	adds	r2, #5
 8007566:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007568:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3307      	adds	r3, #7
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	021b      	lsls	r3, r3, #8
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	3208      	adds	r2, #8
 800757c:	7812      	ldrb	r2, [r2, #0]
 800757e:	431a      	orrs	r2, r3
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007592:	7af9      	ldrb	r1, [r7, #11]
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fab4 	bl	8007b02 <SCSI_CheckAddressRange>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	da02      	bge.n	80075a6 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80075a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075a4:	e024      	b.n	80075f0 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80075b2:	6979      	ldr	r1, [r7, #20]
 80075b4:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80075b8:	fb01 f303 	mul.w	r3, r1, r3
 80075bc:	429a      	cmp	r2, r3
 80075be:	d00a      	beq.n	80075d6 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80075c6:	2320      	movs	r3, #32
 80075c8:	2205      	movs	r2, #5
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f7ff feb3 	bl	8007336 <SCSI_SenseCode>
      return -1;
 80075d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075d4:	e00c      	b.n	80075f0 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2202      	movs	r2, #2
 80075da:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075e2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80075e4:	7afb      	ldrb	r3, [r7, #11]
 80075e6:	4619      	mov	r1, r3
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 fab3 	bl	8007b54 <SCSI_ProcessRead>
 80075ee:	4603      	mov	r3, r0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	460b      	mov	r3, r1
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800760c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d102      	bne.n	800761a <SCSI_Read12+0x22>
  {
    return -1;
 8007614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007618:	e095      	b.n	8007746 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	7a1b      	ldrb	r3, [r3, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f040 8087 	bne.w	8007732 <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800762a:	b25b      	sxtb	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	db0a      	blt.n	8007646 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007636:	2320      	movs	r3, #32
 8007638:	2205      	movs	r2, #5
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f7ff fe7b 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007644:	e07f      	b.n	8007746 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800764c:	2b02      	cmp	r3, #2
 800764e:	d108      	bne.n	8007662 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007650:	7af9      	ldrb	r1, [r7, #11]
 8007652:	233a      	movs	r3, #58	; 0x3a
 8007654:	2202      	movs	r2, #2
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7ff fe6d 	bl	8007336 <SCSI_SenseCode>
      return -1;
 800765c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007660:	e071      	b.n	8007746 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	7afa      	ldrb	r2, [r7, #11]
 800766c:	4610      	mov	r0, r2
 800766e:	4798      	blx	r3
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d008      	beq.n	8007688 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007676:	7af9      	ldrb	r1, [r7, #11]
 8007678:	233a      	movs	r3, #58	; 0x3a
 800767a:	2202      	movs	r2, #2
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff fe5a 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007686:	e05e      	b.n	8007746 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3302      	adds	r3, #2
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3303      	adds	r3, #3
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007698:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3304      	adds	r3, #4
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80076a2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	3205      	adds	r2, #5
 80076a8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80076aa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	3306      	adds	r3, #6
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3307      	adds	r3, #7
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80076c2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3308      	adds	r3, #8
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80076cc:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	3209      	adds	r2, #9
 80076d2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80076d4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80076e8:	7af9      	ldrb	r1, [r7, #11]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 fa09 	bl	8007b02 <SCSI_CheckAddressRange>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	da02      	bge.n	80076fc <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80076f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076fa:	e024      	b.n	8007746 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007708:	6979      	ldr	r1, [r7, #20]
 800770a:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800770e:	fb01 f303 	mul.w	r3, r1, r3
 8007712:	429a      	cmp	r2, r3
 8007714:	d00a      	beq.n	800772c <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800771c:	2320      	movs	r3, #32
 800771e:	2205      	movs	r2, #5
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f7ff fe08 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800772a:	e00c      	b.n	8007746 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	2202      	movs	r2, #2
 8007730:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007738:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800773a:	7afb      	ldrb	r3, [r7, #11]
 800773c:	4619      	mov	r1, r3
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fa08 	bl	8007b54 <SCSI_ProcessRead>
 8007744:	4603      	mov	r3, r0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3718      	adds	r7, #24
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	460b      	mov	r3, r1
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007764:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d102      	bne.n	8007772 <SCSI_Write10+0x22>
  {
    return -1;
 800776c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007770:	e0b0      	b.n	80078d4 <SCSI_Write10+0x184>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	7a1b      	ldrb	r3, [r3, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	f040 80a6 	bne.w	80078c8 <SCSI_Write10+0x178>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800778c:	2320      	movs	r3, #32
 800778e:	2205      	movs	r2, #5
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f7ff fdd0 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800779a:	e09b      	b.n	80078d4 <SCSI_Write10+0x184>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80077a2:	b25b      	sxtb	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	da0a      	bge.n	80077be <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80077ae:	2320      	movs	r3, #32
 80077b0:	2205      	movs	r2, #5
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f7ff fdbf 	bl	8007336 <SCSI_SenseCode>
      return -1;
 80077b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077bc:	e08a      	b.n	80078d4 <SCSI_Write10+0x184>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	7afa      	ldrb	r2, [r7, #11]
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d008      	beq.n	80077e4 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80077d2:	7af9      	ldrb	r1, [r7, #11]
 80077d4:	233a      	movs	r3, #58	; 0x3a
 80077d6:	2202      	movs	r2, #2
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f7ff fdac 	bl	8007336 <SCSI_SenseCode>
      return -1;
 80077de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077e2:	e077      	b.n	80078d4 <SCSI_Write10+0x184>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsWriteProtected(lun) != 0)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	7afa      	ldrb	r2, [r7, #11]
 80077ee:	4610      	mov	r0, r2
 80077f0:	4798      	blx	r3
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d008      	beq.n	800780a <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80077f8:	7af9      	ldrb	r1, [r7, #11]
 80077fa:	2327      	movs	r3, #39	; 0x27
 80077fc:	2202      	movs	r2, #2
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f7ff fd99 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007808:	e064      	b.n	80078d4 <SCSI_Write10+0x184>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3302      	adds	r3, #2
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3303      	adds	r3, #3
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800781a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3304      	adds	r3, #4
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007824:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	3205      	adds	r2, #5
 800782a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800782c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3307      	adds	r3, #7
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	3208      	adds	r2, #8
 8007840:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007842:	431a      	orrs	r2, r3
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007856:	7af9      	ldrb	r1, [r7, #11]
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 f952 	bl	8007b02 <SCSI_CheckAddressRange>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	da02      	bge.n	800786a <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007868:	e034      	b.n	80078d4 <SCSI_Write10+0x184>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007876:	fb02 f303 	mul.w	r3, r2, r3
 800787a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	429a      	cmp	r2, r3
 8007886:	d00a      	beq.n	800789e <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800788e:	2320      	movs	r3, #32
 8007890:	2205      	movs	r2, #5
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f7ff fd4f 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800789c:	e01a      	b.n	80078d4 <SCSI_Write10+0x184>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078a4:	bf28      	it	cs
 80078a6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80078aa:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2201      	movs	r2, #1
 80078b0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 80078b2:	4b0a      	ldr	r3, [pc, #40]	; (80078dc <SCSI_Write10+0x18c>)
 80078b4:	7819      	ldrb	r1, [r3, #0]
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f103 0210 	add.w	r2, r3, #16
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f001 fe87 	bl	80095d2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	e005      	b.n	80078d4 <SCSI_Write10+0x184>
    return SCSI_ProcessWrite(pdev, lun);
 80078c8:	7afb      	ldrb	r3, [r7, #11]
 80078ca:	4619      	mov	r1, r3
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 f9bd 	bl	8007c4c <SCSI_ProcessWrite>
 80078d2:	4603      	mov	r3, r0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	200002c7 	.word	0x200002c7

080078e0 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	460b      	mov	r3, r1
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80078f4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <SCSI_Write12+0x22>
  {
    return -1;
 80078fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007900:	e0c0      	b.n	8007a84 <SCSI_Write12+0x1a4>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	7a1b      	ldrb	r3, [r3, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f040 80b6 	bne.w	8007a78 <SCSI_Write12+0x198>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10a      	bne.n	800792c <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800791c:	2320      	movs	r3, #32
 800791e:	2205      	movs	r2, #5
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f7ff fd08 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800792a:	e0ab      	b.n	8007a84 <SCSI_Write12+0x1a4>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007932:	b25b      	sxtb	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	da0a      	bge.n	800794e <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800793e:	2320      	movs	r3, #32
 8007940:	2205      	movs	r2, #5
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff fcf7 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800794c:	e09a      	b.n	8007a84 <SCSI_Write12+0x1a4>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	7afa      	ldrb	r2, [r7, #11]
 8007958:	4610      	mov	r0, r2
 800795a:	4798      	blx	r3
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00b      	beq.n	800797a <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007962:	7af9      	ldrb	r1, [r7, #11]
 8007964:	233a      	movs	r3, #58	; 0x3a
 8007966:	2202      	movs	r2, #2
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7ff fce4 	bl	8007336 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	2205      	movs	r2, #5
 8007972:	721a      	strb	r2, [r3, #8]
      return -1;
 8007974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007978:	e084      	b.n	8007a84 <SCSI_Write12+0x1a4>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsWriteProtected(lun) != 0)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	7afa      	ldrb	r2, [r7, #11]
 8007984:	4610      	mov	r0, r2
 8007986:	4798      	blx	r3
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00b      	beq.n	80079a6 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800798e:	7af9      	ldrb	r1, [r7, #11]
 8007990:	2327      	movs	r3, #39	; 0x27
 8007992:	2202      	movs	r2, #2
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f7ff fcce 	bl	8007336 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2205      	movs	r2, #5
 800799e:	721a      	strb	r2, [r3, #8]
      return -1;
 80079a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079a4:	e06e      	b.n	8007a84 <SCSI_Write12+0x1a4>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	3302      	adds	r3, #2
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3303      	adds	r3, #3
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80079b6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3304      	adds	r3, #4
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80079c0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	3205      	adds	r2, #5
 80079c6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80079c8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3306      	adds	r3, #6
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3307      	adds	r3, #7
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80079e0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3308      	adds	r3, #8
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80079ea:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	3209      	adds	r2, #9
 80079f0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80079f2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007a06:	7af9      	ldrb	r1, [r7, #11]
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 f87a 	bl	8007b02 <SCSI_CheckAddressRange>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	da02      	bge.n	8007a1a <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a18:	e034      	b.n	8007a84 <SCSI_Write12+0x1a4>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007a26:	fb02 f303 	mul.w	r3, r2, r3
 8007a2a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d00a      	beq.n	8007a4e <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007a3e:	2320      	movs	r3, #32
 8007a40:	2205      	movs	r2, #5
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f7ff fc77 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a4c:	e01a      	b.n	8007a84 <SCSI_Write12+0x1a4>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a54:	bf28      	it	cs
 8007a56:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007a5a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 8007a62:	4b0a      	ldr	r3, [pc, #40]	; (8007a8c <SCSI_Write12+0x1ac>)
 8007a64:	7819      	ldrb	r1, [r3, #0]
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f103 0210 	add.w	r2, r3, #16
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f001 fdaf 	bl	80095d2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007a74:	2300      	movs	r3, #0
 8007a76:	e005      	b.n	8007a84 <SCSI_Write12+0x1a4>
    return SCSI_ProcessWrite(pdev, lun);
 8007a78:	7afb      	ldrb	r3, [r7, #11]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 f8e5 	bl	8007c4c <SCSI_ProcessWrite>
 8007a82:	4603      	mov	r3, r0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	200002c7 	.word	0x200002c7

08007a90 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007aa4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d102      	bne.n	8007ab2 <SCSI_Verify10+0x22>
  {
    return -1;
 8007aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ab0:	e023      	b.n	8007afa <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d008      	beq.n	8007ad2 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007ac0:	7af9      	ldrb	r1, [r7, #11]
 8007ac2:	2324      	movs	r3, #36	; 0x24
 8007ac4:	2205      	movs	r2, #5
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f7ff fc35 	bl	8007336 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ad0:	e013      	b.n	8007afa <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007ade:	7af9      	ldrb	r1, [r7, #11]
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f80e 	bl	8007b02 <SCSI_CheckAddressRange>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	da02      	bge.n	8007af2 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8007aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007af0:	e003      	b.n	8007afa <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	2200      	movs	r2, #0
 8007af6:	60da      	str	r2, [r3, #12]

  return 0;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3718      	adds	r7, #24
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b086      	sub	sp, #24
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	60f8      	str	r0, [r7, #12]
 8007b0a:	607a      	str	r2, [r7, #4]
 8007b0c:	603b      	str	r3, [r7, #0]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007b18:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d102      	bne.n	8007b26 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8007b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b24:	e011      	b.n	8007b4a <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	441a      	add	r2, r3
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d908      	bls.n	8007b48 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007b36:	7af9      	ldrb	r1, [r7, #11]
 8007b38:	2321      	movs	r3, #33	; 0x21
 8007b3a:	2205      	movs	r2, #5
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f7ff fbfa 	bl	8007336 <SCSI_SenseCode>
    return -1;
 8007b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b46:	e000      	b.n	8007b4a <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3718      	adds	r7, #24
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007b54:	b590      	push	{r4, r7, lr}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007b66:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007b74:	fb02 f303 	mul.w	r3, r2, r3
 8007b78:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d102      	bne.n	8007b86 <SCSI_ProcessRead+0x32>
  {
    return -1;
 8007b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b84:	e05c      	b.n	8007c40 <SCSI_ProcessRead+0xec>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b8c:	bf28      	it	cs
 8007b8e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007b92:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Read(lun, hmsc->bot_data,
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007b9a:	691c      	ldr	r4, [r3, #16]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f103 0110 	add.w	r1, r3, #16
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007bae:	4618      	mov	r0, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Read(lun, hmsc->bot_data,
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	78f8      	ldrb	r0, [r7, #3]
 8007bba:	47a0      	blx	r4
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	da08      	bge.n	8007bd4 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007bc2:	78f9      	ldrb	r1, [r7, #3]
 8007bc4:	2311      	movs	r3, #17
 8007bc6:	2204      	movs	r2, #4
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff fbb4 	bl	8007336 <SCSI_SenseCode>
    return -1;
 8007bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bd2:	e035      	b.n	8007c40 <SCSI_ProcessRead+0xec>
  }

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, hmsc->bot_data, len);
 8007bd4:	4b1c      	ldr	r3, [pc, #112]	; (8007c48 <SCSI_ProcessRead+0xf4>)
 8007bd6:	7819      	ldrb	r1, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f103 0210 	add.w	r2, r3, #16
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 fcd5 	bl	8009590 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bfa:	441a      	add	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007c0e:	4619      	mov	r1, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c16:	1ad2      	subs	r2, r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	1ad2      	subs	r2, r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d102      	bne.n	8007c3e <SCSI_ProcessRead+0xea>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2203      	movs	r2, #3
 8007c3c:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd90      	pop	{r4, r7, pc}
 8007c48:	200002c6 	.word	0x200002c6

08007c4c <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007c4c:	b590      	push	{r4, r7, lr}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007c5e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007c6c:	fb02 f303 	mul.w	r3, r2, r3
 8007c70:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d102      	bne.n	8007c7e <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8007c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c7c:	e06c      	b.n	8007d58 <SCSI_ProcessWrite+0x10c>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c84:	bf28      	it	cs
 8007c86:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007c8a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Write(lun, hmsc->bot_data,
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007c92:	695c      	ldr	r4, [r3, #20]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f103 0110 	add.w	r1, r3, #16
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Write(lun, hmsc->bot_data,
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	78f8      	ldrb	r0, [r7, #3]
 8007cb2:	47a0      	blx	r4
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	da08      	bge.n	8007ccc <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007cba:	78f9      	ldrb	r1, [r7, #3]
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	2204      	movs	r2, #4
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff fb38 	bl	8007336 <SCSI_SenseCode>
    return -1;
 8007cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cca:	e045      	b.n	8007d58 <SCSI_ProcessWrite+0x10c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007cd8:	4619      	mov	r1, r3
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ce0:	441a      	add	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cfc:	1ad2      	subs	r2, r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	1ad2      	subs	r2, r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d104      	bne.n	8007d28 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007d1e:	2100      	movs	r1, #0
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7fe fdb3 	bl	800688c <MSC_BOT_SendCSW>
 8007d26:	e016      	b.n	8007d56 <SCSI_ProcessWrite+0x10a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007d34:	fb02 f303 	mul.w	r3, r2, r3
 8007d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d3c:	bf28      	it	cs
 8007d3e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007d42:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 8007d44:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <SCSI_ProcessWrite+0x114>)
 8007d46:	7819      	ldrb	r1, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f103 0210 	add.w	r2, r3, #16
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 fc3e 	bl	80095d2 <USBD_LL_PrepareReceive>
  }

  return 0;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd90      	pop	{r4, r7, pc}
 8007d60:	200002c7 	.word	0x200002c7

08007d64 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8007d72:	88fb      	ldrh	r3, [r7, #6]
 8007d74:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d102      	bne.n	8007d82 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8007d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d80:	e013      	b.n	8007daa <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8007d82:	8afa      	ldrh	r2, [r7, #22]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8007d88:	e00b      	b.n	8007da2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8007d8a:	8afb      	ldrh	r3, [r7, #22]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8007d90:	8afb      	ldrh	r3, [r7, #22]
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	441a      	add	r2, r3
 8007d96:	8afb      	ldrh	r3, [r7, #22]
 8007d98:	7811      	ldrb	r1, [r2, #0]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	460a      	mov	r2, r1
 8007da0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8007da2:	8afb      	ldrh	r3, [r7, #22]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1f0      	bne.n	8007d8a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b086      	sub	sp, #24
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	60f8      	str	r0, [r7, #12]
 8007dbe:	60b9      	str	r1, [r7, #8]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e01b      	b.n	8007e06 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pConfDesc = NULL;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	79fa      	ldrb	r2, [r7, #7]
 8007df8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f001 fa54 	bl	80092a8 <USBD_LL_Init>
 8007e00:	4603      	mov	r3, r0
 8007e02:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3718      	adds	r7, #24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e02d      	b.n	8007e82 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	7c1b      	ldrb	r3, [r3, #16]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d112      	bne.n	8007e5c <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d01e      	beq.n	8007e80 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4a:	f107 020e 	add.w	r2, r7, #14
 8007e4e:	4610      	mov	r0, r2
 8007e50:	4798      	blx	r3
 8007e52:	4602      	mov	r2, r0
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 8007e5a:	e011      	b.n	8007e80 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e70:	f107 020e 	add.w	r2, r7, #14
 8007e74:	4610      	mov	r0, r2
 8007e76:	4798      	blx	r3
 8007e78:	4602      	mov	r2, r0
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
  }

  return USBD_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f001 fa74 	bl	8009380 <USBD_LL_Start>
 8007e98:	4603      	mov	r3, r0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d009      	beq.n	8007ee6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	78fa      	ldrb	r2, [r7, #3]
 8007edc:	4611      	mov	r1, r2
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	4798      	blx	r3
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d007      	beq.n	8007f16 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	78fa      	ldrb	r2, [r7, #3]
 8007f10:	4611      	mov	r1, r2
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	4798      	blx	r3
  }

  return USBD_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 ff9c 	bl	8008e70 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007f46:	461a      	mov	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f54:	f003 031f 	and.w	r3, r3, #31
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d01a      	beq.n	8007f92 <USBD_LL_SetupStage+0x72>
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d822      	bhi.n	8007fa6 <USBD_LL_SetupStage+0x86>
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <USBD_LL_SetupStage+0x4a>
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d00a      	beq.n	8007f7e <USBD_LL_SetupStage+0x5e>
 8007f68:	e01d      	b.n	8007fa6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fa5c 	bl	8008430 <USBD_StdDevReq>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f7c:	e020      	b.n	8007fc0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fac0 	bl	800850c <USBD_StdItfReq>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f90:	e016      	b.n	8007fc0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 faff 	bl	800859e <USBD_StdEPReq>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fa4:	e00c      	b.n	8007fc0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 fa62 	bl	800947e <USBD_LL_StallEP>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007fbe:	bf00      	nop
  }

  return ret;
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b086      	sub	sp, #24
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	60f8      	str	r0, [r7, #12]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	607a      	str	r2, [r7, #4]
 8007fd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007fd8:	7afb      	ldrb	r3, [r7, #11]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d138      	bne.n	8008050 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007fe4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	d14a      	bne.n	8008086 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d913      	bls.n	8008024 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	1ad2      	subs	r2, r2, r3
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	68da      	ldr	r2, [r3, #12]
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	4293      	cmp	r3, r2
 8008014:	bf28      	it	cs
 8008016:	4613      	movcs	r3, r2
 8008018:	461a      	mov	r2, r3
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f001 f81b 	bl	8009058 <USBD_CtlContinueRx>
 8008022:	e030      	b.n	8008086 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b03      	cmp	r3, #3
 800802e:	d10b      	bne.n	8008048 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d005      	beq.n	8008048 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f001 f816 	bl	800907a <USBD_CtlSendStatus>
 800804e:	e01a      	b.n	8008086 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b03      	cmp	r3, #3
 800805a:	d114      	bne.n	8008086 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00e      	beq.n	8008086 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	7afa      	ldrb	r2, [r7, #11]
 8008072:	4611      	mov	r1, r2
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	4798      	blx	r3
 8008078:	4603      	mov	r3, r0
 800807a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008082:	7dfb      	ldrb	r3, [r7, #23]
 8008084:	e000      	b.n	8008088 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	460b      	mov	r3, r1
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800809e:	7afb      	ldrb	r3, [r7, #11]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d16b      	bne.n	800817c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	3314      	adds	r3, #20
 80080a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d156      	bne.n	8008162 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	689a      	ldr	r2, [r3, #8]
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d914      	bls.n	80080ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	1ad2      	subs	r2, r2, r3
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	461a      	mov	r2, r3
 80080d4:	6879      	ldr	r1, [r7, #4]
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 ff90 	bl	8008ffc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080dc:	2300      	movs	r3, #0
 80080de:	2200      	movs	r2, #0
 80080e0:	2100      	movs	r1, #0
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f001 fa75 	bl	80095d2 <USBD_LL_PrepareReceive>
 80080e8:	e03b      	b.n	8008162 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d11c      	bne.n	8008130 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80080fe:	429a      	cmp	r2, r3
 8008100:	d316      	bcc.n	8008130 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800810c:	429a      	cmp	r2, r3
 800810e:	d20f      	bcs.n	8008130 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008110:	2200      	movs	r2, #0
 8008112:	2100      	movs	r1, #0
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 ff71 	bl	8008ffc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008122:	2300      	movs	r3, #0
 8008124:	2200      	movs	r2, #0
 8008126:	2100      	movs	r1, #0
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f001 fa52 	bl	80095d2 <USBD_LL_PrepareReceive>
 800812e:	e018      	b.n	8008162 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b03      	cmp	r3, #3
 800813a:	d10b      	bne.n	8008154 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d005      	beq.n	8008154 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008154:	2180      	movs	r1, #128	; 0x80
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f001 f991 	bl	800947e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 ff9f 	bl	80090a0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008168:	2b01      	cmp	r3, #1
 800816a:	d122      	bne.n	80081b2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f7ff fe98 	bl	8007ea2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800817a:	e01a      	b.n	80081b2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b03      	cmp	r3, #3
 8008186:	d114      	bne.n	80081b2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00e      	beq.n	80081b2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	7afa      	ldrb	r2, [r7, #11]
 800819e:	4611      	mov	r1, r2
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	4798      	blx	r3
 80081a4:	4603      	mov	r3, r0
 80081a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80081a8:	7dfb      	ldrb	r3, [r7, #23]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	e000      	b.n	80081b4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e02a      	b.n	8008246 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d009      	beq.n	8008210 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	6852      	ldr	r2, [r2, #4]
 8008208:	b2d2      	uxtb	r2, r2
 800820a:	4611      	mov	r1, r2
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008210:	2340      	movs	r3, #64	; 0x40
 8008212:	2200      	movs	r2, #0
 8008214:	2100      	movs	r1, #0
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f001 f8cd 	bl	80093b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2240      	movs	r2, #64	; 0x40
 8008228:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800822c:	2340      	movs	r3, #64	; 0x40
 800822e:	2200      	movs	r2, #0
 8008230:	2180      	movs	r1, #128	; 0x80
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 f8bf 	bl	80093b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2240      	movs	r2, #64	; 0x40
 8008242:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	460b      	mov	r3, r1
 8008258:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	78fa      	ldrb	r2, [r7, #3]
 800825e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800826e:	b480      	push	{r7}
 8008270:	b083      	sub	sp, #12
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800827c:	b2da      	uxtb	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2204      	movs	r2, #4
 8008288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	d106      	bne.n	80082bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b082      	sub	sp, #8
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80082dc:	2303      	movs	r3, #3
 80082de:	e012      	b.n	8008306 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	d10b      	bne.n	8008304 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b082      	sub	sp, #8
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	460b      	mov	r3, r1
 8008318:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008324:	2303      	movs	r3, #3
 8008326:	e014      	b.n	8008352 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b03      	cmp	r3, #3
 8008332:	d10d      	bne.n	8008350 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d007      	beq.n	8008350 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	78fa      	ldrb	r2, [r7, #3]
 800834a:	4611      	mov	r1, r2
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b082      	sub	sp, #8
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	460b      	mov	r3, r1
 8008364:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836c:	2b00      	cmp	r3, #0
 800836e:	d101      	bne.n	8008374 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008370:	2303      	movs	r3, #3
 8008372:	e014      	b.n	800839e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b03      	cmp	r3, #3
 800837e:	d10d      	bne.n	800839c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008388:	2b00      	cmp	r3, #0
 800838a:	d007      	beq.n	800839c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	78fa      	ldrb	r2, [r7, #3]
 8008396:	4611      	mov	r1, r2
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80083a6:	b480      	push	{r7}
 80083a8:	b083      	sub	sp, #12
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d009      	beq.n	80083ea <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	6852      	ldr	r2, [r2, #4]
 80083e2:	b2d2      	uxtb	r2, r2
 80083e4:	4611      	mov	r1, r2
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
  }

  return USBD_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b087      	sub	sp, #28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	3301      	adds	r3, #1
 800840a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008412:	8a3b      	ldrh	r3, [r7, #16]
 8008414:	021b      	lsls	r3, r3, #8
 8008416:	b21a      	sxth	r2, r3
 8008418:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800841c:	4313      	orrs	r3, r2
 800841e:	b21b      	sxth	r3, r3
 8008420:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008422:	89fb      	ldrh	r3, [r7, #14]
}
 8008424:	4618      	mov	r0, r3
 8008426:	371c      	adds	r7, #28
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008446:	2b40      	cmp	r3, #64	; 0x40
 8008448:	d005      	beq.n	8008456 <USBD_StdDevReq+0x26>
 800844a:	2b40      	cmp	r3, #64	; 0x40
 800844c:	d853      	bhi.n	80084f6 <USBD_StdDevReq+0xc6>
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00b      	beq.n	800846a <USBD_StdDevReq+0x3a>
 8008452:	2b20      	cmp	r3, #32
 8008454:	d14f      	bne.n	80084f6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	4798      	blx	r3
 8008464:	4603      	mov	r3, r0
 8008466:	73fb      	strb	r3, [r7, #15]
      break;
 8008468:	e04a      	b.n	8008500 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	785b      	ldrb	r3, [r3, #1]
 800846e:	2b09      	cmp	r3, #9
 8008470:	d83b      	bhi.n	80084ea <USBD_StdDevReq+0xba>
 8008472:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <USBD_StdDevReq+0x48>)
 8008474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008478:	080084cd 	.word	0x080084cd
 800847c:	080084e1 	.word	0x080084e1
 8008480:	080084eb 	.word	0x080084eb
 8008484:	080084d7 	.word	0x080084d7
 8008488:	080084eb 	.word	0x080084eb
 800848c:	080084ab 	.word	0x080084ab
 8008490:	080084a1 	.word	0x080084a1
 8008494:	080084eb 	.word	0x080084eb
 8008498:	080084c3 	.word	0x080084c3
 800849c:	080084b5 	.word	0x080084b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f9de 	bl	8008864 <USBD_GetDescriptor>
          break;
 80084a8:	e024      	b.n	80084f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fb55 	bl	8008b5c <USBD_SetAddress>
          break;
 80084b2:	e01f      	b.n	80084f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fb94 	bl	8008be4 <USBD_SetConfig>
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]
          break;
 80084c0:	e018      	b.n	80084f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fc33 	bl	8008d30 <USBD_GetConfig>
          break;
 80084ca:	e013      	b.n	80084f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fc64 	bl	8008d9c <USBD_GetStatus>
          break;
 80084d4:	e00e      	b.n	80084f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fc93 	bl	8008e04 <USBD_SetFeature>
          break;
 80084de:	e009      	b.n	80084f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fca2 	bl	8008e2c <USBD_ClrFeature>
          break;
 80084e8:	e004      	b.n	80084f4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fcf9 	bl	8008ee4 <USBD_CtlError>
          break;
 80084f2:	bf00      	nop
      }
      break;
 80084f4:	e004      	b.n	8008500 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fcf3 	bl	8008ee4 <USBD_CtlError>
      break;
 80084fe:	bf00      	nop
  }

  return ret;
 8008500:	7bfb      	ldrb	r3, [r7, #15]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop

0800850c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008522:	2b40      	cmp	r3, #64	; 0x40
 8008524:	d005      	beq.n	8008532 <USBD_StdItfReq+0x26>
 8008526:	2b40      	cmp	r3, #64	; 0x40
 8008528:	d82f      	bhi.n	800858a <USBD_StdItfReq+0x7e>
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <USBD_StdItfReq+0x26>
 800852e:	2b20      	cmp	r3, #32
 8008530:	d12b      	bne.n	800858a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008538:	b2db      	uxtb	r3, r3
 800853a:	3b01      	subs	r3, #1
 800853c:	2b02      	cmp	r3, #2
 800853e:	d81d      	bhi.n	800857c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	889b      	ldrh	r3, [r3, #4]
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b0f      	cmp	r3, #15
 8008548:	d813      	bhi.n	8008572 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	4798      	blx	r3
 8008558:	4603      	mov	r3, r0
 800855a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	88db      	ldrh	r3, [r3, #6]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d110      	bne.n	8008586 <USBD_StdItfReq+0x7a>
 8008564:	7bfb      	ldrb	r3, [r7, #15]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10d      	bne.n	8008586 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fd85 	bl	800907a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008570:	e009      	b.n	8008586 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fcb5 	bl	8008ee4 <USBD_CtlError>
          break;
 800857a:	e004      	b.n	8008586 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fcb0 	bl	8008ee4 <USBD_CtlError>
          break;
 8008584:	e000      	b.n	8008588 <USBD_StdItfReq+0x7c>
          break;
 8008586:	bf00      	nop
      }
      break;
 8008588:	e004      	b.n	8008594 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fca9 	bl	8008ee4 <USBD_CtlError>
      break;
 8008592:	bf00      	nop
  }

  return ret;
 8008594:	7bfb      	ldrb	r3, [r7, #15]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	889b      	ldrh	r3, [r3, #4]
 80085b0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085ba:	2b40      	cmp	r3, #64	; 0x40
 80085bc:	d007      	beq.n	80085ce <USBD_StdEPReq+0x30>
 80085be:	2b40      	cmp	r3, #64	; 0x40
 80085c0:	f200 8145 	bhi.w	800884e <USBD_StdEPReq+0x2b0>
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00c      	beq.n	80085e2 <USBD_StdEPReq+0x44>
 80085c8:	2b20      	cmp	r3, #32
 80085ca:	f040 8140 	bne.w	800884e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	4798      	blx	r3
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]
      break;
 80085e0:	e13a      	b.n	8008858 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	785b      	ldrb	r3, [r3, #1]
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d007      	beq.n	80085fa <USBD_StdEPReq+0x5c>
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	f300 8129 	bgt.w	8008842 <USBD_StdEPReq+0x2a4>
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d07f      	beq.n	80086f4 <USBD_StdEPReq+0x156>
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d03c      	beq.n	8008672 <USBD_StdEPReq+0xd4>
 80085f8:	e123      	b.n	8008842 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b02      	cmp	r3, #2
 8008604:	d002      	beq.n	800860c <USBD_StdEPReq+0x6e>
 8008606:	2b03      	cmp	r3, #3
 8008608:	d016      	beq.n	8008638 <USBD_StdEPReq+0x9a>
 800860a:	e02c      	b.n	8008666 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00d      	beq.n	800862e <USBD_StdEPReq+0x90>
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	2b80      	cmp	r3, #128	; 0x80
 8008616:	d00a      	beq.n	800862e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 ff2e 	bl	800947e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008622:	2180      	movs	r1, #128	; 0x80
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 ff2a 	bl	800947e <USBD_LL_StallEP>
 800862a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800862c:	e020      	b.n	8008670 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fc57 	bl	8008ee4 <USBD_CtlError>
              break;
 8008636:	e01b      	b.n	8008670 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	885b      	ldrh	r3, [r3, #2]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10e      	bne.n	800865e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00b      	beq.n	800865e <USBD_StdEPReq+0xc0>
 8008646:	7bbb      	ldrb	r3, [r7, #14]
 8008648:	2b80      	cmp	r3, #128	; 0x80
 800864a:	d008      	beq.n	800865e <USBD_StdEPReq+0xc0>
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	88db      	ldrh	r3, [r3, #6]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d104      	bne.n	800865e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 ff10 	bl	800947e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fd0b 	bl	800907a <USBD_CtlSendStatus>

              break;
 8008664:	e004      	b.n	8008670 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fc3b 	bl	8008ee4 <USBD_CtlError>
              break;
 800866e:	bf00      	nop
          }
          break;
 8008670:	e0ec      	b.n	800884c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b02      	cmp	r3, #2
 800867c:	d002      	beq.n	8008684 <USBD_StdEPReq+0xe6>
 800867e:	2b03      	cmp	r3, #3
 8008680:	d016      	beq.n	80086b0 <USBD_StdEPReq+0x112>
 8008682:	e030      	b.n	80086e6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00d      	beq.n	80086a6 <USBD_StdEPReq+0x108>
 800868a:	7bbb      	ldrb	r3, [r7, #14]
 800868c:	2b80      	cmp	r3, #128	; 0x80
 800868e:	d00a      	beq.n	80086a6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008690:	7bbb      	ldrb	r3, [r7, #14]
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fef2 	bl	800947e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800869a:	2180      	movs	r1, #128	; 0x80
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 feee 	bl	800947e <USBD_LL_StallEP>
 80086a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086a4:	e025      	b.n	80086f2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80086a6:	6839      	ldr	r1, [r7, #0]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fc1b 	bl	8008ee4 <USBD_CtlError>
              break;
 80086ae:	e020      	b.n	80086f2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	885b      	ldrh	r3, [r3, #2]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d11b      	bne.n	80086f0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
 80086ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d004      	beq.n	80086cc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fef8 	bl	80094bc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fcd4 	bl	800907a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	4798      	blx	r3
 80086e0:	4603      	mov	r3, r0
 80086e2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80086e4:	e004      	b.n	80086f0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fbfb 	bl	8008ee4 <USBD_CtlError>
              break;
 80086ee:	e000      	b.n	80086f2 <USBD_StdEPReq+0x154>
              break;
 80086f0:	bf00      	nop
          }
          break;
 80086f2:	e0ab      	b.n	800884c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d002      	beq.n	8008706 <USBD_StdEPReq+0x168>
 8008700:	2b03      	cmp	r3, #3
 8008702:	d032      	beq.n	800876a <USBD_StdEPReq+0x1cc>
 8008704:	e097      	b.n	8008836 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008706:	7bbb      	ldrb	r3, [r7, #14]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d007      	beq.n	800871c <USBD_StdEPReq+0x17e>
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	2b80      	cmp	r3, #128	; 0x80
 8008710:	d004      	beq.n	800871c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fbe5 	bl	8008ee4 <USBD_CtlError>
                break;
 800871a:	e091      	b.n	8008840 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800871c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008720:	2b00      	cmp	r3, #0
 8008722:	da0b      	bge.n	800873c <USBD_StdEPReq+0x19e>
 8008724:	7bbb      	ldrb	r3, [r7, #14]
 8008726:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800872a:	4613      	mov	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	3310      	adds	r3, #16
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	4413      	add	r3, r2
 8008738:	3304      	adds	r3, #4
 800873a:	e00b      	b.n	8008754 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800873c:	7bbb      	ldrb	r3, [r7, #14]
 800873e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	4413      	add	r3, r2
 8008752:	3304      	adds	r3, #4
 8008754:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2200      	movs	r2, #0
 800875a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2202      	movs	r2, #2
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fc2f 	bl	8008fc6 <USBD_CtlSendData>
              break;
 8008768:	e06a      	b.n	8008840 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800876a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800876e:	2b00      	cmp	r3, #0
 8008770:	da11      	bge.n	8008796 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008772:	7bbb      	ldrb	r3, [r7, #14]
 8008774:	f003 020f 	and.w	r2, r3, #15
 8008778:	6879      	ldr	r1, [r7, #4]
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	440b      	add	r3, r1
 8008784:	3324      	adds	r3, #36	; 0x24
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d117      	bne.n	80087bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fba8 	bl	8008ee4 <USBD_CtlError>
                  break;
 8008794:	e054      	b.n	8008840 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008796:	7bbb      	ldrb	r3, [r7, #14]
 8008798:	f003 020f 	and.w	r2, r3, #15
 800879c:	6879      	ldr	r1, [r7, #4]
 800879e:	4613      	mov	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	440b      	add	r3, r1
 80087a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087ac:	881b      	ldrh	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d104      	bne.n	80087bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fb95 	bl	8008ee4 <USBD_CtlError>
                  break;
 80087ba:	e041      	b.n	8008840 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	da0b      	bge.n	80087dc <USBD_StdEPReq+0x23e>
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087ca:	4613      	mov	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	3310      	adds	r3, #16
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	4413      	add	r3, r2
 80087d8:	3304      	adds	r3, #4
 80087da:	e00b      	b.n	80087f4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087dc:	7bbb      	ldrb	r3, [r7, #14]
 80087de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087e2:	4613      	mov	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	4413      	add	r3, r2
 80087f2:	3304      	adds	r3, #4
 80087f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <USBD_StdEPReq+0x264>
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	2b80      	cmp	r3, #128	; 0x80
 8008800:	d103      	bne.n	800880a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2200      	movs	r2, #0
 8008806:	601a      	str	r2, [r3, #0]
 8008808:	e00e      	b.n	8008828 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	4619      	mov	r1, r3
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fe73 	bl	80094fa <USBD_LL_IsStallEP>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d003      	beq.n	8008822 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2201      	movs	r2, #1
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	e002      	b.n	8008828 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2200      	movs	r2, #0
 8008826:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2202      	movs	r2, #2
 800882c:	4619      	mov	r1, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fbc9 	bl	8008fc6 <USBD_CtlSendData>
              break;
 8008834:	e004      	b.n	8008840 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fb53 	bl	8008ee4 <USBD_CtlError>
              break;
 800883e:	bf00      	nop
          }
          break;
 8008840:	e004      	b.n	800884c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fb4d 	bl	8008ee4 <USBD_CtlError>
          break;
 800884a:	bf00      	nop
      }
      break;
 800884c:	e004      	b.n	8008858 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fb47 	bl	8008ee4 <USBD_CtlError>
      break;
 8008856:	bf00      	nop
  }

  return ret;
 8008858:	7bfb      	ldrb	r3, [r7, #15]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008872:	2300      	movs	r3, #0
 8008874:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008876:	2300      	movs	r3, #0
 8008878:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	885b      	ldrh	r3, [r3, #2]
 800887e:	0a1b      	lsrs	r3, r3, #8
 8008880:	b29b      	uxth	r3, r3
 8008882:	3b01      	subs	r3, #1
 8008884:	2b06      	cmp	r3, #6
 8008886:	f200 813b 	bhi.w	8008b00 <USBD_GetDescriptor+0x29c>
 800888a:	a201      	add	r2, pc, #4	; (adr r2, 8008890 <USBD_GetDescriptor+0x2c>)
 800888c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008890:	080088ad 	.word	0x080088ad
 8008894:	080088c5 	.word	0x080088c5
 8008898:	08008905 	.word	0x08008905
 800889c:	08008b01 	.word	0x08008b01
 80088a0:	08008b01 	.word	0x08008b01
 80088a4:	08008aa1 	.word	0x08008aa1
 80088a8:	08008acd 	.word	0x08008acd
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	7c12      	ldrb	r2, [r2, #16]
 80088b8:	f107 0108 	add.w	r1, r7, #8
 80088bc:	4610      	mov	r0, r2
 80088be:	4798      	blx	r3
 80088c0:	60f8      	str	r0, [r7, #12]
      break;
 80088c2:	e125      	b.n	8008b10 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	7c1b      	ldrb	r3, [r3, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10d      	bne.n	80088e8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d4:	f107 0208 	add.w	r2, r7, #8
 80088d8:	4610      	mov	r0, r2
 80088da:	4798      	blx	r3
 80088dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3301      	adds	r3, #1
 80088e2:	2202      	movs	r2, #2
 80088e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088e6:	e113      	b.n	8008b10 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f0:	f107 0208 	add.w	r2, r7, #8
 80088f4:	4610      	mov	r0, r2
 80088f6:	4798      	blx	r3
 80088f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3301      	adds	r3, #1
 80088fe:	2202      	movs	r2, #2
 8008900:	701a      	strb	r2, [r3, #0]
      break;
 8008902:	e105      	b.n	8008b10 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	885b      	ldrh	r3, [r3, #2]
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b05      	cmp	r3, #5
 800890c:	f200 80ac 	bhi.w	8008a68 <USBD_GetDescriptor+0x204>
 8008910:	a201      	add	r2, pc, #4	; (adr r2, 8008918 <USBD_GetDescriptor+0xb4>)
 8008912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008916:	bf00      	nop
 8008918:	08008931 	.word	0x08008931
 800891c:	08008965 	.word	0x08008965
 8008920:	08008999 	.word	0x08008999
 8008924:	080089cd 	.word	0x080089cd
 8008928:	08008a01 	.word	0x08008a01
 800892c:	08008a35 	.word	0x08008a35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00b      	beq.n	8008954 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	7c12      	ldrb	r2, [r2, #16]
 8008948:	f107 0108 	add.w	r1, r7, #8
 800894c:	4610      	mov	r0, r2
 800894e:	4798      	blx	r3
 8008950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008952:	e0a4      	b.n	8008a9e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fac4 	bl	8008ee4 <USBD_CtlError>
            err++;
 800895c:	7afb      	ldrb	r3, [r7, #11]
 800895e:	3301      	adds	r3, #1
 8008960:	72fb      	strb	r3, [r7, #11]
          break;
 8008962:	e09c      	b.n	8008a9e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00b      	beq.n	8008988 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	7c12      	ldrb	r2, [r2, #16]
 800897c:	f107 0108 	add.w	r1, r7, #8
 8008980:	4610      	mov	r0, r2
 8008982:	4798      	blx	r3
 8008984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008986:	e08a      	b.n	8008a9e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 faaa 	bl	8008ee4 <USBD_CtlError>
            err++;
 8008990:	7afb      	ldrb	r3, [r7, #11]
 8008992:	3301      	adds	r3, #1
 8008994:	72fb      	strb	r3, [r7, #11]
          break;
 8008996:	e082      	b.n	8008a9e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	7c12      	ldrb	r2, [r2, #16]
 80089b0:	f107 0108 	add.w	r1, r7, #8
 80089b4:	4610      	mov	r0, r2
 80089b6:	4798      	blx	r3
 80089b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ba:	e070      	b.n	8008a9e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fa90 	bl	8008ee4 <USBD_CtlError>
            err++;
 80089c4:	7afb      	ldrb	r3, [r7, #11]
 80089c6:	3301      	adds	r3, #1
 80089c8:	72fb      	strb	r3, [r7, #11]
          break;
 80089ca:	e068      	b.n	8008a9e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00b      	beq.n	80089f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	7c12      	ldrb	r2, [r2, #16]
 80089e4:	f107 0108 	add.w	r1, r7, #8
 80089e8:	4610      	mov	r0, r2
 80089ea:	4798      	blx	r3
 80089ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ee:	e056      	b.n	8008a9e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fa76 	bl	8008ee4 <USBD_CtlError>
            err++;
 80089f8:	7afb      	ldrb	r3, [r7, #11]
 80089fa:	3301      	adds	r3, #1
 80089fc:	72fb      	strb	r3, [r7, #11]
          break;
 80089fe:	e04e      	b.n	8008a9e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00b      	beq.n	8008a24 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	7c12      	ldrb	r2, [r2, #16]
 8008a18:	f107 0108 	add.w	r1, r7, #8
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	4798      	blx	r3
 8008a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a22:	e03c      	b.n	8008a9e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fa5c 	bl	8008ee4 <USBD_CtlError>
            err++;
 8008a2c:	7afb      	ldrb	r3, [r7, #11]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	72fb      	strb	r3, [r7, #11]
          break;
 8008a32:	e034      	b.n	8008a9e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00b      	beq.n	8008a58 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	7c12      	ldrb	r2, [r2, #16]
 8008a4c:	f107 0108 	add.w	r1, r7, #8
 8008a50:	4610      	mov	r0, r2
 8008a52:	4798      	blx	r3
 8008a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a56:	e022      	b.n	8008a9e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fa42 	bl	8008ee4 <USBD_CtlError>
            err++;
 8008a60:	7afb      	ldrb	r3, [r7, #11]
 8008a62:	3301      	adds	r3, #1
 8008a64:	72fb      	strb	r3, [r7, #11]
          break;
 8008a66:	e01a      	b.n	8008a9e <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00c      	beq.n	8008a8e <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	8852      	ldrh	r2, [r2, #2]
 8008a80:	b2d1      	uxtb	r1, r2
 8008a82:	f107 0208 	add.w	r2, r7, #8
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	4798      	blx	r3
 8008a8a:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8008a8c:	e006      	b.n	8008a9c <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fa27 	bl	8008ee4 <USBD_CtlError>
            err++;
 8008a96:	7afb      	ldrb	r3, [r7, #11]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	72fb      	strb	r3, [r7, #11]
          break;
 8008a9c:	bf00      	nop
      }
      break;
 8008a9e:	e037      	b.n	8008b10 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	7c1b      	ldrb	r3, [r3, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d109      	bne.n	8008abc <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab0:	f107 0208 	add.w	r2, r7, #8
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	4798      	blx	r3
 8008ab8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008aba:	e029      	b.n	8008b10 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fa10 	bl	8008ee4 <USBD_CtlError>
        err++;
 8008ac4:	7afb      	ldrb	r3, [r7, #11]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	72fb      	strb	r3, [r7, #11]
      break;
 8008aca:	e021      	b.n	8008b10 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	7c1b      	ldrb	r3, [r3, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10d      	bne.n	8008af0 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008adc:	f107 0208 	add.w	r2, r7, #8
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	4798      	blx	r3
 8008ae4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	2207      	movs	r2, #7
 8008aec:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008aee:	e00f      	b.n	8008b10 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f9f6 	bl	8008ee4 <USBD_CtlError>
        err++;
 8008af8:	7afb      	ldrb	r3, [r7, #11]
 8008afa:	3301      	adds	r3, #1
 8008afc:	72fb      	strb	r3, [r7, #11]
      break;
 8008afe:	e007      	b.n	8008b10 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f9ee 	bl	8008ee4 <USBD_CtlError>
      err++;
 8008b08:	7afb      	ldrb	r3, [r7, #11]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	72fb      	strb	r3, [r7, #11]
      break;
 8008b0e:	bf00      	nop
  }

  if (err != 0U)
 8008b10:	7afb      	ldrb	r3, [r7, #11]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d11e      	bne.n	8008b54 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	88db      	ldrh	r3, [r3, #6]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d016      	beq.n	8008b4c <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 8008b1e:	893b      	ldrh	r3, [r7, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00e      	beq.n	8008b42 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	88da      	ldrh	r2, [r3, #6]
 8008b28:	893b      	ldrh	r3, [r7, #8]
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	bf28      	it	cs
 8008b2e:	4613      	movcs	r3, r2
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b34:	893b      	ldrh	r3, [r7, #8]
 8008b36:	461a      	mov	r2, r3
 8008b38:	68f9      	ldr	r1, [r7, #12]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fa43 	bl	8008fc6 <USBD_CtlSendData>
 8008b40:	e009      	b.n	8008b56 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f9cd 	bl	8008ee4 <USBD_CtlError>
 8008b4a:	e004      	b.n	8008b56 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fa94 	bl	800907a <USBD_CtlSendStatus>
 8008b52:	e000      	b.n	8008b56 <USBD_GetDescriptor+0x2f2>
    return;
 8008b54:	bf00      	nop
  }
}
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	889b      	ldrh	r3, [r3, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d131      	bne.n	8008bd2 <USBD_SetAddress+0x76>
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	88db      	ldrh	r3, [r3, #6]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d12d      	bne.n	8008bd2 <USBD_SetAddress+0x76>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	885b      	ldrh	r3, [r3, #2]
 8008b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b7c:	d829      	bhi.n	8008bd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	885b      	ldrh	r3, [r3, #2]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d104      	bne.n	8008ba0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f9a3 	bl	8008ee4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9e:	e01d      	b.n	8008bdc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	7bfa      	ldrb	r2, [r7, #15]
 8008ba4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
 8008baa:	4619      	mov	r1, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fcd0 	bl	8009552 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fa61 	bl	800907a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d004      	beq.n	8008bc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2202      	movs	r2, #2
 8008bc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc6:	e009      	b.n	8008bdc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd0:	e004      	b.n	8008bdc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f985 	bl	8008ee4 <USBD_CtlError>
  }
}
 8008bda:	bf00      	nop
 8008bdc:	bf00      	nop
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	885b      	ldrh	r3, [r3, #2]
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	4b4c      	ldr	r3, [pc, #304]	; (8008d2c <USBD_SetConfig+0x148>)
 8008bfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bfc:	4b4b      	ldr	r3, [pc, #300]	; (8008d2c <USBD_SetConfig+0x148>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d905      	bls.n	8008c10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f96c 	bl	8008ee4 <USBD_CtlError>
    return USBD_FAIL;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e088      	b.n	8008d22 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d002      	beq.n	8008c22 <USBD_SetConfig+0x3e>
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d025      	beq.n	8008c6c <USBD_SetConfig+0x88>
 8008c20:	e071      	b.n	8008d06 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c22:	4b42      	ldr	r3, [pc, #264]	; (8008d2c <USBD_SetConfig+0x148>)
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d01c      	beq.n	8008c64 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008c2a:	4b40      	ldr	r3, [pc, #256]	; (8008d2c <USBD_SetConfig+0x148>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c34:	4b3d      	ldr	r3, [pc, #244]	; (8008d2c <USBD_SetConfig+0x148>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7ff f93c 	bl	8007eb8 <USBD_SetClassConfig>
 8008c40:	4603      	mov	r3, r0
 8008c42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d004      	beq.n	8008c54 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f949 	bl	8008ee4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c52:	e065      	b.n	8008d20 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fa10 	bl	800907a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2203      	movs	r2, #3
 8008c5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c62:	e05d      	b.n	8008d20 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fa08 	bl	800907a <USBD_CtlSendStatus>
      break;
 8008c6a:	e059      	b.n	8008d20 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c6c:	4b2f      	ldr	r3, [pc, #188]	; (8008d2c <USBD_SetConfig+0x148>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d112      	bne.n	8008c9a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2202      	movs	r2, #2
 8008c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c7c:	4b2b      	ldr	r3, [pc, #172]	; (8008d2c <USBD_SetConfig+0x148>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	461a      	mov	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c86:	4b29      	ldr	r3, [pc, #164]	; (8008d2c <USBD_SetConfig+0x148>)
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff f92f 	bl	8007ef0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f9f1 	bl	800907a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c98:	e042      	b.n	8008d20 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008c9a:	4b24      	ldr	r3, [pc, #144]	; (8008d2c <USBD_SetConfig+0x148>)
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d02a      	beq.n	8008cfe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff f91d 	bl	8007ef0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008cb6:	4b1d      	ldr	r3, [pc, #116]	; (8008d2c <USBD_SetConfig+0x148>)
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cc0:	4b1a      	ldr	r3, [pc, #104]	; (8008d2c <USBD_SetConfig+0x148>)
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7ff f8f6 	bl	8007eb8 <USBD_SetClassConfig>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00f      	beq.n	8008cf6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f903 	bl	8008ee4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff f902 	bl	8007ef0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008cf4:	e014      	b.n	8008d20 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f9bf 	bl	800907a <USBD_CtlSendStatus>
      break;
 8008cfc:	e010      	b.n	8008d20 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f9bb 	bl	800907a <USBD_CtlSendStatus>
      break;
 8008d04:	e00c      	b.n	8008d20 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f8eb 	bl	8008ee4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d0e:	4b07      	ldr	r3, [pc, #28]	; (8008d2c <USBD_SetConfig+0x148>)
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	4619      	mov	r1, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff f8eb 	bl	8007ef0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d1e:	bf00      	nop
  }

  return ret;
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	2000070c 	.word	0x2000070c

08008d30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	88db      	ldrh	r3, [r3, #6]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d004      	beq.n	8008d4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f8cd 	bl	8008ee4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d4a:	e023      	b.n	8008d94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	dc02      	bgt.n	8008d5e <USBD_GetConfig+0x2e>
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	dc03      	bgt.n	8008d64 <USBD_GetConfig+0x34>
 8008d5c:	e015      	b.n	8008d8a <USBD_GetConfig+0x5a>
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d00b      	beq.n	8008d7a <USBD_GetConfig+0x4a>
 8008d62:	e012      	b.n	8008d8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3308      	adds	r3, #8
 8008d6e:	2201      	movs	r2, #1
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f927 	bl	8008fc6 <USBD_CtlSendData>
        break;
 8008d78:	e00c      	b.n	8008d94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	2201      	movs	r2, #1
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f91f 	bl	8008fc6 <USBD_CtlSendData>
        break;
 8008d88:	e004      	b.n	8008d94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f8a9 	bl	8008ee4 <USBD_CtlError>
        break;
 8008d92:	bf00      	nop
}
 8008d94:	bf00      	nop
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	3b01      	subs	r3, #1
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d81e      	bhi.n	8008df2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	88db      	ldrh	r3, [r3, #6]
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d004      	beq.n	8008dc6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f890 	bl	8008ee4 <USBD_CtlError>
        break;
 8008dc4:	e01a      	b.n	8008dfc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d005      	beq.n	8008de2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	f043 0202 	orr.w	r2, r3, #2
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	330c      	adds	r3, #12
 8008de6:	2202      	movs	r2, #2
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f8eb 	bl	8008fc6 <USBD_CtlSendData>
      break;
 8008df0:	e004      	b.n	8008dfc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f875 	bl	8008ee4 <USBD_CtlError>
      break;
 8008dfa:	bf00      	nop
  }
}
 8008dfc:	bf00      	nop
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	885b      	ldrh	r3, [r3, #2]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d106      	bne.n	8008e24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f92b 	bl	800907a <USBD_CtlSendStatus>
  }
}
 8008e24:	bf00      	nop
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d80b      	bhi.n	8008e5c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	885b      	ldrh	r3, [r3, #2]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d10c      	bne.n	8008e66 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f910 	bl	800907a <USBD_CtlSendStatus>
      }
      break;
 8008e5a:	e004      	b.n	8008e66 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f840 	bl	8008ee4 <USBD_CtlError>
      break;
 8008e64:	e000      	b.n	8008e68 <USBD_ClrFeature+0x3c>
      break;
 8008e66:	bf00      	nop
  }
}
 8008e68:	bf00      	nop
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	781a      	ldrb	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	781a      	ldrb	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	3301      	adds	r3, #1
 8008e98:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f7ff faaa 	bl	80083f4 <SWAPBYTE>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f7ff fa9d 	bl	80083f4 <SWAPBYTE>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7ff fa90 	bl	80083f4 <SWAPBYTE>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	80da      	strh	r2, [r3, #6]
}
 8008edc:	bf00      	nop
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eee:	2180      	movs	r1, #128	; 0x80
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fac4 	bl	800947e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fac0 	bl	800947e <USBD_LL_StallEP>
}
 8008efe:	bf00      	nop
 8008f00:	3708      	adds	r7, #8
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b086      	sub	sp, #24
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	60f8      	str	r0, [r7, #12]
 8008f0e:	60b9      	str	r1, [r7, #8]
 8008f10:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d036      	beq.n	8008f8a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f20:	6938      	ldr	r0, [r7, #16]
 8008f22:	f000 f836 	bl	8008f92 <USBD_GetLen>
 8008f26:	4603      	mov	r3, r0
 8008f28:	3301      	adds	r3, #1
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	4413      	add	r3, r2
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	7812      	ldrb	r2, [r2, #0]
 8008f3e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	3301      	adds	r3, #1
 8008f44:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	2203      	movs	r2, #3
 8008f4e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	3301      	adds	r3, #1
 8008f54:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f56:	e013      	b.n	8008f80 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	7812      	ldrb	r2, [r2, #0]
 8008f62:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	3301      	adds	r3, #1
 8008f68:	613b      	str	r3, [r7, #16]
    idx++;
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	4413      	add	r3, r2
 8008f76:	2200      	movs	r2, #0
 8008f78:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1e7      	bne.n	8008f58 <USBD_GetString+0x52>
 8008f88:	e000      	b.n	8008f8c <USBD_GetString+0x86>
    return;
 8008f8a:	bf00      	nop
  }
}
 8008f8c:	3718      	adds	r7, #24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f92:	b480      	push	{r7}
 8008f94:	b085      	sub	sp, #20
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fa2:	e005      	b.n	8008fb0 <USBD_GetLen+0x1e>
  {
    len++;
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	3301      	adds	r3, #1
 8008fae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1f5      	bne.n	8008fa4 <USBD_GetLen+0x12>
  }

  return len;
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	60f8      	str	r0, [r7, #12]
 8008fce:	60b9      	str	r1, [r7, #8]
 8008fd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	2100      	movs	r1, #0
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 facf 	bl	8009590 <USBD_LL_Transmit>

  return USBD_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	2100      	movs	r1, #0
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 fabe 	bl	8009590 <USBD_LL_Transmit>

  return USBD_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	60b9      	str	r1, [r7, #8]
 8009028:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2203      	movs	r2, #3
 800902e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	2100      	movs	r1, #0
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f000 fac2 	bl	80095d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	2100      	movs	r1, #0
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 fab1 	bl	80095d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b082      	sub	sp, #8
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2204      	movs	r2, #4
 8009086:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800908a:	2300      	movs	r3, #0
 800908c:	2200      	movs	r2, #0
 800908e:	2100      	movs	r1, #0
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fa7d 	bl	8009590 <USBD_LL_Transmit>

  return USBD_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2205      	movs	r2, #5
 80090ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090b0:	2300      	movs	r3, #0
 80090b2:	2200      	movs	r2, #0
 80090b4:	2100      	movs	r1, #0
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fa8b 	bl	80095d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80090da:	4619      	mov	r1, r3
 80090dc:	4610      	mov	r0, r2
 80090de:	f7fe ff1f 	bl	8007f20 <USBD_LL_SetupStage>
}
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b082      	sub	sp, #8
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	460b      	mov	r3, r1
 80090f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80090fc:	78fa      	ldrb	r2, [r7, #3]
 80090fe:	6879      	ldr	r1, [r7, #4]
 8009100:	4613      	mov	r3, r2
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	1a9b      	subs	r3, r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	440b      	add	r3, r1
 800910a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	4619      	mov	r1, r3
 8009114:	f7fe ff59 	bl	8007fca <USBD_LL_DataOutStage>
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009132:	78fa      	ldrb	r2, [r7, #3]
 8009134:	6879      	ldr	r1, [r7, #4]
 8009136:	4613      	mov	r3, r2
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	1a9b      	subs	r3, r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	440b      	add	r3, r1
 8009140:	3348      	adds	r3, #72	; 0x48
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	4619      	mov	r1, r3
 8009148:	f7fe ffa2 	bl	8008090 <USBD_LL_DataInStage>
}
 800914c:	bf00      	nop
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff f8b1 	bl	80082ca <USBD_LL_SOF>
}
 8009168:	bf00      	nop
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009178:	2301      	movs	r3, #1
 800917a:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	2b02      	cmp	r3, #2
 8009182:	d102      	bne.n	800918a <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 8009184:	2301      	movs	r3, #1
 8009186:	73fb      	strb	r3, [r7, #15]
 8009188:	e008      	b.n	800919c <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d102      	bne.n	8009198 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 8009192:	2300      	movs	r3, #0
 8009194:	73fb      	strb	r3, [r7, #15]
 8009196:	e001      	b.n	800919c <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 8009198:	f7f7 facc 	bl	8000734 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091a2:	7bfa      	ldrb	r2, [r7, #15]
 80091a4:	4611      	mov	r1, r2
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7ff f851 	bl	800824e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7ff f802 	bl	80081bc <USBD_LL_Reset>
}
 80091b8:	bf00      	nop
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7ff f84d 	bl	800826e <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	6812      	ldr	r2, [r2, #0]
 80091e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091e6:	f043 0301 	orr.w	r3, r3, #1
 80091ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a1b      	ldr	r3, [r3, #32]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d005      	beq.n	8009200 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091f4:	4b04      	ldr	r3, [pc, #16]	; (8009208 <HAL_PCD_SuspendCallback+0x48>)
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	4a03      	ldr	r2, [pc, #12]	; (8009208 <HAL_PCD_SuspendCallback+0x48>)
 80091fa:	f043 0306 	orr.w	r3, r3, #6
 80091fe:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	e000ed00 	.word	0xe000ed00

0800920c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800921a:	4618      	mov	r0, r3
 800921c:	f7ff f83d 	bl	800829a <USBD_LL_Resume>
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	4611      	mov	r1, r2
 800923e:	4618      	mov	r0, r3
 8009240:	f7ff f88b 	bl	800835a <USBD_LL_IsoOUTIncomplete>
}
 8009244:	bf00      	nop
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800925e:	78fa      	ldrb	r2, [r7, #3]
 8009260:	4611      	mov	r1, r2
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff f853 	bl	800830e <USBD_LL_IsoINIncomplete>
}
 8009268:	bf00      	nop
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff f891 	bl	80083a6 <USBD_LL_DevConnected>
}
 8009284:	bf00      	nop
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff f88e 	bl	80083bc <USBD_LL_DevDisconnected>
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 80092b0:	4b2d      	ldr	r3, [pc, #180]	; (8009368 <USBD_LL_Init+0xc0>)
 80092b2:	4a2e      	ldr	r2, [pc, #184]	; (800936c <USBD_LL_Init+0xc4>)
 80092b4:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d14e      	bne.n	800935c <USBD_LL_Init+0xb4>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 80092be:	4b2a      	ldr	r3, [pc, #168]	; (8009368 <USBD_LL_Init+0xc0>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    pdev->pData = hpcd_USB_OTG_PTR;
 80092c8:	4b27      	ldr	r3, [pc, #156]	; (8009368 <USBD_LL_Init+0xc0>)
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
    pma_track += 128;
#endif

#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFo(hpcd_USB_OTG_PTR, 128); // ALL OUT EP Buffer
 80092d2:	4b25      	ldr	r3, [pc, #148]	; (8009368 <USBD_LL_Init+0xc0>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2180      	movs	r1, #128	; 0x80
 80092d8:	4618      	mov	r0, r3
 80092da:	f7f9 f874 	bl	80023c6 <HAL_PCDEx_SetRxFiFo>

    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, 0, 128); // EP0 IN
 80092de:	4b22      	ldr	r3, [pc, #136]	; (8009368 <USBD_LL_Init+0xc0>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2280      	movs	r2, #128	; 0x80
 80092e4:	2100      	movs	r1, #0
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7f9 f826 	bl	8002338 <HAL_PCDEx_SetTxFiFo>

#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80092ec:	2300      	movs	r3, #0
 80092ee:	73fb      	strb	r3, [r7, #15]
 80092f0:	e01a      	b.n	8009328 <USBD_LL_Init+0x80>
    {
      HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 64);
 80092f2:	4b1d      	ldr	r3, [pc, #116]	; (8009368 <USBD_LL_Init+0xc0>)
 80092f4:	6818      	ldr	r0, [r3, #0]
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
 80092f8:	4a1d      	ldr	r2, [pc, #116]	; (8009370 <USBD_LL_Init+0xc8>)
 80092fa:	5cd3      	ldrb	r3, [r2, r3]
 80092fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2240      	movs	r2, #64	; 0x40
 8009304:	4619      	mov	r1, r3
 8009306:	f7f9 f817 	bl	8002338 <HAL_PCDEx_SetTxFiFo>
      HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 8);
 800930a:	4b17      	ldr	r3, [pc, #92]	; (8009368 <USBD_LL_Init+0xc0>)
 800930c:	6818      	ldr	r0, [r3, #0]
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	4a18      	ldr	r2, [pc, #96]	; (8009374 <USBD_LL_Init+0xcc>)
 8009312:	5cd3      	ldrb	r3, [r2, r3]
 8009314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009318:	b2db      	uxtb	r3, r3
 800931a:	2208      	movs	r2, #8
 800931c:	4619      	mov	r1, r3
 800931e:	f7f9 f80b 	bl	8002338 <HAL_PCDEx_SetTxFiFo>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009322:	7bfb      	ldrb	r3, [r7, #15]
 8009324:	3301      	adds	r3, #1
 8009326:	73fb      	strb	r3, [r7, #15]
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0e1      	beq.n	80092f2 <USBD_LL_Init+0x4a>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 128);
 800932e:	4b0e      	ldr	r3, [pc, #56]	; (8009368 <USBD_LL_Init+0xc0>)
 8009330:	6818      	ldr	r0, [r3, #0]
 8009332:	4b11      	ldr	r3, [pc, #68]	; (8009378 <USBD_LL_Init+0xd0>)
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2280      	movs	r2, #128	; 0x80
 800933e:	4619      	mov	r1, r3
 8009340:	f7f8 fffa 	bl	8002338 <HAL_PCDEx_SetTxFiFo>
#endif
#if (USBD_USE_UVC == 1)
    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (UVC_IN_EP & 0x7F), 512);
#endif
#if (USBD_USE_MSC == 1)
    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (MSC_IN_EP & 0x7F), 512);
 8009344:	4b08      	ldr	r3, [pc, #32]	; (8009368 <USBD_LL_Init+0xc0>)
 8009346:	6818      	ldr	r0, [r3, #0]
 8009348:	4b0c      	ldr	r3, [pc, #48]	; (800937c <USBD_LL_Init+0xd4>)
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009350:	b2db      	uxtb	r3, r3
 8009352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009356:	4619      	mov	r1, r3
 8009358:	f7f8 ffee 	bl	8002338 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	2000948c 	.word	0x2000948c
 800936c:	20000718 	.word	0x20000718
 8009370:	20009154 	.word	0x20009154
 8009374:	20009380 	.word	0x20009380
 8009378:	200001ee 	.word	0x200001ee
 800937c:	200002c6 	.word	0x200002c6

08009380 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009388:	2300      	movs	r3, #0
 800938a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8009396:	4618      	mov	r0, r3
 8009398:	f7f7 ff9e 	bl	80012d8 <HAL_PCD_Start>
 800939c:	4603      	mov	r3, r0
 800939e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f94a 	bl	800963c <USBD_Get_USB_Status>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b084      	sub	sp, #16
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	4608      	mov	r0, r1
 80093c0:	4611      	mov	r1, r2
 80093c2:	461a      	mov	r2, r3
 80093c4:	4603      	mov	r3, r0
 80093c6:	70fb      	strb	r3, [r7, #3]
 80093c8:	460b      	mov	r3, r1
 80093ca:	70bb      	strb	r3, [r7, #2]
 80093cc:	4613      	mov	r3, r2
 80093ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 80093de:	78bb      	ldrb	r3, [r7, #2]
 80093e0:	883a      	ldrh	r2, [r7, #0]
 80093e2:	78f9      	ldrb	r1, [r7, #3]
 80093e4:	f7f8 fb82 	bl	8001aec <HAL_PCD_EP_Open>
 80093e8:	4603      	mov	r3, r0
 80093ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 f924 	bl	800963c <USBD_Get_USB_Status>
 80093f4:	4603      	mov	r3, r0
 80093f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b084      	sub	sp, #16
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	460b      	mov	r3, r1
 800940c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800941c:	78fa      	ldrb	r2, [r7, #3]
 800941e:	4611      	mov	r1, r2
 8009420:	4618      	mov	r0, r3
 8009422:	f7f8 fbcb 	bl	8001bbc <HAL_PCD_EP_Close>
 8009426:	4603      	mov	r3, r0
 8009428:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	4618      	mov	r0, r3
 800942e:	f000 f905 	bl	800963c <USBD_Get_USB_Status>
 8009432:	4603      	mov	r3, r0
 8009434:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009436:	7bbb      	ldrb	r3, [r7, #14]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	460b      	mov	r3, r1
 800944a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800945a:	78fa      	ldrb	r2, [r7, #3]
 800945c:	4611      	mov	r1, r2
 800945e:	4618      	mov	r0, r3
 8009460:	f7f8 fd5d 	bl	8001f1e <HAL_PCD_EP_Flush>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009468:	7bfb      	ldrb	r3, [r7, #15]
 800946a:	4618      	mov	r0, r3
 800946c:	f000 f8e6 	bl	800963c <USBD_Get_USB_Status>
 8009470:	4603      	mov	r3, r0
 8009472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009474:	7bbb      	ldrb	r3, [r7, #14]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b084      	sub	sp, #16
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	460b      	mov	r3, r1
 8009488:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8009498:	78fa      	ldrb	r2, [r7, #3]
 800949a:	4611      	mov	r1, r2
 800949c:	4618      	mov	r0, r3
 800949e:	f7f8 fc84 	bl	8001daa <HAL_PCD_EP_SetStall>
 80094a2:	4603      	mov	r3, r0
 80094a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 f8c7 	bl	800963c <USBD_Get_USB_Status>
 80094ae:	4603      	mov	r3, r0
 80094b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	460b      	mov	r3, r1
 80094c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80094d6:	78fa      	ldrb	r2, [r7, #3]
 80094d8:	4611      	mov	r1, r2
 80094da:	4618      	mov	r0, r3
 80094dc:	f7f8 fcc9 	bl	8001e72 <HAL_PCD_EP_ClrStall>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 f8a8 	bl	800963c <USBD_Get_USB_Status>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b085      	sub	sp, #20
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	460b      	mov	r3, r1
 8009504:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800950c:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800950e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009512:	2b00      	cmp	r3, #0
 8009514:	da0b      	bge.n	800952e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009516:	78fb      	ldrb	r3, [r7, #3]
 8009518:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800951c:	68f9      	ldr	r1, [r7, #12]
 800951e:	4613      	mov	r3, r2
 8009520:	00db      	lsls	r3, r3, #3
 8009522:	1a9b      	subs	r3, r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	440b      	add	r3, r1
 8009528:	333e      	adds	r3, #62	; 0x3e
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	e00b      	b.n	8009546 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800952e:	78fb      	ldrb	r3, [r7, #3]
 8009530:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009534:	68f9      	ldr	r1, [r7, #12]
 8009536:	4613      	mov	r3, r2
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	440b      	add	r3, r1
 8009540:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009544:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009546:	4618      	mov	r0, r3
 8009548:	3714      	adds	r7, #20
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b084      	sub	sp, #16
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	460b      	mov	r3, r1
 800955c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800956c:	78fa      	ldrb	r2, [r7, #3]
 800956e:	4611      	mov	r1, r2
 8009570:	4618      	mov	r0, r3
 8009572:	f7f8 fa96 	bl	8001aa2 <HAL_PCD_SetAddress>
 8009576:	4603      	mov	r3, r0
 8009578:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800957a:	7bfb      	ldrb	r3, [r7, #15]
 800957c:	4618      	mov	r0, r3
 800957e:	f000 f85d 	bl	800963c <USBD_Get_USB_Status>
 8009582:	4603      	mov	r3, r0
 8009584:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009586:	7bbb      	ldrb	r3, [r7, #14]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	607a      	str	r2, [r7, #4]
 800959a:	603b      	str	r3, [r7, #0]
 800959c:	460b      	mov	r3, r1
 800959e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 80095ae:	7af9      	ldrb	r1, [r7, #11]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	f7f8 fbaf 	bl	8001d16 <HAL_PCD_EP_Transmit>
 80095b8:	4603      	mov	r3, r0
 80095ba:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 80095bc:	7dfb      	ldrb	r3, [r7, #23]
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 f83c 	bl	800963c <USBD_Get_USB_Status>
 80095c4:	4603      	mov	r3, r0
 80095c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3718      	adds	r7, #24
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b086      	sub	sp, #24
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	60f8      	str	r0, [r7, #12]
 80095da:	607a      	str	r2, [r7, #4]
 80095dc:	603b      	str	r3, [r7, #0]
 80095de:	460b      	mov	r3, r1
 80095e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 80095f0:	7af9      	ldrb	r1, [r7, #11]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	f7f8 fb2b 	bl	8001c50 <HAL_PCD_EP_Receive>
 80095fa:	4603      	mov	r3, r0
 80095fc:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 80095fe:	7dfb      	ldrb	r3, [r7, #23]
 8009600:	4618      	mov	r0, r3
 8009602:	f000 f81b 	bl	800963c <USBD_Get_USB_Status>
 8009606:	4603      	mov	r3, r0
 8009608:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800960a:	7dbb      	ldrb	r3, [r7, #22]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8009626:	78fa      	ldrb	r2, [r7, #3]
 8009628:	4611      	mov	r1, r2
 800962a:	4618      	mov	r0, r3
 800962c:	f7f8 fb5b 	bl	8001ce6 <HAL_PCD_EP_GetRxCount>
 8009630:	4603      	mov	r3, r0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
	...

0800963c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800964a:	79fb      	ldrb	r3, [r7, #7]
 800964c:	2b03      	cmp	r3, #3
 800964e:	d817      	bhi.n	8009680 <USBD_Get_USB_Status+0x44>
 8009650:	a201      	add	r2, pc, #4	; (adr r2, 8009658 <USBD_Get_USB_Status+0x1c>)
 8009652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009656:	bf00      	nop
 8009658:	08009669 	.word	0x08009669
 800965c:	0800966f 	.word	0x0800966f
 8009660:	08009675 	.word	0x08009675
 8009664:	0800967b 	.word	0x0800967b
  {
  case HAL_OK:
    usb_status = USBD_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	73fb      	strb	r3, [r7, #15]
    break;
 800966c:	e00b      	b.n	8009686 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800966e:	2303      	movs	r3, #3
 8009670:	73fb      	strb	r3, [r7, #15]
    break;
 8009672:	e008      	b.n	8009686 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 8009674:	2301      	movs	r3, #1
 8009676:	73fb      	strb	r3, [r7, #15]
    break;
 8009678:	e005      	b.n	8009686 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800967a:	2303      	movs	r3, #3
 800967c:	73fb      	strb	r3, [r7, #15]
    break;
 800967e:	e002      	b.n	8009686 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 8009680:	2303      	movs	r3, #3
 8009682:	73fb      	strb	r3, [r7, #15]
    break;
 8009684:	bf00      	nop
  }
  return usb_status;
 8009686:	7bfb      	ldrb	r3, [r7, #15]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3714      	adds	r7, #20
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <__errno>:
 8009694:	4b01      	ldr	r3, [pc, #4]	; (800969c <__errno+0x8>)
 8009696:	6818      	ldr	r0, [r3, #0]
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	200003b4 	.word	0x200003b4

080096a0 <__libc_init_array>:
 80096a0:	b570      	push	{r4, r5, r6, lr}
 80096a2:	4d0d      	ldr	r5, [pc, #52]	; (80096d8 <__libc_init_array+0x38>)
 80096a4:	4c0d      	ldr	r4, [pc, #52]	; (80096dc <__libc_init_array+0x3c>)
 80096a6:	1b64      	subs	r4, r4, r5
 80096a8:	10a4      	asrs	r4, r4, #2
 80096aa:	2600      	movs	r6, #0
 80096ac:	42a6      	cmp	r6, r4
 80096ae:	d109      	bne.n	80096c4 <__libc_init_array+0x24>
 80096b0:	4d0b      	ldr	r5, [pc, #44]	; (80096e0 <__libc_init_array+0x40>)
 80096b2:	4c0c      	ldr	r4, [pc, #48]	; (80096e4 <__libc_init_array+0x44>)
 80096b4:	f000 fc62 	bl	8009f7c <_init>
 80096b8:	1b64      	subs	r4, r4, r5
 80096ba:	10a4      	asrs	r4, r4, #2
 80096bc:	2600      	movs	r6, #0
 80096be:	42a6      	cmp	r6, r4
 80096c0:	d105      	bne.n	80096ce <__libc_init_array+0x2e>
 80096c2:	bd70      	pop	{r4, r5, r6, pc}
 80096c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c8:	4798      	blx	r3
 80096ca:	3601      	adds	r6, #1
 80096cc:	e7ee      	b.n	80096ac <__libc_init_array+0xc>
 80096ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d2:	4798      	blx	r3
 80096d4:	3601      	adds	r6, #1
 80096d6:	e7f2      	b.n	80096be <__libc_init_array+0x1e>
 80096d8:	0800a08c 	.word	0x0800a08c
 80096dc:	0800a08c 	.word	0x0800a08c
 80096e0:	0800a08c 	.word	0x0800a08c
 80096e4:	0800a090 	.word	0x0800a090

080096e8 <memcpy>:
 80096e8:	440a      	add	r2, r1
 80096ea:	4291      	cmp	r1, r2
 80096ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80096f0:	d100      	bne.n	80096f4 <memcpy+0xc>
 80096f2:	4770      	bx	lr
 80096f4:	b510      	push	{r4, lr}
 80096f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096fe:	4291      	cmp	r1, r2
 8009700:	d1f9      	bne.n	80096f6 <memcpy+0xe>
 8009702:	bd10      	pop	{r4, pc}

08009704 <memset>:
 8009704:	4402      	add	r2, r0
 8009706:	4603      	mov	r3, r0
 8009708:	4293      	cmp	r3, r2
 800970a:	d100      	bne.n	800970e <memset+0xa>
 800970c:	4770      	bx	lr
 800970e:	f803 1b01 	strb.w	r1, [r3], #1
 8009712:	e7f9      	b.n	8009708 <memset+0x4>

08009714 <sniprintf>:
 8009714:	b40c      	push	{r2, r3}
 8009716:	b530      	push	{r4, r5, lr}
 8009718:	4b17      	ldr	r3, [pc, #92]	; (8009778 <sniprintf+0x64>)
 800971a:	1e0c      	subs	r4, r1, #0
 800971c:	681d      	ldr	r5, [r3, #0]
 800971e:	b09d      	sub	sp, #116	; 0x74
 8009720:	da08      	bge.n	8009734 <sniprintf+0x20>
 8009722:	238b      	movs	r3, #139	; 0x8b
 8009724:	602b      	str	r3, [r5, #0]
 8009726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800972a:	b01d      	add	sp, #116	; 0x74
 800972c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009730:	b002      	add	sp, #8
 8009732:	4770      	bx	lr
 8009734:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009738:	f8ad 3014 	strh.w	r3, [sp, #20]
 800973c:	bf14      	ite	ne
 800973e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009742:	4623      	moveq	r3, r4
 8009744:	9304      	str	r3, [sp, #16]
 8009746:	9307      	str	r3, [sp, #28]
 8009748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800974c:	9002      	str	r0, [sp, #8]
 800974e:	9006      	str	r0, [sp, #24]
 8009750:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009754:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009756:	ab21      	add	r3, sp, #132	; 0x84
 8009758:	a902      	add	r1, sp, #8
 800975a:	4628      	mov	r0, r5
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	f000 f869 	bl	8009834 <_svfiprintf_r>
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	bfbc      	itt	lt
 8009766:	238b      	movlt	r3, #139	; 0x8b
 8009768:	602b      	strlt	r3, [r5, #0]
 800976a:	2c00      	cmp	r4, #0
 800976c:	d0dd      	beq.n	800972a <sniprintf+0x16>
 800976e:	9b02      	ldr	r3, [sp, #8]
 8009770:	2200      	movs	r2, #0
 8009772:	701a      	strb	r2, [r3, #0]
 8009774:	e7d9      	b.n	800972a <sniprintf+0x16>
 8009776:	bf00      	nop
 8009778:	200003b4 	.word	0x200003b4

0800977c <__ssputs_r>:
 800977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009780:	688e      	ldr	r6, [r1, #8]
 8009782:	429e      	cmp	r6, r3
 8009784:	4682      	mov	sl, r0
 8009786:	460c      	mov	r4, r1
 8009788:	4690      	mov	r8, r2
 800978a:	461f      	mov	r7, r3
 800978c:	d838      	bhi.n	8009800 <__ssputs_r+0x84>
 800978e:	898a      	ldrh	r2, [r1, #12]
 8009790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009794:	d032      	beq.n	80097fc <__ssputs_r+0x80>
 8009796:	6825      	ldr	r5, [r4, #0]
 8009798:	6909      	ldr	r1, [r1, #16]
 800979a:	eba5 0901 	sub.w	r9, r5, r1
 800979e:	6965      	ldr	r5, [r4, #20]
 80097a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097a8:	3301      	adds	r3, #1
 80097aa:	444b      	add	r3, r9
 80097ac:	106d      	asrs	r5, r5, #1
 80097ae:	429d      	cmp	r5, r3
 80097b0:	bf38      	it	cc
 80097b2:	461d      	movcc	r5, r3
 80097b4:	0553      	lsls	r3, r2, #21
 80097b6:	d531      	bpl.n	800981c <__ssputs_r+0xa0>
 80097b8:	4629      	mov	r1, r5
 80097ba:	f000 fb39 	bl	8009e30 <_malloc_r>
 80097be:	4606      	mov	r6, r0
 80097c0:	b950      	cbnz	r0, 80097d8 <__ssputs_r+0x5c>
 80097c2:	230c      	movs	r3, #12
 80097c4:	f8ca 3000 	str.w	r3, [sl]
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ce:	81a3      	strh	r3, [r4, #12]
 80097d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d8:	6921      	ldr	r1, [r4, #16]
 80097da:	464a      	mov	r2, r9
 80097dc:	f7ff ff84 	bl	80096e8 <memcpy>
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ea:	81a3      	strh	r3, [r4, #12]
 80097ec:	6126      	str	r6, [r4, #16]
 80097ee:	6165      	str	r5, [r4, #20]
 80097f0:	444e      	add	r6, r9
 80097f2:	eba5 0509 	sub.w	r5, r5, r9
 80097f6:	6026      	str	r6, [r4, #0]
 80097f8:	60a5      	str	r5, [r4, #8]
 80097fa:	463e      	mov	r6, r7
 80097fc:	42be      	cmp	r6, r7
 80097fe:	d900      	bls.n	8009802 <__ssputs_r+0x86>
 8009800:	463e      	mov	r6, r7
 8009802:	4632      	mov	r2, r6
 8009804:	6820      	ldr	r0, [r4, #0]
 8009806:	4641      	mov	r1, r8
 8009808:	f000 faa8 	bl	8009d5c <memmove>
 800980c:	68a3      	ldr	r3, [r4, #8]
 800980e:	6822      	ldr	r2, [r4, #0]
 8009810:	1b9b      	subs	r3, r3, r6
 8009812:	4432      	add	r2, r6
 8009814:	60a3      	str	r3, [r4, #8]
 8009816:	6022      	str	r2, [r4, #0]
 8009818:	2000      	movs	r0, #0
 800981a:	e7db      	b.n	80097d4 <__ssputs_r+0x58>
 800981c:	462a      	mov	r2, r5
 800981e:	f000 fb61 	bl	8009ee4 <_realloc_r>
 8009822:	4606      	mov	r6, r0
 8009824:	2800      	cmp	r0, #0
 8009826:	d1e1      	bne.n	80097ec <__ssputs_r+0x70>
 8009828:	6921      	ldr	r1, [r4, #16]
 800982a:	4650      	mov	r0, sl
 800982c:	f000 fab0 	bl	8009d90 <_free_r>
 8009830:	e7c7      	b.n	80097c2 <__ssputs_r+0x46>
	...

08009834 <_svfiprintf_r>:
 8009834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009838:	4698      	mov	r8, r3
 800983a:	898b      	ldrh	r3, [r1, #12]
 800983c:	061b      	lsls	r3, r3, #24
 800983e:	b09d      	sub	sp, #116	; 0x74
 8009840:	4607      	mov	r7, r0
 8009842:	460d      	mov	r5, r1
 8009844:	4614      	mov	r4, r2
 8009846:	d50e      	bpl.n	8009866 <_svfiprintf_r+0x32>
 8009848:	690b      	ldr	r3, [r1, #16]
 800984a:	b963      	cbnz	r3, 8009866 <_svfiprintf_r+0x32>
 800984c:	2140      	movs	r1, #64	; 0x40
 800984e:	f000 faef 	bl	8009e30 <_malloc_r>
 8009852:	6028      	str	r0, [r5, #0]
 8009854:	6128      	str	r0, [r5, #16]
 8009856:	b920      	cbnz	r0, 8009862 <_svfiprintf_r+0x2e>
 8009858:	230c      	movs	r3, #12
 800985a:	603b      	str	r3, [r7, #0]
 800985c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009860:	e0d1      	b.n	8009a06 <_svfiprintf_r+0x1d2>
 8009862:	2340      	movs	r3, #64	; 0x40
 8009864:	616b      	str	r3, [r5, #20]
 8009866:	2300      	movs	r3, #0
 8009868:	9309      	str	r3, [sp, #36]	; 0x24
 800986a:	2320      	movs	r3, #32
 800986c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009870:	f8cd 800c 	str.w	r8, [sp, #12]
 8009874:	2330      	movs	r3, #48	; 0x30
 8009876:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a20 <_svfiprintf_r+0x1ec>
 800987a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800987e:	f04f 0901 	mov.w	r9, #1
 8009882:	4623      	mov	r3, r4
 8009884:	469a      	mov	sl, r3
 8009886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800988a:	b10a      	cbz	r2, 8009890 <_svfiprintf_r+0x5c>
 800988c:	2a25      	cmp	r2, #37	; 0x25
 800988e:	d1f9      	bne.n	8009884 <_svfiprintf_r+0x50>
 8009890:	ebba 0b04 	subs.w	fp, sl, r4
 8009894:	d00b      	beq.n	80098ae <_svfiprintf_r+0x7a>
 8009896:	465b      	mov	r3, fp
 8009898:	4622      	mov	r2, r4
 800989a:	4629      	mov	r1, r5
 800989c:	4638      	mov	r0, r7
 800989e:	f7ff ff6d 	bl	800977c <__ssputs_r>
 80098a2:	3001      	adds	r0, #1
 80098a4:	f000 80aa 	beq.w	80099fc <_svfiprintf_r+0x1c8>
 80098a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098aa:	445a      	add	r2, fp
 80098ac:	9209      	str	r2, [sp, #36]	; 0x24
 80098ae:	f89a 3000 	ldrb.w	r3, [sl]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 80a2 	beq.w	80099fc <_svfiprintf_r+0x1c8>
 80098b8:	2300      	movs	r3, #0
 80098ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098c2:	f10a 0a01 	add.w	sl, sl, #1
 80098c6:	9304      	str	r3, [sp, #16]
 80098c8:	9307      	str	r3, [sp, #28]
 80098ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098ce:	931a      	str	r3, [sp, #104]	; 0x68
 80098d0:	4654      	mov	r4, sl
 80098d2:	2205      	movs	r2, #5
 80098d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d8:	4851      	ldr	r0, [pc, #324]	; (8009a20 <_svfiprintf_r+0x1ec>)
 80098da:	f7f6 fc81 	bl	80001e0 <memchr>
 80098de:	9a04      	ldr	r2, [sp, #16]
 80098e0:	b9d8      	cbnz	r0, 800991a <_svfiprintf_r+0xe6>
 80098e2:	06d0      	lsls	r0, r2, #27
 80098e4:	bf44      	itt	mi
 80098e6:	2320      	movmi	r3, #32
 80098e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098ec:	0711      	lsls	r1, r2, #28
 80098ee:	bf44      	itt	mi
 80098f0:	232b      	movmi	r3, #43	; 0x2b
 80098f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098f6:	f89a 3000 	ldrb.w	r3, [sl]
 80098fa:	2b2a      	cmp	r3, #42	; 0x2a
 80098fc:	d015      	beq.n	800992a <_svfiprintf_r+0xf6>
 80098fe:	9a07      	ldr	r2, [sp, #28]
 8009900:	4654      	mov	r4, sl
 8009902:	2000      	movs	r0, #0
 8009904:	f04f 0c0a 	mov.w	ip, #10
 8009908:	4621      	mov	r1, r4
 800990a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800990e:	3b30      	subs	r3, #48	; 0x30
 8009910:	2b09      	cmp	r3, #9
 8009912:	d94e      	bls.n	80099b2 <_svfiprintf_r+0x17e>
 8009914:	b1b0      	cbz	r0, 8009944 <_svfiprintf_r+0x110>
 8009916:	9207      	str	r2, [sp, #28]
 8009918:	e014      	b.n	8009944 <_svfiprintf_r+0x110>
 800991a:	eba0 0308 	sub.w	r3, r0, r8
 800991e:	fa09 f303 	lsl.w	r3, r9, r3
 8009922:	4313      	orrs	r3, r2
 8009924:	9304      	str	r3, [sp, #16]
 8009926:	46a2      	mov	sl, r4
 8009928:	e7d2      	b.n	80098d0 <_svfiprintf_r+0x9c>
 800992a:	9b03      	ldr	r3, [sp, #12]
 800992c:	1d19      	adds	r1, r3, #4
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	9103      	str	r1, [sp, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	bfbb      	ittet	lt
 8009936:	425b      	neglt	r3, r3
 8009938:	f042 0202 	orrlt.w	r2, r2, #2
 800993c:	9307      	strge	r3, [sp, #28]
 800993e:	9307      	strlt	r3, [sp, #28]
 8009940:	bfb8      	it	lt
 8009942:	9204      	strlt	r2, [sp, #16]
 8009944:	7823      	ldrb	r3, [r4, #0]
 8009946:	2b2e      	cmp	r3, #46	; 0x2e
 8009948:	d10c      	bne.n	8009964 <_svfiprintf_r+0x130>
 800994a:	7863      	ldrb	r3, [r4, #1]
 800994c:	2b2a      	cmp	r3, #42	; 0x2a
 800994e:	d135      	bne.n	80099bc <_svfiprintf_r+0x188>
 8009950:	9b03      	ldr	r3, [sp, #12]
 8009952:	1d1a      	adds	r2, r3, #4
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	9203      	str	r2, [sp, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	bfb8      	it	lt
 800995c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009960:	3402      	adds	r4, #2
 8009962:	9305      	str	r3, [sp, #20]
 8009964:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a30 <_svfiprintf_r+0x1fc>
 8009968:	7821      	ldrb	r1, [r4, #0]
 800996a:	2203      	movs	r2, #3
 800996c:	4650      	mov	r0, sl
 800996e:	f7f6 fc37 	bl	80001e0 <memchr>
 8009972:	b140      	cbz	r0, 8009986 <_svfiprintf_r+0x152>
 8009974:	2340      	movs	r3, #64	; 0x40
 8009976:	eba0 000a 	sub.w	r0, r0, sl
 800997a:	fa03 f000 	lsl.w	r0, r3, r0
 800997e:	9b04      	ldr	r3, [sp, #16]
 8009980:	4303      	orrs	r3, r0
 8009982:	3401      	adds	r4, #1
 8009984:	9304      	str	r3, [sp, #16]
 8009986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800998a:	4826      	ldr	r0, [pc, #152]	; (8009a24 <_svfiprintf_r+0x1f0>)
 800998c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009990:	2206      	movs	r2, #6
 8009992:	f7f6 fc25 	bl	80001e0 <memchr>
 8009996:	2800      	cmp	r0, #0
 8009998:	d038      	beq.n	8009a0c <_svfiprintf_r+0x1d8>
 800999a:	4b23      	ldr	r3, [pc, #140]	; (8009a28 <_svfiprintf_r+0x1f4>)
 800999c:	bb1b      	cbnz	r3, 80099e6 <_svfiprintf_r+0x1b2>
 800999e:	9b03      	ldr	r3, [sp, #12]
 80099a0:	3307      	adds	r3, #7
 80099a2:	f023 0307 	bic.w	r3, r3, #7
 80099a6:	3308      	adds	r3, #8
 80099a8:	9303      	str	r3, [sp, #12]
 80099aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ac:	4433      	add	r3, r6
 80099ae:	9309      	str	r3, [sp, #36]	; 0x24
 80099b0:	e767      	b.n	8009882 <_svfiprintf_r+0x4e>
 80099b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80099b6:	460c      	mov	r4, r1
 80099b8:	2001      	movs	r0, #1
 80099ba:	e7a5      	b.n	8009908 <_svfiprintf_r+0xd4>
 80099bc:	2300      	movs	r3, #0
 80099be:	3401      	adds	r4, #1
 80099c0:	9305      	str	r3, [sp, #20]
 80099c2:	4619      	mov	r1, r3
 80099c4:	f04f 0c0a 	mov.w	ip, #10
 80099c8:	4620      	mov	r0, r4
 80099ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099ce:	3a30      	subs	r2, #48	; 0x30
 80099d0:	2a09      	cmp	r2, #9
 80099d2:	d903      	bls.n	80099dc <_svfiprintf_r+0x1a8>
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d0c5      	beq.n	8009964 <_svfiprintf_r+0x130>
 80099d8:	9105      	str	r1, [sp, #20]
 80099da:	e7c3      	b.n	8009964 <_svfiprintf_r+0x130>
 80099dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80099e0:	4604      	mov	r4, r0
 80099e2:	2301      	movs	r3, #1
 80099e4:	e7f0      	b.n	80099c8 <_svfiprintf_r+0x194>
 80099e6:	ab03      	add	r3, sp, #12
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	462a      	mov	r2, r5
 80099ec:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <_svfiprintf_r+0x1f8>)
 80099ee:	a904      	add	r1, sp, #16
 80099f0:	4638      	mov	r0, r7
 80099f2:	f3af 8000 	nop.w
 80099f6:	1c42      	adds	r2, r0, #1
 80099f8:	4606      	mov	r6, r0
 80099fa:	d1d6      	bne.n	80099aa <_svfiprintf_r+0x176>
 80099fc:	89ab      	ldrh	r3, [r5, #12]
 80099fe:	065b      	lsls	r3, r3, #25
 8009a00:	f53f af2c 	bmi.w	800985c <_svfiprintf_r+0x28>
 8009a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a06:	b01d      	add	sp, #116	; 0x74
 8009a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0c:	ab03      	add	r3, sp, #12
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	462a      	mov	r2, r5
 8009a12:	4b06      	ldr	r3, [pc, #24]	; (8009a2c <_svfiprintf_r+0x1f8>)
 8009a14:	a904      	add	r1, sp, #16
 8009a16:	4638      	mov	r0, r7
 8009a18:	f000 f87a 	bl	8009b10 <_printf_i>
 8009a1c:	e7eb      	b.n	80099f6 <_svfiprintf_r+0x1c2>
 8009a1e:	bf00      	nop
 8009a20:	0800a050 	.word	0x0800a050
 8009a24:	0800a05a 	.word	0x0800a05a
 8009a28:	00000000 	.word	0x00000000
 8009a2c:	0800977d 	.word	0x0800977d
 8009a30:	0800a056 	.word	0x0800a056

08009a34 <_printf_common>:
 8009a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a38:	4616      	mov	r6, r2
 8009a3a:	4699      	mov	r9, r3
 8009a3c:	688a      	ldr	r2, [r1, #8]
 8009a3e:	690b      	ldr	r3, [r1, #16]
 8009a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a44:	4293      	cmp	r3, r2
 8009a46:	bfb8      	it	lt
 8009a48:	4613      	movlt	r3, r2
 8009a4a:	6033      	str	r3, [r6, #0]
 8009a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a50:	4607      	mov	r7, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	b10a      	cbz	r2, 8009a5a <_printf_common+0x26>
 8009a56:	3301      	adds	r3, #1
 8009a58:	6033      	str	r3, [r6, #0]
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	0699      	lsls	r1, r3, #26
 8009a5e:	bf42      	ittt	mi
 8009a60:	6833      	ldrmi	r3, [r6, #0]
 8009a62:	3302      	addmi	r3, #2
 8009a64:	6033      	strmi	r3, [r6, #0]
 8009a66:	6825      	ldr	r5, [r4, #0]
 8009a68:	f015 0506 	ands.w	r5, r5, #6
 8009a6c:	d106      	bne.n	8009a7c <_printf_common+0x48>
 8009a6e:	f104 0a19 	add.w	sl, r4, #25
 8009a72:	68e3      	ldr	r3, [r4, #12]
 8009a74:	6832      	ldr	r2, [r6, #0]
 8009a76:	1a9b      	subs	r3, r3, r2
 8009a78:	42ab      	cmp	r3, r5
 8009a7a:	dc26      	bgt.n	8009aca <_printf_common+0x96>
 8009a7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a80:	1e13      	subs	r3, r2, #0
 8009a82:	6822      	ldr	r2, [r4, #0]
 8009a84:	bf18      	it	ne
 8009a86:	2301      	movne	r3, #1
 8009a88:	0692      	lsls	r2, r2, #26
 8009a8a:	d42b      	bmi.n	8009ae4 <_printf_common+0xb0>
 8009a8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a90:	4649      	mov	r1, r9
 8009a92:	4638      	mov	r0, r7
 8009a94:	47c0      	blx	r8
 8009a96:	3001      	adds	r0, #1
 8009a98:	d01e      	beq.n	8009ad8 <_printf_common+0xa4>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	68e5      	ldr	r5, [r4, #12]
 8009a9e:	6832      	ldr	r2, [r6, #0]
 8009aa0:	f003 0306 	and.w	r3, r3, #6
 8009aa4:	2b04      	cmp	r3, #4
 8009aa6:	bf08      	it	eq
 8009aa8:	1aad      	subeq	r5, r5, r2
 8009aaa:	68a3      	ldr	r3, [r4, #8]
 8009aac:	6922      	ldr	r2, [r4, #16]
 8009aae:	bf0c      	ite	eq
 8009ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ab4:	2500      	movne	r5, #0
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	bfc4      	itt	gt
 8009aba:	1a9b      	subgt	r3, r3, r2
 8009abc:	18ed      	addgt	r5, r5, r3
 8009abe:	2600      	movs	r6, #0
 8009ac0:	341a      	adds	r4, #26
 8009ac2:	42b5      	cmp	r5, r6
 8009ac4:	d11a      	bne.n	8009afc <_printf_common+0xc8>
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	e008      	b.n	8009adc <_printf_common+0xa8>
 8009aca:	2301      	movs	r3, #1
 8009acc:	4652      	mov	r2, sl
 8009ace:	4649      	mov	r1, r9
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	47c0      	blx	r8
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d103      	bne.n	8009ae0 <_printf_common+0xac>
 8009ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae0:	3501      	adds	r5, #1
 8009ae2:	e7c6      	b.n	8009a72 <_printf_common+0x3e>
 8009ae4:	18e1      	adds	r1, r4, r3
 8009ae6:	1c5a      	adds	r2, r3, #1
 8009ae8:	2030      	movs	r0, #48	; 0x30
 8009aea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aee:	4422      	add	r2, r4
 8009af0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009af4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009af8:	3302      	adds	r3, #2
 8009afa:	e7c7      	b.n	8009a8c <_printf_common+0x58>
 8009afc:	2301      	movs	r3, #1
 8009afe:	4622      	mov	r2, r4
 8009b00:	4649      	mov	r1, r9
 8009b02:	4638      	mov	r0, r7
 8009b04:	47c0      	blx	r8
 8009b06:	3001      	adds	r0, #1
 8009b08:	d0e6      	beq.n	8009ad8 <_printf_common+0xa4>
 8009b0a:	3601      	adds	r6, #1
 8009b0c:	e7d9      	b.n	8009ac2 <_printf_common+0x8e>
	...

08009b10 <_printf_i>:
 8009b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b14:	460c      	mov	r4, r1
 8009b16:	4691      	mov	r9, r2
 8009b18:	7e27      	ldrb	r7, [r4, #24]
 8009b1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b1c:	2f78      	cmp	r7, #120	; 0x78
 8009b1e:	4680      	mov	r8, r0
 8009b20:	469a      	mov	sl, r3
 8009b22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b26:	d807      	bhi.n	8009b38 <_printf_i+0x28>
 8009b28:	2f62      	cmp	r7, #98	; 0x62
 8009b2a:	d80a      	bhi.n	8009b42 <_printf_i+0x32>
 8009b2c:	2f00      	cmp	r7, #0
 8009b2e:	f000 80d8 	beq.w	8009ce2 <_printf_i+0x1d2>
 8009b32:	2f58      	cmp	r7, #88	; 0x58
 8009b34:	f000 80a3 	beq.w	8009c7e <_printf_i+0x16e>
 8009b38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b40:	e03a      	b.n	8009bb8 <_printf_i+0xa8>
 8009b42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b46:	2b15      	cmp	r3, #21
 8009b48:	d8f6      	bhi.n	8009b38 <_printf_i+0x28>
 8009b4a:	a001      	add	r0, pc, #4	; (adr r0, 8009b50 <_printf_i+0x40>)
 8009b4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b50:	08009ba9 	.word	0x08009ba9
 8009b54:	08009bbd 	.word	0x08009bbd
 8009b58:	08009b39 	.word	0x08009b39
 8009b5c:	08009b39 	.word	0x08009b39
 8009b60:	08009b39 	.word	0x08009b39
 8009b64:	08009b39 	.word	0x08009b39
 8009b68:	08009bbd 	.word	0x08009bbd
 8009b6c:	08009b39 	.word	0x08009b39
 8009b70:	08009b39 	.word	0x08009b39
 8009b74:	08009b39 	.word	0x08009b39
 8009b78:	08009b39 	.word	0x08009b39
 8009b7c:	08009cc9 	.word	0x08009cc9
 8009b80:	08009bed 	.word	0x08009bed
 8009b84:	08009cab 	.word	0x08009cab
 8009b88:	08009b39 	.word	0x08009b39
 8009b8c:	08009b39 	.word	0x08009b39
 8009b90:	08009ceb 	.word	0x08009ceb
 8009b94:	08009b39 	.word	0x08009b39
 8009b98:	08009bed 	.word	0x08009bed
 8009b9c:	08009b39 	.word	0x08009b39
 8009ba0:	08009b39 	.word	0x08009b39
 8009ba4:	08009cb3 	.word	0x08009cb3
 8009ba8:	680b      	ldr	r3, [r1, #0]
 8009baa:	1d1a      	adds	r2, r3, #4
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	600a      	str	r2, [r1, #0]
 8009bb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009bb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e0a3      	b.n	8009d04 <_printf_i+0x1f4>
 8009bbc:	6825      	ldr	r5, [r4, #0]
 8009bbe:	6808      	ldr	r0, [r1, #0]
 8009bc0:	062e      	lsls	r6, r5, #24
 8009bc2:	f100 0304 	add.w	r3, r0, #4
 8009bc6:	d50a      	bpl.n	8009bde <_printf_i+0xce>
 8009bc8:	6805      	ldr	r5, [r0, #0]
 8009bca:	600b      	str	r3, [r1, #0]
 8009bcc:	2d00      	cmp	r5, #0
 8009bce:	da03      	bge.n	8009bd8 <_printf_i+0xc8>
 8009bd0:	232d      	movs	r3, #45	; 0x2d
 8009bd2:	426d      	negs	r5, r5
 8009bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bd8:	485e      	ldr	r0, [pc, #376]	; (8009d54 <_printf_i+0x244>)
 8009bda:	230a      	movs	r3, #10
 8009bdc:	e019      	b.n	8009c12 <_printf_i+0x102>
 8009bde:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009be2:	6805      	ldr	r5, [r0, #0]
 8009be4:	600b      	str	r3, [r1, #0]
 8009be6:	bf18      	it	ne
 8009be8:	b22d      	sxthne	r5, r5
 8009bea:	e7ef      	b.n	8009bcc <_printf_i+0xbc>
 8009bec:	680b      	ldr	r3, [r1, #0]
 8009bee:	6825      	ldr	r5, [r4, #0]
 8009bf0:	1d18      	adds	r0, r3, #4
 8009bf2:	6008      	str	r0, [r1, #0]
 8009bf4:	0628      	lsls	r0, r5, #24
 8009bf6:	d501      	bpl.n	8009bfc <_printf_i+0xec>
 8009bf8:	681d      	ldr	r5, [r3, #0]
 8009bfa:	e002      	b.n	8009c02 <_printf_i+0xf2>
 8009bfc:	0669      	lsls	r1, r5, #25
 8009bfe:	d5fb      	bpl.n	8009bf8 <_printf_i+0xe8>
 8009c00:	881d      	ldrh	r5, [r3, #0]
 8009c02:	4854      	ldr	r0, [pc, #336]	; (8009d54 <_printf_i+0x244>)
 8009c04:	2f6f      	cmp	r7, #111	; 0x6f
 8009c06:	bf0c      	ite	eq
 8009c08:	2308      	moveq	r3, #8
 8009c0a:	230a      	movne	r3, #10
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c12:	6866      	ldr	r6, [r4, #4]
 8009c14:	60a6      	str	r6, [r4, #8]
 8009c16:	2e00      	cmp	r6, #0
 8009c18:	bfa2      	ittt	ge
 8009c1a:	6821      	ldrge	r1, [r4, #0]
 8009c1c:	f021 0104 	bicge.w	r1, r1, #4
 8009c20:	6021      	strge	r1, [r4, #0]
 8009c22:	b90d      	cbnz	r5, 8009c28 <_printf_i+0x118>
 8009c24:	2e00      	cmp	r6, #0
 8009c26:	d04d      	beq.n	8009cc4 <_printf_i+0x1b4>
 8009c28:	4616      	mov	r6, r2
 8009c2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c2e:	fb03 5711 	mls	r7, r3, r1, r5
 8009c32:	5dc7      	ldrb	r7, [r0, r7]
 8009c34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c38:	462f      	mov	r7, r5
 8009c3a:	42bb      	cmp	r3, r7
 8009c3c:	460d      	mov	r5, r1
 8009c3e:	d9f4      	bls.n	8009c2a <_printf_i+0x11a>
 8009c40:	2b08      	cmp	r3, #8
 8009c42:	d10b      	bne.n	8009c5c <_printf_i+0x14c>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	07df      	lsls	r7, r3, #31
 8009c48:	d508      	bpl.n	8009c5c <_printf_i+0x14c>
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	6861      	ldr	r1, [r4, #4]
 8009c4e:	4299      	cmp	r1, r3
 8009c50:	bfde      	ittt	le
 8009c52:	2330      	movle	r3, #48	; 0x30
 8009c54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c58:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009c5c:	1b92      	subs	r2, r2, r6
 8009c5e:	6122      	str	r2, [r4, #16]
 8009c60:	f8cd a000 	str.w	sl, [sp]
 8009c64:	464b      	mov	r3, r9
 8009c66:	aa03      	add	r2, sp, #12
 8009c68:	4621      	mov	r1, r4
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	f7ff fee2 	bl	8009a34 <_printf_common>
 8009c70:	3001      	adds	r0, #1
 8009c72:	d14c      	bne.n	8009d0e <_printf_i+0x1fe>
 8009c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c78:	b004      	add	sp, #16
 8009c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c7e:	4835      	ldr	r0, [pc, #212]	; (8009d54 <_printf_i+0x244>)
 8009c80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	680e      	ldr	r6, [r1, #0]
 8009c88:	061f      	lsls	r7, r3, #24
 8009c8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8009c8e:	600e      	str	r6, [r1, #0]
 8009c90:	d514      	bpl.n	8009cbc <_printf_i+0x1ac>
 8009c92:	07d9      	lsls	r1, r3, #31
 8009c94:	bf44      	itt	mi
 8009c96:	f043 0320 	orrmi.w	r3, r3, #32
 8009c9a:	6023      	strmi	r3, [r4, #0]
 8009c9c:	b91d      	cbnz	r5, 8009ca6 <_printf_i+0x196>
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	f023 0320 	bic.w	r3, r3, #32
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	2310      	movs	r3, #16
 8009ca8:	e7b0      	b.n	8009c0c <_printf_i+0xfc>
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	f043 0320 	orr.w	r3, r3, #32
 8009cb0:	6023      	str	r3, [r4, #0]
 8009cb2:	2378      	movs	r3, #120	; 0x78
 8009cb4:	4828      	ldr	r0, [pc, #160]	; (8009d58 <_printf_i+0x248>)
 8009cb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cba:	e7e3      	b.n	8009c84 <_printf_i+0x174>
 8009cbc:	065e      	lsls	r6, r3, #25
 8009cbe:	bf48      	it	mi
 8009cc0:	b2ad      	uxthmi	r5, r5
 8009cc2:	e7e6      	b.n	8009c92 <_printf_i+0x182>
 8009cc4:	4616      	mov	r6, r2
 8009cc6:	e7bb      	b.n	8009c40 <_printf_i+0x130>
 8009cc8:	680b      	ldr	r3, [r1, #0]
 8009cca:	6826      	ldr	r6, [r4, #0]
 8009ccc:	6960      	ldr	r0, [r4, #20]
 8009cce:	1d1d      	adds	r5, r3, #4
 8009cd0:	600d      	str	r5, [r1, #0]
 8009cd2:	0635      	lsls	r5, r6, #24
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	d501      	bpl.n	8009cdc <_printf_i+0x1cc>
 8009cd8:	6018      	str	r0, [r3, #0]
 8009cda:	e002      	b.n	8009ce2 <_printf_i+0x1d2>
 8009cdc:	0671      	lsls	r1, r6, #25
 8009cde:	d5fb      	bpl.n	8009cd8 <_printf_i+0x1c8>
 8009ce0:	8018      	strh	r0, [r3, #0]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	6123      	str	r3, [r4, #16]
 8009ce6:	4616      	mov	r6, r2
 8009ce8:	e7ba      	b.n	8009c60 <_printf_i+0x150>
 8009cea:	680b      	ldr	r3, [r1, #0]
 8009cec:	1d1a      	adds	r2, r3, #4
 8009cee:	600a      	str	r2, [r1, #0]
 8009cf0:	681e      	ldr	r6, [r3, #0]
 8009cf2:	6862      	ldr	r2, [r4, #4]
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f7f6 fa72 	bl	80001e0 <memchr>
 8009cfc:	b108      	cbz	r0, 8009d02 <_printf_i+0x1f2>
 8009cfe:	1b80      	subs	r0, r0, r6
 8009d00:	6060      	str	r0, [r4, #4]
 8009d02:	6863      	ldr	r3, [r4, #4]
 8009d04:	6123      	str	r3, [r4, #16]
 8009d06:	2300      	movs	r3, #0
 8009d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d0c:	e7a8      	b.n	8009c60 <_printf_i+0x150>
 8009d0e:	6923      	ldr	r3, [r4, #16]
 8009d10:	4632      	mov	r2, r6
 8009d12:	4649      	mov	r1, r9
 8009d14:	4640      	mov	r0, r8
 8009d16:	47d0      	blx	sl
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d0ab      	beq.n	8009c74 <_printf_i+0x164>
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	079b      	lsls	r3, r3, #30
 8009d20:	d413      	bmi.n	8009d4a <_printf_i+0x23a>
 8009d22:	68e0      	ldr	r0, [r4, #12]
 8009d24:	9b03      	ldr	r3, [sp, #12]
 8009d26:	4298      	cmp	r0, r3
 8009d28:	bfb8      	it	lt
 8009d2a:	4618      	movlt	r0, r3
 8009d2c:	e7a4      	b.n	8009c78 <_printf_i+0x168>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	4632      	mov	r2, r6
 8009d32:	4649      	mov	r1, r9
 8009d34:	4640      	mov	r0, r8
 8009d36:	47d0      	blx	sl
 8009d38:	3001      	adds	r0, #1
 8009d3a:	d09b      	beq.n	8009c74 <_printf_i+0x164>
 8009d3c:	3501      	adds	r5, #1
 8009d3e:	68e3      	ldr	r3, [r4, #12]
 8009d40:	9903      	ldr	r1, [sp, #12]
 8009d42:	1a5b      	subs	r3, r3, r1
 8009d44:	42ab      	cmp	r3, r5
 8009d46:	dcf2      	bgt.n	8009d2e <_printf_i+0x21e>
 8009d48:	e7eb      	b.n	8009d22 <_printf_i+0x212>
 8009d4a:	2500      	movs	r5, #0
 8009d4c:	f104 0619 	add.w	r6, r4, #25
 8009d50:	e7f5      	b.n	8009d3e <_printf_i+0x22e>
 8009d52:	bf00      	nop
 8009d54:	0800a061 	.word	0x0800a061
 8009d58:	0800a072 	.word	0x0800a072

08009d5c <memmove>:
 8009d5c:	4288      	cmp	r0, r1
 8009d5e:	b510      	push	{r4, lr}
 8009d60:	eb01 0402 	add.w	r4, r1, r2
 8009d64:	d902      	bls.n	8009d6c <memmove+0x10>
 8009d66:	4284      	cmp	r4, r0
 8009d68:	4623      	mov	r3, r4
 8009d6a:	d807      	bhi.n	8009d7c <memmove+0x20>
 8009d6c:	1e43      	subs	r3, r0, #1
 8009d6e:	42a1      	cmp	r1, r4
 8009d70:	d008      	beq.n	8009d84 <memmove+0x28>
 8009d72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d7a:	e7f8      	b.n	8009d6e <memmove+0x12>
 8009d7c:	4402      	add	r2, r0
 8009d7e:	4601      	mov	r1, r0
 8009d80:	428a      	cmp	r2, r1
 8009d82:	d100      	bne.n	8009d86 <memmove+0x2a>
 8009d84:	bd10      	pop	{r4, pc}
 8009d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d8e:	e7f7      	b.n	8009d80 <memmove+0x24>

08009d90 <_free_r>:
 8009d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d92:	2900      	cmp	r1, #0
 8009d94:	d048      	beq.n	8009e28 <_free_r+0x98>
 8009d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d9a:	9001      	str	r0, [sp, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8009da2:	bfb8      	it	lt
 8009da4:	18e4      	addlt	r4, r4, r3
 8009da6:	f000 f8d3 	bl	8009f50 <__malloc_lock>
 8009daa:	4a20      	ldr	r2, [pc, #128]	; (8009e2c <_free_r+0x9c>)
 8009dac:	9801      	ldr	r0, [sp, #4]
 8009dae:	6813      	ldr	r3, [r2, #0]
 8009db0:	4615      	mov	r5, r2
 8009db2:	b933      	cbnz	r3, 8009dc2 <_free_r+0x32>
 8009db4:	6063      	str	r3, [r4, #4]
 8009db6:	6014      	str	r4, [r2, #0]
 8009db8:	b003      	add	sp, #12
 8009dba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dbe:	f000 b8cd 	b.w	8009f5c <__malloc_unlock>
 8009dc2:	42a3      	cmp	r3, r4
 8009dc4:	d90b      	bls.n	8009dde <_free_r+0x4e>
 8009dc6:	6821      	ldr	r1, [r4, #0]
 8009dc8:	1862      	adds	r2, r4, r1
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	bf04      	itt	eq
 8009dce:	681a      	ldreq	r2, [r3, #0]
 8009dd0:	685b      	ldreq	r3, [r3, #4]
 8009dd2:	6063      	str	r3, [r4, #4]
 8009dd4:	bf04      	itt	eq
 8009dd6:	1852      	addeq	r2, r2, r1
 8009dd8:	6022      	streq	r2, [r4, #0]
 8009dda:	602c      	str	r4, [r5, #0]
 8009ddc:	e7ec      	b.n	8009db8 <_free_r+0x28>
 8009dde:	461a      	mov	r2, r3
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	b10b      	cbz	r3, 8009de8 <_free_r+0x58>
 8009de4:	42a3      	cmp	r3, r4
 8009de6:	d9fa      	bls.n	8009dde <_free_r+0x4e>
 8009de8:	6811      	ldr	r1, [r2, #0]
 8009dea:	1855      	adds	r5, r2, r1
 8009dec:	42a5      	cmp	r5, r4
 8009dee:	d10b      	bne.n	8009e08 <_free_r+0x78>
 8009df0:	6824      	ldr	r4, [r4, #0]
 8009df2:	4421      	add	r1, r4
 8009df4:	1854      	adds	r4, r2, r1
 8009df6:	42a3      	cmp	r3, r4
 8009df8:	6011      	str	r1, [r2, #0]
 8009dfa:	d1dd      	bne.n	8009db8 <_free_r+0x28>
 8009dfc:	681c      	ldr	r4, [r3, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	6053      	str	r3, [r2, #4]
 8009e02:	4421      	add	r1, r4
 8009e04:	6011      	str	r1, [r2, #0]
 8009e06:	e7d7      	b.n	8009db8 <_free_r+0x28>
 8009e08:	d902      	bls.n	8009e10 <_free_r+0x80>
 8009e0a:	230c      	movs	r3, #12
 8009e0c:	6003      	str	r3, [r0, #0]
 8009e0e:	e7d3      	b.n	8009db8 <_free_r+0x28>
 8009e10:	6825      	ldr	r5, [r4, #0]
 8009e12:	1961      	adds	r1, r4, r5
 8009e14:	428b      	cmp	r3, r1
 8009e16:	bf04      	itt	eq
 8009e18:	6819      	ldreq	r1, [r3, #0]
 8009e1a:	685b      	ldreq	r3, [r3, #4]
 8009e1c:	6063      	str	r3, [r4, #4]
 8009e1e:	bf04      	itt	eq
 8009e20:	1949      	addeq	r1, r1, r5
 8009e22:	6021      	streq	r1, [r4, #0]
 8009e24:	6054      	str	r4, [r2, #4]
 8009e26:	e7c7      	b.n	8009db8 <_free_r+0x28>
 8009e28:	b003      	add	sp, #12
 8009e2a:	bd30      	pop	{r4, r5, pc}
 8009e2c:	20000710 	.word	0x20000710

08009e30 <_malloc_r>:
 8009e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e32:	1ccd      	adds	r5, r1, #3
 8009e34:	f025 0503 	bic.w	r5, r5, #3
 8009e38:	3508      	adds	r5, #8
 8009e3a:	2d0c      	cmp	r5, #12
 8009e3c:	bf38      	it	cc
 8009e3e:	250c      	movcc	r5, #12
 8009e40:	2d00      	cmp	r5, #0
 8009e42:	4606      	mov	r6, r0
 8009e44:	db01      	blt.n	8009e4a <_malloc_r+0x1a>
 8009e46:	42a9      	cmp	r1, r5
 8009e48:	d903      	bls.n	8009e52 <_malloc_r+0x22>
 8009e4a:	230c      	movs	r3, #12
 8009e4c:	6033      	str	r3, [r6, #0]
 8009e4e:	2000      	movs	r0, #0
 8009e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e52:	f000 f87d 	bl	8009f50 <__malloc_lock>
 8009e56:	4921      	ldr	r1, [pc, #132]	; (8009edc <_malloc_r+0xac>)
 8009e58:	680a      	ldr	r2, [r1, #0]
 8009e5a:	4614      	mov	r4, r2
 8009e5c:	b99c      	cbnz	r4, 8009e86 <_malloc_r+0x56>
 8009e5e:	4f20      	ldr	r7, [pc, #128]	; (8009ee0 <_malloc_r+0xb0>)
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	b923      	cbnz	r3, 8009e6e <_malloc_r+0x3e>
 8009e64:	4621      	mov	r1, r4
 8009e66:	4630      	mov	r0, r6
 8009e68:	f000 f862 	bl	8009f30 <_sbrk_r>
 8009e6c:	6038      	str	r0, [r7, #0]
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4630      	mov	r0, r6
 8009e72:	f000 f85d 	bl	8009f30 <_sbrk_r>
 8009e76:	1c43      	adds	r3, r0, #1
 8009e78:	d123      	bne.n	8009ec2 <_malloc_r+0x92>
 8009e7a:	230c      	movs	r3, #12
 8009e7c:	6033      	str	r3, [r6, #0]
 8009e7e:	4630      	mov	r0, r6
 8009e80:	f000 f86c 	bl	8009f5c <__malloc_unlock>
 8009e84:	e7e3      	b.n	8009e4e <_malloc_r+0x1e>
 8009e86:	6823      	ldr	r3, [r4, #0]
 8009e88:	1b5b      	subs	r3, r3, r5
 8009e8a:	d417      	bmi.n	8009ebc <_malloc_r+0x8c>
 8009e8c:	2b0b      	cmp	r3, #11
 8009e8e:	d903      	bls.n	8009e98 <_malloc_r+0x68>
 8009e90:	6023      	str	r3, [r4, #0]
 8009e92:	441c      	add	r4, r3
 8009e94:	6025      	str	r5, [r4, #0]
 8009e96:	e004      	b.n	8009ea2 <_malloc_r+0x72>
 8009e98:	6863      	ldr	r3, [r4, #4]
 8009e9a:	42a2      	cmp	r2, r4
 8009e9c:	bf0c      	ite	eq
 8009e9e:	600b      	streq	r3, [r1, #0]
 8009ea0:	6053      	strne	r3, [r2, #4]
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f000 f85a 	bl	8009f5c <__malloc_unlock>
 8009ea8:	f104 000b 	add.w	r0, r4, #11
 8009eac:	1d23      	adds	r3, r4, #4
 8009eae:	f020 0007 	bic.w	r0, r0, #7
 8009eb2:	1ac2      	subs	r2, r0, r3
 8009eb4:	d0cc      	beq.n	8009e50 <_malloc_r+0x20>
 8009eb6:	1a1b      	subs	r3, r3, r0
 8009eb8:	50a3      	str	r3, [r4, r2]
 8009eba:	e7c9      	b.n	8009e50 <_malloc_r+0x20>
 8009ebc:	4622      	mov	r2, r4
 8009ebe:	6864      	ldr	r4, [r4, #4]
 8009ec0:	e7cc      	b.n	8009e5c <_malloc_r+0x2c>
 8009ec2:	1cc4      	adds	r4, r0, #3
 8009ec4:	f024 0403 	bic.w	r4, r4, #3
 8009ec8:	42a0      	cmp	r0, r4
 8009eca:	d0e3      	beq.n	8009e94 <_malloc_r+0x64>
 8009ecc:	1a21      	subs	r1, r4, r0
 8009ece:	4630      	mov	r0, r6
 8009ed0:	f000 f82e 	bl	8009f30 <_sbrk_r>
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	d1dd      	bne.n	8009e94 <_malloc_r+0x64>
 8009ed8:	e7cf      	b.n	8009e7a <_malloc_r+0x4a>
 8009eda:	bf00      	nop
 8009edc:	20000710 	.word	0x20000710
 8009ee0:	20000714 	.word	0x20000714

08009ee4 <_realloc_r>:
 8009ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee6:	4607      	mov	r7, r0
 8009ee8:	4614      	mov	r4, r2
 8009eea:	460e      	mov	r6, r1
 8009eec:	b921      	cbnz	r1, 8009ef8 <_realloc_r+0x14>
 8009eee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009ef2:	4611      	mov	r1, r2
 8009ef4:	f7ff bf9c 	b.w	8009e30 <_malloc_r>
 8009ef8:	b922      	cbnz	r2, 8009f04 <_realloc_r+0x20>
 8009efa:	f7ff ff49 	bl	8009d90 <_free_r>
 8009efe:	4625      	mov	r5, r4
 8009f00:	4628      	mov	r0, r5
 8009f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f04:	f000 f830 	bl	8009f68 <_malloc_usable_size_r>
 8009f08:	42a0      	cmp	r0, r4
 8009f0a:	d20f      	bcs.n	8009f2c <_realloc_r+0x48>
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4638      	mov	r0, r7
 8009f10:	f7ff ff8e 	bl	8009e30 <_malloc_r>
 8009f14:	4605      	mov	r5, r0
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d0f2      	beq.n	8009f00 <_realloc_r+0x1c>
 8009f1a:	4631      	mov	r1, r6
 8009f1c:	4622      	mov	r2, r4
 8009f1e:	f7ff fbe3 	bl	80096e8 <memcpy>
 8009f22:	4631      	mov	r1, r6
 8009f24:	4638      	mov	r0, r7
 8009f26:	f7ff ff33 	bl	8009d90 <_free_r>
 8009f2a:	e7e9      	b.n	8009f00 <_realloc_r+0x1c>
 8009f2c:	4635      	mov	r5, r6
 8009f2e:	e7e7      	b.n	8009f00 <_realloc_r+0x1c>

08009f30 <_sbrk_r>:
 8009f30:	b538      	push	{r3, r4, r5, lr}
 8009f32:	4d06      	ldr	r5, [pc, #24]	; (8009f4c <_sbrk_r+0x1c>)
 8009f34:	2300      	movs	r3, #0
 8009f36:	4604      	mov	r4, r0
 8009f38:	4608      	mov	r0, r1
 8009f3a:	602b      	str	r3, [r5, #0]
 8009f3c:	f7f6 fc5c 	bl	80007f8 <_sbrk>
 8009f40:	1c43      	adds	r3, r0, #1
 8009f42:	d102      	bne.n	8009f4a <_sbrk_r+0x1a>
 8009f44:	682b      	ldr	r3, [r5, #0]
 8009f46:	b103      	cbz	r3, 8009f4a <_sbrk_r+0x1a>
 8009f48:	6023      	str	r3, [r4, #0]
 8009f4a:	bd38      	pop	{r3, r4, r5, pc}
 8009f4c:	20009490 	.word	0x20009490

08009f50 <__malloc_lock>:
 8009f50:	4801      	ldr	r0, [pc, #4]	; (8009f58 <__malloc_lock+0x8>)
 8009f52:	f000 b811 	b.w	8009f78 <__retarget_lock_acquire_recursive>
 8009f56:	bf00      	nop
 8009f58:	20009498 	.word	0x20009498

08009f5c <__malloc_unlock>:
 8009f5c:	4801      	ldr	r0, [pc, #4]	; (8009f64 <__malloc_unlock+0x8>)
 8009f5e:	f000 b80c 	b.w	8009f7a <__retarget_lock_release_recursive>
 8009f62:	bf00      	nop
 8009f64:	20009498 	.word	0x20009498

08009f68 <_malloc_usable_size_r>:
 8009f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f6c:	1f18      	subs	r0, r3, #4
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	bfbc      	itt	lt
 8009f72:	580b      	ldrlt	r3, [r1, r0]
 8009f74:	18c0      	addlt	r0, r0, r3
 8009f76:	4770      	bx	lr

08009f78 <__retarget_lock_acquire_recursive>:
 8009f78:	4770      	bx	lr

08009f7a <__retarget_lock_release_recursive>:
 8009f7a:	4770      	bx	lr

08009f7c <_init>:
 8009f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7e:	bf00      	nop
 8009f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f82:	bc08      	pop	{r3}
 8009f84:	469e      	mov	lr, r3
 8009f86:	4770      	bx	lr

08009f88 <_fini>:
 8009f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f8a:	bf00      	nop
 8009f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f8e:	bc08      	pop	{r3}
 8009f90:	469e      	mov	lr, r3
 8009f92:	4770      	bx	lr
