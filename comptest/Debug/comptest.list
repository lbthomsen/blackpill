
comptest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800d664  0800d664  0001d664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d830  0800d830  00020310  2**0
                  CONTENTS
  4 .ARM          00000008  0800d830  0800d830  0001d830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d838  0800d838  00020310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d838  0800d838  0001d838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d83c  0800d83c  0001d83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000310  20000000  0800d840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000da8c  20000310  0800db50  00020310  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000dd9c  0800db50  0002dd9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY
 12 .debug_info   000322ed  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065b7  00000000  00000000  0005262d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c50  00000000  00000000  00058be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019c0  00000000  00000000  0005a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec55  00000000  00000000  0005c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024373  00000000  00000000  0007ae4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d0bc  00000000  00000000  0009f1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c27c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007de4  00000000  00000000  0013c2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000310 	.word	0x20000310
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d64c 	.word	0x0800d64c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000314 	.word	0x20000314
 80001dc:	0800d64c 	.word	0x0800d64c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(startMainTask, NULL, &mainTask_attributes);
 800057c:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <MX_FREERTOS_Init+0x28>)
 800057e:	2100      	movs	r1, #0
 8000580:	4808      	ldr	r0, [pc, #32]	; (80005a4 <MX_FREERTOS_Init+0x2c>)
 8000582:	f009 f8ec 	bl	800975e <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <MX_FREERTOS_Init+0x30>)
 800058a:	6013      	str	r3, [r2, #0]

  /* creation of tickTask */
  tickTaskHandle = osThreadNew(startTickTask, NULL, &tickTask_attributes);
 800058c:	4a07      	ldr	r2, [pc, #28]	; (80005ac <MX_FREERTOS_Init+0x34>)
 800058e:	2100      	movs	r1, #0
 8000590:	4807      	ldr	r0, [pc, #28]	; (80005b0 <MX_FREERTOS_Init+0x38>)
 8000592:	f009 f8e4 	bl	800975e <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <MX_FREERTOS_Init+0x3c>)
 800059a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	0800d714 	.word	0x0800d714
 80005a4:	080005b9 	.word	0x080005b9
 80005a8:	20004fc4 	.word	0x20004fc4
 80005ac:	0800d738 	.word	0x0800d738
 80005b0:	080005c9 	.word	0x080005c9
 80005b4:	20004fc8 	.word	0x20004fc8

080005b8 <startMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startMainTask */
void startMainTask(void *argument)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMainTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f009 f95e 	bl	8009882 <osDelay>
 80005c6:	e7fb      	b.n	80005c0 <startMainTask+0x8>

080005c8 <startTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTickTask */
void startTickTask(void *argument)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTickTask */
  /* Infinite loop */
  for(;;)
  {
	DBG("Tick %lu", osKernelGetTickCount() / 1000);
 80005d0:	f009 f8b0 	bl	8009734 <osKernelGetTickCount>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a08      	ldr	r2, [pc, #32]	; (80005f8 <startTickTask+0x30>)
 80005d8:	fba2 2303 	umull	r2, r3, r2, r3
 80005dc:	099b      	lsrs	r3, r3, #6
 80005de:	4619      	mov	r1, r3
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <startTickTask+0x34>)
 80005e2:	f00b ff8f 	bl	800c504 <iprintf>
 80005e6:	200a      	movs	r0, #10
 80005e8:	f00b ffa4 	bl	800c534 <putchar>
    osDelay(1000);
 80005ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f0:	f009 f947 	bl	8009882 <osDelay>
  {
 80005f4:	e7ec      	b.n	80005d0 <startTickTask+0x8>
 80005f6:	bf00      	nop
 80005f8:	10624dd3 	.word	0x10624dd3
 80005fc:	0800d67c 	.word	0x0800d67c

08000600 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b20      	ldr	r3, [pc, #128]	; (800069c <MX_GPIO_Init+0x9c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a1f      	ldr	r2, [pc, #124]	; (800069c <MX_GPIO_Init+0x9c>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b1d      	ldr	r3, [pc, #116]	; (800069c <MX_GPIO_Init+0x9c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_GPIO_Init+0x9c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a18      	ldr	r2, [pc, #96]	; (800069c <MX_GPIO_Init+0x9c>)
 800063c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_GPIO_Init+0x9c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_GPIO_Init+0x9c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a11      	ldr	r2, [pc, #68]	; (800069c <MX_GPIO_Init+0x9c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_GPIO_Init+0x9c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <MX_GPIO_Init+0xa0>)
 8000672:	f000 fd93 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000676:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800067c:	2311      	movs	r3, #17
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4619      	mov	r1, r3
 800068e:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_GPIO_Init+0xa0>)
 8000690:	f000 fc00 	bl	8000e94 <HAL_GPIO_Init>

}
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40020800 	.word	0x40020800

080006a4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
    CDC_Transmit(0, (uint8_t *)ptr, len);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	68b9      	ldr	r1, [r7, #8]
 80006b8:	2000      	movs	r0, #0
 80006ba:	f004 fb19 	bl	8004cf0 <CDC_Transmit>
    return len;
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ce:	f000 fa99 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d2:	f000 f823 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d6:	f7ff ff93 	bl	8000600 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006da:	f000 f9e7 	bl	8000aac <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80006de:	f004 f9a1 	bl	8004a24 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80006e2:	f008 ffdd 	bl	80096a0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80006e6:	f7ff ff47 	bl	8000578 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80006ea:	f008 fffd 	bl	80096e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0, last_blink = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]

  while (1)
  {

	  now = HAL_GetTick();
 80006f6:	f000 fabb 	bl	8000c70 <HAL_GetTick>
 80006fa:	6038      	str	r0, [r7, #0]

	  if (now - last_blink >= 500) {
 80006fc:	683a      	ldr	r2, [r7, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000706:	d3f6      	bcc.n	80006f6 <main+0x2e>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000708:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <main+0x50>)
 800070e:	f000 fd5e 	bl	80011ce <HAL_GPIO_TogglePin>

		  last_blink = now;
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	607b      	str	r3, [r7, #4]
	  now = HAL_GetTick();
 8000716:	e7ee      	b.n	80006f6 <main+0x2e>
 8000718:	40020800 	.word	0x40020800

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	; 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f00b fe87 	bl	800c43e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <SystemClock_Config+0xc8>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a26      	ldr	r2, [pc, #152]	; (80007e4 <SystemClock_Config+0xc8>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <SystemClock_Config+0xc8>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <SystemClock_Config+0xcc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a20      	ldr	r2, [pc, #128]	; (80007e8 <SystemClock_Config+0xcc>)
 8000766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <SystemClock_Config+0xcc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800078c:	2319      	movs	r3, #25
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000790:	23c0      	movs	r3, #192	; 0xc0
 8000792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0320 	add.w	r3, r7, #32
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fedf 	bl	8002564 <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007ac:	f000 f830 	bl	8000810 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2302      	movs	r3, #2
 80007b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	2103      	movs	r1, #3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 f941 	bl	8002a54 <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007d8:	f000 f81a 	bl	8000810 <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3750      	adds	r7, #80	; 0x50
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d101      	bne.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007fe:	f000 fa23 	bl	8000c48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40014800 	.word	0x40014800

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_MspInit+0x54>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	4a11      	ldr	r2, [pc, #68]	; (8000870 <HAL_MspInit+0x54>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000830:	6453      	str	r3, [r2, #68]	; 0x44
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_MspInit+0x54>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <HAL_MspInit+0x54>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <HAL_MspInit+0x54>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_MspInit+0x54>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	210f      	movs	r1, #15
 800085e:	f06f 0001 	mvn.w	r0, #1
 8000862:	f000 faed 	bl	8000e40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000884:	2200      	movs	r2, #0
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	201a      	movs	r0, #26
 800088a:	f000 fad9 	bl	8000e40 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800088e:	201a      	movs	r0, #26
 8000890:	f000 faf2 	bl	8000e78 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <HAL_InitTick+0xa0>)
 800089a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089c:	4a1d      	ldr	r2, [pc, #116]	; (8000914 <HAL_InitTick+0xa0>)
 800089e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a2:	6453      	str	r3, [r2, #68]	; 0x44
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <HAL_InitTick+0xa0>)
 80008a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008b0:	f107 0210 	add.w	r2, r7, #16
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4611      	mov	r1, r2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f002 fa86 	bl	8002dcc <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008c0:	f002 fa70 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 80008c4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <HAL_InitTick+0xa4>)
 80008ca:	fba2 2303 	umull	r2, r3, r2, r3
 80008ce:	0c9b      	lsrs	r3, r3, #18
 80008d0:	3b01      	subs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_InitTick+0xa8>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <HAL_InitTick+0xac>)
 80008d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_InitTick+0xa8>)
 80008dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e0:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_InitTick+0xa8>)
 80008e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e6:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_InitTick+0xa8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <HAL_InitTick+0xa8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80008f4:	4809      	ldr	r0, [pc, #36]	; (800091c <HAL_InitTick+0xa8>)
 80008f6:	f002 fa9b 	bl	8002e30 <HAL_TIM_Base_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d104      	bne.n	800090a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000900:	4806      	ldr	r0, [pc, #24]	; (800091c <HAL_InitTick+0xa8>)
 8000902:	f002 faef 	bl	8002ee4 <HAL_TIM_Base_Start_IT>
 8000906:	4603      	mov	r3, r0
 8000908:	e000      	b.n	800090c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	3730      	adds	r7, #48	; 0x30
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	431bde83 	.word	0x431bde83
 800091c:	20004fcc 	.word	0x20004fcc
 8000920:	40014800 	.word	0x40014800

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000956:	f002 fb27 	bl	8002fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20004fcc 	.word	0x20004fcc

08000964 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <OTG_FS_IRQHandler+0x10>)
 800096a:	f000 fd9a 	bl	80014a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20005014 	.word	0x20005014

08000978 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	e00a      	b.n	80009a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800098a:	f3af 8000 	nop.w
 800098e:	4601      	mov	r1, r0
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	60ba      	str	r2, [r7, #8]
 8000996:	b2ca      	uxtb	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	3301      	adds	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dbf0      	blt.n	800098a <_read+0x12>
	}

return len;
 80009a8:	687b      	ldr	r3, [r7, #4]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
	return -1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009da:	605a      	str	r2, [r3, #4]
	return 0;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <_isatty>:

int _isatty(int file)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
	return 1;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a24:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <_sbrk+0x5c>)
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <_sbrk+0x60>)
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d102      	bne.n	8000a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <_sbrk+0x64>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <_sbrk+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d207      	bcs.n	8000a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a4c:	f00b fbc6 	bl	800c1dc <__errno>
 8000a50:	4603      	mov	r3, r0
 8000a52:	220c      	movs	r2, #12
 8000a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a5a:	e009      	b.n	8000a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <_sbrk+0x64>)
 8000a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20020000 	.word	0x20020000
 8000a7c:	00000400 	.word	0x00000400
 8000a80:	2000032c 	.word	0x2000032c
 8000a84:	2000dda0 	.word	0x2000dda0

08000a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <SystemInit+0x20>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <SystemInit+0x20>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ab6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aba:	2204      	movs	r2, #4
 8000abc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000acc:	2202      	movs	r2, #2
 8000ace:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af0:	f000 fb87 	bl	8001202 <HAL_PCD_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000afa:	f7ff fe89 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20005014 	.word	0x20005014

08000b08 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b28:	d13a      	bne.n	8000ba0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <HAL_PCD_MspInit+0xa0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a1d      	ldr	r2, [pc, #116]	; (8000ba8 <HAL_PCD_MspInit+0xa0>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <HAL_PCD_MspInit+0xa0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b58:	230a      	movs	r3, #10
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4812      	ldr	r0, [pc, #72]	; (8000bac <HAL_PCD_MspInit+0xa4>)
 8000b64:	f000 f996 	bl	8000e94 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <HAL_PCD_MspInit+0xa0>)
 8000b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <HAL_PCD_MspInit+0xa0>)
 8000b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b72:	6353      	str	r3, [r2, #52]	; 0x34
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_PCD_MspInit+0xa0>)
 8000b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_PCD_MspInit+0xa0>)
 8000b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b82:	6453      	str	r3, [r2, #68]	; 0x44
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_PCD_MspInit+0xa0>)
 8000b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2105      	movs	r1, #5
 8000b94:	2043      	movs	r0, #67	; 0x43
 8000b96:	f000 f953 	bl	8000e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000b9a:	2043      	movs	r0, #67	; 0x43
 8000b9c:	f000 f96c 	bl	8000e78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000

08000bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bb6:	490e      	ldr	r1, [pc, #56]	; (8000bf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bcc:	4c0b      	ldr	r4, [pc, #44]	; (8000bfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bda:	f7ff ff55 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bde:	f00b fbf9 	bl	800c3d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be2:	f7ff fd71 	bl	80006c8 <main>
  bx  lr    
 8000be6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 8000bf4:	0800d840 	.word	0x0800d840
  ldr r2, =_sbss
 8000bf8:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 8000bfc:	2000dd9c 	.word	0x2000dd9c

08000c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <HAL_Init+0x40>)
 8000c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <HAL_Init+0x40>)
 8000c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x40>)
 8000c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f8fc 	bl	8000e2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	200f      	movs	r0, #15
 8000c34:	f7ff fe1e 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff fdf0 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023c00 	.word	0x40023c00

08000c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	2000541c 	.word	0x2000541c

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	2000541c 	.word	0x2000541c

08000c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff ffee 	bl	8000c70 <HAL_GetTick>
 8000c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ca0:	d005      	beq.n	8000cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_Delay+0x44>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cae:	bf00      	nop
 8000cb0:	f7ff ffde 	bl	8000c70 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d8f7      	bhi.n	8000cb0 <HAL_Delay+0x28>
  {
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <__NVIC_EnableIRQ+0x38>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	; (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	; 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ff4c 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e52:	f7ff ff61 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	6978      	ldr	r0, [r7, #20]
 8000e5e:	f7ff ffb1 	bl	8000dc4 <NVIC_EncodePriority>
 8000e62:	4602      	mov	r2, r0
 8000e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff80 	bl	8000d70 <__NVIC_SetPriority>
}
 8000e70:	bf00      	nop
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ff54 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	e159      	b.n	8001164 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	f040 8148 	bne.w	800115e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d005      	beq.n	8000ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d130      	bne.n	8000f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	f003 0201 	and.w	r2, r3, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d017      	beq.n	8000f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d123      	bne.n	8000fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	08da      	lsrs	r2, r3, #3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	69b9      	ldr	r1, [r7, #24]
 8000fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0203 	and.w	r2, r3, #3
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80a2 	beq.w	800115e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b57      	ldr	r3, [pc, #348]	; (800117c <HAL_GPIO_Init+0x2e8>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a56      	ldr	r2, [pc, #344]	; (800117c <HAL_GPIO_Init+0x2e8>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b54      	ldr	r3, [pc, #336]	; (800117c <HAL_GPIO_Init+0x2e8>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001036:	4a52      	ldr	r2, [pc, #328]	; (8001180 <HAL_GPIO_Init+0x2ec>)
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a49      	ldr	r2, [pc, #292]	; (8001184 <HAL_GPIO_Init+0x2f0>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d019      	beq.n	8001096 <HAL_GPIO_Init+0x202>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a48      	ldr	r2, [pc, #288]	; (8001188 <HAL_GPIO_Init+0x2f4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0x1fe>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a47      	ldr	r2, [pc, #284]	; (800118c <HAL_GPIO_Init+0x2f8>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00d      	beq.n	800108e <HAL_GPIO_Init+0x1fa>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a46      	ldr	r2, [pc, #280]	; (8001190 <HAL_GPIO_Init+0x2fc>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d007      	beq.n	800108a <HAL_GPIO_Init+0x1f6>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a45      	ldr	r2, [pc, #276]	; (8001194 <HAL_GPIO_Init+0x300>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_GPIO_Init+0x1f2>
 8001082:	2304      	movs	r3, #4
 8001084:	e008      	b.n	8001098 <HAL_GPIO_Init+0x204>
 8001086:	2307      	movs	r3, #7
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x204>
 800108a:	2303      	movs	r3, #3
 800108c:	e004      	b.n	8001098 <HAL_GPIO_Init+0x204>
 800108e:	2302      	movs	r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x204>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x204>
 8001096:	2300      	movs	r3, #0
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	f002 0203 	and.w	r2, r2, #3
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a8:	4935      	ldr	r1, [pc, #212]	; (8001180 <HAL_GPIO_Init+0x2ec>)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b6:	4b38      	ldr	r3, [pc, #224]	; (8001198 <HAL_GPIO_Init+0x304>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010da:	4a2f      	ldr	r2, [pc, #188]	; (8001198 <HAL_GPIO_Init+0x304>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010e0:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <HAL_GPIO_Init+0x304>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001104:	4a24      	ldr	r2, [pc, #144]	; (8001198 <HAL_GPIO_Init+0x304>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <HAL_GPIO_Init+0x304>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112e:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <HAL_GPIO_Init+0x304>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_GPIO_Init+0x304>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001158:	4a0f      	ldr	r2, [pc, #60]	; (8001198 <HAL_GPIO_Init+0x304>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3301      	adds	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	2b0f      	cmp	r3, #15
 8001168:	f67f aea2 	bls.w	8000eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40013800 	.word	0x40013800
 8001184:	40020000 	.word	0x40020000
 8001188:	40020400 	.word	0x40020400
 800118c:	40020800 	.word	0x40020800
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40021000 	.word	0x40021000
 8001198:	40013c00 	.word	0x40013c00

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b8:	e003      	b.n	80011c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b085      	sub	sp, #20
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	460b      	mov	r3, r1
 80011d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e0:	887a      	ldrh	r2, [r7, #2]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4013      	ands	r3, r2
 80011e6:	041a      	lsls	r2, r3, #16
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	400b      	ands	r3, r1
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001202:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001204:	b08f      	sub	sp, #60	; 0x3c
 8001206:	af0a      	add	r7, sp, #40	; 0x28
 8001208:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e10f      	b.n	8001434 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d106      	bne.n	8001234 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fc6a 	bl	8000b08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2203      	movs	r2, #3
 8001238:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f002 f981 	bl	800355a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	687e      	ldr	r6, [r7, #4]
 8001260:	466d      	mov	r5, sp
 8001262:	f106 0410 	add.w	r4, r6, #16
 8001266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800126a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800126e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001272:	e885 0003 	stmia.w	r5, {r0, r1}
 8001276:	1d33      	adds	r3, r6, #4
 8001278:	cb0e      	ldmia	r3, {r1, r2, r3}
 800127a:	6838      	ldr	r0, [r7, #0]
 800127c:	f002 f858 	bl	8003330 <USB_CoreInit>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2202      	movs	r2, #2
 800128a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e0d0      	b.n	8001434 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f002 f96f 	bl	800357c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e04a      	b.n	800133a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	1a9b      	subs	r3, r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	333d      	adds	r3, #61	; 0x3d
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	333c      	adds	r3, #60	; 0x3c
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	b298      	uxth	r0, r3
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	1a9b      	subs	r3, r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	3342      	adds	r3, #66	; 0x42
 80012e0:	4602      	mov	r2, r0
 80012e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012e4:	7bfa      	ldrb	r2, [r7, #15]
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	333f      	adds	r3, #63	; 0x3f
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	3344      	adds	r3, #68	; 0x44
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	3348      	adds	r3, #72	; 0x48
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	1a9b      	subs	r3, r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	3350      	adds	r3, #80	; 0x50
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	3301      	adds	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	d3af      	bcc.n	80012a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]
 8001348:	e044      	b.n	80013d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	1a9b      	subs	r3, r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001372:	7bfa      	ldrb	r2, [r7, #15]
 8001374:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	1a9b      	subs	r3, r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	440b      	add	r3, r1
 8001384:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	1a9b      	subs	r3, r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	1a9b      	subs	r3, r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	3301      	adds	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d3b5      	bcc.n	800134a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	687e      	ldr	r6, [r7, #4]
 80013e6:	466d      	mov	r5, sp
 80013e8:	f106 0410 	add.w	r4, r6, #16
 80013ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80013fc:	1d33      	adds	r3, r6, #4
 80013fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001400:	6838      	ldr	r0, [r7, #0]
 8001402:	f002 f907 	bl	8003614 <USB_DevInit>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2202      	movs	r2, #2
 8001410:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e00d      	b.n	8001434 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f003 f983 	bl	8004738 <USB_DevDisconnect>

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800143c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001450:	2b01      	cmp	r3, #1
 8001452:	d101      	bne.n	8001458 <HAL_PCD_Start+0x1c>
 8001454:	2302      	movs	r3, #2
 8001456:	e020      	b.n	800149a <HAL_PCD_Start+0x5e>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	2b01      	cmp	r3, #1
 8001466:	d109      	bne.n	800147c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800146c:	2b01      	cmp	r3, #1
 800146e:	d005      	beq.n	800147c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001474:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f002 f859 	bl	8003538 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f003 f933 	bl	80046f6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014a2:	b590      	push	{r4, r7, lr}
 80014a4:	b08d      	sub	sp, #52	; 0x34
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 f9f1 	bl	80048a0 <USB_GetMode>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f040 839d 	bne.w	8001c00 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f003 f955 	bl	800477a <USB_ReadInterrupts>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8393 	beq.w	8001bfe <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 f94c 	bl	800477a <USB_ReadInterrupts>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d107      	bne.n	80014fc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695a      	ldr	r2, [r3, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f002 0202 	and.w	r2, r2, #2
 80014fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f003 f93a 	bl	800477a <USB_ReadInterrupts>
 8001506:	4603      	mov	r3, r0
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	2b10      	cmp	r3, #16
 800150e:	d161      	bne.n	80015d4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	699a      	ldr	r2, [r3, #24]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0210 	bic.w	r2, r2, #16
 800151e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	f003 020f 	and.w	r2, r3, #15
 800152c:	4613      	mov	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	4413      	add	r3, r2
 800153c:	3304      	adds	r3, #4
 800153e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	0c5b      	lsrs	r3, r3, #17
 8001544:	f003 030f 	and.w	r3, r3, #15
 8001548:	2b02      	cmp	r3, #2
 800154a:	d124      	bne.n	8001596 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d035      	beq.n	80015c4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001566:	b29b      	uxth	r3, r3
 8001568:	461a      	mov	r2, r3
 800156a:	6a38      	ldr	r0, [r7, #32]
 800156c:	f002 ff71 	bl	8004452 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800157c:	441a      	add	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	699a      	ldr	r2, [r3, #24]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800158e:	441a      	add	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	619a      	str	r2, [r3, #24]
 8001594:	e016      	b.n	80015c4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	0c5b      	lsrs	r3, r3, #17
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d110      	bne.n	80015c4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80015a8:	2208      	movs	r2, #8
 80015aa:	4619      	mov	r1, r3
 80015ac:	6a38      	ldr	r0, [r7, #32]
 80015ae:	f002 ff50 	bl	8004452 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	091b      	lsrs	r3, r3, #4
 80015ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015be:	441a      	add	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	699a      	ldr	r2, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0210 	orr.w	r2, r2, #16
 80015d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f003 f8ce 	bl	800477a <USB_ReadInterrupts>
 80015de:	4603      	mov	r3, r0
 80015e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015e8:	d16e      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 f8d4 	bl	80047a0 <USB_ReadDevAllOutEpInterrupt>
 80015f8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80015fa:	e062      	b.n	80016c2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d057      	beq.n	80016b6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f003 f8f9 	bl	8004808 <USB_ReadDevOutEPInterrupt>
 8001616:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00c      	beq.n	800163c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	015a      	lsls	r2, r3, #5
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	4413      	add	r3, r2
 800162a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800162e:	461a      	mov	r2, r3
 8001630:	2301      	movs	r3, #1
 8001632:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 fdde 	bl	80021f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00c      	beq.n	8001660 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	015a      	lsls	r2, r3, #5
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	4413      	add	r3, r2
 800164e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001652:	461a      	mov	r2, r3
 8001654:	2308      	movs	r3, #8
 8001656:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fed8 	bl	8002410 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	d008      	beq.n	800167c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	015a      	lsls	r2, r3, #5
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	4413      	add	r3, r2
 8001672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001676:	461a      	mov	r2, r3
 8001678:	2310      	movs	r3, #16
 800167a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	f003 0320 	and.w	r3, r3, #32
 8001682:	2b00      	cmp	r3, #0
 8001684:	d008      	beq.n	8001698 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	015a      	lsls	r2, r3, #5
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	4413      	add	r3, r2
 800168e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001692:	461a      	mov	r2, r3
 8001694:	2320      	movs	r3, #32
 8001696:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d009      	beq.n	80016b6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	015a      	lsls	r2, r3, #5
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ae:	461a      	mov	r2, r3
 80016b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	3301      	adds	r3, #1
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016be:	085b      	lsrs	r3, r3, #1
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d199      	bne.n	80015fc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 f854 	bl	800477a <USB_ReadInterrupts>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016dc:	f040 80c0 	bne.w	8001860 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 f875 	bl	80047d4 <USB_ReadDevAllInEpInterrupt>
 80016ea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80016f0:	e0b2      	b.n	8001858 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80a7 	beq.w	800184c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f003 f89b 	bl	8004844 <USB_ReadDevInEPInterrupt>
 800170e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d057      	beq.n	80017ca <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	f003 030f 	and.w	r3, r3, #15
 8001720:	2201      	movs	r2, #1
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800172e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43db      	mvns	r3, r3
 8001734:	69f9      	ldr	r1, [r7, #28]
 8001736:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800173a:	4013      	ands	r3, r2
 800173c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	015a      	lsls	r2, r3, #5
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	4413      	add	r3, r2
 8001746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800174a:	461a      	mov	r2, r3
 800174c:	2301      	movs	r3, #1
 800174e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d132      	bne.n	80017be <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800175c:	4613      	mov	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	1a9b      	subs	r3, r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	3348      	adds	r3, #72	; 0x48
 8001768:	6819      	ldr	r1, [r3, #0]
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800176e:	4613      	mov	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	1a9b      	subs	r3, r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4403      	add	r3, r0
 8001778:	3344      	adds	r3, #68	; 0x44
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4419      	add	r1, r3
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001782:	4613      	mov	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	1a9b      	subs	r3, r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4403      	add	r3, r0
 800178c:	3348      	adds	r3, #72	; 0x48
 800178e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	2b00      	cmp	r3, #0
 8001794:	d113      	bne.n	80017be <HAL_PCD_IRQHandler+0x31c>
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800179a:	4613      	mov	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	1a9b      	subs	r3, r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	3350      	adds	r3, #80	; 0x50
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d108      	bne.n	80017be <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80017b6:	461a      	mov	r2, r3
 80017b8:	2101      	movs	r1, #1
 80017ba:	f003 f8a3 	bl	8004904 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4619      	mov	r1, r3
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f007 fc7b 	bl	80090c0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	015a      	lsls	r2, r3, #5
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	4413      	add	r3, r2
 80017dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e0:	461a      	mov	r2, r3
 80017e2:	2308      	movs	r3, #8
 80017e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017fc:	461a      	mov	r2, r3
 80017fe:	2310      	movs	r3, #16
 8001800:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	015a      	lsls	r2, r3, #5
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	4413      	add	r3, r2
 8001814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001818:	461a      	mov	r2, r3
 800181a:	2340      	movs	r3, #64	; 0x40
 800181c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d008      	beq.n	800183a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	015a      	lsls	r2, r3, #5
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	4413      	add	r3, r2
 8001830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001834:	461a      	mov	r2, r3
 8001836:	2302      	movs	r3, #2
 8001838:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 fc48 	bl	80020dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	3301      	adds	r3, #1
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	085b      	lsrs	r3, r3, #1
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185a:	2b00      	cmp	r3, #0
 800185c:	f47f af49 	bne.w	80016f2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f002 ff88 	bl	800477a <USB_ReadInterrupts>
 800186a:	4603      	mov	r3, r0
 800186c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001874:	d122      	bne.n	80018bc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001890:	2b01      	cmp	r3, #1
 8001892:	d108      	bne.n	80018a6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800189c:	2100      	movs	r1, #0
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fe54 	bl	800254c <HAL_PCDEx_LPM_Callback>
 80018a4:	e002      	b.n	80018ac <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f007 fc80 	bl	80091ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80018ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 ff5a 	bl	800477a <USB_ReadInterrupts>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018d0:	d112      	bne.n	80018f8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d102      	bne.n	80018e8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f007 fc3c 	bl	8009160 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018f6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 ff3c 	bl	800477a <USB_ReadInterrupts>
 8001902:	4603      	mov	r3, r0
 8001904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800190c:	f040 80c7 	bne.w	8001a9e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2110      	movs	r1, #16
 800192a:	4618      	mov	r0, r3
 800192c:	f001 ffd6 	bl	80038dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001934:	e056      	b.n	80019e4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001938:	015a      	lsls	r2, r3, #5
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	4413      	add	r3, r2
 800193e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001942:	461a      	mov	r2, r3
 8001944:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001948:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194c:	015a      	lsls	r2, r3, #5
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	4413      	add	r3, r2
 8001952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800195a:	0151      	lsls	r1, r2, #5
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	440a      	add	r2, r1
 8001960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001964:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001968:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196c:	015a      	lsls	r2, r3, #5
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	4413      	add	r3, r2
 8001972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800197a:	0151      	lsls	r1, r2, #5
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	440a      	add	r2, r1
 8001980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001984:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001988:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800198a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198c:	015a      	lsls	r2, r3, #5
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	4413      	add	r3, r2
 8001992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001996:	461a      	mov	r2, r3
 8001998:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800199c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a0:	015a      	lsls	r2, r3, #5
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	4413      	add	r3, r2
 80019a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ae:	0151      	lsls	r1, r2, #5
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	440a      	add	r2, r1
 80019b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c0:	015a      	lsls	r2, r3, #5
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	4413      	add	r3, r2
 80019c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ce:	0151      	lsls	r1, r2, #5
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	440a      	add	r2, r1
 80019d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e0:	3301      	adds	r3, #1
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d3a3      	bcc.n	8001936 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019fc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a00:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d016      	beq.n	8001a38 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a1a:	f043 030b 	orr.w	r3, r3, #11
 8001a1e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a30:	f043 030b 	orr.w	r3, r3, #11
 8001a34:	6453      	str	r3, [r2, #68]	; 0x44
 8001a36:	e015      	b.n	8001a64 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a4a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a4e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a5e:	f043 030b 	orr.w	r3, r3, #11
 8001a62:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a76:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f002 ff3b 	bl	8004904 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 fe69 	bl	800477a <USB_ReadInterrupts>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ab2:	d124      	bne.n	8001afe <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 feff 	bl	80048bc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 ff67 	bl	8003996 <USB_GetDevSpeed>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681c      	ldr	r4, [r3, #0]
 8001ad4:	f001 f95a 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8001ad8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f001 fc86 	bl	80033f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f007 fb11 	bl	8009110 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695a      	ldr	r2, [r3, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 fe39 	bl	800477a <USB_ReadInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d10a      	bne.n	8001b28 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f007 faee 	bl	80090f4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f002 0208 	and.w	r2, r2, #8
 8001b26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f002 fe24 	bl	800477a <USB_ReadInterrupts>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b3c:	d10f      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	4619      	mov	r1, r3
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f007 fb4f 	bl	80091ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f002 fe09 	bl	800477a <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b72:	d10f      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f007 fb22 	bl	80091c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 fdee 	bl	800477a <USB_ReadInterrupts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba8:	d10a      	bne.n	8001bc0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f007 fb30 	bl	8009210 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 fdd8 	bl	800477a <USB_ReadInterrupts>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d115      	bne.n	8001c00 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f007 fb20 	bl	800922c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6859      	ldr	r1, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	e000      	b.n	8001c00 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001bfe:	bf00      	nop
    }
  }
}
 8001c00:	3734      	adds	r7, #52	; 0x34
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd90      	pop	{r4, r7, pc}

08001c06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_PCD_SetAddress+0x1a>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e013      	b.n	8001c48 <HAL_PCD_SetAddress+0x42>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	78fa      	ldrb	r2, [r7, #3]
 8001c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f002 fd36 	bl	80046aa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	4608      	mov	r0, r1
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4603      	mov	r3, r0
 8001c60:	70fb      	strb	r3, [r7, #3]
 8001c62:	460b      	mov	r3, r1
 8001c64:	803b      	strh	r3, [r7, #0]
 8001c66:	4613      	mov	r3, r2
 8001c68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	da0f      	bge.n	8001c96 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	f003 020f 	and.w	r2, r3, #15
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	1a9b      	subs	r3, r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	3338      	adds	r3, #56	; 0x38
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2201      	movs	r2, #1
 8001c92:	705a      	strb	r2, [r3, #1]
 8001c94:	e00f      	b.n	8001cb6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	f003 020f 	and.w	r2, r3, #15
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	3304      	adds	r3, #4
 8001cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cc2:	883a      	ldrh	r2, [r7, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	78ba      	ldrb	r2, [r7, #2]
 8001ccc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	785b      	ldrb	r3, [r3, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d004      	beq.n	8001ce0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ce0:	78bb      	ldrb	r3, [r7, #2]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d102      	bne.n	8001cec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_PCD_EP_Open+0xaa>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e00e      	b.n	8001d18 <HAL_PCD_EP_Open+0xc8>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68f9      	ldr	r1, [r7, #12]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f001 fe69 	bl	80039e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001d16:	7afb      	ldrb	r3, [r7, #11]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	da0f      	bge.n	8001d54 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	f003 020f 	and.w	r2, r3, #15
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	3338      	adds	r3, #56	; 0x38
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	3304      	adds	r3, #4
 8001d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	705a      	strb	r2, [r3, #1]
 8001d52:	e00f      	b.n	8001d74 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	f003 020f 	and.w	r2, r3, #15
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_PCD_EP_Close+0x6e>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e00e      	b.n	8001dac <HAL_PCD_EP_Close+0x8c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68f9      	ldr	r1, [r7, #12]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f001 fea7 	bl	8003af0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc4:	7afb      	ldrb	r3, [r7, #11]
 8001dc6:	f003 020f 	and.w	r2, r3, #15
 8001dca:	4613      	mov	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	4413      	add	r3, r2
 8001dda:	3304      	adds	r3, #4
 8001ddc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2200      	movs	r2, #0
 8001df4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df6:	7afb      	ldrb	r3, [r7, #11]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d102      	bne.n	8001e10 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e10:	7afb      	ldrb	r3, [r7, #11]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	6979      	ldr	r1, [r7, #20]
 8001e28:	f002 f982 	bl	8004130 <USB_EP0StartXfer>
 8001e2c:	e008      	b.n	8001e40 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	6979      	ldr	r1, [r7, #20]
 8001e3c:	f001 ff34 	bl	8003ca8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	f003 020f 	and.w	r2, r3, #15
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e6c:	681b      	ldr	r3, [r3, #0]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	460b      	mov	r3, r1
 8001e88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e8a:	7afb      	ldrb	r3, [r7, #11]
 8001e8c:	f003 020f 	and.w	r2, r3, #15
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	3338      	adds	r3, #56	; 0x38
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eba:	7afb      	ldrb	r3, [r7, #11]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d102      	bne.n	8001ed4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ed4:	7afb      	ldrb	r3, [r7, #11]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	6979      	ldr	r1, [r7, #20]
 8001eec:	f002 f920 	bl	8004130 <USB_EP0StartXfer>
 8001ef0:	e008      	b.n	8001f04 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	6979      	ldr	r1, [r7, #20]
 8001f00:	f001 fed2 	bl	8003ca8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 020f 	and.w	r2, r3, #15
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d901      	bls.n	8001f2c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e050      	b.n	8001fce <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	da0f      	bge.n	8001f54 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 020f 	and.w	r2, r3, #15
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	3338      	adds	r3, #56	; 0x38
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	3304      	adds	r3, #4
 8001f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	705a      	strb	r2, [r3, #1]
 8001f52:	e00d      	b.n	8001f70 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f54:	78fa      	ldrb	r2, [r7, #3]
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	3304      	adds	r3, #4
 8001f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2201      	movs	r2, #1
 8001f74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <HAL_PCD_EP_SetStall+0x82>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e01e      	b.n	8001fce <HAL_PCD_EP_SetStall+0xc0>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68f9      	ldr	r1, [r7, #12]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f002 faaf 	bl	8004502 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10a      	bne.n	8001fc4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	b2d9      	uxtb	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f002 fca0 	bl	8004904 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	f003 020f 	and.w	r2, r3, #15
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d901      	bls.n	8001ff4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e042      	b.n	800207a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da0f      	bge.n	800201c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	f003 020f 	and.w	r2, r3, #15
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	3338      	adds	r3, #56	; 0x38
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	3304      	adds	r3, #4
 8002012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	705a      	strb	r2, [r3, #1]
 800201a:	e00f      	b.n	800203c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	f003 020f 	and.w	r2, r3, #15
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	3304      	adds	r3, #4
 8002034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	b2da      	uxtb	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_PCD_EP_ClrStall+0x86>
 8002058:	2302      	movs	r3, #2
 800205a:	e00e      	b.n	800207a <HAL_PCD_EP_ClrStall+0xa4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68f9      	ldr	r1, [r7, #12]
 800206a:	4618      	mov	r0, r3
 800206c:	f002 fab7 	bl	80045de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_PCD_EP_Flush+0x1a>
 8002098:	2302      	movs	r3, #2
 800209a:	e01b      	b.n	80020d4 <HAL_PCD_EP_Flush+0x52>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80020a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	da09      	bge.n	80020c0 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	4619      	mov	r1, r3
 80020b8:	4610      	mov	r0, r2
 80020ba:	f001 fc0f 	bl	80038dc <USB_FlushTxFifo>
 80020be:	e004      	b.n	80020ca <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f001 fc2d 	bl	8003924 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	3338      	adds	r3, #56	; 0x38
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	3304      	adds	r3, #4
 8002102:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	699a      	ldr	r2, [r3, #24]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	429a      	cmp	r2, r3
 800210e:	d901      	bls.n	8002114 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e06c      	b.n	80021ee <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	429a      	cmp	r2, r3
 8002128:	d902      	bls.n	8002130 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	3303      	adds	r3, #3
 8002134:	089b      	lsrs	r3, r3, #2
 8002136:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002138:	e02b      	b.n	8002192 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	429a      	cmp	r2, r3
 800214e:	d902      	bls.n	8002156 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3303      	adds	r3, #3
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	68d9      	ldr	r1, [r3, #12]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800216e:	b2db      	uxtb	r3, r3
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	4603      	mov	r3, r0
 8002174:	6978      	ldr	r0, [r7, #20]
 8002176:	f002 f92e 	bl	80043d6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	441a      	add	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	441a      	add	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d809      	bhi.n	80021bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d203      	bcs.n	80021bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1be      	bne.n	800213a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d811      	bhi.n	80021ec <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	2201      	movs	r2, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	6939      	ldr	r1, [r7, #16]
 80021e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021e8:	4013      	ands	r3, r2
 80021ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	333c      	adds	r3, #60	; 0x3c
 8002210:	3304      	adds	r3, #4
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b01      	cmp	r3, #1
 800222c:	f040 80a0 	bne.w	8002370 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d015      	beq.n	8002266 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4a72      	ldr	r2, [pc, #456]	; (8002408 <PCD_EP_OutXfrComplete_int+0x210>)
 800223e:	4293      	cmp	r3, r2
 8002240:	f240 80dd 	bls.w	80023fe <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80d7 	beq.w	80023fe <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225c:	461a      	mov	r2, r3
 800225e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002262:	6093      	str	r3, [r2, #8]
 8002264:	e0cb      	b.n	80023fe <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	f003 0320 	and.w	r3, r3, #32
 800226c:	2b00      	cmp	r3, #0
 800226e:	d009      	beq.n	8002284 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227c:	461a      	mov	r2, r3
 800227e:	2320      	movs	r3, #32
 8002280:	6093      	str	r3, [r2, #8]
 8002282:	e0bc      	b.n	80023fe <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800228a:	2b00      	cmp	r3, #0
 800228c:	f040 80b7 	bne.w	80023fe <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4a5d      	ldr	r2, [pc, #372]	; (8002408 <PCD_EP_OutXfrComplete_int+0x210>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d90f      	bls.n	80022b8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00a      	beq.n	80022b8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ae:	461a      	mov	r2, r3
 80022b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022b4:	6093      	str	r3, [r2, #8]
 80022b6:	e0a2      	b.n	80023fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022ca:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	0159      	lsls	r1, r3, #5
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	440b      	add	r3, r1
 80022d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80022de:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4403      	add	r3, r0
 80022ee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80022f2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002306:	6819      	ldr	r1, [r3, #0]
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4403      	add	r3, r0
 8002316:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4419      	add	r1, r3
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4403      	add	r3, r0
 800232c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002330:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d114      	bne.n	8002362 <PCD_EP_OutXfrComplete_int+0x16a>
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d108      	bne.n	8002362 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800235a:	461a      	mov	r2, r3
 800235c:	2101      	movs	r1, #1
 800235e:	f002 fad1 	bl	8004904 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	4619      	mov	r1, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f006 fe8e 	bl	800908a <HAL_PCD_DataOutStageCallback>
 800236e:	e046      	b.n	80023fe <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4a26      	ldr	r2, [pc, #152]	; (800240c <PCD_EP_OutXfrComplete_int+0x214>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d124      	bne.n	80023c2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4413      	add	r3, r2
 800238a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238e:	461a      	mov	r2, r3
 8002390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002394:	6093      	str	r3, [r2, #8]
 8002396:	e032      	b.n	80023fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ae:	461a      	mov	r2, r3
 80023b0:	2320      	movs	r3, #32
 80023b2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	4619      	mov	r1, r3
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f006 fe65 	bl	800908a <HAL_PCD_DataOutStageCallback>
 80023c0:	e01d      	b.n	80023fe <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d114      	bne.n	80023f2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d108      	bne.n	80023f2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023ea:	461a      	mov	r2, r3
 80023ec:	2100      	movs	r1, #0
 80023ee:	f002 fa89 	bl	8004904 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	4619      	mov	r1, r3
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f006 fe46 	bl	800908a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	4f54300a 	.word	0x4f54300a
 800240c:	4f54310a 	.word	0x4f54310a

08002410 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	333c      	adds	r3, #60	; 0x3c
 8002428:	3304      	adds	r3, #4
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4a15      	ldr	r2, [pc, #84]	; (8002498 <PCD_EP_OutSetupPacket_int+0x88>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d90e      	bls.n	8002464 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800244c:	2b00      	cmp	r3, #0
 800244e:	d009      	beq.n	8002464 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245c:	461a      	mov	r2, r3
 800245e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002462:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f006 fdfe 	bl	8009066 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <PCD_EP_OutSetupPacket_int+0x88>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d90c      	bls.n	800248c <PCD_EP_OutSetupPacket_int+0x7c>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d108      	bne.n	800248c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002484:	461a      	mov	r2, r3
 8002486:	2101      	movs	r1, #1
 8002488:	f002 fa3c 	bl	8004904 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	4f54300a 	.word	0x4f54300a

0800249c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	70fb      	strb	r3, [r7, #3]
 80024a8:	4613      	mov	r3, r2
 80024aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d107      	bne.n	80024ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024ba:	883b      	ldrh	r3, [r7, #0]
 80024bc:	0419      	lsls	r1, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
 80024c8:	e028      	b.n	800251c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	0c1b      	lsrs	r3, r3, #16
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	4413      	add	r3, r2
 80024d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024d8:	2300      	movs	r3, #0
 80024da:	73fb      	strb	r3, [r7, #15]
 80024dc:	e00d      	b.n	80024fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	3340      	adds	r3, #64	; 0x40
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	4413      	add	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	3301      	adds	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	3b01      	subs	r3, #1
 8002500:	429a      	cmp	r2, r3
 8002502:	d3ec      	bcc.n	80024de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002504:	883b      	ldrh	r3, [r7, #0]
 8002506:	0418      	lsls	r0, r3, #16
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6819      	ldr	r1, [r3, #0]
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	3b01      	subs	r3, #1
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	4302      	orrs	r2, r0
 8002514:	3340      	adds	r3, #64	; 0x40
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e264      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d075      	beq.n	800266e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002582:	4ba3      	ldr	r3, [pc, #652]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b04      	cmp	r3, #4
 800258c:	d00c      	beq.n	80025a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800258e:	4ba0      	ldr	r3, [pc, #640]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002596:	2b08      	cmp	r3, #8
 8002598:	d112      	bne.n	80025c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259a:	4b9d      	ldr	r3, [pc, #628]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a6:	d10b      	bne.n	80025c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a8:	4b99      	ldr	r3, [pc, #612]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d05b      	beq.n	800266c <HAL_RCC_OscConfig+0x108>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d157      	bne.n	800266c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e23f      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c8:	d106      	bne.n	80025d8 <HAL_RCC_OscConfig+0x74>
 80025ca:	4b91      	ldr	r3, [pc, #580]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a90      	ldr	r2, [pc, #576]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e01d      	b.n	8002614 <HAL_RCC_OscConfig+0xb0>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e0:	d10c      	bne.n	80025fc <HAL_RCC_OscConfig+0x98>
 80025e2:	4b8b      	ldr	r3, [pc, #556]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a8a      	ldr	r2, [pc, #552]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4b88      	ldr	r3, [pc, #544]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a87      	ldr	r2, [pc, #540]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e00b      	b.n	8002614 <HAL_RCC_OscConfig+0xb0>
 80025fc:	4b84      	ldr	r3, [pc, #528]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a83      	ldr	r2, [pc, #524]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 8002602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b81      	ldr	r3, [pc, #516]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a80      	ldr	r2, [pc, #512]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 800260e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe fb28 	bl	8000c70 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002624:	f7fe fb24 	bl	8000c70 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e204      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	4b76      	ldr	r3, [pc, #472]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0xc0>
 8002642:	e014      	b.n	800266e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe fb14 	bl	8000c70 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800264c:	f7fe fb10 	bl	8000c70 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e1f0      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	4b6c      	ldr	r3, [pc, #432]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0xe8>
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d063      	beq.n	8002742 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800267a:	4b65      	ldr	r3, [pc, #404]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002686:	4b62      	ldr	r3, [pc, #392]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800268e:	2b08      	cmp	r3, #8
 8002690:	d11c      	bne.n	80026cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002692:	4b5f      	ldr	r3, [pc, #380]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d116      	bne.n	80026cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269e:	4b5c      	ldr	r3, [pc, #368]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d005      	beq.n	80026b6 <HAL_RCC_OscConfig+0x152>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e1c4      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b6:	4b56      	ldr	r3, [pc, #344]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4952      	ldr	r1, [pc, #328]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	e03a      	b.n	8002742 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d4:	4b4f      	ldr	r3, [pc, #316]	; (8002814 <HAL_RCC_OscConfig+0x2b0>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f7fe fac9 	bl	8000c70 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e2:	f7fe fac5 	bl	8000c70 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e1a5      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	4b46      	ldr	r3, [pc, #280]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4b43      	ldr	r3, [pc, #268]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4940      	ldr	r1, [pc, #256]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]
 8002714:	e015      	b.n	8002742 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002716:	4b3f      	ldr	r3, [pc, #252]	; (8002814 <HAL_RCC_OscConfig+0x2b0>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe faa8 	bl	8000c70 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002724:	f7fe faa4 	bl	8000c70 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e184      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	4b36      	ldr	r3, [pc, #216]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d030      	beq.n	80027b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d016      	beq.n	8002784 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002756:	4b30      	ldr	r3, [pc, #192]	; (8002818 <HAL_RCC_OscConfig+0x2b4>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe fa88 	bl	8000c70 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002764:	f7fe fa84 	bl	8000c70 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e164      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x200>
 8002782:	e015      	b.n	80027b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002784:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_RCC_OscConfig+0x2b4>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278a:	f7fe fa71 	bl	8000c70 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002792:	f7fe fa6d 	bl	8000c70 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e14d      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a4:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80027a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f0      	bne.n	8002792 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80a0 	beq.w	80028fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c2:	4b13      	ldr	r3, [pc, #76]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10f      	bne.n	80027ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ea:	2301      	movs	r3, #1
 80027ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_OscConfig+0x2b8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d121      	bne.n	800283e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_RCC_OscConfig+0x2b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a07      	ldr	r2, [pc, #28]	; (800281c <HAL_RCC_OscConfig+0x2b8>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002806:	f7fe fa33 	bl	8000c70 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	e011      	b.n	8002832 <HAL_RCC_OscConfig+0x2ce>
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	42470000 	.word	0x42470000
 8002818:	42470e80 	.word	0x42470e80
 800281c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002820:	f7fe fa26 	bl	8000c70 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e106      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002832:	4b85      	ldr	r3, [pc, #532]	; (8002a48 <HAL_RCC_OscConfig+0x4e4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d106      	bne.n	8002854 <HAL_RCC_OscConfig+0x2f0>
 8002846:	4b81      	ldr	r3, [pc, #516]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	4a80      	ldr	r2, [pc, #512]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6713      	str	r3, [r2, #112]	; 0x70
 8002852:	e01c      	b.n	800288e <HAL_RCC_OscConfig+0x32a>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b05      	cmp	r3, #5
 800285a:	d10c      	bne.n	8002876 <HAL_RCC_OscConfig+0x312>
 800285c:	4b7b      	ldr	r3, [pc, #492]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	4a7a      	ldr	r2, [pc, #488]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 8002862:	f043 0304 	orr.w	r3, r3, #4
 8002866:	6713      	str	r3, [r2, #112]	; 0x70
 8002868:	4b78      	ldr	r3, [pc, #480]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	4a77      	ldr	r2, [pc, #476]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6713      	str	r3, [r2, #112]	; 0x70
 8002874:	e00b      	b.n	800288e <HAL_RCC_OscConfig+0x32a>
 8002876:	4b75      	ldr	r3, [pc, #468]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	4a74      	ldr	r2, [pc, #464]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	6713      	str	r3, [r2, #112]	; 0x70
 8002882:	4b72      	ldr	r3, [pc, #456]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	4a71      	ldr	r2, [pc, #452]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 8002888:	f023 0304 	bic.w	r3, r3, #4
 800288c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d015      	beq.n	80028c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002896:	f7fe f9eb 	bl	8000c70 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289c:	e00a      	b.n	80028b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289e:	f7fe f9e7 	bl	8000c70 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e0c5      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b4:	4b65      	ldr	r3, [pc, #404]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0ee      	beq.n	800289e <HAL_RCC_OscConfig+0x33a>
 80028c0:	e014      	b.n	80028ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c2:	f7fe f9d5 	bl	8000c70 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c8:	e00a      	b.n	80028e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ca:	f7fe f9d1 	bl	8000c70 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d8:	4293      	cmp	r3, r2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e0af      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e0:	4b5a      	ldr	r3, [pc, #360]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1ee      	bne.n	80028ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ec:	7dfb      	ldrb	r3, [r7, #23]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d105      	bne.n	80028fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f2:	4b56      	ldr	r3, [pc, #344]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a55      	ldr	r2, [pc, #340]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 80028f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 809b 	beq.w	8002a3e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002908:	4b50      	ldr	r3, [pc, #320]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 030c 	and.w	r3, r3, #12
 8002910:	2b08      	cmp	r3, #8
 8002912:	d05c      	beq.n	80029ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d141      	bne.n	80029a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291c:	4b4c      	ldr	r3, [pc, #304]	; (8002a50 <HAL_RCC_OscConfig+0x4ec>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002922:	f7fe f9a5 	bl	8000c70 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292a:	f7fe f9a1 	bl	8000c70 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e081      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293c:	4b43      	ldr	r3, [pc, #268]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f0      	bne.n	800292a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	019b      	lsls	r3, r3, #6
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	3b01      	subs	r3, #1
 8002962:	041b      	lsls	r3, r3, #16
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	061b      	lsls	r3, r3, #24
 800296c:	4937      	ldr	r1, [pc, #220]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 800296e:	4313      	orrs	r3, r2
 8002970:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002972:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <HAL_RCC_OscConfig+0x4ec>)
 8002974:	2201      	movs	r2, #1
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe f97a 	bl	8000c70 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002980:	f7fe f976 	bl	8000c70 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e056      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	4b2e      	ldr	r3, [pc, #184]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x41c>
 800299e:	e04e      	b.n	8002a3e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a0:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <HAL_RCC_OscConfig+0x4ec>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a6:	f7fe f963 	bl	8000c70 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ae:	f7fe f95f 	bl	8000c70 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e03f      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c0:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f0      	bne.n	80029ae <HAL_RCC_OscConfig+0x44a>
 80029cc:	e037      	b.n	8002a3e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e032      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029da:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <HAL_RCC_OscConfig+0x4e8>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d028      	beq.n	8002a3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d121      	bne.n	8002a3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d11a      	bne.n	8002a3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a10:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d111      	bne.n	8002a3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	3b01      	subs	r3, #1
 8002a24:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	42470060 	.word	0x42470060

08002a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0cc      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a68:	4b68      	ldr	r3, [pc, #416]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d90c      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a76:	4b65      	ldr	r3, [pc, #404]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0b8      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d020      	beq.n	8002ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa8:	4b59      	ldr	r3, [pc, #356]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a58      	ldr	r2, [pc, #352]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac0:	4b53      	ldr	r3, [pc, #332]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a52      	ldr	r2, [pc, #328]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002acc:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	494d      	ldr	r1, [pc, #308]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d044      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d119      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e07f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d003      	beq.n	8002b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b12:	4b3f      	ldr	r3, [pc, #252]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e06f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b22:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e067      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b32:	4b37      	ldr	r3, [pc, #220]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f023 0203 	bic.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4934      	ldr	r1, [pc, #208]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b44:	f7fe f894 	bl	8000c70 <HAL_GetTick>
 8002b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4c:	f7fe f890 	bl	8000c70 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e04f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 020c 	and.w	r2, r3, #12
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d1eb      	bne.n	8002b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b74:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d20c      	bcs.n	8002b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e032      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba8:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4916      	ldr	r1, [pc, #88]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	490e      	ldr	r1, [pc, #56]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bda:	f000 f821 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	490a      	ldr	r1, [pc, #40]	; (8002c14 <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	5ccb      	ldrb	r3, [r1, r3]
 8002bee:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf2:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fe3a 	bl	8000874 <HAL_InitTick>

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023c00 	.word	0x40023c00
 8002c10:	40023800 	.word	0x40023800
 8002c14:	0800d75c 	.word	0x0800d75c
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	20000004 	.word	0x20000004

08002c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c26:	2100      	movs	r1, #0
 8002c28:	6079      	str	r1, [r7, #4]
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	60f9      	str	r1, [r7, #12]
 8002c2e:	2100      	movs	r1, #0
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c32:	2100      	movs	r1, #0
 8002c34:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c36:	4952      	ldr	r1, [pc, #328]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c38:	6889      	ldr	r1, [r1, #8]
 8002c3a:	f001 010c 	and.w	r1, r1, #12
 8002c3e:	2908      	cmp	r1, #8
 8002c40:	d00d      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x3e>
 8002c42:	2908      	cmp	r1, #8
 8002c44:	f200 8094 	bhi.w	8002d70 <HAL_RCC_GetSysClockFreq+0x150>
 8002c48:	2900      	cmp	r1, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0x32>
 8002c4c:	2904      	cmp	r1, #4
 8002c4e:	d003      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x38>
 8002c50:	e08e      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c52:	4b4c      	ldr	r3, [pc, #304]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x164>)
 8002c54:	60bb      	str	r3, [r7, #8]
       break;
 8002c56:	e08e      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c58:	4b4b      	ldr	r3, [pc, #300]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c5a:	60bb      	str	r3, [r7, #8]
      break;
 8002c5c:	e08b      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c5e:	4948      	ldr	r1, [pc, #288]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c60:	6849      	ldr	r1, [r1, #4]
 8002c62:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002c66:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c68:	4945      	ldr	r1, [pc, #276]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c6a:	6849      	ldr	r1, [r1, #4]
 8002c6c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002c70:	2900      	cmp	r1, #0
 8002c72:	d024      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c74:	4942      	ldr	r1, [pc, #264]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c76:	6849      	ldr	r1, [r1, #4]
 8002c78:	0989      	lsrs	r1, r1, #6
 8002c7a:	4608      	mov	r0, r1
 8002c7c:	f04f 0100 	mov.w	r1, #0
 8002c80:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002c84:	f04f 0500 	mov.w	r5, #0
 8002c88:	ea00 0204 	and.w	r2, r0, r4
 8002c8c:	ea01 0305 	and.w	r3, r1, r5
 8002c90:	493d      	ldr	r1, [pc, #244]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c92:	fb01 f003 	mul.w	r0, r1, r3
 8002c96:	2100      	movs	r1, #0
 8002c98:	fb01 f102 	mul.w	r1, r1, r2
 8002c9c:	1844      	adds	r4, r0, r1
 8002c9e:	493a      	ldr	r1, [pc, #232]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ca0:	fba2 0101 	umull	r0, r1, r2, r1
 8002ca4:	1863      	adds	r3, r4, r1
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	f7fd fae6 	bl	8000280 <__aeabi_uldivmod>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4613      	mov	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e04a      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbe:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	099b      	lsrs	r3, r3, #6
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	ea02 0400 	and.w	r4, r2, r0
 8002cd6:	ea03 0501 	and.w	r5, r3, r1
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	014b      	lsls	r3, r1, #5
 8002ce8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cec:	0142      	lsls	r2, r0, #5
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	1b00      	subs	r0, r0, r4
 8002cf4:	eb61 0105 	sbc.w	r1, r1, r5
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	018b      	lsls	r3, r1, #6
 8002d02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d06:	0182      	lsls	r2, r0, #6
 8002d08:	1a12      	subs	r2, r2, r0
 8002d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d0e:	f04f 0000 	mov.w	r0, #0
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	00d9      	lsls	r1, r3, #3
 8002d18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d1c:	00d0      	lsls	r0, r2, #3
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	1912      	adds	r2, r2, r4
 8002d24:	eb45 0303 	adc.w	r3, r5, r3
 8002d28:	f04f 0000 	mov.w	r0, #0
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	0299      	lsls	r1, r3, #10
 8002d32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d36:	0290      	lsls	r0, r2, #10
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f7fd fa9a 	bl	8000280 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4613      	mov	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	60bb      	str	r3, [r7, #8]
      break;
 8002d6e:	e002      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x164>)
 8002d72:	60bb      	str	r3, [r7, #8]
      break;
 8002d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d76:	68bb      	ldr	r3, [r7, #8]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	00f42400 	.word	0x00f42400
 8002d88:	017d7840 	.word	0x017d7840

08002d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000000 	.word	0x20000000

08002da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002da8:	f7ff fff0 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	0b5b      	lsrs	r3, r3, #13
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4903      	ldr	r1, [pc, #12]	; (8002dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	0800d76c 	.word	0x0800d76c

08002dcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	220f      	movs	r2, #15
 8002dda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCC_GetClockConfig+0x5c>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 0203 	and.w	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <HAL_RCC_GetClockConfig+0x5c>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <HAL_RCC_GetClockConfig+0x5c>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCC_GetClockConfig+0x5c>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	08db      	lsrs	r3, r3, #3
 8002e06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <HAL_RCC_GetClockConfig+0x60>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0207 	and.w	r2, r3, #7
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	601a      	str	r2, [r3, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40023c00 	.word	0x40023c00

08002e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e041      	b.n	8002ec6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f839 	bl	8002ece <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4610      	mov	r0, r2
 8002e70:	f000 f9ca 	bl	8003208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d001      	beq.n	8002efc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e044      	b.n	8002f86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1e      	ldr	r2, [pc, #120]	; (8002f94 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d018      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0x6c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f26:	d013      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0x6c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1a      	ldr	r2, [pc, #104]	; (8002f98 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00e      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0x6c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a19      	ldr	r2, [pc, #100]	; (8002f9c <HAL_TIM_Base_Start_IT+0xb8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d009      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0x6c>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a17      	ldr	r2, [pc, #92]	; (8002fa0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d004      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0x6c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a16      	ldr	r2, [pc, #88]	; (8002fa4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d111      	bne.n	8002f74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b06      	cmp	r3, #6
 8002f60:	d010      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0201 	orr.w	r2, r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f72:	e007      	b.n	8002f84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40010000 	.word	0x40010000
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40000800 	.word	0x40000800
 8002fa0:	40000c00 	.word	0x40000c00
 8002fa4:	40014000 	.word	0x40014000

08002fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d122      	bne.n	8003004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d11b      	bne.n	8003004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0202 	mvn.w	r2, #2
 8002fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f8ee 	bl	80031cc <HAL_TIM_IC_CaptureCallback>
 8002ff0:	e005      	b.n	8002ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f8e0 	bl	80031b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f8f1 	bl	80031e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d122      	bne.n	8003058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b04      	cmp	r3, #4
 800301e:	d11b      	bne.n	8003058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0204 	mvn.w	r2, #4
 8003028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2202      	movs	r2, #2
 800302e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f8c4 	bl	80031cc <HAL_TIM_IC_CaptureCallback>
 8003044:	e005      	b.n	8003052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f8b6 	bl	80031b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f8c7 	bl	80031e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b08      	cmp	r3, #8
 8003064:	d122      	bne.n	80030ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b08      	cmp	r3, #8
 8003072:	d11b      	bne.n	80030ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0208 	mvn.w	r2, #8
 800307c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2204      	movs	r2, #4
 8003082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f89a 	bl	80031cc <HAL_TIM_IC_CaptureCallback>
 8003098:	e005      	b.n	80030a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f88c 	bl	80031b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f89d 	bl	80031e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b10      	cmp	r3, #16
 80030b8:	d122      	bne.n	8003100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d11b      	bne.n	8003100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0210 	mvn.w	r2, #16
 80030d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2208      	movs	r2, #8
 80030d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f870 	bl	80031cc <HAL_TIM_IC_CaptureCallback>
 80030ec:	e005      	b.n	80030fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f862 	bl	80031b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f873 	bl	80031e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b01      	cmp	r3, #1
 800310c:	d10e      	bne.n	800312c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d107      	bne.n	800312c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0201 	mvn.w	r2, #1
 8003124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fb60 	bl	80007ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b80      	cmp	r3, #128	; 0x80
 8003138:	d10e      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	2b80      	cmp	r3, #128	; 0x80
 8003146:	d107      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f8e2 	bl	800331c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	d10e      	bne.n	8003184 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003170:	2b40      	cmp	r3, #64	; 0x40
 8003172:	d107      	bne.n	8003184 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800317c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f838 	bl	80031f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b20      	cmp	r3, #32
 8003190:	d10e      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b20      	cmp	r3, #32
 800319e:	d107      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0220 	mvn.w	r2, #32
 80031a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8ac 	bl	8003308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a34      	ldr	r2, [pc, #208]	; (80032ec <TIM_Base_SetConfig+0xe4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00f      	beq.n	8003240 <TIM_Base_SetConfig+0x38>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003226:	d00b      	beq.n	8003240 <TIM_Base_SetConfig+0x38>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a31      	ldr	r2, [pc, #196]	; (80032f0 <TIM_Base_SetConfig+0xe8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d007      	beq.n	8003240 <TIM_Base_SetConfig+0x38>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a30      	ldr	r2, [pc, #192]	; (80032f4 <TIM_Base_SetConfig+0xec>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d003      	beq.n	8003240 <TIM_Base_SetConfig+0x38>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a2f      	ldr	r2, [pc, #188]	; (80032f8 <TIM_Base_SetConfig+0xf0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d108      	bne.n	8003252 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a25      	ldr	r2, [pc, #148]	; (80032ec <TIM_Base_SetConfig+0xe4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01b      	beq.n	8003292 <TIM_Base_SetConfig+0x8a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003260:	d017      	beq.n	8003292 <TIM_Base_SetConfig+0x8a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a22      	ldr	r2, [pc, #136]	; (80032f0 <TIM_Base_SetConfig+0xe8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <TIM_Base_SetConfig+0x8a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a21      	ldr	r2, [pc, #132]	; (80032f4 <TIM_Base_SetConfig+0xec>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00f      	beq.n	8003292 <TIM_Base_SetConfig+0x8a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a20      	ldr	r2, [pc, #128]	; (80032f8 <TIM_Base_SetConfig+0xf0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00b      	beq.n	8003292 <TIM_Base_SetConfig+0x8a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a1f      	ldr	r2, [pc, #124]	; (80032fc <TIM_Base_SetConfig+0xf4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d007      	beq.n	8003292 <TIM_Base_SetConfig+0x8a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a1e      	ldr	r2, [pc, #120]	; (8003300 <TIM_Base_SetConfig+0xf8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d003      	beq.n	8003292 <TIM_Base_SetConfig+0x8a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <TIM_Base_SetConfig+0xfc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d108      	bne.n	80032a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a08      	ldr	r2, [pc, #32]	; (80032ec <TIM_Base_SetConfig+0xe4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d103      	bne.n	80032d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	615a      	str	r2, [r3, #20]
}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40010000 	.word	0x40010000
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800
 80032f8:	40000c00 	.word	0x40000c00
 80032fc:	40014000 	.word	0x40014000
 8003300:	40014400 	.word	0x40014400
 8003304:	40014800 	.word	0x40014800

08003308 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003330:	b084      	sub	sp, #16
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	f107 001c 	add.w	r0, r7, #28
 800333e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	2b01      	cmp	r3, #1
 8003346:	d122      	bne.n	800338e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800335c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003372:	2b01      	cmp	r3, #1
 8003374:	d105      	bne.n	8003382 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f001 fb1c 	bl	80049c0 <USB_CoreReset>
 8003388:	4603      	mov	r3, r0
 800338a:	73fb      	strb	r3, [r7, #15]
 800338c:	e01a      	b.n	80033c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f001 fb10 	bl	80049c0 <USB_CoreReset>
 80033a0:	4603      	mov	r3, r0
 80033a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80033a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38
 80033b6:	e005      	b.n	80033c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d10b      	bne.n	80033e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f043 0206 	orr.w	r2, r3, #6
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033ee:	b004      	add	sp, #16
 80033f0:	4770      	bx	lr
	...

080033f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d165      	bne.n	80034d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4a41      	ldr	r2, [pc, #260]	; (8003510 <USB_SetTurnaroundTime+0x11c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d906      	bls.n	800341e <USB_SetTurnaroundTime+0x2a>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4a40      	ldr	r2, [pc, #256]	; (8003514 <USB_SetTurnaroundTime+0x120>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d202      	bcs.n	800341e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003418:	230f      	movs	r3, #15
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	e062      	b.n	80034e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4a3c      	ldr	r2, [pc, #240]	; (8003514 <USB_SetTurnaroundTime+0x120>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d306      	bcc.n	8003434 <USB_SetTurnaroundTime+0x40>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4a3b      	ldr	r2, [pc, #236]	; (8003518 <USB_SetTurnaroundTime+0x124>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d202      	bcs.n	8003434 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800342e:	230e      	movs	r3, #14
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	e057      	b.n	80034e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4a38      	ldr	r2, [pc, #224]	; (8003518 <USB_SetTurnaroundTime+0x124>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d306      	bcc.n	800344a <USB_SetTurnaroundTime+0x56>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4a37      	ldr	r2, [pc, #220]	; (800351c <USB_SetTurnaroundTime+0x128>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d202      	bcs.n	800344a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003444:	230d      	movs	r3, #13
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	e04c      	b.n	80034e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4a33      	ldr	r2, [pc, #204]	; (800351c <USB_SetTurnaroundTime+0x128>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d306      	bcc.n	8003460 <USB_SetTurnaroundTime+0x6c>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	4a32      	ldr	r2, [pc, #200]	; (8003520 <USB_SetTurnaroundTime+0x12c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d802      	bhi.n	8003460 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800345a:	230c      	movs	r3, #12
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	e041      	b.n	80034e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4a2f      	ldr	r2, [pc, #188]	; (8003520 <USB_SetTurnaroundTime+0x12c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d906      	bls.n	8003476 <USB_SetTurnaroundTime+0x82>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4a2e      	ldr	r2, [pc, #184]	; (8003524 <USB_SetTurnaroundTime+0x130>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d802      	bhi.n	8003476 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003470:	230b      	movs	r3, #11
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	e036      	b.n	80034e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4a2a      	ldr	r2, [pc, #168]	; (8003524 <USB_SetTurnaroundTime+0x130>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d906      	bls.n	800348c <USB_SetTurnaroundTime+0x98>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4a29      	ldr	r2, [pc, #164]	; (8003528 <USB_SetTurnaroundTime+0x134>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d802      	bhi.n	800348c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003486:	230a      	movs	r3, #10
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e02b      	b.n	80034e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4a26      	ldr	r2, [pc, #152]	; (8003528 <USB_SetTurnaroundTime+0x134>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d906      	bls.n	80034a2 <USB_SetTurnaroundTime+0xae>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4a25      	ldr	r2, [pc, #148]	; (800352c <USB_SetTurnaroundTime+0x138>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d202      	bcs.n	80034a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800349c:	2309      	movs	r3, #9
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e020      	b.n	80034e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4a21      	ldr	r2, [pc, #132]	; (800352c <USB_SetTurnaroundTime+0x138>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d306      	bcc.n	80034b8 <USB_SetTurnaroundTime+0xc4>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4a20      	ldr	r2, [pc, #128]	; (8003530 <USB_SetTurnaroundTime+0x13c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d802      	bhi.n	80034b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80034b2:	2308      	movs	r3, #8
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	e015      	b.n	80034e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <USB_SetTurnaroundTime+0x13c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d906      	bls.n	80034ce <USB_SetTurnaroundTime+0xda>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4a1c      	ldr	r2, [pc, #112]	; (8003534 <USB_SetTurnaroundTime+0x140>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d202      	bcs.n	80034ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80034c8:	2307      	movs	r3, #7
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	e00a      	b.n	80034e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80034ce:	2306      	movs	r3, #6
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e007      	b.n	80034e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80034da:	2309      	movs	r3, #9
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	e001      	b.n	80034e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80034e0:	2309      	movs	r3, #9
 80034e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	029b      	lsls	r3, r3, #10
 80034f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	371c      	adds	r7, #28
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	00d8acbf 	.word	0x00d8acbf
 8003514:	00e4e1c0 	.word	0x00e4e1c0
 8003518:	00f42400 	.word	0x00f42400
 800351c:	01067380 	.word	0x01067380
 8003520:	011a499f 	.word	0x011a499f
 8003524:	01312cff 	.word	0x01312cff
 8003528:	014ca43f 	.word	0x014ca43f
 800352c:	016e3600 	.word	0x016e3600
 8003530:	01a6ab1f 	.word	0x01a6ab1f
 8003534:	01e84800 	.word	0x01e84800

08003538 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f043 0201 	orr.w	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f023 0201 	bic.w	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d115      	bne.n	80035ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035aa:	2001      	movs	r0, #1
 80035ac:	f7fd fb6c 	bl	8000c88 <HAL_Delay>
      ms++;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3301      	adds	r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f001 f972 	bl	80048a0 <USB_GetMode>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d01e      	beq.n	8003600 <USB_SetCurrentMode+0x84>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b31      	cmp	r3, #49	; 0x31
 80035c6:	d9f0      	bls.n	80035aa <USB_SetCurrentMode+0x2e>
 80035c8:	e01a      	b.n	8003600 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d115      	bne.n	80035fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035dc:	2001      	movs	r0, #1
 80035de:	f7fd fb53 	bl	8000c88 <HAL_Delay>
      ms++;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3301      	adds	r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f001 f959 	bl	80048a0 <USB_GetMode>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <USB_SetCurrentMode+0x84>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b31      	cmp	r3, #49	; 0x31
 80035f8:	d9f0      	bls.n	80035dc <USB_SetCurrentMode+0x60>
 80035fa:	e001      	b.n	8003600 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e005      	b.n	800360c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b32      	cmp	r3, #50	; 0x32
 8003604:	d101      	bne.n	800360a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003614:	b084      	sub	sp, #16
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	e009      	b.n	8003648 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	3340      	adds	r3, #64	; 0x40
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	2200      	movs	r2, #0
 8003640:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	3301      	adds	r3, #1
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b0e      	cmp	r3, #14
 800364c:	d9f2      	bls.n	8003634 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800364e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003650:	2b00      	cmp	r3, #0
 8003652:	d11c      	bne.n	800368e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003662:	f043 0302 	orr.w	r3, r3, #2
 8003666:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
 800368c:	e00b      	b.n	80036a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036ac:	461a      	mov	r2, r3
 80036ae:	2300      	movs	r3, #0
 80036b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b8:	4619      	mov	r1, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c0:	461a      	mov	r2, r3
 80036c2:	680b      	ldr	r3, [r1, #0]
 80036c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d10c      	bne.n	80036e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80036cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d104      	bne.n	80036dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036d2:	2100      	movs	r1, #0
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f945 	bl	8003964 <USB_SetDevSpeed>
 80036da:	e008      	b.n	80036ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80036dc:	2101      	movs	r1, #1
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f940 	bl	8003964 <USB_SetDevSpeed>
 80036e4:	e003      	b.n	80036ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80036e6:	2103      	movs	r1, #3
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f93b 	bl	8003964 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80036ee:	2110      	movs	r1, #16
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8f3 	bl	80038dc <USB_FlushTxFifo>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f90f 	bl	8003924 <USB_FlushRxFifo>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003716:	461a      	mov	r2, r3
 8003718:	2300      	movs	r3, #0
 800371a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003722:	461a      	mov	r2, r3
 8003724:	2300      	movs	r3, #0
 8003726:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372e:	461a      	mov	r2, r3
 8003730:	2300      	movs	r3, #0
 8003732:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003734:	2300      	movs	r3, #0
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	e043      	b.n	80037c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4413      	add	r3, r2
 8003742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800374c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003750:	d118      	bne.n	8003784 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003764:	461a      	mov	r2, r3
 8003766:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	e013      	b.n	8003796 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377a:	461a      	mov	r2, r3
 800377c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e008      	b.n	8003796 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003790:	461a      	mov	r2, r3
 8003792:	2300      	movs	r3, #0
 8003794:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a2:	461a      	mov	r2, r3
 80037a4:	2300      	movs	r3, #0
 80037a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b4:	461a      	mov	r2, r3
 80037b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	3301      	adds	r3, #1
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d3b7      	bcc.n	800373a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	e043      	b.n	8003858 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037e6:	d118      	bne.n	800381a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10a      	bne.n	8003804 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fa:	461a      	mov	r2, r3
 80037fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e013      	b.n	800382c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4413      	add	r3, r2
 800380c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003810:	461a      	mov	r2, r3
 8003812:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	e008      	b.n	800382c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003826:	461a      	mov	r2, r3
 8003828:	2300      	movs	r3, #0
 800382a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003838:	461a      	mov	r2, r3
 800383a:	2300      	movs	r3, #0
 800383c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384a:	461a      	mov	r2, r3
 800384c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003850:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	3301      	adds	r3, #1
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	429a      	cmp	r2, r3
 800385e:	d3b7      	bcc.n	80037d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800386e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003872:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003880:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f043 0210 	orr.w	r2, r3, #16
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <USB_DevInit+0x2c4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f043 0208 	orr.w	r2, r3, #8
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d107      	bne.n	80038c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038c0:	f043 0304 	orr.w	r3, r3, #4
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80038c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038d4:	b004      	add	sp, #16
 80038d6:	4770      	bx	lr
 80038d8:	803c3800 	.word	0x803c3800

080038dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	019b      	lsls	r3, r3, #6
 80038ee:	f043 0220 	orr.w	r2, r3, #32
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	3301      	adds	r3, #1
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	4a08      	ldr	r2, [pc, #32]	; (8003920 <USB_FlushTxFifo+0x44>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e006      	b.n	8003914 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b20      	cmp	r3, #32
 8003910:	d0f1      	beq.n	80038f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	00030d40 	.word	0x00030d40

08003924 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2210      	movs	r2, #16
 8003934:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3301      	adds	r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	4a08      	ldr	r2, [pc, #32]	; (8003960 <USB_FlushRxFifo+0x3c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e006      	b.n	8003954 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b10      	cmp	r3, #16
 8003950:	d0f1      	beq.n	8003936 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	00030d40 	.word	0x00030d40

08003964 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	68f9      	ldr	r1, [r7, #12]
 8003980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003984:	4313      	orrs	r3, r2
 8003986:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003996:	b480      	push	{r7}
 8003998:	b087      	sub	sp, #28
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0306 	and.w	r3, r3, #6
 80039ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d102      	bne.n	80039bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80039b6:	2300      	movs	r3, #0
 80039b8:	75fb      	strb	r3, [r7, #23]
 80039ba:	e00a      	b.n	80039d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d002      	beq.n	80039c8 <USB_GetDevSpeed+0x32>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b06      	cmp	r3, #6
 80039c6:	d102      	bne.n	80039ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80039c8:	2302      	movs	r3, #2
 80039ca:	75fb      	strb	r3, [r7, #23]
 80039cc:	e001      	b.n	80039d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80039ce:	230f      	movs	r3, #15
 80039d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	371c      	adds	r7, #28
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	785b      	ldrb	r3, [r3, #1]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d13a      	bne.n	8003a72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a02:	69da      	ldr	r2, [r3, #28]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	68f9      	ldr	r1, [r7, #12]
 8003a16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d155      	bne.n	8003ae0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	78db      	ldrb	r3, [r3, #3]
 8003a4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	059b      	lsls	r3, r3, #22
 8003a56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	0151      	lsls	r1, r2, #5
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	440a      	add	r2, r1
 8003a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	e036      	b.n	8003ae0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a78:	69da      	ldr	r2, [r3, #28]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	2101      	movs	r1, #1
 8003a84:	fa01 f303 	lsl.w	r3, r1, r3
 8003a88:	041b      	lsls	r3, r3, #16
 8003a8a:	68f9      	ldr	r1, [r7, #12]
 8003a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d11a      	bne.n	8003ae0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	78db      	ldrb	r3, [r3, #3]
 8003ac4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	0151      	lsls	r1, r2, #5
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	440a      	add	r2, r1
 8003ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ade:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	785b      	ldrb	r3, [r3, #1]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d161      	bne.n	8003bd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b22:	d11f      	bne.n	8003b64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	0151      	lsls	r1, r2, #5
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	440a      	add	r2, r1
 8003b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	0151      	lsls	r1, r2, #5
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	440a      	add	r2, r1
 8003b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	2101      	movs	r1, #1
 8003b76:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	68f9      	ldr	r1, [r7, #12]
 8003b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b84:	4013      	ands	r3, r2
 8003b86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	2101      	movs	r1, #1
 8003b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	68f9      	ldr	r1, [r7, #12]
 8003ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	0159      	lsls	r1, r3, #5
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	440b      	add	r3, r1
 8003bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4b35      	ldr	r3, [pc, #212]	; (8003ca0 <USB_DeactivateEndpoint+0x1b0>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	600b      	str	r3, [r1, #0]
 8003bce:	e060      	b.n	8003c92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003be6:	d11f      	bne.n	8003c28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	0151      	lsls	r1, r2, #5
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	440a      	add	r2, r1
 8003bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	0151      	lsls	r1, r2, #5
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	440a      	add	r2, r1
 8003c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	2101      	movs	r1, #1
 8003c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	43db      	mvns	r3, r3
 8003c42:	68f9      	ldr	r1, [r7, #12]
 8003c44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c48:	4013      	ands	r3, r2
 8003c4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c52:	69da      	ldr	r2, [r3, #28]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	041b      	lsls	r3, r3, #16
 8003c64:	43db      	mvns	r3, r3
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	0159      	lsls	r1, r3, #5
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	440b      	add	r3, r1
 8003c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <USB_DeactivateEndpoint+0x1b4>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	ec337800 	.word	0xec337800
 8003ca4:	eff37800 	.word	0xeff37800

08003ca8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08a      	sub	sp, #40	; 0x28
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	785b      	ldrb	r3, [r3, #1]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	f040 815c 	bne.w	8003f82 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d132      	bne.n	8003d38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	0151      	lsls	r1, r2, #5
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	440a      	add	r2, r1
 8003ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cf0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	0151      	lsls	r1, r2, #5
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	440a      	add	r2, r1
 8003d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	0151      	lsls	r1, r2, #5
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	440a      	add	r2, r1
 8003d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d30:	0cdb      	lsrs	r3, r3, #19
 8003d32:	04db      	lsls	r3, r3, #19
 8003d34:	6113      	str	r3, [r2, #16]
 8003d36:	e074      	b.n	8003e22 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	0151      	lsls	r1, r2, #5
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	440a      	add	r2, r1
 8003d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d52:	0cdb      	lsrs	r3, r3, #19
 8003d54:	04db      	lsls	r3, r3, #19
 8003d56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	0151      	lsls	r1, r2, #5
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	440a      	add	r2, r1
 8003d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d88:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	6959      	ldr	r1, [r3, #20]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	440b      	add	r3, r1
 8003d94:	1e59      	subs	r1, r3, #1
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d9e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003da0:	4b9d      	ldr	r3, [pc, #628]	; (8004018 <USB_EPStartXfer+0x370>)
 8003da2:	400b      	ands	r3, r1
 8003da4:	69b9      	ldr	r1, [r7, #24]
 8003da6:	0148      	lsls	r0, r1, #5
 8003da8:	69f9      	ldr	r1, [r7, #28]
 8003daa:	4401      	add	r1, r0
 8003dac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003db0:	4313      	orrs	r3, r2
 8003db2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dca:	69b9      	ldr	r1, [r7, #24]
 8003dcc:	0148      	lsls	r0, r1, #5
 8003dce:	69f9      	ldr	r1, [r7, #28]
 8003dd0:	4401      	add	r1, r0
 8003dd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	78db      	ldrb	r3, [r3, #3]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d11f      	bne.n	8003e22 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	0151      	lsls	r1, r2, #5
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	440a      	add	r2, r1
 8003df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dfc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	0151      	lsls	r1, r2, #5
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	440a      	add	r2, r1
 8003e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e20:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d14b      	bne.n	8003ec0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d009      	beq.n	8003e44 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	78db      	ldrb	r3, [r3, #3]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d128      	bne.n	8003e9e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d110      	bne.n	8003e7e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	0151      	lsls	r1, r2, #5
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	440a      	add	r2, r1
 8003e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	e00f      	b.n	8003e9e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	0151      	lsls	r1, r2, #5
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	440a      	add	r2, r1
 8003e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	0151      	lsls	r1, r2, #5
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	440a      	add	r2, r1
 8003eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e12f      	b.n	8004120 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	0151      	lsls	r1, r2, #5
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	440a      	add	r2, r1
 8003ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ede:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	78db      	ldrb	r3, [r3, #3]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d015      	beq.n	8003f14 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8117 	beq.w	8004120 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	2101      	movs	r1, #1
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	69f9      	ldr	r1, [r7, #28]
 8003f0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	634b      	str	r3, [r1, #52]	; 0x34
 8003f12:	e105      	b.n	8004120 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d110      	bne.n	8003f46 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	0151      	lsls	r1, r2, #5
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	440a      	add	r2, r1
 8003f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	e00f      	b.n	8003f66 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	0151      	lsls	r1, r2, #5
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	440a      	add	r2, r1
 8003f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f64:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	68d9      	ldr	r1, [r3, #12]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	781a      	ldrb	r2, [r3, #0]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	b298      	uxth	r0, r3
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	4603      	mov	r3, r0
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fa2b 	bl	80043d6 <USB_WritePacket>
 8003f80:	e0ce      	b.n	8004120 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	0151      	lsls	r1, r2, #5
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	440a      	add	r2, r1
 8003f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f9c:	0cdb      	lsrs	r3, r3, #19
 8003f9e:	04db      	lsls	r3, r3, #19
 8003fa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	0151      	lsls	r1, r2, #5
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	440a      	add	r2, r1
 8003fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fc4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d126      	bne.n	800401c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe4:	69b9      	ldr	r1, [r7, #24]
 8003fe6:	0148      	lsls	r0, r1, #5
 8003fe8:	69f9      	ldr	r1, [r7, #28]
 8003fea:	4401      	add	r1, r0
 8003fec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	0151      	lsls	r1, r2, #5
 8004006:	69fa      	ldr	r2, [r7, #28]
 8004008:	440a      	add	r2, r1
 800400a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800400e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004012:	6113      	str	r3, [r2, #16]
 8004014:	e036      	b.n	8004084 <USB_EPStartXfer+0x3dc>
 8004016:	bf00      	nop
 8004018:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4413      	add	r3, r2
 8004026:	1e5a      	subs	r2, r3, #1
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004030:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	8afb      	ldrh	r3, [r7, #22]
 8004042:	04d9      	lsls	r1, r3, #19
 8004044:	4b39      	ldr	r3, [pc, #228]	; (800412c <USB_EPStartXfer+0x484>)
 8004046:	400b      	ands	r3, r1
 8004048:	69b9      	ldr	r1, [r7, #24]
 800404a:	0148      	lsls	r0, r1, #5
 800404c:	69f9      	ldr	r1, [r7, #28]
 800404e:	4401      	add	r1, r0
 8004050:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004054:	4313      	orrs	r3, r2
 8004056:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	8af9      	ldrh	r1, [r7, #22]
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004074:	69b9      	ldr	r1, [r7, #24]
 8004076:	0148      	lsls	r0, r1, #5
 8004078:	69f9      	ldr	r1, [r7, #28]
 800407a:	4401      	add	r1, r0
 800407c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004080:	4313      	orrs	r3, r2
 8004082:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d10d      	bne.n	80040a6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d009      	beq.n	80040a6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	68d9      	ldr	r1, [r3, #12]
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a2:	460a      	mov	r2, r1
 80040a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	78db      	ldrb	r3, [r3, #3]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d128      	bne.n	8004100 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d110      	bne.n	80040e0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	0151      	lsls	r1, r2, #5
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	440a      	add	r2, r1
 80040d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e00f      	b.n	8004100 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	0151      	lsls	r1, r2, #5
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	440a      	add	r2, r1
 80040f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	0151      	lsls	r1, r2, #5
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	440a      	add	r2, r1
 8004116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800411a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800411e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3720      	adds	r7, #32
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	1ff80000 	.word	0x1ff80000

08004130 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	4613      	mov	r3, r2
 800413c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	785b      	ldrb	r3, [r3, #1]
 800414c:	2b01      	cmp	r3, #1
 800414e:	f040 80cd 	bne.w	80042ec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d132      	bne.n	80041c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	0151      	lsls	r1, r2, #5
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	440a      	add	r2, r1
 8004170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004174:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004178:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800417c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	0151      	lsls	r1, r2, #5
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	440a      	add	r2, r1
 8004194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004198:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800419c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	0151      	lsls	r1, r2, #5
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	440a      	add	r2, r1
 80041b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b8:	0cdb      	lsrs	r3, r3, #19
 80041ba:	04db      	lsls	r3, r3, #19
 80041bc:	6113      	str	r3, [r2, #16]
 80041be:	e04e      	b.n	800425e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	0151      	lsls	r1, r2, #5
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	440a      	add	r2, r1
 80041d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041da:	0cdb      	lsrs	r3, r3, #19
 80041dc:	04db      	lsls	r3, r3, #19
 80041de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	0151      	lsls	r1, r2, #5
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	440a      	add	r2, r1
 80041f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004202:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	429a      	cmp	r2, r3
 800420e:	d903      	bls.n	8004218 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	0151      	lsls	r1, r2, #5
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	440a      	add	r2, r1
 800422e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004232:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800424e:	6939      	ldr	r1, [r7, #16]
 8004250:	0148      	lsls	r0, r1, #5
 8004252:	6979      	ldr	r1, [r7, #20]
 8004254:	4401      	add	r1, r0
 8004256:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800425a:	4313      	orrs	r3, r2
 800425c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d11e      	bne.n	80042a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004278:	461a      	mov	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	0151      	lsls	r1, r2, #5
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	440a      	add	r2, r1
 8004296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800429a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	e092      	b.n	80043c8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	0151      	lsls	r1, r2, #5
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	440a      	add	r2, r1
 80042b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d07e      	beq.n	80043c8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	2101      	movs	r1, #1
 80042dc:	fa01 f303 	lsl.w	r3, r1, r3
 80042e0:	6979      	ldr	r1, [r7, #20]
 80042e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042e6:	4313      	orrs	r3, r2
 80042e8:	634b      	str	r3, [r1, #52]	; 0x34
 80042ea:	e06d      	b.n	80043c8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	0151      	lsls	r1, r2, #5
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	440a      	add	r2, r1
 8004302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004306:	0cdb      	lsrs	r3, r3, #19
 8004308:	04db      	lsls	r3, r3, #19
 800430a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	0151      	lsls	r1, r2, #5
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	440a      	add	r2, r1
 8004322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004326:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800432a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800432e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	0151      	lsls	r1, r2, #5
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	440a      	add	r2, r1
 8004356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800435a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800435e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004376:	6939      	ldr	r1, [r7, #16]
 8004378:	0148      	lsls	r0, r1, #5
 800437a:	6979      	ldr	r1, [r7, #20]
 800437c:	4401      	add	r1, r0
 800437e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004382:	4313      	orrs	r3, r2
 8004384:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d10d      	bne.n	80043a8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d009      	beq.n	80043a8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	68d9      	ldr	r1, [r3, #12]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a4:	460a      	mov	r2, r1
 80043a6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	0151      	lsls	r1, r2, #5
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	440a      	add	r2, r1
 80043be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b089      	sub	sp, #36	; 0x24
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	4611      	mov	r1, r2
 80043e2:	461a      	mov	r2, r3
 80043e4:	460b      	mov	r3, r1
 80043e6:	71fb      	strb	r3, [r7, #7]
 80043e8:	4613      	mov	r3, r2
 80043ea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80043f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d123      	bne.n	8004444 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80043fc:	88bb      	ldrh	r3, [r7, #4]
 80043fe:	3303      	adds	r3, #3
 8004400:	089b      	lsrs	r3, r3, #2
 8004402:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004404:	2300      	movs	r3, #0
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	e018      	b.n	800443c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	031a      	lsls	r2, r3, #12
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	4413      	add	r3, r2
 8004412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004416:	461a      	mov	r2, r3
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3301      	adds	r3, #1
 8004422:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	3301      	adds	r3, #1
 8004428:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	3301      	adds	r3, #1
 800442e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	3301      	adds	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	3301      	adds	r3, #1
 800443a:	61bb      	str	r3, [r7, #24]
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	429a      	cmp	r2, r3
 8004442:	d3e2      	bcc.n	800440a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3724      	adds	r7, #36	; 0x24
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004452:	b480      	push	{r7}
 8004454:	b08b      	sub	sp, #44	; 0x2c
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	4613      	mov	r3, r2
 800445e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004468:	88fb      	ldrh	r3, [r7, #6]
 800446a:	089b      	lsrs	r3, r3, #2
 800446c:	b29b      	uxth	r3, r3
 800446e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004470:	88fb      	ldrh	r3, [r7, #6]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004478:	2300      	movs	r3, #0
 800447a:	623b      	str	r3, [r7, #32]
 800447c:	e014      	b.n	80044a8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	601a      	str	r2, [r3, #0]
    pDest++;
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	3301      	adds	r3, #1
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	3301      	adds	r3, #1
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	3301      	adds	r3, #1
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	3301      	adds	r3, #1
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	3301      	adds	r3, #1
 80044a6:	623b      	str	r3, [r7, #32]
 80044a8:	6a3a      	ldr	r2, [r7, #32]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d3e6      	bcc.n	800447e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80044b0:	8bfb      	ldrh	r3, [r7, #30]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01e      	beq.n	80044f4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c0:	461a      	mov	r2, r3
 80044c2:	f107 0310 	add.w	r3, r7, #16
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	fa22 f303 	lsr.w	r3, r2, r3
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	701a      	strb	r2, [r3, #0]
      i++;
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	3301      	adds	r3, #1
 80044e0:	623b      	str	r3, [r7, #32]
      pDest++;
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	3301      	adds	r3, #1
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80044e8:	8bfb      	ldrh	r3, [r7, #30]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80044ee:	8bfb      	ldrh	r3, [r7, #30]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1ea      	bne.n	80044ca <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	372c      	adds	r7, #44	; 0x2c
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004502:	b480      	push	{r7}
 8004504:	b085      	sub	sp, #20
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	785b      	ldrb	r3, [r3, #1]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d12c      	bne.n	8004578 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	db12      	blt.n	8004556 <USB_EPSetStall+0x54>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00f      	beq.n	8004556 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	0151      	lsls	r1, r2, #5
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	440a      	add	r2, r1
 800454c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004550:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004554:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	0151      	lsls	r1, r2, #5
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	440a      	add	r2, r1
 800456c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	e02b      	b.n	80045d0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	db12      	blt.n	80045b0 <USB_EPSetStall+0xae>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00f      	beq.n	80045b0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	0151      	lsls	r1, r2, #5
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	440a      	add	r2, r1
 80045a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045ae:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	0151      	lsls	r1, r2, #5
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	440a      	add	r2, r1
 80045c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	785b      	ldrb	r3, [r3, #1]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d128      	bne.n	800464c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	0151      	lsls	r1, r2, #5
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	440a      	add	r2, r1
 8004610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004614:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004618:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	78db      	ldrb	r3, [r3, #3]
 800461e:	2b03      	cmp	r3, #3
 8004620:	d003      	beq.n	800462a <USB_EPClearStall+0x4c>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	78db      	ldrb	r3, [r3, #3]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d138      	bne.n	800469c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	0151      	lsls	r1, r2, #5
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	440a      	add	r2, r1
 8004640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	e027      	b.n	800469c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	0151      	lsls	r1, r2, #5
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	440a      	add	r2, r1
 8004662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004666:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800466a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	78db      	ldrb	r3, [r3, #3]
 8004670:	2b03      	cmp	r3, #3
 8004672:	d003      	beq.n	800467c <USB_EPClearStall+0x9e>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	78db      	ldrb	r3, [r3, #3]
 8004678:	2b02      	cmp	r3, #2
 800467a:	d10f      	bne.n	800469c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	440a      	add	r2, r1
 8004692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b085      	sub	sp, #20
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	460b      	mov	r3, r1
 80046b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80046cc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	78fb      	ldrb	r3, [r7, #3]
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80046de:	68f9      	ldr	r1, [r7, #12]
 80046e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046e4:	4313      	orrs	r3, r2
 80046e6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b085      	sub	sp, #20
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004710:	f023 0303 	bic.w	r3, r3, #3
 8004714:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004724:	f023 0302 	bic.w	r3, r3, #2
 8004728:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004752:	f023 0303 	bic.w	r3, r3, #3
 8004756:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004766:	f043 0302 	orr.w	r3, r3, #2
 800476a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4013      	ands	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004792:	68fb      	ldr	r3, [r7, #12]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	4013      	ands	r3, r2
 80047c2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	0c1b      	lsrs	r3, r3, #16
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	4013      	ands	r3, r2
 80047f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	b29b      	uxth	r3, r3
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	4013      	ands	r3, r2
 8004834:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004836:	68bb      	ldr	r3, [r7, #8]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004866:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
 8004874:	01db      	lsls	r3, r3, #7
 8004876:	b2db      	uxtb	r3, r3
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4013      	ands	r3, r2
 8004890:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004892:	68bb      	ldr	r3, [r7, #8]
}
 8004894:	4618      	mov	r0, r3
 8004896:	371c      	adds	r7, #28
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f003 0301 	and.w	r3, r3, #1
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80048da:	f023 0307 	bic.w	r3, r3, #7
 80048de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
	...

08004904 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	460b      	mov	r3, r1
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	333c      	adds	r3, #60	; 0x3c
 800491a:	3304      	adds	r3, #4
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4a26      	ldr	r2, [pc, #152]	; (80049bc <USB_EP0_OutStart+0xb8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d90a      	bls.n	800493e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004938:	d101      	bne.n	800493e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	e037      	b.n	80049ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004944:	461a      	mov	r2, r3
 8004946:	2300      	movs	r3, #0
 8004948:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004958:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800495c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800496c:	f043 0318 	orr.w	r3, r3, #24
 8004970:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004980:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004984:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004986:	7afb      	ldrb	r3, [r7, #11]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d10f      	bne.n	80049ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004992:	461a      	mov	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80049aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	4f54300a 	.word	0x4f54300a

080049c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3301      	adds	r3, #1
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	4a13      	ldr	r2, [pc, #76]	; (8004a20 <USB_CoreReset+0x60>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d901      	bls.n	80049dc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e01a      	b.n	8004a12 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	daf3      	bge.n	80049cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f043 0201 	orr.w	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3301      	adds	r3, #1
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <USB_CoreReset+0x60>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d901      	bls.n	8004a04 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e006      	b.n	8004a12 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d0f1      	beq.n	80049f4 <USB_CoreReset+0x34>

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	00030d40 	.word	0x00030d40

08004a24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8004a28:	f001 f9ec 	bl	8005e04 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	4917      	ldr	r1, [pc, #92]	; (8004a8c <MX_USB_DEVICE_Init+0x68>)
 8004a30:	4817      	ldr	r0, [pc, #92]	; (8004a90 <MX_USB_DEVICE_Init+0x6c>)
 8004a32:	f003 f990 	bl	8007d56 <USBD_Init>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8004a3c:	f7fb fee8 	bl	8000810 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8004a40:	4914      	ldr	r1, [pc, #80]	; (8004a94 <MX_USB_DEVICE_Init+0x70>)
 8004a42:	4813      	ldr	r0, [pc, #76]	; (8004a90 <MX_USB_DEVICE_Init+0x6c>)
 8004a44:	f003 f9b3 	bl	8007dae <USBD_RegisterClass>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8004a4e:	f7fb fedf 	bl	8000810 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8004a52:	4911      	ldr	r1, [pc, #68]	; (8004a98 <MX_USB_DEVICE_Init+0x74>)
 8004a54:	480e      	ldr	r0, [pc, #56]	; (8004a90 <MX_USB_DEVICE_Init+0x6c>)
 8004a56:	f000 feb5 	bl	80057c4 <USBD_CDC_ACM_RegisterInterface>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8004a60:	f7fb fed6 	bl	8000810 <Error_Handler>
  {
    Error_Handler();
  }
#endif
#if (USBD_USE_MSC == 1)
  if (USBD_MSC_RegisterStorage(&hUsbDevice, &USBD_Storage_Interface_fops) != USBD_OK)
 8004a64:	490d      	ldr	r1, [pc, #52]	; (8004a9c <MX_USB_DEVICE_Init+0x78>)
 8004a66:	480a      	ldr	r0, [pc, #40]	; (8004a90 <MX_USB_DEVICE_Init+0x6c>)
 8004a68:	f001 fce4 	bl	8006434 <USBD_MSC_RegisterStorage>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8004a72:	f7fb fecd 	bl	8000810 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8004a76:	4806      	ldr	r0, [pc, #24]	; (8004a90 <MX_USB_DEVICE_Init+0x6c>)
 8004a78:	f003 f9d7 	bl	8007e2a <USBD_Start>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 8004a82:	f7fb fec5 	bl	8000810 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000020 	.word	0x20000020
 8004a90:	20005420 	.word	0x20005420
 8004a94:	20000170 	.word	0x20000170
 8004a98:	2000000c 	.word	0x2000000c
 8004a9c:	20000070 	.word	0x20000070

08004aa0 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	01db      	lsls	r3, r3, #7
 8004aae:	4a06      	ldr	r2, [pc, #24]	; (8004ac8 <CDC_Init+0x28>)
 8004ab0:	441a      	add	r2, r3
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	4905      	ldr	r1, [pc, #20]	; (8004acc <CDC_Init+0x2c>)
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 febe 	bl	8005838 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 8004abc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	2000573c 	.word	0x2000573c
 8004acc:	20005420 	.word	0x20005420

08004ad0 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 8004ada:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	603a      	str	r2, [r7, #0]
 8004af0:	461a      	mov	r2, r3
 8004af2:	4603      	mov	r3, r0
 8004af4:	71fb      	strb	r3, [r7, #7]
 8004af6:	460b      	mov	r3, r1
 8004af8:	71bb      	strb	r3, [r7, #6]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8004afe:	79bb      	ldrb	r3, [r7, #6]
 8004b00:	2b23      	cmp	r3, #35	; 0x23
 8004b02:	f200 80b6 	bhi.w	8004c72 <CDC_Control+0x18a>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <CDC_Control+0x24>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004c73 	.word	0x08004c73
 8004b10:	08004c73 	.word	0x08004c73
 8004b14:	08004c73 	.word	0x08004c73
 8004b18:	08004c73 	.word	0x08004c73
 8004b1c:	08004c73 	.word	0x08004c73
 8004b20:	08004c73 	.word	0x08004c73
 8004b24:	08004c73 	.word	0x08004c73
 8004b28:	08004c73 	.word	0x08004c73
 8004b2c:	08004c73 	.word	0x08004c73
 8004b30:	08004c73 	.word	0x08004c73
 8004b34:	08004c73 	.word	0x08004c73
 8004b38:	08004c73 	.word	0x08004c73
 8004b3c:	08004c73 	.word	0x08004c73
 8004b40:	08004c73 	.word	0x08004c73
 8004b44:	08004c73 	.word	0x08004c73
 8004b48:	08004c73 	.word	0x08004c73
 8004b4c:	08004c73 	.word	0x08004c73
 8004b50:	08004c73 	.word	0x08004c73
 8004b54:	08004c73 	.word	0x08004c73
 8004b58:	08004c73 	.word	0x08004c73
 8004b5c:	08004c73 	.word	0x08004c73
 8004b60:	08004c73 	.word	0x08004c73
 8004b64:	08004c73 	.word	0x08004c73
 8004b68:	08004c73 	.word	0x08004c73
 8004b6c:	08004c73 	.word	0x08004c73
 8004b70:	08004c73 	.word	0x08004c73
 8004b74:	08004c73 	.word	0x08004c73
 8004b78:	08004c73 	.word	0x08004c73
 8004b7c:	08004c73 	.word	0x08004c73
 8004b80:	08004c73 	.word	0x08004c73
 8004b84:	08004c73 	.word	0x08004c73
 8004b88:	08004c73 	.word	0x08004c73
 8004b8c:	08004b9d 	.word	0x08004b9d
 8004b90:	08004bfd 	.word	0x08004bfd
 8004b94:	08004c73 	.word	0x08004c73
 8004b98:	08004c73 	.word	0x08004c73
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	3302      	adds	r3, #2
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004bb4:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	3303      	adds	r3, #3
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	061b      	lsls	r3, r3, #24
 8004bbe:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4a2f      	ldr	r2, [pc, #188]	; (8004c84 <CDC_Control+0x19c>)
 8004bc6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	7911      	ldrb	r1, [r2, #4]
 8004bd0:	4a2c      	ldr	r2, [pc, #176]	; (8004c84 <CDC_Control+0x19c>)
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	460a      	mov	r2, r1
 8004bd8:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	7951      	ldrb	r1, [r2, #5]
 8004be0:	4a28      	ldr	r2, [pc, #160]	; (8004c84 <CDC_Control+0x19c>)
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4413      	add	r3, r2
 8004be6:	460a      	mov	r2, r1
 8004be8:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	7991      	ldrb	r1, [r2, #6]
 8004bf0:	4a24      	ldr	r2, [pc, #144]	; (8004c84 <CDC_Control+0x19c>)
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	460a      	mov	r2, r1
 8004bf8:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 8004bfa:	e03b      	b.n	8004c74 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	4a21      	ldr	r2, [pc, #132]	; (8004c84 <CDC_Control+0x19c>)
 8004c00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8004c0a:	79fb      	ldrb	r3, [r7, #7]
 8004c0c:	4a1d      	ldr	r2, [pc, #116]	; (8004c84 <CDC_Control+0x19c>)
 8004c0e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c12:	0a1a      	lsrs	r2, r3, #8
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	3301      	adds	r3, #1
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
 8004c1e:	4a19      	ldr	r2, [pc, #100]	; (8004c84 <CDC_Control+0x19c>)
 8004c20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c24:	0c1a      	lsrs	r2, r3, #16
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	3302      	adds	r3, #2
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	4a14      	ldr	r2, [pc, #80]	; (8004c84 <CDC_Control+0x19c>)
 8004c32:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c36:	0e1a      	lsrs	r2, r3, #24
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	3303      	adds	r3, #3
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	3204      	adds	r2, #4
 8004c46:	490f      	ldr	r1, [pc, #60]	; (8004c84 <CDC_Control+0x19c>)
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	440b      	add	r3, r1
 8004c4c:	791b      	ldrb	r3, [r3, #4]
 8004c4e:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	3205      	adds	r2, #5
 8004c56:	490b      	ldr	r1, [pc, #44]	; (8004c84 <CDC_Control+0x19c>)
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	440b      	add	r3, r1
 8004c5c:	795b      	ldrb	r3, [r3, #5]
 8004c5e:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	3206      	adds	r2, #6
 8004c66:	4907      	ldr	r1, [pc, #28]	; (8004c84 <CDC_Control+0x19c>)
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	440b      	add	r3, r1
 8004c6c:	799b      	ldrb	r3, [r3, #6]
 8004c6e:	7013      	strb	r3, [r2, #0]
    break;
 8004c70:	e000      	b.n	8004c74 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8004c72:	bf00      	nop
  }

  return (USBD_OK);
 8004c74:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20005844 	.word	0x20005844

08004c88 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	68b9      	ldr	r1, [r7, #8]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 f825 	bl	8004cf0 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	4907      	ldr	r1, [pc, #28]	; (8004cc8 <CDC_Receive+0x40>)
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fdc3 	bl	8005838 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	4904      	ldr	r1, [pc, #16]	; (8004cc8 <CDC_Receive+0x40>)
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fe1e 	bl	80058f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8004cbc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20005420 	.word	0x20005420

08004ccc <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	607a      	str	r2, [r7, #4]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4603      	mov	r3, r0
 8004cda:	73fb      	strb	r3, [r7, #15]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	6039      	str	r1, [r7, #0]
 8004cfa:	71fb      	strb	r3, [r7, #7]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004d0e:	fb02 f303 	mul.w	r3, r2, r3
 8004d12:	4a0e      	ldr	r2, [pc, #56]	; (8004d4c <CDC_Transmit+0x5c>)
 8004d14:	4413      	add	r3, r2
 8004d16:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e00d      	b.n	8004d42 <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 8004d26:	88bb      	ldrh	r3, [r7, #4]
 8004d28:	79f8      	ldrb	r0, [r7, #7]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	4908      	ldr	r1, [pc, #32]	; (8004d50 <CDC_Transmit+0x60>)
 8004d2e:	f000 fd5f 	bl	80057f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	4906      	ldr	r1, [pc, #24]	; (8004d50 <CDC_Transmit+0x60>)
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fd9c 	bl	8005874 <USBD_CDC_TransmitPacket>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	2000da58 	.word	0x2000da58
 8004d50:	20005420 	.word	0x20005420

08004d54 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	6039      	str	r1, [r7, #0]
 8004d5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2212      	movs	r2, #18
 8004d64:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8004d66:	4b03      	ldr	r3, [pc, #12]	; (8004d74 <USBD_DeviceDescriptor+0x20>)
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	2000003c 	.word	0x2000003c

08004d78 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	6039      	str	r1, [r7, #0]
 8004d82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2204      	movs	r2, #4
 8004d88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004d8a:	4b03      	ldr	r3, [pc, #12]	; (8004d98 <USBD_LangIDStrDescriptor+0x20>)
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	20000050 	.word	0x20000050

08004d9c <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	6039      	str	r1, [r7, #0]
 8004da6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004da8:	79fb      	ldrb	r3, [r7, #7]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d105      	bne.n	8004dba <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	4907      	ldr	r1, [pc, #28]	; (8004dd0 <USBD_ProductStrDescriptor+0x34>)
 8004db2:	4808      	ldr	r0, [pc, #32]	; (8004dd4 <USBD_ProductStrDescriptor+0x38>)
 8004db4:	f004 f877 	bl	8008ea6 <USBD_GetString>
 8004db8:	e004      	b.n	8004dc4 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	4904      	ldr	r1, [pc, #16]	; (8004dd0 <USBD_ProductStrDescriptor+0x34>)
 8004dbe:	4805      	ldr	r0, [pc, #20]	; (8004dd4 <USBD_ProductStrDescriptor+0x38>)
 8004dc0:	f004 f871 	bl	8008ea6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004dc4:	4b02      	ldr	r3, [pc, #8]	; (8004dd0 <USBD_ProductStrDescriptor+0x34>)
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	2000584c 	.word	0x2000584c
 8004dd4:	0800d688 	.word	0x0800d688

08004dd8 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	6039      	str	r1, [r7, #0]
 8004de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	4904      	ldr	r1, [pc, #16]	; (8004df8 <USBD_ManufacturerStrDescriptor+0x20>)
 8004de8:	4804      	ldr	r0, [pc, #16]	; (8004dfc <USBD_ManufacturerStrDescriptor+0x24>)
 8004dea:	f004 f85c 	bl	8008ea6 <USBD_GetString>
  return USBD_StrDesc;
 8004dee:	4b02      	ldr	r3, [pc, #8]	; (8004df8 <USBD_ManufacturerStrDescriptor+0x20>)
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	2000584c 	.word	0x2000584c
 8004dfc:	0800d6a0 	.word	0x0800d6a0

08004e00 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	6039      	str	r1, [r7, #0]
 8004e0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	221a      	movs	r2, #26
 8004e10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8004e12:	f000 f843 	bl	8004e9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8004e16:	4b02      	ldr	r3, [pc, #8]	; (8004e20 <USBD_SerialStrDescriptor+0x20>)
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20000054 	.word	0x20000054

08004e24 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	6039      	str	r1, [r7, #0]
 8004e2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d105      	bne.n	8004e42 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	4907      	ldr	r1, [pc, #28]	; (8004e58 <USBD_ConfigStrDescriptor+0x34>)
 8004e3a:	4808      	ldr	r0, [pc, #32]	; (8004e5c <USBD_ConfigStrDescriptor+0x38>)
 8004e3c:	f004 f833 	bl	8008ea6 <USBD_GetString>
 8004e40:	e004      	b.n	8004e4c <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	4904      	ldr	r1, [pc, #16]	; (8004e58 <USBD_ConfigStrDescriptor+0x34>)
 8004e46:	4805      	ldr	r0, [pc, #20]	; (8004e5c <USBD_ConfigStrDescriptor+0x38>)
 8004e48:	f004 f82d 	bl	8008ea6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004e4c:	4b02      	ldr	r3, [pc, #8]	; (8004e58 <USBD_ConfigStrDescriptor+0x34>)
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	2000584c 	.word	0x2000584c
 8004e5c:	0800d6b4 	.word	0x0800d6b4

08004e60 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	6039      	str	r1, [r7, #0]
 8004e6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d105      	bne.n	8004e7e <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	4907      	ldr	r1, [pc, #28]	; (8004e94 <USBD_InterfaceStrDescriptor+0x34>)
 8004e76:	4808      	ldr	r0, [pc, #32]	; (8004e98 <USBD_InterfaceStrDescriptor+0x38>)
 8004e78:	f004 f815 	bl	8008ea6 <USBD_GetString>
 8004e7c:	e004      	b.n	8004e88 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	4904      	ldr	r1, [pc, #16]	; (8004e94 <USBD_InterfaceStrDescriptor+0x34>)
 8004e82:	4805      	ldr	r0, [pc, #20]	; (8004e98 <USBD_InterfaceStrDescriptor+0x38>)
 8004e84:	f004 f80f 	bl	8008ea6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004e88:	4b02      	ldr	r3, [pc, #8]	; (8004e94 <USBD_InterfaceStrDescriptor+0x34>)
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	2000584c 	.word	0x2000584c
 8004e98:	0800d6c4 	.word	0x0800d6c4

08004e9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004ea2:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <Get_SerialNum+0x44>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004ea8:	4b0e      	ldr	r3, [pc, #56]	; (8004ee4 <Get_SerialNum+0x48>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004eae:	4b0e      	ldr	r3, [pc, #56]	; (8004ee8 <Get_SerialNum+0x4c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4413      	add	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d009      	beq.n	8004ed6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004ec2:	2208      	movs	r2, #8
 8004ec4:	4909      	ldr	r1, [pc, #36]	; (8004eec <Get_SerialNum+0x50>)
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 f814 	bl	8004ef4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004ecc:	2204      	movs	r2, #4
 8004ece:	4908      	ldr	r1, [pc, #32]	; (8004ef0 <Get_SerialNum+0x54>)
 8004ed0:	68b8      	ldr	r0, [r7, #8]
 8004ed2:	f000 f80f 	bl	8004ef4 <IntToUnicode>
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	1fff7a10 	.word	0x1fff7a10
 8004ee4:	1fff7a14 	.word	0x1fff7a14
 8004ee8:	1fff7a18 	.word	0x1fff7a18
 8004eec:	20000056 	.word	0x20000056
 8004ef0:	20000066 	.word	0x20000066

08004ef4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	4613      	mov	r3, r2
 8004f00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8004f06:	2300      	movs	r3, #0
 8004f08:	75fb      	strb	r3, [r7, #23]
 8004f0a:	e027      	b.n	8004f5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	0f1b      	lsrs	r3, r3, #28
 8004f10:	2b09      	cmp	r3, #9
 8004f12:	d80b      	bhi.n	8004f2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	0f1b      	lsrs	r3, r3, #28
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	7dfb      	ldrb	r3, [r7, #23]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	4619      	mov	r1, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	440b      	add	r3, r1
 8004f24:	3230      	adds	r2, #48	; 0x30
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	e00a      	b.n	8004f42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	0f1b      	lsrs	r3, r3, #28
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	4619      	mov	r1, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	440b      	add	r3, r1
 8004f3c:	3237      	adds	r2, #55	; 0x37
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	4413      	add	r3, r2
 8004f52:	2200      	movs	r2, #0
 8004f54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8004f56:	7dfb      	ldrb	r3, [r7, #23]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	75fb      	strb	r3, [r7, #23]
 8004f5c:	7dfa      	ldrb	r2, [r7, #23]
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d3d3      	bcc.n	8004f0c <IntToUnicode+0x18>
  }
}
 8004f64:	bf00      	nop
 8004f66:	bf00      	nop
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <STORAGE_Init>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init(uint8_t lun)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	4603      	mov	r3, r0
 8004f7a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8004f7c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <STORAGE_GetCapacity>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	4603      	mov	r3, r0
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	607a      	str	r2, [r7, #4]
 8004f96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	22c8      	movs	r2, #200	; 0xc8
 8004f9c:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fa4:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8004fa6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <STORAGE_IsReady>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady(uint8_t lun)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8004fbe:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <STORAGE_IsWriteProtected>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected(uint8_t lun)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8004fd6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <STORAGE_Read>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b089      	sub	sp, #36	; 0x24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	607a      	str	r2, [r7, #4]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	73fb      	strb	r3, [r7, #15]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

  uint32_t bytecount = blk_len*STORAGE_BLK_SIZ;
 8004ff8:	89bb      	ldrh	r3, [r7, #12]
 8004ffa:	025b      	lsls	r3, r3, #9
 8004ffc:	61bb      	str	r3, [r7, #24]
  uint32_t mem_address = blk_addr*STORAGE_BLK_SIZ;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	025b      	lsls	r3, r3, #9
 8005002:	617b      	str	r3, [r7, #20]

  for(uint32_t i=0; i<bytecount; i++)
 8005004:	2300      	movs	r3, #0
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	e00b      	b.n	8005022 <STORAGE_Read+0x3e>
      {
	  buf[i] = MSC_Storage[mem_address+i];
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	441a      	add	r2, r3
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	440b      	add	r3, r1
 8005016:	4908      	ldr	r1, [pc, #32]	; (8005038 <STORAGE_Read+0x54>)
 8005018:	5c8a      	ldrb	r2, [r1, r2]
 800501a:	701a      	strb	r2, [r3, #0]
  for(uint32_t i=0; i<bytecount; i++)
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	3301      	adds	r3, #1
 8005020:	61fb      	str	r3, [r7, #28]
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	429a      	cmp	r2, r3
 8005028:	d3ef      	bcc.n	800500a <STORAGE_Read+0x26>
      }

  return (USBD_OK);
 800502a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800502c:	4618      	mov	r0, r3
 800502e:	3724      	adds	r7, #36	; 0x24
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	20005a4c 	.word	0x20005a4c

0800503c <STORAGE_Write>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800503c:	b480      	push	{r7}
 800503e:	b089      	sub	sp, #36	; 0x24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
 8005046:	461a      	mov	r2, r3
 8005048:	4603      	mov	r3, r0
 800504a:	73fb      	strb	r3, [r7, #15]
 800504c:	4613      	mov	r3, r2
 800504e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */

   uint32_t bytecount = blk_len*STORAGE_BLK_SIZ;
 8005050:	89bb      	ldrh	r3, [r7, #12]
 8005052:	025b      	lsls	r3, r3, #9
 8005054:	61bb      	str	r3, [r7, #24]
   uint32_t mem_address = blk_addr*STORAGE_BLK_SIZ;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	025b      	lsls	r3, r3, #9
 800505a:	617b      	str	r3, [r7, #20]

    for(uint32_t i=0; i<bytecount; i++)
 800505c:	2300      	movs	r3, #0
 800505e:	61fb      	str	r3, [r7, #28]
 8005060:	e00b      	b.n	800507a <STORAGE_Write+0x3e>
    {
	MSC_Storage[mem_address+i] = buf[i];
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	441a      	add	r2, r3
 8005068:	6979      	ldr	r1, [r7, #20]
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	440b      	add	r3, r1
 800506e:	7811      	ldrb	r1, [r2, #0]
 8005070:	4a07      	ldr	r2, [pc, #28]	; (8005090 <STORAGE_Write+0x54>)
 8005072:	54d1      	strb	r1, [r2, r3]
    for(uint32_t i=0; i<bytecount; i++)
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	3301      	adds	r3, #1
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	429a      	cmp	r2, r3
 8005080:	d3ef      	bcc.n	8005062 <STORAGE_Write+0x26>
    }

  return (USBD_OK);
 8005082:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8005084:	4618      	mov	r0, r3
 8005086:	3724      	adds	r7, #36	; 0x24
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	20005a4c 	.word	0x20005a4c

08005094 <STORAGE_GetMaxLun>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8005098:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800509a:	4618      	mov	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80050b4:	2300      	movs	r3, #0
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	e0c6      	b.n	8005248 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
 80050bc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80050c0:	fb02 f303 	mul.w	r3, r2, r3
 80050c4:	4a65      	ldr	r2, [pc, #404]	; (800525c <USBD_CDC_Init+0x1b8>)
 80050c6:	4413      	add	r3, r2
 80050c8:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	7c1b      	ldrb	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d13d      	bne.n	800514e <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	4a62      	ldr	r2, [pc, #392]	; (8005260 <USBD_CDC_Init+0x1bc>)
 80050d6:	5cd1      	ldrb	r1, [r2, r3]
 80050d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050dc:	2202      	movs	r2, #2
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f004 f92b 	bl	800933a <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	4a5e      	ldr	r2, [pc, #376]	; (8005260 <USBD_CDC_Init+0x1bc>)
 80050e8:	5cd3      	ldrb	r3, [r2, r3]
 80050ea:	f003 020f 	and.w	r2, r3, #15
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	3324      	adds	r3, #36	; 0x24
 80050fc:	2201      	movs	r2, #1
 80050fe:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8005100:	7bfb      	ldrb	r3, [r7, #15]
 8005102:	4a58      	ldr	r2, [pc, #352]	; (8005264 <USBD_CDC_Init+0x1c0>)
 8005104:	5cd1      	ldrb	r1, [r2, r3]
 8005106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800510a:	2202      	movs	r2, #2
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f004 f914 	bl	800933a <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8005112:	7bfb      	ldrb	r3, [r7, #15]
 8005114:	4a53      	ldr	r2, [pc, #332]	; (8005264 <USBD_CDC_Init+0x1c0>)
 8005116:	5cd3      	ldrb	r3, [r2, r3]
 8005118:	f003 020f 	and.w	r2, r3, #15
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800512c:	2201      	movs	r2, #1
 800512e:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	4a4d      	ldr	r2, [pc, #308]	; (8005268 <USBD_CDC_Init+0x1c4>)
 8005134:	5cd3      	ldrb	r3, [r2, r3]
 8005136:	f003 020f 	and.w	r2, r3, #15
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	3326      	adds	r3, #38	; 0x26
 8005148:	2210      	movs	r2, #16
 800514a:	801a      	strh	r2, [r3, #0]
 800514c:	e03a      	b.n	80051c4 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	4a43      	ldr	r2, [pc, #268]	; (8005260 <USBD_CDC_Init+0x1bc>)
 8005152:	5cd1      	ldrb	r1, [r2, r3]
 8005154:	2340      	movs	r3, #64	; 0x40
 8005156:	2202      	movs	r2, #2
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f004 f8ee 	bl	800933a <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800515e:	7bfb      	ldrb	r3, [r7, #15]
 8005160:	4a3f      	ldr	r2, [pc, #252]	; (8005260 <USBD_CDC_Init+0x1bc>)
 8005162:	5cd3      	ldrb	r3, [r2, r3]
 8005164:	f003 020f 	and.w	r2, r3, #15
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	3324      	adds	r3, #36	; 0x24
 8005176:	2201      	movs	r2, #1
 8005178:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800517a:	7bfb      	ldrb	r3, [r7, #15]
 800517c:	4a39      	ldr	r2, [pc, #228]	; (8005264 <USBD_CDC_Init+0x1c0>)
 800517e:	5cd1      	ldrb	r1, [r2, r3]
 8005180:	2340      	movs	r3, #64	; 0x40
 8005182:	2202      	movs	r2, #2
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f004 f8d8 	bl	800933a <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	4a35      	ldr	r2, [pc, #212]	; (8005264 <USBD_CDC_Init+0x1c0>)
 800518e:	5cd3      	ldrb	r3, [r2, r3]
 8005190:	f003 020f 	and.w	r2, r3, #15
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	440b      	add	r3, r1
 80051a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051a4:	2201      	movs	r2, #1
 80051a6:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	4a2f      	ldr	r2, [pc, #188]	; (8005268 <USBD_CDC_Init+0x1c4>)
 80051ac:	5cd3      	ldrb	r3, [r2, r3]
 80051ae:	f003 020f 	and.w	r2, r3, #15
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	3326      	adds	r3, #38	; 0x26
 80051c0:	2210      	movs	r2, #16
 80051c2:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	4a28      	ldr	r2, [pc, #160]	; (8005268 <USBD_CDC_Init+0x1c4>)
 80051c8:	5cd1      	ldrb	r1, [r2, r3]
 80051ca:	2308      	movs	r3, #8
 80051cc:	2203      	movs	r2, #3
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f004 f8b3 	bl	800933a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	4a24      	ldr	r2, [pc, #144]	; (8005268 <USBD_CDC_Init+0x1c4>)
 80051d8:	5cd3      	ldrb	r3, [r2, r3]
 80051da:	f003 020f 	and.w	r2, r3, #15
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	3324      	adds	r3, #36	; 0x24
 80051ec:	2201      	movs	r2, #1
 80051ee:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	7bfa      	ldrb	r2, [r7, #15]
 80051fa:	4610      	mov	r0, r2
 80051fc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2200      	movs	r2, #0
 8005202:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2200      	movs	r2, #0
 800520a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	7c1b      	ldrb	r3, [r3, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10b      	bne.n	800522e <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	4a12      	ldr	r2, [pc, #72]	; (8005264 <USBD_CDC_Init+0x1c0>)
 800521a:	5cd1      	ldrb	r1, [r2, r3]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005222:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f004 f995 	bl	8009556 <USBD_LL_PrepareReceive>
 800522c:	e009      	b.n	8005242 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800522e:	7bfb      	ldrb	r3, [r7, #15]
 8005230:	4a0c      	ldr	r2, [pc, #48]	; (8005264 <USBD_CDC_Init+0x1c0>)
 8005232:	5cd1      	ldrb	r1, [r2, r3]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800523a:	2340      	movs	r3, #64	; 0x40
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f004 f98a 	bl	8009556 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	3301      	adds	r3, #1
 8005246:	73fb      	strb	r3, [r7, #15]
 8005248:	7bfb      	ldrb	r3, [r7, #15]
 800524a:	2b00      	cmp	r3, #0
 800524c:	f43f af35 	beq.w	80050ba <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	2000da58 	.word	0x2000da58
 8005260:	2000da50 	.word	0x2000da50
 8005264:	2000da4c 	.word	0x2000da4c
 8005268:	2000dc7c 	.word	0x2000dc7c

0800526c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005278:	2300      	movs	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]
 800527c:	e057      	b.n	800532e <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	4a2f      	ldr	r2, [pc, #188]	; (8005340 <USBD_CDC_DeInit+0xd4>)
 8005282:	5cd3      	ldrb	r3, [r2, r3]
 8005284:	4619      	mov	r1, r3
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f004 f87d 	bl	8009386 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	4a2c      	ldr	r2, [pc, #176]	; (8005340 <USBD_CDC_DeInit+0xd4>)
 8005290:	5cd3      	ldrb	r3, [r2, r3]
 8005292:	f003 020f 	and.w	r2, r3, #15
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	3324      	adds	r3, #36	; 0x24
 80052a4:	2200      	movs	r2, #0
 80052a6:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	4a26      	ldr	r2, [pc, #152]	; (8005344 <USBD_CDC_DeInit+0xd8>)
 80052ac:	5cd3      	ldrb	r3, [r2, r3]
 80052ae:	4619      	mov	r1, r3
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f004 f868 	bl	8009386 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	4a22      	ldr	r2, [pc, #136]	; (8005344 <USBD_CDC_DeInit+0xd8>)
 80052ba:	5cd3      	ldrb	r3, [r2, r3]
 80052bc:	f003 020f 	and.w	r2, r3, #15
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	440b      	add	r3, r1
 80052cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80052d0:	2200      	movs	r2, #0
 80052d2:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
 80052d6:	4a1c      	ldr	r2, [pc, #112]	; (8005348 <USBD_CDC_DeInit+0xdc>)
 80052d8:	5cd3      	ldrb	r3, [r2, r3]
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f004 f852 	bl	8009386 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	4a18      	ldr	r2, [pc, #96]	; (8005348 <USBD_CDC_DeInit+0xdc>)
 80052e6:	5cd3      	ldrb	r3, [r2, r3]
 80052e8:	f003 020f 	and.w	r2, r3, #15
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	440b      	add	r3, r1
 80052f8:	3324      	adds	r3, #36	; 0x24
 80052fa:	2200      	movs	r2, #0
 80052fc:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	4a11      	ldr	r2, [pc, #68]	; (8005348 <USBD_CDC_DeInit+0xdc>)
 8005302:	5cd3      	ldrb	r3, [r2, r3]
 8005304:	f003 020f 	and.w	r2, r3, #15
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	3326      	adds	r3, #38	; 0x26
 8005316:	2200      	movs	r2, #0
 8005318:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	7bfa      	ldrb	r2, [r7, #15]
 8005324:	4610      	mov	r0, r2
 8005326:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	3301      	adds	r3, #1
 800532c:	73fb      	strb	r3, [r7, #15]
 800532e:	7bfb      	ldrb	r3, [r7, #15]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0a4      	beq.n	800527e <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	2000da50 	.word	0x2000da50
 8005344:	2000da4c 	.word	0x2000da4c
 8005348:	2000dc7c 	.word	0x2000dc7c

0800534c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800534c:	b590      	push	{r4, r7, lr}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005356:	2300      	movs	r3, #0
 8005358:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800536a:	2300      	movs	r3, #0
 800536c:	757b      	strb	r3, [r7, #21]
 800536e:	e015      	b.n	800539c <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	889b      	ldrh	r3, [r3, #4]
 8005374:	b2da      	uxtb	r2, r3
 8005376:	7d7b      	ldrb	r3, [r7, #21]
 8005378:	496d      	ldr	r1, [pc, #436]	; (8005530 <USBD_CDC_Setup+0x1e4>)
 800537a:	5ccb      	ldrb	r3, [r1, r3]
 800537c:	429a      	cmp	r2, r3
 800537e:	d007      	beq.n	8005390 <USBD_CDC_Setup+0x44>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	889b      	ldrh	r3, [r3, #4]
 8005384:	b2da      	uxtb	r2, r3
 8005386:	7d7b      	ldrb	r3, [r7, #21]
 8005388:	496a      	ldr	r1, [pc, #424]	; (8005534 <USBD_CDC_Setup+0x1e8>)
 800538a:	5ccb      	ldrb	r3, [r1, r3]
 800538c:	429a      	cmp	r2, r3
 800538e:	d102      	bne.n	8005396 <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 8005390:	7d7b      	ldrb	r3, [r7, #21]
 8005392:	75bb      	strb	r3, [r7, #22]
      break;
 8005394:	e005      	b.n	80053a2 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005396:	7d7b      	ldrb	r3, [r7, #21]
 8005398:	3301      	adds	r3, #1
 800539a:	757b      	strb	r3, [r7, #21]
 800539c:	7d7b      	ldrb	r3, [r7, #21]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0e6      	beq.n	8005370 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 80053a2:	7dbb      	ldrb	r3, [r7, #22]
 80053a4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80053a8:	fb02 f303 	mul.w	r3, r2, r3
 80053ac:	4a62      	ldr	r2, [pc, #392]	; (8005538 <USBD_CDC_Setup+0x1ec>)
 80053ae:	4413      	add	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d04a      	beq.n	8005454 <USBD_CDC_Setup+0x108>
 80053be:	2b20      	cmp	r3, #32
 80053c0:	f040 80aa 	bne.w	8005518 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	88db      	ldrh	r3, [r3, #6]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d038      	beq.n	800543e <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	b25b      	sxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	da1d      	bge.n	8005412 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053dc:	689c      	ldr	r4, [r3, #8]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	7859      	ldrb	r1, [r3, #1]
 80053e2:	7dbb      	ldrb	r3, [r7, #22]
 80053e4:	025b      	lsls	r3, r3, #9
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	441a      	add	r2, r3
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	88db      	ldrh	r3, [r3, #6]
 80053ee:	7db8      	ldrb	r0, [r7, #22]
 80053f0:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	88db      	ldrh	r3, [r3, #6]
 80053f6:	2b07      	cmp	r3, #7
 80053f8:	bf28      	it	cs
 80053fa:	2307      	movcs	r3, #7
 80053fc:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 80053fe:	7dbb      	ldrb	r3, [r7, #22]
 8005400:	025b      	lsls	r3, r3, #9
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4413      	add	r3, r2
 8005406:	89fa      	ldrh	r2, [r7, #14]
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f003 fdab 	bl	8008f66 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8005410:	e089      	b.n	8005526 <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	785a      	ldrb	r2, [r3, #1]
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	88db      	ldrh	r3, [r3, #6]
 8005420:	b2da      	uxtb	r2, r3
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8005428:	7dbb      	ldrb	r3, [r7, #22]
 800542a:	025b      	lsls	r3, r3, #9
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	18d1      	adds	r1, r2, r3
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	88db      	ldrh	r3, [r3, #6]
 8005434:	461a      	mov	r2, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f003 fdc1 	bl	8008fbe <USBD_CtlPrepareRx>
    break;
 800543c:	e073      	b.n	8005526 <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005444:	689c      	ldr	r4, [r3, #8]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	7859      	ldrb	r1, [r3, #1]
 800544a:	7db8      	ldrb	r0, [r7, #22]
 800544c:	2300      	movs	r3, #0
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	47a0      	blx	r4
    break;
 8005452:	e068      	b.n	8005526 <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b0b      	cmp	r3, #11
 800545a:	d852      	bhi.n	8005502 <USBD_CDC_Setup+0x1b6>
 800545c:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <USBD_CDC_Setup+0x118>)
 800545e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005462:	bf00      	nop
 8005464:	08005495 	.word	0x08005495
 8005468:	08005511 	.word	0x08005511
 800546c:	08005503 	.word	0x08005503
 8005470:	08005503 	.word	0x08005503
 8005474:	08005503 	.word	0x08005503
 8005478:	08005503 	.word	0x08005503
 800547c:	08005503 	.word	0x08005503
 8005480:	08005503 	.word	0x08005503
 8005484:	08005503 	.word	0x08005503
 8005488:	08005503 	.word	0x08005503
 800548c:	080054bf 	.word	0x080054bf
 8005490:	080054e9 	.word	0x080054e9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b03      	cmp	r3, #3
 800549e:	d107      	bne.n	80054b0 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80054a0:	f107 030a 	add.w	r3, r7, #10
 80054a4:	2202      	movs	r2, #2
 80054a6:	4619      	mov	r1, r3
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f003 fd5c 	bl	8008f66 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80054ae:	e032      	b.n	8005516 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80054b0:	6839      	ldr	r1, [r7, #0]
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f003 fce6 	bl	8008e84 <USBD_CtlError>
        ret = USBD_FAIL;
 80054b8:	2303      	movs	r3, #3
 80054ba:	75fb      	strb	r3, [r7, #23]
      break;
 80054bc:	e02b      	b.n	8005516 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d107      	bne.n	80054da <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80054ca:	f107 030d 	add.w	r3, r7, #13
 80054ce:	2201      	movs	r2, #1
 80054d0:	4619      	mov	r1, r3
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f003 fd47 	bl	8008f66 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80054d8:	e01d      	b.n	8005516 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f003 fcd1 	bl	8008e84 <USBD_CtlError>
        ret = USBD_FAIL;
 80054e2:	2303      	movs	r3, #3
 80054e4:	75fb      	strb	r3, [r7, #23]
      break;
 80054e6:	e016      	b.n	8005516 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d00f      	beq.n	8005514 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f003 fcc4 	bl	8008e84 <USBD_CtlError>
        ret = USBD_FAIL;
 80054fc:	2303      	movs	r3, #3
 80054fe:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005500:	e008      	b.n	8005514 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005502:	6839      	ldr	r1, [r7, #0]
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f003 fcbd 	bl	8008e84 <USBD_CtlError>
      ret = USBD_FAIL;
 800550a:	2303      	movs	r3, #3
 800550c:	75fb      	strb	r3, [r7, #23]
      break;
 800550e:	e002      	b.n	8005516 <USBD_CDC_Setup+0x1ca>
      break;
 8005510:	bf00      	nop
 8005512:	e008      	b.n	8005526 <USBD_CDC_Setup+0x1da>
      break;
 8005514:	bf00      	nop
    }
    break;
 8005516:	e006      	b.n	8005526 <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f003 fcb2 	bl	8008e84 <USBD_CtlError>
    ret = USBD_FAIL;
 8005520:	2303      	movs	r3, #3
 8005522:	75fb      	strb	r3, [r7, #23]
    break;
 8005524:	bf00      	nop
  }

  return (uint8_t)ret;
 8005526:	7dfb      	ldrb	r3, [r7, #23]
}
 8005528:	4618      	mov	r0, r3
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	bd90      	pop	{r4, r7, pc}
 8005530:	2000da54 	.word	0x2000da54
 8005534:	2000dc78 	.word	0x2000dc78
 8005538:	2000da58 	.word	0x2000da58

0800553c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800553c:	b590      	push	{r4, r7, lr}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8005552:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005558:	2300      	movs	r3, #0
 800555a:	75bb      	strb	r3, [r7, #22]
 800555c:	e00d      	b.n	800557a <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 800555e:	78fa      	ldrb	r2, [r7, #3]
 8005560:	7dbb      	ldrb	r3, [r7, #22]
 8005562:	4934      	ldr	r1, [pc, #208]	; (8005634 <USBD_CDC_DataIn+0xf8>)
 8005564:	5ccb      	ldrb	r3, [r1, r3]
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	429a      	cmp	r2, r3
 800556c:	d102      	bne.n	8005574 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 800556e:	7dbb      	ldrb	r3, [r7, #22]
 8005570:	75fb      	strb	r3, [r7, #23]
      break;
 8005572:	e005      	b.n	8005580 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005574:	7dbb      	ldrb	r3, [r7, #22]
 8005576:	3301      	adds	r3, #1
 8005578:	75bb      	strb	r3, [r7, #22]
 800557a:	7dbb      	ldrb	r3, [r7, #22]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0ee      	beq.n	800555e <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005586:	fb02 f303 	mul.w	r3, r2, r3
 800558a:	4a2b      	ldr	r2, [pc, #172]	; (8005638 <USBD_CDC_DataIn+0xfc>)
 800558c:	4413      	add	r3, r2
 800558e:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005590:	78fa      	ldrb	r2, [r7, #3]
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	440b      	add	r3, r1
 800559e:	3318      	adds	r3, #24
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d029      	beq.n	80055fa <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80055a6:	78fa      	ldrb	r2, [r7, #3]
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	3318      	adds	r3, #24
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	78f9      	ldrb	r1, [r7, #3]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	460b      	mov	r3, r1
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	1a5b      	subs	r3, r3, r1
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4403      	add	r3, r0
 80055c6:	3344      	adds	r3, #68	; 0x44
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	fbb2 f1f3 	udiv	r1, r2, r3
 80055ce:	fb03 f301 	mul.w	r3, r3, r1
 80055d2:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d110      	bne.n	80055fa <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80055d8:	78fa      	ldrb	r2, [r7, #3]
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	3318      	adds	r3, #24
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80055ec:	78f9      	ldrb	r1, [r7, #3]
 80055ee:	2300      	movs	r3, #0
 80055f0:	2200      	movs	r2, #0
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f003 ff8e 	bl	8009514 <USBD_LL_Transmit>
 80055f8:	e016      	b.n	8005628 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00c      	beq.n	8005628 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005614:	691c      	ldr	r4, [r3, #16]
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	7df8      	ldrb	r0, [r7, #23]
 8005626:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	bd90      	pop	{r4, r7, pc}
 8005632:	bf00      	nop
 8005634:	2000da50 	.word	0x2000da50
 8005638:	2000da58 	.word	0x2000da58

0800563c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005648:	2300      	movs	r3, #0
 800564a:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005650:	2300      	movs	r3, #0
 8005652:	73bb      	strb	r3, [r7, #14]
 8005654:	e00b      	b.n	800566e <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8005656:	7bbb      	ldrb	r3, [r7, #14]
 8005658:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <USBD_CDC_DataOut+0x7c>)
 800565a:	5cd3      	ldrb	r3, [r2, r3]
 800565c:	78fa      	ldrb	r2, [r7, #3]
 800565e:	429a      	cmp	r2, r3
 8005660:	d102      	bne.n	8005668 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8005662:	7bbb      	ldrb	r3, [r7, #14]
 8005664:	73fb      	strb	r3, [r7, #15]
      break;
 8005666:	e005      	b.n	8005674 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005668:	7bbb      	ldrb	r3, [r7, #14]
 800566a:	3301      	adds	r3, #1
 800566c:	73bb      	strb	r3, [r7, #14]
 800566e:	7bbb      	ldrb	r3, [r7, #14]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0f0      	beq.n	8005656 <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800567a:	fb02 f303 	mul.w	r3, r2, r3
 800567e:	4a0f      	ldr	r2, [pc, #60]	; (80056bc <USBD_CDC_DataOut+0x80>)
 8005680:	4413      	add	r3, r2
 8005682:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f003 ff85 	bl	8009598 <USBD_LL_GetRxDataSize>
 800568e:	4602      	mov	r2, r0
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80056aa:	7bf8      	ldrb	r0, [r7, #15]
 80056ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	2000da4c 	.word	0x2000da4c
 80056bc:	2000da58 	.word	0x2000da58

080056c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80056c0:	b590      	push	{r4, r7, lr}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60bb      	str	r3, [r7, #8]

  if (hcdc == NULL)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <USBD_CDC_EP0_RxReady+0x16>
  {
    return (uint8_t)USBD_FAIL;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e030      	b.n	8005738 <USBD_CDC_EP0_RxReady+0x78>
  }

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]
 80056da:	e029      	b.n	8005730 <USBD_CDC_EP0_RxReady+0x70>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80056e2:	fb02 f303 	mul.w	r3, r2, r3
 80056e6:	4a16      	ldr	r2, [pc, #88]	; (8005740 <USBD_CDC_EP0_RxReady+0x80>)
 80056e8:	4413      	add	r3, r2
 80056ea:	60bb      	str	r3, [r7, #8]

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d019      	beq.n	800572a <USBD_CDC_EP0_RxReady+0x6a>
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80056fc:	2bff      	cmp	r3, #255	; 0xff
 80056fe:	d014      	beq.n	800572a <USBD_CDC_EP0_RxReady+0x6a>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005706:	689c      	ldr	r4, [r3, #8]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	025b      	lsls	r3, r3, #9
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	441a      	add	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800571c:	b29b      	uxth	r3, r3
 800571e:	7bf8      	ldrb	r0, [r7, #15]
 8005720:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	22ff      	movs	r2, #255	; 0xff
 8005726:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	3301      	adds	r3, #1
 800572e:	73fb      	strb	r3, [r7, #15]
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0d2      	beq.n	80056dc <USBD_CDC_EP0_RxReady+0x1c>
    }
  }

  return (uint8_t)USBD_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	bd90      	pop	{r4, r7, pc}
 8005740:	2000da58 	.word	0x2000da58

08005744 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	224b      	movs	r2, #75	; 0x4b
 8005750:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005752:	4b03      	ldr	r3, [pc, #12]	; (8005760 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	20000124 	.word	0x20000124

08005764 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	224b      	movs	r2, #75	; 0x4b
 8005770:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005772:	4b03      	ldr	r3, [pc, #12]	; (8005780 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	200000d8 	.word	0x200000d8

08005784 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	224b      	movs	r2, #75	; 0x4b
 8005790:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005792:	4b03      	ldr	r3, [pc, #12]	; (80057a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005794:	4618      	mov	r0, r3
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	20000124 	.word	0x20000124

080057a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	220a      	movs	r2, #10
 80057b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80057b2:	4b03      	ldr	r3, [pc, #12]	; (80057c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	20000090 	.word	0x20000090

080057c4 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e004      	b.n	80057e2 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
	...

080057f0 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	4603      	mov	r3, r0
 80057fe:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800580a:	fb02 f303 	mul.w	r3, r2, r3
 800580e:	4a09      	ldr	r2, [pc, #36]	; (8005834 <USBD_CDC_SetTxBuffer+0x44>)
 8005810:	4413      	add	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	2000da58 	.word	0x2000da58

08005838 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005846:	2300      	movs	r3, #0
 8005848:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005850:	fb02 f303 	mul.w	r3, r2, r3
 8005854:	4a06      	ldr	r2, [pc, #24]	; (8005870 <USBD_CDC_SetRxBuffer+0x38>)
 8005856:	4413      	add	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	2000da58 	.word	0x2000da58

08005874 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	6039      	str	r1, [r7, #0]
 800587e:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005880:	2300      	movs	r3, #0
 8005882:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005884:	2301      	movs	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005888:	79fb      	ldrb	r3, [r7, #7]
 800588a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800588e:	fb02 f303 	mul.w	r3, r2, r3
 8005892:	4a17      	ldr	r2, [pc, #92]	; (80058f0 <USBD_CDC_TransmitPacket+0x7c>)
 8005894:	4413      	add	r3, r2
 8005896:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d121      	bne.n	80058e6 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	4a11      	ldr	r2, [pc, #68]	; (80058f4 <USBD_CDC_TransmitPacket+0x80>)
 80058ae:	5cd3      	ldrb	r3, [r2, r3]
 80058b0:	f003 020f 	and.w	r2, r3, #15
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80058ba:	6838      	ldr	r0, [r7, #0]
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4403      	add	r3, r0
 80058c6:	3318      	adds	r3, #24
 80058c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 80058ca:	79fb      	ldrb	r3, [r7, #7]
 80058cc:	4a09      	ldr	r2, [pc, #36]	; (80058f4 <USBD_CDC_TransmitPacket+0x80>)
 80058ce:	5cd1      	ldrb	r1, [r2, r3]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80058dc:	6838      	ldr	r0, [r7, #0]
 80058de:	f003 fe19 	bl	8009514 <USBD_LL_Transmit>

    ret = USBD_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	2000da58 	.word	0x2000da58
 80058f4:	2000da50 	.word	0x2000da50

080058f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	4603      	mov	r3, r0
 8005900:	6039      	str	r1, [r7, #0]
 8005902:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005904:	2300      	movs	r3, #0
 8005906:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005908:	79fb      	ldrb	r3, [r7, #7]
 800590a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800590e:	fb02 f303 	mul.w	r3, r2, r3
 8005912:	4a11      	ldr	r2, [pc, #68]	; (8005958 <USBD_CDC_ReceivePacket+0x60>)
 8005914:	4413      	add	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	7c1b      	ldrb	r3, [r3, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10b      	bne.n	8005938 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	4a0e      	ldr	r2, [pc, #56]	; (800595c <USBD_CDC_ReceivePacket+0x64>)
 8005924:	5cd1      	ldrb	r1, [r2, r3]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800592c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005930:	6838      	ldr	r0, [r7, #0]
 8005932:	f003 fe10 	bl	8009556 <USBD_LL_PrepareReceive>
 8005936:	e009      	b.n	800594c <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	4a08      	ldr	r2, [pc, #32]	; (800595c <USBD_CDC_ReceivePacket+0x64>)
 800593c:	5cd1      	ldrb	r1, [r2, r3]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005944:	2340      	movs	r3, #64	; 0x40
 8005946:	6838      	ldr	r0, [r7, #0]
 8005948:	f003 fe05 	bl	8009556 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	2000da58 	.word	0x2000da58
 800595c:	2000da4c 	.word	0x2000da4c

08005960 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	4608      	mov	r0, r1
 800596a:	4611      	mov	r1, r2
 800596c:	461a      	mov	r2, r3
 800596e:	4603      	mov	r3, r0
 8005970:	70fb      	strb	r3, [r7, #3]
 8005972:	460b      	mov	r3, r1
 8005974:	70bb      	strb	r3, [r7, #2]
 8005976:	4613      	mov	r3, r2
 8005978:	707b      	strb	r3, [r7, #1]
  desc += 9;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3309      	adds	r3, #9
 800597e:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005980:	2300      	movs	r3, #0
 8005982:	73fb      	strb	r3, [r7, #15]
 8005984:	e05b      	b.n	8005a3e <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3302      	adds	r3, #2
 800598a:	78fa      	ldrb	r2, [r7, #3]
 800598c:	701a      	strb	r2, [r3, #0]
    desc[7] = str_idx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3307      	adds	r3, #7
 8005992:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005996:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	330a      	adds	r3, #10
 800599c:	78fa      	ldrb	r2, [r7, #3]
 800599e:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	331a      	adds	r3, #26
 80059a4:	78ba      	ldrb	r2, [r7, #2]
 80059a6:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3322      	adds	r3, #34	; 0x22
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3323      	adds	r3, #35	; 0x23
 80059b4:	78ba      	ldrb	r2, [r7, #2]
 80059b6:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3326      	adds	r3, #38	; 0x26
 80059bc:	7e3a      	ldrb	r2, [r7, #24]
 80059be:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	332d      	adds	r3, #45	; 0x2d
 80059c4:	78ba      	ldrb	r2, [r7, #2]
 80059c6:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3336      	adds	r3, #54	; 0x36
 80059cc:	7f3a      	ldrb	r2, [r7, #28]
 80059ce:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	333d      	adds	r3, #61	; 0x3d
 80059d4:	787a      	ldrb	r2, [r7, #1]
 80059d6:	701a      	strb	r2, [r3, #0]

    desc += 66;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3342      	adds	r3, #66	; 0x42
 80059dc:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 80059de:	7bfb      	ldrb	r3, [r7, #15]
 80059e0:	491c      	ldr	r1, [pc, #112]	; (8005a54 <USBD_Update_CDC_ACM_DESC+0xf4>)
 80059e2:	787a      	ldrb	r2, [r7, #1]
 80059e4:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	491b      	ldr	r1, [pc, #108]	; (8005a58 <USBD_Update_CDC_ACM_DESC+0xf8>)
 80059ea:	7f3a      	ldrb	r2, [r7, #28]
 80059ec:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	491a      	ldr	r1, [pc, #104]	; (8005a5c <USBD_Update_CDC_ACM_DESC+0xfc>)
 80059f2:	7e3a      	ldrb	r2, [r7, #24]
 80059f4:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	4919      	ldr	r1, [pc, #100]	; (8005a60 <USBD_Update_CDC_ACM_DESC+0x100>)
 80059fa:	78fa      	ldrb	r2, [r7, #3]
 80059fc:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	4918      	ldr	r1, [pc, #96]	; (8005a64 <USBD_Update_CDC_ACM_DESC+0x104>)
 8005a02:	78ba      	ldrb	r2, [r7, #2]
 8005a04:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	4917      	ldr	r1, [pc, #92]	; (8005a68 <USBD_Update_CDC_ACM_DESC+0x108>)
 8005a0a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005a0e:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8005a10:	787b      	ldrb	r3, [r7, #1]
 8005a12:	3302      	adds	r3, #2
 8005a14:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 8005a16:	787b      	ldrb	r3, [r7, #1]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8005a1c:	7f3b      	ldrb	r3, [r7, #28]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8005a22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a26:	3301      	adds	r3, #1
 8005a28:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	3302      	adds	r3, #2
 8005a30:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	3301      	adds	r3, #1
 8005a36:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	73fb      	strb	r3, [r7, #15]
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0a0      	beq.n	8005986 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	2000da50 	.word	0x2000da50
 8005a58:	2000da4c 	.word	0x2000da4c
 8005a5c:	2000dc7c 	.word	0x2000dc7c
 8005a60:	2000da54 	.word	0x2000da54
 8005a64:	2000dc78 	.word	0x2000dc78
 8005a68:	2000dc74 	.word	0x2000dc74

08005a6c <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8005a78:	4b08      	ldr	r3, [pc, #32]	; (8005a9c <USBD_COMPOSITE_Init+0x30>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	78fa      	ldrb	r2, [r7, #3]
 8005a7e:	4611      	mov	r1, r2
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	4798      	blx	r3
#endif
#if (USBD_USE_UVC == 1)
  USBD_VIDEO.Init(pdev, cfgidx);
#endif
#if (USBD_USE_MSC == 1)
  USBD_MSC.Init(pdev, cfgidx);
 8005a84:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <USBD_COMPOSITE_Init+0x34>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	78fa      	ldrb	r2, [r7, #3]
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	2000009c 	.word	0x2000009c
 8005aa0:	200001bc 	.word	0x200001bc

08005aa4 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8005ab0:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <USBD_COMPOSITE_DeInit+0x30>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	78fa      	ldrb	r2, [r7, #3]
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	4798      	blx	r3
#endif
#if (USBD_USE_UVC == 1)
  USBD_VIDEO.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_MSC == 1)
  USBD_MSC.DeInit(pdev, cfgidx);
 8005abc:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <USBD_COMPOSITE_DeInit+0x34>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	78fa      	ldrb	r2, [r7, #3]
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	2000009c 	.word	0x2000009c
 8005ad8:	200001bc 	.word	0x200001bc

08005adc <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	73fb      	strb	r3, [r7, #15]
 8005aea:	e019      	b.n	8005b20 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	889b      	ldrh	r3, [r3, #4]
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	4915      	ldr	r1, [pc, #84]	; (8005b4c <USBD_COMPOSITE_Setup+0x70>)
 8005af6:	5ccb      	ldrb	r3, [r1, r3]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d007      	beq.n	8005b0c <USBD_COMPOSITE_Setup+0x30>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	889b      	ldrh	r3, [r3, #4]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	4912      	ldr	r1, [pc, #72]	; (8005b50 <USBD_COMPOSITE_Setup+0x74>)
 8005b06:	5ccb      	ldrb	r3, [r1, r3]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d106      	bne.n	8005b1a <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8005b0c:	4b11      	ldr	r3, [pc, #68]	; (8005b54 <USBD_COMPOSITE_Setup+0x78>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	4798      	blx	r3
 8005b16:	4603      	mov	r3, r0
 8005b18:	e014      	b.n	8005b44 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	73fb      	strb	r3, [r7, #15]
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0e2      	beq.n	8005aec <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_VIDEO.Setup(pdev, req);
  }
#endif
#if (USBD_USE_MSC == 1)
  if (LOBYTE(req->wIndex) == MSC_ITF_NBR)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	889b      	ldrh	r3, [r3, #4]
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <USBD_COMPOSITE_Setup+0x7c>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d106      	bne.n	8005b42 <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_MSC.Setup(pdev, req);
 8005b34:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <USBD_COMPOSITE_Setup+0x80>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	4798      	blx	r3
 8005b3e:	4603      	mov	r3, r0
 8005b40:	e000      	b.n	8005b44 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 8005b42:	2303      	movs	r3, #3
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	2000da54 	.word	0x2000da54
 8005b50:	2000dc78 	.word	0x2000dc78
 8005b54:	2000009c 	.word	0x2000009c
 8005b58:	20000370 	.word	0x20000370
 8005b5c:	200001bc 	.word	0x200001bc

08005b60 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	73fb      	strb	r3, [r7, #15]
 8005b70:	e01a      	b.n	8005ba8 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8005b72:	78fa      	ldrb	r2, [r7, #3]
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	4918      	ldr	r1, [pc, #96]	; (8005bd8 <USBD_COMPOSITE_DataIn+0x78>)
 8005b78:	5ccb      	ldrb	r3, [r1, r3]
 8005b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d007      	beq.n	8005b92 <USBD_COMPOSITE_DataIn+0x32>
 8005b82:	78fa      	ldrb	r2, [r7, #3]
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
 8005b86:	4915      	ldr	r1, [pc, #84]	; (8005bdc <USBD_COMPOSITE_DataIn+0x7c>)
 8005b88:	5ccb      	ldrb	r3, [r1, r3]
 8005b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d107      	bne.n	8005ba2 <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8005b92:	4b13      	ldr	r3, [pc, #76]	; (8005be0 <USBD_COMPOSITE_DataIn+0x80>)
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	78fa      	ldrb	r2, [r7, #3]
 8005b98:	4611      	mov	r1, r2
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	4798      	blx	r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	e015      	b.n	8005bce <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	73fb      	strb	r3, [r7, #15]
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0e1      	beq.n	8005b72 <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_VIDEO.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_MSC == 1)
  if (epnum == (MSC_IN_EP & 0x7F))
 8005bae:	78fa      	ldrb	r2, [r7, #3]
 8005bb0:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <USBD_COMPOSITE_DataIn+0x84>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d107      	bne.n	8005bcc <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_MSC.DataIn(pdev, epnum);
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <USBD_COMPOSITE_DataIn+0x88>)
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	78fa      	ldrb	r2, [r7, #3]
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	4798      	blx	r3
 8005bc8:	4603      	mov	r3, r0
 8005bca:	e000      	b.n	8005bce <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8005bcc:	2303      	movs	r3, #3
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	2000da50 	.word	0x2000da50
 8005bdc:	2000dc7c 	.word	0x2000dc7c
 8005be0:	2000009c 	.word	0x2000009c
 8005be4:	200001ba 	.word	0x200001ba
 8005be8:	200001bc 	.word	0x200001bc

08005bec <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8005bf4:	4b04      	ldr	r3, [pc, #16]	; (8005c08 <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	2000009c 	.word	0x2000009c

08005c0c <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005c78:	2300      	movs	r3, #0
 8005c7a:	73fb      	strb	r3, [r7, #15]
 8005c7c:	e010      	b.n	8005ca0 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	4a12      	ldr	r2, [pc, #72]	; (8005ccc <USBD_COMPOSITE_DataOut+0x60>)
 8005c82:	5cd3      	ldrb	r3, [r2, r3]
 8005c84:	78fa      	ldrb	r2, [r7, #3]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d107      	bne.n	8005c9a <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8005c8a:	4b11      	ldr	r3, [pc, #68]	; (8005cd0 <USBD_COMPOSITE_DataOut+0x64>)
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	78fa      	ldrb	r2, [r7, #3]
 8005c90:	4611      	mov	r1, r2
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	4798      	blx	r3
 8005c96:	4603      	mov	r3, r0
 8005c98:	e013      	b.n	8005cc2 <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	73fb      	strb	r3, [r7, #15]
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0eb      	beq.n	8005c7e <USBD_COMPOSITE_DataOut+0x12>
  }
#endif
#if (USBD_USE_UVC == 1)
#endif
#if (USBD_USE_MSC == 1)
  if (epnum == MSC_OUT_EP)
 8005ca6:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <USBD_COMPOSITE_DataOut+0x68>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	78fa      	ldrb	r2, [r7, #3]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d107      	bne.n	8005cc0 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_MSC.DataOut(pdev, epnum);
 8005cb0:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <USBD_COMPOSITE_DataOut+0x6c>)
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	78fa      	ldrb	r2, [r7, #3]
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	4798      	blx	r3
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	e000      	b.n	8005cc2 <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8005cc0:	2303      	movs	r3, #3
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	2000da4c 	.word	0x2000da4c
 8005cd0:	2000009c 	.word	0x2000009c
 8005cd4:	200001bb 	.word	0x200001bb
 8005cd8:	200001bc 	.word	0x200001bc

08005cdc <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2262      	movs	r2, #98	; 0x62
 8005ce8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8005cea:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	2000dc80 	.word	0x2000dc80

08005cfc <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2262      	movs	r2, #98	; 0x62
 8005d08:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 8005d0a:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	2000dce4 	.word	0x2000dce4

08005d1c <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2262      	movs	r2, #98	; 0x62
 8005d28:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8005d2a:	4b03      	ldr	r3, [pc, #12]	; (8005d38 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	2000dc80 	.word	0x2000dc80

08005d3c <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	220a      	movs	r2, #10
 8005d48:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8005d4a:	4b03      	ldr	r3, [pc, #12]	; (8005d58 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	200001b0 	.word	0x200001b0

08005d5c <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08a      	sub	sp, #40	; 0x28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	460b      	mov	r3, r1
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8005d6a:	4b20      	ldr	r3, [pc, #128]	; (8005dec <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	7afa      	ldrb	r2, [r7, #11]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d836      	bhi.n	8005de2 <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	f107 0318 	add.w	r3, r7, #24
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005d84:	2300      	movs	r3, #0
 8005d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d8a:	e01a      	b.n	8005dc2 <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8005d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d90:	4a17      	ldr	r2, [pc, #92]	; (8005df0 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 8005d92:	5cd3      	ldrb	r3, [r2, r3]
 8005d94:	7afa      	ldrb	r2, [r7, #11]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d10e      	bne.n	8005db8 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8005d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d9e:	f107 0014 	add.w	r0, r7, #20
 8005da2:	4a14      	ldr	r2, [pc, #80]	; (8005df4 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 8005da4:	2110      	movs	r1, #16
 8005da6:	f006 fc55 	bl	800c654 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8005daa:	f107 0314 	add.w	r3, r7, #20
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	4911      	ldr	r1, [pc, #68]	; (8005df8 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8005db2:	4618      	mov	r0, r3
 8005db4:	f003 f877 	bl	8008ea6 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d0e0      	beq.n	8005d8c <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)UVC_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_MSC == 1)
    if (index == MSC_BOT_STR_DESC_IDX)
 8005dca:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	7afa      	ldrb	r2, [r7, #11]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d104      	bne.n	8005dde <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)MSC_BOT_STR_DESC, USBD_StrDesc, length);
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	4908      	ldr	r1, [pc, #32]	; (8005df8 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8005dd8:	4809      	ldr	r0, [pc, #36]	; (8005e00 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 8005dda:	f003 f864 	bl	8008ea6 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 8005dde:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8005de0:	e000      	b.n	8005de4 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8005de2:	2300      	movs	r3, #0
  }
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3728      	adds	r7, #40	; 0x28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	200001ac 	.word	0x200001ac
 8005df0:	2000dc74 	.word	0x2000dc74
 8005df4:	0800d6d8 	.word	0x0800d6d8
 8005df8:	20000330 	.word	0x20000330
 8005dfc:	20000371 	.word	0x20000371
 8005e00:	0800d6e8 	.word	0x0800d6e8

08005e04 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8005e04:	b590      	push	{r4, r7, lr}
 8005e06:	b089      	sub	sp, #36	; 0x24
 8005e08:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 8005e12:	2381      	movs	r3, #129	; 0x81
 8005e14:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 8005e16:	2301      	movs	r3, #1
 8005e18:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	727b      	strb	r3, [r7, #9]

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8005e1e:	4b74      	ldr	r3, [pc, #464]	; (8005ff0 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8005e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e22:	1d3a      	adds	r2, r7, #4
 8005e24:	4610      	mov	r0, r2
 8005e26:	4798      	blx	r3
 8005e28:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8005e2a:	7a7b      	ldrb	r3, [r7, #9]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	b2d8      	uxtb	r0, r3
 8005e30:	7afb      	ldrb	r3, [r7, #11]
 8005e32:	3301      	adds	r3, #1
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	4a6f      	ldr	r2, [pc, #444]	; (8005ff4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005e38:	7812      	ldrb	r2, [r2, #0]
 8005e3a:	7afc      	ldrb	r4, [r7, #11]
 8005e3c:	7a79      	ldrb	r1, [r7, #9]
 8005e3e:	9202      	str	r2, [sp, #8]
 8005e40:	7aba      	ldrb	r2, [r7, #10]
 8005e42:	9201      	str	r2, [sp, #4]
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	4623      	mov	r3, r4
 8005e48:	4602      	mov	r2, r0
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f7ff fd88 	bl	8005960 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3309      	adds	r3, #9
 8005e54:	88ba      	ldrh	r2, [r7, #4]
 8005e56:	3a09      	subs	r2, #9
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4867      	ldr	r0, [pc, #412]	; (8005ff8 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 8005e5c:	f006 fae1 	bl	800c422 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8005e60:	4b63      	ldr	r3, [pc, #396]	; (8005ff0 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8005e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e64:	1d3a      	adds	r2, r7, #4
 8005e66:	4610      	mov	r0, r2
 8005e68:	4798      	blx	r3
 8005e6a:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8005e6c:	7a7b      	ldrb	r3, [r7, #9]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	b2d8      	uxtb	r0, r3
 8005e72:	7afb      	ldrb	r3, [r7, #11]
 8005e74:	3301      	adds	r3, #1
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	4a5e      	ldr	r2, [pc, #376]	; (8005ff4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005e7a:	7812      	ldrb	r2, [r2, #0]
 8005e7c:	7afc      	ldrb	r4, [r7, #11]
 8005e7e:	7a79      	ldrb	r1, [r7, #9]
 8005e80:	9202      	str	r2, [sp, #8]
 8005e82:	7aba      	ldrb	r2, [r7, #10]
 8005e84:	9201      	str	r2, [sp, #4]
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	4623      	mov	r3, r4
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f7ff fd67 	bl	8005960 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3309      	adds	r3, #9
 8005e96:	88ba      	ldrh	r2, [r7, #4]
 8005e98:	3a09      	subs	r2, #9
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4857      	ldr	r0, [pc, #348]	; (8005ffc <USBD_COMPOSITE_Mount_Class+0x1f8>)
 8005e9e:	f006 fac0 	bl	800c422 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 8005ea2:	7afb      	ldrb	r3, [r7, #11]
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 8005ea8:	7abb      	ldrb	r3, [r7, #10]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 8005eae:	7a7b      	ldrb	r3, [r7, #9]
 8005eb0:	3302      	adds	r3, #2
 8005eb2:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 8005eb4:	4b4f      	ldr	r3, [pc, #316]	; (8005ff4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	4b4d      	ldr	r3, [pc, #308]	; (8005ff4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005ebe:	701a      	strb	r2, [r3, #0]
  in_ep_track += 1;
  interface_no_track += 2;
  USBD_Track_String_Index += 1;
#endif
#if (USBD_USE_MSC == 1)
  ptr = USBD_MSC.GetFSConfigDescriptor(&len);
 8005ec0:	4b4f      	ldr	r3, [pc, #316]	; (8006000 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	1d3a      	adds	r2, r7, #4
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	4798      	blx	r3
 8005eca:	60f8      	str	r0, [r7, #12]
  USBD_Update_MSC_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005ecc:	4b49      	ldr	r3, [pc, #292]	; (8005ff4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	7ab8      	ldrb	r0, [r7, #10]
 8005ed2:	7afa      	ldrb	r2, [r7, #11]
 8005ed4:	7a79      	ldrb	r1, [r7, #9]
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	4603      	mov	r3, r0
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 fac0 	bl	8006460 <USBD_Update_MSC_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_MSC_DESC, ptr + 0x09, len - 0x09);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3309      	adds	r3, #9
 8005ee4:	88ba      	ldrh	r2, [r7, #4]
 8005ee6:	3a09      	subs	r2, #9
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4846      	ldr	r0, [pc, #280]	; (8006004 <USBD_COMPOSITE_Mount_Class+0x200>)
 8005eec:	f006 fa99 	bl	800c422 <memcpy>

  ptr = USBD_MSC.GetHSConfigDescriptor(&len);
 8005ef0:	4b43      	ldr	r3, [pc, #268]	; (8006000 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	1d3a      	adds	r2, r7, #4
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	4798      	blx	r3
 8005efa:	60f8      	str	r0, [r7, #12]
  USBD_Update_MSC_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005efc:	4b3d      	ldr	r3, [pc, #244]	; (8005ff4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	7ab8      	ldrb	r0, [r7, #10]
 8005f02:	7afa      	ldrb	r2, [r7, #11]
 8005f04:	7a79      	ldrb	r1, [r7, #9]
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	4603      	mov	r3, r0
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 faa8 	bl	8006460 <USBD_Update_MSC_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_MSC_DESC, ptr + 0x09, len - 0x09);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3309      	adds	r3, #9
 8005f14:	88ba      	ldrh	r2, [r7, #4]
 8005f16:	3a09      	subs	r2, #9
 8005f18:	4619      	mov	r1, r3
 8005f1a:	483b      	ldr	r0, [pc, #236]	; (8006008 <USBD_COMPOSITE_Mount_Class+0x204>)
 8005f1c:	f006 fa81 	bl	800c422 <memcpy>
  in_ep_track += 1;
 8005f20:	7afb      	ldrb	r3, [r7, #11]
 8005f22:	3301      	adds	r3, #1
 8005f24:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 8005f26:	7abb      	ldrb	r3, [r7, #10]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 8005f2c:	7a7b      	ldrb	r3, [r7, #9]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8005f32:	4b30      	ldr	r3, [pc, #192]	; (8005ff4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	3301      	adds	r3, #1
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	4b2e      	ldr	r3, [pc, #184]	; (8005ff4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005f3c:	701a      	strb	r2, [r3, #0]
  out_ep_track += 1;
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 8005f3e:	2362      	movs	r3, #98	; 0x62
 8005f40:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 8005f42:	4b32      	ldr	r3, [pc, #200]	; (800600c <USBD_COMPOSITE_Mount_Class+0x208>)
 8005f44:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2209      	movs	r2, #9
 8005f4a:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	2202      	movs	r2, #2
 8005f52:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3302      	adds	r3, #2
 8005f58:	88fa      	ldrh	r2, [r7, #6]
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8005f5e:	88fb      	ldrh	r3, [r7, #6]
 8005f60:	0a1b      	lsrs	r3, r3, #8
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3303      	adds	r3, #3
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	7a7a      	ldrb	r2, [r7, #9]
 8005f72:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3305      	adds	r3, #5
 8005f78:	2201      	movs	r2, #1
 8005f7a:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3306      	adds	r3, #6
 8005f80:	2200      	movs	r2, #0
 8005f82:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3307      	adds	r3, #7
 8005f88:	22c0      	movs	r2, #192	; 0xc0
 8005f8a:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3308      	adds	r3, #8
 8005f90:	2232      	movs	r2, #50	; 0x32
 8005f92:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 8005f94:	4b1e      	ldr	r3, [pc, #120]	; (8006010 <USBD_COMPOSITE_Mount_Class+0x20c>)
 8005f96:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2209      	movs	r2, #9
 8005f9c:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3302      	adds	r3, #2
 8005faa:	88fa      	ldrh	r2, [r7, #6]
 8005fac:	b2d2      	uxtb	r2, r2
 8005fae:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	0a1b      	lsrs	r3, r3, #8
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3303      	adds	r3, #3
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	7a7a      	ldrb	r2, [r7, #9]
 8005fc4:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3305      	adds	r3, #5
 8005fca:	2201      	movs	r2, #1
 8005fcc:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3306      	adds	r3, #6
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3307      	adds	r3, #7
 8005fda:	22c0      	movs	r2, #192	; 0xc0
 8005fdc:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	3308      	adds	r3, #8
 8005fe2:	2232      	movs	r2, #50	; 0x32
 8005fe4:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8005fe6:	bf00      	nop
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd90      	pop	{r4, r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	2000009c 	.word	0x2000009c
 8005ff4:	200001ac 	.word	0x200001ac
 8005ff8:	2000dced 	.word	0x2000dced
 8005ffc:	2000dc89 	.word	0x2000dc89
 8006000:	200001bc 	.word	0x200001bc
 8006004:	2000dd2f 	.word	0x2000dd2f
 8006008:	2000dccb 	.word	0x2000dccb
 800600c:	2000dc80 	.word	0x2000dc80
 8006010:	2000dce4 	.word	0x2000dce4

08006014 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = &USBD_MSC_Instance;
 8006020:	4b37      	ldr	r3, [pc, #220]	; (8006100 <USBD_MSC_Init+0xec>)
 8006022:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d105      	bne.n	8006036 <USBD_MSC_Init+0x22>
  {
    pdev->pClassData_MSC = NULL;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
    return (uint8_t)USBD_EMEM;
 8006032:	2302      	movs	r3, #2
 8006034:	e060      	b.n	80060f8 <USBD_MSC_Init+0xe4>
  }

  pdev->pClassData_MSC = (void *)hmsc;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	7c1b      	ldrb	r3, [r3, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d12b      	bne.n	800609e <USBD_MSC_Init+0x8a>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006046:	4b2f      	ldr	r3, [pc, #188]	; (8006104 <USBD_MSC_Init+0xf0>)
 8006048:	7819      	ldrb	r1, [r3, #0]
 800604a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800604e:	2202      	movs	r2, #2
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f003 f972 	bl	800933a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 8006056:	4b2b      	ldr	r3, [pc, #172]	; (8006104 <USBD_MSC_Init+0xf0>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	f003 020f 	and.w	r2, r3, #15
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	4613      	mov	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	440b      	add	r3, r1
 800606a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800606e:	2201      	movs	r2, #1
 8006070:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006072:	4b25      	ldr	r3, [pc, #148]	; (8006108 <USBD_MSC_Init+0xf4>)
 8006074:	7819      	ldrb	r1, [r3, #0]
 8006076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800607a:	2202      	movs	r2, #2
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f003 f95c 	bl	800933a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 8006082:	4b21      	ldr	r3, [pc, #132]	; (8006108 <USBD_MSC_Init+0xf4>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	f003 020f 	and.w	r2, r3, #15
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	440b      	add	r3, r1
 8006096:	3324      	adds	r3, #36	; 0x24
 8006098:	2201      	movs	r2, #1
 800609a:	801a      	strh	r2, [r3, #0]
 800609c:	e028      	b.n	80060f0 <USBD_MSC_Init+0xdc>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800609e:	4b19      	ldr	r3, [pc, #100]	; (8006104 <USBD_MSC_Init+0xf0>)
 80060a0:	7819      	ldrb	r1, [r3, #0]
 80060a2:	2340      	movs	r3, #64	; 0x40
 80060a4:	2202      	movs	r2, #2
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f003 f947 	bl	800933a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 80060ac:	4b15      	ldr	r3, [pc, #84]	; (8006104 <USBD_MSC_Init+0xf0>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	f003 020f 	and.w	r2, r3, #15
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	4613      	mov	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	440b      	add	r3, r1
 80060c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060c4:	2201      	movs	r2, #1
 80060c6:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80060c8:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <USBD_MSC_Init+0xf4>)
 80060ca:	7819      	ldrb	r1, [r3, #0]
 80060cc:	2340      	movs	r3, #64	; 0x40
 80060ce:	2202      	movs	r2, #2
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f003 f932 	bl	800933a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 80060d6:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <USBD_MSC_Init+0xf4>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	f003 020f 	and.w	r2, r3, #15
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	440b      	add	r3, r1
 80060ea:	3324      	adds	r3, #36	; 0x24
 80060ec:	2201      	movs	r2, #1
 80060ee:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f9ed 	bl	80064d0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	20000374 	.word	0x20000374
 8006104:	200001bb 	.word	0x200001bb
 8006108:	200001ba 	.word	0x200001ba

0800610c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_OUT_EP);
 8006118:	4b1b      	ldr	r3, [pc, #108]	; (8006188 <USBD_MSC_DeInit+0x7c>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f003 f931 	bl	8009386 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 0U;
 8006124:	4b18      	ldr	r3, [pc, #96]	; (8006188 <USBD_MSC_DeInit+0x7c>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	f003 020f 	and.w	r2, r3, #15
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	440b      	add	r3, r1
 8006138:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800613c:	2200      	movs	r2, #0
 800613e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_IN_EP);
 8006140:	4b12      	ldr	r3, [pc, #72]	; (800618c <USBD_MSC_DeInit+0x80>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	4619      	mov	r1, r3
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f003 f91d 	bl	8009386 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 0U;
 800614c:	4b0f      	ldr	r3, [pc, #60]	; (800618c <USBD_MSC_DeInit+0x80>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	f003 020f 	and.w	r2, r3, #15
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	3324      	adds	r3, #36	; 0x24
 8006162:	2200      	movs	r2, #0
 8006164:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassData_MSC != NULL)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800616c:	2b00      	cmp	r3, #0
 800616e:	d006      	beq.n	800617e <USBD_MSC_DeInit+0x72>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fa1f 	bl	80065b4 <MSC_BOT_DeInit>
#if (0)
    (void)USBD_free(pdev->pClassData_MSC);
#endif
    pdev->pClassData_MSC = NULL;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
  }

  return (uint8_t)USBD_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	200001bb 	.word	0x200001bb
 800618c:	200001ba 	.word	0x200001ba

08006190 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80061a0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e0db      	b.n	800636c <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d04e      	beq.n	800625e <USBD_MSC_Setup+0xce>
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	f040 80cb 	bne.w	800635c <USBD_MSC_Setup+0x1cc>
  {
  /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	785b      	ldrb	r3, [r3, #1]
 80061ca:	2bfe      	cmp	r3, #254	; 0xfe
 80061cc:	d002      	beq.n	80061d4 <USBD_MSC_Setup+0x44>
 80061ce:	2bff      	cmp	r3, #255	; 0xff
 80061d0:	d025      	beq.n	800621e <USBD_MSC_Setup+0x8e>
 80061d2:	e03c      	b.n	800624e <USBD_MSC_Setup+0xbe>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue == 0U) && (req->wLength == 1U) &&
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	885b      	ldrh	r3, [r3, #2]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d119      	bne.n	8006210 <USBD_MSC_Setup+0x80>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	88db      	ldrh	r3, [r3, #6]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d115      	bne.n	8006210 <USBD_MSC_Setup+0x80>
          ((req->bmRequest & 0x80U) == 0x80U))
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	b25b      	sxtb	r3, r3
      if ((req->wValue == 0U) && (req->wLength == 1U) &&
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	da10      	bge.n	8006210 <USBD_MSC_Setup+0x80>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetMaxLun();
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	4798      	blx	r3
 80061f8:	4603      	mov	r3, r0
 80061fa:	461a      	mov	r2, r3
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2201      	movs	r2, #1
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f002 fead 	bl	8008f66 <USBD_CtlSendData>
 800620c:	bf00      	nop
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800620e:	e025      	b.n	800625c <USBD_MSC_Setup+0xcc>
        USBD_CtlError(pdev, req);
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f002 fe36 	bl	8008e84 <USBD_CtlError>
        ret = USBD_FAIL;
 8006218:	2303      	movs	r3, #3
 800621a:	75fb      	strb	r3, [r7, #23]
      break;
 800621c:	e01e      	b.n	800625c <USBD_MSC_Setup+0xcc>

    case BOT_RESET:
      if ((req->wValue == 0U) && (req->wLength == 0U) &&
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	885b      	ldrh	r3, [r3, #2]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10c      	bne.n	8006240 <USBD_MSC_Setup+0xb0>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	88db      	ldrh	r3, [r3, #6]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d108      	bne.n	8006240 <USBD_MSC_Setup+0xb0>
          ((req->bmRequest & 0x80U) != 0x80U))
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	b25b      	sxtb	r3, r3
      if ((req->wValue == 0U) && (req->wLength == 0U) &&
 8006234:	2b00      	cmp	r3, #0
 8006236:	db03      	blt.n	8006240 <USBD_MSC_Setup+0xb0>
      {
        MSC_BOT_Reset(pdev);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f98b 	bl	8006554 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800623e:	e00d      	b.n	800625c <USBD_MSC_Setup+0xcc>
        USBD_CtlError(pdev, req);
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f002 fe1e 	bl	8008e84 <USBD_CtlError>
        ret = USBD_FAIL;
 8006248:	2303      	movs	r3, #3
 800624a:	75fb      	strb	r3, [r7, #23]
      break;
 800624c:	e006      	b.n	800625c <USBD_MSC_Setup+0xcc>

    default:
      USBD_CtlError(pdev, req);
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f002 fe17 	bl	8008e84 <USBD_CtlError>
      ret = USBD_FAIL;
 8006256:	2303      	movs	r3, #3
 8006258:	75fb      	strb	r3, [r7, #23]
      break;
 800625a:	bf00      	nop
    }
    break;
 800625c:	e085      	b.n	800636a <USBD_MSC_Setup+0x1da>
  /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	785b      	ldrb	r3, [r3, #1]
 8006262:	2b0b      	cmp	r3, #11
 8006264:	d871      	bhi.n	800634a <USBD_MSC_Setup+0x1ba>
 8006266:	a201      	add	r2, pc, #4	; (adr r2, 800626c <USBD_MSC_Setup+0xdc>)
 8006268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626c:	0800629d 	.word	0x0800629d
 8006270:	08006319 	.word	0x08006319
 8006274:	0800634b 	.word	0x0800634b
 8006278:	0800634b 	.word	0x0800634b
 800627c:	0800634b 	.word	0x0800634b
 8006280:	0800634b 	.word	0x0800634b
 8006284:	0800634b 	.word	0x0800634b
 8006288:	0800634b 	.word	0x0800634b
 800628c:	0800634b 	.word	0x0800634b
 8006290:	0800634b 	.word	0x0800634b
 8006294:	080062c7 	.word	0x080062c7
 8006298:	080062f1 	.word	0x080062f1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b03      	cmp	r3, #3
 80062a6:	d107      	bne.n	80062b8 <USBD_MSC_Setup+0x128>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062a8:	f107 030e 	add.w	r3, r7, #14
 80062ac:	2202      	movs	r2, #2
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f002 fe58 	bl	8008f66 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80062b6:	e050      	b.n	800635a <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f002 fde2 	bl	8008e84 <USBD_CtlError>
        ret = USBD_FAIL;
 80062c0:	2303      	movs	r3, #3
 80062c2:	75fb      	strb	r3, [r7, #23]
      break;
 80062c4:	e049      	b.n	800635a <USBD_MSC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d107      	bne.n	80062e2 <USBD_MSC_Setup+0x152>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	3304      	adds	r3, #4
 80062d6:	2201      	movs	r2, #1
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f002 fe43 	bl	8008f66 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80062e0:	e03b      	b.n	800635a <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f002 fdcd 	bl	8008e84 <USBD_CtlError>
        ret = USBD_FAIL;
 80062ea:	2303      	movs	r3, #3
 80062ec:	75fb      	strb	r3, [r7, #23]
      break;
 80062ee:	e034      	b.n	800635a <USBD_MSC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d106      	bne.n	800630a <USBD_MSC_Setup+0x17a>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	885b      	ldrh	r3, [r3, #2]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	461a      	mov	r2, r3
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006308:	e027      	b.n	800635a <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f002 fdb9 	bl	8008e84 <USBD_CtlError>
        ret = USBD_FAIL;
 8006312:	2303      	movs	r3, #3
 8006314:	75fb      	strb	r3, [r7, #23]
      break;
 8006316:	e020      	b.n	800635a <USBD_MSC_Setup+0x1ca>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b03      	cmp	r3, #3
 8006322:	d119      	bne.n	8006358 <USBD_MSC_Setup+0x1c8>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	885b      	ldrh	r3, [r3, #2]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d115      	bne.n	8006358 <USBD_MSC_Setup+0x1c8>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	889b      	ldrh	r3, [r3, #4]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f003 f845 	bl	80093c4 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	889b      	ldrh	r3, [r3, #4]
 800633e:	b2db      	uxtb	r3, r3
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fae6 	bl	8006914 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8006348:	e006      	b.n	8006358 <USBD_MSC_Setup+0x1c8>

    default:
      USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f002 fd99 	bl	8008e84 <USBD_CtlError>
      ret = USBD_FAIL;
 8006352:	2303      	movs	r3, #3
 8006354:	75fb      	strb	r3, [r7, #23]
      break;
 8006356:	e000      	b.n	800635a <USBD_MSC_Setup+0x1ca>
      break;
 8006358:	bf00      	nop
    }
    break;
 800635a:	e006      	b.n	800636a <USBD_MSC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f002 fd90 	bl	8008e84 <USBD_CtlError>
    ret = USBD_FAIL;
 8006364:	2303      	movs	r3, #3
 8006366:	75fb      	strb	r3, [r7, #23]
    break;
 8006368:	bf00      	nop
  }

  return (uint8_t)ret;
 800636a:	7dfb      	ldrb	r3, [r7, #23]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f929 	bl	80065dc <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f94f 	bl	8006648 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80063c2:	4b03      	ldr	r3, [pc, #12]	; (80063d0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	200001f8 	.word	0x200001f8

080063d4 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80063e2:	4b03      	ldr	r3, [pc, #12]	; (80063f0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	20000218 	.word	0x20000218

080063f4 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006402:	4b03      	ldr	r3, [pc, #12]	; (8006410 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006404:	4618      	mov	r0, r3
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	20000238 	.word	0x20000238

08006414 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	220a      	movs	r2, #10
 8006420:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006422:	4b03      	ldr	r3, [pc, #12]	; (8006430 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	20000258 	.word	0x20000258

08006434 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006444:	2303      	movs	r3, #3
 8006446:	e004      	b.n	8006452 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData_MSC = fops;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

  return (uint8_t)USBD_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
	...

08006460 <USBD_Update_MSC_DESC>:

void USBD_Update_MSC_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	4608      	mov	r0, r1
 800646a:	4611      	mov	r1, r2
 800646c:	461a      	mov	r2, r3
 800646e:	4603      	mov	r3, r0
 8006470:	70fb      	strb	r3, [r7, #3]
 8006472:	460b      	mov	r3, r1
 8006474:	70bb      	strb	r3, [r7, #2]
 8006476:	4613      	mov	r3, r2
 8006478:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	330b      	adds	r3, #11
 800647e:	78fa      	ldrb	r2, [r7, #3]
 8006480:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3311      	adds	r3, #17
 8006486:	7c3a      	ldrb	r2, [r7, #16]
 8006488:	701a      	strb	r2, [r3, #0]
  desc[20] = in_ep;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3314      	adds	r3, #20
 800648e:	78ba      	ldrb	r2, [r7, #2]
 8006490:	701a      	strb	r2, [r3, #0]
  desc[27] = out_ep;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	331b      	adds	r3, #27
 8006496:	787a      	ldrb	r2, [r7, #1]
 8006498:	701a      	strb	r2, [r3, #0]

  MSC_IN_EP = in_ep;
 800649a:	4a09      	ldr	r2, [pc, #36]	; (80064c0 <USBD_Update_MSC_DESC+0x60>)
 800649c:	78bb      	ldrb	r3, [r7, #2]
 800649e:	7013      	strb	r3, [r2, #0]
  MSC_OUT_EP = out_ep;
 80064a0:	4a08      	ldr	r2, [pc, #32]	; (80064c4 <USBD_Update_MSC_DESC+0x64>)
 80064a2:	787b      	ldrb	r3, [r7, #1]
 80064a4:	7013      	strb	r3, [r2, #0]
  MSC_ITF_NBR = itf_no;
 80064a6:	4a08      	ldr	r2, [pc, #32]	; (80064c8 <USBD_Update_MSC_DESC+0x68>)
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	7013      	strb	r3, [r2, #0]
  MSC_BOT_STR_DESC_IDX = str_idx;
 80064ac:	4a07      	ldr	r2, [pc, #28]	; (80064cc <USBD_Update_MSC_DESC+0x6c>)
 80064ae:	7c3b      	ldrb	r3, [r7, #16]
 80064b0:	7013      	strb	r3, [r2, #0]
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	200001ba 	.word	0x200001ba
 80064c4:	200001bb 	.word	0x200001bb
 80064c8:	20000370 	.word	0x20000370
 80064cc:	20000371 	.word	0x20000371

080064d0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80064de:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d02d      	beq.n	8006542 <MSC_BOT_Init+0x72>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Init(0U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2000      	movs	r0, #0
 8006514:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_OUT_EP);
 8006516:	4b0d      	ldr	r3, [pc, #52]	; (800654c <MSC_BOT_Init+0x7c>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f002 ff51 	bl	80093c4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_IN_EP);
 8006522:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <MSC_BOT_Init+0x80>)
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f002 ff4b 	bl	80093c4 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 800652e:	4b07      	ldr	r3, [pc, #28]	; (800654c <MSC_BOT_Init+0x7c>)
 8006530:	7819      	ldrb	r1, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006538:	231f      	movs	r3, #31
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f003 f80b 	bl	8009556 <USBD_LL_PrepareReceive>
 8006540:	e000      	b.n	8006544 <MSC_BOT_Init+0x74>
    return;
 8006542:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	200001bb 	.word	0x200001bb
 8006550:	200001ba 	.word	0x200001ba

08006554 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006562:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d01b      	beq.n	80065a2 <MSC_BOT_Reset+0x4e>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_IN_EP);
 8006576:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <MSC_BOT_Reset+0x58>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f002 ff5f 	bl	8009440 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_OUT_EP);
 8006582:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <MSC_BOT_Reset+0x5c>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f002 ff59 	bl	8009440 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 800658e:	4b08      	ldr	r3, [pc, #32]	; (80065b0 <MSC_BOT_Reset+0x5c>)
 8006590:	7819      	ldrb	r1, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006598:	231f      	movs	r3, #31
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f002 ffdb 	bl	8009556 <USBD_LL_PrepareReceive>
 80065a0:	e000      	b.n	80065a4 <MSC_BOT_Reset+0x50>
    return;
 80065a2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	200001ba 	.word	0x200001ba
 80065b0:	200001bb 	.word	0x200001bb

080065b4 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80065c2:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	721a      	strb	r2, [r3, #8]
  }
}
 80065d0:	bf00      	nop
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80065ee:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d020      	beq.n	8006638 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	7a1b      	ldrb	r3, [r3, #8]
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d005      	beq.n	800660a <MSC_BOT_DataIn+0x2e>
 80065fe:	2b02      	cmp	r3, #2
 8006600:	db1c      	blt.n	800663c <MSC_BOT_DataIn+0x60>
 8006602:	3b03      	subs	r3, #3
 8006604:	2b01      	cmp	r3, #1
 8006606:	d819      	bhi.n	800663c <MSC_BOT_DataIn+0x60>
 8006608:	e011      	b.n	800662e <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006616:	461a      	mov	r2, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f9b1 	bl	8006980 <SCSI_ProcessCmd>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	da0d      	bge.n	8006640 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006624:	2101      	movs	r1, #1
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f900 	bl	800682c <MSC_BOT_SendCSW>
      }
      break;
 800662c:	e008      	b.n	8006640 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800662e:	2100      	movs	r1, #0
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f8fb 	bl	800682c <MSC_BOT_SendCSW>
      break;
 8006636:	e004      	b.n	8006642 <MSC_BOT_DataIn+0x66>
    return;
 8006638:	bf00      	nop
 800663a:	e002      	b.n	8006642 <MSC_BOT_DataIn+0x66>

    default:
      break;
 800663c:	bf00      	nop
 800663e:	e000      	b.n	8006642 <MSC_BOT_DataIn+0x66>
      break;
 8006640:	bf00      	nop
  }
}
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800665a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d01c      	beq.n	800669c <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	7a1b      	ldrb	r3, [r3, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <MSC_BOT_DataOut+0x28>
 800666a:	2b01      	cmp	r3, #1
 800666c:	d004      	beq.n	8006678 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800666e:	e018      	b.n	80066a2 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f819 	bl	80066a8 <MSC_BOT_CBW_Decode>
      break;
 8006676:	e014      	b.n	80066a2 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006684:	461a      	mov	r2, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f97a 	bl	8006980 <SCSI_ProcessCmd>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	da06      	bge.n	80066a0 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006692:	2101      	movs	r1, #1
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f8c9 	bl	800682c <MSC_BOT_SendCSW>
      break;
 800669a:	e001      	b.n	80066a0 <MSC_BOT_DataOut+0x58>
    return;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <MSC_BOT_DataOut+0x5a>
      break;
 80066a0:	bf00      	nop
  }
}
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80066b6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d079      	beq.n	80067b2 <MSC_BOT_CBW_Decode+0x10a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 80066d6:	4b3a      	ldr	r3, [pc, #232]	; (80067c0 <MSC_BOT_CBW_Decode+0x118>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	4619      	mov	r1, r3
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f002 ff5b 	bl	8009598 <USBD_LL_GetRxDataSize>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b1f      	cmp	r3, #31
 80066e6:	d114      	bne.n	8006712 <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 80066ee:	4a35      	ldr	r2, [pc, #212]	; (80067c4 <MSC_BOT_CBW_Decode+0x11c>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d10e      	bne.n	8006712 <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d809      	bhi.n	8006712 <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8006704:	2b00      	cmp	r3, #0
 8006706:	d004      	beq.n	8006712 <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bCBLength > 16U))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800670e:	2b10      	cmp	r3, #16
 8006710:	d90e      	bls.n	8006730 <MSC_BOT_CBW_Decode+0x88>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006718:	2320      	movs	r3, #32
 800671a:	2205      	movs	r2, #5
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fdda 	bl	80072d6 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2202      	movs	r2, #2
 8006726:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f8b5 	bl	8006898 <MSC_BOT_Abort>
 800672e:	e043      	b.n	80067b8 <MSC_BOT_CBW_Decode+0x110>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800673c:	461a      	mov	r2, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f91e 	bl	8006980 <SCSI_ProcessCmd>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	da0c      	bge.n	8006764 <MSC_BOT_CBW_Decode+0xbc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	7a1b      	ldrb	r3, [r3, #8]
 800674e:	2b05      	cmp	r3, #5
 8006750:	d104      	bne.n	800675c <MSC_BOT_CBW_Decode+0xb4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006752:	2101      	movs	r1, #1
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f869 	bl	800682c <MSC_BOT_SendCSW>
 800675a:	e02d      	b.n	80067b8 <MSC_BOT_CBW_Decode+0x110>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f89b 	bl	8006898 <MSC_BOT_Abort>
 8006762:	e029      	b.n	80067b8 <MSC_BOT_CBW_Decode+0x110>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	7a1b      	ldrb	r3, [r3, #8]
 8006768:	2b02      	cmp	r3, #2
 800676a:	d024      	beq.n	80067b6 <MSC_BOT_CBW_Decode+0x10e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006770:	2b01      	cmp	r3, #1
 8006772:	d020      	beq.n	80067b6 <MSC_BOT_CBW_Decode+0x10e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006778:	2b03      	cmp	r3, #3
 800677a:	d01c      	beq.n	80067b6 <MSC_BOT_CBW_Decode+0x10e>
    {
      if (hmsc->bot_data_length > 0U)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d009      	beq.n	8006798 <MSC_BOT_CBW_Decode+0xf0>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f103 0110 	add.w	r1, r3, #16
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	461a      	mov	r2, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f819 	bl	80067c8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006796:	e00f      	b.n	80067b8 <MSC_BOT_CBW_Decode+0x110>
      }
      else if (hmsc->bot_data_length == 0U)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <MSC_BOT_CBW_Decode+0x102>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80067a0:	2100      	movs	r1, #0
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f842 	bl	800682c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80067a8:	e006      	b.n	80067b8 <MSC_BOT_CBW_Decode+0x110>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f874 	bl	8006898 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80067b0:	e002      	b.n	80067b8 <MSC_BOT_CBW_Decode+0x110>
    return;
 80067b2:	bf00      	nop
 80067b4:	e000      	b.n	80067b8 <MSC_BOT_CBW_Decode+0x110>
      }
    }
    else
    {
      return;
 80067b6:	bf00      	nop
    }
  }
}
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	200001bb 	.word	0x200001bb
 80067c4:	43425355 	.word	0x43425355

080067c8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80067da:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	4293      	cmp	r3, r2
 80067e6:	bf28      	it	cs
 80067e8:	4613      	movcs	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d016      	beq.n	8006820 <MSC_BOT_SendData+0x58>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	1ad2      	subs	r2, r2, r3
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2204      	movs	r2, #4
 800680e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, pbuf, length);
 8006810:	4b05      	ldr	r3, [pc, #20]	; (8006828 <MSC_BOT_SendData+0x60>)
 8006812:	7819      	ldrb	r1, [r3, #0]
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f002 fe7b 	bl	8009514 <USBD_LL_Transmit>
 800681e:	e000      	b.n	8006822 <MSC_BOT_SendData+0x5a>
    return;
 8006820:	bf00      	nop
}
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	200001ba 	.word	0x200001ba

0800682c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800683e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d01d      	beq.n	8006882 <MSC_BOT_SendCSW+0x56>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4a10      	ldr	r2, [pc, #64]	; (800688c <MSC_BOT_SendCSW+0x60>)
 800684a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	78fa      	ldrb	r2, [r7, #3]
 8006852:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, (uint8_t *)&hmsc->csw,
 800685c:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <MSC_BOT_SendCSW+0x64>)
 800685e:	7819      	ldrb	r1, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8006866:	230d      	movs	r3, #13
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f002 fe53 	bl	8009514 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 800686e:	4b09      	ldr	r3, [pc, #36]	; (8006894 <MSC_BOT_SendCSW+0x68>)
 8006870:	7819      	ldrb	r1, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006878:	231f      	movs	r3, #31
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f002 fe6b 	bl	8009556 <USBD_LL_PrepareReceive>
 8006880:	e000      	b.n	8006884 <MSC_BOT_SendCSW+0x58>
    return;
 8006882:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	53425355 	.word	0x53425355
 8006890:	200001ba 	.word	0x200001ba
 8006894:	200001bb 	.word	0x200001bb

08006898 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80068a6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d02a      	beq.n	8006904 <MSC_BOT_Abort+0x6c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10e      	bne.n	80068d6 <MSC_BOT_Abort+0x3e>
      (hmsc->cbw.dDataLength != 0U) &&
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d009      	beq.n	80068d6 <MSC_BOT_Abort+0x3e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d105      	bne.n	80068d6 <MSC_BOT_Abort+0x3e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 80068ca:	4b10      	ldr	r3, [pc, #64]	; (800690c <MSC_BOT_Abort+0x74>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	4619      	mov	r1, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f002 fd96 	bl	8009402 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 80068d6:	4b0e      	ldr	r3, [pc, #56]	; (8006910 <MSC_BOT_Abort+0x78>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f002 fd90 	bl	8009402 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	7a5b      	ldrb	r3, [r3, #9]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d10d      	bne.n	8006906 <MSC_BOT_Abort+0x6e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 80068ea:	4b09      	ldr	r3, [pc, #36]	; (8006910 <MSC_BOT_Abort+0x78>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f002 fd86 	bl	8009402 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 80068f6:	4b05      	ldr	r3, [pc, #20]	; (800690c <MSC_BOT_Abort+0x74>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f002 fd80 	bl	8009402 <USBD_LL_StallEP>
 8006902:	e000      	b.n	8006906 <MSC_BOT_Abort+0x6e>
    return;
 8006904:	bf00      	nop
  }
}
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	200001bb 	.word	0x200001bb
 8006910:	200001ba 	.word	0x200001ba

08006914 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006926:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01d      	beq.n	800696a <MSC_BOT_CplClrFeature+0x56>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	7a5b      	ldrb	r3, [r3, #9]
 8006932:	2b02      	cmp	r3, #2
 8006934:	d10c      	bne.n	8006950 <MSC_BOT_CplClrFeature+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 8006936:	4b10      	ldr	r3, [pc, #64]	; (8006978 <MSC_BOT_CplClrFeature+0x64>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f002 fd60 	bl	8009402 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 8006942:	4b0e      	ldr	r3, [pc, #56]	; (800697c <MSC_BOT_CplClrFeature+0x68>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f002 fd5a 	bl	8009402 <USBD_LL_StallEP>
 800694e:	e00f      	b.n	8006970 <MSC_BOT_CplClrFeature+0x5c>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006954:	2b00      	cmp	r3, #0
 8006956:	da0a      	bge.n	800696e <MSC_BOT_CplClrFeature+0x5a>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	7a5b      	ldrb	r3, [r3, #9]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d006      	beq.n	800696e <MSC_BOT_CplClrFeature+0x5a>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006960:	2101      	movs	r1, #1
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7ff ff62 	bl	800682c <MSC_BOT_SendCSW>
 8006968:	e002      	b.n	8006970 <MSC_BOT_CplClrFeature+0x5c>
    return;
 800696a:	bf00      	nop
 800696c:	e000      	b.n	8006970 <MSC_BOT_CplClrFeature+0x5c>
  }
  else
  {
    return;
 800696e:	bf00      	nop
  }
}
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	200001ba 	.word	0x200001ba
 800697c:	200001bb 	.word	0x200001bb

08006980 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	460b      	mov	r3, r1
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006994:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d102      	bne.n	80069a2 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 800699c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069a0:	e168      	b.n	8006c74 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	2baa      	cmp	r3, #170	; 0xaa
 80069a8:	f000 8144 	beq.w	8006c34 <SCSI_ProcessCmd+0x2b4>
 80069ac:	2baa      	cmp	r3, #170	; 0xaa
 80069ae:	f300 8153 	bgt.w	8006c58 <SCSI_ProcessCmd+0x2d8>
 80069b2:	2ba8      	cmp	r3, #168	; 0xa8
 80069b4:	f000 812c 	beq.w	8006c10 <SCSI_ProcessCmd+0x290>
 80069b8:	2ba8      	cmp	r3, #168	; 0xa8
 80069ba:	f300 814d 	bgt.w	8006c58 <SCSI_ProcessCmd+0x2d8>
 80069be:	2b5a      	cmp	r3, #90	; 0x5a
 80069c0:	f300 80c0 	bgt.w	8006b44 <SCSI_ProcessCmd+0x1c4>
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f2c0 8147 	blt.w	8006c58 <SCSI_ProcessCmd+0x2d8>
 80069ca:	2b5a      	cmp	r3, #90	; 0x5a
 80069cc:	f200 8144 	bhi.w	8006c58 <SCSI_ProcessCmd+0x2d8>
 80069d0:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <SCSI_ProcessCmd+0x58>)
 80069d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d6:	bf00      	nop
 80069d8:	08006b4b 	.word	0x08006b4b
 80069dc:	08006c59 	.word	0x08006c59
 80069e0:	08006c59 	.word	0x08006c59
 80069e4:	08006b5d 	.word	0x08006b5d
 80069e8:	08006c59 	.word	0x08006c59
 80069ec:	08006c59 	.word	0x08006c59
 80069f0:	08006c59 	.word	0x08006c59
 80069f4:	08006c59 	.word	0x08006c59
 80069f8:	08006c59 	.word	0x08006c59
 80069fc:	08006c59 	.word	0x08006c59
 8006a00:	08006c59 	.word	0x08006c59
 8006a04:	08006c59 	.word	0x08006c59
 8006a08:	08006c59 	.word	0x08006c59
 8006a0c:	08006c59 	.word	0x08006c59
 8006a10:	08006c59 	.word	0x08006c59
 8006a14:	08006c59 	.word	0x08006c59
 8006a18:	08006c59 	.word	0x08006c59
 8006a1c:	08006c59 	.word	0x08006c59
 8006a20:	08006b6f 	.word	0x08006b6f
 8006a24:	08006c59 	.word	0x08006c59
 8006a28:	08006c59 	.word	0x08006c59
 8006a2c:	08006c59 	.word	0x08006c59
 8006a30:	08006c59 	.word	0x08006c59
 8006a34:	08006c59 	.word	0x08006c59
 8006a38:	08006c59 	.word	0x08006c59
 8006a3c:	08006c59 	.word	0x08006c59
 8006a40:	08006ba5 	.word	0x08006ba5
 8006a44:	08006b81 	.word	0x08006b81
 8006a48:	08006c59 	.word	0x08006c59
 8006a4c:	08006c59 	.word	0x08006c59
 8006a50:	08006b93 	.word	0x08006b93
 8006a54:	08006c59 	.word	0x08006c59
 8006a58:	08006c59 	.word	0x08006c59
 8006a5c:	08006c59 	.word	0x08006c59
 8006a60:	08006c59 	.word	0x08006c59
 8006a64:	08006bc9 	.word	0x08006bc9
 8006a68:	08006c59 	.word	0x08006c59
 8006a6c:	08006bdb 	.word	0x08006bdb
 8006a70:	08006c59 	.word	0x08006c59
 8006a74:	08006c59 	.word	0x08006c59
 8006a78:	08006bff 	.word	0x08006bff
 8006a7c:	08006c59 	.word	0x08006c59
 8006a80:	08006c23 	.word	0x08006c23
 8006a84:	08006c59 	.word	0x08006c59
 8006a88:	08006c59 	.word	0x08006c59
 8006a8c:	08006c59 	.word	0x08006c59
 8006a90:	08006c59 	.word	0x08006c59
 8006a94:	08006c47 	.word	0x08006c47
 8006a98:	08006c59 	.word	0x08006c59
 8006a9c:	08006c59 	.word	0x08006c59
 8006aa0:	08006c59 	.word	0x08006c59
 8006aa4:	08006c59 	.word	0x08006c59
 8006aa8:	08006c59 	.word	0x08006c59
 8006aac:	08006c59 	.word	0x08006c59
 8006ab0:	08006c59 	.word	0x08006c59
 8006ab4:	08006c59 	.word	0x08006c59
 8006ab8:	08006c59 	.word	0x08006c59
 8006abc:	08006c59 	.word	0x08006c59
 8006ac0:	08006c59 	.word	0x08006c59
 8006ac4:	08006c59 	.word	0x08006c59
 8006ac8:	08006c59 	.word	0x08006c59
 8006acc:	08006c59 	.word	0x08006c59
 8006ad0:	08006c59 	.word	0x08006c59
 8006ad4:	08006c59 	.word	0x08006c59
 8006ad8:	08006c59 	.word	0x08006c59
 8006adc:	08006c59 	.word	0x08006c59
 8006ae0:	08006c59 	.word	0x08006c59
 8006ae4:	08006c59 	.word	0x08006c59
 8006ae8:	08006c59 	.word	0x08006c59
 8006aec:	08006c59 	.word	0x08006c59
 8006af0:	08006c59 	.word	0x08006c59
 8006af4:	08006c59 	.word	0x08006c59
 8006af8:	08006c59 	.word	0x08006c59
 8006afc:	08006c59 	.word	0x08006c59
 8006b00:	08006c59 	.word	0x08006c59
 8006b04:	08006c59 	.word	0x08006c59
 8006b08:	08006c59 	.word	0x08006c59
 8006b0c:	08006c59 	.word	0x08006c59
 8006b10:	08006c59 	.word	0x08006c59
 8006b14:	08006c59 	.word	0x08006c59
 8006b18:	08006c59 	.word	0x08006c59
 8006b1c:	08006c59 	.word	0x08006c59
 8006b20:	08006c59 	.word	0x08006c59
 8006b24:	08006c59 	.word	0x08006c59
 8006b28:	08006c59 	.word	0x08006c59
 8006b2c:	08006c59 	.word	0x08006c59
 8006b30:	08006c59 	.word	0x08006c59
 8006b34:	08006c59 	.word	0x08006c59
 8006b38:	08006c59 	.word	0x08006c59
 8006b3c:	08006c59 	.word	0x08006c59
 8006b40:	08006bb7 	.word	0x08006bb7
 8006b44:	2b9e      	cmp	r3, #158	; 0x9e
 8006b46:	d051      	beq.n	8006bec <SCSI_ProcessCmd+0x26c>
 8006b48:	e086      	b.n	8006c58 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8006b4a:	7afb      	ldrb	r3, [r7, #11]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 f893 	bl	8006c7c <SCSI_TestUnitReady>
 8006b56:	4603      	mov	r3, r0
 8006b58:	75fb      	strb	r3, [r7, #23]
      break;
 8006b5a:	e089      	b.n	8006c70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8006b5c:	7afb      	ldrb	r3, [r7, #11]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	4619      	mov	r1, r3
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 fb38 	bl	80071d8 <SCSI_RequestSense>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b6c:	e080      	b.n	8006c70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8006b6e:	7afb      	ldrb	r3, [r7, #11]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	4619      	mov	r1, r3
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 f8d1 	bl	8006d1c <SCSI_Inquiry>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b7e:	e077      	b.n	8006c70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8006b80:	7afb      	ldrb	r3, [r7, #11]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	4619      	mov	r1, r3
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 fbec 	bl	8007364 <SCSI_StartStopUnit>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b90:	e06e      	b.n	8006c70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8006b92:	7afb      	ldrb	r3, [r7, #11]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	4619      	mov	r1, r3
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 fc34 	bl	8007406 <SCSI_AllowPreventRemovable>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba2:	e065      	b.n	8006c70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 fabc 	bl	8007128 <SCSI_ModeSense6>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb4:	e05c      	b.n	8006c70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8006bb6:	7afb      	ldrb	r3, [r7, #11]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fadf 	bl	8007180 <SCSI_ModeSense10>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc6:	e053      	b.n	8006c70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 fa37 	bl	8007042 <SCSI_ReadFormatCapacity>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd8:	e04a      	b.n	8006c70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8006bda:	7afb      	ldrb	r3, [r7, #11]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	4619      	mov	r1, r3
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f90f 	bl	8006e04 <SCSI_ReadCapacity10>
 8006be6:	4603      	mov	r3, r0
 8006be8:	75fb      	strb	r3, [r7, #23]
      break;
 8006bea:	e041      	b.n	8006c70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8006bec:	7afb      	ldrb	r3, [r7, #11]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f97b 	bl	8006eee <SCSI_ReadCapacity16>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006bfc:	e038      	b.n	8006c70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8006bfe:	7afb      	ldrb	r3, [r7, #11]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	4619      	mov	r1, r3
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 fc27 	bl	8007458 <SCSI_Read10>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c0e:	e02f      	b.n	8006c70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8006c10:	7afb      	ldrb	r3, [r7, #11]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	4619      	mov	r1, r3
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 fcbe 	bl	8007598 <SCSI_Read12>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c20:	e026      	b.n	8006c70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8006c22:	7afb      	ldrb	r3, [r7, #11]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	4619      	mov	r1, r3
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 fd61 	bl	80076f0 <SCSI_Write10>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	75fb      	strb	r3, [r7, #23]
      break;
 8006c32:	e01d      	b.n	8006c70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8006c34:	7afb      	ldrb	r3, [r7, #11]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 fe20 	bl	8007880 <SCSI_Write12>
 8006c40:	4603      	mov	r3, r0
 8006c42:	75fb      	strb	r3, [r7, #23]
      break;
 8006c44:	e014      	b.n	8006c70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8006c46:	7afb      	ldrb	r3, [r7, #11]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 feef 	bl	8007a30 <SCSI_Verify10>
 8006c52:	4603      	mov	r3, r0
 8006c54:	75fb      	strb	r3, [r7, #23]
      break;
 8006c56:	e00b      	b.n	8006c70 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006c58:	7af9      	ldrb	r1, [r7, #11]
 8006c5a:	2320      	movs	r3, #32
 8006c5c:	2205      	movs	r2, #5
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 fb39 	bl	80072d6 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2202      	movs	r2, #2
 8006c68:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8006c6a:	23ff      	movs	r3, #255	; 0xff
 8006c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c6e:	bf00      	nop
  }

  return ret;
 8006c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	460b      	mov	r3, r1
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006c90:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d102      	bne.n	8006c9e <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8006c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c9c:	e03a      	b.n	8006d14 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00a      	beq.n	8006cbe <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006cae:	2320      	movs	r3, #32
 8006cb0:	2205      	movs	r2, #5
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f000 fb0f 	bl	80072d6 <SCSI_SenseCode>

    return -1;
 8006cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cbc:	e02a      	b.n	8006d14 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d10b      	bne.n	8006ce0 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006cc8:	7af9      	ldrb	r1, [r7, #11]
 8006cca:	233a      	movs	r3, #58	; 0x3a
 8006ccc:	2202      	movs	r2, #2
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 fb01 	bl	80072d6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2205      	movs	r2, #5
 8006cd8:	721a      	strb	r2, [r3, #8]
    return -1;
 8006cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cde:	e019      	b.n	8006d14 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	7afa      	ldrb	r2, [r7, #11]
 8006cea:	4610      	mov	r0, r2
 8006cec:	4798      	blx	r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00b      	beq.n	8006d0c <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006cf4:	7af9      	ldrb	r1, [r7, #11]
 8006cf6:	233a      	movs	r3, #58	; 0x3a
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 faeb 	bl	80072d6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	2205      	movs	r2, #5
 8006d04:	721a      	strb	r2, [r3, #8]

    return -1;
 8006d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d0a:	e003      	b.n	8006d14 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	60da      	str	r2, [r3, #12]

  return 0;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	460b      	mov	r3, r1
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006d30:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d102      	bne.n	8006d3e <SCSI_Inquiry+0x22>
  {
    return -1;
 8006d38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d3c:	e05a      	b.n	8006df4 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10a      	bne.n	8006d5e <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006d4e:	2320      	movs	r3, #32
 8006d50:	2205      	movs	r2, #5
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 fabf 	bl	80072d6 <SCSI_SenseCode>
    return -1;
 8006d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d5c:	e04a      	b.n	8006df4 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3301      	adds	r3, #1
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d020      	beq.n	8006dae <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3302      	adds	r3, #2
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d105      	bne.n	8006d82 <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8006d76:	2206      	movs	r2, #6
 8006d78:	4920      	ldr	r1, [pc, #128]	; (8006dfc <SCSI_Inquiry+0xe0>)
 8006d7a:	69b8      	ldr	r0, [r7, #24]
 8006d7c:	f000 ffc2 	bl	8007d04 <SCSI_UpdateBotData>
 8006d80:	e037      	b.n	8006df2 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3302      	adds	r3, #2
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	2b80      	cmp	r3, #128	; 0x80
 8006d8a:	d105      	bne.n	8006d98 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8006d8c:	2208      	movs	r2, #8
 8006d8e:	491c      	ldr	r1, [pc, #112]	; (8006e00 <SCSI_Inquiry+0xe4>)
 8006d90:	69b8      	ldr	r0, [r7, #24]
 8006d92:	f000 ffb7 	bl	8007d04 <SCSI_UpdateBotData>
 8006d96:	e02c      	b.n	8006df2 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006d9e:	2324      	movs	r3, #36	; 0x24
 8006da0:	2205      	movs	r2, #5
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 fa97 	bl	80072d6 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8006da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dac:	e022      	b.n	8006df4 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData_MSC)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006db4:	69d9      	ldr	r1, [r3, #28]
 8006db6:	7afa      	ldrb	r2, [r7, #11]
 8006db8:	4613      	mov	r3, r2
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	440b      	add	r3, r1
 8006dc2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3305      	adds	r3, #5
 8006dce:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	8bfa      	ldrh	r2, [r7, #30]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d303      	bcc.n	8006de6 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3304      	adds	r3, #4
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8006de6:	8bfb      	ldrh	r3, [r7, #30]
 8006de8:	461a      	mov	r2, r3
 8006dea:	6979      	ldr	r1, [r7, #20]
 8006dec:	69b8      	ldr	r0, [r7, #24]
 8006dee:	f000 ff89 	bl	8007d04 <SCSI_UpdateBotData>
  }

  return 0;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20000264 	.word	0x20000264
 8006e00:	2000026c 	.word	0x2000026c

08006e04 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006e18:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d102      	bne.n	8006e26 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8006e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e24:	e05f      	b.n	8006ee6 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8006e3a:	7af8      	ldrb	r0, [r7, #11]
 8006e3c:	4798      	blx	r3
 8006e3e:	4603      	mov	r3, r0
 8006e40:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006e42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d104      	bne.n	8006e54 <SCSI_ReadCapacity10+0x50>
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d108      	bne.n	8006e66 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006e54:	7af9      	ldrb	r1, [r7, #11]
 8006e56:	233a      	movs	r3, #58	; 0x3a
 8006e58:	2202      	movs	r2, #2
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fa3b 	bl	80072d6 <SCSI_SenseCode>
    return -1;
 8006e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e64:	e03f      	b.n	8006ee6 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	0e1b      	lsrs	r3, r3, #24
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	0c1b      	lsrs	r3, r3, #16
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	0a1b      	lsrs	r3, r3, #8
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006eac:	161b      	asrs	r3, r3, #24
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006eba:	141b      	asrs	r3, r3, #16
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006ec8:	0a1b      	lsrs	r3, r3, #8
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	60da      	str	r2, [r3, #12]

  return 0;
 8006ee4:	2300      	movs	r3, #0

}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b088      	sub	sp, #32
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	60f8      	str	r0, [r7, #12]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	607a      	str	r2, [r7, #4]
 8006efa:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006f02:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d102      	bne.n	8006f10 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8006f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f0e:	e094      	b.n	800703a <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8006f24:	7af8      	ldrb	r0, [r7, #11]
 8006f26:	4798      	blx	r3
 8006f28:	4603      	mov	r3, r0
 8006f2a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d104      	bne.n	8006f3e <SCSI_ReadCapacity16+0x50>
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d108      	bne.n	8006f50 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006f3e:	7af9      	ldrb	r1, [r7, #11]
 8006f40:	233a      	movs	r3, #58	; 0x3a
 8006f42:	2202      	movs	r2, #2
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 f9c6 	bl	80072d6 <SCSI_SenseCode>
    return -1;
 8006f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f4e:	e074      	b.n	800703a <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	330a      	adds	r3, #10
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	330b      	adds	r3, #11
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006f60:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	330c      	adds	r3, #12
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8006f6a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	320d      	adds	r2, #13
 8006f70:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8006f72:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006f78:	2300      	movs	r3, #0
 8006f7a:	77fb      	strb	r3, [r7, #31]
 8006f7c:	e007      	b.n	8006f8e <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8006f7e:	7ffb      	ldrb	r3, [r7, #31]
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	4413      	add	r3, r2
 8006f84:	2200      	movs	r2, #0
 8006f86:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006f88:	7ffb      	ldrb	r3, [r7, #31]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	77fb      	strb	r3, [r7, #31]
 8006f8e:	7ffa      	ldrb	r2, [r7, #31]
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d3f2      	bcc.n	8006f7e <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	0e1b      	lsrs	r3, r3, #24
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	0c1b      	lsrs	r3, r3, #16
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	0a1b      	lsrs	r3, r3, #8
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006fde:	161b      	asrs	r3, r3, #24
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006fec:	141b      	asrs	r3, r3, #16
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006ffa:	0a1b      	lsrs	r3, r3, #8
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800700a:	b2da      	uxtb	r2, r3
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	330a      	adds	r3, #10
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	330b      	adds	r3, #11
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007020:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	330c      	adds	r3, #12
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800702a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	320d      	adds	r2, #13
 8007030:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007032:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	60da      	str	r2, [r3, #12]

  return 0;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3720      	adds	r7, #32
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b088      	sub	sp, #32
 8007046:	af00      	add	r7, sp, #0
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	460b      	mov	r3, r1
 800704c:	607a      	str	r2, [r7, #4]
 800704e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007056:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d102      	bne.n	8007064 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 800705e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007062:	e05c      	b.n	800711e <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &blk_nbr, &blk_size);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f107 0214 	add.w	r2, r7, #20
 8007070:	f107 0110 	add.w	r1, r7, #16
 8007074:	7af8      	ldrb	r0, [r7, #11]
 8007076:	4798      	blx	r3
 8007078:	4603      	mov	r3, r0
 800707a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800707c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <SCSI_ReadFormatCapacity+0x4c>
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800708a:	2b02      	cmp	r3, #2
 800708c:	d108      	bne.n	80070a0 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800708e:	7af9      	ldrb	r1, [r7, #11]
 8007090:	233a      	movs	r3, #58	; 0x3a
 8007092:	2202      	movs	r2, #2
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f91e 	bl	80072d6 <SCSI_SenseCode>
    return -1;
 800709a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800709e:	e03e      	b.n	800711e <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 80070a0:	2300      	movs	r3, #0
 80070a2:	83fb      	strh	r3, [r7, #30]
 80070a4:	e007      	b.n	80070b6 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 80070a6:	8bfb      	ldrh	r3, [r7, #30]
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	4413      	add	r3, r2
 80070ac:	2200      	movs	r2, #0
 80070ae:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80070b0:	8bfb      	ldrh	r3, [r7, #30]
 80070b2:	3301      	adds	r3, #1
 80070b4:	83fb      	strh	r3, [r7, #30]
 80070b6:	8bfb      	ldrh	r3, [r7, #30]
 80070b8:	2b0b      	cmp	r3, #11
 80070ba:	d9f4      	bls.n	80070a6 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	2208      	movs	r2, #8
 80070c0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	0e1b      	lsrs	r3, r3, #24
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	0c1b      	lsrs	r3, r3, #16
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	3b01      	subs	r3, #1
 80070de:	0a1b      	lsrs	r3, r3, #8
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	3b01      	subs	r3, #1
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2202      	movs	r2, #2
 80070f6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80070f8:	8abb      	ldrh	r3, [r7, #20]
 80070fa:	141b      	asrs	r3, r3, #16
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007102:	8abb      	ldrh	r3, [r7, #20]
 8007104:	0a1b      	lsrs	r3, r3, #8
 8007106:	b29b      	uxth	r3, r3
 8007108:	b2da      	uxtb	r2, r3
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800710e:	8abb      	ldrh	r3, [r7, #20]
 8007110:	b2da      	uxtb	r2, r3
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	220c      	movs	r2, #12
 800711a:	60da      	str	r2, [r3, #12]

  return 0;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3720      	adds	r7, #32
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	460b      	mov	r3, r1
 8007132:	607a      	str	r2, [r7, #4]
 8007134:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800713c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800713e:	2317      	movs	r3, #23
 8007140:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d102      	bne.n	800714e <SCSI_ModeSense6+0x26>
  {
    return -1;
 8007148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800714c:	e011      	b.n	8007172 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3304      	adds	r3, #4
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	b29b      	uxth	r3, r3
 8007156:	8afa      	ldrh	r2, [r7, #22]
 8007158:	429a      	cmp	r2, r3
 800715a:	d303      	bcc.n	8007164 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3304      	adds	r3, #4
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8007164:	8afb      	ldrh	r3, [r7, #22]
 8007166:	461a      	mov	r2, r3
 8007168:	4904      	ldr	r1, [pc, #16]	; (800717c <SCSI_ModeSense6+0x54>)
 800716a:	6938      	ldr	r0, [r7, #16]
 800716c:	f000 fdca 	bl	8007d04 <SCSI_UpdateBotData>

  return 0;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3718      	adds	r7, #24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20000274 	.word	0x20000274

08007180 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	460b      	mov	r3, r1
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007194:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8007196:	231b      	movs	r3, #27
 8007198:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d102      	bne.n	80071a6 <SCSI_ModeSense10+0x26>
  {
    return -1;
 80071a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071a4:	e011      	b.n	80071ca <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3308      	adds	r3, #8
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	8afa      	ldrh	r2, [r7, #22]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d303      	bcc.n	80071bc <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3308      	adds	r3, #8
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80071bc:	8afb      	ldrh	r3, [r7, #22]
 80071be:	461a      	mov	r2, r3
 80071c0:	4904      	ldr	r1, [pc, #16]	; (80071d4 <SCSI_ModeSense10+0x54>)
 80071c2:	6938      	ldr	r0, [r7, #16]
 80071c4:	f000 fd9e 	bl	8007d04 <SCSI_UpdateBotData>

  return 0;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	2000028c 	.word	0x2000028c

080071d8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	460b      	mov	r3, r1
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80071ec:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d102      	bne.n	80071fa <SCSI_RequestSense+0x22>
  {
    return -1;
 80071f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071f8:	e069      	b.n	80072ce <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10a      	bne.n	800721a <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800720a:	2320      	movs	r3, #32
 800720c:	2205      	movs	r2, #5
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 f861 	bl	80072d6 <SCSI_SenseCode>
    return -1;
 8007214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007218:	e059      	b.n	80072ce <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800721a:	2300      	movs	r3, #0
 800721c:	75fb      	strb	r3, [r7, #23]
 800721e:	e007      	b.n	8007230 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8007220:	7dfb      	ldrb	r3, [r7, #23]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4413      	add	r3, r2
 8007226:	2200      	movs	r2, #0
 8007228:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	3301      	adds	r3, #1
 800722e:	75fb      	strb	r3, [r7, #23]
 8007230:	7dfb      	ldrb	r3, [r7, #23]
 8007232:	2b11      	cmp	r3, #17
 8007234:	d9f4      	bls.n	8007220 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	2270      	movs	r2, #112	; 0x70
 800723a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	220c      	movs	r2, #12
 8007240:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800724e:	429a      	cmp	r2, r3
 8007250:	d02e      	beq.n	80072b0 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007258:	461a      	mov	r2, r3
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	3248      	adds	r2, #72	; 0x48
 800725e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	3348      	adds	r3, #72	; 0x48
 8007270:	00db      	lsls	r3, r3, #3
 8007272:	4413      	add	r3, r2
 8007274:	791a      	ldrb	r2, [r3, #4]
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	3348      	adds	r3, #72	; 0x48
 8007284:	00db      	lsls	r3, r3, #3
 8007286:	4413      	add	r3, r2
 8007288:	795a      	ldrb	r2, [r3, #5]
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007294:	3301      	adds	r3, #1
 8007296:	b2da      	uxtb	r2, r3
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	d103      	bne.n	80072b0 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	2212      	movs	r2, #18
 80072b4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	3304      	adds	r3, #4
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b12      	cmp	r3, #18
 80072be:	d805      	bhi.n	80072cc <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3304      	adds	r3, #4
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b085      	sub	sp, #20
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	4608      	mov	r0, r1
 80072e0:	4611      	mov	r1, r2
 80072e2:	461a      	mov	r2, r3
 80072e4:	4603      	mov	r3, r0
 80072e6:	70fb      	strb	r3, [r7, #3]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70bb      	strb	r3, [r7, #2]
 80072ec:	4613      	mov	r3, r2
 80072ee:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80072f6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d02c      	beq.n	8007358 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007304:	461a      	mov	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3248      	adds	r2, #72	; 0x48
 800730a:	78b9      	ldrb	r1, [r7, #2]
 800730c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	3348      	adds	r3, #72	; 0x48
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	4413      	add	r3, r2
 800731e:	787a      	ldrb	r2, [r7, #1]
 8007320:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	3348      	adds	r3, #72	; 0x48
 800732c:	00db      	lsls	r3, r3, #3
 800732e:	4413      	add	r3, r2
 8007330:	2200      	movs	r2, #0
 8007332:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800733a:	3301      	adds	r3, #1
 800733c:	b2da      	uxtb	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800734a:	2b04      	cmp	r3, #4
 800734c:	d105      	bne.n	800735a <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8007356:	e000      	b.n	800735a <SCSI_SenseCode+0x84>
    return;
 8007358:	bf00      	nop
  }
}
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	460b      	mov	r3, r1
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007378:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8007380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007384:	e03b      	b.n	80073fe <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800738c:	2b01      	cmp	r3, #1
 800738e:	d10f      	bne.n	80073b0 <SCSI_StartStopUnit+0x4c>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3304      	adds	r3, #4
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	2b02      	cmp	r3, #2
 800739c:	d108      	bne.n	80073b0 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800739e:	7af9      	ldrb	r1, [r7, #11]
 80073a0:	2324      	movs	r3, #36	; 0x24
 80073a2:	2205      	movs	r2, #5
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7ff ff96 	bl	80072d6 <SCSI_SenseCode>

    return -1;
 80073aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073ae:	e026      	b.n	80073fe <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3304      	adds	r3, #4
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d104      	bne.n	80073c8 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80073c6:	e016      	b.n	80073f6 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3304      	adds	r3, #4
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	f003 0303 	and.w	r3, r3, #3
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d104      	bne.n	80073e0 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2202      	movs	r2, #2
 80073da:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80073de:	e00a      	b.n	80073f6 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3304      	adds	r3, #4
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d103      	bne.n	80073f6 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2200      	movs	r2, #0
 80073fa:	60da      	str	r2, [r3, #12]

  return 0;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007406:	b480      	push	{r7}
 8007408:	b087      	sub	sp, #28
 800740a:	af00      	add	r7, sp, #0
 800740c:	60f8      	str	r0, [r7, #12]
 800740e:	460b      	mov	r3, r1
 8007410:	607a      	str	r2, [r7, #4]
 8007412:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800741a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d102      	bne.n	8007428 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 8007422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007426:	e011      	b.n	800744c <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3304      	adds	r3, #4
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d104      	bne.n	800743c <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800743a:	e003      	b.n	8007444 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2200      	movs	r2, #0
 8007448:	60da      	str	r2, [r3, #12]

  return 0;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	371c      	adds	r7, #28
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	460b      	mov	r3, r1
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800746c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d102      	bne.n	800747a <SCSI_Read10+0x22>
  {
    return -1;
 8007474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007478:	e08a      	b.n	8007590 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	7a1b      	ldrb	r3, [r3, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d17c      	bne.n	800757c <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007488:	b25b      	sxtb	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	db0a      	blt.n	80074a4 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007494:	2320      	movs	r3, #32
 8007496:	2205      	movs	r2, #5
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f7ff ff1c 	bl	80072d6 <SCSI_SenseCode>
      return -1;
 800749e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074a2:	e075      	b.n	8007590 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d108      	bne.n	80074c0 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80074ae:	7af9      	ldrb	r1, [r7, #11]
 80074b0:	233a      	movs	r3, #58	; 0x3a
 80074b2:	2202      	movs	r2, #2
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7ff ff0e 	bl	80072d6 <SCSI_SenseCode>

      return -1;
 80074ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074be:	e067      	b.n	8007590 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	7afa      	ldrb	r2, [r7, #11]
 80074ca:	4610      	mov	r0, r2
 80074cc:	4798      	blx	r3
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d008      	beq.n	80074e6 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80074d4:	7af9      	ldrb	r1, [r7, #11]
 80074d6:	233a      	movs	r3, #58	; 0x3a
 80074d8:	2202      	movs	r2, #2
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f7ff fefb 	bl	80072d6 <SCSI_SenseCode>
      return -1;
 80074e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074e4:	e054      	b.n	8007590 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3302      	adds	r3, #2
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3303      	adds	r3, #3
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80074f6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3304      	adds	r3, #4
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007500:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	3205      	adds	r2, #5
 8007506:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007508:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	3307      	adds	r3, #7
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	021b      	lsls	r3, r3, #8
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	3208      	adds	r2, #8
 800751c:	7812      	ldrb	r2, [r2, #0]
 800751e:	431a      	orrs	r2, r3
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007532:	7af9      	ldrb	r1, [r7, #11]
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 fab4 	bl	8007aa2 <SCSI_CheckAddressRange>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	da02      	bge.n	8007546 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007544:	e024      	b.n	8007590 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007552:	6979      	ldr	r1, [r7, #20]
 8007554:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8007558:	fb01 f303 	mul.w	r3, r1, r3
 800755c:	429a      	cmp	r2, r3
 800755e:	d00a      	beq.n	8007576 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007566:	2320      	movs	r3, #32
 8007568:	2205      	movs	r2, #5
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f7ff feb3 	bl	80072d6 <SCSI_SenseCode>
      return -1;
 8007570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007574:	e00c      	b.n	8007590 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2202      	movs	r2, #2
 800757a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007582:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007584:	7afb      	ldrb	r3, [r7, #11]
 8007586:	4619      	mov	r1, r3
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 fab3 	bl	8007af4 <SCSI_ProcessRead>
 800758e:	4603      	mov	r3, r0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	460b      	mov	r3, r1
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80075ac:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d102      	bne.n	80075ba <SCSI_Read12+0x22>
  {
    return -1;
 80075b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075b8:	e095      	b.n	80076e6 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	7a1b      	ldrb	r3, [r3, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f040 8087 	bne.w	80076d2 <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80075ca:	b25b      	sxtb	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	db0a      	blt.n	80075e6 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80075d6:	2320      	movs	r3, #32
 80075d8:	2205      	movs	r2, #5
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f7ff fe7b 	bl	80072d6 <SCSI_SenseCode>
      return -1;
 80075e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075e4:	e07f      	b.n	80076e6 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d108      	bne.n	8007602 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80075f0:	7af9      	ldrb	r1, [r7, #11]
 80075f2:	233a      	movs	r3, #58	; 0x3a
 80075f4:	2202      	movs	r2, #2
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff fe6d 	bl	80072d6 <SCSI_SenseCode>
      return -1;
 80075fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007600:	e071      	b.n	80076e6 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	7afa      	ldrb	r2, [r7, #11]
 800760c:	4610      	mov	r0, r2
 800760e:	4798      	blx	r3
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007616:	7af9      	ldrb	r1, [r7, #11]
 8007618:	233a      	movs	r3, #58	; 0x3a
 800761a:	2202      	movs	r2, #2
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7ff fe5a 	bl	80072d6 <SCSI_SenseCode>
      return -1;
 8007622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007626:	e05e      	b.n	80076e6 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3302      	adds	r3, #2
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3303      	adds	r3, #3
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007638:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	3304      	adds	r3, #4
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007642:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	3205      	adds	r2, #5
 8007648:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800764a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	3306      	adds	r3, #6
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3307      	adds	r3, #7
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007662:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	3308      	adds	r3, #8
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800766c:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	3209      	adds	r2, #9
 8007672:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007674:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007688:	7af9      	ldrb	r1, [r7, #11]
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 fa09 	bl	8007aa2 <SCSI_CheckAddressRange>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	da02      	bge.n	800769c <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800769a:	e024      	b.n	80076e6 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80076a8:	6979      	ldr	r1, [r7, #20]
 80076aa:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80076ae:	fb01 f303 	mul.w	r3, r1, r3
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d00a      	beq.n	80076cc <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80076bc:	2320      	movs	r3, #32
 80076be:	2205      	movs	r2, #5
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f7ff fe08 	bl	80072d6 <SCSI_SenseCode>
      return -1;
 80076c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076ca:	e00c      	b.n	80076e6 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	2202      	movs	r2, #2
 80076d0:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076d8:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80076da:	7afb      	ldrb	r3, [r7, #11]
 80076dc:	4619      	mov	r1, r3
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 fa08 	bl	8007af4 <SCSI_ProcessRead>
 80076e4:	4603      	mov	r3, r0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
	...

080076f0 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	460b      	mov	r3, r1
 80076fa:	607a      	str	r2, [r7, #4]
 80076fc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007704:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d102      	bne.n	8007712 <SCSI_Write10+0x22>
  {
    return -1;
 800770c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007710:	e0b0      	b.n	8007874 <SCSI_Write10+0x184>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	7a1b      	ldrb	r3, [r3, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f040 80a6 	bne.w	8007868 <SCSI_Write10+0x178>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10a      	bne.n	800773c <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800772c:	2320      	movs	r3, #32
 800772e:	2205      	movs	r2, #5
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f7ff fdd0 	bl	80072d6 <SCSI_SenseCode>
      return -1;
 8007736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800773a:	e09b      	b.n	8007874 <SCSI_Write10+0x184>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007742:	b25b      	sxtb	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	da0a      	bge.n	800775e <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800774e:	2320      	movs	r3, #32
 8007750:	2205      	movs	r2, #5
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f7ff fdbf 	bl	80072d6 <SCSI_SenseCode>
      return -1;
 8007758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800775c:	e08a      	b.n	8007874 <SCSI_Write10+0x184>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	7afa      	ldrb	r2, [r7, #11]
 8007768:	4610      	mov	r0, r2
 800776a:	4798      	blx	r3
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d008      	beq.n	8007784 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007772:	7af9      	ldrb	r1, [r7, #11]
 8007774:	233a      	movs	r3, #58	; 0x3a
 8007776:	2202      	movs	r2, #2
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f7ff fdac 	bl	80072d6 <SCSI_SenseCode>
      return -1;
 800777e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007782:	e077      	b.n	8007874 <SCSI_Write10+0x184>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsWriteProtected(lun) != 0)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	7afa      	ldrb	r2, [r7, #11]
 800778e:	4610      	mov	r0, r2
 8007790:	4798      	blx	r3
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d008      	beq.n	80077aa <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007798:	7af9      	ldrb	r1, [r7, #11]
 800779a:	2327      	movs	r3, #39	; 0x27
 800779c:	2202      	movs	r2, #2
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f7ff fd99 	bl	80072d6 <SCSI_SenseCode>
      return -1;
 80077a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077a8:	e064      	b.n	8007874 <SCSI_Write10+0x184>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3302      	adds	r3, #2
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3303      	adds	r3, #3
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80077ba:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3304      	adds	r3, #4
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80077c4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	3205      	adds	r2, #5
 80077ca:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80077cc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3307      	adds	r3, #7
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	3208      	adds	r2, #8
 80077e0:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80077e2:	431a      	orrs	r2, r3
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80077f6:	7af9      	ldrb	r1, [r7, #11]
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 f952 	bl	8007aa2 <SCSI_CheckAddressRange>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	da02      	bge.n	800780a <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007808:	e034      	b.n	8007874 <SCSI_Write10+0x184>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007816:	fb02 f303 	mul.w	r3, r2, r3
 800781a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	429a      	cmp	r2, r3
 8007826:	d00a      	beq.n	800783e <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800782e:	2320      	movs	r3, #32
 8007830:	2205      	movs	r2, #5
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f7ff fd4f 	bl	80072d6 <SCSI_SenseCode>
      return -1;
 8007838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800783c:	e01a      	b.n	8007874 <SCSI_Write10+0x184>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007844:	bf28      	it	cs
 8007846:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800784a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2201      	movs	r2, #1
 8007850:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 8007852:	4b0a      	ldr	r3, [pc, #40]	; (800787c <SCSI_Write10+0x18c>)
 8007854:	7819      	ldrb	r1, [r3, #0]
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f103 0210 	add.w	r2, r3, #16
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f001 fe79 	bl	8009556 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007864:	2300      	movs	r3, #0
 8007866:	e005      	b.n	8007874 <SCSI_Write10+0x184>
    return SCSI_ProcessWrite(pdev, lun);
 8007868:	7afb      	ldrb	r3, [r7, #11]
 800786a:	4619      	mov	r1, r3
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 f9bd 	bl	8007bec <SCSI_ProcessWrite>
 8007872:	4603      	mov	r3, r0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3718      	adds	r7, #24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	200001bb 	.word	0x200001bb

08007880 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	460b      	mov	r3, r1
 800788a:	607a      	str	r2, [r7, #4]
 800788c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007894:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d102      	bne.n	80078a2 <SCSI_Write12+0x22>
  {
    return -1;
 800789c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078a0:	e0c0      	b.n	8007a24 <SCSI_Write12+0x1a4>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	7a1b      	ldrb	r3, [r3, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f040 80b6 	bne.w	8007a18 <SCSI_Write12+0x198>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10a      	bne.n	80078cc <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80078bc:	2320      	movs	r3, #32
 80078be:	2205      	movs	r2, #5
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f7ff fd08 	bl	80072d6 <SCSI_SenseCode>
      return -1;
 80078c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078ca:	e0ab      	b.n	8007a24 <SCSI_Write12+0x1a4>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80078d2:	b25b      	sxtb	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	da0a      	bge.n	80078ee <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80078de:	2320      	movs	r3, #32
 80078e0:	2205      	movs	r2, #5
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f7ff fcf7 	bl	80072d6 <SCSI_SenseCode>
      return -1;
 80078e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078ec:	e09a      	b.n	8007a24 <SCSI_Write12+0x1a4>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	7afa      	ldrb	r2, [r7, #11]
 80078f8:	4610      	mov	r0, r2
 80078fa:	4798      	blx	r3
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00b      	beq.n	800791a <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007902:	7af9      	ldrb	r1, [r7, #11]
 8007904:	233a      	movs	r3, #58	; 0x3a
 8007906:	2202      	movs	r2, #2
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f7ff fce4 	bl	80072d6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2205      	movs	r2, #5
 8007912:	721a      	strb	r2, [r3, #8]
      return -1;
 8007914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007918:	e084      	b.n	8007a24 <SCSI_Write12+0x1a4>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsWriteProtected(lun) != 0)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	7afa      	ldrb	r2, [r7, #11]
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00b      	beq.n	8007946 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800792e:	7af9      	ldrb	r1, [r7, #11]
 8007930:	2327      	movs	r3, #39	; 0x27
 8007932:	2202      	movs	r2, #2
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7ff fcce 	bl	80072d6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2205      	movs	r2, #5
 800793e:	721a      	strb	r2, [r3, #8]
      return -1;
 8007940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007944:	e06e      	b.n	8007a24 <SCSI_Write12+0x1a4>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3302      	adds	r3, #2
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3303      	adds	r3, #3
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007956:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3304      	adds	r3, #4
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007960:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	3205      	adds	r2, #5
 8007966:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007968:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	3306      	adds	r3, #6
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	3307      	adds	r3, #7
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007980:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	3308      	adds	r3, #8
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800798a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	3209      	adds	r2, #9
 8007990:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007992:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80079a6:	7af9      	ldrb	r1, [r7, #11]
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 f87a 	bl	8007aa2 <SCSI_CheckAddressRange>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	da02      	bge.n	80079ba <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80079b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079b8:	e034      	b.n	8007a24 <SCSI_Write12+0x1a4>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80079c6:	fb02 f303 	mul.w	r3, r2, r3
 80079ca:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d00a      	beq.n	80079ee <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80079de:	2320      	movs	r3, #32
 80079e0:	2205      	movs	r2, #5
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f7ff fc77 	bl	80072d6 <SCSI_SenseCode>
      return -1;
 80079e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079ec:	e01a      	b.n	8007a24 <SCSI_Write12+0x1a4>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079f4:	bf28      	it	cs
 80079f6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80079fa:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2201      	movs	r2, #1
 8007a00:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 8007a02:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <SCSI_Write12+0x1ac>)
 8007a04:	7819      	ldrb	r1, [r3, #0]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f103 0210 	add.w	r2, r3, #16
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f001 fda1 	bl	8009556 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007a14:	2300      	movs	r3, #0
 8007a16:	e005      	b.n	8007a24 <SCSI_Write12+0x1a4>
    return SCSI_ProcessWrite(pdev, lun);
 8007a18:	7afb      	ldrb	r3, [r7, #11]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f8e5 	bl	8007bec <SCSI_ProcessWrite>
 8007a22:	4603      	mov	r3, r0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	200001bb 	.word	0x200001bb

08007a30 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007a44:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d102      	bne.n	8007a52 <SCSI_Verify10+0x22>
  {
    return -1;
 8007a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a50:	e023      	b.n	8007a9a <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3301      	adds	r3, #1
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	f003 0302 	and.w	r3, r3, #2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d008      	beq.n	8007a72 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007a60:	7af9      	ldrb	r1, [r7, #11]
 8007a62:	2324      	movs	r3, #36	; 0x24
 8007a64:	2205      	movs	r2, #5
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f7ff fc35 	bl	80072d6 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a70:	e013      	b.n	8007a9a <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007a7e:	7af9      	ldrb	r1, [r7, #11]
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 f80e 	bl	8007aa2 <SCSI_CheckAddressRange>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	da02      	bge.n	8007a92 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8007a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a90:	e003      	b.n	8007a9a <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2200      	movs	r2, #0
 8007a96:	60da      	str	r2, [r3, #12]

  return 0;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3718      	adds	r7, #24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b086      	sub	sp, #24
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	60f8      	str	r0, [r7, #12]
 8007aaa:	607a      	str	r2, [r7, #4]
 8007aac:	603b      	str	r3, [r7, #0]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007ab8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d102      	bne.n	8007ac6 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8007ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ac4:	e011      	b.n	8007aea <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	441a      	add	r2, r3
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d908      	bls.n	8007ae8 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007ad6:	7af9      	ldrb	r1, [r7, #11]
 8007ad8:	2321      	movs	r3, #33	; 0x21
 8007ada:	2205      	movs	r2, #5
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f7ff fbfa 	bl	80072d6 <SCSI_SenseCode>
    return -1;
 8007ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ae6:	e000      	b.n	8007aea <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007af4:	b590      	push	{r4, r7, lr}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007b06:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007b14:	fb02 f303 	mul.w	r3, r2, r3
 8007b18:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d102      	bne.n	8007b26 <SCSI_ProcessRead+0x32>
  {
    return -1;
 8007b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b24:	e05c      	b.n	8007be0 <SCSI_ProcessRead+0xec>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b2c:	bf28      	it	cs
 8007b2e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007b32:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Read(lun, hmsc->bot_data,
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007b3a:	691c      	ldr	r4, [r3, #16]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f103 0110 	add.w	r1, r3, #16
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007b4e:	4618      	mov	r0, r3
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Read(lun, hmsc->bot_data,
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	78f8      	ldrb	r0, [r7, #3]
 8007b5a:	47a0      	blx	r4
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	da08      	bge.n	8007b74 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007b62:	78f9      	ldrb	r1, [r7, #3]
 8007b64:	2311      	movs	r3, #17
 8007b66:	2204      	movs	r2, #4
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff fbb4 	bl	80072d6 <SCSI_SenseCode>
    return -1;
 8007b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b72:	e035      	b.n	8007be0 <SCSI_ProcessRead+0xec>
  }

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, hmsc->bot_data, len);
 8007b74:	4b1c      	ldr	r3, [pc, #112]	; (8007be8 <SCSI_ProcessRead+0xf4>)
 8007b76:	7819      	ldrb	r1, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f103 0210 	add.w	r2, r3, #16
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f001 fcc7 	bl	8009514 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007b92:	4619      	mov	r1, r3
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b9a:	441a      	add	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007bae:	4619      	mov	r1, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	1ad2      	subs	r2, r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d102      	bne.n	8007bde <SCSI_ProcessRead+0xea>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2203      	movs	r2, #3
 8007bdc:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd90      	pop	{r4, r7, pc}
 8007be8:	200001ba 	.word	0x200001ba

08007bec <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007bec:	b590      	push	{r4, r7, lr}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007bfe:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007c0c:	fb02 f303 	mul.w	r3, r2, r3
 8007c10:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d102      	bne.n	8007c1e <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8007c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c1c:	e06c      	b.n	8007cf8 <SCSI_ProcessWrite+0x10c>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c24:	bf28      	it	cs
 8007c26:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007c2a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Write(lun, hmsc->bot_data,
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007c32:	695c      	ldr	r4, [r3, #20]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f103 0110 	add.w	r1, r3, #16
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007c46:	4618      	mov	r0, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Write(lun, hmsc->bot_data,
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	78f8      	ldrb	r0, [r7, #3]
 8007c52:	47a0      	blx	r4
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	da08      	bge.n	8007c6c <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007c5a:	78f9      	ldrb	r1, [r7, #3]
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	2204      	movs	r2, #4
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff fb38 	bl	80072d6 <SCSI_SenseCode>
    return -1;
 8007c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c6a:	e045      	b.n	8007cf8 <SCSI_ProcessWrite+0x10c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007c78:	4619      	mov	r1, r3
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c80:	441a      	add	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007c94:	4619      	mov	r1, r3
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c9c:	1ad2      	subs	r2, r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	1ad2      	subs	r2, r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d104      	bne.n	8007cc8 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7fe fdb3 	bl	800682c <MSC_BOT_SendCSW>
 8007cc6:	e016      	b.n	8007cf6 <SCSI_ProcessWrite+0x10a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007cd4:	fb02 f303 	mul.w	r3, r2, r3
 8007cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cdc:	bf28      	it	cs
 8007cde:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007ce2:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 8007ce4:	4b06      	ldr	r3, [pc, #24]	; (8007d00 <SCSI_ProcessWrite+0x114>)
 8007ce6:	7819      	ldrb	r1, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f103 0210 	add.w	r2, r3, #16
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 fc30 	bl	8009556 <USBD_LL_PrepareReceive>
  }

  return 0;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd90      	pop	{r4, r7, pc}
 8007d00:	200001bb 	.word	0x200001bb

08007d04 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8007d12:	88fb      	ldrh	r3, [r7, #6]
 8007d14:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d102      	bne.n	8007d22 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8007d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d20:	e013      	b.n	8007d4a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8007d22:	8afa      	ldrh	r2, [r7, #22]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8007d28:	e00b      	b.n	8007d42 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8007d2a:	8afb      	ldrh	r3, [r7, #22]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8007d30:	8afb      	ldrh	r3, [r7, #22]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	441a      	add	r2, r3
 8007d36:	8afb      	ldrh	r3, [r7, #22]
 8007d38:	7811      	ldrb	r1, [r2, #0]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	460a      	mov	r2, r1
 8007d40:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8007d42:	8afb      	ldrh	r3, [r7, #22]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1f0      	bne.n	8007d2a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	371c      	adds	r7, #28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b086      	sub	sp, #24
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	4613      	mov	r3, r2
 8007d62:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e01b      	b.n	8007da6 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pConfDesc = NULL;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	79fa      	ldrb	r2, [r7, #7]
 8007d98:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f001 fa54 	bl	8009248 <USBD_LL_Init>
 8007da0:	4603      	mov	r3, r0
 8007da2:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e02d      	b.n	8007e22 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	7c1b      	ldrb	r3, [r3, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d112      	bne.n	8007dfc <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d01e      	beq.n	8007e20 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dea:	f107 020e 	add.w	r2, r7, #14
 8007dee:	4610      	mov	r0, r2
 8007df0:	4798      	blx	r3
 8007df2:	4602      	mov	r2, r0
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 8007dfa:	e011      	b.n	8007e20 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e10:	f107 020e 	add.w	r2, r7, #14
 8007e14:	4610      	mov	r0, r2
 8007e16:	4798      	blx	r3
 8007e18:	4602      	mov	r2, r0
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
  }

  return USBD_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f001 fa66 	bl	8009304 <USBD_LL_Start>
 8007e38:	4603      	mov	r3, r0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007e64:	2303      	movs	r3, #3
 8007e66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d009      	beq.n	8007e86 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	78fa      	ldrb	r2, [r7, #3]
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	4798      	blx	r3
 8007e82:	4603      	mov	r3, r0
 8007e84:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d007      	beq.n	8007eb6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	78fa      	ldrb	r2, [r7, #3]
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	4798      	blx	r3
  }

  return USBD_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 ff9c 	bl	8008e10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ef4:	f003 031f 	and.w	r3, r3, #31
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d01a      	beq.n	8007f32 <USBD_LL_SetupStage+0x72>
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d822      	bhi.n	8007f46 <USBD_LL_SetupStage+0x86>
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <USBD_LL_SetupStage+0x4a>
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d00a      	beq.n	8007f1e <USBD_LL_SetupStage+0x5e>
 8007f08:	e01d      	b.n	8007f46 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fa5c 	bl	80083d0 <USBD_StdDevReq>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f1c:	e020      	b.n	8007f60 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fac0 	bl	80084ac <USBD_StdItfReq>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f30:	e016      	b.n	8007f60 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 faff 	bl	800853e <USBD_StdEPReq>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]
      break;
 8007f44:	e00c      	b.n	8007f60 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f001 fa54 	bl	8009402 <USBD_LL_StallEP>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f5e:	bf00      	nop
  }

  return ret;
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b086      	sub	sp, #24
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	460b      	mov	r3, r1
 8007f74:	607a      	str	r2, [r7, #4]
 8007f76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007f78:	7afb      	ldrb	r3, [r7, #11]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d138      	bne.n	8007ff0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f84:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d14a      	bne.n	8008026 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d913      	bls.n	8007fc4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	689a      	ldr	r2, [r3, #8]
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	1ad2      	subs	r2, r2, r3
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	68da      	ldr	r2, [r3, #12]
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	bf28      	it	cs
 8007fb6:	4613      	movcs	r3, r2
 8007fb8:	461a      	mov	r2, r3
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f001 f81b 	bl	8008ff8 <USBD_CtlContinueRx>
 8007fc2:	e030      	b.n	8008026 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	d10b      	bne.n	8007fe8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d005      	beq.n	8007fe8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f001 f816 	bl	800901a <USBD_CtlSendStatus>
 8007fee:	e01a      	b.n	8008026 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d114      	bne.n	8008026 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00e      	beq.n	8008026 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	7afa      	ldrb	r2, [r7, #11]
 8008012:	4611      	mov	r1, r2
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	4798      	blx	r3
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	e000      	b.n	8008028 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	460b      	mov	r3, r1
 800803a:	607a      	str	r2, [r7, #4]
 800803c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800803e:	7afb      	ldrb	r3, [r7, #11]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d16b      	bne.n	800811c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3314      	adds	r3, #20
 8008048:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008050:	2b02      	cmp	r3, #2
 8008052:	d156      	bne.n	8008102 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	429a      	cmp	r2, r3
 800805e:	d914      	bls.n	800808a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	1ad2      	subs	r2, r2, r3
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	461a      	mov	r2, r3
 8008074:	6879      	ldr	r1, [r7, #4]
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f000 ff90 	bl	8008f9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800807c:	2300      	movs	r3, #0
 800807e:	2200      	movs	r2, #0
 8008080:	2100      	movs	r1, #0
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f001 fa67 	bl	8009556 <USBD_LL_PrepareReceive>
 8008088:	e03b      	b.n	8008102 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	68da      	ldr	r2, [r3, #12]
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	429a      	cmp	r2, r3
 8008094:	d11c      	bne.n	80080d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800809e:	429a      	cmp	r2, r3
 80080a0:	d316      	bcc.n	80080d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d20f      	bcs.n	80080d0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080b0:	2200      	movs	r2, #0
 80080b2:	2100      	movs	r1, #0
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f000 ff71 	bl	8008f9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080c2:	2300      	movs	r3, #0
 80080c4:	2200      	movs	r2, #0
 80080c6:	2100      	movs	r1, #0
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f001 fa44 	bl	8009556 <USBD_LL_PrepareReceive>
 80080ce:	e018      	b.n	8008102 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d10b      	bne.n	80080f4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d005      	beq.n	80080f4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80080f4:	2180      	movs	r1, #128	; 0x80
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f001 f983 	bl	8009402 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 ff9f 	bl	8009040 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008108:	2b01      	cmp	r3, #1
 800810a:	d122      	bne.n	8008152 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f7ff fe98 	bl	8007e42 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800811a:	e01a      	b.n	8008152 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b03      	cmp	r3, #3
 8008126:	d114      	bne.n	8008152 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00e      	beq.n	8008152 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	7afa      	ldrb	r2, [r7, #11]
 800813e:	4611      	mov	r1, r2
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	4798      	blx	r3
 8008144:	4603      	mov	r3, r0
 8008146:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008148:	7dfb      	ldrb	r3, [r7, #23]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800814e:	7dfb      	ldrb	r3, [r7, #23]
 8008150:	e000      	b.n	8008154 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3718      	adds	r7, #24
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800818c:	2303      	movs	r3, #3
 800818e:	e02a      	b.n	80081e6 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d009      	beq.n	80081b0 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	6852      	ldr	r2, [r2, #4]
 80081a8:	b2d2      	uxtb	r2, r2
 80081aa:	4611      	mov	r1, r2
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081b0:	2340      	movs	r3, #64	; 0x40
 80081b2:	2200      	movs	r2, #0
 80081b4:	2100      	movs	r1, #0
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 f8bf 	bl	800933a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2240      	movs	r2, #64	; 0x40
 80081c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081cc:	2340      	movs	r3, #64	; 0x40
 80081ce:	2200      	movs	r2, #0
 80081d0:	2180      	movs	r1, #128	; 0x80
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 f8b1 	bl	800933a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2240      	movs	r2, #64	; 0x40
 80081e2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b083      	sub	sp, #12
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	460b      	mov	r3, r1
 80081f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	78fa      	ldrb	r2, [r7, #3]
 80081fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800821c:	b2da      	uxtb	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2204      	movs	r2, #4
 8008228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b04      	cmp	r3, #4
 800824c:	d106      	bne.n	800825c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008254:	b2da      	uxtb	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800827c:	2303      	movs	r3, #3
 800827e:	e012      	b.n	80082a6 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b03      	cmp	r3, #3
 800828a:	d10b      	bne.n	80082a4 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	460b      	mov	r3, r1
 80082b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e014      	b.n	80082f2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b03      	cmp	r3, #3
 80082d2:	d10d      	bne.n	80082f0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d007      	beq.n	80082f0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	78fa      	ldrb	r2, [r7, #3]
 80082ea:	4611      	mov	r1, r2
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b082      	sub	sp, #8
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	460b      	mov	r3, r1
 8008304:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008310:	2303      	movs	r3, #3
 8008312:	e014      	b.n	800833e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b03      	cmp	r3, #3
 800831e:	d10d      	bne.n	800833c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	2b00      	cmp	r3, #0
 800832a:	d007      	beq.n	800833c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	78fa      	ldrb	r2, [r7, #3]
 8008336:	4611      	mov	r1, r2
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008372:	2b00      	cmp	r3, #0
 8008374:	d009      	beq.n	800838a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	6852      	ldr	r2, [r2, #4]
 8008382:	b2d2      	uxtb	r2, r2
 8008384:	4611      	mov	r1, r2
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	4798      	blx	r3
  }

  return USBD_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	3301      	adds	r3, #1
 80083aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083b2:	8a3b      	ldrh	r3, [r7, #16]
 80083b4:	021b      	lsls	r3, r3, #8
 80083b6:	b21a      	sxth	r2, r3
 80083b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083bc:	4313      	orrs	r3, r2
 80083be:	b21b      	sxth	r3, r3
 80083c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083c2:	89fb      	ldrh	r3, [r7, #14]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	371c      	adds	r7, #28
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083e6:	2b40      	cmp	r3, #64	; 0x40
 80083e8:	d005      	beq.n	80083f6 <USBD_StdDevReq+0x26>
 80083ea:	2b40      	cmp	r3, #64	; 0x40
 80083ec:	d853      	bhi.n	8008496 <USBD_StdDevReq+0xc6>
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00b      	beq.n	800840a <USBD_StdDevReq+0x3a>
 80083f2:	2b20      	cmp	r3, #32
 80083f4:	d14f      	bne.n	8008496 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	4798      	blx	r3
 8008404:	4603      	mov	r3, r0
 8008406:	73fb      	strb	r3, [r7, #15]
      break;
 8008408:	e04a      	b.n	80084a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	785b      	ldrb	r3, [r3, #1]
 800840e:	2b09      	cmp	r3, #9
 8008410:	d83b      	bhi.n	800848a <USBD_StdDevReq+0xba>
 8008412:	a201      	add	r2, pc, #4	; (adr r2, 8008418 <USBD_StdDevReq+0x48>)
 8008414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008418:	0800846d 	.word	0x0800846d
 800841c:	08008481 	.word	0x08008481
 8008420:	0800848b 	.word	0x0800848b
 8008424:	08008477 	.word	0x08008477
 8008428:	0800848b 	.word	0x0800848b
 800842c:	0800844b 	.word	0x0800844b
 8008430:	08008441 	.word	0x08008441
 8008434:	0800848b 	.word	0x0800848b
 8008438:	08008463 	.word	0x08008463
 800843c:	08008455 	.word	0x08008455
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f9de 	bl	8008804 <USBD_GetDescriptor>
          break;
 8008448:	e024      	b.n	8008494 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fb55 	bl	8008afc <USBD_SetAddress>
          break;
 8008452:	e01f      	b.n	8008494 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fb94 	bl	8008b84 <USBD_SetConfig>
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]
          break;
 8008460:	e018      	b.n	8008494 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fc33 	bl	8008cd0 <USBD_GetConfig>
          break;
 800846a:	e013      	b.n	8008494 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fc64 	bl	8008d3c <USBD_GetStatus>
          break;
 8008474:	e00e      	b.n	8008494 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fc93 	bl	8008da4 <USBD_SetFeature>
          break;
 800847e:	e009      	b.n	8008494 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fca2 	bl	8008dcc <USBD_ClrFeature>
          break;
 8008488:	e004      	b.n	8008494 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fcf9 	bl	8008e84 <USBD_CtlError>
          break;
 8008492:	bf00      	nop
      }
      break;
 8008494:	e004      	b.n	80084a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fcf3 	bl	8008e84 <USBD_CtlError>
      break;
 800849e:	bf00      	nop
  }

  return ret;
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop

080084ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084c2:	2b40      	cmp	r3, #64	; 0x40
 80084c4:	d005      	beq.n	80084d2 <USBD_StdItfReq+0x26>
 80084c6:	2b40      	cmp	r3, #64	; 0x40
 80084c8:	d82f      	bhi.n	800852a <USBD_StdItfReq+0x7e>
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <USBD_StdItfReq+0x26>
 80084ce:	2b20      	cmp	r3, #32
 80084d0:	d12b      	bne.n	800852a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	3b01      	subs	r3, #1
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d81d      	bhi.n	800851c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	889b      	ldrh	r3, [r3, #4]
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b0f      	cmp	r3, #15
 80084e8:	d813      	bhi.n	8008512 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	4798      	blx	r3
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	88db      	ldrh	r3, [r3, #6]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d110      	bne.n	8008526 <USBD_StdItfReq+0x7a>
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10d      	bne.n	8008526 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fd85 	bl	800901a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008510:	e009      	b.n	8008526 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fcb5 	bl	8008e84 <USBD_CtlError>
          break;
 800851a:	e004      	b.n	8008526 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fcb0 	bl	8008e84 <USBD_CtlError>
          break;
 8008524:	e000      	b.n	8008528 <USBD_StdItfReq+0x7c>
          break;
 8008526:	bf00      	nop
      }
      break;
 8008528:	e004      	b.n	8008534 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fca9 	bl	8008e84 <USBD_CtlError>
      break;
 8008532:	bf00      	nop
  }

  return ret;
 8008534:	7bfb      	ldrb	r3, [r7, #15]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	889b      	ldrh	r3, [r3, #4]
 8008550:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800855a:	2b40      	cmp	r3, #64	; 0x40
 800855c:	d007      	beq.n	800856e <USBD_StdEPReq+0x30>
 800855e:	2b40      	cmp	r3, #64	; 0x40
 8008560:	f200 8145 	bhi.w	80087ee <USBD_StdEPReq+0x2b0>
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00c      	beq.n	8008582 <USBD_StdEPReq+0x44>
 8008568:	2b20      	cmp	r3, #32
 800856a:	f040 8140 	bne.w	80087ee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	4798      	blx	r3
 800857c:	4603      	mov	r3, r0
 800857e:	73fb      	strb	r3, [r7, #15]
      break;
 8008580:	e13a      	b.n	80087f8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	785b      	ldrb	r3, [r3, #1]
 8008586:	2b03      	cmp	r3, #3
 8008588:	d007      	beq.n	800859a <USBD_StdEPReq+0x5c>
 800858a:	2b03      	cmp	r3, #3
 800858c:	f300 8129 	bgt.w	80087e2 <USBD_StdEPReq+0x2a4>
 8008590:	2b00      	cmp	r3, #0
 8008592:	d07f      	beq.n	8008694 <USBD_StdEPReq+0x156>
 8008594:	2b01      	cmp	r3, #1
 8008596:	d03c      	beq.n	8008612 <USBD_StdEPReq+0xd4>
 8008598:	e123      	b.n	80087e2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d002      	beq.n	80085ac <USBD_StdEPReq+0x6e>
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d016      	beq.n	80085d8 <USBD_StdEPReq+0x9a>
 80085aa:	e02c      	b.n	8008606 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00d      	beq.n	80085ce <USBD_StdEPReq+0x90>
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	2b80      	cmp	r3, #128	; 0x80
 80085b6:	d00a      	beq.n	80085ce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 ff20 	bl	8009402 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085c2:	2180      	movs	r1, #128	; 0x80
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 ff1c 	bl	8009402 <USBD_LL_StallEP>
 80085ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085cc:	e020      	b.n	8008610 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fc57 	bl	8008e84 <USBD_CtlError>
              break;
 80085d6:	e01b      	b.n	8008610 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	885b      	ldrh	r3, [r3, #2]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10e      	bne.n	80085fe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00b      	beq.n	80085fe <USBD_StdEPReq+0xc0>
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	2b80      	cmp	r3, #128	; 0x80
 80085ea:	d008      	beq.n	80085fe <USBD_StdEPReq+0xc0>
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	88db      	ldrh	r3, [r3, #6]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d104      	bne.n	80085fe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 ff02 	bl	8009402 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fd0b 	bl	800901a <USBD_CtlSendStatus>

              break;
 8008604:	e004      	b.n	8008610 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fc3b 	bl	8008e84 <USBD_CtlError>
              break;
 800860e:	bf00      	nop
          }
          break;
 8008610:	e0ec      	b.n	80087ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b02      	cmp	r3, #2
 800861c:	d002      	beq.n	8008624 <USBD_StdEPReq+0xe6>
 800861e:	2b03      	cmp	r3, #3
 8008620:	d016      	beq.n	8008650 <USBD_StdEPReq+0x112>
 8008622:	e030      	b.n	8008686 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008624:	7bbb      	ldrb	r3, [r7, #14]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00d      	beq.n	8008646 <USBD_StdEPReq+0x108>
 800862a:	7bbb      	ldrb	r3, [r7, #14]
 800862c:	2b80      	cmp	r3, #128	; 0x80
 800862e:	d00a      	beq.n	8008646 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008630:	7bbb      	ldrb	r3, [r7, #14]
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fee4 	bl	8009402 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800863a:	2180      	movs	r1, #128	; 0x80
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fee0 	bl	8009402 <USBD_LL_StallEP>
 8008642:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008644:	e025      	b.n	8008692 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fc1b 	bl	8008e84 <USBD_CtlError>
              break;
 800864e:	e020      	b.n	8008692 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	885b      	ldrh	r3, [r3, #2]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d11b      	bne.n	8008690 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800865e:	2b00      	cmp	r3, #0
 8008660:	d004      	beq.n	800866c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	4619      	mov	r1, r3
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 feea 	bl	8009440 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fcd4 	bl	800901a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	4798      	blx	r3
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008684:	e004      	b.n	8008690 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fbfb 	bl	8008e84 <USBD_CtlError>
              break;
 800868e:	e000      	b.n	8008692 <USBD_StdEPReq+0x154>
              break;
 8008690:	bf00      	nop
          }
          break;
 8008692:	e0ab      	b.n	80087ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b02      	cmp	r3, #2
 800869e:	d002      	beq.n	80086a6 <USBD_StdEPReq+0x168>
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d032      	beq.n	800870a <USBD_StdEPReq+0x1cc>
 80086a4:	e097      	b.n	80087d6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d007      	beq.n	80086bc <USBD_StdEPReq+0x17e>
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
 80086ae:	2b80      	cmp	r3, #128	; 0x80
 80086b0:	d004      	beq.n	80086bc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fbe5 	bl	8008e84 <USBD_CtlError>
                break;
 80086ba:	e091      	b.n	80087e0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	da0b      	bge.n	80086dc <USBD_StdEPReq+0x19e>
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	3310      	adds	r3, #16
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	4413      	add	r3, r2
 80086d8:	3304      	adds	r3, #4
 80086da:	e00b      	b.n	80086f4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
 80086de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086e2:	4613      	mov	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	4413      	add	r3, r2
 80086f2:	3304      	adds	r3, #4
 80086f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2200      	movs	r2, #0
 80086fa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2202      	movs	r2, #2
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fc2f 	bl	8008f66 <USBD_CtlSendData>
              break;
 8008708:	e06a      	b.n	80087e0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800870a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800870e:	2b00      	cmp	r3, #0
 8008710:	da11      	bge.n	8008736 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	f003 020f 	and.w	r2, r3, #15
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	440b      	add	r3, r1
 8008724:	3324      	adds	r3, #36	; 0x24
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d117      	bne.n	800875c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fba8 	bl	8008e84 <USBD_CtlError>
                  break;
 8008734:	e054      	b.n	80087e0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	f003 020f 	and.w	r2, r3, #15
 800873c:	6879      	ldr	r1, [r7, #4]
 800873e:	4613      	mov	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	440b      	add	r3, r1
 8008748:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d104      	bne.n	800875c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fb95 	bl	8008e84 <USBD_CtlError>
                  break;
 800875a:	e041      	b.n	80087e0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800875c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008760:	2b00      	cmp	r3, #0
 8008762:	da0b      	bge.n	800877c <USBD_StdEPReq+0x23e>
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	3310      	adds	r3, #16
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	4413      	add	r3, r2
 8008778:	3304      	adds	r3, #4
 800877a:	e00b      	b.n	8008794 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800877c:	7bbb      	ldrb	r3, [r7, #14]
 800877e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	4413      	add	r3, r2
 8008792:	3304      	adds	r3, #4
 8008794:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008796:	7bbb      	ldrb	r3, [r7, #14]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <USBD_StdEPReq+0x264>
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	2b80      	cmp	r3, #128	; 0x80
 80087a0:	d103      	bne.n	80087aa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2200      	movs	r2, #0
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	e00e      	b.n	80087c8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	4619      	mov	r1, r3
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fe65 	bl	800947e <USBD_LL_IsStallEP>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2201      	movs	r2, #1
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	e002      	b.n	80087c8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2200      	movs	r2, #0
 80087c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2202      	movs	r2, #2
 80087cc:	4619      	mov	r1, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fbc9 	bl	8008f66 <USBD_CtlSendData>
              break;
 80087d4:	e004      	b.n	80087e0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fb53 	bl	8008e84 <USBD_CtlError>
              break;
 80087de:	bf00      	nop
          }
          break;
 80087e0:	e004      	b.n	80087ec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fb4d 	bl	8008e84 <USBD_CtlError>
          break;
 80087ea:	bf00      	nop
      }
      break;
 80087ec:	e004      	b.n	80087f8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fb47 	bl	8008e84 <USBD_CtlError>
      break;
 80087f6:	bf00      	nop
  }

  return ret;
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800880e:	2300      	movs	r3, #0
 8008810:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008812:	2300      	movs	r3, #0
 8008814:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	885b      	ldrh	r3, [r3, #2]
 800881e:	0a1b      	lsrs	r3, r3, #8
 8008820:	b29b      	uxth	r3, r3
 8008822:	3b01      	subs	r3, #1
 8008824:	2b06      	cmp	r3, #6
 8008826:	f200 813b 	bhi.w	8008aa0 <USBD_GetDescriptor+0x29c>
 800882a:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <USBD_GetDescriptor+0x2c>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	0800884d 	.word	0x0800884d
 8008834:	08008865 	.word	0x08008865
 8008838:	080088a5 	.word	0x080088a5
 800883c:	08008aa1 	.word	0x08008aa1
 8008840:	08008aa1 	.word	0x08008aa1
 8008844:	08008a41 	.word	0x08008a41
 8008848:	08008a6d 	.word	0x08008a6d
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	7c12      	ldrb	r2, [r2, #16]
 8008858:	f107 0108 	add.w	r1, r7, #8
 800885c:	4610      	mov	r0, r2
 800885e:	4798      	blx	r3
 8008860:	60f8      	str	r0, [r7, #12]
      break;
 8008862:	e125      	b.n	8008ab0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	7c1b      	ldrb	r3, [r3, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10d      	bne.n	8008888 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008874:	f107 0208 	add.w	r2, r7, #8
 8008878:	4610      	mov	r0, r2
 800887a:	4798      	blx	r3
 800887c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3301      	adds	r3, #1
 8008882:	2202      	movs	r2, #2
 8008884:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008886:	e113      	b.n	8008ab0 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800888e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008890:	f107 0208 	add.w	r2, r7, #8
 8008894:	4610      	mov	r0, r2
 8008896:	4798      	blx	r3
 8008898:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	3301      	adds	r3, #1
 800889e:	2202      	movs	r2, #2
 80088a0:	701a      	strb	r2, [r3, #0]
      break;
 80088a2:	e105      	b.n	8008ab0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	885b      	ldrh	r3, [r3, #2]
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b05      	cmp	r3, #5
 80088ac:	f200 80ac 	bhi.w	8008a08 <USBD_GetDescriptor+0x204>
 80088b0:	a201      	add	r2, pc, #4	; (adr r2, 80088b8 <USBD_GetDescriptor+0xb4>)
 80088b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b6:	bf00      	nop
 80088b8:	080088d1 	.word	0x080088d1
 80088bc:	08008905 	.word	0x08008905
 80088c0:	08008939 	.word	0x08008939
 80088c4:	0800896d 	.word	0x0800896d
 80088c8:	080089a1 	.word	0x080089a1
 80088cc:	080089d5 	.word	0x080089d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00b      	beq.n	80088f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	7c12      	ldrb	r2, [r2, #16]
 80088e8:	f107 0108 	add.w	r1, r7, #8
 80088ec:	4610      	mov	r0, r2
 80088ee:	4798      	blx	r3
 80088f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088f2:	e0a4      	b.n	8008a3e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fac4 	bl	8008e84 <USBD_CtlError>
            err++;
 80088fc:	7afb      	ldrb	r3, [r7, #11]
 80088fe:	3301      	adds	r3, #1
 8008900:	72fb      	strb	r3, [r7, #11]
          break;
 8008902:	e09c      	b.n	8008a3e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00b      	beq.n	8008928 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	7c12      	ldrb	r2, [r2, #16]
 800891c:	f107 0108 	add.w	r1, r7, #8
 8008920:	4610      	mov	r0, r2
 8008922:	4798      	blx	r3
 8008924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008926:	e08a      	b.n	8008a3e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 faaa 	bl	8008e84 <USBD_CtlError>
            err++;
 8008930:	7afb      	ldrb	r3, [r7, #11]
 8008932:	3301      	adds	r3, #1
 8008934:	72fb      	strb	r3, [r7, #11]
          break;
 8008936:	e082      	b.n	8008a3e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00b      	beq.n	800895c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	7c12      	ldrb	r2, [r2, #16]
 8008950:	f107 0108 	add.w	r1, r7, #8
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3
 8008958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800895a:	e070      	b.n	8008a3e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fa90 	bl	8008e84 <USBD_CtlError>
            err++;
 8008964:	7afb      	ldrb	r3, [r7, #11]
 8008966:	3301      	adds	r3, #1
 8008968:	72fb      	strb	r3, [r7, #11]
          break;
 800896a:	e068      	b.n	8008a3e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	7c12      	ldrb	r2, [r2, #16]
 8008984:	f107 0108 	add.w	r1, r7, #8
 8008988:	4610      	mov	r0, r2
 800898a:	4798      	blx	r3
 800898c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800898e:	e056      	b.n	8008a3e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fa76 	bl	8008e84 <USBD_CtlError>
            err++;
 8008998:	7afb      	ldrb	r3, [r7, #11]
 800899a:	3301      	adds	r3, #1
 800899c:	72fb      	strb	r3, [r7, #11]
          break;
 800899e:	e04e      	b.n	8008a3e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a6:	695b      	ldr	r3, [r3, #20]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00b      	beq.n	80089c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	7c12      	ldrb	r2, [r2, #16]
 80089b8:	f107 0108 	add.w	r1, r7, #8
 80089bc:	4610      	mov	r0, r2
 80089be:	4798      	blx	r3
 80089c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089c2:	e03c      	b.n	8008a3e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa5c 	bl	8008e84 <USBD_CtlError>
            err++;
 80089cc:	7afb      	ldrb	r3, [r7, #11]
 80089ce:	3301      	adds	r3, #1
 80089d0:	72fb      	strb	r3, [r7, #11]
          break;
 80089d2:	e034      	b.n	8008a3e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00b      	beq.n	80089f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	7c12      	ldrb	r2, [r2, #16]
 80089ec:	f107 0108 	add.w	r1, r7, #8
 80089f0:	4610      	mov	r0, r2
 80089f2:	4798      	blx	r3
 80089f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089f6:	e022      	b.n	8008a3e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fa42 	bl	8008e84 <USBD_CtlError>
            err++;
 8008a00:	7afb      	ldrb	r3, [r7, #11]
 8008a02:	3301      	adds	r3, #1
 8008a04:	72fb      	strb	r3, [r7, #11]
          break;
 8008a06:	e01a      	b.n	8008a3e <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00c      	beq.n	8008a2e <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1c:	683a      	ldr	r2, [r7, #0]
 8008a1e:	8852      	ldrh	r2, [r2, #2]
 8008a20:	b2d1      	uxtb	r1, r2
 8008a22:	f107 0208 	add.w	r2, r7, #8
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	4798      	blx	r3
 8008a2a:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8008a2c:	e006      	b.n	8008a3c <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fa27 	bl	8008e84 <USBD_CtlError>
            err++;
 8008a36:	7afb      	ldrb	r3, [r7, #11]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	72fb      	strb	r3, [r7, #11]
          break;
 8008a3c:	bf00      	nop
      }
      break;
 8008a3e:	e037      	b.n	8008ab0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	7c1b      	ldrb	r3, [r3, #16]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d109      	bne.n	8008a5c <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a50:	f107 0208 	add.w	r2, r7, #8
 8008a54:	4610      	mov	r0, r2
 8008a56:	4798      	blx	r3
 8008a58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a5a:	e029      	b.n	8008ab0 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa10 	bl	8008e84 <USBD_CtlError>
        err++;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	3301      	adds	r3, #1
 8008a68:	72fb      	strb	r3, [r7, #11]
      break;
 8008a6a:	e021      	b.n	8008ab0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	7c1b      	ldrb	r3, [r3, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10d      	bne.n	8008a90 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7c:	f107 0208 	add.w	r2, r7, #8
 8008a80:	4610      	mov	r0, r2
 8008a82:	4798      	blx	r3
 8008a84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	2207      	movs	r2, #7
 8008a8c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a8e:	e00f      	b.n	8008ab0 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f9f6 	bl	8008e84 <USBD_CtlError>
        err++;
 8008a98:	7afb      	ldrb	r3, [r7, #11]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a9e:	e007      	b.n	8008ab0 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f9ee 	bl	8008e84 <USBD_CtlError>
      err++;
 8008aa8:	7afb      	ldrb	r3, [r7, #11]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	72fb      	strb	r3, [r7, #11]
      break;
 8008aae:	bf00      	nop
  }

  if (err != 0U)
 8008ab0:	7afb      	ldrb	r3, [r7, #11]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d11e      	bne.n	8008af4 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	88db      	ldrh	r3, [r3, #6]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d016      	beq.n	8008aec <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 8008abe:	893b      	ldrh	r3, [r7, #8]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00e      	beq.n	8008ae2 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	88da      	ldrh	r2, [r3, #6]
 8008ac8:	893b      	ldrh	r3, [r7, #8]
 8008aca:	4293      	cmp	r3, r2
 8008acc:	bf28      	it	cs
 8008ace:	4613      	movcs	r3, r2
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ad4:	893b      	ldrh	r3, [r7, #8]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	68f9      	ldr	r1, [r7, #12]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fa43 	bl	8008f66 <USBD_CtlSendData>
 8008ae0:	e009      	b.n	8008af6 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f9cd 	bl	8008e84 <USBD_CtlError>
 8008aea:	e004      	b.n	8008af6 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fa94 	bl	800901a <USBD_CtlSendStatus>
 8008af2:	e000      	b.n	8008af6 <USBD_GetDescriptor+0x2f2>
    return;
 8008af4:	bf00      	nop
  }
}
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	889b      	ldrh	r3, [r3, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d131      	bne.n	8008b72 <USBD_SetAddress+0x76>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	88db      	ldrh	r3, [r3, #6]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d12d      	bne.n	8008b72 <USBD_SetAddress+0x76>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	885b      	ldrh	r3, [r3, #2]
 8008b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b1c:	d829      	bhi.n	8008b72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	885b      	ldrh	r3, [r3, #2]
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b03      	cmp	r3, #3
 8008b34:	d104      	bne.n	8008b40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f9a3 	bl	8008e84 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b3e:	e01d      	b.n	8008b7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	7bfa      	ldrb	r2, [r7, #15]
 8008b44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fcc2 	bl	80094d6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fa61 	bl	800901a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d004      	beq.n	8008b68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2202      	movs	r2, #2
 8008b62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b66:	e009      	b.n	8008b7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b70:	e004      	b.n	8008b7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f985 	bl	8008e84 <USBD_CtlError>
  }
}
 8008b7a:	bf00      	nop
 8008b7c:	bf00      	nop
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	885b      	ldrh	r3, [r3, #2]
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	4b4c      	ldr	r3, [pc, #304]	; (8008ccc <USBD_SetConfig+0x148>)
 8008b9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b9c:	4b4b      	ldr	r3, [pc, #300]	; (8008ccc <USBD_SetConfig+0x148>)
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d905      	bls.n	8008bb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f96c 	bl	8008e84 <USBD_CtlError>
    return USBD_FAIL;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e088      	b.n	8008cc2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d002      	beq.n	8008bc2 <USBD_SetConfig+0x3e>
 8008bbc:	2b03      	cmp	r3, #3
 8008bbe:	d025      	beq.n	8008c0c <USBD_SetConfig+0x88>
 8008bc0:	e071      	b.n	8008ca6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008bc2:	4b42      	ldr	r3, [pc, #264]	; (8008ccc <USBD_SetConfig+0x148>)
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d01c      	beq.n	8008c04 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008bca:	4b40      	ldr	r3, [pc, #256]	; (8008ccc <USBD_SetConfig+0x148>)
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bd4:	4b3d      	ldr	r3, [pc, #244]	; (8008ccc <USBD_SetConfig+0x148>)
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	4619      	mov	r1, r3
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7ff f93c 	bl	8007e58 <USBD_SetClassConfig>
 8008be0:	4603      	mov	r3, r0
 8008be2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d004      	beq.n	8008bf4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f949 	bl	8008e84 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bf2:	e065      	b.n	8008cc0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fa10 	bl	800901a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2203      	movs	r2, #3
 8008bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c02:	e05d      	b.n	8008cc0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fa08 	bl	800901a <USBD_CtlSendStatus>
      break;
 8008c0a:	e059      	b.n	8008cc0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c0c:	4b2f      	ldr	r3, [pc, #188]	; (8008ccc <USBD_SetConfig+0x148>)
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d112      	bne.n	8008c3a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c1c:	4b2b      	ldr	r3, [pc, #172]	; (8008ccc <USBD_SetConfig+0x148>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	461a      	mov	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c26:	4b29      	ldr	r3, [pc, #164]	; (8008ccc <USBD_SetConfig+0x148>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff f92f 	bl	8007e90 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f9f1 	bl	800901a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c38:	e042      	b.n	8008cc0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008c3a:	4b24      	ldr	r3, [pc, #144]	; (8008ccc <USBD_SetConfig+0x148>)
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d02a      	beq.n	8008c9e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff f91d 	bl	8007e90 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c56:	4b1d      	ldr	r3, [pc, #116]	; (8008ccc <USBD_SetConfig+0x148>)
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c60:	4b1a      	ldr	r3, [pc, #104]	; (8008ccc <USBD_SetConfig+0x148>)
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff f8f6 	bl	8007e58 <USBD_SetClassConfig>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00f      	beq.n	8008c96 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f903 	bl	8008e84 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7ff f902 	bl	8007e90 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c94:	e014      	b.n	8008cc0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f9bf 	bl	800901a <USBD_CtlSendStatus>
      break;
 8008c9c:	e010      	b.n	8008cc0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f9bb 	bl	800901a <USBD_CtlSendStatus>
      break;
 8008ca4:	e00c      	b.n	8008cc0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f8eb 	bl	8008e84 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cae:	4b07      	ldr	r3, [pc, #28]	; (8008ccc <USBD_SetConfig+0x148>)
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7ff f8eb 	bl	8007e90 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008cbe:	bf00      	nop
  }

  return ret;
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	200005e8 	.word	0x200005e8

08008cd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	88db      	ldrh	r3, [r3, #6]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d004      	beq.n	8008cec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f8cd 	bl	8008e84 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008cea:	e023      	b.n	8008d34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	dc02      	bgt.n	8008cfe <USBD_GetConfig+0x2e>
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	dc03      	bgt.n	8008d04 <USBD_GetConfig+0x34>
 8008cfc:	e015      	b.n	8008d2a <USBD_GetConfig+0x5a>
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	d00b      	beq.n	8008d1a <USBD_GetConfig+0x4a>
 8008d02:	e012      	b.n	8008d2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	3308      	adds	r3, #8
 8008d0e:	2201      	movs	r2, #1
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f927 	bl	8008f66 <USBD_CtlSendData>
        break;
 8008d18:	e00c      	b.n	8008d34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	2201      	movs	r2, #1
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f91f 	bl	8008f66 <USBD_CtlSendData>
        break;
 8008d28:	e004      	b.n	8008d34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f8a9 	bl	8008e84 <USBD_CtlError>
        break;
 8008d32:	bf00      	nop
}
 8008d34:	bf00      	nop
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d81e      	bhi.n	8008d92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	88db      	ldrh	r3, [r3, #6]
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d004      	beq.n	8008d66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f890 	bl	8008e84 <USBD_CtlError>
        break;
 8008d64:	e01a      	b.n	8008d9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d005      	beq.n	8008d82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	f043 0202 	orr.w	r2, r3, #2
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	330c      	adds	r3, #12
 8008d86:	2202      	movs	r2, #2
 8008d88:	4619      	mov	r1, r3
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f8eb 	bl	8008f66 <USBD_CtlSendData>
      break;
 8008d90:	e004      	b.n	8008d9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f875 	bl	8008e84 <USBD_CtlError>
      break;
 8008d9a:	bf00      	nop
  }
}
 8008d9c:	bf00      	nop
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	885b      	ldrh	r3, [r3, #2]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d106      	bne.n	8008dc4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f92b 	bl	800901a <USBD_CtlSendStatus>
  }
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	3b01      	subs	r3, #1
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d80b      	bhi.n	8008dfc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	885b      	ldrh	r3, [r3, #2]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d10c      	bne.n	8008e06 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f910 	bl	800901a <USBD_CtlSendStatus>
      }
      break;
 8008dfa:	e004      	b.n	8008e06 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f840 	bl	8008e84 <USBD_CtlError>
      break;
 8008e04:	e000      	b.n	8008e08 <USBD_ClrFeature+0x3c>
      break;
 8008e06:	bf00      	nop
  }
}
 8008e08:	bf00      	nop
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	781a      	ldrb	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	781a      	ldrb	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f7ff faaa 	bl	8008394 <SWAPBYTE>
 8008e40:	4603      	mov	r3, r0
 8008e42:	461a      	mov	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	3301      	adds	r3, #1
 8008e52:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f7ff fa9d 	bl	8008394 <SWAPBYTE>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3301      	adds	r3, #1
 8008e66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f7ff fa90 	bl	8008394 <SWAPBYTE>
 8008e74:	4603      	mov	r3, r0
 8008e76:	461a      	mov	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	80da      	strh	r2, [r3, #6]
}
 8008e7c:	bf00      	nop
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e8e:	2180      	movs	r1, #128	; 0x80
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fab6 	bl	8009402 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e96:	2100      	movs	r1, #0
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fab2 	bl	8009402 <USBD_LL_StallEP>
}
 8008e9e:	bf00      	nop
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b086      	sub	sp, #24
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	60b9      	str	r1, [r7, #8]
 8008eb0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d036      	beq.n	8008f2a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ec0:	6938      	ldr	r0, [r7, #16]
 8008ec2:	f000 f836 	bl	8008f32 <USBD_GetLen>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	3301      	adds	r3, #1
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	005b      	lsls	r3, r3, #1
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ed4:	7dfb      	ldrb	r3, [r7, #23]
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	4413      	add	r3, r2
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	7812      	ldrb	r2, [r2, #0]
 8008ede:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	4413      	add	r3, r2
 8008eec:	2203      	movs	r2, #3
 8008eee:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ef6:	e013      	b.n	8008f20 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	4413      	add	r3, r2
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	7812      	ldrb	r2, [r2, #0]
 8008f02:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	3301      	adds	r3, #1
 8008f08:	613b      	str	r3, [r7, #16]
    idx++;
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f10:	7dfb      	ldrb	r3, [r7, #23]
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	4413      	add	r3, r2
 8008f16:	2200      	movs	r2, #0
 8008f18:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1e7      	bne.n	8008ef8 <USBD_GetString+0x52>
 8008f28:	e000      	b.n	8008f2c <USBD_GetString+0x86>
    return;
 8008f2a:	bf00      	nop
  }
}
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b085      	sub	sp, #20
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f42:	e005      	b.n	8008f50 <USBD_GetLen+0x1e>
  {
    len++;
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
 8008f46:	3301      	adds	r3, #1
 8008f48:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1f5      	bne.n	8008f44 <USBD_GetLen+0x12>
  }

  return len;
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2202      	movs	r2, #2
 8008f76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f000 fac1 	bl	8009514 <USBD_LL_Transmit>

  return USBD_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	2100      	movs	r1, #0
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f000 fab0 	bl	8009514 <USBD_LL_Transmit>

  return USBD_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2203      	movs	r2, #3
 8008fce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 fab4 	bl	8009556 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	2100      	movs	r1, #0
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 faa3 	bl	8009556 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2204      	movs	r2, #4
 8009026:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800902a:	2300      	movs	r3, #0
 800902c:	2200      	movs	r2, #0
 800902e:	2100      	movs	r1, #0
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fa6f 	bl	8009514 <USBD_LL_Transmit>

  return USBD_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2205      	movs	r2, #5
 800904c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009050:	2300      	movs	r3, #0
 8009052:	2200      	movs	r2, #0
 8009054:	2100      	movs	r1, #0
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fa7d 	bl	8009556 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b082      	sub	sp, #8
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800907a:	4619      	mov	r1, r3
 800907c:	4610      	mov	r0, r2
 800907e:	f7fe ff1f 	bl	8007ec0 <USBD_LL_SetupStage>
}
 8009082:	bf00      	nop
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b082      	sub	sp, #8
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	460b      	mov	r3, r1
 8009094:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800909c:	78fa      	ldrb	r2, [r7, #3]
 800909e:	6879      	ldr	r1, [r7, #4]
 80090a0:	4613      	mov	r3, r2
 80090a2:	00db      	lsls	r3, r3, #3
 80090a4:	1a9b      	subs	r3, r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	440b      	add	r3, r1
 80090aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	78fb      	ldrb	r3, [r7, #3]
 80090b2:	4619      	mov	r1, r3
 80090b4:	f7fe ff59 	bl	8007f6a <USBD_LL_DataOutStage>
}
 80090b8:	bf00      	nop
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	460b      	mov	r3, r1
 80090ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80090d2:	78fa      	ldrb	r2, [r7, #3]
 80090d4:	6879      	ldr	r1, [r7, #4]
 80090d6:	4613      	mov	r3, r2
 80090d8:	00db      	lsls	r3, r3, #3
 80090da:	1a9b      	subs	r3, r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	440b      	add	r3, r1
 80090e0:	3348      	adds	r3, #72	; 0x48
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	4619      	mov	r1, r3
 80090e8:	f7fe ffa2 	bl	8008030 <USBD_LL_DataInStage>
}
 80090ec:	bf00      	nop
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009102:	4618      	mov	r0, r3
 8009104:	f7ff f8b1 	bl	800826a <USBD_LL_SOF>
}
 8009108:	bf00      	nop
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009118:	2301      	movs	r3, #1
 800911a:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	2b02      	cmp	r3, #2
 8009122:	d102      	bne.n	800912a <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 8009124:	2301      	movs	r3, #1
 8009126:	73fb      	strb	r3, [r7, #15]
 8009128:	e008      	b.n	800913c <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 8009132:	2300      	movs	r3, #0
 8009134:	73fb      	strb	r3, [r7, #15]
 8009136:	e001      	b.n	800913c <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 8009138:	f7f7 fb6a 	bl	8000810 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009142:	7bfa      	ldrb	r2, [r7, #15]
 8009144:	4611      	mov	r1, r2
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff f851 	bl	80081ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009152:	4618      	mov	r0, r3
 8009154:	f7ff f802 	bl	800815c <USBD_LL_Reset>
}
 8009158:	bf00      	nop
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800916e:	4618      	mov	r0, r3
 8009170:	f7ff f84d 	bl	800820e <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	6812      	ldr	r2, [r2, #0]
 8009182:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009186:	f043 0301 	orr.w	r3, r3, #1
 800918a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d005      	beq.n	80091a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009194:	4b04      	ldr	r3, [pc, #16]	; (80091a8 <HAL_PCD_SuspendCallback+0x48>)
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	4a03      	ldr	r2, [pc, #12]	; (80091a8 <HAL_PCD_SuspendCallback+0x48>)
 800919a:	f043 0306 	orr.w	r3, r3, #6
 800919e:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	e000ed00 	.word	0xe000ed00

080091ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7ff f83d 	bl	800823a <USBD_LL_Resume>
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091da:	78fa      	ldrb	r2, [r7, #3]
 80091dc:	4611      	mov	r1, r2
 80091de:	4618      	mov	r0, r3
 80091e0:	f7ff f88b 	bl	80082fa <USBD_LL_IsoOUTIncomplete>
}
 80091e4:	bf00      	nop
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091fe:	78fa      	ldrb	r2, [r7, #3]
 8009200:	4611      	mov	r1, r2
 8009202:	4618      	mov	r0, r3
 8009204:	f7ff f853 	bl	80082ae <USBD_LL_IsoINIncomplete>
}
 8009208:	bf00      	nop
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800921e:	4618      	mov	r0, r3
 8009220:	f7ff f891 	bl	8008346 <USBD_LL_DevConnected>
}
 8009224:	bf00      	nop
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800923a:	4618      	mov	r0, r3
 800923c:	f7ff f88e 	bl	800835c <USBD_LL_DevDisconnected>
}
 8009240:	bf00      	nop
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 8009250:	4b27      	ldr	r3, [pc, #156]	; (80092f0 <USBD_LL_Init+0xa8>)
 8009252:	4a28      	ldr	r2, [pc, #160]	; (80092f4 <USBD_LL_Init+0xac>)
 8009254:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d142      	bne.n	80092e4 <USBD_LL_Init+0x9c>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800925e:	4b24      	ldr	r3, [pc, #144]	; (80092f0 <USBD_LL_Init+0xa8>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    pdev->pData = hpcd_USB_OTG_PTR;
 8009268:	4b21      	ldr	r3, [pc, #132]	; (80092f0 <USBD_LL_Init+0xa8>)
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
    pma_track += 128;
#endif

#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFo(hpcd_USB_OTG_PTR, 128); // ALL OUT EP Buffer
 8009272:	4b1f      	ldr	r3, [pc, #124]	; (80092f0 <USBD_LL_Init+0xa8>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2180      	movs	r1, #128	; 0x80
 8009278:	4618      	mov	r0, r3
 800927a:	f7f9 f956 	bl	800252a <HAL_PCDEx_SetRxFiFo>

    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, 0, 16); // EP0 IN
 800927e:	4b1c      	ldr	r3, [pc, #112]	; (80092f0 <USBD_LL_Init+0xa8>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2210      	movs	r2, #16
 8009284:	2100      	movs	r1, #0
 8009286:	4618      	mov	r0, r3
 8009288:	f7f9 f908 	bl	800249c <HAL_PCDEx_SetTxFiFo>

#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]
 8009290:	e01a      	b.n	80092c8 <USBD_LL_Init+0x80>
    {
      HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 32);
 8009292:	4b17      	ldr	r3, [pc, #92]	; (80092f0 <USBD_LL_Init+0xa8>)
 8009294:	6818      	ldr	r0, [r3, #0]
 8009296:	7bfb      	ldrb	r3, [r7, #15]
 8009298:	4a17      	ldr	r2, [pc, #92]	; (80092f8 <USBD_LL_Init+0xb0>)
 800929a:	5cd3      	ldrb	r3, [r2, r3]
 800929c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2220      	movs	r2, #32
 80092a4:	4619      	mov	r1, r3
 80092a6:	f7f9 f8f9 	bl	800249c <HAL_PCDEx_SetTxFiFo>
      HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 16);
 80092aa:	4b11      	ldr	r3, [pc, #68]	; (80092f0 <USBD_LL_Init+0xa8>)
 80092ac:	6818      	ldr	r0, [r3, #0]
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
 80092b0:	4a12      	ldr	r2, [pc, #72]	; (80092fc <USBD_LL_Init+0xb4>)
 80092b2:	5cd3      	ldrb	r3, [r2, r3]
 80092b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2210      	movs	r2, #16
 80092bc:	4619      	mov	r1, r3
 80092be:	f7f9 f8ed 	bl	800249c <HAL_PCDEx_SetTxFiFo>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	3301      	adds	r3, #1
 80092c6:	73fb      	strb	r3, [r7, #15]
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0e1      	beq.n	8009292 <USBD_LL_Init+0x4a>
#endif
#if (USBD_USE_UVC == 1)
    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (UVC_IN_EP & 0x7F), 512);
#endif
#if (USBD_USE_MSC == 1)
    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (MSC_IN_EP & 0x7F), 32);
 80092ce:	4b08      	ldr	r3, [pc, #32]	; (80092f0 <USBD_LL_Init+0xa8>)
 80092d0:	6818      	ldr	r0, [r3, #0]
 80092d2:	4b0b      	ldr	r3, [pc, #44]	; (8009300 <USBD_LL_Init+0xb8>)
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2220      	movs	r2, #32
 80092de:	4619      	mov	r1, r3
 80092e0:	f7f9 f8dc 	bl	800249c <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	2000dd48 	.word	0x2000dd48
 80092f4:	20005014 	.word	0x20005014
 80092f8:	2000da50 	.word	0x2000da50
 80092fc:	2000dc7c 	.word	0x2000dc7c
 8009300:	200001ba 	.word	0x200001ba

08009304 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800931a:	4618      	mov	r0, r3
 800931c:	f7f8 f88e 	bl	800143c <HAL_PCD_Start>
 8009320:	4603      	mov	r3, r0
 8009322:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009324:	7bfb      	ldrb	r3, [r7, #15]
 8009326:	4618      	mov	r0, r3
 8009328:	f000 f94a 	bl	80095c0 <USBD_Get_USB_Status>
 800932c:	4603      	mov	r3, r0
 800932e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009330:	7bbb      	ldrb	r3, [r7, #14]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	4608      	mov	r0, r1
 8009344:	4611      	mov	r1, r2
 8009346:	461a      	mov	r2, r3
 8009348:	4603      	mov	r3, r0
 800934a:	70fb      	strb	r3, [r7, #3]
 800934c:	460b      	mov	r3, r1
 800934e:	70bb      	strb	r3, [r7, #2]
 8009350:	4613      	mov	r3, r2
 8009352:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8009362:	78bb      	ldrb	r3, [r7, #2]
 8009364:	883a      	ldrh	r2, [r7, #0]
 8009366:	78f9      	ldrb	r1, [r7, #3]
 8009368:	f7f8 fc72 	bl	8001c50 <HAL_PCD_EP_Open>
 800936c:	4603      	mov	r3, r0
 800936e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009370:	7bfb      	ldrb	r3, [r7, #15]
 8009372:	4618      	mov	r0, r3
 8009374:	f000 f924 	bl	80095c0 <USBD_Get_USB_Status>
 8009378:	4603      	mov	r3, r0
 800937a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800937c:	7bbb      	ldrb	r3, [r7, #14]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b084      	sub	sp, #16
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	460b      	mov	r3, r1
 8009390:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80093a0:	78fa      	ldrb	r2, [r7, #3]
 80093a2:	4611      	mov	r1, r2
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7f8 fcbb 	bl	8001d20 <HAL_PCD_EP_Close>
 80093aa:	4603      	mov	r3, r0
 80093ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f000 f905 	bl	80095c0 <USBD_Get_USB_Status>
 80093b6:	4603      	mov	r3, r0
 80093b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	460b      	mov	r3, r1
 80093ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80093de:	78fa      	ldrb	r2, [r7, #3]
 80093e0:	4611      	mov	r1, r2
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7f8 fe4d 	bl	8002082 <HAL_PCD_EP_Flush>
 80093e8:	4603      	mov	r3, r0
 80093ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 f8e6 	bl	80095c0 <USBD_Get_USB_Status>
 80093f4:	4603      	mov	r3, r0
 80093f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b084      	sub	sp, #16
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	460b      	mov	r3, r1
 800940c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800941c:	78fa      	ldrb	r2, [r7, #3]
 800941e:	4611      	mov	r1, r2
 8009420:	4618      	mov	r0, r3
 8009422:	f7f8 fd74 	bl	8001f0e <HAL_PCD_EP_SetStall>
 8009426:	4603      	mov	r3, r0
 8009428:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	4618      	mov	r0, r3
 800942e:	f000 f8c7 	bl	80095c0 <USBD_Get_USB_Status>
 8009432:	4603      	mov	r3, r0
 8009434:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009436:	7bbb      	ldrb	r3, [r7, #14]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	460b      	mov	r3, r1
 800944a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800945a:	78fa      	ldrb	r2, [r7, #3]
 800945c:	4611      	mov	r1, r2
 800945e:	4618      	mov	r0, r3
 8009460:	f7f8 fdb9 	bl	8001fd6 <HAL_PCD_EP_ClrStall>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009468:	7bfb      	ldrb	r3, [r7, #15]
 800946a:	4618      	mov	r0, r3
 800946c:	f000 f8a8 	bl	80095c0 <USBD_Get_USB_Status>
 8009470:	4603      	mov	r3, r0
 8009472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009474:	7bbb      	ldrb	r3, [r7, #14]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800947e:	b480      	push	{r7}
 8009480:	b085      	sub	sp, #20
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	460b      	mov	r3, r1
 8009488:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8009490:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 8009492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009496:	2b00      	cmp	r3, #0
 8009498:	da0b      	bge.n	80094b2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094a0:	68f9      	ldr	r1, [r7, #12]
 80094a2:	4613      	mov	r3, r2
 80094a4:	00db      	lsls	r3, r3, #3
 80094a6:	1a9b      	subs	r3, r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	440b      	add	r3, r1
 80094ac:	333e      	adds	r3, #62	; 0x3e
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	e00b      	b.n	80094ca <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094b2:	78fb      	ldrb	r3, [r7, #3]
 80094b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094b8:	68f9      	ldr	r1, [r7, #12]
 80094ba:	4613      	mov	r3, r2
 80094bc:	00db      	lsls	r3, r3, #3
 80094be:	1a9b      	subs	r3, r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	440b      	add	r3, r1
 80094c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094c8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b084      	sub	sp, #16
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	460b      	mov	r3, r1
 80094e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80094f0:	78fa      	ldrb	r2, [r7, #3]
 80094f2:	4611      	mov	r1, r2
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7f8 fb86 	bl	8001c06 <HAL_PCD_SetAddress>
 80094fa:	4603      	mov	r3, r0
 80094fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	4618      	mov	r0, r3
 8009502:	f000 f85d 	bl	80095c0 <USBD_Get_USB_Status>
 8009506:	4603      	mov	r3, r0
 8009508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800950a:	7bbb      	ldrb	r3, [r7, #14]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	607a      	str	r2, [r7, #4]
 800951e:	603b      	str	r3, [r7, #0]
 8009520:	460b      	mov	r3, r1
 8009522:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8009532:	7af9      	ldrb	r1, [r7, #11]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	f7f8 fc9f 	bl	8001e7a <HAL_PCD_EP_Transmit>
 800953c:	4603      	mov	r3, r0
 800953e:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009540:	7dfb      	ldrb	r3, [r7, #23]
 8009542:	4618      	mov	r0, r3
 8009544:	f000 f83c 	bl	80095c0 <USBD_Get_USB_Status>
 8009548:	4603      	mov	r3, r0
 800954a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800954c:	7dbb      	ldrb	r3, [r7, #22]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3718      	adds	r7, #24
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b086      	sub	sp, #24
 800955a:	af00      	add	r7, sp, #0
 800955c:	60f8      	str	r0, [r7, #12]
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	603b      	str	r3, [r7, #0]
 8009562:	460b      	mov	r3, r1
 8009564:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8009574:	7af9      	ldrb	r1, [r7, #11]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	f7f8 fc1b 	bl	8001db4 <HAL_PCD_EP_Receive>
 800957e:	4603      	mov	r3, r0
 8009580:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009582:	7dfb      	ldrb	r3, [r7, #23]
 8009584:	4618      	mov	r0, r3
 8009586:	f000 f81b 	bl	80095c0 <USBD_Get_USB_Status>
 800958a:	4603      	mov	r3, r0
 800958c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800958e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3718      	adds	r7, #24
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80095aa:	78fa      	ldrb	r2, [r7, #3]
 80095ac:	4611      	mov	r1, r2
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7f8 fc4b 	bl	8001e4a <HAL_PCD_EP_GetRxCount>
 80095b4:	4603      	mov	r3, r0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
	...

080095c0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	4603      	mov	r3, r0
 80095c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095ce:	79fb      	ldrb	r3, [r7, #7]
 80095d0:	2b03      	cmp	r3, #3
 80095d2:	d817      	bhi.n	8009604 <USBD_Get_USB_Status+0x44>
 80095d4:	a201      	add	r2, pc, #4	; (adr r2, 80095dc <USBD_Get_USB_Status+0x1c>)
 80095d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095da:	bf00      	nop
 80095dc:	080095ed 	.word	0x080095ed
 80095e0:	080095f3 	.word	0x080095f3
 80095e4:	080095f9 	.word	0x080095f9
 80095e8:	080095ff 	.word	0x080095ff
  {
  case HAL_OK:
    usb_status = USBD_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	73fb      	strb	r3, [r7, #15]
    break;
 80095f0:	e00b      	b.n	800960a <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 80095f2:	2303      	movs	r3, #3
 80095f4:	73fb      	strb	r3, [r7, #15]
    break;
 80095f6:	e008      	b.n	800960a <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 80095f8:	2301      	movs	r3, #1
 80095fa:	73fb      	strb	r3, [r7, #15]
    break;
 80095fc:	e005      	b.n	800960a <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 80095fe:	2303      	movs	r3, #3
 8009600:	73fb      	strb	r3, [r7, #15]
    break;
 8009602:	e002      	b.n	800960a <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 8009604:	2303      	movs	r3, #3
 8009606:	73fb      	strb	r3, [r7, #15]
    break;
 8009608:	bf00      	nop
  }
  return usb_status;
 800960a:	7bfb      	ldrb	r3, [r7, #15]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <__NVIC_SetPriority>:
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	6039      	str	r1, [r7, #0]
 8009622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009628:	2b00      	cmp	r3, #0
 800962a:	db0a      	blt.n	8009642 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	b2da      	uxtb	r2, r3
 8009630:	490c      	ldr	r1, [pc, #48]	; (8009664 <__NVIC_SetPriority+0x4c>)
 8009632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009636:	0112      	lsls	r2, r2, #4
 8009638:	b2d2      	uxtb	r2, r2
 800963a:	440b      	add	r3, r1
 800963c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009640:	e00a      	b.n	8009658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	b2da      	uxtb	r2, r3
 8009646:	4908      	ldr	r1, [pc, #32]	; (8009668 <__NVIC_SetPriority+0x50>)
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	f003 030f 	and.w	r3, r3, #15
 800964e:	3b04      	subs	r3, #4
 8009650:	0112      	lsls	r2, r2, #4
 8009652:	b2d2      	uxtb	r2, r2
 8009654:	440b      	add	r3, r1
 8009656:	761a      	strb	r2, [r3, #24]
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	e000e100 	.word	0xe000e100
 8009668:	e000ed00 	.word	0xe000ed00

0800966c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800966c:	b580      	push	{r7, lr}
 800966e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009670:	4b05      	ldr	r3, [pc, #20]	; (8009688 <SysTick_Handler+0x1c>)
 8009672:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009674:	f001 fd4e 	bl	800b114 <xTaskGetSchedulerState>
 8009678:	4603      	mov	r3, r0
 800967a:	2b01      	cmp	r3, #1
 800967c:	d001      	beq.n	8009682 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800967e:	f002 fb33 	bl	800bce8 <xPortSysTickHandler>
  }
}
 8009682:	bf00      	nop
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	e000e010 	.word	0xe000e010

0800968c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800968c:	b580      	push	{r7, lr}
 800968e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009690:	2100      	movs	r1, #0
 8009692:	f06f 0004 	mvn.w	r0, #4
 8009696:	f7ff ffbf 	bl	8009618 <__NVIC_SetPriority>
#endif
}
 800969a:	bf00      	nop
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096a6:	f3ef 8305 	mrs	r3, IPSR
 80096aa:	603b      	str	r3, [r7, #0]
  return(result);
 80096ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d003      	beq.n	80096ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80096b2:	f06f 0305 	mvn.w	r3, #5
 80096b6:	607b      	str	r3, [r7, #4]
 80096b8:	e00c      	b.n	80096d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80096ba:	4b0a      	ldr	r3, [pc, #40]	; (80096e4 <osKernelInitialize+0x44>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d105      	bne.n	80096ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80096c2:	4b08      	ldr	r3, [pc, #32]	; (80096e4 <osKernelInitialize+0x44>)
 80096c4:	2201      	movs	r2, #1
 80096c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	607b      	str	r3, [r7, #4]
 80096cc:	e002      	b.n	80096d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80096ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80096d4:	687b      	ldr	r3, [r7, #4]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	200005ec 	.word	0x200005ec

080096e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096ee:	f3ef 8305 	mrs	r3, IPSR
 80096f2:	603b      	str	r3, [r7, #0]
  return(result);
 80096f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <osKernelStart+0x1a>
    stat = osErrorISR;
 80096fa:	f06f 0305 	mvn.w	r3, #5
 80096fe:	607b      	str	r3, [r7, #4]
 8009700:	e010      	b.n	8009724 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009702:	4b0b      	ldr	r3, [pc, #44]	; (8009730 <osKernelStart+0x48>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d109      	bne.n	800971e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800970a:	f7ff ffbf 	bl	800968c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800970e:	4b08      	ldr	r3, [pc, #32]	; (8009730 <osKernelStart+0x48>)
 8009710:	2202      	movs	r2, #2
 8009712:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009714:	f001 f890 	bl	800a838 <vTaskStartScheduler>
      stat = osOK;
 8009718:	2300      	movs	r3, #0
 800971a:	607b      	str	r3, [r7, #4]
 800971c:	e002      	b.n	8009724 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800971e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009722:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009724:	687b      	ldr	r3, [r7, #4]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	200005ec 	.word	0x200005ec

08009734 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800973a:	f3ef 8305 	mrs	r3, IPSR
 800973e:	603b      	str	r3, [r7, #0]
  return(result);
 8009740:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009742:	2b00      	cmp	r3, #0
 8009744:	d003      	beq.n	800974e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009746:	f001 f9a3 	bl	800aa90 <xTaskGetTickCountFromISR>
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	e002      	b.n	8009754 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800974e:	f001 f98f 	bl	800aa70 <xTaskGetTickCount>
 8009752:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009754:	687b      	ldr	r3, [r7, #4]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800975e:	b580      	push	{r7, lr}
 8009760:	b08e      	sub	sp, #56	; 0x38
 8009762:	af04      	add	r7, sp, #16
 8009764:	60f8      	str	r0, [r7, #12]
 8009766:	60b9      	str	r1, [r7, #8]
 8009768:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800976a:	2300      	movs	r3, #0
 800976c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800976e:	f3ef 8305 	mrs	r3, IPSR
 8009772:	617b      	str	r3, [r7, #20]
  return(result);
 8009774:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009776:	2b00      	cmp	r3, #0
 8009778:	d17e      	bne.n	8009878 <osThreadNew+0x11a>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d07b      	beq.n	8009878 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009780:	2380      	movs	r3, #128	; 0x80
 8009782:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009784:	2318      	movs	r3, #24
 8009786:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009788:	2300      	movs	r3, #0
 800978a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800978c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009790:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d045      	beq.n	8009824 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <osThreadNew+0x48>
        name = attr->name;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d002      	beq.n	80097b4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d008      	beq.n	80097cc <osThreadNew+0x6e>
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	2b38      	cmp	r3, #56	; 0x38
 80097be:	d805      	bhi.n	80097cc <osThreadNew+0x6e>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <osThreadNew+0x72>
        return (NULL);
 80097cc:	2300      	movs	r3, #0
 80097ce:	e054      	b.n	800987a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	695b      	ldr	r3, [r3, #20]
 80097dc:	089b      	lsrs	r3, r3, #2
 80097de:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00e      	beq.n	8009806 <osThreadNew+0xa8>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	2bbb      	cmp	r3, #187	; 0xbb
 80097ee:	d90a      	bls.n	8009806 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d006      	beq.n	8009806 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	695b      	ldr	r3, [r3, #20]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d002      	beq.n	8009806 <osThreadNew+0xa8>
        mem = 1;
 8009800:	2301      	movs	r3, #1
 8009802:	61bb      	str	r3, [r7, #24]
 8009804:	e010      	b.n	8009828 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10c      	bne.n	8009828 <osThreadNew+0xca>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d108      	bne.n	8009828 <osThreadNew+0xca>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d104      	bne.n	8009828 <osThreadNew+0xca>
          mem = 0;
 800981e:	2300      	movs	r3, #0
 8009820:	61bb      	str	r3, [r7, #24]
 8009822:	e001      	b.n	8009828 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009824:	2300      	movs	r3, #0
 8009826:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d110      	bne.n	8009850 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009836:	9202      	str	r2, [sp, #8]
 8009838:	9301      	str	r3, [sp, #4]
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	6a3a      	ldr	r2, [r7, #32]
 8009842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 fe0b 	bl	800a460 <xTaskCreateStatic>
 800984a:	4603      	mov	r3, r0
 800984c:	613b      	str	r3, [r7, #16]
 800984e:	e013      	b.n	8009878 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d110      	bne.n	8009878 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	b29a      	uxth	r2, r3
 800985a:	f107 0310 	add.w	r3, r7, #16
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 fe56 	bl	800a51a <xTaskCreate>
 800986e:	4603      	mov	r3, r0
 8009870:	2b01      	cmp	r3, #1
 8009872:	d001      	beq.n	8009878 <osThreadNew+0x11a>
            hTask = NULL;
 8009874:	2300      	movs	r3, #0
 8009876:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009878:	693b      	ldr	r3, [r7, #16]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3728      	adds	r7, #40	; 0x28
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009882:	b580      	push	{r7, lr}
 8009884:	b084      	sub	sp, #16
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800988a:	f3ef 8305 	mrs	r3, IPSR
 800988e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009890:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <osDelay+0x1c>
    stat = osErrorISR;
 8009896:	f06f 0305 	mvn.w	r3, #5
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	e007      	b.n	80098ae <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800989e:	2300      	movs	r3, #0
 80098a0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d002      	beq.n	80098ae <osDelay+0x2c>
      vTaskDelay(ticks);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 ff91 	bl	800a7d0 <vTaskDelay>
    }
  }

  return (stat);
 80098ae:	68fb      	ldr	r3, [r7, #12]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	4a07      	ldr	r2, [pc, #28]	; (80098e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80098c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	4a06      	ldr	r2, [pc, #24]	; (80098e8 <vApplicationGetIdleTaskMemory+0x30>)
 80098ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2280      	movs	r2, #128	; 0x80
 80098d4:	601a      	str	r2, [r3, #0]
}
 80098d6:	bf00      	nop
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	200005f0 	.word	0x200005f0
 80098e8:	200006ac 	.word	0x200006ac

080098ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	4a07      	ldr	r2, [pc, #28]	; (8009918 <vApplicationGetTimerTaskMemory+0x2c>)
 80098fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	4a06      	ldr	r2, [pc, #24]	; (800991c <vApplicationGetTimerTaskMemory+0x30>)
 8009902:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800990a:	601a      	str	r2, [r3, #0]
}
 800990c:	bf00      	nop
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	200008ac 	.word	0x200008ac
 800991c:	20000968 	.word	0x20000968

08009920 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f103 0208 	add.w	r2, r3, #8
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009938:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f103 0208 	add.w	r2, r3, #8
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f103 0208 	add.w	r2, r3, #8
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800996e:	bf00      	nop
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800997a:	b480      	push	{r7}
 800997c:	b085      	sub	sp, #20
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	689a      	ldr	r2, [r3, #8]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	683a      	ldr	r2, [r7, #0]
 800999e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	683a      	ldr	r2, [r7, #0]
 80099a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	1c5a      	adds	r2, r3, #1
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	601a      	str	r2, [r3, #0]
}
 80099b6:	bf00      	nop
 80099b8:	3714      	adds	r7, #20
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr

080099c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099c2:	b480      	push	{r7}
 80099c4:	b085      	sub	sp, #20
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099d8:	d103      	bne.n	80099e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	60fb      	str	r3, [r7, #12]
 80099e0:	e00c      	b.n	80099fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	3308      	adds	r3, #8
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	e002      	b.n	80099f0 <vListInsert+0x2e>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d2f6      	bcs.n	80099ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	1c5a      	adds	r2, r3, #1
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	601a      	str	r2, [r3, #0]
}
 8009a28:	bf00      	nop
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	6892      	ldr	r2, [r2, #8]
 8009a4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	6852      	ldr	r2, [r2, #4]
 8009a54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d103      	bne.n	8009a68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	1e5a      	subs	r2, r3, #1
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10a      	bne.n	8009ab2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009aae:	bf00      	nop
 8009ab0:	e7fe      	b.n	8009ab0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ab2:	f002 f887 	bl	800bbc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009abe:	68f9      	ldr	r1, [r7, #12]
 8009ac0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ac2:	fb01 f303 	mul.w	r3, r1, r3
 8009ac6:	441a      	add	r2, r3
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	68f9      	ldr	r1, [r7, #12]
 8009ae6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ae8:	fb01 f303 	mul.w	r3, r1, r3
 8009aec:	441a      	add	r2, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	22ff      	movs	r2, #255	; 0xff
 8009af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	22ff      	movs	r2, #255	; 0xff
 8009afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d114      	bne.n	8009b32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d01a      	beq.n	8009b46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	3310      	adds	r3, #16
 8009b14:	4618      	mov	r0, r3
 8009b16:	f001 f93b 	bl	800ad90 <xTaskRemoveFromEventList>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d012      	beq.n	8009b46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b20:	4b0c      	ldr	r3, [pc, #48]	; (8009b54 <xQueueGenericReset+0xcc>)
 8009b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	e009      	b.n	8009b46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	3310      	adds	r3, #16
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7ff fef2 	bl	8009920 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	3324      	adds	r3, #36	; 0x24
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7ff feed 	bl	8009920 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b46:	f002 f86d 	bl	800bc24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b4a:	2301      	movs	r3, #1
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	e000ed04 	.word	0xe000ed04

08009b58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08e      	sub	sp, #56	; 0x38
 8009b5c:	af02      	add	r7, sp, #8
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
 8009b64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10a      	bne.n	8009b82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b7e:	bf00      	nop
 8009b80:	e7fe      	b.n	8009b80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10a      	bne.n	8009b9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b9a:	bf00      	nop
 8009b9c:	e7fe      	b.n	8009b9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d002      	beq.n	8009baa <xQueueGenericCreateStatic+0x52>
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d001      	beq.n	8009bae <xQueueGenericCreateStatic+0x56>
 8009baa:	2301      	movs	r3, #1
 8009bac:	e000      	b.n	8009bb0 <xQueueGenericCreateStatic+0x58>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10a      	bne.n	8009bca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	623b      	str	r3, [r7, #32]
}
 8009bc6:	bf00      	nop
 8009bc8:	e7fe      	b.n	8009bc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d102      	bne.n	8009bd6 <xQueueGenericCreateStatic+0x7e>
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d101      	bne.n	8009bda <xQueueGenericCreateStatic+0x82>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e000      	b.n	8009bdc <xQueueGenericCreateStatic+0x84>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10a      	bne.n	8009bf6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	61fb      	str	r3, [r7, #28]
}
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009bf6:	2350      	movs	r3, #80	; 0x50
 8009bf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	2b50      	cmp	r3, #80	; 0x50
 8009bfe:	d00a      	beq.n	8009c16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	61bb      	str	r3, [r7, #24]
}
 8009c12:	bf00      	nop
 8009c14:	e7fe      	b.n	8009c14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00d      	beq.n	8009c3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	4613      	mov	r3, r2
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	68b9      	ldr	r1, [r7, #8]
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 f805 	bl	8009c48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3730      	adds	r7, #48	; 0x30
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
 8009c54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d103      	bne.n	8009c64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	69ba      	ldr	r2, [r7, #24]
 8009c60:	601a      	str	r2, [r3, #0]
 8009c62:	e002      	b.n	8009c6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c76:	2101      	movs	r1, #1
 8009c78:	69b8      	ldr	r0, [r7, #24]
 8009c7a:	f7ff ff05 	bl	8009a88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	78fa      	ldrb	r2, [r7, #3]
 8009c82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009c86:	bf00      	nop
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
	...

08009c90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08e      	sub	sp, #56	; 0x38
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10a      	bne.n	8009cc2 <xQueueGenericSend+0x32>
	__asm volatile
 8009cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb0:	f383 8811 	msr	BASEPRI, r3
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009cbe:	bf00      	nop
 8009cc0:	e7fe      	b.n	8009cc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d103      	bne.n	8009cd0 <xQueueGenericSend+0x40>
 8009cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d101      	bne.n	8009cd4 <xQueueGenericSend+0x44>
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e000      	b.n	8009cd6 <xQueueGenericSend+0x46>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10a      	bne.n	8009cf0 <xQueueGenericSend+0x60>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cec:	bf00      	nop
 8009cee:	e7fe      	b.n	8009cee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d103      	bne.n	8009cfe <xQueueGenericSend+0x6e>
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d101      	bne.n	8009d02 <xQueueGenericSend+0x72>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e000      	b.n	8009d04 <xQueueGenericSend+0x74>
 8009d02:	2300      	movs	r3, #0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10a      	bne.n	8009d1e <xQueueGenericSend+0x8e>
	__asm volatile
 8009d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0c:	f383 8811 	msr	BASEPRI, r3
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	623b      	str	r3, [r7, #32]
}
 8009d1a:	bf00      	nop
 8009d1c:	e7fe      	b.n	8009d1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d1e:	f001 f9f9 	bl	800b114 <xTaskGetSchedulerState>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d102      	bne.n	8009d2e <xQueueGenericSend+0x9e>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d101      	bne.n	8009d32 <xQueueGenericSend+0xa2>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e000      	b.n	8009d34 <xQueueGenericSend+0xa4>
 8009d32:	2300      	movs	r3, #0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10a      	bne.n	8009d4e <xQueueGenericSend+0xbe>
	__asm volatile
 8009d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3c:	f383 8811 	msr	BASEPRI, r3
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	61fb      	str	r3, [r7, #28]
}
 8009d4a:	bf00      	nop
 8009d4c:	e7fe      	b.n	8009d4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d4e:	f001 ff39 	bl	800bbc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d302      	bcc.n	8009d64 <xQueueGenericSend+0xd4>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d129      	bne.n	8009db8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	68b9      	ldr	r1, [r7, #8]
 8009d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d6a:	f000 fa0b 	bl	800a184 <prvCopyDataToQueue>
 8009d6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d010      	beq.n	8009d9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7a:	3324      	adds	r3, #36	; 0x24
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f001 f807 	bl	800ad90 <xTaskRemoveFromEventList>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d013      	beq.n	8009db0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d88:	4b3f      	ldr	r3, [pc, #252]	; (8009e88 <xQueueGenericSend+0x1f8>)
 8009d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d8e:	601a      	str	r2, [r3, #0]
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	e00a      	b.n	8009db0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d007      	beq.n	8009db0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009da0:	4b39      	ldr	r3, [pc, #228]	; (8009e88 <xQueueGenericSend+0x1f8>)
 8009da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009da6:	601a      	str	r2, [r3, #0]
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009db0:	f001 ff38 	bl	800bc24 <vPortExitCritical>
				return pdPASS;
 8009db4:	2301      	movs	r3, #1
 8009db6:	e063      	b.n	8009e80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d103      	bne.n	8009dc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009dbe:	f001 ff31 	bl	800bc24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	e05c      	b.n	8009e80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d106      	bne.n	8009dda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009dcc:	f107 0314 	add.w	r3, r7, #20
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f001 f841 	bl	800ae58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dda:	f001 ff23 	bl	800bc24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009dde:	f000 fd9b 	bl	800a918 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009de2:	f001 feef 	bl	800bbc4 <vPortEnterCritical>
 8009de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dec:	b25b      	sxtb	r3, r3
 8009dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009df2:	d103      	bne.n	8009dfc <xQueueGenericSend+0x16c>
 8009df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e02:	b25b      	sxtb	r3, r3
 8009e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e08:	d103      	bne.n	8009e12 <xQueueGenericSend+0x182>
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e12:	f001 ff07 	bl	800bc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e16:	1d3a      	adds	r2, r7, #4
 8009e18:	f107 0314 	add.w	r3, r7, #20
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f001 f830 	bl	800ae84 <xTaskCheckForTimeOut>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d124      	bne.n	8009e74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e2c:	f000 faa2 	bl	800a374 <prvIsQueueFull>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d018      	beq.n	8009e68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e38:	3310      	adds	r3, #16
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 ff56 	bl	800acf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e46:	f000 fa2d 	bl	800a2a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e4a:	f000 fd73 	bl	800a934 <xTaskResumeAll>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f47f af7c 	bne.w	8009d4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e56:	4b0c      	ldr	r3, [pc, #48]	; (8009e88 <xQueueGenericSend+0x1f8>)
 8009e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	e772      	b.n	8009d4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e6a:	f000 fa1b 	bl	800a2a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e6e:	f000 fd61 	bl	800a934 <xTaskResumeAll>
 8009e72:	e76c      	b.n	8009d4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e76:	f000 fa15 	bl	800a2a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e7a:	f000 fd5b 	bl	800a934 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3738      	adds	r7, #56	; 0x38
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	e000ed04 	.word	0xe000ed04

08009e8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b090      	sub	sp, #64	; 0x40
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
 8009e98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10a      	bne.n	8009eba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009eb6:	bf00      	nop
 8009eb8:	e7fe      	b.n	8009eb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d103      	bne.n	8009ec8 <xQueueGenericSendFromISR+0x3c>
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <xQueueGenericSendFromISR+0x40>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e000      	b.n	8009ece <xQueueGenericSendFromISR+0x42>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10a      	bne.n	8009ee8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ee4:	bf00      	nop
 8009ee6:	e7fe      	b.n	8009ee6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d103      	bne.n	8009ef6 <xQueueGenericSendFromISR+0x6a>
 8009eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d101      	bne.n	8009efa <xQueueGenericSendFromISR+0x6e>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e000      	b.n	8009efc <xQueueGenericSendFromISR+0x70>
 8009efa:	2300      	movs	r3, #0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10a      	bne.n	8009f16 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	623b      	str	r3, [r7, #32]
}
 8009f12:	bf00      	nop
 8009f14:	e7fe      	b.n	8009f14 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f16:	f001 ff37 	bl	800bd88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009f1a:	f3ef 8211 	mrs	r2, BASEPRI
 8009f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	61fa      	str	r2, [r7, #28]
 8009f30:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f32:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f34:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d302      	bcc.n	8009f48 <xQueueGenericSendFromISR+0xbc>
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d12f      	bne.n	8009fa8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f56:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	68b9      	ldr	r1, [r7, #8]
 8009f5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f5e:	f000 f911 	bl	800a184 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f6a:	d112      	bne.n	8009f92 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d016      	beq.n	8009fa2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f76:	3324      	adds	r3, #36	; 0x24
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f000 ff09 	bl	800ad90 <xTaskRemoveFromEventList>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00e      	beq.n	8009fa2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00b      	beq.n	8009fa2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	e007      	b.n	8009fa2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f96:	3301      	adds	r3, #1
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	b25a      	sxtb	r2, r3
 8009f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009fa6:	e001      	b.n	8009fac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009fb6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3740      	adds	r7, #64	; 0x40
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b08c      	sub	sp, #48	; 0x30
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10a      	bne.n	8009ff4 <xQueueReceive+0x30>
	__asm volatile
 8009fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	623b      	str	r3, [r7, #32]
}
 8009ff0:	bf00      	nop
 8009ff2:	e7fe      	b.n	8009ff2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d103      	bne.n	800a002 <xQueueReceive+0x3e>
 8009ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <xQueueReceive+0x42>
 800a002:	2301      	movs	r3, #1
 800a004:	e000      	b.n	800a008 <xQueueReceive+0x44>
 800a006:	2300      	movs	r3, #0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10a      	bne.n	800a022 <xQueueReceive+0x5e>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	61fb      	str	r3, [r7, #28]
}
 800a01e:	bf00      	nop
 800a020:	e7fe      	b.n	800a020 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a022:	f001 f877 	bl	800b114 <xTaskGetSchedulerState>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d102      	bne.n	800a032 <xQueueReceive+0x6e>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d101      	bne.n	800a036 <xQueueReceive+0x72>
 800a032:	2301      	movs	r3, #1
 800a034:	e000      	b.n	800a038 <xQueueReceive+0x74>
 800a036:	2300      	movs	r3, #0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10a      	bne.n	800a052 <xQueueReceive+0x8e>
	__asm volatile
 800a03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	61bb      	str	r3, [r7, #24]
}
 800a04e:	bf00      	nop
 800a050:	e7fe      	b.n	800a050 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a052:	f001 fdb7 	bl	800bbc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d01f      	beq.n	800a0a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a062:	68b9      	ldr	r1, [r7, #8]
 800a064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a066:	f000 f8f7 	bl	800a258 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	1e5a      	subs	r2, r3, #1
 800a06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a070:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00f      	beq.n	800a09a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07c:	3310      	adds	r3, #16
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 fe86 	bl	800ad90 <xTaskRemoveFromEventList>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d007      	beq.n	800a09a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a08a:	4b3d      	ldr	r3, [pc, #244]	; (800a180 <xQueueReceive+0x1bc>)
 800a08c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a09a:	f001 fdc3 	bl	800bc24 <vPortExitCritical>
				return pdPASS;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e069      	b.n	800a176 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d103      	bne.n	800a0b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0a8:	f001 fdbc 	bl	800bc24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	e062      	b.n	800a176 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d106      	bne.n	800a0c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0b6:	f107 0310 	add.w	r3, r7, #16
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 fecc 	bl	800ae58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0c4:	f001 fdae 	bl	800bc24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0c8:	f000 fc26 	bl	800a918 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0cc:	f001 fd7a 	bl	800bbc4 <vPortEnterCritical>
 800a0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0d6:	b25b      	sxtb	r3, r3
 800a0d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0dc:	d103      	bne.n	800a0e6 <xQueueReceive+0x122>
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0ec:	b25b      	sxtb	r3, r3
 800a0ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0f2:	d103      	bne.n	800a0fc <xQueueReceive+0x138>
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0fc:	f001 fd92 	bl	800bc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a100:	1d3a      	adds	r2, r7, #4
 800a102:	f107 0310 	add.w	r3, r7, #16
 800a106:	4611      	mov	r1, r2
 800a108:	4618      	mov	r0, r3
 800a10a:	f000 febb 	bl	800ae84 <xTaskCheckForTimeOut>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d123      	bne.n	800a15c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a116:	f000 f917 	bl	800a348 <prvIsQueueEmpty>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d017      	beq.n	800a150 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a122:	3324      	adds	r3, #36	; 0x24
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	4611      	mov	r1, r2
 800a128:	4618      	mov	r0, r3
 800a12a:	f000 fde1 	bl	800acf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a12e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a130:	f000 f8b8 	bl	800a2a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a134:	f000 fbfe 	bl	800a934 <xTaskResumeAll>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d189      	bne.n	800a052 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a13e:	4b10      	ldr	r3, [pc, #64]	; (800a180 <xQueueReceive+0x1bc>)
 800a140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a144:	601a      	str	r2, [r3, #0]
 800a146:	f3bf 8f4f 	dsb	sy
 800a14a:	f3bf 8f6f 	isb	sy
 800a14e:	e780      	b.n	800a052 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a152:	f000 f8a7 	bl	800a2a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a156:	f000 fbed 	bl	800a934 <xTaskResumeAll>
 800a15a:	e77a      	b.n	800a052 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a15c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a15e:	f000 f8a1 	bl	800a2a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a162:	f000 fbe7 	bl	800a934 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a168:	f000 f8ee 	bl	800a348 <prvIsQueueEmpty>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f43f af6f 	beq.w	800a052 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a174:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a176:	4618      	mov	r0, r3
 800a178:	3730      	adds	r7, #48	; 0x30
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	e000ed04 	.word	0xe000ed04

0800a184 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a190:	2300      	movs	r3, #0
 800a192:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a198:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10d      	bne.n	800a1be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d14d      	bne.n	800a246 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 ffce 	bl	800b150 <xTaskPriorityDisinherit>
 800a1b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	609a      	str	r2, [r3, #8]
 800a1bc:	e043      	b.n	800a246 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d119      	bne.n	800a1f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6858      	ldr	r0, [r3, #4]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	68b9      	ldr	r1, [r7, #8]
 800a1d0:	f002 f927 	bl	800c422 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1dc:	441a      	add	r2, r3
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	685a      	ldr	r2, [r3, #4]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d32b      	bcc.n	800a246 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	605a      	str	r2, [r3, #4]
 800a1f6:	e026      	b.n	800a246 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	68d8      	ldr	r0, [r3, #12]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a200:	461a      	mov	r2, r3
 800a202:	68b9      	ldr	r1, [r7, #8]
 800a204:	f002 f90d 	bl	800c422 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	68da      	ldr	r2, [r3, #12]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a210:	425b      	negs	r3, r3
 800a212:	441a      	add	r2, r3
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	68da      	ldr	r2, [r3, #12]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	429a      	cmp	r2, r3
 800a222:	d207      	bcs.n	800a234 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22c:	425b      	negs	r3, r3
 800a22e:	441a      	add	r2, r3
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b02      	cmp	r3, #2
 800a238:	d105      	bne.n	800a246 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d002      	beq.n	800a246 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	3b01      	subs	r3, #1
 800a244:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	1c5a      	adds	r2, r3, #1
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a24e:	697b      	ldr	r3, [r7, #20]
}
 800a250:	4618      	mov	r0, r3
 800a252:	3718      	adds	r7, #24
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a266:	2b00      	cmp	r3, #0
 800a268:	d018      	beq.n	800a29c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	68da      	ldr	r2, [r3, #12]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a272:	441a      	add	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	68da      	ldr	r2, [r3, #12]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	429a      	cmp	r2, r3
 800a282:	d303      	bcc.n	800a28c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68d9      	ldr	r1, [r3, #12]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a294:	461a      	mov	r2, r3
 800a296:	6838      	ldr	r0, [r7, #0]
 800a298:	f002 f8c3 	bl	800c422 <memcpy>
	}
}
 800a29c:	bf00      	nop
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a2ac:	f001 fc8a 	bl	800bbc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2b8:	e011      	b.n	800a2de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d012      	beq.n	800a2e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	3324      	adds	r3, #36	; 0x24
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 fd62 	bl	800ad90 <xTaskRemoveFromEventList>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a2d2:	f000 fe39 	bl	800af48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	dce9      	bgt.n	800a2ba <prvUnlockQueue+0x16>
 800a2e6:	e000      	b.n	800a2ea <prvUnlockQueue+0x46>
					break;
 800a2e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	22ff      	movs	r2, #255	; 0xff
 800a2ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a2f2:	f001 fc97 	bl	800bc24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a2f6:	f001 fc65 	bl	800bbc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a300:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a302:	e011      	b.n	800a328 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d012      	beq.n	800a332 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	3310      	adds	r3, #16
 800a310:	4618      	mov	r0, r3
 800a312:	f000 fd3d 	bl	800ad90 <xTaskRemoveFromEventList>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a31c:	f000 fe14 	bl	800af48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a320:	7bbb      	ldrb	r3, [r7, #14]
 800a322:	3b01      	subs	r3, #1
 800a324:	b2db      	uxtb	r3, r3
 800a326:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	dce9      	bgt.n	800a304 <prvUnlockQueue+0x60>
 800a330:	e000      	b.n	800a334 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a332:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	22ff      	movs	r2, #255	; 0xff
 800a338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a33c:	f001 fc72 	bl	800bc24 <vPortExitCritical>
}
 800a340:	bf00      	nop
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a350:	f001 fc38 	bl	800bbc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d102      	bne.n	800a362 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a35c:	2301      	movs	r3, #1
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	e001      	b.n	800a366 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a362:	2300      	movs	r3, #0
 800a364:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a366:	f001 fc5d 	bl	800bc24 <vPortExitCritical>

	return xReturn;
 800a36a:	68fb      	ldr	r3, [r7, #12]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a37c:	f001 fc22 	bl	800bbc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a388:	429a      	cmp	r2, r3
 800a38a:	d102      	bne.n	800a392 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a38c:	2301      	movs	r3, #1
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	e001      	b.n	800a396 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a392:	2300      	movs	r3, #0
 800a394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a396:	f001 fc45 	bl	800bc24 <vPortExitCritical>

	return xReturn;
 800a39a:	68fb      	ldr	r3, [r7, #12]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	60fb      	str	r3, [r7, #12]
 800a3b2:	e014      	b.n	800a3de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a3b4:	4a0f      	ldr	r2, [pc, #60]	; (800a3f4 <vQueueAddToRegistry+0x50>)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10b      	bne.n	800a3d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a3c0:	490c      	ldr	r1, [pc, #48]	; (800a3f4 <vQueueAddToRegistry+0x50>)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a3ca:	4a0a      	ldr	r2, [pc, #40]	; (800a3f4 <vQueueAddToRegistry+0x50>)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	00db      	lsls	r3, r3, #3
 800a3d0:	4413      	add	r3, r2
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a3d6:	e006      	b.n	800a3e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	60fb      	str	r3, [r7, #12]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2b07      	cmp	r3, #7
 800a3e2:	d9e7      	bls.n	800a3b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	2000dd4c 	.word	0x2000dd4c

0800a3f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a408:	f001 fbdc 	bl	800bbc4 <vPortEnterCritical>
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a412:	b25b      	sxtb	r3, r3
 800a414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a418:	d103      	bne.n	800a422 <vQueueWaitForMessageRestricted+0x2a>
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a428:	b25b      	sxtb	r3, r3
 800a42a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a42e:	d103      	bne.n	800a438 <vQueueWaitForMessageRestricted+0x40>
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a438:	f001 fbf4 	bl	800bc24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a440:	2b00      	cmp	r3, #0
 800a442:	d106      	bne.n	800a452 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	3324      	adds	r3, #36	; 0x24
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	68b9      	ldr	r1, [r7, #8]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 fc73 	bl	800ad38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a452:	6978      	ldr	r0, [r7, #20]
 800a454:	f7ff ff26 	bl	800a2a4 <prvUnlockQueue>
	}
 800a458:	bf00      	nop
 800a45a:	3718      	adds	r7, #24
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08e      	sub	sp, #56	; 0x38
 800a464:	af04      	add	r7, sp, #16
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
 800a46c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10a      	bne.n	800a48a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	623b      	str	r3, [r7, #32]
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10a      	bne.n	800a4a6 <xTaskCreateStatic+0x46>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	61fb      	str	r3, [r7, #28]
}
 800a4a2:	bf00      	nop
 800a4a4:	e7fe      	b.n	800a4a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a4a6:	23bc      	movs	r3, #188	; 0xbc
 800a4a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	2bbc      	cmp	r3, #188	; 0xbc
 800a4ae:	d00a      	beq.n	800a4c6 <xTaskCreateStatic+0x66>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	61bb      	str	r3, [r7, #24]
}
 800a4c2:	bf00      	nop
 800a4c4:	e7fe      	b.n	800a4c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a4c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d01e      	beq.n	800a50c <xTaskCreateStatic+0xac>
 800a4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d01b      	beq.n	800a50c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e0:	2202      	movs	r2, #2
 800a4e2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	9303      	str	r3, [sp, #12]
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ec:	9302      	str	r3, [sp, #8]
 800a4ee:	f107 0314 	add.w	r3, r7, #20
 800a4f2:	9301      	str	r3, [sp, #4]
 800a4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	68b9      	ldr	r1, [r7, #8]
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f000 f850 	bl	800a5a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a506:	f000 f8f3 	bl	800a6f0 <prvAddNewTaskToReadyList>
 800a50a:	e001      	b.n	800a510 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a50c:	2300      	movs	r3, #0
 800a50e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a510:	697b      	ldr	r3, [r7, #20]
	}
 800a512:	4618      	mov	r0, r3
 800a514:	3728      	adds	r7, #40	; 0x28
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b08c      	sub	sp, #48	; 0x30
 800a51e:	af04      	add	r7, sp, #16
 800a520:	60f8      	str	r0, [r7, #12]
 800a522:	60b9      	str	r1, [r7, #8]
 800a524:	603b      	str	r3, [r7, #0]
 800a526:	4613      	mov	r3, r2
 800a528:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a52a:	88fb      	ldrh	r3, [r7, #6]
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4618      	mov	r0, r3
 800a530:	f001 fc6a 	bl	800be08 <pvPortMalloc>
 800a534:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00e      	beq.n	800a55a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a53c:	20bc      	movs	r0, #188	; 0xbc
 800a53e:	f001 fc63 	bl	800be08 <pvPortMalloc>
 800a542:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d003      	beq.n	800a552 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	631a      	str	r2, [r3, #48]	; 0x30
 800a550:	e005      	b.n	800a55e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a552:	6978      	ldr	r0, [r7, #20]
 800a554:	f001 fd24 	bl	800bfa0 <vPortFree>
 800a558:	e001      	b.n	800a55e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a55a:	2300      	movs	r3, #0
 800a55c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d017      	beq.n	800a594 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a56c:	88fa      	ldrh	r2, [r7, #6]
 800a56e:	2300      	movs	r3, #0
 800a570:	9303      	str	r3, [sp, #12]
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	9302      	str	r3, [sp, #8]
 800a576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a578:	9301      	str	r3, [sp, #4]
 800a57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	68b9      	ldr	r1, [r7, #8]
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f000 f80e 	bl	800a5a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a588:	69f8      	ldr	r0, [r7, #28]
 800a58a:	f000 f8b1 	bl	800a6f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a58e:	2301      	movs	r3, #1
 800a590:	61bb      	str	r3, [r7, #24]
 800a592:	e002      	b.n	800a59a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a598:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a59a:	69bb      	ldr	r3, [r7, #24]
	}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3720      	adds	r7, #32
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b088      	sub	sp, #32
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
 800a5b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	21a5      	movs	r1, #165	; 0xa5
 800a5be:	f001 ff3e 	bl	800c43e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4413      	add	r3, r2
 800a5d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	f023 0307 	bic.w	r3, r3, #7
 800a5da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	f003 0307 	and.w	r3, r3, #7
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00a      	beq.n	800a5fc <prvInitialiseNewTask+0x58>
	__asm volatile
 800a5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ea:	f383 8811 	msr	BASEPRI, r3
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	617b      	str	r3, [r7, #20]
}
 800a5f8:	bf00      	nop
 800a5fa:	e7fe      	b.n	800a5fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d01f      	beq.n	800a642 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a602:	2300      	movs	r3, #0
 800a604:	61fb      	str	r3, [r7, #28]
 800a606:	e012      	b.n	800a62e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	4413      	add	r3, r2
 800a60e:	7819      	ldrb	r1, [r3, #0]
 800a610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	4413      	add	r3, r2
 800a616:	3334      	adds	r3, #52	; 0x34
 800a618:	460a      	mov	r2, r1
 800a61a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	4413      	add	r3, r2
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d006      	beq.n	800a636 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	3301      	adds	r3, #1
 800a62c:	61fb      	str	r3, [r7, #28]
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	2b0f      	cmp	r3, #15
 800a632:	d9e9      	bls.n	800a608 <prvInitialiseNewTask+0x64>
 800a634:	e000      	b.n	800a638 <prvInitialiseNewTask+0x94>
			{
				break;
 800a636:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a640:	e003      	b.n	800a64a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a644:	2200      	movs	r2, #0
 800a646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64c:	2b37      	cmp	r3, #55	; 0x37
 800a64e:	d901      	bls.n	800a654 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a650:	2337      	movs	r3, #55	; 0x37
 800a652:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a658:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a65e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a662:	2200      	movs	r2, #0
 800a664:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	3304      	adds	r3, #4
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7ff f978 	bl	8009960 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a672:	3318      	adds	r3, #24
 800a674:	4618      	mov	r0, r3
 800a676:	f7ff f973 	bl	8009960 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a67e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a682:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a688:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a68e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a692:	2200      	movs	r2, #0
 800a694:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a2:	3354      	adds	r3, #84	; 0x54
 800a6a4:	2260      	movs	r2, #96	; 0x60
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f001 fec8 	bl	800c43e <memset>
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	4a0c      	ldr	r2, [pc, #48]	; (800a6e4 <prvInitialiseNewTask+0x140>)
 800a6b2:	659a      	str	r2, [r3, #88]	; 0x58
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b6:	4a0c      	ldr	r2, [pc, #48]	; (800a6e8 <prvInitialiseNewTask+0x144>)
 800a6b8:	65da      	str	r2, [r3, #92]	; 0x5c
 800a6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6bc:	4a0b      	ldr	r2, [pc, #44]	; (800a6ec <prvInitialiseNewTask+0x148>)
 800a6be:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	68f9      	ldr	r1, [r7, #12]
 800a6c4:	69b8      	ldr	r0, [r7, #24]
 800a6c6:	f001 f953 	bl	800b970 <pxPortInitialiseStack>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d002      	beq.n	800a6dc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6dc:	bf00      	nop
 800a6de:	3720      	adds	r7, #32
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	0800d7b8 	.word	0x0800d7b8
 800a6e8:	0800d7d8 	.word	0x0800d7d8
 800a6ec:	0800d798 	.word	0x0800d798

0800a6f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6f8:	f001 fa64 	bl	800bbc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6fc:	4b2d      	ldr	r3, [pc, #180]	; (800a7b4 <prvAddNewTaskToReadyList+0xc4>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	3301      	adds	r3, #1
 800a702:	4a2c      	ldr	r2, [pc, #176]	; (800a7b4 <prvAddNewTaskToReadyList+0xc4>)
 800a704:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a706:	4b2c      	ldr	r3, [pc, #176]	; (800a7b8 <prvAddNewTaskToReadyList+0xc8>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d109      	bne.n	800a722 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a70e:	4a2a      	ldr	r2, [pc, #168]	; (800a7b8 <prvAddNewTaskToReadyList+0xc8>)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a714:	4b27      	ldr	r3, [pc, #156]	; (800a7b4 <prvAddNewTaskToReadyList+0xc4>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d110      	bne.n	800a73e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a71c:	f000 fc38 	bl	800af90 <prvInitialiseTaskLists>
 800a720:	e00d      	b.n	800a73e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a722:	4b26      	ldr	r3, [pc, #152]	; (800a7bc <prvAddNewTaskToReadyList+0xcc>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d109      	bne.n	800a73e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a72a:	4b23      	ldr	r3, [pc, #140]	; (800a7b8 <prvAddNewTaskToReadyList+0xc8>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a734:	429a      	cmp	r2, r3
 800a736:	d802      	bhi.n	800a73e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a738:	4a1f      	ldr	r2, [pc, #124]	; (800a7b8 <prvAddNewTaskToReadyList+0xc8>)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a73e:	4b20      	ldr	r3, [pc, #128]	; (800a7c0 <prvAddNewTaskToReadyList+0xd0>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3301      	adds	r3, #1
 800a744:	4a1e      	ldr	r2, [pc, #120]	; (800a7c0 <prvAddNewTaskToReadyList+0xd0>)
 800a746:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a748:	4b1d      	ldr	r3, [pc, #116]	; (800a7c0 <prvAddNewTaskToReadyList+0xd0>)
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a754:	4b1b      	ldr	r3, [pc, #108]	; (800a7c4 <prvAddNewTaskToReadyList+0xd4>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d903      	bls.n	800a764 <prvAddNewTaskToReadyList+0x74>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a760:	4a18      	ldr	r2, [pc, #96]	; (800a7c4 <prvAddNewTaskToReadyList+0xd4>)
 800a762:	6013      	str	r3, [r2, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a768:	4613      	mov	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	4a15      	ldr	r2, [pc, #84]	; (800a7c8 <prvAddNewTaskToReadyList+0xd8>)
 800a772:	441a      	add	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3304      	adds	r3, #4
 800a778:	4619      	mov	r1, r3
 800a77a:	4610      	mov	r0, r2
 800a77c:	f7ff f8fd 	bl	800997a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a780:	f001 fa50 	bl	800bc24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a784:	4b0d      	ldr	r3, [pc, #52]	; (800a7bc <prvAddNewTaskToReadyList+0xcc>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00e      	beq.n	800a7aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a78c:	4b0a      	ldr	r3, [pc, #40]	; (800a7b8 <prvAddNewTaskToReadyList+0xc8>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a796:	429a      	cmp	r2, r3
 800a798:	d207      	bcs.n	800a7aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a79a:	4b0c      	ldr	r3, [pc, #48]	; (800a7cc <prvAddNewTaskToReadyList+0xdc>)
 800a79c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7a0:	601a      	str	r2, [r3, #0]
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7aa:	bf00      	nop
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	2000123c 	.word	0x2000123c
 800a7b8:	20000d68 	.word	0x20000d68
 800a7bc:	20001248 	.word	0x20001248
 800a7c0:	20001258 	.word	0x20001258
 800a7c4:	20001244 	.word	0x20001244
 800a7c8:	20000d6c 	.word	0x20000d6c
 800a7cc:	e000ed04 	.word	0xe000ed04

0800a7d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d017      	beq.n	800a812 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a7e2:	4b13      	ldr	r3, [pc, #76]	; (800a830 <vTaskDelay+0x60>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00a      	beq.n	800a800 <vTaskDelay+0x30>
	__asm volatile
 800a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ee:	f383 8811 	msr	BASEPRI, r3
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	60bb      	str	r3, [r7, #8]
}
 800a7fc:	bf00      	nop
 800a7fe:	e7fe      	b.n	800a7fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a800:	f000 f88a 	bl	800a918 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a804:	2100      	movs	r1, #0
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fd10 	bl	800b22c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a80c:	f000 f892 	bl	800a934 <xTaskResumeAll>
 800a810:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d107      	bne.n	800a828 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a818:	4b06      	ldr	r3, [pc, #24]	; (800a834 <vTaskDelay+0x64>)
 800a81a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a81e:	601a      	str	r2, [r3, #0]
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a828:	bf00      	nop
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	20001264 	.word	0x20001264
 800a834:	e000ed04 	.word	0xe000ed04

0800a838 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08a      	sub	sp, #40	; 0x28
 800a83c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a83e:	2300      	movs	r3, #0
 800a840:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a842:	2300      	movs	r3, #0
 800a844:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a846:	463a      	mov	r2, r7
 800a848:	1d39      	adds	r1, r7, #4
 800a84a:	f107 0308 	add.w	r3, r7, #8
 800a84e:	4618      	mov	r0, r3
 800a850:	f7ff f832 	bl	80098b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	9202      	str	r2, [sp, #8]
 800a85c:	9301      	str	r3, [sp, #4]
 800a85e:	2300      	movs	r3, #0
 800a860:	9300      	str	r3, [sp, #0]
 800a862:	2300      	movs	r3, #0
 800a864:	460a      	mov	r2, r1
 800a866:	4924      	ldr	r1, [pc, #144]	; (800a8f8 <vTaskStartScheduler+0xc0>)
 800a868:	4824      	ldr	r0, [pc, #144]	; (800a8fc <vTaskStartScheduler+0xc4>)
 800a86a:	f7ff fdf9 	bl	800a460 <xTaskCreateStatic>
 800a86e:	4603      	mov	r3, r0
 800a870:	4a23      	ldr	r2, [pc, #140]	; (800a900 <vTaskStartScheduler+0xc8>)
 800a872:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a874:	4b22      	ldr	r3, [pc, #136]	; (800a900 <vTaskStartScheduler+0xc8>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a87c:	2301      	movs	r3, #1
 800a87e:	617b      	str	r3, [r7, #20]
 800a880:	e001      	b.n	800a886 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a882:	2300      	movs	r3, #0
 800a884:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d102      	bne.n	800a892 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a88c:	f000 fd22 	bl	800b2d4 <xTimerCreateTimerTask>
 800a890:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	2b01      	cmp	r3, #1
 800a896:	d11b      	bne.n	800a8d0 <vTaskStartScheduler+0x98>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	613b      	str	r3, [r7, #16]
}
 800a8aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8ac:	4b15      	ldr	r3, [pc, #84]	; (800a904 <vTaskStartScheduler+0xcc>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	3354      	adds	r3, #84	; 0x54
 800a8b2:	4a15      	ldr	r2, [pc, #84]	; (800a908 <vTaskStartScheduler+0xd0>)
 800a8b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a8b6:	4b15      	ldr	r3, [pc, #84]	; (800a90c <vTaskStartScheduler+0xd4>)
 800a8b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a8be:	4b14      	ldr	r3, [pc, #80]	; (800a910 <vTaskStartScheduler+0xd8>)
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a8c4:	4b13      	ldr	r3, [pc, #76]	; (800a914 <vTaskStartScheduler+0xdc>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a8ca:	f001 f8d9 	bl	800ba80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a8ce:	e00e      	b.n	800a8ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8d6:	d10a      	bne.n	800a8ee <vTaskStartScheduler+0xb6>
	__asm volatile
 800a8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8dc:	f383 8811 	msr	BASEPRI, r3
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	60fb      	str	r3, [r7, #12]
}
 800a8ea:	bf00      	nop
 800a8ec:	e7fe      	b.n	800a8ec <vTaskStartScheduler+0xb4>
}
 800a8ee:	bf00      	nop
 800a8f0:	3718      	adds	r7, #24
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	0800d6fc 	.word	0x0800d6fc
 800a8fc:	0800af61 	.word	0x0800af61
 800a900:	20001260 	.word	0x20001260
 800a904:	20000d68 	.word	0x20000d68
 800a908:	200002ac 	.word	0x200002ac
 800a90c:	2000125c 	.word	0x2000125c
 800a910:	20001248 	.word	0x20001248
 800a914:	20001240 	.word	0x20001240

0800a918 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a918:	b480      	push	{r7}
 800a91a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a91c:	4b04      	ldr	r3, [pc, #16]	; (800a930 <vTaskSuspendAll+0x18>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	3301      	adds	r3, #1
 800a922:	4a03      	ldr	r2, [pc, #12]	; (800a930 <vTaskSuspendAll+0x18>)
 800a924:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a926:	bf00      	nop
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	20001264 	.word	0x20001264

0800a934 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a93a:	2300      	movs	r3, #0
 800a93c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a93e:	2300      	movs	r3, #0
 800a940:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a942:	4b42      	ldr	r3, [pc, #264]	; (800aa4c <xTaskResumeAll+0x118>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10a      	bne.n	800a960 <xTaskResumeAll+0x2c>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	603b      	str	r3, [r7, #0]
}
 800a95c:	bf00      	nop
 800a95e:	e7fe      	b.n	800a95e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a960:	f001 f930 	bl	800bbc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a964:	4b39      	ldr	r3, [pc, #228]	; (800aa4c <xTaskResumeAll+0x118>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3b01      	subs	r3, #1
 800a96a:	4a38      	ldr	r2, [pc, #224]	; (800aa4c <xTaskResumeAll+0x118>)
 800a96c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a96e:	4b37      	ldr	r3, [pc, #220]	; (800aa4c <xTaskResumeAll+0x118>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d162      	bne.n	800aa3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a976:	4b36      	ldr	r3, [pc, #216]	; (800aa50 <xTaskResumeAll+0x11c>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d05e      	beq.n	800aa3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a97e:	e02f      	b.n	800a9e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a980:	4b34      	ldr	r3, [pc, #208]	; (800aa54 <xTaskResumeAll+0x120>)
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	3318      	adds	r3, #24
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7ff f851 	bl	8009a34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	3304      	adds	r3, #4
 800a996:	4618      	mov	r0, r3
 800a998:	f7ff f84c 	bl	8009a34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a0:	4b2d      	ldr	r3, [pc, #180]	; (800aa58 <xTaskResumeAll+0x124>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d903      	bls.n	800a9b0 <xTaskResumeAll+0x7c>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ac:	4a2a      	ldr	r2, [pc, #168]	; (800aa58 <xTaskResumeAll+0x124>)
 800a9ae:	6013      	str	r3, [r2, #0]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4413      	add	r3, r2
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4a27      	ldr	r2, [pc, #156]	; (800aa5c <xTaskResumeAll+0x128>)
 800a9be:	441a      	add	r2, r3
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	4610      	mov	r0, r2
 800a9c8:	f7fe ffd7 	bl	800997a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d0:	4b23      	ldr	r3, [pc, #140]	; (800aa60 <xTaskResumeAll+0x12c>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d302      	bcc.n	800a9e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a9da:	4b22      	ldr	r3, [pc, #136]	; (800aa64 <xTaskResumeAll+0x130>)
 800a9dc:	2201      	movs	r2, #1
 800a9de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9e0:	4b1c      	ldr	r3, [pc, #112]	; (800aa54 <xTaskResumeAll+0x120>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d1cb      	bne.n	800a980 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d001      	beq.n	800a9f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a9ee:	f000 fb71 	bl	800b0d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a9f2:	4b1d      	ldr	r3, [pc, #116]	; (800aa68 <xTaskResumeAll+0x134>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d010      	beq.n	800aa20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9fe:	f000 f859 	bl	800aab4 <xTaskIncrementTick>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d002      	beq.n	800aa0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aa08:	4b16      	ldr	r3, [pc, #88]	; (800aa64 <xTaskResumeAll+0x130>)
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	3b01      	subs	r3, #1
 800aa12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1f1      	bne.n	800a9fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aa1a:	4b13      	ldr	r3, [pc, #76]	; (800aa68 <xTaskResumeAll+0x134>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa20:	4b10      	ldr	r3, [pc, #64]	; (800aa64 <xTaskResumeAll+0x130>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d009      	beq.n	800aa3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa2c:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <xTaskResumeAll+0x138>)
 800aa2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	f3bf 8f4f 	dsb	sy
 800aa38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa3c:	f001 f8f2 	bl	800bc24 <vPortExitCritical>

	return xAlreadyYielded;
 800aa40:	68bb      	ldr	r3, [r7, #8]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	20001264 	.word	0x20001264
 800aa50:	2000123c 	.word	0x2000123c
 800aa54:	200011fc 	.word	0x200011fc
 800aa58:	20001244 	.word	0x20001244
 800aa5c:	20000d6c 	.word	0x20000d6c
 800aa60:	20000d68 	.word	0x20000d68
 800aa64:	20001250 	.word	0x20001250
 800aa68:	2000124c 	.word	0x2000124c
 800aa6c:	e000ed04 	.word	0xe000ed04

0800aa70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa76:	4b05      	ldr	r3, [pc, #20]	; (800aa8c <xTaskGetTickCount+0x1c>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa7c:	687b      	ldr	r3, [r7, #4]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	370c      	adds	r7, #12
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	20001240 	.word	0x20001240

0800aa90 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa96:	f001 f977 	bl	800bd88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800aa9e:	4b04      	ldr	r3, [pc, #16]	; (800aab0 <xTaskGetTickCountFromISR+0x20>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aaa4:	683b      	ldr	r3, [r7, #0]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	20001240 	.word	0x20001240

0800aab4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b086      	sub	sp, #24
 800aab8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aaba:	2300      	movs	r3, #0
 800aabc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aabe:	4b4f      	ldr	r3, [pc, #316]	; (800abfc <xTaskIncrementTick+0x148>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f040 808f 	bne.w	800abe6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aac8:	4b4d      	ldr	r3, [pc, #308]	; (800ac00 <xTaskIncrementTick+0x14c>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	3301      	adds	r3, #1
 800aace:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aad0:	4a4b      	ldr	r2, [pc, #300]	; (800ac00 <xTaskIncrementTick+0x14c>)
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d120      	bne.n	800ab1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aadc:	4b49      	ldr	r3, [pc, #292]	; (800ac04 <xTaskIncrementTick+0x150>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00a      	beq.n	800aafc <xTaskIncrementTick+0x48>
	__asm volatile
 800aae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	603b      	str	r3, [r7, #0]
}
 800aaf8:	bf00      	nop
 800aafa:	e7fe      	b.n	800aafa <xTaskIncrementTick+0x46>
 800aafc:	4b41      	ldr	r3, [pc, #260]	; (800ac04 <xTaskIncrementTick+0x150>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	60fb      	str	r3, [r7, #12]
 800ab02:	4b41      	ldr	r3, [pc, #260]	; (800ac08 <xTaskIncrementTick+0x154>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a3f      	ldr	r2, [pc, #252]	; (800ac04 <xTaskIncrementTick+0x150>)
 800ab08:	6013      	str	r3, [r2, #0]
 800ab0a:	4a3f      	ldr	r2, [pc, #252]	; (800ac08 <xTaskIncrementTick+0x154>)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6013      	str	r3, [r2, #0]
 800ab10:	4b3e      	ldr	r3, [pc, #248]	; (800ac0c <xTaskIncrementTick+0x158>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	3301      	adds	r3, #1
 800ab16:	4a3d      	ldr	r2, [pc, #244]	; (800ac0c <xTaskIncrementTick+0x158>)
 800ab18:	6013      	str	r3, [r2, #0]
 800ab1a:	f000 fadb 	bl	800b0d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab1e:	4b3c      	ldr	r3, [pc, #240]	; (800ac10 <xTaskIncrementTick+0x15c>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	693a      	ldr	r2, [r7, #16]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d349      	bcc.n	800abbc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab28:	4b36      	ldr	r3, [pc, #216]	; (800ac04 <xTaskIncrementTick+0x150>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d104      	bne.n	800ab3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab32:	4b37      	ldr	r3, [pc, #220]	; (800ac10 <xTaskIncrementTick+0x15c>)
 800ab34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab38:	601a      	str	r2, [r3, #0]
					break;
 800ab3a:	e03f      	b.n	800abbc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab3c:	4b31      	ldr	r3, [pc, #196]	; (800ac04 <xTaskIncrementTick+0x150>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d203      	bcs.n	800ab5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab54:	4a2e      	ldr	r2, [pc, #184]	; (800ac10 <xTaskIncrementTick+0x15c>)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab5a:	e02f      	b.n	800abbc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fe ff67 	bl	8009a34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d004      	beq.n	800ab78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	3318      	adds	r3, #24
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fe ff5e 	bl	8009a34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7c:	4b25      	ldr	r3, [pc, #148]	; (800ac14 <xTaskIncrementTick+0x160>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d903      	bls.n	800ab8c <xTaskIncrementTick+0xd8>
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab88:	4a22      	ldr	r2, [pc, #136]	; (800ac14 <xTaskIncrementTick+0x160>)
 800ab8a:	6013      	str	r3, [r2, #0]
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab90:	4613      	mov	r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	4413      	add	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4a1f      	ldr	r2, [pc, #124]	; (800ac18 <xTaskIncrementTick+0x164>)
 800ab9a:	441a      	add	r2, r3
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	3304      	adds	r3, #4
 800aba0:	4619      	mov	r1, r3
 800aba2:	4610      	mov	r0, r2
 800aba4:	f7fe fee9 	bl	800997a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abac:	4b1b      	ldr	r3, [pc, #108]	; (800ac1c <xTaskIncrementTick+0x168>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d3b8      	bcc.n	800ab28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800abb6:	2301      	movs	r3, #1
 800abb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abba:	e7b5      	b.n	800ab28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800abbc:	4b17      	ldr	r3, [pc, #92]	; (800ac1c <xTaskIncrementTick+0x168>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abc2:	4915      	ldr	r1, [pc, #84]	; (800ac18 <xTaskIncrementTick+0x164>)
 800abc4:	4613      	mov	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4413      	add	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	440b      	add	r3, r1
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d901      	bls.n	800abd8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800abd4:	2301      	movs	r3, #1
 800abd6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800abd8:	4b11      	ldr	r3, [pc, #68]	; (800ac20 <xTaskIncrementTick+0x16c>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d007      	beq.n	800abf0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800abe0:	2301      	movs	r3, #1
 800abe2:	617b      	str	r3, [r7, #20]
 800abe4:	e004      	b.n	800abf0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800abe6:	4b0f      	ldr	r3, [pc, #60]	; (800ac24 <xTaskIncrementTick+0x170>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	3301      	adds	r3, #1
 800abec:	4a0d      	ldr	r2, [pc, #52]	; (800ac24 <xTaskIncrementTick+0x170>)
 800abee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800abf0:	697b      	ldr	r3, [r7, #20]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	20001264 	.word	0x20001264
 800ac00:	20001240 	.word	0x20001240
 800ac04:	200011f4 	.word	0x200011f4
 800ac08:	200011f8 	.word	0x200011f8
 800ac0c:	20001254 	.word	0x20001254
 800ac10:	2000125c 	.word	0x2000125c
 800ac14:	20001244 	.word	0x20001244
 800ac18:	20000d6c 	.word	0x20000d6c
 800ac1c:	20000d68 	.word	0x20000d68
 800ac20:	20001250 	.word	0x20001250
 800ac24:	2000124c 	.word	0x2000124c

0800ac28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac2e:	4b2a      	ldr	r3, [pc, #168]	; (800acd8 <vTaskSwitchContext+0xb0>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac36:	4b29      	ldr	r3, [pc, #164]	; (800acdc <vTaskSwitchContext+0xb4>)
 800ac38:	2201      	movs	r2, #1
 800ac3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac3c:	e046      	b.n	800accc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ac3e:	4b27      	ldr	r3, [pc, #156]	; (800acdc <vTaskSwitchContext+0xb4>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac44:	4b26      	ldr	r3, [pc, #152]	; (800ace0 <vTaskSwitchContext+0xb8>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	60fb      	str	r3, [r7, #12]
 800ac4a:	e010      	b.n	800ac6e <vTaskSwitchContext+0x46>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d10a      	bne.n	800ac68 <vTaskSwitchContext+0x40>
	__asm volatile
 800ac52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac56:	f383 8811 	msr	BASEPRI, r3
 800ac5a:	f3bf 8f6f 	isb	sy
 800ac5e:	f3bf 8f4f 	dsb	sy
 800ac62:	607b      	str	r3, [r7, #4]
}
 800ac64:	bf00      	nop
 800ac66:	e7fe      	b.n	800ac66 <vTaskSwitchContext+0x3e>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	60fb      	str	r3, [r7, #12]
 800ac6e:	491d      	ldr	r1, [pc, #116]	; (800ace4 <vTaskSwitchContext+0xbc>)
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	4613      	mov	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	440b      	add	r3, r1
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d0e4      	beq.n	800ac4c <vTaskSwitchContext+0x24>
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	4613      	mov	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4a15      	ldr	r2, [pc, #84]	; (800ace4 <vTaskSwitchContext+0xbc>)
 800ac8e:	4413      	add	r3, r2
 800ac90:	60bb      	str	r3, [r7, #8]
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	685a      	ldr	r2, [r3, #4]
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	605a      	str	r2, [r3, #4]
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	685a      	ldr	r2, [r3, #4]
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	3308      	adds	r3, #8
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d104      	bne.n	800acb2 <vTaskSwitchContext+0x8a>
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	605a      	str	r2, [r3, #4]
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	4a0b      	ldr	r2, [pc, #44]	; (800ace8 <vTaskSwitchContext+0xc0>)
 800acba:	6013      	str	r3, [r2, #0]
 800acbc:	4a08      	ldr	r2, [pc, #32]	; (800ace0 <vTaskSwitchContext+0xb8>)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800acc2:	4b09      	ldr	r3, [pc, #36]	; (800ace8 <vTaskSwitchContext+0xc0>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3354      	adds	r3, #84	; 0x54
 800acc8:	4a08      	ldr	r2, [pc, #32]	; (800acec <vTaskSwitchContext+0xc4>)
 800acca:	6013      	str	r3, [r2, #0]
}
 800accc:	bf00      	nop
 800acce:	3714      	adds	r7, #20
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr
 800acd8:	20001264 	.word	0x20001264
 800acdc:	20001250 	.word	0x20001250
 800ace0:	20001244 	.word	0x20001244
 800ace4:	20000d6c 	.word	0x20000d6c
 800ace8:	20000d68 	.word	0x20000d68
 800acec:	200002ac 	.word	0x200002ac

0800acf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10a      	bne.n	800ad16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ad00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	60fb      	str	r3, [r7, #12]
}
 800ad12:	bf00      	nop
 800ad14:	e7fe      	b.n	800ad14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad16:	4b07      	ldr	r3, [pc, #28]	; (800ad34 <vTaskPlaceOnEventList+0x44>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3318      	adds	r3, #24
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f7fe fe4f 	bl	80099c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad24:	2101      	movs	r1, #1
 800ad26:	6838      	ldr	r0, [r7, #0]
 800ad28:	f000 fa80 	bl	800b22c <prvAddCurrentTaskToDelayedList>
}
 800ad2c:	bf00      	nop
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	20000d68 	.word	0x20000d68

0800ad38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10a      	bne.n	800ad60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ad4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	617b      	str	r3, [r7, #20]
}
 800ad5c:	bf00      	nop
 800ad5e:	e7fe      	b.n	800ad5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad60:	4b0a      	ldr	r3, [pc, #40]	; (800ad8c <vTaskPlaceOnEventListRestricted+0x54>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3318      	adds	r3, #24
 800ad66:	4619      	mov	r1, r3
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f7fe fe06 	bl	800997a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d002      	beq.n	800ad7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ad74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad7a:	6879      	ldr	r1, [r7, #4]
 800ad7c:	68b8      	ldr	r0, [r7, #8]
 800ad7e:	f000 fa55 	bl	800b22c <prvAddCurrentTaskToDelayedList>
	}
 800ad82:	bf00      	nop
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	20000d68 	.word	0x20000d68

0800ad90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10a      	bne.n	800adbc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ada6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	60fb      	str	r3, [r7, #12]
}
 800adb8:	bf00      	nop
 800adba:	e7fe      	b.n	800adba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	3318      	adds	r3, #24
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7fe fe37 	bl	8009a34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adc6:	4b1e      	ldr	r3, [pc, #120]	; (800ae40 <xTaskRemoveFromEventList+0xb0>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d11d      	bne.n	800ae0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	3304      	adds	r3, #4
 800add2:	4618      	mov	r0, r3
 800add4:	f7fe fe2e 	bl	8009a34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800addc:	4b19      	ldr	r3, [pc, #100]	; (800ae44 <xTaskRemoveFromEventList+0xb4>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d903      	bls.n	800adec <xTaskRemoveFromEventList+0x5c>
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade8:	4a16      	ldr	r2, [pc, #88]	; (800ae44 <xTaskRemoveFromEventList+0xb4>)
 800adea:	6013      	str	r3, [r2, #0]
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf0:	4613      	mov	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4a13      	ldr	r2, [pc, #76]	; (800ae48 <xTaskRemoveFromEventList+0xb8>)
 800adfa:	441a      	add	r2, r3
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	3304      	adds	r3, #4
 800ae00:	4619      	mov	r1, r3
 800ae02:	4610      	mov	r0, r2
 800ae04:	f7fe fdb9 	bl	800997a <vListInsertEnd>
 800ae08:	e005      	b.n	800ae16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	3318      	adds	r3, #24
 800ae0e:	4619      	mov	r1, r3
 800ae10:	480e      	ldr	r0, [pc, #56]	; (800ae4c <xTaskRemoveFromEventList+0xbc>)
 800ae12:	f7fe fdb2 	bl	800997a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1a:	4b0d      	ldr	r3, [pc, #52]	; (800ae50 <xTaskRemoveFromEventList+0xc0>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d905      	bls.n	800ae30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae24:	2301      	movs	r3, #1
 800ae26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae28:	4b0a      	ldr	r3, [pc, #40]	; (800ae54 <xTaskRemoveFromEventList+0xc4>)
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	e001      	b.n	800ae34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ae30:	2300      	movs	r3, #0
 800ae32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae34:	697b      	ldr	r3, [r7, #20]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3718      	adds	r7, #24
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	20001264 	.word	0x20001264
 800ae44:	20001244 	.word	0x20001244
 800ae48:	20000d6c 	.word	0x20000d6c
 800ae4c:	200011fc 	.word	0x200011fc
 800ae50:	20000d68 	.word	0x20000d68
 800ae54:	20001250 	.word	0x20001250

0800ae58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae60:	4b06      	ldr	r3, [pc, #24]	; (800ae7c <vTaskInternalSetTimeOutState+0x24>)
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae68:	4b05      	ldr	r3, [pc, #20]	; (800ae80 <vTaskInternalSetTimeOutState+0x28>)
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	605a      	str	r2, [r3, #4]
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	20001254 	.word	0x20001254
 800ae80:	20001240 	.word	0x20001240

0800ae84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10a      	bne.n	800aeaa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	613b      	str	r3, [r7, #16]
}
 800aea6:	bf00      	nop
 800aea8:	e7fe      	b.n	800aea8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d10a      	bne.n	800aec6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb4:	f383 8811 	msr	BASEPRI, r3
 800aeb8:	f3bf 8f6f 	isb	sy
 800aebc:	f3bf 8f4f 	dsb	sy
 800aec0:	60fb      	str	r3, [r7, #12]
}
 800aec2:	bf00      	nop
 800aec4:	e7fe      	b.n	800aec4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aec6:	f000 fe7d 	bl	800bbc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aeca:	4b1d      	ldr	r3, [pc, #116]	; (800af40 <xTaskCheckForTimeOut+0xbc>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	69ba      	ldr	r2, [r7, #24]
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aee2:	d102      	bne.n	800aeea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aee4:	2300      	movs	r3, #0
 800aee6:	61fb      	str	r3, [r7, #28]
 800aee8:	e023      	b.n	800af32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	4b15      	ldr	r3, [pc, #84]	; (800af44 <xTaskCheckForTimeOut+0xc0>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d007      	beq.n	800af06 <xTaskCheckForTimeOut+0x82>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	69ba      	ldr	r2, [r7, #24]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d302      	bcc.n	800af06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af00:	2301      	movs	r3, #1
 800af02:	61fb      	str	r3, [r7, #28]
 800af04:	e015      	b.n	800af32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d20b      	bcs.n	800af28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	1ad2      	subs	r2, r2, r3
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7ff ff9b 	bl	800ae58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af22:	2300      	movs	r3, #0
 800af24:	61fb      	str	r3, [r7, #28]
 800af26:	e004      	b.n	800af32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	2200      	movs	r2, #0
 800af2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af2e:	2301      	movs	r3, #1
 800af30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af32:	f000 fe77 	bl	800bc24 <vPortExitCritical>

	return xReturn;
 800af36:	69fb      	ldr	r3, [r7, #28]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3720      	adds	r7, #32
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	20001240 	.word	0x20001240
 800af44:	20001254 	.word	0x20001254

0800af48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af48:	b480      	push	{r7}
 800af4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af4c:	4b03      	ldr	r3, [pc, #12]	; (800af5c <vTaskMissedYield+0x14>)
 800af4e:	2201      	movs	r2, #1
 800af50:	601a      	str	r2, [r3, #0]
}
 800af52:	bf00      	nop
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	20001250 	.word	0x20001250

0800af60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af68:	f000 f852 	bl	800b010 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af6c:	4b06      	ldr	r3, [pc, #24]	; (800af88 <prvIdleTask+0x28>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b01      	cmp	r3, #1
 800af72:	d9f9      	bls.n	800af68 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af74:	4b05      	ldr	r3, [pc, #20]	; (800af8c <prvIdleTask+0x2c>)
 800af76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af7a:	601a      	str	r2, [r3, #0]
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af84:	e7f0      	b.n	800af68 <prvIdleTask+0x8>
 800af86:	bf00      	nop
 800af88:	20000d6c 	.word	0x20000d6c
 800af8c:	e000ed04 	.word	0xe000ed04

0800af90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af96:	2300      	movs	r3, #0
 800af98:	607b      	str	r3, [r7, #4]
 800af9a:	e00c      	b.n	800afb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	4613      	mov	r3, r2
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4a12      	ldr	r2, [pc, #72]	; (800aff0 <prvInitialiseTaskLists+0x60>)
 800afa8:	4413      	add	r3, r2
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fe fcb8 	bl	8009920 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	3301      	adds	r3, #1
 800afb4:	607b      	str	r3, [r7, #4]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2b37      	cmp	r3, #55	; 0x37
 800afba:	d9ef      	bls.n	800af9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afbc:	480d      	ldr	r0, [pc, #52]	; (800aff4 <prvInitialiseTaskLists+0x64>)
 800afbe:	f7fe fcaf 	bl	8009920 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afc2:	480d      	ldr	r0, [pc, #52]	; (800aff8 <prvInitialiseTaskLists+0x68>)
 800afc4:	f7fe fcac 	bl	8009920 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800afc8:	480c      	ldr	r0, [pc, #48]	; (800affc <prvInitialiseTaskLists+0x6c>)
 800afca:	f7fe fca9 	bl	8009920 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800afce:	480c      	ldr	r0, [pc, #48]	; (800b000 <prvInitialiseTaskLists+0x70>)
 800afd0:	f7fe fca6 	bl	8009920 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800afd4:	480b      	ldr	r0, [pc, #44]	; (800b004 <prvInitialiseTaskLists+0x74>)
 800afd6:	f7fe fca3 	bl	8009920 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800afda:	4b0b      	ldr	r3, [pc, #44]	; (800b008 <prvInitialiseTaskLists+0x78>)
 800afdc:	4a05      	ldr	r2, [pc, #20]	; (800aff4 <prvInitialiseTaskLists+0x64>)
 800afde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800afe0:	4b0a      	ldr	r3, [pc, #40]	; (800b00c <prvInitialiseTaskLists+0x7c>)
 800afe2:	4a05      	ldr	r2, [pc, #20]	; (800aff8 <prvInitialiseTaskLists+0x68>)
 800afe4:	601a      	str	r2, [r3, #0]
}
 800afe6:	bf00      	nop
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	20000d6c 	.word	0x20000d6c
 800aff4:	200011cc 	.word	0x200011cc
 800aff8:	200011e0 	.word	0x200011e0
 800affc:	200011fc 	.word	0x200011fc
 800b000:	20001210 	.word	0x20001210
 800b004:	20001228 	.word	0x20001228
 800b008:	200011f4 	.word	0x200011f4
 800b00c:	200011f8 	.word	0x200011f8

0800b010 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b016:	e019      	b.n	800b04c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b018:	f000 fdd4 	bl	800bbc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b01c:	4b10      	ldr	r3, [pc, #64]	; (800b060 <prvCheckTasksWaitingTermination+0x50>)
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	3304      	adds	r3, #4
 800b028:	4618      	mov	r0, r3
 800b02a:	f7fe fd03 	bl	8009a34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b02e:	4b0d      	ldr	r3, [pc, #52]	; (800b064 <prvCheckTasksWaitingTermination+0x54>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	3b01      	subs	r3, #1
 800b034:	4a0b      	ldr	r2, [pc, #44]	; (800b064 <prvCheckTasksWaitingTermination+0x54>)
 800b036:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b038:	4b0b      	ldr	r3, [pc, #44]	; (800b068 <prvCheckTasksWaitingTermination+0x58>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	4a0a      	ldr	r2, [pc, #40]	; (800b068 <prvCheckTasksWaitingTermination+0x58>)
 800b040:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b042:	f000 fdef 	bl	800bc24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 f810 	bl	800b06c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b04c:	4b06      	ldr	r3, [pc, #24]	; (800b068 <prvCheckTasksWaitingTermination+0x58>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1e1      	bne.n	800b018 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b054:	bf00      	nop
 800b056:	bf00      	nop
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	20001210 	.word	0x20001210
 800b064:	2000123c 	.word	0x2000123c
 800b068:	20001224 	.word	0x20001224

0800b06c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3354      	adds	r3, #84	; 0x54
 800b078:	4618      	mov	r0, r3
 800b07a:	f001 fa7f 	bl	800c57c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b084:	2b00      	cmp	r3, #0
 800b086:	d108      	bne.n	800b09a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b08c:	4618      	mov	r0, r3
 800b08e:	f000 ff87 	bl	800bfa0 <vPortFree>
				vPortFree( pxTCB );
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 ff84 	bl	800bfa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b098:	e018      	b.n	800b0cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d103      	bne.n	800b0ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 ff7b 	bl	800bfa0 <vPortFree>
	}
 800b0aa:	e00f      	b.n	800b0cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	d00a      	beq.n	800b0cc <prvDeleteTCB+0x60>
	__asm volatile
 800b0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	60fb      	str	r3, [r7, #12]
}
 800b0c8:	bf00      	nop
 800b0ca:	e7fe      	b.n	800b0ca <prvDeleteTCB+0x5e>
	}
 800b0cc:	bf00      	nop
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0da:	4b0c      	ldr	r3, [pc, #48]	; (800b10c <prvResetNextTaskUnblockTime+0x38>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d104      	bne.n	800b0ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	; (800b110 <prvResetNextTaskUnblockTime+0x3c>)
 800b0e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b0ec:	e008      	b.n	800b100 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ee:	4b07      	ldr	r3, [pc, #28]	; (800b10c <prvResetNextTaskUnblockTime+0x38>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	4a04      	ldr	r2, [pc, #16]	; (800b110 <prvResetNextTaskUnblockTime+0x3c>)
 800b0fe:	6013      	str	r3, [r2, #0]
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	200011f4 	.word	0x200011f4
 800b110:	2000125c 	.word	0x2000125c

0800b114 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b11a:	4b0b      	ldr	r3, [pc, #44]	; (800b148 <xTaskGetSchedulerState+0x34>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d102      	bne.n	800b128 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b122:	2301      	movs	r3, #1
 800b124:	607b      	str	r3, [r7, #4]
 800b126:	e008      	b.n	800b13a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b128:	4b08      	ldr	r3, [pc, #32]	; (800b14c <xTaskGetSchedulerState+0x38>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d102      	bne.n	800b136 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b130:	2302      	movs	r3, #2
 800b132:	607b      	str	r3, [r7, #4]
 800b134:	e001      	b.n	800b13a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b136:	2300      	movs	r3, #0
 800b138:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b13a:	687b      	ldr	r3, [r7, #4]
	}
 800b13c:	4618      	mov	r0, r3
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	20001248 	.word	0x20001248
 800b14c:	20001264 	.word	0x20001264

0800b150 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b15c:	2300      	movs	r3, #0
 800b15e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d056      	beq.n	800b214 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b166:	4b2e      	ldr	r3, [pc, #184]	; (800b220 <xTaskPriorityDisinherit+0xd0>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	693a      	ldr	r2, [r7, #16]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d00a      	beq.n	800b186 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b174:	f383 8811 	msr	BASEPRI, r3
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	60fb      	str	r3, [r7, #12]
}
 800b182:	bf00      	nop
 800b184:	e7fe      	b.n	800b184 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10a      	bne.n	800b1a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	60bb      	str	r3, [r7, #8]
}
 800b1a0:	bf00      	nop
 800b1a2:	e7fe      	b.n	800b1a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1a8:	1e5a      	subs	r2, r3, #1
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d02c      	beq.n	800b214 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d128      	bne.n	800b214 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	3304      	adds	r3, #4
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fe fc34 	bl	8009a34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e4:	4b0f      	ldr	r3, [pc, #60]	; (800b224 <xTaskPriorityDisinherit+0xd4>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d903      	bls.n	800b1f4 <xTaskPriorityDisinherit+0xa4>
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f0:	4a0c      	ldr	r2, [pc, #48]	; (800b224 <xTaskPriorityDisinherit+0xd4>)
 800b1f2:	6013      	str	r3, [r2, #0]
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4a09      	ldr	r2, [pc, #36]	; (800b228 <xTaskPriorityDisinherit+0xd8>)
 800b202:	441a      	add	r2, r3
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	3304      	adds	r3, #4
 800b208:	4619      	mov	r1, r3
 800b20a:	4610      	mov	r0, r2
 800b20c:	f7fe fbb5 	bl	800997a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b210:	2301      	movs	r3, #1
 800b212:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b214:	697b      	ldr	r3, [r7, #20]
	}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	20000d68 	.word	0x20000d68
 800b224:	20001244 	.word	0x20001244
 800b228:	20000d6c 	.word	0x20000d6c

0800b22c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b236:	4b21      	ldr	r3, [pc, #132]	; (800b2bc <prvAddCurrentTaskToDelayedList+0x90>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b23c:	4b20      	ldr	r3, [pc, #128]	; (800b2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	3304      	adds	r3, #4
 800b242:	4618      	mov	r0, r3
 800b244:	f7fe fbf6 	bl	8009a34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b24e:	d10a      	bne.n	800b266 <prvAddCurrentTaskToDelayedList+0x3a>
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d007      	beq.n	800b266 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b256:	4b1a      	ldr	r3, [pc, #104]	; (800b2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	3304      	adds	r3, #4
 800b25c:	4619      	mov	r1, r3
 800b25e:	4819      	ldr	r0, [pc, #100]	; (800b2c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b260:	f7fe fb8b 	bl	800997a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b264:	e026      	b.n	800b2b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4413      	add	r3, r2
 800b26c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b26e:	4b14      	ldr	r3, [pc, #80]	; (800b2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	68ba      	ldr	r2, [r7, #8]
 800b274:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d209      	bcs.n	800b292 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b27e:	4b12      	ldr	r3, [pc, #72]	; (800b2c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	4b0f      	ldr	r3, [pc, #60]	; (800b2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3304      	adds	r3, #4
 800b288:	4619      	mov	r1, r3
 800b28a:	4610      	mov	r0, r2
 800b28c:	f7fe fb99 	bl	80099c2 <vListInsert>
}
 800b290:	e010      	b.n	800b2b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b292:	4b0e      	ldr	r3, [pc, #56]	; (800b2cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	4b0a      	ldr	r3, [pc, #40]	; (800b2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3304      	adds	r3, #4
 800b29c:	4619      	mov	r1, r3
 800b29e:	4610      	mov	r0, r2
 800b2a0:	f7fe fb8f 	bl	80099c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2a4:	4b0a      	ldr	r3, [pc, #40]	; (800b2d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68ba      	ldr	r2, [r7, #8]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d202      	bcs.n	800b2b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b2ae:	4a08      	ldr	r2, [pc, #32]	; (800b2d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	6013      	str	r3, [r2, #0]
}
 800b2b4:	bf00      	nop
 800b2b6:	3710      	adds	r7, #16
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	20001240 	.word	0x20001240
 800b2c0:	20000d68 	.word	0x20000d68
 800b2c4:	20001228 	.word	0x20001228
 800b2c8:	200011f8 	.word	0x200011f8
 800b2cc:	200011f4 	.word	0x200011f4
 800b2d0:	2000125c 	.word	0x2000125c

0800b2d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b08a      	sub	sp, #40	; 0x28
 800b2d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b2de:	f000 fb07 	bl	800b8f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b2e2:	4b1c      	ldr	r3, [pc, #112]	; (800b354 <xTimerCreateTimerTask+0x80>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d021      	beq.n	800b32e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b2f2:	1d3a      	adds	r2, r7, #4
 800b2f4:	f107 0108 	add.w	r1, r7, #8
 800b2f8:	f107 030c 	add.w	r3, r7, #12
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7fe faf5 	bl	80098ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b302:	6879      	ldr	r1, [r7, #4]
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	9202      	str	r2, [sp, #8]
 800b30a:	9301      	str	r3, [sp, #4]
 800b30c:	2302      	movs	r3, #2
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	2300      	movs	r3, #0
 800b312:	460a      	mov	r2, r1
 800b314:	4910      	ldr	r1, [pc, #64]	; (800b358 <xTimerCreateTimerTask+0x84>)
 800b316:	4811      	ldr	r0, [pc, #68]	; (800b35c <xTimerCreateTimerTask+0x88>)
 800b318:	f7ff f8a2 	bl	800a460 <xTaskCreateStatic>
 800b31c:	4603      	mov	r3, r0
 800b31e:	4a10      	ldr	r2, [pc, #64]	; (800b360 <xTimerCreateTimerTask+0x8c>)
 800b320:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b322:	4b0f      	ldr	r3, [pc, #60]	; (800b360 <xTimerCreateTimerTask+0x8c>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d001      	beq.n	800b32e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b32a:	2301      	movs	r3, #1
 800b32c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10a      	bne.n	800b34a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b338:	f383 8811 	msr	BASEPRI, r3
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	613b      	str	r3, [r7, #16]
}
 800b346:	bf00      	nop
 800b348:	e7fe      	b.n	800b348 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b34a:	697b      	ldr	r3, [r7, #20]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3718      	adds	r7, #24
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	20001298 	.word	0x20001298
 800b358:	0800d704 	.word	0x0800d704
 800b35c:	0800b499 	.word	0x0800b499
 800b360:	2000129c 	.word	0x2000129c

0800b364 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b08a      	sub	sp, #40	; 0x28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
 800b370:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b372:	2300      	movs	r3, #0
 800b374:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10a      	bne.n	800b392 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	623b      	str	r3, [r7, #32]
}
 800b38e:	bf00      	nop
 800b390:	e7fe      	b.n	800b390 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b392:	4b1a      	ldr	r3, [pc, #104]	; (800b3fc <xTimerGenericCommand+0x98>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d02a      	beq.n	800b3f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	2b05      	cmp	r3, #5
 800b3aa:	dc18      	bgt.n	800b3de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b3ac:	f7ff feb2 	bl	800b114 <xTaskGetSchedulerState>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	d109      	bne.n	800b3ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b3b6:	4b11      	ldr	r3, [pc, #68]	; (800b3fc <xTimerGenericCommand+0x98>)
 800b3b8:	6818      	ldr	r0, [r3, #0]
 800b3ba:	f107 0110 	add.w	r1, r7, #16
 800b3be:	2300      	movs	r3, #0
 800b3c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3c2:	f7fe fc65 	bl	8009c90 <xQueueGenericSend>
 800b3c6:	6278      	str	r0, [r7, #36]	; 0x24
 800b3c8:	e012      	b.n	800b3f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b3ca:	4b0c      	ldr	r3, [pc, #48]	; (800b3fc <xTimerGenericCommand+0x98>)
 800b3cc:	6818      	ldr	r0, [r3, #0]
 800b3ce:	f107 0110 	add.w	r1, r7, #16
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f7fe fc5b 	bl	8009c90 <xQueueGenericSend>
 800b3da:	6278      	str	r0, [r7, #36]	; 0x24
 800b3dc:	e008      	b.n	800b3f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b3de:	4b07      	ldr	r3, [pc, #28]	; (800b3fc <xTimerGenericCommand+0x98>)
 800b3e0:	6818      	ldr	r0, [r3, #0]
 800b3e2:	f107 0110 	add.w	r1, r7, #16
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	683a      	ldr	r2, [r7, #0]
 800b3ea:	f7fe fd4f 	bl	8009e8c <xQueueGenericSendFromISR>
 800b3ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3728      	adds	r7, #40	; 0x28
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	20001298 	.word	0x20001298

0800b400 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b088      	sub	sp, #32
 800b404:	af02      	add	r7, sp, #8
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b40a:	4b22      	ldr	r3, [pc, #136]	; (800b494 <prvProcessExpiredTimer+0x94>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	3304      	adds	r3, #4
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fe fb0b 	bl	8009a34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b424:	f003 0304 	and.w	r3, r3, #4
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d022      	beq.n	800b472 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	699a      	ldr	r2, [r3, #24]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	18d1      	adds	r1, r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	683a      	ldr	r2, [r7, #0]
 800b438:	6978      	ldr	r0, [r7, #20]
 800b43a:	f000 f8d1 	bl	800b5e0 <prvInsertTimerInActiveList>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d01f      	beq.n	800b484 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b444:	2300      	movs	r3, #0
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	2300      	movs	r3, #0
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	2100      	movs	r1, #0
 800b44e:	6978      	ldr	r0, [r7, #20]
 800b450:	f7ff ff88 	bl	800b364 <xTimerGenericCommand>
 800b454:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d113      	bne.n	800b484 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	60fb      	str	r3, [r7, #12]
}
 800b46e:	bf00      	nop
 800b470:	e7fe      	b.n	800b470 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b478:	f023 0301 	bic.w	r3, r3, #1
 800b47c:	b2da      	uxtb	r2, r3
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	6a1b      	ldr	r3, [r3, #32]
 800b488:	6978      	ldr	r0, [r7, #20]
 800b48a:	4798      	blx	r3
}
 800b48c:	bf00      	nop
 800b48e:	3718      	adds	r7, #24
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	20001290 	.word	0x20001290

0800b498 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4a0:	f107 0308 	add.w	r3, r7, #8
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 f857 	bl	800b558 <prvGetNextExpireTime>
 800b4aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f000 f803 	bl	800b4bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b4b6:	f000 f8d5 	bl	800b664 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4ba:	e7f1      	b.n	800b4a0 <prvTimerTask+0x8>

0800b4bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b4c6:	f7ff fa27 	bl	800a918 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4ca:	f107 0308 	add.w	r3, r7, #8
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f000 f866 	bl	800b5a0 <prvSampleTimeNow>
 800b4d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d130      	bne.n	800b53e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10a      	bne.n	800b4f8 <prvProcessTimerOrBlockTask+0x3c>
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d806      	bhi.n	800b4f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b4ea:	f7ff fa23 	bl	800a934 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b4ee:	68f9      	ldr	r1, [r7, #12]
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f7ff ff85 	bl	800b400 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b4f6:	e024      	b.n	800b542 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d008      	beq.n	800b510 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b4fe:	4b13      	ldr	r3, [pc, #76]	; (800b54c <prvProcessTimerOrBlockTask+0x90>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d101      	bne.n	800b50c <prvProcessTimerOrBlockTask+0x50>
 800b508:	2301      	movs	r3, #1
 800b50a:	e000      	b.n	800b50e <prvProcessTimerOrBlockTask+0x52>
 800b50c:	2300      	movs	r3, #0
 800b50e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b510:	4b0f      	ldr	r3, [pc, #60]	; (800b550 <prvProcessTimerOrBlockTask+0x94>)
 800b512:	6818      	ldr	r0, [r3, #0]
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	4619      	mov	r1, r3
 800b51e:	f7fe ff6b 	bl	800a3f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b522:	f7ff fa07 	bl	800a934 <xTaskResumeAll>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10a      	bne.n	800b542 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b52c:	4b09      	ldr	r3, [pc, #36]	; (800b554 <prvProcessTimerOrBlockTask+0x98>)
 800b52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b532:	601a      	str	r2, [r3, #0]
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	f3bf 8f6f 	isb	sy
}
 800b53c:	e001      	b.n	800b542 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b53e:	f7ff f9f9 	bl	800a934 <xTaskResumeAll>
}
 800b542:	bf00      	nop
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	20001294 	.word	0x20001294
 800b550:	20001298 	.word	0x20001298
 800b554:	e000ed04 	.word	0xe000ed04

0800b558 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b560:	4b0e      	ldr	r3, [pc, #56]	; (800b59c <prvGetNextExpireTime+0x44>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d101      	bne.n	800b56e <prvGetNextExpireTime+0x16>
 800b56a:	2201      	movs	r2, #1
 800b56c:	e000      	b.n	800b570 <prvGetNextExpireTime+0x18>
 800b56e:	2200      	movs	r2, #0
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d105      	bne.n	800b588 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b57c:	4b07      	ldr	r3, [pc, #28]	; (800b59c <prvGetNextExpireTime+0x44>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	60fb      	str	r3, [r7, #12]
 800b586:	e001      	b.n	800b58c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b588:	2300      	movs	r3, #0
 800b58a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b58c:	68fb      	ldr	r3, [r7, #12]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3714      	adds	r7, #20
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	20001290 	.word	0x20001290

0800b5a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b5a8:	f7ff fa62 	bl	800aa70 <xTaskGetTickCount>
 800b5ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b5ae:	4b0b      	ldr	r3, [pc, #44]	; (800b5dc <prvSampleTimeNow+0x3c>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d205      	bcs.n	800b5c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b5b8:	f000 f936 	bl	800b828 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	601a      	str	r2, [r3, #0]
 800b5c2:	e002      	b.n	800b5ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b5ca:	4a04      	ldr	r2, [pc, #16]	; (800b5dc <prvSampleTimeNow+0x3c>)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	200012a0 	.word	0x200012a0

0800b5e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
 800b5ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	429a      	cmp	r2, r3
 800b604:	d812      	bhi.n	800b62c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	1ad2      	subs	r2, r2, r3
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	699b      	ldr	r3, [r3, #24]
 800b610:	429a      	cmp	r2, r3
 800b612:	d302      	bcc.n	800b61a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b614:	2301      	movs	r3, #1
 800b616:	617b      	str	r3, [r7, #20]
 800b618:	e01b      	b.n	800b652 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b61a:	4b10      	ldr	r3, [pc, #64]	; (800b65c <prvInsertTimerInActiveList+0x7c>)
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	3304      	adds	r3, #4
 800b622:	4619      	mov	r1, r3
 800b624:	4610      	mov	r0, r2
 800b626:	f7fe f9cc 	bl	80099c2 <vListInsert>
 800b62a:	e012      	b.n	800b652 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	429a      	cmp	r2, r3
 800b632:	d206      	bcs.n	800b642 <prvInsertTimerInActiveList+0x62>
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d302      	bcc.n	800b642 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b63c:	2301      	movs	r3, #1
 800b63e:	617b      	str	r3, [r7, #20]
 800b640:	e007      	b.n	800b652 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b642:	4b07      	ldr	r3, [pc, #28]	; (800b660 <prvInsertTimerInActiveList+0x80>)
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	3304      	adds	r3, #4
 800b64a:	4619      	mov	r1, r3
 800b64c:	4610      	mov	r0, r2
 800b64e:	f7fe f9b8 	bl	80099c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b652:	697b      	ldr	r3, [r7, #20]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3718      	adds	r7, #24
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	20001294 	.word	0x20001294
 800b660:	20001290 	.word	0x20001290

0800b664 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b08e      	sub	sp, #56	; 0x38
 800b668:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b66a:	e0ca      	b.n	800b802 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	da18      	bge.n	800b6a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b672:	1d3b      	adds	r3, r7, #4
 800b674:	3304      	adds	r3, #4
 800b676:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10a      	bne.n	800b694 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	61fb      	str	r3, [r7, #28]
}
 800b690:	bf00      	nop
 800b692:	e7fe      	b.n	800b692 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b69a:	6850      	ldr	r0, [r2, #4]
 800b69c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b69e:	6892      	ldr	r2, [r2, #8]
 800b6a0:	4611      	mov	r1, r2
 800b6a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f2c0 80aa 	blt.w	800b800 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b2:	695b      	ldr	r3, [r3, #20]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d004      	beq.n	800b6c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ba:	3304      	adds	r3, #4
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fe f9b9 	bl	8009a34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6c2:	463b      	mov	r3, r7
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff ff6b 	bl	800b5a0 <prvSampleTimeNow>
 800b6ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2b09      	cmp	r3, #9
 800b6d0:	f200 8097 	bhi.w	800b802 <prvProcessReceivedCommands+0x19e>
 800b6d4:	a201      	add	r2, pc, #4	; (adr r2, 800b6dc <prvProcessReceivedCommands+0x78>)
 800b6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6da:	bf00      	nop
 800b6dc:	0800b705 	.word	0x0800b705
 800b6e0:	0800b705 	.word	0x0800b705
 800b6e4:	0800b705 	.word	0x0800b705
 800b6e8:	0800b779 	.word	0x0800b779
 800b6ec:	0800b78d 	.word	0x0800b78d
 800b6f0:	0800b7d7 	.word	0x0800b7d7
 800b6f4:	0800b705 	.word	0x0800b705
 800b6f8:	0800b705 	.word	0x0800b705
 800b6fc:	0800b779 	.word	0x0800b779
 800b700:	0800b78d 	.word	0x0800b78d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b70a:	f043 0301 	orr.w	r3, r3, #1
 800b70e:	b2da      	uxtb	r2, r3
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b716:	68ba      	ldr	r2, [r7, #8]
 800b718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	18d1      	adds	r1, r2, r3
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b724:	f7ff ff5c 	bl	800b5e0 <prvInsertTimerInActiveList>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d069      	beq.n	800b802 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b734:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b73c:	f003 0304 	and.w	r3, r3, #4
 800b740:	2b00      	cmp	r3, #0
 800b742:	d05e      	beq.n	800b802 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	441a      	add	r2, r3
 800b74c:	2300      	movs	r3, #0
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	2300      	movs	r3, #0
 800b752:	2100      	movs	r1, #0
 800b754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b756:	f7ff fe05 	bl	800b364 <xTimerGenericCommand>
 800b75a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b75c:	6a3b      	ldr	r3, [r7, #32]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d14f      	bne.n	800b802 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b766:	f383 8811 	msr	BASEPRI, r3
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	61bb      	str	r3, [r7, #24]
}
 800b774:	bf00      	nop
 800b776:	e7fe      	b.n	800b776 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b77e:	f023 0301 	bic.w	r3, r3, #1
 800b782:	b2da      	uxtb	r2, r3
 800b784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b78a:	e03a      	b.n	800b802 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b792:	f043 0301 	orr.w	r3, r3, #1
 800b796:	b2da      	uxtb	r2, r3
 800b798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a6:	699b      	ldr	r3, [r3, #24]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10a      	bne.n	800b7c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	617b      	str	r3, [r7, #20]
}
 800b7be:	bf00      	nop
 800b7c0:	e7fe      	b.n	800b7c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c4:	699a      	ldr	r2, [r3, #24]
 800b7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c8:	18d1      	adds	r1, r2, r3
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7d0:	f7ff ff06 	bl	800b5e0 <prvInsertTimerInActiveList>
					break;
 800b7d4:	e015      	b.n	800b802 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7dc:	f003 0302 	and.w	r3, r3, #2
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d103      	bne.n	800b7ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b7e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7e6:	f000 fbdb 	bl	800bfa0 <vPortFree>
 800b7ea:	e00a      	b.n	800b802 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7f2:	f023 0301 	bic.w	r3, r3, #1
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b7fe:	e000      	b.n	800b802 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b800:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b802:	4b08      	ldr	r3, [pc, #32]	; (800b824 <prvProcessReceivedCommands+0x1c0>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	1d39      	adds	r1, r7, #4
 800b808:	2200      	movs	r2, #0
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fe fbda 	bl	8009fc4 <xQueueReceive>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	f47f af2a 	bne.w	800b66c <prvProcessReceivedCommands+0x8>
	}
}
 800b818:	bf00      	nop
 800b81a:	bf00      	nop
 800b81c:	3730      	adds	r7, #48	; 0x30
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	20001298 	.word	0x20001298

0800b828 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b088      	sub	sp, #32
 800b82c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b82e:	e048      	b.n	800b8c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b830:	4b2d      	ldr	r3, [pc, #180]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b83a:	4b2b      	ldr	r3, [pc, #172]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	3304      	adds	r3, #4
 800b848:	4618      	mov	r0, r3
 800b84a:	f7fe f8f3 	bl	8009a34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6a1b      	ldr	r3, [r3, #32]
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b85c:	f003 0304 	and.w	r3, r3, #4
 800b860:	2b00      	cmp	r3, #0
 800b862:	d02e      	beq.n	800b8c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	699b      	ldr	r3, [r3, #24]
 800b868:	693a      	ldr	r2, [r7, #16]
 800b86a:	4413      	add	r3, r2
 800b86c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	429a      	cmp	r2, r3
 800b874:	d90e      	bls.n	800b894 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b882:	4b19      	ldr	r3, [pc, #100]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	3304      	adds	r3, #4
 800b88a:	4619      	mov	r1, r3
 800b88c:	4610      	mov	r0, r2
 800b88e:	f7fe f898 	bl	80099c2 <vListInsert>
 800b892:	e016      	b.n	800b8c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b894:	2300      	movs	r3, #0
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	2300      	movs	r3, #0
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	2100      	movs	r1, #0
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f7ff fd60 	bl	800b364 <xTimerGenericCommand>
 800b8a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10a      	bne.n	800b8c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	603b      	str	r3, [r7, #0]
}
 800b8be:	bf00      	nop
 800b8c0:	e7fe      	b.n	800b8c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8c2:	4b09      	ldr	r3, [pc, #36]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1b1      	bne.n	800b830 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b8cc:	4b06      	ldr	r3, [pc, #24]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b8d2:	4b06      	ldr	r3, [pc, #24]	; (800b8ec <prvSwitchTimerLists+0xc4>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a04      	ldr	r2, [pc, #16]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b8d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b8da:	4a04      	ldr	r2, [pc, #16]	; (800b8ec <prvSwitchTimerLists+0xc4>)
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	6013      	str	r3, [r2, #0]
}
 800b8e0:	bf00      	nop
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	20001290 	.word	0x20001290
 800b8ec:	20001294 	.word	0x20001294

0800b8f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b8f6:	f000 f965 	bl	800bbc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b8fa:	4b15      	ldr	r3, [pc, #84]	; (800b950 <prvCheckForValidListAndQueue+0x60>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d120      	bne.n	800b944 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b902:	4814      	ldr	r0, [pc, #80]	; (800b954 <prvCheckForValidListAndQueue+0x64>)
 800b904:	f7fe f80c 	bl	8009920 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b908:	4813      	ldr	r0, [pc, #76]	; (800b958 <prvCheckForValidListAndQueue+0x68>)
 800b90a:	f7fe f809 	bl	8009920 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b90e:	4b13      	ldr	r3, [pc, #76]	; (800b95c <prvCheckForValidListAndQueue+0x6c>)
 800b910:	4a10      	ldr	r2, [pc, #64]	; (800b954 <prvCheckForValidListAndQueue+0x64>)
 800b912:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b914:	4b12      	ldr	r3, [pc, #72]	; (800b960 <prvCheckForValidListAndQueue+0x70>)
 800b916:	4a10      	ldr	r2, [pc, #64]	; (800b958 <prvCheckForValidListAndQueue+0x68>)
 800b918:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b91a:	2300      	movs	r3, #0
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	4b11      	ldr	r3, [pc, #68]	; (800b964 <prvCheckForValidListAndQueue+0x74>)
 800b920:	4a11      	ldr	r2, [pc, #68]	; (800b968 <prvCheckForValidListAndQueue+0x78>)
 800b922:	2110      	movs	r1, #16
 800b924:	200a      	movs	r0, #10
 800b926:	f7fe f917 	bl	8009b58 <xQueueGenericCreateStatic>
 800b92a:	4603      	mov	r3, r0
 800b92c:	4a08      	ldr	r2, [pc, #32]	; (800b950 <prvCheckForValidListAndQueue+0x60>)
 800b92e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b930:	4b07      	ldr	r3, [pc, #28]	; (800b950 <prvCheckForValidListAndQueue+0x60>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d005      	beq.n	800b944 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b938:	4b05      	ldr	r3, [pc, #20]	; (800b950 <prvCheckForValidListAndQueue+0x60>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	490b      	ldr	r1, [pc, #44]	; (800b96c <prvCheckForValidListAndQueue+0x7c>)
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fe fd30 	bl	800a3a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b944:	f000 f96e 	bl	800bc24 <vPortExitCritical>
}
 800b948:	bf00      	nop
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	20001298 	.word	0x20001298
 800b954:	20001268 	.word	0x20001268
 800b958:	2000127c 	.word	0x2000127c
 800b95c:	20001290 	.word	0x20001290
 800b960:	20001294 	.word	0x20001294
 800b964:	20001344 	.word	0x20001344
 800b968:	200012a4 	.word	0x200012a4
 800b96c:	0800d70c 	.word	0x0800d70c

0800b970 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	3b04      	subs	r3, #4
 800b980:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	3b04      	subs	r3, #4
 800b98e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	f023 0201 	bic.w	r2, r3, #1
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	3b04      	subs	r3, #4
 800b99e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9a0:	4a0c      	ldr	r2, [pc, #48]	; (800b9d4 <pxPortInitialiseStack+0x64>)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3b14      	subs	r3, #20
 800b9aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	3b04      	subs	r3, #4
 800b9b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f06f 0202 	mvn.w	r2, #2
 800b9be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	3b20      	subs	r3, #32
 800b9c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3714      	adds	r7, #20
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr
 800b9d4:	0800b9d9 	.word	0x0800b9d9

0800b9d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b9e2:	4b12      	ldr	r3, [pc, #72]	; (800ba2c <prvTaskExitError+0x54>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9ea:	d00a      	beq.n	800ba02 <prvTaskExitError+0x2a>
	__asm volatile
 800b9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f0:	f383 8811 	msr	BASEPRI, r3
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	60fb      	str	r3, [r7, #12]
}
 800b9fe:	bf00      	nop
 800ba00:	e7fe      	b.n	800ba00 <prvTaskExitError+0x28>
	__asm volatile
 800ba02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba06:	f383 8811 	msr	BASEPRI, r3
 800ba0a:	f3bf 8f6f 	isb	sy
 800ba0e:	f3bf 8f4f 	dsb	sy
 800ba12:	60bb      	str	r3, [r7, #8]
}
 800ba14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba16:	bf00      	nop
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d0fc      	beq.n	800ba18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba1e:	bf00      	nop
 800ba20:	bf00      	nop
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr
 800ba2c:	200002a8 	.word	0x200002a8

0800ba30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba30:	4b07      	ldr	r3, [pc, #28]	; (800ba50 <pxCurrentTCBConst2>)
 800ba32:	6819      	ldr	r1, [r3, #0]
 800ba34:	6808      	ldr	r0, [r1, #0]
 800ba36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba3a:	f380 8809 	msr	PSP, r0
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f04f 0000 	mov.w	r0, #0
 800ba46:	f380 8811 	msr	BASEPRI, r0
 800ba4a:	4770      	bx	lr
 800ba4c:	f3af 8000 	nop.w

0800ba50 <pxCurrentTCBConst2>:
 800ba50:	20000d68 	.word	0x20000d68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba54:	bf00      	nop
 800ba56:	bf00      	nop

0800ba58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba58:	4808      	ldr	r0, [pc, #32]	; (800ba7c <prvPortStartFirstTask+0x24>)
 800ba5a:	6800      	ldr	r0, [r0, #0]
 800ba5c:	6800      	ldr	r0, [r0, #0]
 800ba5e:	f380 8808 	msr	MSP, r0
 800ba62:	f04f 0000 	mov.w	r0, #0
 800ba66:	f380 8814 	msr	CONTROL, r0
 800ba6a:	b662      	cpsie	i
 800ba6c:	b661      	cpsie	f
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	f3bf 8f6f 	isb	sy
 800ba76:	df00      	svc	0
 800ba78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba7a:	bf00      	nop
 800ba7c:	e000ed08 	.word	0xe000ed08

0800ba80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba86:	4b46      	ldr	r3, [pc, #280]	; (800bba0 <xPortStartScheduler+0x120>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a46      	ldr	r2, [pc, #280]	; (800bba4 <xPortStartScheduler+0x124>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d10a      	bne.n	800baa6 <xPortStartScheduler+0x26>
	__asm volatile
 800ba90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba94:	f383 8811 	msr	BASEPRI, r3
 800ba98:	f3bf 8f6f 	isb	sy
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	613b      	str	r3, [r7, #16]
}
 800baa2:	bf00      	nop
 800baa4:	e7fe      	b.n	800baa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800baa6:	4b3e      	ldr	r3, [pc, #248]	; (800bba0 <xPortStartScheduler+0x120>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a3f      	ldr	r2, [pc, #252]	; (800bba8 <xPortStartScheduler+0x128>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d10a      	bne.n	800bac6 <xPortStartScheduler+0x46>
	__asm volatile
 800bab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab4:	f383 8811 	msr	BASEPRI, r3
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	60fb      	str	r3, [r7, #12]
}
 800bac2:	bf00      	nop
 800bac4:	e7fe      	b.n	800bac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bac6:	4b39      	ldr	r3, [pc, #228]	; (800bbac <xPortStartScheduler+0x12c>)
 800bac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	22ff      	movs	r2, #255	; 0xff
 800bad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	b2db      	uxtb	r3, r3
 800bade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bae0:	78fb      	ldrb	r3, [r7, #3]
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bae8:	b2da      	uxtb	r2, r3
 800baea:	4b31      	ldr	r3, [pc, #196]	; (800bbb0 <xPortStartScheduler+0x130>)
 800baec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800baee:	4b31      	ldr	r3, [pc, #196]	; (800bbb4 <xPortStartScheduler+0x134>)
 800baf0:	2207      	movs	r2, #7
 800baf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baf4:	e009      	b.n	800bb0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800baf6:	4b2f      	ldr	r3, [pc, #188]	; (800bbb4 <xPortStartScheduler+0x134>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	3b01      	subs	r3, #1
 800bafc:	4a2d      	ldr	r2, [pc, #180]	; (800bbb4 <xPortStartScheduler+0x134>)
 800bafe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb00:	78fb      	ldrb	r3, [r7, #3]
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	005b      	lsls	r3, r3, #1
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb0a:	78fb      	ldrb	r3, [r7, #3]
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb12:	2b80      	cmp	r3, #128	; 0x80
 800bb14:	d0ef      	beq.n	800baf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb16:	4b27      	ldr	r3, [pc, #156]	; (800bbb4 <xPortStartScheduler+0x134>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f1c3 0307 	rsb	r3, r3, #7
 800bb1e:	2b04      	cmp	r3, #4
 800bb20:	d00a      	beq.n	800bb38 <xPortStartScheduler+0xb8>
	__asm volatile
 800bb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb26:	f383 8811 	msr	BASEPRI, r3
 800bb2a:	f3bf 8f6f 	isb	sy
 800bb2e:	f3bf 8f4f 	dsb	sy
 800bb32:	60bb      	str	r3, [r7, #8]
}
 800bb34:	bf00      	nop
 800bb36:	e7fe      	b.n	800bb36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb38:	4b1e      	ldr	r3, [pc, #120]	; (800bbb4 <xPortStartScheduler+0x134>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	021b      	lsls	r3, r3, #8
 800bb3e:	4a1d      	ldr	r2, [pc, #116]	; (800bbb4 <xPortStartScheduler+0x134>)
 800bb40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb42:	4b1c      	ldr	r3, [pc, #112]	; (800bbb4 <xPortStartScheduler+0x134>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb4a:	4a1a      	ldr	r2, [pc, #104]	; (800bbb4 <xPortStartScheduler+0x134>)
 800bb4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	b2da      	uxtb	r2, r3
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb56:	4b18      	ldr	r3, [pc, #96]	; (800bbb8 <xPortStartScheduler+0x138>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a17      	ldr	r2, [pc, #92]	; (800bbb8 <xPortStartScheduler+0x138>)
 800bb5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb62:	4b15      	ldr	r3, [pc, #84]	; (800bbb8 <xPortStartScheduler+0x138>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a14      	ldr	r2, [pc, #80]	; (800bbb8 <xPortStartScheduler+0x138>)
 800bb68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb6e:	f000 f8dd 	bl	800bd2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb72:	4b12      	ldr	r3, [pc, #72]	; (800bbbc <xPortStartScheduler+0x13c>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb78:	f000 f8fc 	bl	800bd74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb7c:	4b10      	ldr	r3, [pc, #64]	; (800bbc0 <xPortStartScheduler+0x140>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a0f      	ldr	r2, [pc, #60]	; (800bbc0 <xPortStartScheduler+0x140>)
 800bb82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bb86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb88:	f7ff ff66 	bl	800ba58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb8c:	f7ff f84c 	bl	800ac28 <vTaskSwitchContext>
	prvTaskExitError();
 800bb90:	f7ff ff22 	bl	800b9d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3718      	adds	r7, #24
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	e000ed00 	.word	0xe000ed00
 800bba4:	410fc271 	.word	0x410fc271
 800bba8:	410fc270 	.word	0x410fc270
 800bbac:	e000e400 	.word	0xe000e400
 800bbb0:	20001394 	.word	0x20001394
 800bbb4:	20001398 	.word	0x20001398
 800bbb8:	e000ed20 	.word	0xe000ed20
 800bbbc:	200002a8 	.word	0x200002a8
 800bbc0:	e000ef34 	.word	0xe000ef34

0800bbc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
	__asm volatile
 800bbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbce:	f383 8811 	msr	BASEPRI, r3
 800bbd2:	f3bf 8f6f 	isb	sy
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	607b      	str	r3, [r7, #4]
}
 800bbdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bbde:	4b0f      	ldr	r3, [pc, #60]	; (800bc1c <vPortEnterCritical+0x58>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	4a0d      	ldr	r2, [pc, #52]	; (800bc1c <vPortEnterCritical+0x58>)
 800bbe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bbe8:	4b0c      	ldr	r3, [pc, #48]	; (800bc1c <vPortEnterCritical+0x58>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d10f      	bne.n	800bc10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bbf0:	4b0b      	ldr	r3, [pc, #44]	; (800bc20 <vPortEnterCritical+0x5c>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00a      	beq.n	800bc10 <vPortEnterCritical+0x4c>
	__asm volatile
 800bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfe:	f383 8811 	msr	BASEPRI, r3
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	603b      	str	r3, [r7, #0]
}
 800bc0c:	bf00      	nop
 800bc0e:	e7fe      	b.n	800bc0e <vPortEnterCritical+0x4a>
	}
}
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	200002a8 	.word	0x200002a8
 800bc20:	e000ed04 	.word	0xe000ed04

0800bc24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc2a:	4b12      	ldr	r3, [pc, #72]	; (800bc74 <vPortExitCritical+0x50>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d10a      	bne.n	800bc48 <vPortExitCritical+0x24>
	__asm volatile
 800bc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc36:	f383 8811 	msr	BASEPRI, r3
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	607b      	str	r3, [r7, #4]
}
 800bc44:	bf00      	nop
 800bc46:	e7fe      	b.n	800bc46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bc48:	4b0a      	ldr	r3, [pc, #40]	; (800bc74 <vPortExitCritical+0x50>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	4a09      	ldr	r2, [pc, #36]	; (800bc74 <vPortExitCritical+0x50>)
 800bc50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc52:	4b08      	ldr	r3, [pc, #32]	; (800bc74 <vPortExitCritical+0x50>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d105      	bne.n	800bc66 <vPortExitCritical+0x42>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	f383 8811 	msr	BASEPRI, r3
}
 800bc64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc66:	bf00      	nop
 800bc68:	370c      	adds	r7, #12
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	200002a8 	.word	0x200002a8
	...

0800bc80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc80:	f3ef 8009 	mrs	r0, PSP
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	4b15      	ldr	r3, [pc, #84]	; (800bce0 <pxCurrentTCBConst>)
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	f01e 0f10 	tst.w	lr, #16
 800bc90:	bf08      	it	eq
 800bc92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9a:	6010      	str	r0, [r2, #0]
 800bc9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bca4:	f380 8811 	msr	BASEPRI, r0
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f7fe ffba 	bl	800ac28 <vTaskSwitchContext>
 800bcb4:	f04f 0000 	mov.w	r0, #0
 800bcb8:	f380 8811 	msr	BASEPRI, r0
 800bcbc:	bc09      	pop	{r0, r3}
 800bcbe:	6819      	ldr	r1, [r3, #0]
 800bcc0:	6808      	ldr	r0, [r1, #0]
 800bcc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc6:	f01e 0f10 	tst.w	lr, #16
 800bcca:	bf08      	it	eq
 800bccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bcd0:	f380 8809 	msr	PSP, r0
 800bcd4:	f3bf 8f6f 	isb	sy
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	f3af 8000 	nop.w

0800bce0 <pxCurrentTCBConst>:
 800bce0:	20000d68 	.word	0x20000d68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bce4:	bf00      	nop
 800bce6:	bf00      	nop

0800bce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	607b      	str	r3, [r7, #4]
}
 800bd00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd02:	f7fe fed7 	bl	800aab4 <xTaskIncrementTick>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d003      	beq.n	800bd14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd0c:	4b06      	ldr	r3, [pc, #24]	; (800bd28 <xPortSysTickHandler+0x40>)
 800bd0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd12:	601a      	str	r2, [r3, #0]
 800bd14:	2300      	movs	r3, #0
 800bd16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	f383 8811 	msr	BASEPRI, r3
}
 800bd1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd20:	bf00      	nop
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	e000ed04 	.word	0xe000ed04

0800bd2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd30:	4b0b      	ldr	r3, [pc, #44]	; (800bd60 <vPortSetupTimerInterrupt+0x34>)
 800bd32:	2200      	movs	r2, #0
 800bd34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd36:	4b0b      	ldr	r3, [pc, #44]	; (800bd64 <vPortSetupTimerInterrupt+0x38>)
 800bd38:	2200      	movs	r2, #0
 800bd3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd3c:	4b0a      	ldr	r3, [pc, #40]	; (800bd68 <vPortSetupTimerInterrupt+0x3c>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a0a      	ldr	r2, [pc, #40]	; (800bd6c <vPortSetupTimerInterrupt+0x40>)
 800bd42:	fba2 2303 	umull	r2, r3, r2, r3
 800bd46:	099b      	lsrs	r3, r3, #6
 800bd48:	4a09      	ldr	r2, [pc, #36]	; (800bd70 <vPortSetupTimerInterrupt+0x44>)
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd4e:	4b04      	ldr	r3, [pc, #16]	; (800bd60 <vPortSetupTimerInterrupt+0x34>)
 800bd50:	2207      	movs	r2, #7
 800bd52:	601a      	str	r2, [r3, #0]
}
 800bd54:	bf00      	nop
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	e000e010 	.word	0xe000e010
 800bd64:	e000e018 	.word	0xe000e018
 800bd68:	20000000 	.word	0x20000000
 800bd6c:	10624dd3 	.word	0x10624dd3
 800bd70:	e000e014 	.word	0xe000e014

0800bd74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bd84 <vPortEnableVFP+0x10>
 800bd78:	6801      	ldr	r1, [r0, #0]
 800bd7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd7e:	6001      	str	r1, [r0, #0]
 800bd80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd82:	bf00      	nop
 800bd84:	e000ed88 	.word	0xe000ed88

0800bd88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd8e:	f3ef 8305 	mrs	r3, IPSR
 800bd92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2b0f      	cmp	r3, #15
 800bd98:	d914      	bls.n	800bdc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd9a:	4a17      	ldr	r2, [pc, #92]	; (800bdf8 <vPortValidateInterruptPriority+0x70>)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	4413      	add	r3, r2
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bda4:	4b15      	ldr	r3, [pc, #84]	; (800bdfc <vPortValidateInterruptPriority+0x74>)
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	7afa      	ldrb	r2, [r7, #11]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d20a      	bcs.n	800bdc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	607b      	str	r3, [r7, #4]
}
 800bdc0:	bf00      	nop
 800bdc2:	e7fe      	b.n	800bdc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bdc4:	4b0e      	ldr	r3, [pc, #56]	; (800be00 <vPortValidateInterruptPriority+0x78>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bdcc:	4b0d      	ldr	r3, [pc, #52]	; (800be04 <vPortValidateInterruptPriority+0x7c>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d90a      	bls.n	800bdea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd8:	f383 8811 	msr	BASEPRI, r3
 800bddc:	f3bf 8f6f 	isb	sy
 800bde0:	f3bf 8f4f 	dsb	sy
 800bde4:	603b      	str	r3, [r7, #0]
}
 800bde6:	bf00      	nop
 800bde8:	e7fe      	b.n	800bde8 <vPortValidateInterruptPriority+0x60>
	}
 800bdea:	bf00      	nop
 800bdec:	3714      	adds	r7, #20
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	e000e3f0 	.word	0xe000e3f0
 800bdfc:	20001394 	.word	0x20001394
 800be00:	e000ed0c 	.word	0xe000ed0c
 800be04:	20001398 	.word	0x20001398

0800be08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b08a      	sub	sp, #40	; 0x28
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be10:	2300      	movs	r3, #0
 800be12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be14:	f7fe fd80 	bl	800a918 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be18:	4b5b      	ldr	r3, [pc, #364]	; (800bf88 <pvPortMalloc+0x180>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d101      	bne.n	800be24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be20:	f000 f920 	bl	800c064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be24:	4b59      	ldr	r3, [pc, #356]	; (800bf8c <pvPortMalloc+0x184>)
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	4013      	ands	r3, r2
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f040 8093 	bne.w	800bf58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d01d      	beq.n	800be74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800be38:	2208      	movs	r2, #8
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4413      	add	r3, r2
 800be3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f003 0307 	and.w	r3, r3, #7
 800be46:	2b00      	cmp	r3, #0
 800be48:	d014      	beq.n	800be74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f023 0307 	bic.w	r3, r3, #7
 800be50:	3308      	adds	r3, #8
 800be52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f003 0307 	and.w	r3, r3, #7
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00a      	beq.n	800be74 <pvPortMalloc+0x6c>
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	617b      	str	r3, [r7, #20]
}
 800be70:	bf00      	nop
 800be72:	e7fe      	b.n	800be72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d06e      	beq.n	800bf58 <pvPortMalloc+0x150>
 800be7a:	4b45      	ldr	r3, [pc, #276]	; (800bf90 <pvPortMalloc+0x188>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	429a      	cmp	r2, r3
 800be82:	d869      	bhi.n	800bf58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be84:	4b43      	ldr	r3, [pc, #268]	; (800bf94 <pvPortMalloc+0x18c>)
 800be86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800be88:	4b42      	ldr	r3, [pc, #264]	; (800bf94 <pvPortMalloc+0x18c>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be8e:	e004      	b.n	800be9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800be90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d903      	bls.n	800beac <pvPortMalloc+0xa4>
 800bea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d1f1      	bne.n	800be90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800beac:	4b36      	ldr	r3, [pc, #216]	; (800bf88 <pvPortMalloc+0x180>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d050      	beq.n	800bf58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800beb6:	6a3b      	ldr	r3, [r7, #32]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2208      	movs	r2, #8
 800bebc:	4413      	add	r3, r2
 800bebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	6a3b      	ldr	r3, [r7, #32]
 800bec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beca:	685a      	ldr	r2, [r3, #4]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	1ad2      	subs	r2, r2, r3
 800bed0:	2308      	movs	r3, #8
 800bed2:	005b      	lsls	r3, r3, #1
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d91f      	bls.n	800bf18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4413      	add	r3, r2
 800bede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	f003 0307 	and.w	r3, r3, #7
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00a      	beq.n	800bf00 <pvPortMalloc+0xf8>
	__asm volatile
 800beea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beee:	f383 8811 	msr	BASEPRI, r3
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	613b      	str	r3, [r7, #16]
}
 800befc:	bf00      	nop
 800befe:	e7fe      	b.n	800befe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf02:	685a      	ldr	r2, [r3, #4]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	1ad2      	subs	r2, r2, r3
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf12:	69b8      	ldr	r0, [r7, #24]
 800bf14:	f000 f908 	bl	800c128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf18:	4b1d      	ldr	r3, [pc, #116]	; (800bf90 <pvPortMalloc+0x188>)
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	4a1b      	ldr	r2, [pc, #108]	; (800bf90 <pvPortMalloc+0x188>)
 800bf24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf26:	4b1a      	ldr	r3, [pc, #104]	; (800bf90 <pvPortMalloc+0x188>)
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	4b1b      	ldr	r3, [pc, #108]	; (800bf98 <pvPortMalloc+0x190>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d203      	bcs.n	800bf3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf32:	4b17      	ldr	r3, [pc, #92]	; (800bf90 <pvPortMalloc+0x188>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a18      	ldr	r2, [pc, #96]	; (800bf98 <pvPortMalloc+0x190>)
 800bf38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3c:	685a      	ldr	r2, [r3, #4]
 800bf3e:	4b13      	ldr	r3, [pc, #76]	; (800bf8c <pvPortMalloc+0x184>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	431a      	orrs	r2, r3
 800bf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bf4e:	4b13      	ldr	r3, [pc, #76]	; (800bf9c <pvPortMalloc+0x194>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	3301      	adds	r3, #1
 800bf54:	4a11      	ldr	r2, [pc, #68]	; (800bf9c <pvPortMalloc+0x194>)
 800bf56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf58:	f7fe fcec 	bl	800a934 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	f003 0307 	and.w	r3, r3, #7
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00a      	beq.n	800bf7c <pvPortMalloc+0x174>
	__asm volatile
 800bf66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6a:	f383 8811 	msr	BASEPRI, r3
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	f3bf 8f4f 	dsb	sy
 800bf76:	60fb      	str	r3, [r7, #12]
}
 800bf78:	bf00      	nop
 800bf7a:	e7fe      	b.n	800bf7a <pvPortMalloc+0x172>
	return pvReturn;
 800bf7c:	69fb      	ldr	r3, [r7, #28]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3728      	adds	r7, #40	; 0x28
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	20004fa4 	.word	0x20004fa4
 800bf8c:	20004fb8 	.word	0x20004fb8
 800bf90:	20004fa8 	.word	0x20004fa8
 800bf94:	20004f9c 	.word	0x20004f9c
 800bf98:	20004fac 	.word	0x20004fac
 800bf9c:	20004fb0 	.word	0x20004fb0

0800bfa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d04d      	beq.n	800c04e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bfb2:	2308      	movs	r3, #8
 800bfb4:	425b      	negs	r3, r3
 800bfb6:	697a      	ldr	r2, [r7, #20]
 800bfb8:	4413      	add	r3, r2
 800bfba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	685a      	ldr	r2, [r3, #4]
 800bfc4:	4b24      	ldr	r3, [pc, #144]	; (800c058 <vPortFree+0xb8>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4013      	ands	r3, r2
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10a      	bne.n	800bfe4 <vPortFree+0x44>
	__asm volatile
 800bfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	60fb      	str	r3, [r7, #12]
}
 800bfe0:	bf00      	nop
 800bfe2:	e7fe      	b.n	800bfe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00a      	beq.n	800c002 <vPortFree+0x62>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	60bb      	str	r3, [r7, #8]
}
 800bffe:	bf00      	nop
 800c000:	e7fe      	b.n	800c000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	685a      	ldr	r2, [r3, #4]
 800c006:	4b14      	ldr	r3, [pc, #80]	; (800c058 <vPortFree+0xb8>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4013      	ands	r3, r2
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d01e      	beq.n	800c04e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d11a      	bne.n	800c04e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	685a      	ldr	r2, [r3, #4]
 800c01c:	4b0e      	ldr	r3, [pc, #56]	; (800c058 <vPortFree+0xb8>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	43db      	mvns	r3, r3
 800c022:	401a      	ands	r2, r3
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c028:	f7fe fc76 	bl	800a918 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	685a      	ldr	r2, [r3, #4]
 800c030:	4b0a      	ldr	r3, [pc, #40]	; (800c05c <vPortFree+0xbc>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4413      	add	r3, r2
 800c036:	4a09      	ldr	r2, [pc, #36]	; (800c05c <vPortFree+0xbc>)
 800c038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c03a:	6938      	ldr	r0, [r7, #16]
 800c03c:	f000 f874 	bl	800c128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c040:	4b07      	ldr	r3, [pc, #28]	; (800c060 <vPortFree+0xc0>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	3301      	adds	r3, #1
 800c046:	4a06      	ldr	r2, [pc, #24]	; (800c060 <vPortFree+0xc0>)
 800c048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c04a:	f7fe fc73 	bl	800a934 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c04e:	bf00      	nop
 800c050:	3718      	adds	r7, #24
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	20004fb8 	.word	0x20004fb8
 800c05c:	20004fa8 	.word	0x20004fa8
 800c060:	20004fb4 	.word	0x20004fb4

0800c064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c06a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c06e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c070:	4b27      	ldr	r3, [pc, #156]	; (800c110 <prvHeapInit+0xac>)
 800c072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f003 0307 	and.w	r3, r3, #7
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00c      	beq.n	800c098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3307      	adds	r3, #7
 800c082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f023 0307 	bic.w	r3, r3, #7
 800c08a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	4a1f      	ldr	r2, [pc, #124]	; (800c110 <prvHeapInit+0xac>)
 800c094:	4413      	add	r3, r2
 800c096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c09c:	4a1d      	ldr	r2, [pc, #116]	; (800c114 <prvHeapInit+0xb0>)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c0a2:	4b1c      	ldr	r3, [pc, #112]	; (800c114 <prvHeapInit+0xb0>)
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c0b0:	2208      	movs	r2, #8
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	1a9b      	subs	r3, r3, r2
 800c0b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f023 0307 	bic.w	r3, r3, #7
 800c0be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	4a15      	ldr	r2, [pc, #84]	; (800c118 <prvHeapInit+0xb4>)
 800c0c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c0c6:	4b14      	ldr	r3, [pc, #80]	; (800c118 <prvHeapInit+0xb4>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c0ce:	4b12      	ldr	r3, [pc, #72]	; (800c118 <prvHeapInit+0xb4>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	1ad2      	subs	r2, r2, r3
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c0e4:	4b0c      	ldr	r3, [pc, #48]	; (800c118 <prvHeapInit+0xb4>)
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	4a0a      	ldr	r2, [pc, #40]	; (800c11c <prvHeapInit+0xb8>)
 800c0f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	4a09      	ldr	r2, [pc, #36]	; (800c120 <prvHeapInit+0xbc>)
 800c0fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c0fc:	4b09      	ldr	r3, [pc, #36]	; (800c124 <prvHeapInit+0xc0>)
 800c0fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c102:	601a      	str	r2, [r3, #0]
}
 800c104:	bf00      	nop
 800c106:	3714      	adds	r7, #20
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr
 800c110:	2000139c 	.word	0x2000139c
 800c114:	20004f9c 	.word	0x20004f9c
 800c118:	20004fa4 	.word	0x20004fa4
 800c11c:	20004fac 	.word	0x20004fac
 800c120:	20004fa8 	.word	0x20004fa8
 800c124:	20004fb8 	.word	0x20004fb8

0800c128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c128:	b480      	push	{r7}
 800c12a:	b085      	sub	sp, #20
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c130:	4b28      	ldr	r3, [pc, #160]	; (800c1d4 <prvInsertBlockIntoFreeList+0xac>)
 800c132:	60fb      	str	r3, [r7, #12]
 800c134:	e002      	b.n	800c13c <prvInsertBlockIntoFreeList+0x14>
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	60fb      	str	r3, [r7, #12]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	429a      	cmp	r2, r3
 800c144:	d8f7      	bhi.n	800c136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	68ba      	ldr	r2, [r7, #8]
 800c150:	4413      	add	r3, r2
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	429a      	cmp	r2, r3
 800c156:	d108      	bne.n	800c16a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	685a      	ldr	r2, [r3, #4]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	441a      	add	r2, r3
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	68ba      	ldr	r2, [r7, #8]
 800c174:	441a      	add	r2, r3
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d118      	bne.n	800c1b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	4b15      	ldr	r3, [pc, #84]	; (800c1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	429a      	cmp	r2, r3
 800c188:	d00d      	beq.n	800c1a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	685a      	ldr	r2, [r3, #4]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	441a      	add	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	e008      	b.n	800c1b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c1a6:	4b0c      	ldr	r3, [pc, #48]	; (800c1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	601a      	str	r2, [r3, #0]
 800c1ae:	e003      	b.n	800c1b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d002      	beq.n	800c1c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1c6:	bf00      	nop
 800c1c8:	3714      	adds	r7, #20
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	20004f9c 	.word	0x20004f9c
 800c1d8:	20004fa4 	.word	0x20004fa4

0800c1dc <__errno>:
 800c1dc:	4b01      	ldr	r3, [pc, #4]	; (800c1e4 <__errno+0x8>)
 800c1de:	6818      	ldr	r0, [r3, #0]
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	200002ac 	.word	0x200002ac

0800c1e8 <std>:
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	b510      	push	{r4, lr}
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	e9c0 3300 	strd	r3, r3, [r0]
 800c1f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1f6:	6083      	str	r3, [r0, #8]
 800c1f8:	8181      	strh	r1, [r0, #12]
 800c1fa:	6643      	str	r3, [r0, #100]	; 0x64
 800c1fc:	81c2      	strh	r2, [r0, #14]
 800c1fe:	6183      	str	r3, [r0, #24]
 800c200:	4619      	mov	r1, r3
 800c202:	2208      	movs	r2, #8
 800c204:	305c      	adds	r0, #92	; 0x5c
 800c206:	f000 f91a 	bl	800c43e <memset>
 800c20a:	4b05      	ldr	r3, [pc, #20]	; (800c220 <std+0x38>)
 800c20c:	6263      	str	r3, [r4, #36]	; 0x24
 800c20e:	4b05      	ldr	r3, [pc, #20]	; (800c224 <std+0x3c>)
 800c210:	62a3      	str	r3, [r4, #40]	; 0x28
 800c212:	4b05      	ldr	r3, [pc, #20]	; (800c228 <std+0x40>)
 800c214:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c216:	4b05      	ldr	r3, [pc, #20]	; (800c22c <std+0x44>)
 800c218:	6224      	str	r4, [r4, #32]
 800c21a:	6323      	str	r3, [r4, #48]	; 0x30
 800c21c:	bd10      	pop	{r4, pc}
 800c21e:	bf00      	nop
 800c220:	0800c6bd 	.word	0x0800c6bd
 800c224:	0800c6df 	.word	0x0800c6df
 800c228:	0800c717 	.word	0x0800c717
 800c22c:	0800c73b 	.word	0x0800c73b

0800c230 <_cleanup_r>:
 800c230:	4901      	ldr	r1, [pc, #4]	; (800c238 <_cleanup_r+0x8>)
 800c232:	f000 b8af 	b.w	800c394 <_fwalk_reent>
 800c236:	bf00      	nop
 800c238:	0800c895 	.word	0x0800c895

0800c23c <__sfmoreglue>:
 800c23c:	b570      	push	{r4, r5, r6, lr}
 800c23e:	1e4a      	subs	r2, r1, #1
 800c240:	2568      	movs	r5, #104	; 0x68
 800c242:	4355      	muls	r5, r2
 800c244:	460e      	mov	r6, r1
 800c246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c24a:	f000 f901 	bl	800c450 <_malloc_r>
 800c24e:	4604      	mov	r4, r0
 800c250:	b140      	cbz	r0, 800c264 <__sfmoreglue+0x28>
 800c252:	2100      	movs	r1, #0
 800c254:	e9c0 1600 	strd	r1, r6, [r0]
 800c258:	300c      	adds	r0, #12
 800c25a:	60a0      	str	r0, [r4, #8]
 800c25c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c260:	f000 f8ed 	bl	800c43e <memset>
 800c264:	4620      	mov	r0, r4
 800c266:	bd70      	pop	{r4, r5, r6, pc}

0800c268 <__sfp_lock_acquire>:
 800c268:	4801      	ldr	r0, [pc, #4]	; (800c270 <__sfp_lock_acquire+0x8>)
 800c26a:	f000 b8d8 	b.w	800c41e <__retarget_lock_acquire_recursive>
 800c26e:	bf00      	nop
 800c270:	2000dd94 	.word	0x2000dd94

0800c274 <__sfp_lock_release>:
 800c274:	4801      	ldr	r0, [pc, #4]	; (800c27c <__sfp_lock_release+0x8>)
 800c276:	f000 b8d3 	b.w	800c420 <__retarget_lock_release_recursive>
 800c27a:	bf00      	nop
 800c27c:	2000dd94 	.word	0x2000dd94

0800c280 <__sinit_lock_acquire>:
 800c280:	4801      	ldr	r0, [pc, #4]	; (800c288 <__sinit_lock_acquire+0x8>)
 800c282:	f000 b8cc 	b.w	800c41e <__retarget_lock_acquire_recursive>
 800c286:	bf00      	nop
 800c288:	2000dd8f 	.word	0x2000dd8f

0800c28c <__sinit_lock_release>:
 800c28c:	4801      	ldr	r0, [pc, #4]	; (800c294 <__sinit_lock_release+0x8>)
 800c28e:	f000 b8c7 	b.w	800c420 <__retarget_lock_release_recursive>
 800c292:	bf00      	nop
 800c294:	2000dd8f 	.word	0x2000dd8f

0800c298 <__sinit>:
 800c298:	b510      	push	{r4, lr}
 800c29a:	4604      	mov	r4, r0
 800c29c:	f7ff fff0 	bl	800c280 <__sinit_lock_acquire>
 800c2a0:	69a3      	ldr	r3, [r4, #24]
 800c2a2:	b11b      	cbz	r3, 800c2ac <__sinit+0x14>
 800c2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2a8:	f7ff bff0 	b.w	800c28c <__sinit_lock_release>
 800c2ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c2b0:	6523      	str	r3, [r4, #80]	; 0x50
 800c2b2:	4b13      	ldr	r3, [pc, #76]	; (800c300 <__sinit+0x68>)
 800c2b4:	4a13      	ldr	r2, [pc, #76]	; (800c304 <__sinit+0x6c>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c2ba:	42a3      	cmp	r3, r4
 800c2bc:	bf04      	itt	eq
 800c2be:	2301      	moveq	r3, #1
 800c2c0:	61a3      	streq	r3, [r4, #24]
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f000 f820 	bl	800c308 <__sfp>
 800c2c8:	6060      	str	r0, [r4, #4]
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f000 f81c 	bl	800c308 <__sfp>
 800c2d0:	60a0      	str	r0, [r4, #8]
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f000 f818 	bl	800c308 <__sfp>
 800c2d8:	2200      	movs	r2, #0
 800c2da:	60e0      	str	r0, [r4, #12]
 800c2dc:	2104      	movs	r1, #4
 800c2de:	6860      	ldr	r0, [r4, #4]
 800c2e0:	f7ff ff82 	bl	800c1e8 <std>
 800c2e4:	68a0      	ldr	r0, [r4, #8]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	2109      	movs	r1, #9
 800c2ea:	f7ff ff7d 	bl	800c1e8 <std>
 800c2ee:	68e0      	ldr	r0, [r4, #12]
 800c2f0:	2202      	movs	r2, #2
 800c2f2:	2112      	movs	r1, #18
 800c2f4:	f7ff ff78 	bl	800c1e8 <std>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	61a3      	str	r3, [r4, #24]
 800c2fc:	e7d2      	b.n	800c2a4 <__sinit+0xc>
 800c2fe:	bf00      	nop
 800c300:	0800d7f8 	.word	0x0800d7f8
 800c304:	0800c231 	.word	0x0800c231

0800c308 <__sfp>:
 800c308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30a:	4607      	mov	r7, r0
 800c30c:	f7ff ffac 	bl	800c268 <__sfp_lock_acquire>
 800c310:	4b1e      	ldr	r3, [pc, #120]	; (800c38c <__sfp+0x84>)
 800c312:	681e      	ldr	r6, [r3, #0]
 800c314:	69b3      	ldr	r3, [r6, #24]
 800c316:	b913      	cbnz	r3, 800c31e <__sfp+0x16>
 800c318:	4630      	mov	r0, r6
 800c31a:	f7ff ffbd 	bl	800c298 <__sinit>
 800c31e:	3648      	adds	r6, #72	; 0x48
 800c320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c324:	3b01      	subs	r3, #1
 800c326:	d503      	bpl.n	800c330 <__sfp+0x28>
 800c328:	6833      	ldr	r3, [r6, #0]
 800c32a:	b30b      	cbz	r3, 800c370 <__sfp+0x68>
 800c32c:	6836      	ldr	r6, [r6, #0]
 800c32e:	e7f7      	b.n	800c320 <__sfp+0x18>
 800c330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c334:	b9d5      	cbnz	r5, 800c36c <__sfp+0x64>
 800c336:	4b16      	ldr	r3, [pc, #88]	; (800c390 <__sfp+0x88>)
 800c338:	60e3      	str	r3, [r4, #12]
 800c33a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c33e:	6665      	str	r5, [r4, #100]	; 0x64
 800c340:	f000 f86c 	bl	800c41c <__retarget_lock_init_recursive>
 800c344:	f7ff ff96 	bl	800c274 <__sfp_lock_release>
 800c348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c34c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c350:	6025      	str	r5, [r4, #0]
 800c352:	61a5      	str	r5, [r4, #24]
 800c354:	2208      	movs	r2, #8
 800c356:	4629      	mov	r1, r5
 800c358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c35c:	f000 f86f 	bl	800c43e <memset>
 800c360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c368:	4620      	mov	r0, r4
 800c36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c36c:	3468      	adds	r4, #104	; 0x68
 800c36e:	e7d9      	b.n	800c324 <__sfp+0x1c>
 800c370:	2104      	movs	r1, #4
 800c372:	4638      	mov	r0, r7
 800c374:	f7ff ff62 	bl	800c23c <__sfmoreglue>
 800c378:	4604      	mov	r4, r0
 800c37a:	6030      	str	r0, [r6, #0]
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d1d5      	bne.n	800c32c <__sfp+0x24>
 800c380:	f7ff ff78 	bl	800c274 <__sfp_lock_release>
 800c384:	230c      	movs	r3, #12
 800c386:	603b      	str	r3, [r7, #0]
 800c388:	e7ee      	b.n	800c368 <__sfp+0x60>
 800c38a:	bf00      	nop
 800c38c:	0800d7f8 	.word	0x0800d7f8
 800c390:	ffff0001 	.word	0xffff0001

0800c394 <_fwalk_reent>:
 800c394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c398:	4606      	mov	r6, r0
 800c39a:	4688      	mov	r8, r1
 800c39c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c3a0:	2700      	movs	r7, #0
 800c3a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3a6:	f1b9 0901 	subs.w	r9, r9, #1
 800c3aa:	d505      	bpl.n	800c3b8 <_fwalk_reent+0x24>
 800c3ac:	6824      	ldr	r4, [r4, #0]
 800c3ae:	2c00      	cmp	r4, #0
 800c3b0:	d1f7      	bne.n	800c3a2 <_fwalk_reent+0xe>
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3b8:	89ab      	ldrh	r3, [r5, #12]
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d907      	bls.n	800c3ce <_fwalk_reent+0x3a>
 800c3be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	d003      	beq.n	800c3ce <_fwalk_reent+0x3a>
 800c3c6:	4629      	mov	r1, r5
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	47c0      	blx	r8
 800c3cc:	4307      	orrs	r7, r0
 800c3ce:	3568      	adds	r5, #104	; 0x68
 800c3d0:	e7e9      	b.n	800c3a6 <_fwalk_reent+0x12>
	...

0800c3d4 <__libc_init_array>:
 800c3d4:	b570      	push	{r4, r5, r6, lr}
 800c3d6:	4d0d      	ldr	r5, [pc, #52]	; (800c40c <__libc_init_array+0x38>)
 800c3d8:	4c0d      	ldr	r4, [pc, #52]	; (800c410 <__libc_init_array+0x3c>)
 800c3da:	1b64      	subs	r4, r4, r5
 800c3dc:	10a4      	asrs	r4, r4, #2
 800c3de:	2600      	movs	r6, #0
 800c3e0:	42a6      	cmp	r6, r4
 800c3e2:	d109      	bne.n	800c3f8 <__libc_init_array+0x24>
 800c3e4:	4d0b      	ldr	r5, [pc, #44]	; (800c414 <__libc_init_array+0x40>)
 800c3e6:	4c0c      	ldr	r4, [pc, #48]	; (800c418 <__libc_init_array+0x44>)
 800c3e8:	f001 f930 	bl	800d64c <_init>
 800c3ec:	1b64      	subs	r4, r4, r5
 800c3ee:	10a4      	asrs	r4, r4, #2
 800c3f0:	2600      	movs	r6, #0
 800c3f2:	42a6      	cmp	r6, r4
 800c3f4:	d105      	bne.n	800c402 <__libc_init_array+0x2e>
 800c3f6:	bd70      	pop	{r4, r5, r6, pc}
 800c3f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3fc:	4798      	blx	r3
 800c3fe:	3601      	adds	r6, #1
 800c400:	e7ee      	b.n	800c3e0 <__libc_init_array+0xc>
 800c402:	f855 3b04 	ldr.w	r3, [r5], #4
 800c406:	4798      	blx	r3
 800c408:	3601      	adds	r6, #1
 800c40a:	e7f2      	b.n	800c3f2 <__libc_init_array+0x1e>
 800c40c:	0800d838 	.word	0x0800d838
 800c410:	0800d838 	.word	0x0800d838
 800c414:	0800d838 	.word	0x0800d838
 800c418:	0800d83c 	.word	0x0800d83c

0800c41c <__retarget_lock_init_recursive>:
 800c41c:	4770      	bx	lr

0800c41e <__retarget_lock_acquire_recursive>:
 800c41e:	4770      	bx	lr

0800c420 <__retarget_lock_release_recursive>:
 800c420:	4770      	bx	lr

0800c422 <memcpy>:
 800c422:	440a      	add	r2, r1
 800c424:	4291      	cmp	r1, r2
 800c426:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c42a:	d100      	bne.n	800c42e <memcpy+0xc>
 800c42c:	4770      	bx	lr
 800c42e:	b510      	push	{r4, lr}
 800c430:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c434:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c438:	4291      	cmp	r1, r2
 800c43a:	d1f9      	bne.n	800c430 <memcpy+0xe>
 800c43c:	bd10      	pop	{r4, pc}

0800c43e <memset>:
 800c43e:	4402      	add	r2, r0
 800c440:	4603      	mov	r3, r0
 800c442:	4293      	cmp	r3, r2
 800c444:	d100      	bne.n	800c448 <memset+0xa>
 800c446:	4770      	bx	lr
 800c448:	f803 1b01 	strb.w	r1, [r3], #1
 800c44c:	e7f9      	b.n	800c442 <memset+0x4>
	...

0800c450 <_malloc_r>:
 800c450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c452:	1ccd      	adds	r5, r1, #3
 800c454:	f025 0503 	bic.w	r5, r5, #3
 800c458:	3508      	adds	r5, #8
 800c45a:	2d0c      	cmp	r5, #12
 800c45c:	bf38      	it	cc
 800c45e:	250c      	movcc	r5, #12
 800c460:	2d00      	cmp	r5, #0
 800c462:	4606      	mov	r6, r0
 800c464:	db01      	blt.n	800c46a <_malloc_r+0x1a>
 800c466:	42a9      	cmp	r1, r5
 800c468:	d903      	bls.n	800c472 <_malloc_r+0x22>
 800c46a:	230c      	movs	r3, #12
 800c46c:	6033      	str	r3, [r6, #0]
 800c46e:	2000      	movs	r0, #0
 800c470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c472:	f000 fa5d 	bl	800c930 <__malloc_lock>
 800c476:	4921      	ldr	r1, [pc, #132]	; (800c4fc <_malloc_r+0xac>)
 800c478:	680a      	ldr	r2, [r1, #0]
 800c47a:	4614      	mov	r4, r2
 800c47c:	b99c      	cbnz	r4, 800c4a6 <_malloc_r+0x56>
 800c47e:	4f20      	ldr	r7, [pc, #128]	; (800c500 <_malloc_r+0xb0>)
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	b923      	cbnz	r3, 800c48e <_malloc_r+0x3e>
 800c484:	4621      	mov	r1, r4
 800c486:	4630      	mov	r0, r6
 800c488:	f000 f8d4 	bl	800c634 <_sbrk_r>
 800c48c:	6038      	str	r0, [r7, #0]
 800c48e:	4629      	mov	r1, r5
 800c490:	4630      	mov	r0, r6
 800c492:	f000 f8cf 	bl	800c634 <_sbrk_r>
 800c496:	1c43      	adds	r3, r0, #1
 800c498:	d123      	bne.n	800c4e2 <_malloc_r+0x92>
 800c49a:	230c      	movs	r3, #12
 800c49c:	6033      	str	r3, [r6, #0]
 800c49e:	4630      	mov	r0, r6
 800c4a0:	f000 fa4c 	bl	800c93c <__malloc_unlock>
 800c4a4:	e7e3      	b.n	800c46e <_malloc_r+0x1e>
 800c4a6:	6823      	ldr	r3, [r4, #0]
 800c4a8:	1b5b      	subs	r3, r3, r5
 800c4aa:	d417      	bmi.n	800c4dc <_malloc_r+0x8c>
 800c4ac:	2b0b      	cmp	r3, #11
 800c4ae:	d903      	bls.n	800c4b8 <_malloc_r+0x68>
 800c4b0:	6023      	str	r3, [r4, #0]
 800c4b2:	441c      	add	r4, r3
 800c4b4:	6025      	str	r5, [r4, #0]
 800c4b6:	e004      	b.n	800c4c2 <_malloc_r+0x72>
 800c4b8:	6863      	ldr	r3, [r4, #4]
 800c4ba:	42a2      	cmp	r2, r4
 800c4bc:	bf0c      	ite	eq
 800c4be:	600b      	streq	r3, [r1, #0]
 800c4c0:	6053      	strne	r3, [r2, #4]
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	f000 fa3a 	bl	800c93c <__malloc_unlock>
 800c4c8:	f104 000b 	add.w	r0, r4, #11
 800c4cc:	1d23      	adds	r3, r4, #4
 800c4ce:	f020 0007 	bic.w	r0, r0, #7
 800c4d2:	1ac2      	subs	r2, r0, r3
 800c4d4:	d0cc      	beq.n	800c470 <_malloc_r+0x20>
 800c4d6:	1a1b      	subs	r3, r3, r0
 800c4d8:	50a3      	str	r3, [r4, r2]
 800c4da:	e7c9      	b.n	800c470 <_malloc_r+0x20>
 800c4dc:	4622      	mov	r2, r4
 800c4de:	6864      	ldr	r4, [r4, #4]
 800c4e0:	e7cc      	b.n	800c47c <_malloc_r+0x2c>
 800c4e2:	1cc4      	adds	r4, r0, #3
 800c4e4:	f024 0403 	bic.w	r4, r4, #3
 800c4e8:	42a0      	cmp	r0, r4
 800c4ea:	d0e3      	beq.n	800c4b4 <_malloc_r+0x64>
 800c4ec:	1a21      	subs	r1, r4, r0
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	f000 f8a0 	bl	800c634 <_sbrk_r>
 800c4f4:	3001      	adds	r0, #1
 800c4f6:	d1dd      	bne.n	800c4b4 <_malloc_r+0x64>
 800c4f8:	e7cf      	b.n	800c49a <_malloc_r+0x4a>
 800c4fa:	bf00      	nop
 800c4fc:	20004fbc 	.word	0x20004fbc
 800c500:	20004fc0 	.word	0x20004fc0

0800c504 <iprintf>:
 800c504:	b40f      	push	{r0, r1, r2, r3}
 800c506:	4b0a      	ldr	r3, [pc, #40]	; (800c530 <iprintf+0x2c>)
 800c508:	b513      	push	{r0, r1, r4, lr}
 800c50a:	681c      	ldr	r4, [r3, #0]
 800c50c:	b124      	cbz	r4, 800c518 <iprintf+0x14>
 800c50e:	69a3      	ldr	r3, [r4, #24]
 800c510:	b913      	cbnz	r3, 800c518 <iprintf+0x14>
 800c512:	4620      	mov	r0, r4
 800c514:	f7ff fec0 	bl	800c298 <__sinit>
 800c518:	ab05      	add	r3, sp, #20
 800c51a:	9a04      	ldr	r2, [sp, #16]
 800c51c:	68a1      	ldr	r1, [r4, #8]
 800c51e:	9301      	str	r3, [sp, #4]
 800c520:	4620      	mov	r0, r4
 800c522:	f000 fbe7 	bl	800ccf4 <_vfiprintf_r>
 800c526:	b002      	add	sp, #8
 800c528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c52c:	b004      	add	sp, #16
 800c52e:	4770      	bx	lr
 800c530:	200002ac 	.word	0x200002ac

0800c534 <putchar>:
 800c534:	4b09      	ldr	r3, [pc, #36]	; (800c55c <putchar+0x28>)
 800c536:	b513      	push	{r0, r1, r4, lr}
 800c538:	681c      	ldr	r4, [r3, #0]
 800c53a:	4601      	mov	r1, r0
 800c53c:	b134      	cbz	r4, 800c54c <putchar+0x18>
 800c53e:	69a3      	ldr	r3, [r4, #24]
 800c540:	b923      	cbnz	r3, 800c54c <putchar+0x18>
 800c542:	9001      	str	r0, [sp, #4]
 800c544:	4620      	mov	r0, r4
 800c546:	f7ff fea7 	bl	800c298 <__sinit>
 800c54a:	9901      	ldr	r1, [sp, #4]
 800c54c:	68a2      	ldr	r2, [r4, #8]
 800c54e:	4620      	mov	r0, r4
 800c550:	b002      	add	sp, #8
 800c552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c556:	f000 be91 	b.w	800d27c <_putc_r>
 800c55a:	bf00      	nop
 800c55c:	200002ac 	.word	0x200002ac

0800c560 <cleanup_glue>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	460c      	mov	r4, r1
 800c564:	6809      	ldr	r1, [r1, #0]
 800c566:	4605      	mov	r5, r0
 800c568:	b109      	cbz	r1, 800c56e <cleanup_glue+0xe>
 800c56a:	f7ff fff9 	bl	800c560 <cleanup_glue>
 800c56e:	4621      	mov	r1, r4
 800c570:	4628      	mov	r0, r5
 800c572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c576:	f000 b9e7 	b.w	800c948 <_free_r>
	...

0800c57c <_reclaim_reent>:
 800c57c:	4b2c      	ldr	r3, [pc, #176]	; (800c630 <_reclaim_reent+0xb4>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4283      	cmp	r3, r0
 800c582:	b570      	push	{r4, r5, r6, lr}
 800c584:	4604      	mov	r4, r0
 800c586:	d051      	beq.n	800c62c <_reclaim_reent+0xb0>
 800c588:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c58a:	b143      	cbz	r3, 800c59e <_reclaim_reent+0x22>
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d14a      	bne.n	800c628 <_reclaim_reent+0xac>
 800c592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c594:	6819      	ldr	r1, [r3, #0]
 800c596:	b111      	cbz	r1, 800c59e <_reclaim_reent+0x22>
 800c598:	4620      	mov	r0, r4
 800c59a:	f000 f9d5 	bl	800c948 <_free_r>
 800c59e:	6961      	ldr	r1, [r4, #20]
 800c5a0:	b111      	cbz	r1, 800c5a8 <_reclaim_reent+0x2c>
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f000 f9d0 	bl	800c948 <_free_r>
 800c5a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c5aa:	b111      	cbz	r1, 800c5b2 <_reclaim_reent+0x36>
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f000 f9cb 	bl	800c948 <_free_r>
 800c5b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c5b4:	b111      	cbz	r1, 800c5bc <_reclaim_reent+0x40>
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f000 f9c6 	bl	800c948 <_free_r>
 800c5bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c5be:	b111      	cbz	r1, 800c5c6 <_reclaim_reent+0x4a>
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	f000 f9c1 	bl	800c948 <_free_r>
 800c5c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c5c8:	b111      	cbz	r1, 800c5d0 <_reclaim_reent+0x54>
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f000 f9bc 	bl	800c948 <_free_r>
 800c5d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c5d2:	b111      	cbz	r1, 800c5da <_reclaim_reent+0x5e>
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f000 f9b7 	bl	800c948 <_free_r>
 800c5da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c5dc:	b111      	cbz	r1, 800c5e4 <_reclaim_reent+0x68>
 800c5de:	4620      	mov	r0, r4
 800c5e0:	f000 f9b2 	bl	800c948 <_free_r>
 800c5e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5e6:	b111      	cbz	r1, 800c5ee <_reclaim_reent+0x72>
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f000 f9ad 	bl	800c948 <_free_r>
 800c5ee:	69a3      	ldr	r3, [r4, #24]
 800c5f0:	b1e3      	cbz	r3, 800c62c <_reclaim_reent+0xb0>
 800c5f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	4798      	blx	r3
 800c5f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c5fa:	b1b9      	cbz	r1, 800c62c <_reclaim_reent+0xb0>
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c602:	f7ff bfad 	b.w	800c560 <cleanup_glue>
 800c606:	5949      	ldr	r1, [r1, r5]
 800c608:	b941      	cbnz	r1, 800c61c <_reclaim_reent+0xa0>
 800c60a:	3504      	adds	r5, #4
 800c60c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c60e:	2d80      	cmp	r5, #128	; 0x80
 800c610:	68d9      	ldr	r1, [r3, #12]
 800c612:	d1f8      	bne.n	800c606 <_reclaim_reent+0x8a>
 800c614:	4620      	mov	r0, r4
 800c616:	f000 f997 	bl	800c948 <_free_r>
 800c61a:	e7ba      	b.n	800c592 <_reclaim_reent+0x16>
 800c61c:	680e      	ldr	r6, [r1, #0]
 800c61e:	4620      	mov	r0, r4
 800c620:	f000 f992 	bl	800c948 <_free_r>
 800c624:	4631      	mov	r1, r6
 800c626:	e7ef      	b.n	800c608 <_reclaim_reent+0x8c>
 800c628:	2500      	movs	r5, #0
 800c62a:	e7ef      	b.n	800c60c <_reclaim_reent+0x90>
 800c62c:	bd70      	pop	{r4, r5, r6, pc}
 800c62e:	bf00      	nop
 800c630:	200002ac 	.word	0x200002ac

0800c634 <_sbrk_r>:
 800c634:	b538      	push	{r3, r4, r5, lr}
 800c636:	4d06      	ldr	r5, [pc, #24]	; (800c650 <_sbrk_r+0x1c>)
 800c638:	2300      	movs	r3, #0
 800c63a:	4604      	mov	r4, r0
 800c63c:	4608      	mov	r0, r1
 800c63e:	602b      	str	r3, [r5, #0]
 800c640:	f7f4 f9ec 	bl	8000a1c <_sbrk>
 800c644:	1c43      	adds	r3, r0, #1
 800c646:	d102      	bne.n	800c64e <_sbrk_r+0x1a>
 800c648:	682b      	ldr	r3, [r5, #0]
 800c64a:	b103      	cbz	r3, 800c64e <_sbrk_r+0x1a>
 800c64c:	6023      	str	r3, [r4, #0]
 800c64e:	bd38      	pop	{r3, r4, r5, pc}
 800c650:	2000dd98 	.word	0x2000dd98

0800c654 <sniprintf>:
 800c654:	b40c      	push	{r2, r3}
 800c656:	b530      	push	{r4, r5, lr}
 800c658:	4b17      	ldr	r3, [pc, #92]	; (800c6b8 <sniprintf+0x64>)
 800c65a:	1e0c      	subs	r4, r1, #0
 800c65c:	681d      	ldr	r5, [r3, #0]
 800c65e:	b09d      	sub	sp, #116	; 0x74
 800c660:	da08      	bge.n	800c674 <sniprintf+0x20>
 800c662:	238b      	movs	r3, #139	; 0x8b
 800c664:	602b      	str	r3, [r5, #0]
 800c666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c66a:	b01d      	add	sp, #116	; 0x74
 800c66c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c670:	b002      	add	sp, #8
 800c672:	4770      	bx	lr
 800c674:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c678:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c67c:	bf14      	ite	ne
 800c67e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c682:	4623      	moveq	r3, r4
 800c684:	9304      	str	r3, [sp, #16]
 800c686:	9307      	str	r3, [sp, #28]
 800c688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c68c:	9002      	str	r0, [sp, #8]
 800c68e:	9006      	str	r0, [sp, #24]
 800c690:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c694:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c696:	ab21      	add	r3, sp, #132	; 0x84
 800c698:	a902      	add	r1, sp, #8
 800c69a:	4628      	mov	r0, r5
 800c69c:	9301      	str	r3, [sp, #4]
 800c69e:	f000 f9ff 	bl	800caa0 <_svfiprintf_r>
 800c6a2:	1c43      	adds	r3, r0, #1
 800c6a4:	bfbc      	itt	lt
 800c6a6:	238b      	movlt	r3, #139	; 0x8b
 800c6a8:	602b      	strlt	r3, [r5, #0]
 800c6aa:	2c00      	cmp	r4, #0
 800c6ac:	d0dd      	beq.n	800c66a <sniprintf+0x16>
 800c6ae:	9b02      	ldr	r3, [sp, #8]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	701a      	strb	r2, [r3, #0]
 800c6b4:	e7d9      	b.n	800c66a <sniprintf+0x16>
 800c6b6:	bf00      	nop
 800c6b8:	200002ac 	.word	0x200002ac

0800c6bc <__sread>:
 800c6bc:	b510      	push	{r4, lr}
 800c6be:	460c      	mov	r4, r1
 800c6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6c4:	f000 fe22 	bl	800d30c <_read_r>
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	bfab      	itete	ge
 800c6cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6ce:	89a3      	ldrhlt	r3, [r4, #12]
 800c6d0:	181b      	addge	r3, r3, r0
 800c6d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6d6:	bfac      	ite	ge
 800c6d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6da:	81a3      	strhlt	r3, [r4, #12]
 800c6dc:	bd10      	pop	{r4, pc}

0800c6de <__swrite>:
 800c6de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e2:	461f      	mov	r7, r3
 800c6e4:	898b      	ldrh	r3, [r1, #12]
 800c6e6:	05db      	lsls	r3, r3, #23
 800c6e8:	4605      	mov	r5, r0
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	4616      	mov	r6, r2
 800c6ee:	d505      	bpl.n	800c6fc <__swrite+0x1e>
 800c6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f000 f908 	bl	800c90c <_lseek_r>
 800c6fc:	89a3      	ldrh	r3, [r4, #12]
 800c6fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c706:	81a3      	strh	r3, [r4, #12]
 800c708:	4632      	mov	r2, r6
 800c70a:	463b      	mov	r3, r7
 800c70c:	4628      	mov	r0, r5
 800c70e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c712:	f000 b817 	b.w	800c744 <_write_r>

0800c716 <__sseek>:
 800c716:	b510      	push	{r4, lr}
 800c718:	460c      	mov	r4, r1
 800c71a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c71e:	f000 f8f5 	bl	800c90c <_lseek_r>
 800c722:	1c43      	adds	r3, r0, #1
 800c724:	89a3      	ldrh	r3, [r4, #12]
 800c726:	bf15      	itete	ne
 800c728:	6560      	strne	r0, [r4, #84]	; 0x54
 800c72a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c72e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c732:	81a3      	strheq	r3, [r4, #12]
 800c734:	bf18      	it	ne
 800c736:	81a3      	strhne	r3, [r4, #12]
 800c738:	bd10      	pop	{r4, pc}

0800c73a <__sclose>:
 800c73a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c73e:	f000 b813 	b.w	800c768 <_close_r>
	...

0800c744 <_write_r>:
 800c744:	b538      	push	{r3, r4, r5, lr}
 800c746:	4d07      	ldr	r5, [pc, #28]	; (800c764 <_write_r+0x20>)
 800c748:	4604      	mov	r4, r0
 800c74a:	4608      	mov	r0, r1
 800c74c:	4611      	mov	r1, r2
 800c74e:	2200      	movs	r2, #0
 800c750:	602a      	str	r2, [r5, #0]
 800c752:	461a      	mov	r2, r3
 800c754:	f7f3 ffa6 	bl	80006a4 <_write>
 800c758:	1c43      	adds	r3, r0, #1
 800c75a:	d102      	bne.n	800c762 <_write_r+0x1e>
 800c75c:	682b      	ldr	r3, [r5, #0]
 800c75e:	b103      	cbz	r3, 800c762 <_write_r+0x1e>
 800c760:	6023      	str	r3, [r4, #0]
 800c762:	bd38      	pop	{r3, r4, r5, pc}
 800c764:	2000dd98 	.word	0x2000dd98

0800c768 <_close_r>:
 800c768:	b538      	push	{r3, r4, r5, lr}
 800c76a:	4d06      	ldr	r5, [pc, #24]	; (800c784 <_close_r+0x1c>)
 800c76c:	2300      	movs	r3, #0
 800c76e:	4604      	mov	r4, r0
 800c770:	4608      	mov	r0, r1
 800c772:	602b      	str	r3, [r5, #0]
 800c774:	f7f4 f91d 	bl	80009b2 <_close>
 800c778:	1c43      	adds	r3, r0, #1
 800c77a:	d102      	bne.n	800c782 <_close_r+0x1a>
 800c77c:	682b      	ldr	r3, [r5, #0]
 800c77e:	b103      	cbz	r3, 800c782 <_close_r+0x1a>
 800c780:	6023      	str	r3, [r4, #0]
 800c782:	bd38      	pop	{r3, r4, r5, pc}
 800c784:	2000dd98 	.word	0x2000dd98

0800c788 <__sflush_r>:
 800c788:	898a      	ldrh	r2, [r1, #12]
 800c78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c78e:	4605      	mov	r5, r0
 800c790:	0710      	lsls	r0, r2, #28
 800c792:	460c      	mov	r4, r1
 800c794:	d458      	bmi.n	800c848 <__sflush_r+0xc0>
 800c796:	684b      	ldr	r3, [r1, #4]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	dc05      	bgt.n	800c7a8 <__sflush_r+0x20>
 800c79c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	dc02      	bgt.n	800c7a8 <__sflush_r+0x20>
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7aa:	2e00      	cmp	r6, #0
 800c7ac:	d0f9      	beq.n	800c7a2 <__sflush_r+0x1a>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7b4:	682f      	ldr	r7, [r5, #0]
 800c7b6:	602b      	str	r3, [r5, #0]
 800c7b8:	d032      	beq.n	800c820 <__sflush_r+0x98>
 800c7ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7bc:	89a3      	ldrh	r3, [r4, #12]
 800c7be:	075a      	lsls	r2, r3, #29
 800c7c0:	d505      	bpl.n	800c7ce <__sflush_r+0x46>
 800c7c2:	6863      	ldr	r3, [r4, #4]
 800c7c4:	1ac0      	subs	r0, r0, r3
 800c7c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7c8:	b10b      	cbz	r3, 800c7ce <__sflush_r+0x46>
 800c7ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7cc:	1ac0      	subs	r0, r0, r3
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7d4:	6a21      	ldr	r1, [r4, #32]
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	47b0      	blx	r6
 800c7da:	1c43      	adds	r3, r0, #1
 800c7dc:	89a3      	ldrh	r3, [r4, #12]
 800c7de:	d106      	bne.n	800c7ee <__sflush_r+0x66>
 800c7e0:	6829      	ldr	r1, [r5, #0]
 800c7e2:	291d      	cmp	r1, #29
 800c7e4:	d82c      	bhi.n	800c840 <__sflush_r+0xb8>
 800c7e6:	4a2a      	ldr	r2, [pc, #168]	; (800c890 <__sflush_r+0x108>)
 800c7e8:	40ca      	lsrs	r2, r1
 800c7ea:	07d6      	lsls	r6, r2, #31
 800c7ec:	d528      	bpl.n	800c840 <__sflush_r+0xb8>
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	6062      	str	r2, [r4, #4]
 800c7f2:	04d9      	lsls	r1, r3, #19
 800c7f4:	6922      	ldr	r2, [r4, #16]
 800c7f6:	6022      	str	r2, [r4, #0]
 800c7f8:	d504      	bpl.n	800c804 <__sflush_r+0x7c>
 800c7fa:	1c42      	adds	r2, r0, #1
 800c7fc:	d101      	bne.n	800c802 <__sflush_r+0x7a>
 800c7fe:	682b      	ldr	r3, [r5, #0]
 800c800:	b903      	cbnz	r3, 800c804 <__sflush_r+0x7c>
 800c802:	6560      	str	r0, [r4, #84]	; 0x54
 800c804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c806:	602f      	str	r7, [r5, #0]
 800c808:	2900      	cmp	r1, #0
 800c80a:	d0ca      	beq.n	800c7a2 <__sflush_r+0x1a>
 800c80c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c810:	4299      	cmp	r1, r3
 800c812:	d002      	beq.n	800c81a <__sflush_r+0x92>
 800c814:	4628      	mov	r0, r5
 800c816:	f000 f897 	bl	800c948 <_free_r>
 800c81a:	2000      	movs	r0, #0
 800c81c:	6360      	str	r0, [r4, #52]	; 0x34
 800c81e:	e7c1      	b.n	800c7a4 <__sflush_r+0x1c>
 800c820:	6a21      	ldr	r1, [r4, #32]
 800c822:	2301      	movs	r3, #1
 800c824:	4628      	mov	r0, r5
 800c826:	47b0      	blx	r6
 800c828:	1c41      	adds	r1, r0, #1
 800c82a:	d1c7      	bne.n	800c7bc <__sflush_r+0x34>
 800c82c:	682b      	ldr	r3, [r5, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d0c4      	beq.n	800c7bc <__sflush_r+0x34>
 800c832:	2b1d      	cmp	r3, #29
 800c834:	d001      	beq.n	800c83a <__sflush_r+0xb2>
 800c836:	2b16      	cmp	r3, #22
 800c838:	d101      	bne.n	800c83e <__sflush_r+0xb6>
 800c83a:	602f      	str	r7, [r5, #0]
 800c83c:	e7b1      	b.n	800c7a2 <__sflush_r+0x1a>
 800c83e:	89a3      	ldrh	r3, [r4, #12]
 800c840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	e7ad      	b.n	800c7a4 <__sflush_r+0x1c>
 800c848:	690f      	ldr	r7, [r1, #16]
 800c84a:	2f00      	cmp	r7, #0
 800c84c:	d0a9      	beq.n	800c7a2 <__sflush_r+0x1a>
 800c84e:	0793      	lsls	r3, r2, #30
 800c850:	680e      	ldr	r6, [r1, #0]
 800c852:	bf08      	it	eq
 800c854:	694b      	ldreq	r3, [r1, #20]
 800c856:	600f      	str	r7, [r1, #0]
 800c858:	bf18      	it	ne
 800c85a:	2300      	movne	r3, #0
 800c85c:	eba6 0807 	sub.w	r8, r6, r7
 800c860:	608b      	str	r3, [r1, #8]
 800c862:	f1b8 0f00 	cmp.w	r8, #0
 800c866:	dd9c      	ble.n	800c7a2 <__sflush_r+0x1a>
 800c868:	6a21      	ldr	r1, [r4, #32]
 800c86a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c86c:	4643      	mov	r3, r8
 800c86e:	463a      	mov	r2, r7
 800c870:	4628      	mov	r0, r5
 800c872:	47b0      	blx	r6
 800c874:	2800      	cmp	r0, #0
 800c876:	dc06      	bgt.n	800c886 <__sflush_r+0xfe>
 800c878:	89a3      	ldrh	r3, [r4, #12]
 800c87a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c87e:	81a3      	strh	r3, [r4, #12]
 800c880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c884:	e78e      	b.n	800c7a4 <__sflush_r+0x1c>
 800c886:	4407      	add	r7, r0
 800c888:	eba8 0800 	sub.w	r8, r8, r0
 800c88c:	e7e9      	b.n	800c862 <__sflush_r+0xda>
 800c88e:	bf00      	nop
 800c890:	20400001 	.word	0x20400001

0800c894 <_fflush_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	690b      	ldr	r3, [r1, #16]
 800c898:	4605      	mov	r5, r0
 800c89a:	460c      	mov	r4, r1
 800c89c:	b913      	cbnz	r3, 800c8a4 <_fflush_r+0x10>
 800c89e:	2500      	movs	r5, #0
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	bd38      	pop	{r3, r4, r5, pc}
 800c8a4:	b118      	cbz	r0, 800c8ae <_fflush_r+0x1a>
 800c8a6:	6983      	ldr	r3, [r0, #24]
 800c8a8:	b90b      	cbnz	r3, 800c8ae <_fflush_r+0x1a>
 800c8aa:	f7ff fcf5 	bl	800c298 <__sinit>
 800c8ae:	4b14      	ldr	r3, [pc, #80]	; (800c900 <_fflush_r+0x6c>)
 800c8b0:	429c      	cmp	r4, r3
 800c8b2:	d11b      	bne.n	800c8ec <_fflush_r+0x58>
 800c8b4:	686c      	ldr	r4, [r5, #4]
 800c8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d0ef      	beq.n	800c89e <_fflush_r+0xa>
 800c8be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8c0:	07d0      	lsls	r0, r2, #31
 800c8c2:	d404      	bmi.n	800c8ce <_fflush_r+0x3a>
 800c8c4:	0599      	lsls	r1, r3, #22
 800c8c6:	d402      	bmi.n	800c8ce <_fflush_r+0x3a>
 800c8c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8ca:	f7ff fda8 	bl	800c41e <__retarget_lock_acquire_recursive>
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	4621      	mov	r1, r4
 800c8d2:	f7ff ff59 	bl	800c788 <__sflush_r>
 800c8d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8d8:	07da      	lsls	r2, r3, #31
 800c8da:	4605      	mov	r5, r0
 800c8dc:	d4e0      	bmi.n	800c8a0 <_fflush_r+0xc>
 800c8de:	89a3      	ldrh	r3, [r4, #12]
 800c8e0:	059b      	lsls	r3, r3, #22
 800c8e2:	d4dd      	bmi.n	800c8a0 <_fflush_r+0xc>
 800c8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8e6:	f7ff fd9b 	bl	800c420 <__retarget_lock_release_recursive>
 800c8ea:	e7d9      	b.n	800c8a0 <_fflush_r+0xc>
 800c8ec:	4b05      	ldr	r3, [pc, #20]	; (800c904 <_fflush_r+0x70>)
 800c8ee:	429c      	cmp	r4, r3
 800c8f0:	d101      	bne.n	800c8f6 <_fflush_r+0x62>
 800c8f2:	68ac      	ldr	r4, [r5, #8]
 800c8f4:	e7df      	b.n	800c8b6 <_fflush_r+0x22>
 800c8f6:	4b04      	ldr	r3, [pc, #16]	; (800c908 <_fflush_r+0x74>)
 800c8f8:	429c      	cmp	r4, r3
 800c8fa:	bf08      	it	eq
 800c8fc:	68ec      	ldreq	r4, [r5, #12]
 800c8fe:	e7da      	b.n	800c8b6 <_fflush_r+0x22>
 800c900:	0800d7b8 	.word	0x0800d7b8
 800c904:	0800d7d8 	.word	0x0800d7d8
 800c908:	0800d798 	.word	0x0800d798

0800c90c <_lseek_r>:
 800c90c:	b538      	push	{r3, r4, r5, lr}
 800c90e:	4d07      	ldr	r5, [pc, #28]	; (800c92c <_lseek_r+0x20>)
 800c910:	4604      	mov	r4, r0
 800c912:	4608      	mov	r0, r1
 800c914:	4611      	mov	r1, r2
 800c916:	2200      	movs	r2, #0
 800c918:	602a      	str	r2, [r5, #0]
 800c91a:	461a      	mov	r2, r3
 800c91c:	f7f4 f870 	bl	8000a00 <_lseek>
 800c920:	1c43      	adds	r3, r0, #1
 800c922:	d102      	bne.n	800c92a <_lseek_r+0x1e>
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	b103      	cbz	r3, 800c92a <_lseek_r+0x1e>
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	bd38      	pop	{r3, r4, r5, pc}
 800c92c:	2000dd98 	.word	0x2000dd98

0800c930 <__malloc_lock>:
 800c930:	4801      	ldr	r0, [pc, #4]	; (800c938 <__malloc_lock+0x8>)
 800c932:	f7ff bd74 	b.w	800c41e <__retarget_lock_acquire_recursive>
 800c936:	bf00      	nop
 800c938:	2000dd90 	.word	0x2000dd90

0800c93c <__malloc_unlock>:
 800c93c:	4801      	ldr	r0, [pc, #4]	; (800c944 <__malloc_unlock+0x8>)
 800c93e:	f7ff bd6f 	b.w	800c420 <__retarget_lock_release_recursive>
 800c942:	bf00      	nop
 800c944:	2000dd90 	.word	0x2000dd90

0800c948 <_free_r>:
 800c948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c94a:	2900      	cmp	r1, #0
 800c94c:	d048      	beq.n	800c9e0 <_free_r+0x98>
 800c94e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c952:	9001      	str	r0, [sp, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	f1a1 0404 	sub.w	r4, r1, #4
 800c95a:	bfb8      	it	lt
 800c95c:	18e4      	addlt	r4, r4, r3
 800c95e:	f7ff ffe7 	bl	800c930 <__malloc_lock>
 800c962:	4a20      	ldr	r2, [pc, #128]	; (800c9e4 <_free_r+0x9c>)
 800c964:	9801      	ldr	r0, [sp, #4]
 800c966:	6813      	ldr	r3, [r2, #0]
 800c968:	4615      	mov	r5, r2
 800c96a:	b933      	cbnz	r3, 800c97a <_free_r+0x32>
 800c96c:	6063      	str	r3, [r4, #4]
 800c96e:	6014      	str	r4, [r2, #0]
 800c970:	b003      	add	sp, #12
 800c972:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c976:	f7ff bfe1 	b.w	800c93c <__malloc_unlock>
 800c97a:	42a3      	cmp	r3, r4
 800c97c:	d90b      	bls.n	800c996 <_free_r+0x4e>
 800c97e:	6821      	ldr	r1, [r4, #0]
 800c980:	1862      	adds	r2, r4, r1
 800c982:	4293      	cmp	r3, r2
 800c984:	bf04      	itt	eq
 800c986:	681a      	ldreq	r2, [r3, #0]
 800c988:	685b      	ldreq	r3, [r3, #4]
 800c98a:	6063      	str	r3, [r4, #4]
 800c98c:	bf04      	itt	eq
 800c98e:	1852      	addeq	r2, r2, r1
 800c990:	6022      	streq	r2, [r4, #0]
 800c992:	602c      	str	r4, [r5, #0]
 800c994:	e7ec      	b.n	800c970 <_free_r+0x28>
 800c996:	461a      	mov	r2, r3
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	b10b      	cbz	r3, 800c9a0 <_free_r+0x58>
 800c99c:	42a3      	cmp	r3, r4
 800c99e:	d9fa      	bls.n	800c996 <_free_r+0x4e>
 800c9a0:	6811      	ldr	r1, [r2, #0]
 800c9a2:	1855      	adds	r5, r2, r1
 800c9a4:	42a5      	cmp	r5, r4
 800c9a6:	d10b      	bne.n	800c9c0 <_free_r+0x78>
 800c9a8:	6824      	ldr	r4, [r4, #0]
 800c9aa:	4421      	add	r1, r4
 800c9ac:	1854      	adds	r4, r2, r1
 800c9ae:	42a3      	cmp	r3, r4
 800c9b0:	6011      	str	r1, [r2, #0]
 800c9b2:	d1dd      	bne.n	800c970 <_free_r+0x28>
 800c9b4:	681c      	ldr	r4, [r3, #0]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	6053      	str	r3, [r2, #4]
 800c9ba:	4421      	add	r1, r4
 800c9bc:	6011      	str	r1, [r2, #0]
 800c9be:	e7d7      	b.n	800c970 <_free_r+0x28>
 800c9c0:	d902      	bls.n	800c9c8 <_free_r+0x80>
 800c9c2:	230c      	movs	r3, #12
 800c9c4:	6003      	str	r3, [r0, #0]
 800c9c6:	e7d3      	b.n	800c970 <_free_r+0x28>
 800c9c8:	6825      	ldr	r5, [r4, #0]
 800c9ca:	1961      	adds	r1, r4, r5
 800c9cc:	428b      	cmp	r3, r1
 800c9ce:	bf04      	itt	eq
 800c9d0:	6819      	ldreq	r1, [r3, #0]
 800c9d2:	685b      	ldreq	r3, [r3, #4]
 800c9d4:	6063      	str	r3, [r4, #4]
 800c9d6:	bf04      	itt	eq
 800c9d8:	1949      	addeq	r1, r1, r5
 800c9da:	6021      	streq	r1, [r4, #0]
 800c9dc:	6054      	str	r4, [r2, #4]
 800c9de:	e7c7      	b.n	800c970 <_free_r+0x28>
 800c9e0:	b003      	add	sp, #12
 800c9e2:	bd30      	pop	{r4, r5, pc}
 800c9e4:	20004fbc 	.word	0x20004fbc

0800c9e8 <__ssputs_r>:
 800c9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ec:	688e      	ldr	r6, [r1, #8]
 800c9ee:	429e      	cmp	r6, r3
 800c9f0:	4682      	mov	sl, r0
 800c9f2:	460c      	mov	r4, r1
 800c9f4:	4690      	mov	r8, r2
 800c9f6:	461f      	mov	r7, r3
 800c9f8:	d838      	bhi.n	800ca6c <__ssputs_r+0x84>
 800c9fa:	898a      	ldrh	r2, [r1, #12]
 800c9fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca00:	d032      	beq.n	800ca68 <__ssputs_r+0x80>
 800ca02:	6825      	ldr	r5, [r4, #0]
 800ca04:	6909      	ldr	r1, [r1, #16]
 800ca06:	eba5 0901 	sub.w	r9, r5, r1
 800ca0a:	6965      	ldr	r5, [r4, #20]
 800ca0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca14:	3301      	adds	r3, #1
 800ca16:	444b      	add	r3, r9
 800ca18:	106d      	asrs	r5, r5, #1
 800ca1a:	429d      	cmp	r5, r3
 800ca1c:	bf38      	it	cc
 800ca1e:	461d      	movcc	r5, r3
 800ca20:	0553      	lsls	r3, r2, #21
 800ca22:	d531      	bpl.n	800ca88 <__ssputs_r+0xa0>
 800ca24:	4629      	mov	r1, r5
 800ca26:	f7ff fd13 	bl	800c450 <_malloc_r>
 800ca2a:	4606      	mov	r6, r0
 800ca2c:	b950      	cbnz	r0, 800ca44 <__ssputs_r+0x5c>
 800ca2e:	230c      	movs	r3, #12
 800ca30:	f8ca 3000 	str.w	r3, [sl]
 800ca34:	89a3      	ldrh	r3, [r4, #12]
 800ca36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca3a:	81a3      	strh	r3, [r4, #12]
 800ca3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca44:	6921      	ldr	r1, [r4, #16]
 800ca46:	464a      	mov	r2, r9
 800ca48:	f7ff fceb 	bl	800c422 <memcpy>
 800ca4c:	89a3      	ldrh	r3, [r4, #12]
 800ca4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca56:	81a3      	strh	r3, [r4, #12]
 800ca58:	6126      	str	r6, [r4, #16]
 800ca5a:	6165      	str	r5, [r4, #20]
 800ca5c:	444e      	add	r6, r9
 800ca5e:	eba5 0509 	sub.w	r5, r5, r9
 800ca62:	6026      	str	r6, [r4, #0]
 800ca64:	60a5      	str	r5, [r4, #8]
 800ca66:	463e      	mov	r6, r7
 800ca68:	42be      	cmp	r6, r7
 800ca6a:	d900      	bls.n	800ca6e <__ssputs_r+0x86>
 800ca6c:	463e      	mov	r6, r7
 800ca6e:	4632      	mov	r2, r6
 800ca70:	6820      	ldr	r0, [r4, #0]
 800ca72:	4641      	mov	r1, r8
 800ca74:	f000 fd80 	bl	800d578 <memmove>
 800ca78:	68a3      	ldr	r3, [r4, #8]
 800ca7a:	6822      	ldr	r2, [r4, #0]
 800ca7c:	1b9b      	subs	r3, r3, r6
 800ca7e:	4432      	add	r2, r6
 800ca80:	60a3      	str	r3, [r4, #8]
 800ca82:	6022      	str	r2, [r4, #0]
 800ca84:	2000      	movs	r0, #0
 800ca86:	e7db      	b.n	800ca40 <__ssputs_r+0x58>
 800ca88:	462a      	mov	r2, r5
 800ca8a:	f000 fd8f 	bl	800d5ac <_realloc_r>
 800ca8e:	4606      	mov	r6, r0
 800ca90:	2800      	cmp	r0, #0
 800ca92:	d1e1      	bne.n	800ca58 <__ssputs_r+0x70>
 800ca94:	6921      	ldr	r1, [r4, #16]
 800ca96:	4650      	mov	r0, sl
 800ca98:	f7ff ff56 	bl	800c948 <_free_r>
 800ca9c:	e7c7      	b.n	800ca2e <__ssputs_r+0x46>
	...

0800caa0 <_svfiprintf_r>:
 800caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	4698      	mov	r8, r3
 800caa6:	898b      	ldrh	r3, [r1, #12]
 800caa8:	061b      	lsls	r3, r3, #24
 800caaa:	b09d      	sub	sp, #116	; 0x74
 800caac:	4607      	mov	r7, r0
 800caae:	460d      	mov	r5, r1
 800cab0:	4614      	mov	r4, r2
 800cab2:	d50e      	bpl.n	800cad2 <_svfiprintf_r+0x32>
 800cab4:	690b      	ldr	r3, [r1, #16]
 800cab6:	b963      	cbnz	r3, 800cad2 <_svfiprintf_r+0x32>
 800cab8:	2140      	movs	r1, #64	; 0x40
 800caba:	f7ff fcc9 	bl	800c450 <_malloc_r>
 800cabe:	6028      	str	r0, [r5, #0]
 800cac0:	6128      	str	r0, [r5, #16]
 800cac2:	b920      	cbnz	r0, 800cace <_svfiprintf_r+0x2e>
 800cac4:	230c      	movs	r3, #12
 800cac6:	603b      	str	r3, [r7, #0]
 800cac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cacc:	e0d1      	b.n	800cc72 <_svfiprintf_r+0x1d2>
 800cace:	2340      	movs	r3, #64	; 0x40
 800cad0:	616b      	str	r3, [r5, #20]
 800cad2:	2300      	movs	r3, #0
 800cad4:	9309      	str	r3, [sp, #36]	; 0x24
 800cad6:	2320      	movs	r3, #32
 800cad8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cadc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cae0:	2330      	movs	r3, #48	; 0x30
 800cae2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cc8c <_svfiprintf_r+0x1ec>
 800cae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caea:	f04f 0901 	mov.w	r9, #1
 800caee:	4623      	mov	r3, r4
 800caf0:	469a      	mov	sl, r3
 800caf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caf6:	b10a      	cbz	r2, 800cafc <_svfiprintf_r+0x5c>
 800caf8:	2a25      	cmp	r2, #37	; 0x25
 800cafa:	d1f9      	bne.n	800caf0 <_svfiprintf_r+0x50>
 800cafc:	ebba 0b04 	subs.w	fp, sl, r4
 800cb00:	d00b      	beq.n	800cb1a <_svfiprintf_r+0x7a>
 800cb02:	465b      	mov	r3, fp
 800cb04:	4622      	mov	r2, r4
 800cb06:	4629      	mov	r1, r5
 800cb08:	4638      	mov	r0, r7
 800cb0a:	f7ff ff6d 	bl	800c9e8 <__ssputs_r>
 800cb0e:	3001      	adds	r0, #1
 800cb10:	f000 80aa 	beq.w	800cc68 <_svfiprintf_r+0x1c8>
 800cb14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb16:	445a      	add	r2, fp
 800cb18:	9209      	str	r2, [sp, #36]	; 0x24
 800cb1a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f000 80a2 	beq.w	800cc68 <_svfiprintf_r+0x1c8>
 800cb24:	2300      	movs	r3, #0
 800cb26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb2e:	f10a 0a01 	add.w	sl, sl, #1
 800cb32:	9304      	str	r3, [sp, #16]
 800cb34:	9307      	str	r3, [sp, #28]
 800cb36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb3a:	931a      	str	r3, [sp, #104]	; 0x68
 800cb3c:	4654      	mov	r4, sl
 800cb3e:	2205      	movs	r2, #5
 800cb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb44:	4851      	ldr	r0, [pc, #324]	; (800cc8c <_svfiprintf_r+0x1ec>)
 800cb46:	f7f3 fb4b 	bl	80001e0 <memchr>
 800cb4a:	9a04      	ldr	r2, [sp, #16]
 800cb4c:	b9d8      	cbnz	r0, 800cb86 <_svfiprintf_r+0xe6>
 800cb4e:	06d0      	lsls	r0, r2, #27
 800cb50:	bf44      	itt	mi
 800cb52:	2320      	movmi	r3, #32
 800cb54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb58:	0711      	lsls	r1, r2, #28
 800cb5a:	bf44      	itt	mi
 800cb5c:	232b      	movmi	r3, #43	; 0x2b
 800cb5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb62:	f89a 3000 	ldrb.w	r3, [sl]
 800cb66:	2b2a      	cmp	r3, #42	; 0x2a
 800cb68:	d015      	beq.n	800cb96 <_svfiprintf_r+0xf6>
 800cb6a:	9a07      	ldr	r2, [sp, #28]
 800cb6c:	4654      	mov	r4, sl
 800cb6e:	2000      	movs	r0, #0
 800cb70:	f04f 0c0a 	mov.w	ip, #10
 800cb74:	4621      	mov	r1, r4
 800cb76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb7a:	3b30      	subs	r3, #48	; 0x30
 800cb7c:	2b09      	cmp	r3, #9
 800cb7e:	d94e      	bls.n	800cc1e <_svfiprintf_r+0x17e>
 800cb80:	b1b0      	cbz	r0, 800cbb0 <_svfiprintf_r+0x110>
 800cb82:	9207      	str	r2, [sp, #28]
 800cb84:	e014      	b.n	800cbb0 <_svfiprintf_r+0x110>
 800cb86:	eba0 0308 	sub.w	r3, r0, r8
 800cb8a:	fa09 f303 	lsl.w	r3, r9, r3
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	9304      	str	r3, [sp, #16]
 800cb92:	46a2      	mov	sl, r4
 800cb94:	e7d2      	b.n	800cb3c <_svfiprintf_r+0x9c>
 800cb96:	9b03      	ldr	r3, [sp, #12]
 800cb98:	1d19      	adds	r1, r3, #4
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	9103      	str	r1, [sp, #12]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	bfbb      	ittet	lt
 800cba2:	425b      	neglt	r3, r3
 800cba4:	f042 0202 	orrlt.w	r2, r2, #2
 800cba8:	9307      	strge	r3, [sp, #28]
 800cbaa:	9307      	strlt	r3, [sp, #28]
 800cbac:	bfb8      	it	lt
 800cbae:	9204      	strlt	r2, [sp, #16]
 800cbb0:	7823      	ldrb	r3, [r4, #0]
 800cbb2:	2b2e      	cmp	r3, #46	; 0x2e
 800cbb4:	d10c      	bne.n	800cbd0 <_svfiprintf_r+0x130>
 800cbb6:	7863      	ldrb	r3, [r4, #1]
 800cbb8:	2b2a      	cmp	r3, #42	; 0x2a
 800cbba:	d135      	bne.n	800cc28 <_svfiprintf_r+0x188>
 800cbbc:	9b03      	ldr	r3, [sp, #12]
 800cbbe:	1d1a      	adds	r2, r3, #4
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	9203      	str	r2, [sp, #12]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	bfb8      	it	lt
 800cbc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cbcc:	3402      	adds	r4, #2
 800cbce:	9305      	str	r3, [sp, #20]
 800cbd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc9c <_svfiprintf_r+0x1fc>
 800cbd4:	7821      	ldrb	r1, [r4, #0]
 800cbd6:	2203      	movs	r2, #3
 800cbd8:	4650      	mov	r0, sl
 800cbda:	f7f3 fb01 	bl	80001e0 <memchr>
 800cbde:	b140      	cbz	r0, 800cbf2 <_svfiprintf_r+0x152>
 800cbe0:	2340      	movs	r3, #64	; 0x40
 800cbe2:	eba0 000a 	sub.w	r0, r0, sl
 800cbe6:	fa03 f000 	lsl.w	r0, r3, r0
 800cbea:	9b04      	ldr	r3, [sp, #16]
 800cbec:	4303      	orrs	r3, r0
 800cbee:	3401      	adds	r4, #1
 800cbf0:	9304      	str	r3, [sp, #16]
 800cbf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbf6:	4826      	ldr	r0, [pc, #152]	; (800cc90 <_svfiprintf_r+0x1f0>)
 800cbf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbfc:	2206      	movs	r2, #6
 800cbfe:	f7f3 faef 	bl	80001e0 <memchr>
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d038      	beq.n	800cc78 <_svfiprintf_r+0x1d8>
 800cc06:	4b23      	ldr	r3, [pc, #140]	; (800cc94 <_svfiprintf_r+0x1f4>)
 800cc08:	bb1b      	cbnz	r3, 800cc52 <_svfiprintf_r+0x1b2>
 800cc0a:	9b03      	ldr	r3, [sp, #12]
 800cc0c:	3307      	adds	r3, #7
 800cc0e:	f023 0307 	bic.w	r3, r3, #7
 800cc12:	3308      	adds	r3, #8
 800cc14:	9303      	str	r3, [sp, #12]
 800cc16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc18:	4433      	add	r3, r6
 800cc1a:	9309      	str	r3, [sp, #36]	; 0x24
 800cc1c:	e767      	b.n	800caee <_svfiprintf_r+0x4e>
 800cc1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc22:	460c      	mov	r4, r1
 800cc24:	2001      	movs	r0, #1
 800cc26:	e7a5      	b.n	800cb74 <_svfiprintf_r+0xd4>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	3401      	adds	r4, #1
 800cc2c:	9305      	str	r3, [sp, #20]
 800cc2e:	4619      	mov	r1, r3
 800cc30:	f04f 0c0a 	mov.w	ip, #10
 800cc34:	4620      	mov	r0, r4
 800cc36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc3a:	3a30      	subs	r2, #48	; 0x30
 800cc3c:	2a09      	cmp	r2, #9
 800cc3e:	d903      	bls.n	800cc48 <_svfiprintf_r+0x1a8>
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d0c5      	beq.n	800cbd0 <_svfiprintf_r+0x130>
 800cc44:	9105      	str	r1, [sp, #20]
 800cc46:	e7c3      	b.n	800cbd0 <_svfiprintf_r+0x130>
 800cc48:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e7f0      	b.n	800cc34 <_svfiprintf_r+0x194>
 800cc52:	ab03      	add	r3, sp, #12
 800cc54:	9300      	str	r3, [sp, #0]
 800cc56:	462a      	mov	r2, r5
 800cc58:	4b0f      	ldr	r3, [pc, #60]	; (800cc98 <_svfiprintf_r+0x1f8>)
 800cc5a:	a904      	add	r1, sp, #16
 800cc5c:	4638      	mov	r0, r7
 800cc5e:	f3af 8000 	nop.w
 800cc62:	1c42      	adds	r2, r0, #1
 800cc64:	4606      	mov	r6, r0
 800cc66:	d1d6      	bne.n	800cc16 <_svfiprintf_r+0x176>
 800cc68:	89ab      	ldrh	r3, [r5, #12]
 800cc6a:	065b      	lsls	r3, r3, #25
 800cc6c:	f53f af2c 	bmi.w	800cac8 <_svfiprintf_r+0x28>
 800cc70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc72:	b01d      	add	sp, #116	; 0x74
 800cc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc78:	ab03      	add	r3, sp, #12
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	462a      	mov	r2, r5
 800cc7e:	4b06      	ldr	r3, [pc, #24]	; (800cc98 <_svfiprintf_r+0x1f8>)
 800cc80:	a904      	add	r1, sp, #16
 800cc82:	4638      	mov	r0, r7
 800cc84:	f000 f9d4 	bl	800d030 <_printf_i>
 800cc88:	e7eb      	b.n	800cc62 <_svfiprintf_r+0x1c2>
 800cc8a:	bf00      	nop
 800cc8c:	0800d7fc 	.word	0x0800d7fc
 800cc90:	0800d806 	.word	0x0800d806
 800cc94:	00000000 	.word	0x00000000
 800cc98:	0800c9e9 	.word	0x0800c9e9
 800cc9c:	0800d802 	.word	0x0800d802

0800cca0 <__sfputc_r>:
 800cca0:	6893      	ldr	r3, [r2, #8]
 800cca2:	3b01      	subs	r3, #1
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	b410      	push	{r4}
 800cca8:	6093      	str	r3, [r2, #8]
 800ccaa:	da08      	bge.n	800ccbe <__sfputc_r+0x1e>
 800ccac:	6994      	ldr	r4, [r2, #24]
 800ccae:	42a3      	cmp	r3, r4
 800ccb0:	db01      	blt.n	800ccb6 <__sfputc_r+0x16>
 800ccb2:	290a      	cmp	r1, #10
 800ccb4:	d103      	bne.n	800ccbe <__sfputc_r+0x1e>
 800ccb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccba:	f000 bb39 	b.w	800d330 <__swbuf_r>
 800ccbe:	6813      	ldr	r3, [r2, #0]
 800ccc0:	1c58      	adds	r0, r3, #1
 800ccc2:	6010      	str	r0, [r2, #0]
 800ccc4:	7019      	strb	r1, [r3, #0]
 800ccc6:	4608      	mov	r0, r1
 800ccc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cccc:	4770      	bx	lr

0800ccce <__sfputs_r>:
 800ccce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd0:	4606      	mov	r6, r0
 800ccd2:	460f      	mov	r7, r1
 800ccd4:	4614      	mov	r4, r2
 800ccd6:	18d5      	adds	r5, r2, r3
 800ccd8:	42ac      	cmp	r4, r5
 800ccda:	d101      	bne.n	800cce0 <__sfputs_r+0x12>
 800ccdc:	2000      	movs	r0, #0
 800ccde:	e007      	b.n	800ccf0 <__sfputs_r+0x22>
 800cce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cce4:	463a      	mov	r2, r7
 800cce6:	4630      	mov	r0, r6
 800cce8:	f7ff ffda 	bl	800cca0 <__sfputc_r>
 800ccec:	1c43      	adds	r3, r0, #1
 800ccee:	d1f3      	bne.n	800ccd8 <__sfputs_r+0xa>
 800ccf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ccf4 <_vfiprintf_r>:
 800ccf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf8:	460d      	mov	r5, r1
 800ccfa:	b09d      	sub	sp, #116	; 0x74
 800ccfc:	4614      	mov	r4, r2
 800ccfe:	4698      	mov	r8, r3
 800cd00:	4606      	mov	r6, r0
 800cd02:	b118      	cbz	r0, 800cd0c <_vfiprintf_r+0x18>
 800cd04:	6983      	ldr	r3, [r0, #24]
 800cd06:	b90b      	cbnz	r3, 800cd0c <_vfiprintf_r+0x18>
 800cd08:	f7ff fac6 	bl	800c298 <__sinit>
 800cd0c:	4b89      	ldr	r3, [pc, #548]	; (800cf34 <_vfiprintf_r+0x240>)
 800cd0e:	429d      	cmp	r5, r3
 800cd10:	d11b      	bne.n	800cd4a <_vfiprintf_r+0x56>
 800cd12:	6875      	ldr	r5, [r6, #4]
 800cd14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd16:	07d9      	lsls	r1, r3, #31
 800cd18:	d405      	bmi.n	800cd26 <_vfiprintf_r+0x32>
 800cd1a:	89ab      	ldrh	r3, [r5, #12]
 800cd1c:	059a      	lsls	r2, r3, #22
 800cd1e:	d402      	bmi.n	800cd26 <_vfiprintf_r+0x32>
 800cd20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd22:	f7ff fb7c 	bl	800c41e <__retarget_lock_acquire_recursive>
 800cd26:	89ab      	ldrh	r3, [r5, #12]
 800cd28:	071b      	lsls	r3, r3, #28
 800cd2a:	d501      	bpl.n	800cd30 <_vfiprintf_r+0x3c>
 800cd2c:	692b      	ldr	r3, [r5, #16]
 800cd2e:	b9eb      	cbnz	r3, 800cd6c <_vfiprintf_r+0x78>
 800cd30:	4629      	mov	r1, r5
 800cd32:	4630      	mov	r0, r6
 800cd34:	f000 fb4e 	bl	800d3d4 <__swsetup_r>
 800cd38:	b1c0      	cbz	r0, 800cd6c <_vfiprintf_r+0x78>
 800cd3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd3c:	07dc      	lsls	r4, r3, #31
 800cd3e:	d50e      	bpl.n	800cd5e <_vfiprintf_r+0x6a>
 800cd40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd44:	b01d      	add	sp, #116	; 0x74
 800cd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd4a:	4b7b      	ldr	r3, [pc, #492]	; (800cf38 <_vfiprintf_r+0x244>)
 800cd4c:	429d      	cmp	r5, r3
 800cd4e:	d101      	bne.n	800cd54 <_vfiprintf_r+0x60>
 800cd50:	68b5      	ldr	r5, [r6, #8]
 800cd52:	e7df      	b.n	800cd14 <_vfiprintf_r+0x20>
 800cd54:	4b79      	ldr	r3, [pc, #484]	; (800cf3c <_vfiprintf_r+0x248>)
 800cd56:	429d      	cmp	r5, r3
 800cd58:	bf08      	it	eq
 800cd5a:	68f5      	ldreq	r5, [r6, #12]
 800cd5c:	e7da      	b.n	800cd14 <_vfiprintf_r+0x20>
 800cd5e:	89ab      	ldrh	r3, [r5, #12]
 800cd60:	0598      	lsls	r0, r3, #22
 800cd62:	d4ed      	bmi.n	800cd40 <_vfiprintf_r+0x4c>
 800cd64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd66:	f7ff fb5b 	bl	800c420 <__retarget_lock_release_recursive>
 800cd6a:	e7e9      	b.n	800cd40 <_vfiprintf_r+0x4c>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd70:	2320      	movs	r3, #32
 800cd72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd76:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd7a:	2330      	movs	r3, #48	; 0x30
 800cd7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cf40 <_vfiprintf_r+0x24c>
 800cd80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd84:	f04f 0901 	mov.w	r9, #1
 800cd88:	4623      	mov	r3, r4
 800cd8a:	469a      	mov	sl, r3
 800cd8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd90:	b10a      	cbz	r2, 800cd96 <_vfiprintf_r+0xa2>
 800cd92:	2a25      	cmp	r2, #37	; 0x25
 800cd94:	d1f9      	bne.n	800cd8a <_vfiprintf_r+0x96>
 800cd96:	ebba 0b04 	subs.w	fp, sl, r4
 800cd9a:	d00b      	beq.n	800cdb4 <_vfiprintf_r+0xc0>
 800cd9c:	465b      	mov	r3, fp
 800cd9e:	4622      	mov	r2, r4
 800cda0:	4629      	mov	r1, r5
 800cda2:	4630      	mov	r0, r6
 800cda4:	f7ff ff93 	bl	800ccce <__sfputs_r>
 800cda8:	3001      	adds	r0, #1
 800cdaa:	f000 80aa 	beq.w	800cf02 <_vfiprintf_r+0x20e>
 800cdae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdb0:	445a      	add	r2, fp
 800cdb2:	9209      	str	r2, [sp, #36]	; 0x24
 800cdb4:	f89a 3000 	ldrb.w	r3, [sl]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f000 80a2 	beq.w	800cf02 <_vfiprintf_r+0x20e>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cdc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdc8:	f10a 0a01 	add.w	sl, sl, #1
 800cdcc:	9304      	str	r3, [sp, #16]
 800cdce:	9307      	str	r3, [sp, #28]
 800cdd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdd4:	931a      	str	r3, [sp, #104]	; 0x68
 800cdd6:	4654      	mov	r4, sl
 800cdd8:	2205      	movs	r2, #5
 800cdda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdde:	4858      	ldr	r0, [pc, #352]	; (800cf40 <_vfiprintf_r+0x24c>)
 800cde0:	f7f3 f9fe 	bl	80001e0 <memchr>
 800cde4:	9a04      	ldr	r2, [sp, #16]
 800cde6:	b9d8      	cbnz	r0, 800ce20 <_vfiprintf_r+0x12c>
 800cde8:	06d1      	lsls	r1, r2, #27
 800cdea:	bf44      	itt	mi
 800cdec:	2320      	movmi	r3, #32
 800cdee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdf2:	0713      	lsls	r3, r2, #28
 800cdf4:	bf44      	itt	mi
 800cdf6:	232b      	movmi	r3, #43	; 0x2b
 800cdf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ce00:	2b2a      	cmp	r3, #42	; 0x2a
 800ce02:	d015      	beq.n	800ce30 <_vfiprintf_r+0x13c>
 800ce04:	9a07      	ldr	r2, [sp, #28]
 800ce06:	4654      	mov	r4, sl
 800ce08:	2000      	movs	r0, #0
 800ce0a:	f04f 0c0a 	mov.w	ip, #10
 800ce0e:	4621      	mov	r1, r4
 800ce10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce14:	3b30      	subs	r3, #48	; 0x30
 800ce16:	2b09      	cmp	r3, #9
 800ce18:	d94e      	bls.n	800ceb8 <_vfiprintf_r+0x1c4>
 800ce1a:	b1b0      	cbz	r0, 800ce4a <_vfiprintf_r+0x156>
 800ce1c:	9207      	str	r2, [sp, #28]
 800ce1e:	e014      	b.n	800ce4a <_vfiprintf_r+0x156>
 800ce20:	eba0 0308 	sub.w	r3, r0, r8
 800ce24:	fa09 f303 	lsl.w	r3, r9, r3
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	9304      	str	r3, [sp, #16]
 800ce2c:	46a2      	mov	sl, r4
 800ce2e:	e7d2      	b.n	800cdd6 <_vfiprintf_r+0xe2>
 800ce30:	9b03      	ldr	r3, [sp, #12]
 800ce32:	1d19      	adds	r1, r3, #4
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	9103      	str	r1, [sp, #12]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	bfbb      	ittet	lt
 800ce3c:	425b      	neglt	r3, r3
 800ce3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ce42:	9307      	strge	r3, [sp, #28]
 800ce44:	9307      	strlt	r3, [sp, #28]
 800ce46:	bfb8      	it	lt
 800ce48:	9204      	strlt	r2, [sp, #16]
 800ce4a:	7823      	ldrb	r3, [r4, #0]
 800ce4c:	2b2e      	cmp	r3, #46	; 0x2e
 800ce4e:	d10c      	bne.n	800ce6a <_vfiprintf_r+0x176>
 800ce50:	7863      	ldrb	r3, [r4, #1]
 800ce52:	2b2a      	cmp	r3, #42	; 0x2a
 800ce54:	d135      	bne.n	800cec2 <_vfiprintf_r+0x1ce>
 800ce56:	9b03      	ldr	r3, [sp, #12]
 800ce58:	1d1a      	adds	r2, r3, #4
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	9203      	str	r2, [sp, #12]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	bfb8      	it	lt
 800ce62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ce66:	3402      	adds	r4, #2
 800ce68:	9305      	str	r3, [sp, #20]
 800ce6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cf50 <_vfiprintf_r+0x25c>
 800ce6e:	7821      	ldrb	r1, [r4, #0]
 800ce70:	2203      	movs	r2, #3
 800ce72:	4650      	mov	r0, sl
 800ce74:	f7f3 f9b4 	bl	80001e0 <memchr>
 800ce78:	b140      	cbz	r0, 800ce8c <_vfiprintf_r+0x198>
 800ce7a:	2340      	movs	r3, #64	; 0x40
 800ce7c:	eba0 000a 	sub.w	r0, r0, sl
 800ce80:	fa03 f000 	lsl.w	r0, r3, r0
 800ce84:	9b04      	ldr	r3, [sp, #16]
 800ce86:	4303      	orrs	r3, r0
 800ce88:	3401      	adds	r4, #1
 800ce8a:	9304      	str	r3, [sp, #16]
 800ce8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce90:	482c      	ldr	r0, [pc, #176]	; (800cf44 <_vfiprintf_r+0x250>)
 800ce92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce96:	2206      	movs	r2, #6
 800ce98:	f7f3 f9a2 	bl	80001e0 <memchr>
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	d03f      	beq.n	800cf20 <_vfiprintf_r+0x22c>
 800cea0:	4b29      	ldr	r3, [pc, #164]	; (800cf48 <_vfiprintf_r+0x254>)
 800cea2:	bb1b      	cbnz	r3, 800ceec <_vfiprintf_r+0x1f8>
 800cea4:	9b03      	ldr	r3, [sp, #12]
 800cea6:	3307      	adds	r3, #7
 800cea8:	f023 0307 	bic.w	r3, r3, #7
 800ceac:	3308      	adds	r3, #8
 800ceae:	9303      	str	r3, [sp, #12]
 800ceb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceb2:	443b      	add	r3, r7
 800ceb4:	9309      	str	r3, [sp, #36]	; 0x24
 800ceb6:	e767      	b.n	800cd88 <_vfiprintf_r+0x94>
 800ceb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cebc:	460c      	mov	r4, r1
 800cebe:	2001      	movs	r0, #1
 800cec0:	e7a5      	b.n	800ce0e <_vfiprintf_r+0x11a>
 800cec2:	2300      	movs	r3, #0
 800cec4:	3401      	adds	r4, #1
 800cec6:	9305      	str	r3, [sp, #20]
 800cec8:	4619      	mov	r1, r3
 800ceca:	f04f 0c0a 	mov.w	ip, #10
 800cece:	4620      	mov	r0, r4
 800ced0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ced4:	3a30      	subs	r2, #48	; 0x30
 800ced6:	2a09      	cmp	r2, #9
 800ced8:	d903      	bls.n	800cee2 <_vfiprintf_r+0x1ee>
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d0c5      	beq.n	800ce6a <_vfiprintf_r+0x176>
 800cede:	9105      	str	r1, [sp, #20]
 800cee0:	e7c3      	b.n	800ce6a <_vfiprintf_r+0x176>
 800cee2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cee6:	4604      	mov	r4, r0
 800cee8:	2301      	movs	r3, #1
 800ceea:	e7f0      	b.n	800cece <_vfiprintf_r+0x1da>
 800ceec:	ab03      	add	r3, sp, #12
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	462a      	mov	r2, r5
 800cef2:	4b16      	ldr	r3, [pc, #88]	; (800cf4c <_vfiprintf_r+0x258>)
 800cef4:	a904      	add	r1, sp, #16
 800cef6:	4630      	mov	r0, r6
 800cef8:	f3af 8000 	nop.w
 800cefc:	4607      	mov	r7, r0
 800cefe:	1c78      	adds	r0, r7, #1
 800cf00:	d1d6      	bne.n	800ceb0 <_vfiprintf_r+0x1bc>
 800cf02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf04:	07d9      	lsls	r1, r3, #31
 800cf06:	d405      	bmi.n	800cf14 <_vfiprintf_r+0x220>
 800cf08:	89ab      	ldrh	r3, [r5, #12]
 800cf0a:	059a      	lsls	r2, r3, #22
 800cf0c:	d402      	bmi.n	800cf14 <_vfiprintf_r+0x220>
 800cf0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf10:	f7ff fa86 	bl	800c420 <__retarget_lock_release_recursive>
 800cf14:	89ab      	ldrh	r3, [r5, #12]
 800cf16:	065b      	lsls	r3, r3, #25
 800cf18:	f53f af12 	bmi.w	800cd40 <_vfiprintf_r+0x4c>
 800cf1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf1e:	e711      	b.n	800cd44 <_vfiprintf_r+0x50>
 800cf20:	ab03      	add	r3, sp, #12
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	462a      	mov	r2, r5
 800cf26:	4b09      	ldr	r3, [pc, #36]	; (800cf4c <_vfiprintf_r+0x258>)
 800cf28:	a904      	add	r1, sp, #16
 800cf2a:	4630      	mov	r0, r6
 800cf2c:	f000 f880 	bl	800d030 <_printf_i>
 800cf30:	e7e4      	b.n	800cefc <_vfiprintf_r+0x208>
 800cf32:	bf00      	nop
 800cf34:	0800d7b8 	.word	0x0800d7b8
 800cf38:	0800d7d8 	.word	0x0800d7d8
 800cf3c:	0800d798 	.word	0x0800d798
 800cf40:	0800d7fc 	.word	0x0800d7fc
 800cf44:	0800d806 	.word	0x0800d806
 800cf48:	00000000 	.word	0x00000000
 800cf4c:	0800cccf 	.word	0x0800cccf
 800cf50:	0800d802 	.word	0x0800d802

0800cf54 <_printf_common>:
 800cf54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf58:	4616      	mov	r6, r2
 800cf5a:	4699      	mov	r9, r3
 800cf5c:	688a      	ldr	r2, [r1, #8]
 800cf5e:	690b      	ldr	r3, [r1, #16]
 800cf60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf64:	4293      	cmp	r3, r2
 800cf66:	bfb8      	it	lt
 800cf68:	4613      	movlt	r3, r2
 800cf6a:	6033      	str	r3, [r6, #0]
 800cf6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf70:	4607      	mov	r7, r0
 800cf72:	460c      	mov	r4, r1
 800cf74:	b10a      	cbz	r2, 800cf7a <_printf_common+0x26>
 800cf76:	3301      	adds	r3, #1
 800cf78:	6033      	str	r3, [r6, #0]
 800cf7a:	6823      	ldr	r3, [r4, #0]
 800cf7c:	0699      	lsls	r1, r3, #26
 800cf7e:	bf42      	ittt	mi
 800cf80:	6833      	ldrmi	r3, [r6, #0]
 800cf82:	3302      	addmi	r3, #2
 800cf84:	6033      	strmi	r3, [r6, #0]
 800cf86:	6825      	ldr	r5, [r4, #0]
 800cf88:	f015 0506 	ands.w	r5, r5, #6
 800cf8c:	d106      	bne.n	800cf9c <_printf_common+0x48>
 800cf8e:	f104 0a19 	add.w	sl, r4, #25
 800cf92:	68e3      	ldr	r3, [r4, #12]
 800cf94:	6832      	ldr	r2, [r6, #0]
 800cf96:	1a9b      	subs	r3, r3, r2
 800cf98:	42ab      	cmp	r3, r5
 800cf9a:	dc26      	bgt.n	800cfea <_printf_common+0x96>
 800cf9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cfa0:	1e13      	subs	r3, r2, #0
 800cfa2:	6822      	ldr	r2, [r4, #0]
 800cfa4:	bf18      	it	ne
 800cfa6:	2301      	movne	r3, #1
 800cfa8:	0692      	lsls	r2, r2, #26
 800cfaa:	d42b      	bmi.n	800d004 <_printf_common+0xb0>
 800cfac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cfb0:	4649      	mov	r1, r9
 800cfb2:	4638      	mov	r0, r7
 800cfb4:	47c0      	blx	r8
 800cfb6:	3001      	adds	r0, #1
 800cfb8:	d01e      	beq.n	800cff8 <_printf_common+0xa4>
 800cfba:	6823      	ldr	r3, [r4, #0]
 800cfbc:	68e5      	ldr	r5, [r4, #12]
 800cfbe:	6832      	ldr	r2, [r6, #0]
 800cfc0:	f003 0306 	and.w	r3, r3, #6
 800cfc4:	2b04      	cmp	r3, #4
 800cfc6:	bf08      	it	eq
 800cfc8:	1aad      	subeq	r5, r5, r2
 800cfca:	68a3      	ldr	r3, [r4, #8]
 800cfcc:	6922      	ldr	r2, [r4, #16]
 800cfce:	bf0c      	ite	eq
 800cfd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfd4:	2500      	movne	r5, #0
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	bfc4      	itt	gt
 800cfda:	1a9b      	subgt	r3, r3, r2
 800cfdc:	18ed      	addgt	r5, r5, r3
 800cfde:	2600      	movs	r6, #0
 800cfe0:	341a      	adds	r4, #26
 800cfe2:	42b5      	cmp	r5, r6
 800cfe4:	d11a      	bne.n	800d01c <_printf_common+0xc8>
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	e008      	b.n	800cffc <_printf_common+0xa8>
 800cfea:	2301      	movs	r3, #1
 800cfec:	4652      	mov	r2, sl
 800cfee:	4649      	mov	r1, r9
 800cff0:	4638      	mov	r0, r7
 800cff2:	47c0      	blx	r8
 800cff4:	3001      	adds	r0, #1
 800cff6:	d103      	bne.n	800d000 <_printf_common+0xac>
 800cff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d000:	3501      	adds	r5, #1
 800d002:	e7c6      	b.n	800cf92 <_printf_common+0x3e>
 800d004:	18e1      	adds	r1, r4, r3
 800d006:	1c5a      	adds	r2, r3, #1
 800d008:	2030      	movs	r0, #48	; 0x30
 800d00a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d00e:	4422      	add	r2, r4
 800d010:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d014:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d018:	3302      	adds	r3, #2
 800d01a:	e7c7      	b.n	800cfac <_printf_common+0x58>
 800d01c:	2301      	movs	r3, #1
 800d01e:	4622      	mov	r2, r4
 800d020:	4649      	mov	r1, r9
 800d022:	4638      	mov	r0, r7
 800d024:	47c0      	blx	r8
 800d026:	3001      	adds	r0, #1
 800d028:	d0e6      	beq.n	800cff8 <_printf_common+0xa4>
 800d02a:	3601      	adds	r6, #1
 800d02c:	e7d9      	b.n	800cfe2 <_printf_common+0x8e>
	...

0800d030 <_printf_i>:
 800d030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d034:	460c      	mov	r4, r1
 800d036:	4691      	mov	r9, r2
 800d038:	7e27      	ldrb	r7, [r4, #24]
 800d03a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d03c:	2f78      	cmp	r7, #120	; 0x78
 800d03e:	4680      	mov	r8, r0
 800d040:	469a      	mov	sl, r3
 800d042:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d046:	d807      	bhi.n	800d058 <_printf_i+0x28>
 800d048:	2f62      	cmp	r7, #98	; 0x62
 800d04a:	d80a      	bhi.n	800d062 <_printf_i+0x32>
 800d04c:	2f00      	cmp	r7, #0
 800d04e:	f000 80d8 	beq.w	800d202 <_printf_i+0x1d2>
 800d052:	2f58      	cmp	r7, #88	; 0x58
 800d054:	f000 80a3 	beq.w	800d19e <_printf_i+0x16e>
 800d058:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d05c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d060:	e03a      	b.n	800d0d8 <_printf_i+0xa8>
 800d062:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d066:	2b15      	cmp	r3, #21
 800d068:	d8f6      	bhi.n	800d058 <_printf_i+0x28>
 800d06a:	a001      	add	r0, pc, #4	; (adr r0, 800d070 <_printf_i+0x40>)
 800d06c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d070:	0800d0c9 	.word	0x0800d0c9
 800d074:	0800d0dd 	.word	0x0800d0dd
 800d078:	0800d059 	.word	0x0800d059
 800d07c:	0800d059 	.word	0x0800d059
 800d080:	0800d059 	.word	0x0800d059
 800d084:	0800d059 	.word	0x0800d059
 800d088:	0800d0dd 	.word	0x0800d0dd
 800d08c:	0800d059 	.word	0x0800d059
 800d090:	0800d059 	.word	0x0800d059
 800d094:	0800d059 	.word	0x0800d059
 800d098:	0800d059 	.word	0x0800d059
 800d09c:	0800d1e9 	.word	0x0800d1e9
 800d0a0:	0800d10d 	.word	0x0800d10d
 800d0a4:	0800d1cb 	.word	0x0800d1cb
 800d0a8:	0800d059 	.word	0x0800d059
 800d0ac:	0800d059 	.word	0x0800d059
 800d0b0:	0800d20b 	.word	0x0800d20b
 800d0b4:	0800d059 	.word	0x0800d059
 800d0b8:	0800d10d 	.word	0x0800d10d
 800d0bc:	0800d059 	.word	0x0800d059
 800d0c0:	0800d059 	.word	0x0800d059
 800d0c4:	0800d1d3 	.word	0x0800d1d3
 800d0c8:	680b      	ldr	r3, [r1, #0]
 800d0ca:	1d1a      	adds	r2, r3, #4
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	600a      	str	r2, [r1, #0]
 800d0d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d0d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d0d8:	2301      	movs	r3, #1
 800d0da:	e0a3      	b.n	800d224 <_printf_i+0x1f4>
 800d0dc:	6825      	ldr	r5, [r4, #0]
 800d0de:	6808      	ldr	r0, [r1, #0]
 800d0e0:	062e      	lsls	r6, r5, #24
 800d0e2:	f100 0304 	add.w	r3, r0, #4
 800d0e6:	d50a      	bpl.n	800d0fe <_printf_i+0xce>
 800d0e8:	6805      	ldr	r5, [r0, #0]
 800d0ea:	600b      	str	r3, [r1, #0]
 800d0ec:	2d00      	cmp	r5, #0
 800d0ee:	da03      	bge.n	800d0f8 <_printf_i+0xc8>
 800d0f0:	232d      	movs	r3, #45	; 0x2d
 800d0f2:	426d      	negs	r5, r5
 800d0f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0f8:	485e      	ldr	r0, [pc, #376]	; (800d274 <_printf_i+0x244>)
 800d0fa:	230a      	movs	r3, #10
 800d0fc:	e019      	b.n	800d132 <_printf_i+0x102>
 800d0fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d102:	6805      	ldr	r5, [r0, #0]
 800d104:	600b      	str	r3, [r1, #0]
 800d106:	bf18      	it	ne
 800d108:	b22d      	sxthne	r5, r5
 800d10a:	e7ef      	b.n	800d0ec <_printf_i+0xbc>
 800d10c:	680b      	ldr	r3, [r1, #0]
 800d10e:	6825      	ldr	r5, [r4, #0]
 800d110:	1d18      	adds	r0, r3, #4
 800d112:	6008      	str	r0, [r1, #0]
 800d114:	0628      	lsls	r0, r5, #24
 800d116:	d501      	bpl.n	800d11c <_printf_i+0xec>
 800d118:	681d      	ldr	r5, [r3, #0]
 800d11a:	e002      	b.n	800d122 <_printf_i+0xf2>
 800d11c:	0669      	lsls	r1, r5, #25
 800d11e:	d5fb      	bpl.n	800d118 <_printf_i+0xe8>
 800d120:	881d      	ldrh	r5, [r3, #0]
 800d122:	4854      	ldr	r0, [pc, #336]	; (800d274 <_printf_i+0x244>)
 800d124:	2f6f      	cmp	r7, #111	; 0x6f
 800d126:	bf0c      	ite	eq
 800d128:	2308      	moveq	r3, #8
 800d12a:	230a      	movne	r3, #10
 800d12c:	2100      	movs	r1, #0
 800d12e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d132:	6866      	ldr	r6, [r4, #4]
 800d134:	60a6      	str	r6, [r4, #8]
 800d136:	2e00      	cmp	r6, #0
 800d138:	bfa2      	ittt	ge
 800d13a:	6821      	ldrge	r1, [r4, #0]
 800d13c:	f021 0104 	bicge.w	r1, r1, #4
 800d140:	6021      	strge	r1, [r4, #0]
 800d142:	b90d      	cbnz	r5, 800d148 <_printf_i+0x118>
 800d144:	2e00      	cmp	r6, #0
 800d146:	d04d      	beq.n	800d1e4 <_printf_i+0x1b4>
 800d148:	4616      	mov	r6, r2
 800d14a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d14e:	fb03 5711 	mls	r7, r3, r1, r5
 800d152:	5dc7      	ldrb	r7, [r0, r7]
 800d154:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d158:	462f      	mov	r7, r5
 800d15a:	42bb      	cmp	r3, r7
 800d15c:	460d      	mov	r5, r1
 800d15e:	d9f4      	bls.n	800d14a <_printf_i+0x11a>
 800d160:	2b08      	cmp	r3, #8
 800d162:	d10b      	bne.n	800d17c <_printf_i+0x14c>
 800d164:	6823      	ldr	r3, [r4, #0]
 800d166:	07df      	lsls	r7, r3, #31
 800d168:	d508      	bpl.n	800d17c <_printf_i+0x14c>
 800d16a:	6923      	ldr	r3, [r4, #16]
 800d16c:	6861      	ldr	r1, [r4, #4]
 800d16e:	4299      	cmp	r1, r3
 800d170:	bfde      	ittt	le
 800d172:	2330      	movle	r3, #48	; 0x30
 800d174:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d178:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800d17c:	1b92      	subs	r2, r2, r6
 800d17e:	6122      	str	r2, [r4, #16]
 800d180:	f8cd a000 	str.w	sl, [sp]
 800d184:	464b      	mov	r3, r9
 800d186:	aa03      	add	r2, sp, #12
 800d188:	4621      	mov	r1, r4
 800d18a:	4640      	mov	r0, r8
 800d18c:	f7ff fee2 	bl	800cf54 <_printf_common>
 800d190:	3001      	adds	r0, #1
 800d192:	d14c      	bne.n	800d22e <_printf_i+0x1fe>
 800d194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d198:	b004      	add	sp, #16
 800d19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d19e:	4835      	ldr	r0, [pc, #212]	; (800d274 <_printf_i+0x244>)
 800d1a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d1a4:	6823      	ldr	r3, [r4, #0]
 800d1a6:	680e      	ldr	r6, [r1, #0]
 800d1a8:	061f      	lsls	r7, r3, #24
 800d1aa:	f856 5b04 	ldr.w	r5, [r6], #4
 800d1ae:	600e      	str	r6, [r1, #0]
 800d1b0:	d514      	bpl.n	800d1dc <_printf_i+0x1ac>
 800d1b2:	07d9      	lsls	r1, r3, #31
 800d1b4:	bf44      	itt	mi
 800d1b6:	f043 0320 	orrmi.w	r3, r3, #32
 800d1ba:	6023      	strmi	r3, [r4, #0]
 800d1bc:	b91d      	cbnz	r5, 800d1c6 <_printf_i+0x196>
 800d1be:	6823      	ldr	r3, [r4, #0]
 800d1c0:	f023 0320 	bic.w	r3, r3, #32
 800d1c4:	6023      	str	r3, [r4, #0]
 800d1c6:	2310      	movs	r3, #16
 800d1c8:	e7b0      	b.n	800d12c <_printf_i+0xfc>
 800d1ca:	6823      	ldr	r3, [r4, #0]
 800d1cc:	f043 0320 	orr.w	r3, r3, #32
 800d1d0:	6023      	str	r3, [r4, #0]
 800d1d2:	2378      	movs	r3, #120	; 0x78
 800d1d4:	4828      	ldr	r0, [pc, #160]	; (800d278 <_printf_i+0x248>)
 800d1d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d1da:	e7e3      	b.n	800d1a4 <_printf_i+0x174>
 800d1dc:	065e      	lsls	r6, r3, #25
 800d1de:	bf48      	it	mi
 800d1e0:	b2ad      	uxthmi	r5, r5
 800d1e2:	e7e6      	b.n	800d1b2 <_printf_i+0x182>
 800d1e4:	4616      	mov	r6, r2
 800d1e6:	e7bb      	b.n	800d160 <_printf_i+0x130>
 800d1e8:	680b      	ldr	r3, [r1, #0]
 800d1ea:	6826      	ldr	r6, [r4, #0]
 800d1ec:	6960      	ldr	r0, [r4, #20]
 800d1ee:	1d1d      	adds	r5, r3, #4
 800d1f0:	600d      	str	r5, [r1, #0]
 800d1f2:	0635      	lsls	r5, r6, #24
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	d501      	bpl.n	800d1fc <_printf_i+0x1cc>
 800d1f8:	6018      	str	r0, [r3, #0]
 800d1fa:	e002      	b.n	800d202 <_printf_i+0x1d2>
 800d1fc:	0671      	lsls	r1, r6, #25
 800d1fe:	d5fb      	bpl.n	800d1f8 <_printf_i+0x1c8>
 800d200:	8018      	strh	r0, [r3, #0]
 800d202:	2300      	movs	r3, #0
 800d204:	6123      	str	r3, [r4, #16]
 800d206:	4616      	mov	r6, r2
 800d208:	e7ba      	b.n	800d180 <_printf_i+0x150>
 800d20a:	680b      	ldr	r3, [r1, #0]
 800d20c:	1d1a      	adds	r2, r3, #4
 800d20e:	600a      	str	r2, [r1, #0]
 800d210:	681e      	ldr	r6, [r3, #0]
 800d212:	6862      	ldr	r2, [r4, #4]
 800d214:	2100      	movs	r1, #0
 800d216:	4630      	mov	r0, r6
 800d218:	f7f2 ffe2 	bl	80001e0 <memchr>
 800d21c:	b108      	cbz	r0, 800d222 <_printf_i+0x1f2>
 800d21e:	1b80      	subs	r0, r0, r6
 800d220:	6060      	str	r0, [r4, #4]
 800d222:	6863      	ldr	r3, [r4, #4]
 800d224:	6123      	str	r3, [r4, #16]
 800d226:	2300      	movs	r3, #0
 800d228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d22c:	e7a8      	b.n	800d180 <_printf_i+0x150>
 800d22e:	6923      	ldr	r3, [r4, #16]
 800d230:	4632      	mov	r2, r6
 800d232:	4649      	mov	r1, r9
 800d234:	4640      	mov	r0, r8
 800d236:	47d0      	blx	sl
 800d238:	3001      	adds	r0, #1
 800d23a:	d0ab      	beq.n	800d194 <_printf_i+0x164>
 800d23c:	6823      	ldr	r3, [r4, #0]
 800d23e:	079b      	lsls	r3, r3, #30
 800d240:	d413      	bmi.n	800d26a <_printf_i+0x23a>
 800d242:	68e0      	ldr	r0, [r4, #12]
 800d244:	9b03      	ldr	r3, [sp, #12]
 800d246:	4298      	cmp	r0, r3
 800d248:	bfb8      	it	lt
 800d24a:	4618      	movlt	r0, r3
 800d24c:	e7a4      	b.n	800d198 <_printf_i+0x168>
 800d24e:	2301      	movs	r3, #1
 800d250:	4632      	mov	r2, r6
 800d252:	4649      	mov	r1, r9
 800d254:	4640      	mov	r0, r8
 800d256:	47d0      	blx	sl
 800d258:	3001      	adds	r0, #1
 800d25a:	d09b      	beq.n	800d194 <_printf_i+0x164>
 800d25c:	3501      	adds	r5, #1
 800d25e:	68e3      	ldr	r3, [r4, #12]
 800d260:	9903      	ldr	r1, [sp, #12]
 800d262:	1a5b      	subs	r3, r3, r1
 800d264:	42ab      	cmp	r3, r5
 800d266:	dcf2      	bgt.n	800d24e <_printf_i+0x21e>
 800d268:	e7eb      	b.n	800d242 <_printf_i+0x212>
 800d26a:	2500      	movs	r5, #0
 800d26c:	f104 0619 	add.w	r6, r4, #25
 800d270:	e7f5      	b.n	800d25e <_printf_i+0x22e>
 800d272:	bf00      	nop
 800d274:	0800d80d 	.word	0x0800d80d
 800d278:	0800d81e 	.word	0x0800d81e

0800d27c <_putc_r>:
 800d27c:	b570      	push	{r4, r5, r6, lr}
 800d27e:	460d      	mov	r5, r1
 800d280:	4614      	mov	r4, r2
 800d282:	4606      	mov	r6, r0
 800d284:	b118      	cbz	r0, 800d28e <_putc_r+0x12>
 800d286:	6983      	ldr	r3, [r0, #24]
 800d288:	b90b      	cbnz	r3, 800d28e <_putc_r+0x12>
 800d28a:	f7ff f805 	bl	800c298 <__sinit>
 800d28e:	4b1c      	ldr	r3, [pc, #112]	; (800d300 <_putc_r+0x84>)
 800d290:	429c      	cmp	r4, r3
 800d292:	d124      	bne.n	800d2de <_putc_r+0x62>
 800d294:	6874      	ldr	r4, [r6, #4]
 800d296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d298:	07d8      	lsls	r0, r3, #31
 800d29a:	d405      	bmi.n	800d2a8 <_putc_r+0x2c>
 800d29c:	89a3      	ldrh	r3, [r4, #12]
 800d29e:	0599      	lsls	r1, r3, #22
 800d2a0:	d402      	bmi.n	800d2a8 <_putc_r+0x2c>
 800d2a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2a4:	f7ff f8bb 	bl	800c41e <__retarget_lock_acquire_recursive>
 800d2a8:	68a3      	ldr	r3, [r4, #8]
 800d2aa:	3b01      	subs	r3, #1
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	60a3      	str	r3, [r4, #8]
 800d2b0:	da05      	bge.n	800d2be <_putc_r+0x42>
 800d2b2:	69a2      	ldr	r2, [r4, #24]
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	db1c      	blt.n	800d2f2 <_putc_r+0x76>
 800d2b8:	b2eb      	uxtb	r3, r5
 800d2ba:	2b0a      	cmp	r3, #10
 800d2bc:	d019      	beq.n	800d2f2 <_putc_r+0x76>
 800d2be:	6823      	ldr	r3, [r4, #0]
 800d2c0:	1c5a      	adds	r2, r3, #1
 800d2c2:	6022      	str	r2, [r4, #0]
 800d2c4:	701d      	strb	r5, [r3, #0]
 800d2c6:	b2ed      	uxtb	r5, r5
 800d2c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2ca:	07da      	lsls	r2, r3, #31
 800d2cc:	d405      	bmi.n	800d2da <_putc_r+0x5e>
 800d2ce:	89a3      	ldrh	r3, [r4, #12]
 800d2d0:	059b      	lsls	r3, r3, #22
 800d2d2:	d402      	bmi.n	800d2da <_putc_r+0x5e>
 800d2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2d6:	f7ff f8a3 	bl	800c420 <__retarget_lock_release_recursive>
 800d2da:	4628      	mov	r0, r5
 800d2dc:	bd70      	pop	{r4, r5, r6, pc}
 800d2de:	4b09      	ldr	r3, [pc, #36]	; (800d304 <_putc_r+0x88>)
 800d2e0:	429c      	cmp	r4, r3
 800d2e2:	d101      	bne.n	800d2e8 <_putc_r+0x6c>
 800d2e4:	68b4      	ldr	r4, [r6, #8]
 800d2e6:	e7d6      	b.n	800d296 <_putc_r+0x1a>
 800d2e8:	4b07      	ldr	r3, [pc, #28]	; (800d308 <_putc_r+0x8c>)
 800d2ea:	429c      	cmp	r4, r3
 800d2ec:	bf08      	it	eq
 800d2ee:	68f4      	ldreq	r4, [r6, #12]
 800d2f0:	e7d1      	b.n	800d296 <_putc_r+0x1a>
 800d2f2:	4629      	mov	r1, r5
 800d2f4:	4622      	mov	r2, r4
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f000 f81a 	bl	800d330 <__swbuf_r>
 800d2fc:	4605      	mov	r5, r0
 800d2fe:	e7e3      	b.n	800d2c8 <_putc_r+0x4c>
 800d300:	0800d7b8 	.word	0x0800d7b8
 800d304:	0800d7d8 	.word	0x0800d7d8
 800d308:	0800d798 	.word	0x0800d798

0800d30c <_read_r>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	4d07      	ldr	r5, [pc, #28]	; (800d32c <_read_r+0x20>)
 800d310:	4604      	mov	r4, r0
 800d312:	4608      	mov	r0, r1
 800d314:	4611      	mov	r1, r2
 800d316:	2200      	movs	r2, #0
 800d318:	602a      	str	r2, [r5, #0]
 800d31a:	461a      	mov	r2, r3
 800d31c:	f7f3 fb2c 	bl	8000978 <_read>
 800d320:	1c43      	adds	r3, r0, #1
 800d322:	d102      	bne.n	800d32a <_read_r+0x1e>
 800d324:	682b      	ldr	r3, [r5, #0]
 800d326:	b103      	cbz	r3, 800d32a <_read_r+0x1e>
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	bd38      	pop	{r3, r4, r5, pc}
 800d32c:	2000dd98 	.word	0x2000dd98

0800d330 <__swbuf_r>:
 800d330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d332:	460e      	mov	r6, r1
 800d334:	4614      	mov	r4, r2
 800d336:	4605      	mov	r5, r0
 800d338:	b118      	cbz	r0, 800d342 <__swbuf_r+0x12>
 800d33a:	6983      	ldr	r3, [r0, #24]
 800d33c:	b90b      	cbnz	r3, 800d342 <__swbuf_r+0x12>
 800d33e:	f7fe ffab 	bl	800c298 <__sinit>
 800d342:	4b21      	ldr	r3, [pc, #132]	; (800d3c8 <__swbuf_r+0x98>)
 800d344:	429c      	cmp	r4, r3
 800d346:	d12b      	bne.n	800d3a0 <__swbuf_r+0x70>
 800d348:	686c      	ldr	r4, [r5, #4]
 800d34a:	69a3      	ldr	r3, [r4, #24]
 800d34c:	60a3      	str	r3, [r4, #8]
 800d34e:	89a3      	ldrh	r3, [r4, #12]
 800d350:	071a      	lsls	r2, r3, #28
 800d352:	d52f      	bpl.n	800d3b4 <__swbuf_r+0x84>
 800d354:	6923      	ldr	r3, [r4, #16]
 800d356:	b36b      	cbz	r3, 800d3b4 <__swbuf_r+0x84>
 800d358:	6923      	ldr	r3, [r4, #16]
 800d35a:	6820      	ldr	r0, [r4, #0]
 800d35c:	1ac0      	subs	r0, r0, r3
 800d35e:	6963      	ldr	r3, [r4, #20]
 800d360:	b2f6      	uxtb	r6, r6
 800d362:	4283      	cmp	r3, r0
 800d364:	4637      	mov	r7, r6
 800d366:	dc04      	bgt.n	800d372 <__swbuf_r+0x42>
 800d368:	4621      	mov	r1, r4
 800d36a:	4628      	mov	r0, r5
 800d36c:	f7ff fa92 	bl	800c894 <_fflush_r>
 800d370:	bb30      	cbnz	r0, 800d3c0 <__swbuf_r+0x90>
 800d372:	68a3      	ldr	r3, [r4, #8]
 800d374:	3b01      	subs	r3, #1
 800d376:	60a3      	str	r3, [r4, #8]
 800d378:	6823      	ldr	r3, [r4, #0]
 800d37a:	1c5a      	adds	r2, r3, #1
 800d37c:	6022      	str	r2, [r4, #0]
 800d37e:	701e      	strb	r6, [r3, #0]
 800d380:	6963      	ldr	r3, [r4, #20]
 800d382:	3001      	adds	r0, #1
 800d384:	4283      	cmp	r3, r0
 800d386:	d004      	beq.n	800d392 <__swbuf_r+0x62>
 800d388:	89a3      	ldrh	r3, [r4, #12]
 800d38a:	07db      	lsls	r3, r3, #31
 800d38c:	d506      	bpl.n	800d39c <__swbuf_r+0x6c>
 800d38e:	2e0a      	cmp	r6, #10
 800d390:	d104      	bne.n	800d39c <__swbuf_r+0x6c>
 800d392:	4621      	mov	r1, r4
 800d394:	4628      	mov	r0, r5
 800d396:	f7ff fa7d 	bl	800c894 <_fflush_r>
 800d39a:	b988      	cbnz	r0, 800d3c0 <__swbuf_r+0x90>
 800d39c:	4638      	mov	r0, r7
 800d39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3a0:	4b0a      	ldr	r3, [pc, #40]	; (800d3cc <__swbuf_r+0x9c>)
 800d3a2:	429c      	cmp	r4, r3
 800d3a4:	d101      	bne.n	800d3aa <__swbuf_r+0x7a>
 800d3a6:	68ac      	ldr	r4, [r5, #8]
 800d3a8:	e7cf      	b.n	800d34a <__swbuf_r+0x1a>
 800d3aa:	4b09      	ldr	r3, [pc, #36]	; (800d3d0 <__swbuf_r+0xa0>)
 800d3ac:	429c      	cmp	r4, r3
 800d3ae:	bf08      	it	eq
 800d3b0:	68ec      	ldreq	r4, [r5, #12]
 800d3b2:	e7ca      	b.n	800d34a <__swbuf_r+0x1a>
 800d3b4:	4621      	mov	r1, r4
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	f000 f80c 	bl	800d3d4 <__swsetup_r>
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	d0cb      	beq.n	800d358 <__swbuf_r+0x28>
 800d3c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d3c4:	e7ea      	b.n	800d39c <__swbuf_r+0x6c>
 800d3c6:	bf00      	nop
 800d3c8:	0800d7b8 	.word	0x0800d7b8
 800d3cc:	0800d7d8 	.word	0x0800d7d8
 800d3d0:	0800d798 	.word	0x0800d798

0800d3d4 <__swsetup_r>:
 800d3d4:	4b32      	ldr	r3, [pc, #200]	; (800d4a0 <__swsetup_r+0xcc>)
 800d3d6:	b570      	push	{r4, r5, r6, lr}
 800d3d8:	681d      	ldr	r5, [r3, #0]
 800d3da:	4606      	mov	r6, r0
 800d3dc:	460c      	mov	r4, r1
 800d3de:	b125      	cbz	r5, 800d3ea <__swsetup_r+0x16>
 800d3e0:	69ab      	ldr	r3, [r5, #24]
 800d3e2:	b913      	cbnz	r3, 800d3ea <__swsetup_r+0x16>
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	f7fe ff57 	bl	800c298 <__sinit>
 800d3ea:	4b2e      	ldr	r3, [pc, #184]	; (800d4a4 <__swsetup_r+0xd0>)
 800d3ec:	429c      	cmp	r4, r3
 800d3ee:	d10f      	bne.n	800d410 <__swsetup_r+0x3c>
 800d3f0:	686c      	ldr	r4, [r5, #4]
 800d3f2:	89a3      	ldrh	r3, [r4, #12]
 800d3f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3f8:	0719      	lsls	r1, r3, #28
 800d3fa:	d42c      	bmi.n	800d456 <__swsetup_r+0x82>
 800d3fc:	06dd      	lsls	r5, r3, #27
 800d3fe:	d411      	bmi.n	800d424 <__swsetup_r+0x50>
 800d400:	2309      	movs	r3, #9
 800d402:	6033      	str	r3, [r6, #0]
 800d404:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d408:	81a3      	strh	r3, [r4, #12]
 800d40a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d40e:	e03e      	b.n	800d48e <__swsetup_r+0xba>
 800d410:	4b25      	ldr	r3, [pc, #148]	; (800d4a8 <__swsetup_r+0xd4>)
 800d412:	429c      	cmp	r4, r3
 800d414:	d101      	bne.n	800d41a <__swsetup_r+0x46>
 800d416:	68ac      	ldr	r4, [r5, #8]
 800d418:	e7eb      	b.n	800d3f2 <__swsetup_r+0x1e>
 800d41a:	4b24      	ldr	r3, [pc, #144]	; (800d4ac <__swsetup_r+0xd8>)
 800d41c:	429c      	cmp	r4, r3
 800d41e:	bf08      	it	eq
 800d420:	68ec      	ldreq	r4, [r5, #12]
 800d422:	e7e6      	b.n	800d3f2 <__swsetup_r+0x1e>
 800d424:	0758      	lsls	r0, r3, #29
 800d426:	d512      	bpl.n	800d44e <__swsetup_r+0x7a>
 800d428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d42a:	b141      	cbz	r1, 800d43e <__swsetup_r+0x6a>
 800d42c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d430:	4299      	cmp	r1, r3
 800d432:	d002      	beq.n	800d43a <__swsetup_r+0x66>
 800d434:	4630      	mov	r0, r6
 800d436:	f7ff fa87 	bl	800c948 <_free_r>
 800d43a:	2300      	movs	r3, #0
 800d43c:	6363      	str	r3, [r4, #52]	; 0x34
 800d43e:	89a3      	ldrh	r3, [r4, #12]
 800d440:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d444:	81a3      	strh	r3, [r4, #12]
 800d446:	2300      	movs	r3, #0
 800d448:	6063      	str	r3, [r4, #4]
 800d44a:	6923      	ldr	r3, [r4, #16]
 800d44c:	6023      	str	r3, [r4, #0]
 800d44e:	89a3      	ldrh	r3, [r4, #12]
 800d450:	f043 0308 	orr.w	r3, r3, #8
 800d454:	81a3      	strh	r3, [r4, #12]
 800d456:	6923      	ldr	r3, [r4, #16]
 800d458:	b94b      	cbnz	r3, 800d46e <__swsetup_r+0x9a>
 800d45a:	89a3      	ldrh	r3, [r4, #12]
 800d45c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d464:	d003      	beq.n	800d46e <__swsetup_r+0x9a>
 800d466:	4621      	mov	r1, r4
 800d468:	4630      	mov	r0, r6
 800d46a:	f000 f845 	bl	800d4f8 <__smakebuf_r>
 800d46e:	89a0      	ldrh	r0, [r4, #12]
 800d470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d474:	f010 0301 	ands.w	r3, r0, #1
 800d478:	d00a      	beq.n	800d490 <__swsetup_r+0xbc>
 800d47a:	2300      	movs	r3, #0
 800d47c:	60a3      	str	r3, [r4, #8]
 800d47e:	6963      	ldr	r3, [r4, #20]
 800d480:	425b      	negs	r3, r3
 800d482:	61a3      	str	r3, [r4, #24]
 800d484:	6923      	ldr	r3, [r4, #16]
 800d486:	b943      	cbnz	r3, 800d49a <__swsetup_r+0xc6>
 800d488:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d48c:	d1ba      	bne.n	800d404 <__swsetup_r+0x30>
 800d48e:	bd70      	pop	{r4, r5, r6, pc}
 800d490:	0781      	lsls	r1, r0, #30
 800d492:	bf58      	it	pl
 800d494:	6963      	ldrpl	r3, [r4, #20]
 800d496:	60a3      	str	r3, [r4, #8]
 800d498:	e7f4      	b.n	800d484 <__swsetup_r+0xb0>
 800d49a:	2000      	movs	r0, #0
 800d49c:	e7f7      	b.n	800d48e <__swsetup_r+0xba>
 800d49e:	bf00      	nop
 800d4a0:	200002ac 	.word	0x200002ac
 800d4a4:	0800d7b8 	.word	0x0800d7b8
 800d4a8:	0800d7d8 	.word	0x0800d7d8
 800d4ac:	0800d798 	.word	0x0800d798

0800d4b0 <__swhatbuf_r>:
 800d4b0:	b570      	push	{r4, r5, r6, lr}
 800d4b2:	460e      	mov	r6, r1
 800d4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4b8:	2900      	cmp	r1, #0
 800d4ba:	b096      	sub	sp, #88	; 0x58
 800d4bc:	4614      	mov	r4, r2
 800d4be:	461d      	mov	r5, r3
 800d4c0:	da07      	bge.n	800d4d2 <__swhatbuf_r+0x22>
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	602b      	str	r3, [r5, #0]
 800d4c6:	89b3      	ldrh	r3, [r6, #12]
 800d4c8:	061a      	lsls	r2, r3, #24
 800d4ca:	d410      	bmi.n	800d4ee <__swhatbuf_r+0x3e>
 800d4cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4d0:	e00e      	b.n	800d4f0 <__swhatbuf_r+0x40>
 800d4d2:	466a      	mov	r2, sp
 800d4d4:	f000 f890 	bl	800d5f8 <_fstat_r>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	dbf2      	blt.n	800d4c2 <__swhatbuf_r+0x12>
 800d4dc:	9a01      	ldr	r2, [sp, #4]
 800d4de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d4e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d4e6:	425a      	negs	r2, r3
 800d4e8:	415a      	adcs	r2, r3
 800d4ea:	602a      	str	r2, [r5, #0]
 800d4ec:	e7ee      	b.n	800d4cc <__swhatbuf_r+0x1c>
 800d4ee:	2340      	movs	r3, #64	; 0x40
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	6023      	str	r3, [r4, #0]
 800d4f4:	b016      	add	sp, #88	; 0x58
 800d4f6:	bd70      	pop	{r4, r5, r6, pc}

0800d4f8 <__smakebuf_r>:
 800d4f8:	898b      	ldrh	r3, [r1, #12]
 800d4fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4fc:	079d      	lsls	r5, r3, #30
 800d4fe:	4606      	mov	r6, r0
 800d500:	460c      	mov	r4, r1
 800d502:	d507      	bpl.n	800d514 <__smakebuf_r+0x1c>
 800d504:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d508:	6023      	str	r3, [r4, #0]
 800d50a:	6123      	str	r3, [r4, #16]
 800d50c:	2301      	movs	r3, #1
 800d50e:	6163      	str	r3, [r4, #20]
 800d510:	b002      	add	sp, #8
 800d512:	bd70      	pop	{r4, r5, r6, pc}
 800d514:	ab01      	add	r3, sp, #4
 800d516:	466a      	mov	r2, sp
 800d518:	f7ff ffca 	bl	800d4b0 <__swhatbuf_r>
 800d51c:	9900      	ldr	r1, [sp, #0]
 800d51e:	4605      	mov	r5, r0
 800d520:	4630      	mov	r0, r6
 800d522:	f7fe ff95 	bl	800c450 <_malloc_r>
 800d526:	b948      	cbnz	r0, 800d53c <__smakebuf_r+0x44>
 800d528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d52c:	059a      	lsls	r2, r3, #22
 800d52e:	d4ef      	bmi.n	800d510 <__smakebuf_r+0x18>
 800d530:	f023 0303 	bic.w	r3, r3, #3
 800d534:	f043 0302 	orr.w	r3, r3, #2
 800d538:	81a3      	strh	r3, [r4, #12]
 800d53a:	e7e3      	b.n	800d504 <__smakebuf_r+0xc>
 800d53c:	4b0d      	ldr	r3, [pc, #52]	; (800d574 <__smakebuf_r+0x7c>)
 800d53e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d540:	89a3      	ldrh	r3, [r4, #12]
 800d542:	6020      	str	r0, [r4, #0]
 800d544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d548:	81a3      	strh	r3, [r4, #12]
 800d54a:	9b00      	ldr	r3, [sp, #0]
 800d54c:	6163      	str	r3, [r4, #20]
 800d54e:	9b01      	ldr	r3, [sp, #4]
 800d550:	6120      	str	r0, [r4, #16]
 800d552:	b15b      	cbz	r3, 800d56c <__smakebuf_r+0x74>
 800d554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d558:	4630      	mov	r0, r6
 800d55a:	f000 f85f 	bl	800d61c <_isatty_r>
 800d55e:	b128      	cbz	r0, 800d56c <__smakebuf_r+0x74>
 800d560:	89a3      	ldrh	r3, [r4, #12]
 800d562:	f023 0303 	bic.w	r3, r3, #3
 800d566:	f043 0301 	orr.w	r3, r3, #1
 800d56a:	81a3      	strh	r3, [r4, #12]
 800d56c:	89a0      	ldrh	r0, [r4, #12]
 800d56e:	4305      	orrs	r5, r0
 800d570:	81a5      	strh	r5, [r4, #12]
 800d572:	e7cd      	b.n	800d510 <__smakebuf_r+0x18>
 800d574:	0800c231 	.word	0x0800c231

0800d578 <memmove>:
 800d578:	4288      	cmp	r0, r1
 800d57a:	b510      	push	{r4, lr}
 800d57c:	eb01 0402 	add.w	r4, r1, r2
 800d580:	d902      	bls.n	800d588 <memmove+0x10>
 800d582:	4284      	cmp	r4, r0
 800d584:	4623      	mov	r3, r4
 800d586:	d807      	bhi.n	800d598 <memmove+0x20>
 800d588:	1e43      	subs	r3, r0, #1
 800d58a:	42a1      	cmp	r1, r4
 800d58c:	d008      	beq.n	800d5a0 <memmove+0x28>
 800d58e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d592:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d596:	e7f8      	b.n	800d58a <memmove+0x12>
 800d598:	4402      	add	r2, r0
 800d59a:	4601      	mov	r1, r0
 800d59c:	428a      	cmp	r2, r1
 800d59e:	d100      	bne.n	800d5a2 <memmove+0x2a>
 800d5a0:	bd10      	pop	{r4, pc}
 800d5a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5aa:	e7f7      	b.n	800d59c <memmove+0x24>

0800d5ac <_realloc_r>:
 800d5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ae:	4607      	mov	r7, r0
 800d5b0:	4614      	mov	r4, r2
 800d5b2:	460e      	mov	r6, r1
 800d5b4:	b921      	cbnz	r1, 800d5c0 <_realloc_r+0x14>
 800d5b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d5ba:	4611      	mov	r1, r2
 800d5bc:	f7fe bf48 	b.w	800c450 <_malloc_r>
 800d5c0:	b922      	cbnz	r2, 800d5cc <_realloc_r+0x20>
 800d5c2:	f7ff f9c1 	bl	800c948 <_free_r>
 800d5c6:	4625      	mov	r5, r4
 800d5c8:	4628      	mov	r0, r5
 800d5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5cc:	f000 f836 	bl	800d63c <_malloc_usable_size_r>
 800d5d0:	42a0      	cmp	r0, r4
 800d5d2:	d20f      	bcs.n	800d5f4 <_realloc_r+0x48>
 800d5d4:	4621      	mov	r1, r4
 800d5d6:	4638      	mov	r0, r7
 800d5d8:	f7fe ff3a 	bl	800c450 <_malloc_r>
 800d5dc:	4605      	mov	r5, r0
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	d0f2      	beq.n	800d5c8 <_realloc_r+0x1c>
 800d5e2:	4631      	mov	r1, r6
 800d5e4:	4622      	mov	r2, r4
 800d5e6:	f7fe ff1c 	bl	800c422 <memcpy>
 800d5ea:	4631      	mov	r1, r6
 800d5ec:	4638      	mov	r0, r7
 800d5ee:	f7ff f9ab 	bl	800c948 <_free_r>
 800d5f2:	e7e9      	b.n	800d5c8 <_realloc_r+0x1c>
 800d5f4:	4635      	mov	r5, r6
 800d5f6:	e7e7      	b.n	800d5c8 <_realloc_r+0x1c>

0800d5f8 <_fstat_r>:
 800d5f8:	b538      	push	{r3, r4, r5, lr}
 800d5fa:	4d07      	ldr	r5, [pc, #28]	; (800d618 <_fstat_r+0x20>)
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	4604      	mov	r4, r0
 800d600:	4608      	mov	r0, r1
 800d602:	4611      	mov	r1, r2
 800d604:	602b      	str	r3, [r5, #0]
 800d606:	f7f3 f9e0 	bl	80009ca <_fstat>
 800d60a:	1c43      	adds	r3, r0, #1
 800d60c:	d102      	bne.n	800d614 <_fstat_r+0x1c>
 800d60e:	682b      	ldr	r3, [r5, #0]
 800d610:	b103      	cbz	r3, 800d614 <_fstat_r+0x1c>
 800d612:	6023      	str	r3, [r4, #0]
 800d614:	bd38      	pop	{r3, r4, r5, pc}
 800d616:	bf00      	nop
 800d618:	2000dd98 	.word	0x2000dd98

0800d61c <_isatty_r>:
 800d61c:	b538      	push	{r3, r4, r5, lr}
 800d61e:	4d06      	ldr	r5, [pc, #24]	; (800d638 <_isatty_r+0x1c>)
 800d620:	2300      	movs	r3, #0
 800d622:	4604      	mov	r4, r0
 800d624:	4608      	mov	r0, r1
 800d626:	602b      	str	r3, [r5, #0]
 800d628:	f7f3 f9df 	bl	80009ea <_isatty>
 800d62c:	1c43      	adds	r3, r0, #1
 800d62e:	d102      	bne.n	800d636 <_isatty_r+0x1a>
 800d630:	682b      	ldr	r3, [r5, #0]
 800d632:	b103      	cbz	r3, 800d636 <_isatty_r+0x1a>
 800d634:	6023      	str	r3, [r4, #0]
 800d636:	bd38      	pop	{r3, r4, r5, pc}
 800d638:	2000dd98 	.word	0x2000dd98

0800d63c <_malloc_usable_size_r>:
 800d63c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d640:	1f18      	subs	r0, r3, #4
 800d642:	2b00      	cmp	r3, #0
 800d644:	bfbc      	itt	lt
 800d646:	580b      	ldrlt	r3, [r1, r0]
 800d648:	18c0      	addlt	r0, r0, r3
 800d64a:	4770      	bx	lr

0800d64c <_init>:
 800d64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64e:	bf00      	nop
 800d650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d652:	bc08      	pop	{r3}
 800d654:	469e      	mov	lr, r3
 800d656:	4770      	bx	lr

0800d658 <_fini>:
 800d658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65a:	bf00      	nop
 800d65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d65e:	bc08      	pop	{r3}
 800d660:	469e      	mov	lr, r3
 800d662:	4770      	bx	lr
