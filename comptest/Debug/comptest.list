
comptest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007614  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080077b4  080077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007858  08007858  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  08007858  08007858  00017858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007860  08007860  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007860  08007860  00017860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007864  08007864  00017864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08007868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d84  20000200  08007a68  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f84  08007a68  00020f84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016850  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000350d  00000000  00000000  00036a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00039f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  0003ab88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ee9  00000000  00000000  0003b608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fbe  00000000  00000000  000544f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f65  00000000  00000000  000654af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed414  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000328c  00000000  00000000  000ed468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800779c 	.word	0x0800779c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800779c 	.word	0x0800779c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	4b20      	ldr	r3, [pc, #128]	; (8000614 <MX_GPIO_Init+0x9c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a1f      	ldr	r2, [pc, #124]	; (8000614 <MX_GPIO_Init+0x9c>)
 8000598:	f043 0304 	orr.w	r3, r3, #4
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <MX_GPIO_Init+0x9c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0304 	and.w	r3, r3, #4
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b19      	ldr	r3, [pc, #100]	; (8000614 <MX_GPIO_Init+0x9c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a18      	ldr	r2, [pc, #96]	; (8000614 <MX_GPIO_Init+0x9c>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <MX_GPIO_Init+0x9c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_GPIO_Init+0x9c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a11      	ldr	r2, [pc, #68]	; (8000614 <MX_GPIO_Init+0x9c>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_GPIO_Init+0x9c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e8:	480b      	ldr	r0, [pc, #44]	; (8000618 <MX_GPIO_Init+0xa0>)
 80005ea:	f000 fd25 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005f4:	2311      	movs	r3, #17
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	4619      	mov	r1, r3
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_GPIO_Init+0xa0>)
 8000608:	f000 fb92 	bl	8000d30 <HAL_GPIO_Init>

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40020800 	.word	0x40020800

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 f9dd 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f81d 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f7ff ffa5 	bl	8000578 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 800062e:	f000 f92b 	bl	8000888 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000632:	f003 fe51 	bl	80042d8 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0, last_blink = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]

  while (1)
  {

	  now = HAL_GetTick();
 800063e:	f000 fa35 	bl	8000aac <HAL_GetTick>
 8000642:	6038      	str	r0, [r7, #0]

	  if (now - last_blink >= 500) {
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800064e:	d3f6      	bcc.n	800063e <main+0x22>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000650:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <main+0x44>)
 8000656:	f000 fd08 	bl	800106a <HAL_GPIO_TogglePin>

		  last_blink = now;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	607b      	str	r3, [r7, #4]
	  now = HAL_GetTick();
 800065e:	e7ee      	b.n	800063e <main+0x22>
 8000660:	40020800 	.word	0x40020800

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f006 fc56 	bl	8006f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <SystemClock_Config+0xc8>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a26      	ldr	r2, [pc, #152]	; (800072c <SystemClock_Config+0xc8>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <SystemClock_Config+0xc8>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <SystemClock_Config+0xcc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a20      	ldr	r2, [pc, #128]	; (8000730 <SystemClock_Config+0xcc>)
 80006ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <SystemClock_Config+0xcc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006d4:	2319      	movs	r3, #25
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006d8:	23c0      	movs	r3, #192	; 0xc0
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fe5b 	bl	80023a4 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f4:	f000 f81e 	bl	8000734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2103      	movs	r1, #3
 8000714:	4618      	mov	r0, r3
 8000716:	f002 f8bd 	bl	8002894 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000720:	f000 f808 	bl	8000734 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	; 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <HAL_MspInit+0x4c>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <HAL_MspInit+0x4c>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6453      	str	r3, [r2, #68]	; 0x44
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <HAL_MspInit+0x4c>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_MspInit+0x4c>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <HAL_MspInit+0x4c>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	6413      	str	r3, [r2, #64]	; 0x40
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_MspInit+0x4c>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <NMI_Handler+0x4>

08000796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <MemManage_Handler+0x4>

080007a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <UsageFault_Handler+0x4>

080007ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007dc:	f000 f952 	bl	8000a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007e8:	4802      	ldr	r0, [pc, #8]	; (80007f4 <OTG_FS_IRQHandler+0x10>)
 80007ea:	f000 fda8 	bl	800133e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000026c 	.word	0x2000026c

080007f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000800:	4a14      	ldr	r2, [pc, #80]	; (8000854 <_sbrk+0x5c>)
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <_sbrk+0x60>)
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <_sbrk+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d102      	bne.n	800081a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <_sbrk+0x64>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <_sbrk+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <_sbrk+0x64>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	429a      	cmp	r2, r3
 8000826:	d207      	bcs.n	8000838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000828:	f006 fb44 	bl	8006eb4 <__errno>
 800082c:	4603      	mov	r3, r0
 800082e:	220c      	movs	r2, #12
 8000830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000836:	e009      	b.n	800084c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <_sbrk+0x64>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <_sbrk+0x64>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <_sbrk+0x64>)
 8000848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800084a:	68fb      	ldr	r3, [r7, #12]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20020000 	.word	0x20020000
 8000858:	00000400 	.word	0x00000400
 800085c:	2000021c 	.word	0x2000021c
 8000860:	20000f88 	.word	0x20000f88

08000864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <SystemInit+0x20>)
 800086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086e:	4a05      	ldr	r2, [pc, #20]	; (8000884 <SystemInit+0x20>)
 8000870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000892:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	2204      	movs	r2, #4
 8000898:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089c:	2202      	movs	r2, #2
 800089e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	f000 fbe7 	bl	800109e <HAL_PCD_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008d6:	f7ff ff2d 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000026c 	.word	0x2000026c

080008e4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000904:	d13a      	bne.n	800097c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <HAL_PCD_MspInit+0xa0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a1d      	ldr	r2, [pc, #116]	; (8000984 <HAL_PCD_MspInit+0xa0>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <HAL_PCD_MspInit+0xa0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000922:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000934:	230a      	movs	r3, #10
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4812      	ldr	r0, [pc, #72]	; (8000988 <HAL_PCD_MspInit+0xa4>)
 8000940:	f000 f9f6 	bl	8000d30 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_PCD_MspInit+0xa0>)
 8000946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000948:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_PCD_MspInit+0xa0>)
 800094a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094e:	6353      	str	r3, [r2, #52]	; 0x34
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_PCD_MspInit+0xa0>)
 8000956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_PCD_MspInit+0xa0>)
 800095a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095e:	6453      	str	r3, [r2, #68]	; 0x44
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_PCD_MspInit+0xa0>)
 8000962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	2043      	movs	r0, #67	; 0x43
 8000972:	f000 f9a6 	bl	8000cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000976:	2043      	movs	r0, #67	; 0x43
 8000978:	f000 f9bf 	bl	8000cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40020000 	.word	0x40020000

0800098c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800098c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000992:	490e      	ldr	r1, [pc, #56]	; (80009cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000998:	e002      	b.n	80009a0 <LoopCopyDataInit>

0800099a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800099c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099e:	3304      	adds	r3, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a4:	d3f9      	bcc.n	800099a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a6:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009a8:	4c0b      	ldr	r4, [pc, #44]	; (80009d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ac:	e001      	b.n	80009b2 <LoopFillZerobss>

080009ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b0:	3204      	adds	r2, #4

080009b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b4:	d3fb      	bcc.n	80009ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009b6:	f7ff ff55 	bl	8000864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ba:	f006 fa81 	bl	8006ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009be:	f7ff fe2d 	bl	800061c <main>
  bx  lr    
 80009c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009cc:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80009d0:	08007868 	.word	0x08007868
  ldr r2, =_sbss
 80009d4:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80009d8:	20000f84 	.word	0x20000f84

080009dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC_IRQHandler>
	...

080009e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <HAL_Init+0x40>)
 80009ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_Init+0x40>)
 80009f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_Init+0x40>)
 8000a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 f94f 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0e:	200f      	movs	r0, #15
 8000a10:	f000 f808 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a14:	f7ff fe94 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023c00 	.word	0x40023c00

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0x54>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_InitTick+0x58>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f967 	bl	8000d16 <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00e      	b.n	8000a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d80a      	bhi.n	8000a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	f000 f92f 	bl	8000cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <HAL_InitTick+0x5c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e000      	b.n	8000a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000004 	.word	0x20000004

08000a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x20>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000674 	.word	0x20000674

08000aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_GetTick+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000674 	.word	0x20000674

08000ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000acc:	f7ff ffee 	bl	8000aac <HAL_GetTick>
 8000ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000adc:	d005      	beq.n	8000aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_Delay+0x44>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aea:	bf00      	nop
 8000aec:	f7ff ffde 	bl	8000aac <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d8f7      	bhi.n	8000aec <HAL_Delay+0x28>
  {
  }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4907      	ldr	r1, [pc, #28]	; (8000ba8 <__NVIC_EnableIRQ+0x38>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	; (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
         );
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	; 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c78:	d301      	bcc.n	8000c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00f      	b.n	8000c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <SysTick_Config+0x40>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c86:	210f      	movs	r1, #15
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f7ff ff8e 	bl	8000bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <SysTick_Config+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <SysTick_Config+0x40>)
 8000c98:	2207      	movs	r2, #7
 8000c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff29 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd4:	f7ff ff3e 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff ff8e 	bl	8000c00 <NVIC_EncodePriority>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff5d 	bl	8000bac <__NVIC_SetPriority>
}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff31 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffa2 	bl	8000c68 <SysTick_Config>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	; 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	e159      	b.n	8001000 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 8148 	bne.w	8000ffa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d005      	beq.n	8000d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d130      	bne.n	8000de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	f003 0201 	and.w	r2, r3, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d017      	beq.n	8000e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d123      	bne.n	8000e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	08da      	lsrs	r2, r3, #3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3208      	adds	r2, #8
 8000e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	69b9      	ldr	r1, [r7, #24]
 8000e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0203 	and.w	r2, r3, #3
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80a2 	beq.w	8000ffa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b57      	ldr	r3, [pc, #348]	; (8001018 <HAL_GPIO_Init+0x2e8>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a56      	ldr	r2, [pc, #344]	; (8001018 <HAL_GPIO_Init+0x2e8>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b54      	ldr	r3, [pc, #336]	; (8001018 <HAL_GPIO_Init+0x2e8>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed2:	4a52      	ldr	r2, [pc, #328]	; (800101c <HAL_GPIO_Init+0x2ec>)
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	220f      	movs	r2, #15
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a49      	ldr	r2, [pc, #292]	; (8001020 <HAL_GPIO_Init+0x2f0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d019      	beq.n	8000f32 <HAL_GPIO_Init+0x202>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a48      	ldr	r2, [pc, #288]	; (8001024 <HAL_GPIO_Init+0x2f4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_GPIO_Init+0x1fe>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a47      	ldr	r2, [pc, #284]	; (8001028 <HAL_GPIO_Init+0x2f8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d00d      	beq.n	8000f2a <HAL_GPIO_Init+0x1fa>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a46      	ldr	r2, [pc, #280]	; (800102c <HAL_GPIO_Init+0x2fc>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d007      	beq.n	8000f26 <HAL_GPIO_Init+0x1f6>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a45      	ldr	r2, [pc, #276]	; (8001030 <HAL_GPIO_Init+0x300>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d101      	bne.n	8000f22 <HAL_GPIO_Init+0x1f2>
 8000f1e:	2304      	movs	r3, #4
 8000f20:	e008      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f22:	2307      	movs	r3, #7
 8000f24:	e006      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f26:	2303      	movs	r3, #3
 8000f28:	e004      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e002      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f32:	2300      	movs	r3, #0
 8000f34:	69fa      	ldr	r2, [r7, #28]
 8000f36:	f002 0203 	and.w	r2, r2, #3
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	4093      	lsls	r3, r2
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f44:	4935      	ldr	r1, [pc, #212]	; (800101c <HAL_GPIO_Init+0x2ec>)
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f52:	4b38      	ldr	r3, [pc, #224]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f76:	4a2f      	ldr	r2, [pc, #188]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa0:	4a24      	ldr	r2, [pc, #144]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fca:	4a1a      	ldr	r2, [pc, #104]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff4:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	2b0f      	cmp	r3, #15
 8001004:	f67f aea2 	bls.w	8000d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40013800 	.word	0x40013800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400
 8001028:	40020800 	.word	0x40020800
 800102c:	40020c00 	.word	0x40020c00
 8001030:	40021000 	.word	0x40021000
 8001034:	40013c00 	.word	0x40013c00

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001054:	e003      	b.n	800105e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	041a      	lsls	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800106a:	b480      	push	{r7}
 800106c:	b085      	sub	sp, #20
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	460b      	mov	r3, r1
 8001074:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800107c:	887a      	ldrh	r2, [r7, #2]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4013      	ands	r3, r2
 8001082:	041a      	lsls	r2, r3, #16
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43d9      	mvns	r1, r3
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	400b      	ands	r3, r1
 800108c:	431a      	orrs	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	619a      	str	r2, [r3, #24]
}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800109e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a0:	b08f      	sub	sp, #60	; 0x3c
 80010a2:	af0a      	add	r7, sp, #40	; 0x28
 80010a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e10f      	b.n	80012d0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d106      	bne.n	80010d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fc0a 	bl	80008e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2203      	movs	r2, #3
 80010d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 fe8d 	bl	8002e0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	687e      	ldr	r6, [r7, #4]
 80010fc:	466d      	mov	r5, sp
 80010fe:	f106 0410 	add.w	r4, r6, #16
 8001102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800110e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001112:	1d33      	adds	r3, r6, #4
 8001114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001116:	6838      	ldr	r0, [r7, #0]
 8001118:	f001 fd64 	bl	8002be4 <USB_CoreInit>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2202      	movs	r2, #2
 8001126:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e0d0      	b.n	80012d0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f001 fe7b 	bl	8002e30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800113a:	2300      	movs	r3, #0
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e04a      	b.n	80011d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	1a9b      	subs	r3, r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	333d      	adds	r3, #61	; 0x3d
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	1a9b      	subs	r3, r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	333c      	adds	r3, #60	; 0x3c
 8001164:	7bfa      	ldrb	r2, [r7, #15]
 8001166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	b298      	uxth	r0, r3
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	3342      	adds	r3, #66	; 0x42
 800117c:	4602      	mov	r2, r0
 800117e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	333f      	adds	r3, #63	; 0x3f
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	3344      	adds	r3, #68	; 0x44
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	1a9b      	subs	r3, r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	3348      	adds	r3, #72	; 0x48
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	1a9b      	subs	r3, r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	3350      	adds	r3, #80	; 0x50
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	3301      	adds	r3, #1
 80011d4:	73fb      	strb	r3, [r7, #15]
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d3af      	bcc.n	8001140 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e044      	b.n	8001270 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	1a9b      	subs	r3, r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	1a9b      	subs	r3, r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	1a9b      	subs	r3, r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	1a9b      	subs	r3, r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	3301      	adds	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	429a      	cmp	r2, r3
 8001278:	d3b5      	bcc.n	80011e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	687e      	ldr	r6, [r7, #4]
 8001282:	466d      	mov	r5, sp
 8001284:	f106 0410 	add.w	r4, r6, #16
 8001288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800128c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001290:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001294:	e885 0003 	stmia.w	r5, {r0, r1}
 8001298:	1d33      	adds	r3, r6, #4
 800129a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800129c:	6838      	ldr	r0, [r7, #0]
 800129e:	f001 fe13 	bl	8002ec8 <USB_DevInit>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2202      	movs	r2, #2
 80012ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e00d      	b.n	80012d0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 fe8f 	bl	8003fec <USB_DevDisconnect>

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <HAL_PCD_Start+0x1c>
 80012f0:	2302      	movs	r3, #2
 80012f2:	e020      	b.n	8001336 <HAL_PCD_Start+0x5e>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	2b01      	cmp	r3, #1
 8001302:	d109      	bne.n	8001318 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001308:	2b01      	cmp	r3, #1
 800130a:	d005      	beq.n	8001318 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001310:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f001 fd65 	bl	8002dec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f002 fe3f 	bl	8003faa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800133e:	b590      	push	{r4, r7, lr}
 8001340:	b08d      	sub	sp, #52	; 0x34
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f002 fefd 	bl	8004154 <USB_GetMode>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	f040 839d 	bne.w	8001a9c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f002 fe61 	bl	800402e <USB_ReadInterrupts>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8393 	beq.w	8001a9a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fe58 	bl	800402e <USB_ReadInterrupts>
 800137e:	4603      	mov	r3, r0
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b02      	cmp	r3, #2
 8001386:	d107      	bne.n	8001398 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f002 0202 	and.w	r2, r2, #2
 8001396:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f002 fe46 	bl	800402e <USB_ReadInterrupts>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	d161      	bne.n	8001470 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699a      	ldr	r2, [r3, #24]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0210 	bic.w	r2, r2, #16
 80013ba:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	f003 020f 	and.w	r2, r3, #15
 80013c8:	4613      	mov	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	1a9b      	subs	r3, r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	3304      	adds	r3, #4
 80013da:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	0c5b      	lsrs	r3, r3, #17
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d124      	bne.n	8001432 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d035      	beq.n	8001460 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001402:	b29b      	uxth	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	6a38      	ldr	r0, [r7, #32]
 8001408:	f002 fc7d 	bl	8003d06 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001418:	441a      	add	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	699a      	ldr	r2, [r3, #24]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800142a:	441a      	add	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	619a      	str	r2, [r3, #24]
 8001430:	e016      	b.n	8001460 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	0c5b      	lsrs	r3, r3, #17
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	2b06      	cmp	r3, #6
 800143c:	d110      	bne.n	8001460 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001444:	2208      	movs	r2, #8
 8001446:	4619      	mov	r1, r3
 8001448:	6a38      	ldr	r0, [r7, #32]
 800144a:	f002 fc5c 	bl	8003d06 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	699a      	ldr	r2, [r3, #24]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800145a:	441a      	add	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	699a      	ldr	r2, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0210 	orr.w	r2, r2, #16
 800146e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f002 fdda 	bl	800402e <USB_ReadInterrupts>
 800147a:	4603      	mov	r3, r0
 800147c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001480:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001484:	d16e      	bne.n	8001564 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f002 fde0 	bl	8004054 <USB_ReadDevAllOutEpInterrupt>
 8001494:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001496:	e062      	b.n	800155e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d057      	beq.n	8001552 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f002 fe05 	bl	80040bc <USB_ReadDevOutEPInterrupt>
 80014b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00c      	beq.n	80014d8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	015a      	lsls	r2, r3, #5
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ca:	461a      	mov	r2, r3
 80014cc:	2301      	movs	r3, #1
 80014ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fdb0 	bl	8002038 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00c      	beq.n	80014fc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	015a      	lsls	r2, r3, #5
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	4413      	add	r3, r2
 80014ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ee:	461a      	mov	r2, r3
 80014f0:	2308      	movs	r3, #8
 80014f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 feaa 	bl	8002250 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	2b00      	cmp	r3, #0
 8001504:	d008      	beq.n	8001518 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	015a      	lsls	r2, r3, #5
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	4413      	add	r3, r2
 800150e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001512:	461a      	mov	r2, r3
 8001514:	2310      	movs	r3, #16
 8001516:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	2b00      	cmp	r3, #0
 8001520:	d008      	beq.n	8001534 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	015a      	lsls	r2, r3, #5
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4413      	add	r3, r2
 800152a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800152e:	461a      	mov	r2, r3
 8001530:	2320      	movs	r3, #32
 8001532:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d009      	beq.n	8001552 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	015a      	lsls	r2, r3, #5
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	4413      	add	r3, r2
 8001546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800154a:	461a      	mov	r2, r3
 800154c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001550:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	3301      	adds	r3, #1
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001560:	2b00      	cmp	r3, #0
 8001562:	d199      	bne.n	8001498 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f002 fd60 	bl	800402e <USB_ReadInterrupts>
 800156e:	4603      	mov	r3, r0
 8001570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001574:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001578:	f040 80c0 	bne.w	80016fc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f002 fd81 	bl	8004088 <USB_ReadDevAllInEpInterrupt>
 8001586:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800158c:	e0b2      	b.n	80016f4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80a7 	beq.w	80016e8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fda7 	bl	80040f8 <USB_ReadDevInEPInterrupt>
 80015aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d057      	beq.n	8001666 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	2201      	movs	r2, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69f9      	ldr	r1, [r7, #28]
 80015d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015d6:	4013      	ands	r3, r2
 80015d8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	015a      	lsls	r2, r3, #5
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4413      	add	r3, r2
 80015e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e6:	461a      	mov	r2, r3
 80015e8:	2301      	movs	r3, #1
 80015ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d132      	bne.n	800165a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	1a9b      	subs	r3, r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	3348      	adds	r3, #72	; 0x48
 8001604:	6819      	ldr	r1, [r3, #0]
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4403      	add	r3, r0
 8001614:	3344      	adds	r3, #68	; 0x44
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4419      	add	r1, r3
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4403      	add	r3, r0
 8001628:	3348      	adds	r3, #72	; 0x48
 800162a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	2b00      	cmp	r3, #0
 8001630:	d113      	bne.n	800165a <HAL_PCD_IRQHandler+0x31c>
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	1a9b      	subs	r3, r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	3350      	adds	r3, #80	; 0x50
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d108      	bne.n	800165a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001652:	461a      	mov	r2, r3
 8001654:	2101      	movs	r1, #1
 8001656:	f002 fdaf 	bl	80041b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4619      	mov	r1, r3
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f005 f9a7 	bl	80069b4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800167c:	461a      	mov	r2, r3
 800167e:	2308      	movs	r3, #8
 8001680:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	015a      	lsls	r2, r3, #5
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	4413      	add	r3, r2
 8001694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001698:	461a      	mov	r2, r3
 800169a:	2310      	movs	r3, #16
 800169c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016b4:	461a      	mov	r2, r3
 80016b6:	2340      	movs	r3, #64	; 0x40
 80016b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d0:	461a      	mov	r2, r3
 80016d2:	2302      	movs	r3, #2
 80016d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 fc1b 	bl	8001f1e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3301      	adds	r3, #1
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f0:	085b      	lsrs	r3, r3, #1
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f47f af49 	bne.w	800158e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f002 fc94 	bl	800402e <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800170c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001710:	d122      	bne.n	8001758 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800172c:	2b01      	cmp	r3, #1
 800172e:	d108      	bne.n	8001742 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001738:	2100      	movs	r1, #0
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 fe26 	bl	800238c <HAL_PCDEx_LPM_Callback>
 8001740:	e002      	b.n	8001748 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f005 f9ac 	bl	8006aa0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001756:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f002 fc66 	bl	800402e <USB_ReadInterrupts>
 8001762:	4603      	mov	r3, r0
 8001764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800176c:	d112      	bne.n	8001794 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b01      	cmp	r3, #1
 800177c:	d102      	bne.n	8001784 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f005 f968 	bl	8006a54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001792:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f002 fc48 	bl	800402e <USB_ReadInterrupts>
 800179e:	4603      	mov	r3, r0
 80017a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a8:	f040 80c7 	bne.w	800193a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2110      	movs	r1, #16
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 fce2 	bl	8003190 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d0:	e056      	b.n	8001880 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017de:	461a      	mov	r2, r3
 80017e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	015a      	lsls	r2, r3, #5
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f6:	0151      	lsls	r1, r2, #5
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	440a      	add	r2, r1
 80017fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001800:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001804:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	4413      	add	r3, r2
 800180e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001816:	0151      	lsls	r1, r2, #5
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	440a      	add	r2, r1
 800181c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001820:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001824:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001828:	015a      	lsls	r2, r3, #5
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	4413      	add	r3, r2
 800182e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001832:	461a      	mov	r2, r3
 8001834:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001838:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	015a      	lsls	r2, r3, #5
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	4413      	add	r3, r2
 8001842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800184a:	0151      	lsls	r1, r2, #5
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	440a      	add	r2, r1
 8001850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001854:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001858:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800186a:	0151      	lsls	r1, r2, #5
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	440a      	add	r2, r1
 8001870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001874:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001878:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	3301      	adds	r3, #1
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001886:	429a      	cmp	r2, r3
 8001888:	d3a3      	bcc.n	80017d2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001898:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800189c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d016      	beq.n	80018d4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b6:	f043 030b 	orr.w	r3, r3, #11
 80018ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018cc:	f043 030b 	orr.w	r3, r3, #11
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	e015      	b.n	8001900 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018fa:	f043 030b 	orr.w	r3, r3, #11
 80018fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800190e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001912:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001924:	461a      	mov	r2, r3
 8001926:	f002 fc47 	bl	80041b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f002 fb75 	bl	800402e <USB_ReadInterrupts>
 8001944:	4603      	mov	r3, r0
 8001946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800194a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800194e:	d124      	bne.n	800199a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f002 fc0b 	bl	8004170 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f001 fc73 	bl	800324a <USB_GetDevSpeed>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681c      	ldr	r4, [r3, #0]
 8001970:	f001 f92c 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8001974:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800197a:	b2db      	uxtb	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	4620      	mov	r0, r4
 8001980:	f001 f992 	bl	8002ca8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f005 f83d 	bl	8006a04 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001998:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 fb45 	bl	800402e <USB_ReadInterrupts>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d10a      	bne.n	80019c4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f005 f81a 	bl	80069e8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	695a      	ldr	r2, [r3, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f002 0208 	and.w	r2, r2, #8
 80019c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f002 fb30 	bl	800402e <USB_ReadInterrupts>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019d8:	d10f      	bne.n	80019fa <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	4619      	mov	r1, r3
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f005 f87b 	bl	8006ae0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 fb15 	bl	800402e <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a0e:	d10f      	bne.n	8001a30 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	4619      	mov	r1, r3
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f005 f84e 	bl	8006abc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	695a      	ldr	r2, [r3, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fafa 	bl	800402e <USB_ReadInterrupts>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a44:	d10a      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f005 f85c 	bl	8006b04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f002 fae4 	bl	800402e <USB_ReadInterrupts>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d115      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f005 f84c 	bl	8006b20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6859      	ldr	r1, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	e000      	b.n	8001a9c <HAL_PCD_IRQHandler+0x75e>
      return;
 8001a9a:	bf00      	nop
    }
  }
}
 8001a9c:	3734      	adds	r7, #52	; 0x34
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd90      	pop	{r4, r7, pc}

08001aa2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_PCD_SetAddress+0x1a>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e013      	b.n	8001ae4 <HAL_PCD_SetAddress+0x42>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	78fa      	ldrb	r2, [r7, #3]
 8001ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 fa42 	bl	8003f5e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	4608      	mov	r0, r1
 8001af6:	4611      	mov	r1, r2
 8001af8:	461a      	mov	r2, r3
 8001afa:	4603      	mov	r3, r0
 8001afc:	70fb      	strb	r3, [r7, #3]
 8001afe:	460b      	mov	r3, r1
 8001b00:	803b      	strh	r3, [r7, #0]
 8001b02:	4613      	mov	r3, r2
 8001b04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da0f      	bge.n	8001b32 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	f003 020f 	and.w	r2, r3, #15
 8001b18:	4613      	mov	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	3338      	adds	r3, #56	; 0x38
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	3304      	adds	r3, #4
 8001b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	705a      	strb	r2, [r3, #1]
 8001b30:	e00f      	b.n	8001b52 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	f003 020f 	and.w	r2, r3, #15
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4413      	add	r3, r2
 8001b48:	3304      	adds	r3, #4
 8001b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b5e:	883a      	ldrh	r2, [r7, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	78ba      	ldrb	r2, [r7, #2]
 8001b68:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	785b      	ldrb	r3, [r3, #1]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d004      	beq.n	8001b7c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b7c:	78bb      	ldrb	r3, [r7, #2]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d102      	bne.n	8001b88 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_PCD_EP_Open+0xaa>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e00e      	b.n	8001bb4 <HAL_PCD_EP_Open+0xc8>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68f9      	ldr	r1, [r7, #12]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f001 fb75 	bl	8003294 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001bb2:	7afb      	ldrb	r3, [r7, #11]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	da0f      	bge.n	8001bf0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	f003 020f 	and.w	r2, r3, #15
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	3338      	adds	r3, #56	; 0x38
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	3304      	adds	r3, #4
 8001be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2201      	movs	r2, #1
 8001bec:	705a      	strb	r2, [r3, #1]
 8001bee:	e00f      	b.n	8001c10 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	f003 020f 	and.w	r2, r3, #15
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	3304      	adds	r3, #4
 8001c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_PCD_EP_Close+0x6e>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e00e      	b.n	8001c48 <HAL_PCD_EP_Close+0x8c>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68f9      	ldr	r1, [r7, #12]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f001 fbb3 	bl	80033a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c60:	7afb      	ldrb	r3, [r7, #11]
 8001c62:	f003 020f 	and.w	r2, r3, #15
 8001c66:	4613      	mov	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4413      	add	r3, r2
 8001c76:	3304      	adds	r3, #4
 8001c78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c92:	7afb      	ldrb	r3, [r7, #11]
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d102      	bne.n	8001cac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cac:	7afb      	ldrb	r3, [r7, #11]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	6979      	ldr	r1, [r7, #20]
 8001cc4:	f001 fe8e 	bl	80039e4 <USB_EP0StartXfer>
 8001cc8:	e008      	b.n	8001cdc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6979      	ldr	r1, [r7, #20]
 8001cd8:	f001 fc40 	bl	800355c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001d08:	681b      	ldr	r3, [r3, #0]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	460b      	mov	r3, r1
 8001d24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d26:	7afb      	ldrb	r3, [r7, #11]
 8001d28:	f003 020f 	and.w	r2, r3, #15
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	3338      	adds	r3, #56	; 0x38
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4413      	add	r3, r2
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2201      	movs	r2, #1
 8001d54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d56:	7afb      	ldrb	r3, [r7, #11]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d70:	7afb      	ldrb	r3, [r7, #11]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	6979      	ldr	r1, [r7, #20]
 8001d88:	f001 fe2c 	bl	80039e4 <USB_EP0StartXfer>
 8001d8c:	e008      	b.n	8001da0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	6979      	ldr	r1, [r7, #20]
 8001d9c:	f001 fbde 	bl	800355c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	f003 020f 	and.w	r2, r3, #15
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d901      	bls.n	8001dc8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e050      	b.n	8001e6a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	da0f      	bge.n	8001df0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	f003 020f 	and.w	r2, r3, #15
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	3338      	adds	r3, #56	; 0x38
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	3304      	adds	r3, #4
 8001de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	705a      	strb	r2, [r3, #1]
 8001dee:	e00d      	b.n	8001e0c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	3304      	adds	r3, #4
 8001e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_PCD_EP_SetStall+0x82>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e01e      	b.n	8001e6a <HAL_PCD_EP_SetStall+0xc0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68f9      	ldr	r1, [r7, #12]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f001 ffbb 	bl	8003db6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10a      	bne.n	8001e60 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	b2d9      	uxtb	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f002 f9ac 	bl	80041b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	f003 020f 	and.w	r2, r3, #15
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d901      	bls.n	8001e90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e042      	b.n	8001f16 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	da0f      	bge.n	8001eb8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	f003 020f 	and.w	r2, r3, #15
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	3338      	adds	r3, #56	; 0x38
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	3304      	adds	r3, #4
 8001eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	705a      	strb	r2, [r3, #1]
 8001eb6:	e00f      	b.n	8001ed8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	f003 020f 	and.w	r2, r3, #15
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	3304      	adds	r3, #4
 8001ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_PCD_EP_ClrStall+0x86>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e00e      	b.n	8001f16 <HAL_PCD_EP_ClrStall+0xa4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68f9      	ldr	r1, [r7, #12]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 ffc3 	bl	8003e92 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b08a      	sub	sp, #40	; 0x28
 8001f22:	af02      	add	r7, sp, #8
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	3338      	adds	r3, #56	; 0x38
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	3304      	adds	r3, #4
 8001f44:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	699a      	ldr	r2, [r3, #24]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d901      	bls.n	8001f56 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e06c      	b.n	8002030 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d902      	bls.n	8001f72 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3303      	adds	r3, #3
 8001f76:	089b      	lsrs	r3, r3, #2
 8001f78:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f7a:	e02b      	b.n	8001fd4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d902      	bls.n	8001f98 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	3303      	adds	r3, #3
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	68d9      	ldr	r1, [r3, #12]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	f001 fe67 	bl	8003c8a <USB_WritePacket>

    ep->xfer_buff  += len;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	441a      	add	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	699a      	ldr	r2, [r3, #24]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	441a      	add	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d809      	bhi.n	8001ffe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d203      	bcs.n	8001ffe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1be      	bne.n	8001f7c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	429a      	cmp	r2, r3
 8002008:	d811      	bhi.n	800202e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	2201      	movs	r2, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800201e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	43db      	mvns	r3, r3
 8002024:	6939      	ldr	r1, [r7, #16]
 8002026:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800202a:	4013      	ands	r3, r2
 800202c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	333c      	adds	r3, #60	; 0x3c
 8002050:	3304      	adds	r3, #4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2b01      	cmp	r3, #1
 800206c:	f040 80a0 	bne.w	80021b0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d015      	beq.n	80020a6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4a72      	ldr	r2, [pc, #456]	; (8002248 <PCD_EP_OutXfrComplete_int+0x210>)
 800207e:	4293      	cmp	r3, r2
 8002080:	f240 80dd 	bls.w	800223e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80d7 	beq.w	800223e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800209c:	461a      	mov	r2, r3
 800209e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a2:	6093      	str	r3, [r2, #8]
 80020a4:	e0cb      	b.n	800223e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d009      	beq.n	80020c4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020bc:	461a      	mov	r2, r3
 80020be:	2320      	movs	r3, #32
 80020c0:	6093      	str	r3, [r2, #8]
 80020c2:	e0bc      	b.n	800223e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f040 80b7 	bne.w	800223e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4a5d      	ldr	r2, [pc, #372]	; (8002248 <PCD_EP_OutXfrComplete_int+0x210>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d90f      	bls.n	80020f8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ee:	461a      	mov	r2, r3
 80020f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020f4:	6093      	str	r3, [r2, #8]
 80020f6:	e0a2      	b.n	800223e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800210a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	0159      	lsls	r1, r3, #5
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	440b      	add	r3, r1
 8002114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800211e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4403      	add	r3, r0
 800212e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002132:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002146:	6819      	ldr	r1, [r3, #0]
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4403      	add	r3, r0
 8002156:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4419      	add	r1, r3
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4403      	add	r3, r0
 800216c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002170:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d114      	bne.n	80021a2 <PCD_EP_OutXfrComplete_int+0x16a>
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d108      	bne.n	80021a2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800219a:	461a      	mov	r2, r3
 800219c:	2101      	movs	r1, #1
 800219e:	f002 f80b 	bl	80041b8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4619      	mov	r1, r3
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f004 fbe8 	bl	800697e <HAL_PCD_DataOutStageCallback>
 80021ae:	e046      	b.n	800223e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4a26      	ldr	r2, [pc, #152]	; (800224c <PCD_EP_OutXfrComplete_int+0x214>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d124      	bne.n	8002202 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ce:	461a      	mov	r2, r3
 80021d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021d4:	6093      	str	r3, [r2, #8]
 80021d6:	e032      	b.n	800223e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ee:	461a      	mov	r2, r3
 80021f0:	2320      	movs	r3, #32
 80021f2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	4619      	mov	r1, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f004 fbbf 	bl	800697e <HAL_PCD_DataOutStageCallback>
 8002200:	e01d      	b.n	800223e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d114      	bne.n	8002232 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d108      	bne.n	8002232 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800222a:	461a      	mov	r2, r3
 800222c:	2100      	movs	r1, #0
 800222e:	f001 ffc3 	bl	80041b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	4619      	mov	r1, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f004 fba0 	bl	800697e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	4f54300a 	.word	0x4f54300a
 800224c:	4f54310a 	.word	0x4f54310a

08002250 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	333c      	adds	r3, #60	; 0x3c
 8002268:	3304      	adds	r3, #4
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4a15      	ldr	r2, [pc, #84]	; (80022d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d90e      	bls.n	80022a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4413      	add	r3, r2
 8002298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229c:	461a      	mov	r2, r3
 800229e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f004 fb58 	bl	800695a <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d90c      	bls.n	80022cc <PCD_EP_OutSetupPacket_int+0x7c>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d108      	bne.n	80022cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022c4:	461a      	mov	r2, r3
 80022c6:	2101      	movs	r1, #1
 80022c8:	f001 ff76 	bl	80041b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	4f54300a 	.word	0x4f54300a

080022dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	70fb      	strb	r3, [r7, #3]
 80022e8:	4613      	mov	r3, r2
 80022ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d107      	bne.n	800230a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022fa:	883b      	ldrh	r3, [r7, #0]
 80022fc:	0419      	lsls	r1, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	430a      	orrs	r2, r1
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
 8002308:	e028      	b.n	800235c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	4413      	add	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e00d      	b.n	800233a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	3340      	adds	r3, #64	; 0x40
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	4413      	add	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	3301      	adds	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	3b01      	subs	r3, #1
 8002340:	429a      	cmp	r2, r3
 8002342:	d3ec      	bcc.n	800231e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002344:	883b      	ldrh	r3, [r7, #0]
 8002346:	0418      	lsls	r0, r3, #16
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	3b01      	subs	r3, #1
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	4302      	orrs	r2, r0
 8002354:	3340      	adds	r3, #64	; 0x40
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	460b      	mov	r3, r1
 8002374:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e264      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d075      	beq.n	80024ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023c2:	4ba3      	ldr	r3, [pc, #652]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d00c      	beq.n	80023e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ce:	4ba0      	ldr	r3, [pc, #640]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d112      	bne.n	8002400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023da:	4b9d      	ldr	r3, [pc, #628]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023e6:	d10b      	bne.n	8002400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	4b99      	ldr	r3, [pc, #612]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d05b      	beq.n	80024ac <HAL_RCC_OscConfig+0x108>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d157      	bne.n	80024ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e23f      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002408:	d106      	bne.n	8002418 <HAL_RCC_OscConfig+0x74>
 800240a:	4b91      	ldr	r3, [pc, #580]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a90      	ldr	r2, [pc, #576]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e01d      	b.n	8002454 <HAL_RCC_OscConfig+0xb0>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x98>
 8002422:	4b8b      	ldr	r3, [pc, #556]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a8a      	ldr	r2, [pc, #552]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b88      	ldr	r3, [pc, #544]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a87      	ldr	r2, [pc, #540]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0xb0>
 800243c:	4b84      	ldr	r3, [pc, #528]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a83      	ldr	r2, [pc, #524]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b81      	ldr	r3, [pc, #516]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a80      	ldr	r2, [pc, #512]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 800244e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7fe fb26 	bl	8000aac <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002464:	f7fe fb22 	bl	8000aac <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e204      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b76      	ldr	r3, [pc, #472]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0xc0>
 8002482:	e014      	b.n	80024ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7fe fb12 	bl	8000aac <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248c:	f7fe fb0e 	bl	8000aac <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e1f0      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249e:	4b6c      	ldr	r3, [pc, #432]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0xe8>
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d063      	beq.n	8002582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ba:	4b65      	ldr	r3, [pc, #404]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c6:	4b62      	ldr	r3, [pc, #392]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d11c      	bne.n	800250c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024d2:	4b5f      	ldr	r3, [pc, #380]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d116      	bne.n	800250c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	4b5c      	ldr	r3, [pc, #368]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_RCC_OscConfig+0x152>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d001      	beq.n	80024f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e1c4      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	4b56      	ldr	r3, [pc, #344]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4952      	ldr	r1, [pc, #328]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	e03a      	b.n	8002582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002514:	4b4f      	ldr	r3, [pc, #316]	; (8002654 <HAL_RCC_OscConfig+0x2b0>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251a:	f7fe fac7 	bl	8000aac <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002522:	f7fe fac3 	bl	8000aac <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e1a5      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	4b46      	ldr	r3, [pc, #280]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002540:	4b43      	ldr	r3, [pc, #268]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4940      	ldr	r1, [pc, #256]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	4313      	orrs	r3, r2
 8002552:	600b      	str	r3, [r1, #0]
 8002554:	e015      	b.n	8002582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002556:	4b3f      	ldr	r3, [pc, #252]	; (8002654 <HAL_RCC_OscConfig+0x2b0>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe faa6 	bl	8000aac <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002564:	f7fe faa2 	bl	8000aac <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e184      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	4b36      	ldr	r3, [pc, #216]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d030      	beq.n	80025f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d016      	beq.n	80025c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002596:	4b30      	ldr	r3, [pc, #192]	; (8002658 <HAL_RCC_OscConfig+0x2b4>)
 8002598:	2201      	movs	r2, #1
 800259a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7fe fa86 	bl	8000aac <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a4:	f7fe fa82 	bl	8000aac <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e164      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b6:	4b26      	ldr	r3, [pc, #152]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x200>
 80025c2:	e015      	b.n	80025f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c4:	4b24      	ldr	r3, [pc, #144]	; (8002658 <HAL_RCC_OscConfig+0x2b4>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ca:	f7fe fa6f 	bl	8000aac <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d2:	f7fe fa6b 	bl	8000aac <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e14d      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e4:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80025e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f0      	bne.n	80025d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80a0 	beq.w	800273e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10f      	bne.n	800262e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262a:	2301      	movs	r3, #1
 800262c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_OscConfig+0x2b8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d121      	bne.n	800267e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <HAL_RCC_OscConfig+0x2b8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a07      	ldr	r2, [pc, #28]	; (800265c <HAL_RCC_OscConfig+0x2b8>)
 8002640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002646:	f7fe fa31 	bl	8000aac <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	e011      	b.n	8002672 <HAL_RCC_OscConfig+0x2ce>
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	42470000 	.word	0x42470000
 8002658:	42470e80 	.word	0x42470e80
 800265c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002660:	f7fe fa24 	bl	8000aac <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e106      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002672:	4b85      	ldr	r3, [pc, #532]	; (8002888 <HAL_RCC_OscConfig+0x4e4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d106      	bne.n	8002694 <HAL_RCC_OscConfig+0x2f0>
 8002686:	4b81      	ldr	r3, [pc, #516]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	4a80      	ldr	r2, [pc, #512]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6713      	str	r3, [r2, #112]	; 0x70
 8002692:	e01c      	b.n	80026ce <HAL_RCC_OscConfig+0x32a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b05      	cmp	r3, #5
 800269a:	d10c      	bne.n	80026b6 <HAL_RCC_OscConfig+0x312>
 800269c:	4b7b      	ldr	r3, [pc, #492]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	4a7a      	ldr	r2, [pc, #488]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	6713      	str	r3, [r2, #112]	; 0x70
 80026a8:	4b78      	ldr	r3, [pc, #480]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	4a77      	ldr	r2, [pc, #476]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6713      	str	r3, [r2, #112]	; 0x70
 80026b4:	e00b      	b.n	80026ce <HAL_RCC_OscConfig+0x32a>
 80026b6:	4b75      	ldr	r3, [pc, #468]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	4a74      	ldr	r2, [pc, #464]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6713      	str	r3, [r2, #112]	; 0x70
 80026c2:	4b72      	ldr	r3, [pc, #456]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	4a71      	ldr	r2, [pc, #452]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026c8:	f023 0304 	bic.w	r3, r3, #4
 80026cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d015      	beq.n	8002702 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7fe f9e9 	bl	8000aac <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7fe f9e5 	bl	8000aac <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e0c5      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f4:	4b65      	ldr	r3, [pc, #404]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ee      	beq.n	80026de <HAL_RCC_OscConfig+0x33a>
 8002700:	e014      	b.n	800272c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7fe f9d3 	bl	8000aac <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7fe f9cf 	bl	8000aac <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	; 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e0af      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002720:	4b5a      	ldr	r3, [pc, #360]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ee      	bne.n	800270a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d105      	bne.n	800273e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002732:	4b56      	ldr	r3, [pc, #344]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a55      	ldr	r2, [pc, #340]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 809b 	beq.w	800287e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002748:	4b50      	ldr	r3, [pc, #320]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b08      	cmp	r3, #8
 8002752:	d05c      	beq.n	800280e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d141      	bne.n	80027e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275c:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <HAL_RCC_OscConfig+0x4ec>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fe f9a3 	bl	8000aac <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276a:	f7fe f99f 	bl	8000aac <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e081      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277c:	4b43      	ldr	r3, [pc, #268]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	019b      	lsls	r3, r3, #6
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	085b      	lsrs	r3, r3, #1
 80027a0:	3b01      	subs	r3, #1
 80027a2:	041b      	lsls	r3, r3, #16
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	061b      	lsls	r3, r3, #24
 80027ac:	4937      	ldr	r1, [pc, #220]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b2:	4b37      	ldr	r3, [pc, #220]	; (8002890 <HAL_RCC_OscConfig+0x4ec>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe f978 	bl	8000aac <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe f974 	bl	8000aac <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e056      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d2:	4b2e      	ldr	r3, [pc, #184]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x41c>
 80027de:	e04e      	b.n	800287e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e0:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <HAL_RCC_OscConfig+0x4ec>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe f961 	bl	8000aac <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ee:	f7fe f95d 	bl	8000aac <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e03f      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002800:	4b22      	ldr	r3, [pc, #136]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x44a>
 800280c:	e037      	b.n	800287e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e032      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800281a:	4b1c      	ldr	r3, [pc, #112]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d028      	beq.n	800287a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d121      	bne.n	800287a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d11a      	bne.n	800287a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800284a:	4013      	ands	r3, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002850:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002852:	4293      	cmp	r3, r2
 8002854:	d111      	bne.n	800287a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	3b01      	subs	r3, #1
 8002864:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d107      	bne.n	800287a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d001      	beq.n	800287e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40007000 	.word	0x40007000
 800288c:	40023800 	.word	0x40023800
 8002890:	42470060 	.word	0x42470060

08002894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0cc      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028a8:	4b68      	ldr	r3, [pc, #416]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d90c      	bls.n	80028d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b65      	ldr	r3, [pc, #404]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b63      	ldr	r3, [pc, #396]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0b8      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e8:	4b59      	ldr	r3, [pc, #356]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002900:	4b53      	ldr	r3, [pc, #332]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	4a52      	ldr	r2, [pc, #328]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800290a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290c:	4b50      	ldr	r3, [pc, #320]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	494d      	ldr	r1, [pc, #308]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d044      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b47      	ldr	r3, [pc, #284]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d119      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e07f      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d003      	beq.n	8002952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800294e:	2b03      	cmp	r3, #3
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002952:	4b3f      	ldr	r3, [pc, #252]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e06f      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002962:	4b3b      	ldr	r3, [pc, #236]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e067      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002972:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f023 0203 	bic.w	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4934      	ldr	r1, [pc, #208]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	4313      	orrs	r3, r2
 8002982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002984:	f7fe f892 	bl	8000aac <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298c:	f7fe f88e 	bl	8000aac <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e04f      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 020c 	and.w	r2, r3, #12
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d1eb      	bne.n	800298c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029b4:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d20c      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e032      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4916      	ldr	r1, [pc, #88]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	490e      	ldr	r1, [pc, #56]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a1a:	f000 f821 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	490a      	ldr	r1, [pc, #40]	; (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	5ccb      	ldrb	r3, [r1, r3]
 8002a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a32:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCC_ClockConfig+0x1c8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fd fff2 	bl	8000a24 <HAL_InitTick>

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023c00 	.word	0x40023c00
 8002a50:	40023800 	.word	0x40023800
 8002a54:	08007814 	.word	0x08007814
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	20000004 	.word	0x20000004

08002a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a66:	2100      	movs	r1, #0
 8002a68:	6079      	str	r1, [r7, #4]
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	60f9      	str	r1, [r7, #12]
 8002a6e:	2100      	movs	r1, #0
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a72:	2100      	movs	r1, #0
 8002a74:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a76:	4952      	ldr	r1, [pc, #328]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a78:	6889      	ldr	r1, [r1, #8]
 8002a7a:	f001 010c 	and.w	r1, r1, #12
 8002a7e:	2908      	cmp	r1, #8
 8002a80:	d00d      	beq.n	8002a9e <HAL_RCC_GetSysClockFreq+0x3e>
 8002a82:	2908      	cmp	r1, #8
 8002a84:	f200 8094 	bhi.w	8002bb0 <HAL_RCC_GetSysClockFreq+0x150>
 8002a88:	2900      	cmp	r1, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0x32>
 8002a8c:	2904      	cmp	r1, #4
 8002a8e:	d003      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0x38>
 8002a90:	e08e      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a92:	4b4c      	ldr	r3, [pc, #304]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a94:	60bb      	str	r3, [r7, #8]
       break;
 8002a96:	e08e      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a98:	4b4b      	ldr	r3, [pc, #300]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a9a:	60bb      	str	r3, [r7, #8]
      break;
 8002a9c:	e08b      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a9e:	4948      	ldr	r1, [pc, #288]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002aa0:	6849      	ldr	r1, [r1, #4]
 8002aa2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002aa6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aa8:	4945      	ldr	r1, [pc, #276]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002aaa:	6849      	ldr	r1, [r1, #4]
 8002aac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002ab0:	2900      	cmp	r1, #0
 8002ab2:	d024      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab4:	4942      	ldr	r1, [pc, #264]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ab6:	6849      	ldr	r1, [r1, #4]
 8002ab8:	0989      	lsrs	r1, r1, #6
 8002aba:	4608      	mov	r0, r1
 8002abc:	f04f 0100 	mov.w	r1, #0
 8002ac0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002ac4:	f04f 0500 	mov.w	r5, #0
 8002ac8:	ea00 0204 	and.w	r2, r0, r4
 8002acc:	ea01 0305 	and.w	r3, r1, r5
 8002ad0:	493d      	ldr	r1, [pc, #244]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ad2:	fb01 f003 	mul.w	r0, r1, r3
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	fb01 f102 	mul.w	r1, r1, r2
 8002adc:	1844      	adds	r4, r0, r1
 8002ade:	493a      	ldr	r1, [pc, #232]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ae0:	fba2 0101 	umull	r0, r1, r2, r1
 8002ae4:	1863      	adds	r3, r4, r1
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	f7fd fbc6 	bl	8000280 <__aeabi_uldivmod>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4613      	mov	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e04a      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afe:	4b30      	ldr	r3, [pc, #192]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	099b      	lsrs	r3, r3, #6
 8002b04:	461a      	mov	r2, r3
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b0e:	f04f 0100 	mov.w	r1, #0
 8002b12:	ea02 0400 	and.w	r4, r2, r0
 8002b16:	ea03 0501 	and.w	r5, r3, r1
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	014b      	lsls	r3, r1, #5
 8002b28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b2c:	0142      	lsls	r2, r0, #5
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	1b00      	subs	r0, r0, r4
 8002b34:	eb61 0105 	sbc.w	r1, r1, r5
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	018b      	lsls	r3, r1, #6
 8002b42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b46:	0182      	lsls	r2, r0, #6
 8002b48:	1a12      	subs	r2, r2, r0
 8002b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b4e:	f04f 0000 	mov.w	r0, #0
 8002b52:	f04f 0100 	mov.w	r1, #0
 8002b56:	00d9      	lsls	r1, r3, #3
 8002b58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b5c:	00d0      	lsls	r0, r2, #3
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	1912      	adds	r2, r2, r4
 8002b64:	eb45 0303 	adc.w	r3, r5, r3
 8002b68:	f04f 0000 	mov.w	r0, #0
 8002b6c:	f04f 0100 	mov.w	r1, #0
 8002b70:	0299      	lsls	r1, r3, #10
 8002b72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b76:	0290      	lsls	r0, r2, #10
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	461a      	mov	r2, r3
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	f7fd fb7a 	bl	8000280 <__aeabi_uldivmod>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4613      	mov	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b94:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	60bb      	str	r3, [r7, #8]
      break;
 8002bae:	e002      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002bb2:	60bb      	str	r3, [r7, #8]
      break;
 8002bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	00f42400 	.word	0x00f42400
 8002bc8:	017d7840 	.word	0x017d7840

08002bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20000000 	.word	0x20000000

08002be4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002be4:	b084      	sub	sp, #16
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	f107 001c 	add.w	r0, r7, #28
 8002bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d122      	bne.n	8002c42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d105      	bne.n	8002c36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f001 fb1c 	bl	8004274 <USB_CoreReset>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	e01a      	b.n	8002c78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f001 fb10 	bl	8004274 <USB_CoreReset>
 8002c54:	4603      	mov	r3, r0
 8002c56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	639a      	str	r2, [r3, #56]	; 0x38
 8002c6a:	e005      	b.n	8002c78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d10b      	bne.n	8002c96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f043 0206 	orr.w	r2, r3, #6
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ca2:	b004      	add	sp, #16
 8002ca4:	4770      	bx	lr
	...

08002ca8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d165      	bne.n	8002d88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4a41      	ldr	r2, [pc, #260]	; (8002dc4 <USB_SetTurnaroundTime+0x11c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d906      	bls.n	8002cd2 <USB_SetTurnaroundTime+0x2a>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4a40      	ldr	r2, [pc, #256]	; (8002dc8 <USB_SetTurnaroundTime+0x120>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d202      	bcs.n	8002cd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002ccc:	230f      	movs	r3, #15
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	e062      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4a3c      	ldr	r2, [pc, #240]	; (8002dc8 <USB_SetTurnaroundTime+0x120>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d306      	bcc.n	8002ce8 <USB_SetTurnaroundTime+0x40>
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4a3b      	ldr	r2, [pc, #236]	; (8002dcc <USB_SetTurnaroundTime+0x124>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d202      	bcs.n	8002ce8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002ce2:	230e      	movs	r3, #14
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	e057      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4a38      	ldr	r2, [pc, #224]	; (8002dcc <USB_SetTurnaroundTime+0x124>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d306      	bcc.n	8002cfe <USB_SetTurnaroundTime+0x56>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4a37      	ldr	r2, [pc, #220]	; (8002dd0 <USB_SetTurnaroundTime+0x128>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d202      	bcs.n	8002cfe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002cf8:	230d      	movs	r3, #13
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	e04c      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	4a33      	ldr	r2, [pc, #204]	; (8002dd0 <USB_SetTurnaroundTime+0x128>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d306      	bcc.n	8002d14 <USB_SetTurnaroundTime+0x6c>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4a32      	ldr	r2, [pc, #200]	; (8002dd4 <USB_SetTurnaroundTime+0x12c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d802      	bhi.n	8002d14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d0e:	230c      	movs	r3, #12
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	e041      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4a2f      	ldr	r2, [pc, #188]	; (8002dd4 <USB_SetTurnaroundTime+0x12c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d906      	bls.n	8002d2a <USB_SetTurnaroundTime+0x82>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4a2e      	ldr	r2, [pc, #184]	; (8002dd8 <USB_SetTurnaroundTime+0x130>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d802      	bhi.n	8002d2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d24:	230b      	movs	r3, #11
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	e036      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4a2a      	ldr	r2, [pc, #168]	; (8002dd8 <USB_SetTurnaroundTime+0x130>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d906      	bls.n	8002d40 <USB_SetTurnaroundTime+0x98>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4a29      	ldr	r2, [pc, #164]	; (8002ddc <USB_SetTurnaroundTime+0x134>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d802      	bhi.n	8002d40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d3a:	230a      	movs	r3, #10
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e02b      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4a26      	ldr	r2, [pc, #152]	; (8002ddc <USB_SetTurnaroundTime+0x134>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d906      	bls.n	8002d56 <USB_SetTurnaroundTime+0xae>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4a25      	ldr	r2, [pc, #148]	; (8002de0 <USB_SetTurnaroundTime+0x138>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d202      	bcs.n	8002d56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d50:	2309      	movs	r3, #9
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e020      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <USB_SetTurnaroundTime+0x138>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d306      	bcc.n	8002d6c <USB_SetTurnaroundTime+0xc4>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4a20      	ldr	r2, [pc, #128]	; (8002de4 <USB_SetTurnaroundTime+0x13c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d802      	bhi.n	8002d6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002d66:	2308      	movs	r3, #8
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	e015      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4a1d      	ldr	r2, [pc, #116]	; (8002de4 <USB_SetTurnaroundTime+0x13c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d906      	bls.n	8002d82 <USB_SetTurnaroundTime+0xda>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <USB_SetTurnaroundTime+0x140>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d202      	bcs.n	8002d82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d7c:	2307      	movs	r3, #7
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	e00a      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d82:	2306      	movs	r3, #6
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e007      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d8e:	2309      	movs	r3, #9
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e001      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d94:	2309      	movs	r3, #9
 8002d96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	029b      	lsls	r3, r3, #10
 8002dac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002db0:	431a      	orrs	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	00d8acbf 	.word	0x00d8acbf
 8002dc8:	00e4e1c0 	.word	0x00e4e1c0
 8002dcc:	00f42400 	.word	0x00f42400
 8002dd0:	01067380 	.word	0x01067380
 8002dd4:	011a499f 	.word	0x011a499f
 8002dd8:	01312cff 	.word	0x01312cff
 8002ddc:	014ca43f 	.word	0x014ca43f
 8002de0:	016e3600 	.word	0x016e3600
 8002de4:	01a6ab1f 	.word	0x01a6ab1f
 8002de8:	01e84800 	.word	0x01e84800

08002dec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 0201 	bic.w	r2, r3, #1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d115      	bne.n	8002e7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e5e:	2001      	movs	r0, #1
 8002e60:	f7fd fe30 	bl	8000ac4 <HAL_Delay>
      ms++;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	3301      	adds	r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f001 f972 	bl	8004154 <USB_GetMode>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d01e      	beq.n	8002eb4 <USB_SetCurrentMode+0x84>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b31      	cmp	r3, #49	; 0x31
 8002e7a:	d9f0      	bls.n	8002e5e <USB_SetCurrentMode+0x2e>
 8002e7c:	e01a      	b.n	8002eb4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d115      	bne.n	8002eb0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e90:	2001      	movs	r0, #1
 8002e92:	f7fd fe17 	bl	8000ac4 <HAL_Delay>
      ms++;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f001 f959 	bl	8004154 <USB_GetMode>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <USB_SetCurrentMode+0x84>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b31      	cmp	r3, #49	; 0x31
 8002eac:	d9f0      	bls.n	8002e90 <USB_SetCurrentMode+0x60>
 8002eae:	e001      	b.n	8002eb4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e005      	b.n	8002ec0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b32      	cmp	r3, #50	; 0x32
 8002eb8:	d101      	bne.n	8002ebe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ec8:	b084      	sub	sp, #16
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	e009      	b.n	8002efc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	3340      	adds	r3, #64	; 0x40
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2b0e      	cmp	r3, #14
 8002f00:	d9f2      	bls.n	8002ee8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d11c      	bne.n	8002f42 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f16:	f043 0302 	orr.w	r3, r3, #2
 8002f1a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
 8002f40:	e00b      	b.n	8002f5a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f60:	461a      	mov	r2, r3
 8002f62:	2300      	movs	r3, #0
 8002f64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f74:	461a      	mov	r2, r3
 8002f76:	680b      	ldr	r3, [r1, #0]
 8002f78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d10c      	bne.n	8002f9a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d104      	bne.n	8002f90 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f86:	2100      	movs	r1, #0
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f945 	bl	8003218 <USB_SetDevSpeed>
 8002f8e:	e008      	b.n	8002fa2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f90:	2101      	movs	r1, #1
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f940 	bl	8003218 <USB_SetDevSpeed>
 8002f98:	e003      	b.n	8002fa2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f9a:	2103      	movs	r1, #3
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f93b 	bl	8003218 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002fa2:	2110      	movs	r1, #16
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f8f3 	bl	8003190 <USB_FlushTxFifo>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f90f 	bl	80031d8 <USB_FlushRxFifo>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2300      	movs	r3, #0
 8002fce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2300      	movs	r3, #0
 8002fda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	e043      	b.n	8003076 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003004:	d118      	bne.n	8003038 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4413      	add	r3, r2
 8003014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003018:	461a      	mov	r2, r3
 800301a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	e013      	b.n	800304a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4413      	add	r3, r2
 800302a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800302e:	461a      	mov	r2, r3
 8003030:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	e008      	b.n	800304a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4413      	add	r3, r2
 8003040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003044:	461a      	mov	r2, r3
 8003046:	2300      	movs	r3, #0
 8003048:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003056:	461a      	mov	r2, r3
 8003058:	2300      	movs	r3, #0
 800305a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003068:	461a      	mov	r2, r3
 800306a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800306e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	3301      	adds	r3, #1
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	429a      	cmp	r2, r3
 800307c:	d3b7      	bcc.n	8002fee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	e043      	b.n	800310c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4413      	add	r3, r2
 800308c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800309a:	d118      	bne.n	80030ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ae:	461a      	mov	r2, r3
 80030b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e013      	b.n	80030e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c4:	461a      	mov	r2, r3
 80030c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	e008      	b.n	80030e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030da:	461a      	mov	r2, r3
 80030dc:	2300      	movs	r3, #0
 80030de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ec:	461a      	mov	r2, r3
 80030ee:	2300      	movs	r3, #0
 80030f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fe:	461a      	mov	r2, r3
 8003100:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003104:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	3301      	adds	r3, #1
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	429a      	cmp	r2, r3
 8003112:	d3b7      	bcc.n	8003084 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003122:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003126:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003134:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f043 0210 	orr.w	r2, r3, #16
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <USB_DevInit+0x2c4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f043 0208 	orr.w	r2, r3, #8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d107      	bne.n	800317c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800317c:	7dfb      	ldrb	r3, [r7, #23]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003188:	b004      	add	sp, #16
 800318a:	4770      	bx	lr
 800318c:	803c3800 	.word	0x803c3800

08003190 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	019b      	lsls	r3, r3, #6
 80031a2:	f043 0220 	orr.w	r2, r3, #32
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3301      	adds	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	4a08      	ldr	r2, [pc, #32]	; (80031d4 <USB_FlushTxFifo+0x44>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e006      	b.n	80031c8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d0f1      	beq.n	80031aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	00030d40 	.word	0x00030d40

080031d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2210      	movs	r2, #16
 80031e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3301      	adds	r3, #1
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	4a08      	ldr	r2, [pc, #32]	; (8003214 <USB_FlushRxFifo+0x3c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e006      	b.n	8003208 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b10      	cmp	r3, #16
 8003204:	d0f1      	beq.n	80031ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	00030d40 	.word	0x00030d40

08003218 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	68f9      	ldr	r1, [r7, #12]
 8003234:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003238:	4313      	orrs	r3, r2
 800323a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800324a:	b480      	push	{r7}
 800324c:	b087      	sub	sp, #28
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 0306 	and.w	r3, r3, #6
 8003262:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d102      	bne.n	8003270 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800326a:	2300      	movs	r3, #0
 800326c:	75fb      	strb	r3, [r7, #23]
 800326e:	e00a      	b.n	8003286 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d002      	beq.n	800327c <USB_GetDevSpeed+0x32>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b06      	cmp	r3, #6
 800327a:	d102      	bne.n	8003282 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800327c:	2302      	movs	r3, #2
 800327e:	75fb      	strb	r3, [r7, #23]
 8003280:	e001      	b.n	8003286 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003282:	230f      	movs	r3, #15
 8003284:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003286:	7dfb      	ldrb	r3, [r7, #23]
}
 8003288:	4618      	mov	r0, r3
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	785b      	ldrb	r3, [r3, #1]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d13a      	bne.n	8003326 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	2101      	movs	r1, #1
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	68f9      	ldr	r1, [r7, #12]
 80032ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d155      	bne.n	8003394 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	78db      	ldrb	r3, [r3, #3]
 8003302:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003304:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	059b      	lsls	r3, r3, #22
 800330a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800330c:	4313      	orrs	r3, r2
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	0151      	lsls	r1, r2, #5
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	440a      	add	r2, r1
 8003316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800331a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	e036      	b.n	8003394 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800332c:	69da      	ldr	r2, [r3, #28]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	2101      	movs	r1, #1
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	041b      	lsls	r3, r3, #16
 800333e:	68f9      	ldr	r1, [r7, #12]
 8003340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003344:	4313      	orrs	r3, r2
 8003346:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d11a      	bne.n	8003394 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4413      	add	r3, r2
 8003366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	78db      	ldrb	r3, [r3, #3]
 8003378:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800337a:	430b      	orrs	r3, r1
 800337c:	4313      	orrs	r3, r2
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	0151      	lsls	r1, r2, #5
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	440a      	add	r2, r1
 8003386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003392:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	785b      	ldrb	r3, [r3, #1]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d161      	bne.n	8003484 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033d6:	d11f      	bne.n	8003418 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	0151      	lsls	r1, r2, #5
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	440a      	add	r2, r1
 80033ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	0151      	lsls	r1, r2, #5
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	440a      	add	r2, r1
 800340e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003412:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003416:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	2101      	movs	r1, #1
 800342a:	fa01 f303 	lsl.w	r3, r1, r3
 800342e:	b29b      	uxth	r3, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	68f9      	ldr	r1, [r7, #12]
 8003434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003438:	4013      	ands	r3, r2
 800343a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	2101      	movs	r1, #1
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	b29b      	uxth	r3, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	68f9      	ldr	r1, [r7, #12]
 8003458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800345c:	4013      	ands	r3, r2
 800345e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	0159      	lsls	r1, r3, #5
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	440b      	add	r3, r1
 8003476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800347a:	4619      	mov	r1, r3
 800347c:	4b35      	ldr	r3, [pc, #212]	; (8003554 <USB_DeactivateEndpoint+0x1b0>)
 800347e:	4013      	ands	r3, r2
 8003480:	600b      	str	r3, [r1, #0]
 8003482:	e060      	b.n	8003546 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4413      	add	r3, r2
 800348c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800349a:	d11f      	bne.n	80034dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	0151      	lsls	r1, r2, #5
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	440a      	add	r2, r1
 80034b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	0151      	lsls	r1, r2, #5
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	440a      	add	r2, r1
 80034d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	2101      	movs	r1, #1
 80034ee:	fa01 f303 	lsl.w	r3, r1, r3
 80034f2:	041b      	lsls	r3, r3, #16
 80034f4:	43db      	mvns	r3, r3
 80034f6:	68f9      	ldr	r1, [r7, #12]
 80034f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034fc:	4013      	ands	r3, r2
 80034fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003506:	69da      	ldr	r2, [r3, #28]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	2101      	movs	r1, #1
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	041b      	lsls	r3, r3, #16
 8003518:	43db      	mvns	r3, r3
 800351a:	68f9      	ldr	r1, [r7, #12]
 800351c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003520:	4013      	ands	r3, r2
 8003522:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4413      	add	r3, r2
 800352c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	0159      	lsls	r1, r3, #5
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	440b      	add	r3, r1
 800353a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353e:	4619      	mov	r1, r3
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <USB_DeactivateEndpoint+0x1b4>)
 8003542:	4013      	ands	r3, r2
 8003544:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	ec337800 	.word	0xec337800
 8003558:	eff37800 	.word	0xeff37800

0800355c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08a      	sub	sp, #40	; 0x28
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	4613      	mov	r3, r2
 8003568:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	785b      	ldrb	r3, [r3, #1]
 8003578:	2b01      	cmp	r3, #1
 800357a:	f040 815c 	bne.w	8003836 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d132      	bne.n	80035ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	4413      	add	r3, r2
 800358e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	0151      	lsls	r1, r2, #5
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	440a      	add	r2, r1
 800359c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	0151      	lsls	r1, r2, #5
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	440a      	add	r2, r1
 80035c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	0151      	lsls	r1, r2, #5
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	440a      	add	r2, r1
 80035e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e4:	0cdb      	lsrs	r3, r3, #19
 80035e6:	04db      	lsls	r3, r3, #19
 80035e8:	6113      	str	r3, [r2, #16]
 80035ea:	e074      	b.n	80036d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	0151      	lsls	r1, r2, #5
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	440a      	add	r2, r1
 8003602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003606:	0cdb      	lsrs	r3, r3, #19
 8003608:	04db      	lsls	r3, r3, #19
 800360a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	0151      	lsls	r1, r2, #5
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	440a      	add	r2, r1
 8003622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003626:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800362a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800362e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	6959      	ldr	r1, [r3, #20]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	440b      	add	r3, r1
 8003648:	1e59      	subs	r1, r3, #1
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003652:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003654:	4b9d      	ldr	r3, [pc, #628]	; (80038cc <USB_EPStartXfer+0x370>)
 8003656:	400b      	ands	r3, r1
 8003658:	69b9      	ldr	r1, [r7, #24]
 800365a:	0148      	lsls	r0, r1, #5
 800365c:	69f9      	ldr	r1, [r7, #28]
 800365e:	4401      	add	r1, r0
 8003660:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003664:	4313      	orrs	r3, r2
 8003666:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367e:	69b9      	ldr	r1, [r7, #24]
 8003680:	0148      	lsls	r0, r1, #5
 8003682:	69f9      	ldr	r1, [r7, #28]
 8003684:	4401      	add	r1, r0
 8003686:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800368a:	4313      	orrs	r3, r2
 800368c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	78db      	ldrb	r3, [r3, #3]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d11f      	bne.n	80036d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	0151      	lsls	r1, r2, #5
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	440a      	add	r2, r1
 80036ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80036b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	0151      	lsls	r1, r2, #5
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	440a      	add	r2, r1
 80036cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d14b      	bne.n	8003774 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d009      	beq.n	80036f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f0:	461a      	mov	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	78db      	ldrb	r3, [r3, #3]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d128      	bne.n	8003752 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370c:	2b00      	cmp	r3, #0
 800370e:	d110      	bne.n	8003732 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	0151      	lsls	r1, r2, #5
 8003722:	69fa      	ldr	r2, [r7, #28]
 8003724:	440a      	add	r2, r1
 8003726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800372a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	e00f      	b.n	8003752 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	0151      	lsls	r1, r2, #5
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	440a      	add	r2, r1
 8003748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800374c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003750:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	0151      	lsls	r1, r2, #5
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	440a      	add	r2, r1
 8003768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800376c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e12f      	b.n	80039d4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	0151      	lsls	r1, r2, #5
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	440a      	add	r2, r1
 800378a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800378e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003792:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	78db      	ldrb	r3, [r3, #3]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d015      	beq.n	80037c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8117 	beq.w	80039d4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	2101      	movs	r1, #1
 80037b8:	fa01 f303 	lsl.w	r3, r1, r3
 80037bc:	69f9      	ldr	r1, [r7, #28]
 80037be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037c2:	4313      	orrs	r3, r2
 80037c4:	634b      	str	r3, [r1, #52]	; 0x34
 80037c6:	e105      	b.n	80039d4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d110      	bne.n	80037fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	0151      	lsls	r1, r2, #5
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	440a      	add	r2, r1
 80037ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	e00f      	b.n	800381a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	0151      	lsls	r1, r2, #5
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	440a      	add	r2, r1
 8003810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003818:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	68d9      	ldr	r1, [r3, #12]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	b298      	uxth	r0, r3
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	4603      	mov	r3, r0
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fa2b 	bl	8003c8a <USB_WritePacket>
 8003834:	e0ce      	b.n	80039d4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	0151      	lsls	r1, r2, #5
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	440a      	add	r2, r1
 800384c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003850:	0cdb      	lsrs	r3, r3, #19
 8003852:	04db      	lsls	r3, r3, #19
 8003854:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	0151      	lsls	r1, r2, #5
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	440a      	add	r2, r1
 800386c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003870:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003874:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003878:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d126      	bne.n	80038d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003898:	69b9      	ldr	r1, [r7, #24]
 800389a:	0148      	lsls	r0, r1, #5
 800389c:	69f9      	ldr	r1, [r7, #28]
 800389e:	4401      	add	r1, r0
 80038a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038a4:	4313      	orrs	r3, r2
 80038a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	0151      	lsls	r1, r2, #5
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	440a      	add	r2, r1
 80038be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038c6:	6113      	str	r3, [r2, #16]
 80038c8:	e036      	b.n	8003938 <USB_EPStartXfer+0x3dc>
 80038ca:	bf00      	nop
 80038cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4413      	add	r3, r2
 80038da:	1e5a      	subs	r2, r3, #1
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	8afb      	ldrh	r3, [r7, #22]
 80038f6:	04d9      	lsls	r1, r3, #19
 80038f8:	4b39      	ldr	r3, [pc, #228]	; (80039e0 <USB_EPStartXfer+0x484>)
 80038fa:	400b      	ands	r3, r1
 80038fc:	69b9      	ldr	r1, [r7, #24]
 80038fe:	0148      	lsls	r0, r1, #5
 8003900:	69f9      	ldr	r1, [r7, #28]
 8003902:	4401      	add	r1, r0
 8003904:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003908:	4313      	orrs	r3, r2
 800390a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	8af9      	ldrh	r1, [r7, #22]
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003928:	69b9      	ldr	r1, [r7, #24]
 800392a:	0148      	lsls	r0, r1, #5
 800392c:	69f9      	ldr	r1, [r7, #28]
 800392e:	4401      	add	r1, r0
 8003930:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003934:	4313      	orrs	r3, r2
 8003936:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d10d      	bne.n	800395a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	68d9      	ldr	r1, [r3, #12]
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003956:	460a      	mov	r2, r1
 8003958:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	78db      	ldrb	r3, [r3, #3]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d128      	bne.n	80039b4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d110      	bne.n	8003994 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	0151      	lsls	r1, r2, #5
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	440a      	add	r2, r1
 8003988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800398c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	e00f      	b.n	80039b4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	0151      	lsls	r1, r2, #5
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	440a      	add	r2, r1
 80039aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	0151      	lsls	r1, r2, #5
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	440a      	add	r2, r1
 80039ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	1ff80000 	.word	0x1ff80000

080039e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	4613      	mov	r3, r2
 80039f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	785b      	ldrb	r3, [r3, #1]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	f040 80cd 	bne.w	8003ba0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d132      	bne.n	8003a74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	0151      	lsls	r1, r2, #5
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	440a      	add	r2, r1
 8003a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	0151      	lsls	r1, r2, #5
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	440a      	add	r2, r1
 8003a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	0151      	lsls	r1, r2, #5
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	440a      	add	r2, r1
 8003a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a6c:	0cdb      	lsrs	r3, r3, #19
 8003a6e:	04db      	lsls	r3, r3, #19
 8003a70:	6113      	str	r3, [r2, #16]
 8003a72:	e04e      	b.n	8003b12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a8e:	0cdb      	lsrs	r3, r3, #19
 8003a90:	04db      	lsls	r3, r3, #19
 8003a92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	0151      	lsls	r1, r2, #5
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	440a      	add	r2, r1
 8003aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ab2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ab6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	695a      	ldr	r2, [r3, #20]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d903      	bls.n	8003acc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	0151      	lsls	r1, r2, #5
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	440a      	add	r2, r1
 8003ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ae6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003aea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b02:	6939      	ldr	r1, [r7, #16]
 8003b04:	0148      	lsls	r0, r1, #5
 8003b06:	6979      	ldr	r1, [r7, #20]
 8003b08:	4401      	add	r1, r0
 8003b0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d11e      	bne.n	8003b56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d009      	beq.n	8003b34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	0151      	lsls	r1, r2, #5
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	440a      	add	r2, r1
 8003b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	e092      	b.n	8003c7c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	0151      	lsls	r1, r2, #5
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	440a      	add	r2, r1
 8003b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d07e      	beq.n	8003c7c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	2101      	movs	r1, #1
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	6979      	ldr	r1, [r7, #20]
 8003b96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	634b      	str	r3, [r1, #52]	; 0x34
 8003b9e:	e06d      	b.n	8003c7c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	0151      	lsls	r1, r2, #5
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	440a      	add	r2, r1
 8003bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bba:	0cdb      	lsrs	r3, r3, #19
 8003bbc:	04db      	lsls	r3, r3, #19
 8003bbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	0151      	lsls	r1, r2, #5
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	440a      	add	r2, r1
 8003bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bde:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003be2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	0151      	lsls	r1, r2, #5
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	440a      	add	r2, r1
 8003c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c2a:	6939      	ldr	r1, [r7, #16]
 8003c2c:	0148      	lsls	r0, r1, #5
 8003c2e:	6979      	ldr	r1, [r7, #20]
 8003c30:	4401      	add	r1, r0
 8003c32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c36:	4313      	orrs	r3, r2
 8003c38:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d10d      	bne.n	8003c5c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d009      	beq.n	8003c5c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	68d9      	ldr	r1, [r3, #12]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c58:	460a      	mov	r2, r1
 8003c5a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	0151      	lsls	r1, r2, #5
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	440a      	add	r2, r1
 8003c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b089      	sub	sp, #36	; 0x24
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	4611      	mov	r1, r2
 8003c96:	461a      	mov	r2, r3
 8003c98:	460b      	mov	r3, r1
 8003c9a:	71fb      	strb	r3, [r7, #7]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003ca8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d123      	bne.n	8003cf8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003cb0:	88bb      	ldrh	r3, [r7, #4]
 8003cb2:	3303      	adds	r3, #3
 8003cb4:	089b      	lsrs	r3, r3, #2
 8003cb6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	e018      	b.n	8003cf0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	031a      	lsls	r2, r3, #12
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cca:	461a      	mov	r2, r3
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	3301      	adds	r3, #1
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d3e2      	bcc.n	8003cbe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3724      	adds	r7, #36	; 0x24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b08b      	sub	sp, #44	; 0x2c
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	4613      	mov	r3, r2
 8003d12:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	089b      	lsrs	r3, r3, #2
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003d24:	88fb      	ldrh	r3, [r7, #6]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	623b      	str	r3, [r7, #32]
 8003d30:	e014      	b.n	8003d5c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	3301      	adds	r3, #1
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	3301      	adds	r3, #1
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	3301      	adds	r3, #1
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	623b      	str	r3, [r7, #32]
 8003d5c:	6a3a      	ldr	r2, [r7, #32]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d3e6      	bcc.n	8003d32 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003d64:	8bfb      	ldrh	r3, [r7, #30]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d01e      	beq.n	8003da8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d74:	461a      	mov	r2, r3
 8003d76:	f107 0310 	add.w	r3, r7, #16
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	701a      	strb	r2, [r3, #0]
      i++;
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	3301      	adds	r3, #1
 8003d94:	623b      	str	r3, [r7, #32]
      pDest++;
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	3301      	adds	r3, #1
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003d9c:	8bfb      	ldrh	r3, [r7, #30]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003da2:	8bfb      	ldrh	r3, [r7, #30]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1ea      	bne.n	8003d7e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	372c      	adds	r7, #44	; 0x2c
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b085      	sub	sp, #20
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	785b      	ldrb	r3, [r3, #1]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d12c      	bne.n	8003e2c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	db12      	blt.n	8003e0a <USB_EPSetStall+0x54>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00f      	beq.n	8003e0a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	0151      	lsls	r1, r2, #5
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	440a      	add	r2, r1
 8003e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e08:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	0151      	lsls	r1, r2, #5
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	440a      	add	r2, r1
 8003e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e02b      	b.n	8003e84 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	db12      	blt.n	8003e64 <USB_EPSetStall+0xae>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00f      	beq.n	8003e64 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	0151      	lsls	r1, r2, #5
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	440a      	add	r2, r1
 8003e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e62:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b085      	sub	sp, #20
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	785b      	ldrb	r3, [r3, #1]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d128      	bne.n	8003f00 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	0151      	lsls	r1, r2, #5
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	440a      	add	r2, r1
 8003ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ecc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	78db      	ldrb	r3, [r3, #3]
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d003      	beq.n	8003ede <USB_EPClearStall+0x4c>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	78db      	ldrb	r3, [r3, #3]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d138      	bne.n	8003f50 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	0151      	lsls	r1, r2, #5
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	440a      	add	r2, r1
 8003ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e027      	b.n	8003f50 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	0151      	lsls	r1, r2, #5
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	440a      	add	r2, r1
 8003f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f1e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	78db      	ldrb	r3, [r3, #3]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d003      	beq.n	8003f30 <USB_EPClearStall+0x9e>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	78db      	ldrb	r3, [r3, #3]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d10f      	bne.n	8003f50 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f7c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f80:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003f92:	68f9      	ldr	r1, [r7, #12]
 8003f94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003fc4:	f023 0303 	bic.w	r3, r3, #3
 8003fc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fd8:	f023 0302 	bic.w	r3, r3, #2
 8003fdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800401a:	f043 0302 	orr.w	r3, r3, #2
 800401e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4013      	ands	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004046:	68fb      	ldr	r3, [r7, #12]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	4013      	ands	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	0c1b      	lsrs	r3, r3, #16
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	4013      	ands	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	b29b      	uxth	r3, r3
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040ea:	68bb      	ldr	r3, [r7, #8]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	fa22 f303 	lsr.w	r3, r2, r3
 8004128:	01db      	lsls	r3, r3, #7
 800412a:	b2db      	uxtb	r3, r3
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4013      	ands	r3, r2
 8004144:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004146:	68bb      	ldr	r3, [r7, #8]
}
 8004148:	4618      	mov	r0, r3
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f003 0301 	and.w	r3, r3, #1
}
 8004164:	4618      	mov	r0, r3
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800418a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800418e:	f023 0307 	bic.w	r3, r3, #7
 8004192:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	460b      	mov	r3, r1
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	333c      	adds	r3, #60	; 0x3c
 80041ce:	3304      	adds	r3, #4
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4a26      	ldr	r2, [pc, #152]	; (8004270 <USB_EP0_OutStart+0xb8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d90a      	bls.n	80041f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041ec:	d101      	bne.n	80041f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	e037      	b.n	8004262 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	461a      	mov	r2, r3
 80041fa:	2300      	movs	r3, #0
 80041fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800420c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004210:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004220:	f043 0318 	orr.w	r3, r3, #24
 8004224:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004234:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004238:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800423a:	7afb      	ldrb	r3, [r7, #11]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d10f      	bne.n	8004260 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	461a      	mov	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800425a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800425e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	4f54300a 	.word	0x4f54300a

08004274 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3301      	adds	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	4a13      	ldr	r2, [pc, #76]	; (80042d4 <USB_CoreReset+0x60>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d901      	bls.n	8004290 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e01a      	b.n	80042c6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	daf3      	bge.n	8004280 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f043 0201 	orr.w	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3301      	adds	r3, #1
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	4a09      	ldr	r2, [pc, #36]	; (80042d4 <USB_CoreReset+0x60>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e006      	b.n	80042c6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d0f1      	beq.n	80042a8 <USB_CoreReset+0x34>

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	00030d40 	.word	0x00030d40

080042d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 80042dc:	f001 f8f2 	bl	80054c4 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 80042e0:	2200      	movs	r2, #0
 80042e2:	4912      	ldr	r1, [pc, #72]	; (800432c <MX_USB_DEVICE_Init+0x54>)
 80042e4:	4812      	ldr	r0, [pc, #72]	; (8004330 <MX_USB_DEVICE_Init+0x58>)
 80042e6:	f001 f9af 	bl	8005648 <USBD_Init>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 80042f0:	f7fc fa20 	bl	8000734 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 80042f4:	490f      	ldr	r1, [pc, #60]	; (8004334 <MX_USB_DEVICE_Init+0x5c>)
 80042f6:	480e      	ldr	r0, [pc, #56]	; (8004330 <MX_USB_DEVICE_Init+0x58>)
 80042f8:	f001 f9d2 	bl	80056a0 <USBD_RegisterClass>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8004302:	f7fc fa17 	bl	8000734 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8004306:	490c      	ldr	r1, [pc, #48]	; (8004338 <MX_USB_DEVICE_Init+0x60>)
 8004308:	4809      	ldr	r0, [pc, #36]	; (8004330 <MX_USB_DEVICE_Init+0x58>)
 800430a:	f000 fe11 	bl	8004f30 <USBD_CDC_ACM_RegisterInterface>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8004314:	f7fc fa0e 	bl	8000734 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8004318:	4805      	ldr	r0, [pc, #20]	; (8004330 <MX_USB_DEVICE_Init+0x58>)
 800431a:	f001 f9ff 	bl	800571c <USBD_Start>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8004324:	f7fc fa06 	bl	8000734 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004328:	bf00      	nop
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20000020 	.word	0x20000020
 8004330:	20000678 	.word	0x20000678
 8004334:	20000150 	.word	0x20000150
 8004338:	2000000c 	.word	0x2000000c

0800433c <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	01db      	lsls	r3, r3, #7
 800434a:	4a06      	ldr	r2, [pc, #24]	; (8004364 <CDC_Init+0x28>)
 800434c:	441a      	add	r2, r3
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	4905      	ldr	r1, [pc, #20]	; (8004368 <CDC_Init+0x2c>)
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fe26 	bl	8004fa4 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 8004358:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20000994 	.word	0x20000994
 8004368:	20000678 	.word	0x20000678

0800436c <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 8004376:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	603a      	str	r2, [r7, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
 8004392:	460b      	mov	r3, r1
 8004394:	71bb      	strb	r3, [r7, #6]
 8004396:	4613      	mov	r3, r2
 8004398:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800439a:	79bb      	ldrb	r3, [r7, #6]
 800439c:	2b23      	cmp	r3, #35	; 0x23
 800439e:	f200 80b6 	bhi.w	800450e <CDC_Control+0x18a>
 80043a2:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <CDC_Control+0x24>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	0800450f 	.word	0x0800450f
 80043ac:	0800450f 	.word	0x0800450f
 80043b0:	0800450f 	.word	0x0800450f
 80043b4:	0800450f 	.word	0x0800450f
 80043b8:	0800450f 	.word	0x0800450f
 80043bc:	0800450f 	.word	0x0800450f
 80043c0:	0800450f 	.word	0x0800450f
 80043c4:	0800450f 	.word	0x0800450f
 80043c8:	0800450f 	.word	0x0800450f
 80043cc:	0800450f 	.word	0x0800450f
 80043d0:	0800450f 	.word	0x0800450f
 80043d4:	0800450f 	.word	0x0800450f
 80043d8:	0800450f 	.word	0x0800450f
 80043dc:	0800450f 	.word	0x0800450f
 80043e0:	0800450f 	.word	0x0800450f
 80043e4:	0800450f 	.word	0x0800450f
 80043e8:	0800450f 	.word	0x0800450f
 80043ec:	0800450f 	.word	0x0800450f
 80043f0:	0800450f 	.word	0x0800450f
 80043f4:	0800450f 	.word	0x0800450f
 80043f8:	0800450f 	.word	0x0800450f
 80043fc:	0800450f 	.word	0x0800450f
 8004400:	0800450f 	.word	0x0800450f
 8004404:	0800450f 	.word	0x0800450f
 8004408:	0800450f 	.word	0x0800450f
 800440c:	0800450f 	.word	0x0800450f
 8004410:	0800450f 	.word	0x0800450f
 8004414:	0800450f 	.word	0x0800450f
 8004418:	0800450f 	.word	0x0800450f
 800441c:	0800450f 	.word	0x0800450f
 8004420:	0800450f 	.word	0x0800450f
 8004424:	0800450f 	.word	0x0800450f
 8004428:	08004439 	.word	0x08004439
 800442c:	08004499 	.word	0x08004499
 8004430:	0800450f 	.word	0x0800450f
 8004434:	0800450f 	.word	0x0800450f
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	3301      	adds	r3, #1
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	3302      	adds	r3, #2
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004450:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	3303      	adds	r3, #3
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	061b      	lsls	r3, r3, #24
 800445a:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	4611      	mov	r1, r2
 8004460:	4a2f      	ldr	r2, [pc, #188]	; (8004520 <CDC_Control+0x19c>)
 8004462:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	7911      	ldrb	r1, [r2, #4]
 800446c:	4a2c      	ldr	r2, [pc, #176]	; (8004520 <CDC_Control+0x19c>)
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4413      	add	r3, r2
 8004472:	460a      	mov	r2, r1
 8004474:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	7951      	ldrb	r1, [r2, #5]
 800447c:	4a28      	ldr	r2, [pc, #160]	; (8004520 <CDC_Control+0x19c>)
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4413      	add	r3, r2
 8004482:	460a      	mov	r2, r1
 8004484:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	7991      	ldrb	r1, [r2, #6]
 800448c:	4a24      	ldr	r2, [pc, #144]	; (8004520 <CDC_Control+0x19c>)
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	460a      	mov	r2, r1
 8004494:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 8004496:	e03b      	b.n	8004510 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8004498:	79fb      	ldrb	r3, [r7, #7]
 800449a:	4a21      	ldr	r2, [pc, #132]	; (8004520 <CDC_Control+0x19c>)
 800449c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 80044a6:	79fb      	ldrb	r3, [r7, #7]
 80044a8:	4a1d      	ldr	r2, [pc, #116]	; (8004520 <CDC_Control+0x19c>)
 80044aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044ae:	0a1a      	lsrs	r2, r3, #8
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	3301      	adds	r3, #1
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	4a19      	ldr	r2, [pc, #100]	; (8004520 <CDC_Control+0x19c>)
 80044bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044c0:	0c1a      	lsrs	r2, r3, #16
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	3302      	adds	r3, #2
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	4a14      	ldr	r2, [pc, #80]	; (8004520 <CDC_Control+0x19c>)
 80044ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044d2:	0e1a      	lsrs	r2, r3, #24
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	3303      	adds	r3, #3
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	3204      	adds	r2, #4
 80044e2:	490f      	ldr	r1, [pc, #60]	; (8004520 <CDC_Control+0x19c>)
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	440b      	add	r3, r1
 80044e8:	791b      	ldrb	r3, [r3, #4]
 80044ea:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	3205      	adds	r2, #5
 80044f2:	490b      	ldr	r1, [pc, #44]	; (8004520 <CDC_Control+0x19c>)
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	440b      	add	r3, r1
 80044f8:	795b      	ldrb	r3, [r3, #5]
 80044fa:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	3206      	adds	r2, #6
 8004502:	4907      	ldr	r1, [pc, #28]	; (8004520 <CDC_Control+0x19c>)
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	440b      	add	r3, r1
 8004508:	799b      	ldrb	r3, [r3, #6]
 800450a:	7013      	strb	r3, [r2, #0]
    break;
 800450c:	e000      	b.n	8004510 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800450e:	bf00      	nop
  }

  return (USBD_OK);
 8004510:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8004512:	4618      	mov	r0, r3
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20000a9c 	.word	0x20000a9c

08004524 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	b29a      	uxth	r2, r3
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	68b9      	ldr	r1, [r7, #8]
 800453c:	4618      	mov	r0, r3
 800453e:	f000 f825 	bl	800458c <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	4907      	ldr	r1, [pc, #28]	; (8004564 <CDC_Receive+0x40>)
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fd2b 	bl	8004fa4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	4904      	ldr	r1, [pc, #16]	; (8004564 <CDC_Receive+0x40>)
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fd86 	bl	8005064 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8004558:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000678 	.word	0x20000678

08004568 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	607a      	str	r2, [r7, #4]
 8004572:	461a      	mov	r2, r3
 8004574:	4603      	mov	r3, r0
 8004576:	73fb      	strb	r3, [r7, #15]
 8004578:	4613      	mov	r3, r2
 800457a:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
	...

0800458c <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	6039      	str	r1, [r7, #0]
 8004596:	71fb      	strb	r3, [r7, #7]
 8004598:	4613      	mov	r3, r2
 800459a:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80045aa:	fb02 f303 	mul.w	r3, r2, r3
 80045ae:	4a0e      	ldr	r2, [pc, #56]	; (80045e8 <CDC_Transmit+0x5c>)
 80045b0:	4413      	add	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 80045be:	2301      	movs	r3, #1
 80045c0:	e00d      	b.n	80045de <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 80045c2:	88bb      	ldrh	r3, [r7, #4]
 80045c4:	79f8      	ldrb	r0, [r7, #7]
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	4908      	ldr	r1, [pc, #32]	; (80045ec <CDC_Transmit+0x60>)
 80045ca:	f000 fcc7 	bl	8004f5c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	4906      	ldr	r1, [pc, #24]	; (80045ec <CDC_Transmit+0x60>)
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fd04 	bl	8004fe0 <USBD_CDC_TransmitPacket>
 80045d8:	4603      	mov	r3, r0
 80045da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20000cb0 	.word	0x20000cb0
 80045ec:	20000678 	.word	0x20000678

080045f0 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	6039      	str	r1, [r7, #0]
 80045fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2212      	movs	r2, #18
 8004600:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8004602:	4b03      	ldr	r3, [pc, #12]	; (8004610 <USBD_DeviceDescriptor+0x20>)
}
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	2000003c 	.word	0x2000003c

08004614 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2204      	movs	r2, #4
 8004624:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004626:	4b03      	ldr	r3, [pc, #12]	; (8004634 <USBD_LangIDStrDescriptor+0x20>)
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	20000050 	.word	0x20000050

08004638 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	6039      	str	r1, [r7, #0]
 8004642:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d105      	bne.n	8004656 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	4907      	ldr	r1, [pc, #28]	; (800466c <USBD_ProductStrDescriptor+0x34>)
 800464e:	4808      	ldr	r0, [pc, #32]	; (8004670 <USBD_ProductStrDescriptor+0x38>)
 8004650:	f002 f8a3 	bl	800679a <USBD_GetString>
 8004654:	e004      	b.n	8004660 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	4904      	ldr	r1, [pc, #16]	; (800466c <USBD_ProductStrDescriptor+0x34>)
 800465a:	4805      	ldr	r0, [pc, #20]	; (8004670 <USBD_ProductStrDescriptor+0x38>)
 800465c:	f002 f89d 	bl	800679a <USBD_GetString>
  }
  return USBD_StrDesc;
 8004660:	4b02      	ldr	r3, [pc, #8]	; (800466c <USBD_ProductStrDescriptor+0x34>)
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000aa4 	.word	0x20000aa4
 8004670:	080077b4 	.word	0x080077b4

08004674 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	6039      	str	r1, [r7, #0]
 800467e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	4904      	ldr	r1, [pc, #16]	; (8004694 <USBD_ManufacturerStrDescriptor+0x20>)
 8004684:	4804      	ldr	r0, [pc, #16]	; (8004698 <USBD_ManufacturerStrDescriptor+0x24>)
 8004686:	f002 f888 	bl	800679a <USBD_GetString>
  return USBD_StrDesc;
 800468a:	4b02      	ldr	r3, [pc, #8]	; (8004694 <USBD_ManufacturerStrDescriptor+0x20>)
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	20000aa4 	.word	0x20000aa4
 8004698:	080077cc 	.word	0x080077cc

0800469c <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	6039      	str	r1, [r7, #0]
 80046a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	221a      	movs	r2, #26
 80046ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80046ae:	f000 f843 	bl	8004738 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80046b2:	4b02      	ldr	r3, [pc, #8]	; (80046bc <USBD_SerialStrDescriptor+0x20>)
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	20000054 	.word	0x20000054

080046c0 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	6039      	str	r1, [r7, #0]
 80046ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d105      	bne.n	80046de <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	4907      	ldr	r1, [pc, #28]	; (80046f4 <USBD_ConfigStrDescriptor+0x34>)
 80046d6:	4808      	ldr	r0, [pc, #32]	; (80046f8 <USBD_ConfigStrDescriptor+0x38>)
 80046d8:	f002 f85f 	bl	800679a <USBD_GetString>
 80046dc:	e004      	b.n	80046e8 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	4904      	ldr	r1, [pc, #16]	; (80046f4 <USBD_ConfigStrDescriptor+0x34>)
 80046e2:	4805      	ldr	r0, [pc, #20]	; (80046f8 <USBD_ConfigStrDescriptor+0x38>)
 80046e4:	f002 f859 	bl	800679a <USBD_GetString>
  }
  return USBD_StrDesc;
 80046e8:	4b02      	ldr	r3, [pc, #8]	; (80046f4 <USBD_ConfigStrDescriptor+0x34>)
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000aa4 	.word	0x20000aa4
 80046f8:	080077e0 	.word	0x080077e0

080046fc <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	6039      	str	r1, [r7, #0]
 8004706:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004708:	79fb      	ldrb	r3, [r7, #7]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d105      	bne.n	800471a <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	4907      	ldr	r1, [pc, #28]	; (8004730 <USBD_InterfaceStrDescriptor+0x34>)
 8004712:	4808      	ldr	r0, [pc, #32]	; (8004734 <USBD_InterfaceStrDescriptor+0x38>)
 8004714:	f002 f841 	bl	800679a <USBD_GetString>
 8004718:	e004      	b.n	8004724 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	4904      	ldr	r1, [pc, #16]	; (8004730 <USBD_InterfaceStrDescriptor+0x34>)
 800471e:	4805      	ldr	r0, [pc, #20]	; (8004734 <USBD_InterfaceStrDescriptor+0x38>)
 8004720:	f002 f83b 	bl	800679a <USBD_GetString>
  }
  return USBD_StrDesc;
 8004724:	4b02      	ldr	r3, [pc, #8]	; (8004730 <USBD_InterfaceStrDescriptor+0x34>)
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000aa4 	.word	0x20000aa4
 8004734:	080077f0 	.word	0x080077f0

08004738 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800473e:	4b0f      	ldr	r3, [pc, #60]	; (800477c <Get_SerialNum+0x44>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004744:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <Get_SerialNum+0x48>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800474a:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <Get_SerialNum+0x4c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4413      	add	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d009      	beq.n	8004772 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800475e:	2208      	movs	r2, #8
 8004760:	4909      	ldr	r1, [pc, #36]	; (8004788 <Get_SerialNum+0x50>)
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f814 	bl	8004790 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004768:	2204      	movs	r2, #4
 800476a:	4908      	ldr	r1, [pc, #32]	; (800478c <Get_SerialNum+0x54>)
 800476c:	68b8      	ldr	r0, [r7, #8]
 800476e:	f000 f80f 	bl	8004790 <IntToUnicode>
  }
}
 8004772:	bf00      	nop
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	1fff7a10 	.word	0x1fff7a10
 8004780:	1fff7a14 	.word	0x1fff7a14
 8004784:	1fff7a18 	.word	0x1fff7a18
 8004788:	20000056 	.word	0x20000056
 800478c:	20000066 	.word	0x20000066

08004790 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	4613      	mov	r3, r2
 800479c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800479e:	2300      	movs	r3, #0
 80047a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80047a2:	2300      	movs	r3, #0
 80047a4:	75fb      	strb	r3, [r7, #23]
 80047a6:	e027      	b.n	80047f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	0f1b      	lsrs	r3, r3, #28
 80047ac:	2b09      	cmp	r3, #9
 80047ae:	d80b      	bhi.n	80047c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	0f1b      	lsrs	r3, r3, #28
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	7dfb      	ldrb	r3, [r7, #23]
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	4619      	mov	r1, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	440b      	add	r3, r1
 80047c0:	3230      	adds	r2, #48	; 0x30
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	e00a      	b.n	80047de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	0f1b      	lsrs	r3, r3, #28
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	4619      	mov	r1, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	440b      	add	r3, r1
 80047d8:	3237      	adds	r2, #55	; 0x37
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	3301      	adds	r3, #1
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	4413      	add	r3, r2
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
 80047f4:	3301      	adds	r3, #1
 80047f6:	75fb      	strb	r3, [r7, #23]
 80047f8:	7dfa      	ldrb	r2, [r7, #23]
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d3d3      	bcc.n	80047a8 <IntToUnicode+0x18>
  }
}
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
	...

08004810 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800481c:	2300      	movs	r3, #0
 800481e:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004820:	2300      	movs	r3, #0
 8004822:	73fb      	strb	r3, [r7, #15]
 8004824:	e0c6      	b.n	80049b4 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800482c:	fb02 f303 	mul.w	r3, r2, r3
 8004830:	4a65      	ldr	r2, [pc, #404]	; (80049c8 <USBD_CDC_Init+0x1b8>)
 8004832:	4413      	add	r3, r2
 8004834:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	7c1b      	ldrb	r3, [r3, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d13d      	bne.n	80048ba <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	4a62      	ldr	r2, [pc, #392]	; (80049cc <USBD_CDC_Init+0x1bc>)
 8004842:	5cd1      	ldrb	r1, [r2, r3]
 8004844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004848:	2202      	movs	r2, #2
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f002 f9e3 	bl	8006c16 <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	4a5e      	ldr	r2, [pc, #376]	; (80049cc <USBD_CDC_Init+0x1bc>)
 8004854:	5cd3      	ldrb	r3, [r2, r3]
 8004856:	f003 020f 	and.w	r2, r3, #15
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	3324      	adds	r3, #36	; 0x24
 8004868:	2201      	movs	r2, #1
 800486a:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	4a58      	ldr	r2, [pc, #352]	; (80049d0 <USBD_CDC_Init+0x1c0>)
 8004870:	5cd1      	ldrb	r1, [r2, r3]
 8004872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004876:	2202      	movs	r2, #2
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f002 f9cc 	bl	8006c16 <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	4a53      	ldr	r2, [pc, #332]	; (80049d0 <USBD_CDC_Init+0x1c0>)
 8004882:	5cd3      	ldrb	r3, [r2, r3]
 8004884:	f003 020f 	and.w	r2, r3, #15
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004898:	2201      	movs	r2, #1
 800489a:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	4a4d      	ldr	r2, [pc, #308]	; (80049d4 <USBD_CDC_Init+0x1c4>)
 80048a0:	5cd3      	ldrb	r3, [r2, r3]
 80048a2:	f003 020f 	and.w	r2, r3, #15
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	3326      	adds	r3, #38	; 0x26
 80048b4:	2210      	movs	r2, #16
 80048b6:	801a      	strh	r2, [r3, #0]
 80048b8:	e03a      	b.n	8004930 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
 80048bc:	4a43      	ldr	r2, [pc, #268]	; (80049cc <USBD_CDC_Init+0x1bc>)
 80048be:	5cd1      	ldrb	r1, [r2, r3]
 80048c0:	2340      	movs	r3, #64	; 0x40
 80048c2:	2202      	movs	r2, #2
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f002 f9a6 	bl	8006c16 <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	4a3f      	ldr	r2, [pc, #252]	; (80049cc <USBD_CDC_Init+0x1bc>)
 80048ce:	5cd3      	ldrb	r3, [r2, r3]
 80048d0:	f003 020f 	and.w	r2, r3, #15
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	3324      	adds	r3, #36	; 0x24
 80048e2:	2201      	movs	r2, #1
 80048e4:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	4a39      	ldr	r2, [pc, #228]	; (80049d0 <USBD_CDC_Init+0x1c0>)
 80048ea:	5cd1      	ldrb	r1, [r2, r3]
 80048ec:	2340      	movs	r3, #64	; 0x40
 80048ee:	2202      	movs	r2, #2
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f002 f990 	bl	8006c16 <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	4a35      	ldr	r2, [pc, #212]	; (80049d0 <USBD_CDC_Init+0x1c0>)
 80048fa:	5cd3      	ldrb	r3, [r2, r3]
 80048fc:	f003 020f 	and.w	r2, r3, #15
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004910:	2201      	movs	r2, #1
 8004912:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	4a2f      	ldr	r2, [pc, #188]	; (80049d4 <USBD_CDC_Init+0x1c4>)
 8004918:	5cd3      	ldrb	r3, [r2, r3]
 800491a:	f003 020f 	and.w	r2, r3, #15
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	3326      	adds	r3, #38	; 0x26
 800492c:	2210      	movs	r2, #16
 800492e:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	4a28      	ldr	r2, [pc, #160]	; (80049d4 <USBD_CDC_Init+0x1c4>)
 8004934:	5cd1      	ldrb	r1, [r2, r3]
 8004936:	2308      	movs	r3, #8
 8004938:	2203      	movs	r2, #3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f002 f96b 	bl	8006c16 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	4a24      	ldr	r2, [pc, #144]	; (80049d4 <USBD_CDC_Init+0x1c4>)
 8004944:	5cd3      	ldrb	r3, [r2, r3]
 8004946:	f003 020f 	and.w	r2, r3, #15
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	3324      	adds	r3, #36	; 0x24
 8004958:	2201      	movs	r2, #1
 800495a:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	7bfa      	ldrb	r2, [r7, #15]
 8004966:	4610      	mov	r0, r2
 8004968:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2200      	movs	r2, #0
 800496e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2200      	movs	r2, #0
 8004976:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	7c1b      	ldrb	r3, [r3, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10b      	bne.n	800499a <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	4a12      	ldr	r2, [pc, #72]	; (80049d0 <USBD_CDC_Init+0x1c0>)
 8004986:	5cd1      	ldrb	r1, [r2, r3]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800498e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f002 fa2e 	bl	8006df4 <USBD_LL_PrepareReceive>
 8004998:	e009      	b.n	80049ae <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	4a0c      	ldr	r2, [pc, #48]	; (80049d0 <USBD_CDC_Init+0x1c0>)
 800499e:	5cd1      	ldrb	r1, [r2, r3]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80049a6:	2340      	movs	r3, #64	; 0x40
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f002 fa23 	bl	8006df4 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	3301      	adds	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f43f af35 	beq.w	8004826 <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000cb0 	.word	0x20000cb0
 80049cc:	20000ca8 	.word	0x20000ca8
 80049d0:	20000ca4 	.word	0x20000ca4
 80049d4:	20000ed4 	.word	0x20000ed4

080049d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80049e4:	2300      	movs	r3, #0
 80049e6:	73fb      	strb	r3, [r7, #15]
 80049e8:	e057      	b.n	8004a9a <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	4a2f      	ldr	r2, [pc, #188]	; (8004aac <USBD_CDC_DeInit+0xd4>)
 80049ee:	5cd3      	ldrb	r3, [r2, r3]
 80049f0:	4619      	mov	r1, r3
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f002 f935 	bl	8006c62 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	4a2c      	ldr	r2, [pc, #176]	; (8004aac <USBD_CDC_DeInit+0xd4>)
 80049fc:	5cd3      	ldrb	r3, [r2, r3]
 80049fe:	f003 020f 	and.w	r2, r3, #15
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	3324      	adds	r3, #36	; 0x24
 8004a10:	2200      	movs	r2, #0
 8004a12:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	4a26      	ldr	r2, [pc, #152]	; (8004ab0 <USBD_CDC_DeInit+0xd8>)
 8004a18:	5cd3      	ldrb	r3, [r2, r3]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f002 f920 	bl	8006c62 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	4a22      	ldr	r2, [pc, #136]	; (8004ab0 <USBD_CDC_DeInit+0xd8>)
 8004a26:	5cd3      	ldrb	r3, [r2, r3]
 8004a28:	f003 020f 	and.w	r2, r3, #15
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	4a1c      	ldr	r2, [pc, #112]	; (8004ab4 <USBD_CDC_DeInit+0xdc>)
 8004a44:	5cd3      	ldrb	r3, [r2, r3]
 8004a46:	4619      	mov	r1, r3
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f002 f90a 	bl	8006c62 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	4a18      	ldr	r2, [pc, #96]	; (8004ab4 <USBD_CDC_DeInit+0xdc>)
 8004a52:	5cd3      	ldrb	r3, [r2, r3]
 8004a54:	f003 020f 	and.w	r2, r3, #15
 8004a58:	6879      	ldr	r1, [r7, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	440b      	add	r3, r1
 8004a64:	3324      	adds	r3, #36	; 0x24
 8004a66:	2200      	movs	r2, #0
 8004a68:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	4a11      	ldr	r2, [pc, #68]	; (8004ab4 <USBD_CDC_DeInit+0xdc>)
 8004a6e:	5cd3      	ldrb	r3, [r2, r3]
 8004a70:	f003 020f 	and.w	r2, r3, #15
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	3326      	adds	r3, #38	; 0x26
 8004a82:	2200      	movs	r2, #0
 8004a84:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	7bfa      	ldrb	r2, [r7, #15]
 8004a90:	4610      	mov	r0, r2
 8004a92:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	3301      	adds	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0a4      	beq.n	80049ea <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000ca8 	.word	0x20000ca8
 8004ab0:	20000ca4 	.word	0x20000ca4
 8004ab4:	20000ed4 	.word	0x20000ed4

08004ab8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004ab8:	b590      	push	{r4, r7, lr}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	757b      	strb	r3, [r7, #21]
 8004ada:	e015      	b.n	8004b08 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	889b      	ldrh	r3, [r3, #4]
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	7d7b      	ldrb	r3, [r7, #21]
 8004ae4:	496d      	ldr	r1, [pc, #436]	; (8004c9c <USBD_CDC_Setup+0x1e4>)
 8004ae6:	5ccb      	ldrb	r3, [r1, r3]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d007      	beq.n	8004afc <USBD_CDC_Setup+0x44>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	889b      	ldrh	r3, [r3, #4]
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	7d7b      	ldrb	r3, [r7, #21]
 8004af4:	496a      	ldr	r1, [pc, #424]	; (8004ca0 <USBD_CDC_Setup+0x1e8>)
 8004af6:	5ccb      	ldrb	r3, [r1, r3]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d102      	bne.n	8004b02 <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 8004afc:	7d7b      	ldrb	r3, [r7, #21]
 8004afe:	75bb      	strb	r3, [r7, #22]
      break;
 8004b00:	e005      	b.n	8004b0e <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004b02:	7d7b      	ldrb	r3, [r7, #21]
 8004b04:	3301      	adds	r3, #1
 8004b06:	757b      	strb	r3, [r7, #21]
 8004b08:	7d7b      	ldrb	r3, [r7, #21]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0e6      	beq.n	8004adc <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 8004b0e:	7dbb      	ldrb	r3, [r7, #22]
 8004b10:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004b14:	fb02 f303 	mul.w	r3, r2, r3
 8004b18:	4a62      	ldr	r2, [pc, #392]	; (8004ca4 <USBD_CDC_Setup+0x1ec>)
 8004b1a:	4413      	add	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d04a      	beq.n	8004bc0 <USBD_CDC_Setup+0x108>
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	f040 80aa 	bne.w	8004c84 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	88db      	ldrh	r3, [r3, #6]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d038      	beq.n	8004baa <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	b25b      	sxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	da1d      	bge.n	8004b7e <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b48:	689c      	ldr	r4, [r3, #8]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	7859      	ldrb	r1, [r3, #1]
 8004b4e:	7dbb      	ldrb	r3, [r7, #22]
 8004b50:	025b      	lsls	r3, r3, #9
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	441a      	add	r2, r3
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	88db      	ldrh	r3, [r3, #6]
 8004b5a:	7db8      	ldrb	r0, [r7, #22]
 8004b5c:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	88db      	ldrh	r3, [r3, #6]
 8004b62:	2b07      	cmp	r3, #7
 8004b64:	bf28      	it	cs
 8004b66:	2307      	movcs	r3, #7
 8004b68:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 8004b6a:	7dbb      	ldrb	r3, [r7, #22]
 8004b6c:	025b      	lsls	r3, r3, #9
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4413      	add	r3, r2
 8004b72:	89fa      	ldrh	r2, [r7, #14]
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f001 fe6f 	bl	800685a <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8004b7c:	e089      	b.n	8004c92 <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	785a      	ldrb	r2, [r3, #1]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	88db      	ldrh	r3, [r3, #6]
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8004b94:	7dbb      	ldrb	r3, [r7, #22]
 8004b96:	025b      	lsls	r3, r3, #9
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	18d1      	adds	r1, r2, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	88db      	ldrh	r3, [r3, #6]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f001 fe85 	bl	80068b2 <USBD_CtlPrepareRx>
    break;
 8004ba8:	e073      	b.n	8004c92 <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bb0:	689c      	ldr	r4, [r3, #8]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	7859      	ldrb	r1, [r3, #1]
 8004bb6:	7db8      	ldrb	r0, [r7, #22]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	47a0      	blx	r4
    break;
 8004bbe:	e068      	b.n	8004c92 <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	785b      	ldrb	r3, [r3, #1]
 8004bc4:	2b0b      	cmp	r3, #11
 8004bc6:	d852      	bhi.n	8004c6e <USBD_CDC_Setup+0x1b6>
 8004bc8:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <USBD_CDC_Setup+0x118>)
 8004bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bce:	bf00      	nop
 8004bd0:	08004c01 	.word	0x08004c01
 8004bd4:	08004c7d 	.word	0x08004c7d
 8004bd8:	08004c6f 	.word	0x08004c6f
 8004bdc:	08004c6f 	.word	0x08004c6f
 8004be0:	08004c6f 	.word	0x08004c6f
 8004be4:	08004c6f 	.word	0x08004c6f
 8004be8:	08004c6f 	.word	0x08004c6f
 8004bec:	08004c6f 	.word	0x08004c6f
 8004bf0:	08004c6f 	.word	0x08004c6f
 8004bf4:	08004c6f 	.word	0x08004c6f
 8004bf8:	08004c2b 	.word	0x08004c2b
 8004bfc:	08004c55 	.word	0x08004c55
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b03      	cmp	r3, #3
 8004c0a:	d107      	bne.n	8004c1c <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004c0c:	f107 030a 	add.w	r3, r7, #10
 8004c10:	2202      	movs	r2, #2
 8004c12:	4619      	mov	r1, r3
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f001 fe20 	bl	800685a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004c1a:	e032      	b.n	8004c82 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8004c1c:	6839      	ldr	r1, [r7, #0]
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f001 fdaa 	bl	8006778 <USBD_CtlError>
        ret = USBD_FAIL;
 8004c24:	2303      	movs	r3, #3
 8004c26:	75fb      	strb	r3, [r7, #23]
      break;
 8004c28:	e02b      	b.n	8004c82 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d107      	bne.n	8004c46 <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c36:	f107 030d 	add.w	r3, r7, #13
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f001 fe0b 	bl	800685a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004c44:	e01d      	b.n	8004c82 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8004c46:	6839      	ldr	r1, [r7, #0]
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f001 fd95 	bl	8006778 <USBD_CtlError>
        ret = USBD_FAIL;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	75fb      	strb	r3, [r7, #23]
      break;
 8004c52:	e016      	b.n	8004c82 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d00f      	beq.n	8004c80 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8004c60:	6839      	ldr	r1, [r7, #0]
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f001 fd88 	bl	8006778 <USBD_CtlError>
        ret = USBD_FAIL;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c6c:	e008      	b.n	8004c80 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004c6e:	6839      	ldr	r1, [r7, #0]
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f001 fd81 	bl	8006778 <USBD_CtlError>
      ret = USBD_FAIL;
 8004c76:	2303      	movs	r3, #3
 8004c78:	75fb      	strb	r3, [r7, #23]
      break;
 8004c7a:	e002      	b.n	8004c82 <USBD_CDC_Setup+0x1ca>
      break;
 8004c7c:	bf00      	nop
 8004c7e:	e008      	b.n	8004c92 <USBD_CDC_Setup+0x1da>
      break;
 8004c80:	bf00      	nop
    }
    break;
 8004c82:	e006      	b.n	8004c92 <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8004c84:	6839      	ldr	r1, [r7, #0]
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f001 fd76 	bl	8006778 <USBD_CtlError>
    ret = USBD_FAIL;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	75fb      	strb	r3, [r7, #23]
    break;
 8004c90:	bf00      	nop
  }

  return (uint8_t)ret;
 8004c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd90      	pop	{r4, r7, pc}
 8004c9c:	20000cac 	.word	0x20000cac
 8004ca0:	20000ed0 	.word	0x20000ed0
 8004ca4:	20000cb0 	.word	0x20000cb0

08004ca8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ca8:	b590      	push	{r4, r7, lr}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8004cbe:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	75bb      	strb	r3, [r7, #22]
 8004cc8:	e00d      	b.n	8004ce6 <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 8004cca:	78fa      	ldrb	r2, [r7, #3]
 8004ccc:	7dbb      	ldrb	r3, [r7, #22]
 8004cce:	4934      	ldr	r1, [pc, #208]	; (8004da0 <USBD_CDC_DataIn+0xf8>)
 8004cd0:	5ccb      	ldrb	r3, [r1, r3]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d102      	bne.n	8004ce0 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8004cda:	7dbb      	ldrb	r3, [r7, #22]
 8004cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8004cde:	e005      	b.n	8004cec <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004ce0:	7dbb      	ldrb	r3, [r7, #22]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	75bb      	strb	r3, [r7, #22]
 8004ce6:	7dbb      	ldrb	r3, [r7, #22]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0ee      	beq.n	8004cca <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8004cec:	7dfb      	ldrb	r3, [r7, #23]
 8004cee:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004cf2:	fb02 f303 	mul.w	r3, r2, r3
 8004cf6:	4a2b      	ldr	r2, [pc, #172]	; (8004da4 <USBD_CDC_DataIn+0xfc>)
 8004cf8:	4413      	add	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	3318      	adds	r3, #24
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d029      	beq.n	8004d66 <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004d12:	78fa      	ldrb	r2, [r7, #3]
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	4613      	mov	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	440b      	add	r3, r1
 8004d20:	3318      	adds	r3, #24
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	78f9      	ldrb	r1, [r7, #3]
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	1a5b      	subs	r3, r3, r1
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4403      	add	r3, r0
 8004d32:	3344      	adds	r3, #68	; 0x44
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d3a:	fb03 f301 	mul.w	r3, r3, r1
 8004d3e:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d110      	bne.n	8004d66 <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004d44:	78fa      	ldrb	r2, [r7, #3]
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	3318      	adds	r3, #24
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004d58:	78f9      	ldrb	r1, [r7, #3]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f002 f827 	bl	8006db2 <USBD_LL_Transmit>
 8004d64:	e016      	b.n	8004d94 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00c      	beq.n	8004d94 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d80:	691c      	ldr	r4, [r3, #16]
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	7df8      	ldrb	r0, [r7, #23]
 8004d92:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd90      	pop	{r4, r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000ca8 	.word	0x20000ca8
 8004da4:	20000cb0 	.word	0x20000cb0

08004da8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	73bb      	strb	r3, [r7, #14]
 8004dc0:	e00b      	b.n	8004dda <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8004dc2:	7bbb      	ldrb	r3, [r7, #14]
 8004dc4:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <USBD_CDC_DataOut+0x7c>)
 8004dc6:	5cd3      	ldrb	r3, [r2, r3]
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d102      	bne.n	8004dd4 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8004dce:	7bbb      	ldrb	r3, [r7, #14]
 8004dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd2:	e005      	b.n	8004de0 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004dd4:	7bbb      	ldrb	r3, [r7, #14]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	73bb      	strb	r3, [r7, #14]
 8004dda:	7bbb      	ldrb	r3, [r7, #14]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004de6:	fb02 f303 	mul.w	r3, r2, r3
 8004dea:	4a0f      	ldr	r2, [pc, #60]	; (8004e28 <USBD_CDC_DataOut+0x80>)
 8004dec:	4413      	add	r3, r2
 8004dee:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	4619      	mov	r1, r3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f002 f81e 	bl	8006e36 <USBD_LL_GetRxDataSize>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004e16:	7bf8      	ldrb	r0, [r7, #15]
 8004e18:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	20000ca4 	.word	0x20000ca4
 8004e28:	20000cb0 	.word	0x20000cb0

08004e2c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004e2c:	b590      	push	{r4, r7, lr}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60bb      	str	r3, [r7, #8]

  if (hcdc == NULL)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <USBD_CDC_EP0_RxReady+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e030      	b.n	8004ea4 <USBD_CDC_EP0_RxReady+0x78>
  }

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004e42:	2300      	movs	r3, #0
 8004e44:	73fb      	strb	r3, [r7, #15]
 8004e46:	e029      	b.n	8004e9c <USBD_CDC_EP0_RxReady+0x70>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	4a16      	ldr	r2, [pc, #88]	; (8004eac <USBD_CDC_EP0_RxReady+0x80>)
 8004e54:	4413      	add	r3, r2
 8004e56:	60bb      	str	r3, [r7, #8]

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d019      	beq.n	8004e96 <USBD_CDC_EP0_RxReady+0x6a>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004e68:	2bff      	cmp	r3, #255	; 0xff
 8004e6a:	d014      	beq.n	8004e96 <USBD_CDC_EP0_RxReady+0x6a>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e72:	689c      	ldr	r4, [r3, #8]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	025b      	lsls	r3, r3, #9
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	441a      	add	r2, r3
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	7bf8      	ldrb	r0, [r7, #15]
 8004e8c:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	22ff      	movs	r2, #255	; 0xff
 8004e92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	73fb      	strb	r3, [r7, #15]
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0d2      	beq.n	8004e48 <USBD_CDC_EP0_RxReady+0x1c>
    }
  }

  return (uint8_t)USBD_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd90      	pop	{r4, r7, pc}
 8004eac:	20000cb0 	.word	0x20000cb0

08004eb0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	224b      	movs	r2, #75	; 0x4b
 8004ebc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004ebe:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	20000104 	.word	0x20000104

08004ed0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	224b      	movs	r2, #75	; 0x4b
 8004edc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004ede:	4b03      	ldr	r3, [pc, #12]	; (8004eec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	200000b8 	.word	0x200000b8

08004ef0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	224b      	movs	r2, #75	; 0x4b
 8004efc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004efe:	4b03      	ldr	r3, [pc, #12]	; (8004f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	20000104 	.word	0x20000104

08004f10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	220a      	movs	r2, #10
 8004f1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004f1e:	4b03      	ldr	r3, [pc, #12]	; (8004f2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	20000070 	.word	0x20000070

08004f30 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e004      	b.n	8004f4e <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
	...

08004f5c <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	4603      	mov	r3, r0
 8004f6a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004f76:	fb02 f303 	mul.w	r3, r2, r3
 8004f7a:	4a09      	ldr	r2, [pc, #36]	; (8004fa0 <USBD_CDC_SetTxBuffer+0x44>)
 8004f7c:	4413      	add	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	20000cb0 	.word	0x20000cb0

08004fa4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
 8004fb8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004fbc:	fb02 f303 	mul.w	r3, r2, r3
 8004fc0:	4a06      	ldr	r2, [pc, #24]	; (8004fdc <USBD_CDC_SetRxBuffer+0x38>)
 8004fc2:	4413      	add	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	20000cb0 	.word	0x20000cb0

08004fe0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	6039      	str	r1, [r7, #0]
 8004fea:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004ffa:	fb02 f303 	mul.w	r3, r2, r3
 8004ffe:	4a17      	ldr	r2, [pc, #92]	; (800505c <USBD_CDC_TransmitPacket+0x7c>)
 8005000:	4413      	add	r3, r2
 8005002:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800500a:	2b00      	cmp	r3, #0
 800500c:	d121      	bne.n	8005052 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2201      	movs	r2, #1
 8005012:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	4a11      	ldr	r2, [pc, #68]	; (8005060 <USBD_CDC_TransmitPacket+0x80>)
 800501a:	5cd3      	ldrb	r3, [r2, r3]
 800501c:	f003 020f 	and.w	r2, r3, #15
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005026:	6838      	ldr	r0, [r7, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4403      	add	r3, r0
 8005032:	3318      	adds	r3, #24
 8005034:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	4a09      	ldr	r2, [pc, #36]	; (8005060 <USBD_CDC_TransmitPacket+0x80>)
 800503a:	5cd1      	ldrb	r1, [r2, r3]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005048:	6838      	ldr	r0, [r7, #0]
 800504a:	f001 feb2 	bl	8006db2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005052:	7bfb      	ldrb	r3, [r7, #15]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	20000cb0 	.word	0x20000cb0
 8005060:	20000ca8 	.word	0x20000ca8

08005064 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	6039      	str	r1, [r7, #0]
 800506e:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800507a:	fb02 f303 	mul.w	r3, r2, r3
 800507e:	4a11      	ldr	r2, [pc, #68]	; (80050c4 <USBD_CDC_ReceivePacket+0x60>)
 8005080:	4413      	add	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	7c1b      	ldrb	r3, [r3, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10b      	bne.n	80050a4 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	4a0e      	ldr	r2, [pc, #56]	; (80050c8 <USBD_CDC_ReceivePacket+0x64>)
 8005090:	5cd1      	ldrb	r1, [r2, r3]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800509c:	6838      	ldr	r0, [r7, #0]
 800509e:	f001 fea9 	bl	8006df4 <USBD_LL_PrepareReceive>
 80050a2:	e009      	b.n	80050b8 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	4a08      	ldr	r2, [pc, #32]	; (80050c8 <USBD_CDC_ReceivePacket+0x64>)
 80050a8:	5cd1      	ldrb	r1, [r2, r3]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050b0:	2340      	movs	r3, #64	; 0x40
 80050b2:	6838      	ldr	r0, [r7, #0]
 80050b4:	f001 fe9e 	bl	8006df4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20000cb0 	.word	0x20000cb0
 80050c8:	20000ca4 	.word	0x20000ca4

080050cc <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	4608      	mov	r0, r1
 80050d6:	4611      	mov	r1, r2
 80050d8:	461a      	mov	r2, r3
 80050da:	4603      	mov	r3, r0
 80050dc:	70fb      	strb	r3, [r7, #3]
 80050de:	460b      	mov	r3, r1
 80050e0:	70bb      	strb	r3, [r7, #2]
 80050e2:	4613      	mov	r3, r2
 80050e4:	707b      	strb	r3, [r7, #1]
  desc += 9;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3309      	adds	r3, #9
 80050ea:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80050ec:	2300      	movs	r3, #0
 80050ee:	73fb      	strb	r3, [r7, #15]
 80050f0:	e05b      	b.n	80051aa <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3302      	adds	r3, #2
 80050f6:	78fa      	ldrb	r2, [r7, #3]
 80050f8:	701a      	strb	r2, [r3, #0]
    desc[7] = str_idx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3307      	adds	r3, #7
 80050fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005102:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	330a      	adds	r3, #10
 8005108:	78fa      	ldrb	r2, [r7, #3]
 800510a:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	331a      	adds	r3, #26
 8005110:	78ba      	ldrb	r2, [r7, #2]
 8005112:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3322      	adds	r3, #34	; 0x22
 8005118:	78fa      	ldrb	r2, [r7, #3]
 800511a:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3323      	adds	r3, #35	; 0x23
 8005120:	78ba      	ldrb	r2, [r7, #2]
 8005122:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3326      	adds	r3, #38	; 0x26
 8005128:	7e3a      	ldrb	r2, [r7, #24]
 800512a:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	332d      	adds	r3, #45	; 0x2d
 8005130:	78ba      	ldrb	r2, [r7, #2]
 8005132:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3336      	adds	r3, #54	; 0x36
 8005138:	7f3a      	ldrb	r2, [r7, #28]
 800513a:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	333d      	adds	r3, #61	; 0x3d
 8005140:	787a      	ldrb	r2, [r7, #1]
 8005142:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3342      	adds	r3, #66	; 0x42
 8005148:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	491c      	ldr	r1, [pc, #112]	; (80051c0 <USBD_Update_CDC_ACM_DESC+0xf4>)
 800514e:	787a      	ldrb	r2, [r7, #1]
 8005150:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	491b      	ldr	r1, [pc, #108]	; (80051c4 <USBD_Update_CDC_ACM_DESC+0xf8>)
 8005156:	7f3a      	ldrb	r2, [r7, #28]
 8005158:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	491a      	ldr	r1, [pc, #104]	; (80051c8 <USBD_Update_CDC_ACM_DESC+0xfc>)
 800515e:	7e3a      	ldrb	r2, [r7, #24]
 8005160:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	4919      	ldr	r1, [pc, #100]	; (80051cc <USBD_Update_CDC_ACM_DESC+0x100>)
 8005166:	78fa      	ldrb	r2, [r7, #3]
 8005168:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	4918      	ldr	r1, [pc, #96]	; (80051d0 <USBD_Update_CDC_ACM_DESC+0x104>)
 800516e:	78ba      	ldrb	r2, [r7, #2]
 8005170:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	4917      	ldr	r1, [pc, #92]	; (80051d4 <USBD_Update_CDC_ACM_DESC+0x108>)
 8005176:	f897 2020 	ldrb.w	r2, [r7, #32]
 800517a:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 800517c:	787b      	ldrb	r3, [r7, #1]
 800517e:	3302      	adds	r3, #2
 8005180:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 8005182:	787b      	ldrb	r3, [r7, #1]
 8005184:	3301      	adds	r3, #1
 8005186:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8005188:	7f3b      	ldrb	r3, [r7, #28]
 800518a:	3301      	adds	r3, #1
 800518c:	773b      	strb	r3, [r7, #28]
    str_idx++;
 800518e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005192:	3301      	adds	r3, #1
 8005194:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	3302      	adds	r3, #2
 800519c:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	3301      	adds	r3, #1
 80051a2:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	3301      	adds	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0a0      	beq.n	80050f2 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20000ca8 	.word	0x20000ca8
 80051c4:	20000ca4 	.word	0x20000ca4
 80051c8:	20000ed4 	.word	0x20000ed4
 80051cc:	20000cac 	.word	0x20000cac
 80051d0:	20000ed0 	.word	0x20000ed0
 80051d4:	20000ecc 	.word	0x20000ecc

080051d8 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <USBD_COMPOSITE_Init+0x24>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	78fa      	ldrb	r2, [r7, #3]
 80051ea:	4611      	mov	r1, r2
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	2000007c 	.word	0x2000007c

08005200 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 800520c:	4b05      	ldr	r3, [pc, #20]	; (8005224 <USBD_COMPOSITE_DeInit+0x24>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	78fa      	ldrb	r2, [r7, #3]
 8005212:	4611      	mov	r1, r2
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	2000007c 	.word	0x2000007c

08005228 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005232:	2300      	movs	r3, #0
 8005234:	73fb      	strb	r3, [r7, #15]
 8005236:	e019      	b.n	800526c <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	889b      	ldrh	r3, [r3, #4]
 800523c:	b2da      	uxtb	r2, r3
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	490e      	ldr	r1, [pc, #56]	; (800527c <USBD_COMPOSITE_Setup+0x54>)
 8005242:	5ccb      	ldrb	r3, [r1, r3]
 8005244:	429a      	cmp	r2, r3
 8005246:	d007      	beq.n	8005258 <USBD_COMPOSITE_Setup+0x30>
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	889b      	ldrh	r3, [r3, #4]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	490b      	ldr	r1, [pc, #44]	; (8005280 <USBD_COMPOSITE_Setup+0x58>)
 8005252:	5ccb      	ldrb	r3, [r1, r3]
 8005254:	429a      	cmp	r2, r3
 8005256:	d106      	bne.n	8005266 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8005258:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <USBD_COMPOSITE_Setup+0x5c>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	6839      	ldr	r1, [r7, #0]
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	4798      	blx	r3
 8005262:	4603      	mov	r3, r0
 8005264:	e006      	b.n	8005274 <USBD_COMPOSITE_Setup+0x4c>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	3301      	adds	r3, #1
 800526a:	73fb      	strb	r3, [r7, #15]
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0e2      	beq.n	8005238 <USBD_COMPOSITE_Setup+0x10>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 8005272:	2303      	movs	r3, #3
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20000cac 	.word	0x20000cac
 8005280:	20000ed0 	.word	0x20000ed0
 8005284:	2000007c 	.word	0x2000007c

08005288 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005294:	2300      	movs	r3, #0
 8005296:	73fb      	strb	r3, [r7, #15]
 8005298:	e01a      	b.n	80052d0 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800529a:	78fa      	ldrb	r2, [r7, #3]
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	4910      	ldr	r1, [pc, #64]	; (80052e0 <USBD_COMPOSITE_DataIn+0x58>)
 80052a0:	5ccb      	ldrb	r3, [r1, r3]
 80052a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d007      	beq.n	80052ba <USBD_COMPOSITE_DataIn+0x32>
 80052aa:	78fa      	ldrb	r2, [r7, #3]
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	490d      	ldr	r1, [pc, #52]	; (80052e4 <USBD_COMPOSITE_DataIn+0x5c>)
 80052b0:	5ccb      	ldrb	r3, [r1, r3]
 80052b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d107      	bne.n	80052ca <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 80052ba:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <USBD_COMPOSITE_DataIn+0x60>)
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	78fa      	ldrb	r2, [r7, #3]
 80052c0:	4611      	mov	r1, r2
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	4798      	blx	r3
 80052c6:	4603      	mov	r3, r0
 80052c8:	e006      	b.n	80052d8 <USBD_COMPOSITE_DataIn+0x50>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	3301      	adds	r3, #1
 80052ce:	73fb      	strb	r3, [r7, #15]
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0e1      	beq.n	800529a <USBD_COMPOSITE_DataIn+0x12>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 80052d6:	2303      	movs	r3, #3
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	20000ca8 	.word	0x20000ca8
 80052e4:	20000ed4 	.word	0x20000ed4
 80052e8:	2000007c 	.word	0x2000007c

080052ec <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 80052f4:	4b04      	ldr	r3, [pc, #16]	; (8005308 <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	2000007c 	.word	0x2000007c

0800530c <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	460b      	mov	r3, r1
 8005342:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	460b      	mov	r3, r1
 800535c:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005378:	2300      	movs	r3, #0
 800537a:	73fb      	strb	r3, [r7, #15]
 800537c:	e010      	b.n	80053a0 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	4a0b      	ldr	r2, [pc, #44]	; (80053b0 <USBD_COMPOSITE_DataOut+0x44>)
 8005382:	5cd3      	ldrb	r3, [r2, r3]
 8005384:	78fa      	ldrb	r2, [r7, #3]
 8005386:	429a      	cmp	r2, r3
 8005388:	d107      	bne.n	800539a <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 800538a:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <USBD_COMPOSITE_DataOut+0x48>)
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	78fa      	ldrb	r2, [r7, #3]
 8005390:	4611      	mov	r1, r2
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	4798      	blx	r3
 8005396:	4603      	mov	r3, r0
 8005398:	e006      	b.n	80053a8 <USBD_COMPOSITE_DataOut+0x3c>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800539a:	7bfb      	ldrb	r3, [r7, #15]
 800539c:	3301      	adds	r3, #1
 800539e:	73fb      	strb	r3, [r7, #15]
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0eb      	beq.n	800537e <USBD_COMPOSITE_DataOut+0x12>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 80053a6:	2303      	movs	r3, #3
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20000ca4 	.word	0x20000ca4
 80053b4:	2000007c 	.word	0x2000007c

080053b8 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	224b      	movs	r2, #75	; 0x4b
 80053c4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 80053c6:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	20000ed8 	.word	0x20000ed8

080053d8 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	224b      	movs	r2, #75	; 0x4b
 80053e4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 80053e6:	4b03      	ldr	r3, [pc, #12]	; (80053f4 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	20000f24 	.word	0x20000f24

080053f8 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	224b      	movs	r2, #75	; 0x4b
 8005404:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8005406:	4b03      	ldr	r3, [pc, #12]	; (8005414 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	20000ed8 	.word	0x20000ed8

08005418 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	220a      	movs	r2, #10
 8005424:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8005426:	4b03      	ldr	r3, [pc, #12]	; (8005434 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	20000190 	.word	0x20000190

08005438 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08a      	sub	sp, #40	; 0x28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	460b      	mov	r3, r1
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8005446:	4b1b      	ldr	r3, [pc, #108]	; (80054b4 <USBD_COMPOSITE_GetUsrStringDesc+0x7c>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	7afa      	ldrb	r2, [r7, #11]
 800544c:	429a      	cmp	r2, r3
 800544e:	d82c      	bhi.n	80054aa <USBD_COMPOSITE_GetUsrStringDesc+0x72>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	f107 0318 	add.w	r3, r7, #24
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	605a      	str	r2, [r3, #4]
 800545e:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005460:	2300      	movs	r3, #0
 8005462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005466:	e01a      	b.n	800549e <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8005468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800546c:	4a12      	ldr	r2, [pc, #72]	; (80054b8 <USBD_COMPOSITE_GetUsrStringDesc+0x80>)
 800546e:	5cd3      	ldrb	r3, [r2, r3]
 8005470:	7afa      	ldrb	r2, [r7, #11]
 8005472:	429a      	cmp	r2, r3
 8005474:	d10e      	bne.n	8005494 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8005476:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800547a:	f107 0014 	add.w	r0, r7, #20
 800547e:	4a0f      	ldr	r2, [pc, #60]	; (80054bc <USBD_COMPOSITE_GetUsrStringDesc+0x84>)
 8005480:	2110      	movs	r1, #16
 8005482:	f001 fd57 	bl	8006f34 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8005486:	f107 0314 	add.w	r3, r7, #20
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	490c      	ldr	r1, [pc, #48]	; (80054c0 <USBD_COMPOSITE_GetUsrStringDesc+0x88>)
 800548e:	4618      	mov	r0, r3
 8005490:	f001 f983 	bl	800679a <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005498:	3301      	adds	r3, #1
 800549a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800549e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0e0      	beq.n	8005468 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 80054a6:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <USBD_COMPOSITE_GetUsrStringDesc+0x88>)
 80054a8:	e000      	b.n	80054ac <USBD_COMPOSITE_GetUsrStringDesc+0x74>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80054aa:	2300      	movs	r3, #0
  }
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3728      	adds	r7, #40	; 0x28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	2000018c 	.word	0x2000018c
 80054b8:	20000ecc 	.word	0x20000ecc
 80054bc:	08007804 	.word	0x08007804
 80054c0:	20000220 	.word	0x20000220

080054c4 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 80054c4:	b590      	push	{r4, r7, lr}
 80054c6:	b089      	sub	sp, #36	; 0x24
 80054c8:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 80054d2:	2381      	movs	r3, #129	; 0x81
 80054d4:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 80054d6:	2301      	movs	r3, #1
 80054d8:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 80054da:	2300      	movs	r3, #0
 80054dc:	727b      	strb	r3, [r7, #9]

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 80054de:	4b54      	ldr	r3, [pc, #336]	; (8005630 <USBD_COMPOSITE_Mount_Class+0x16c>)
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	1d3a      	adds	r2, r7, #4
 80054e4:	4610      	mov	r0, r2
 80054e6:	4798      	blx	r3
 80054e8:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 80054ea:	7a7b      	ldrb	r3, [r7, #9]
 80054ec:	3301      	adds	r3, #1
 80054ee:	b2d8      	uxtb	r0, r3
 80054f0:	7afb      	ldrb	r3, [r7, #11]
 80054f2:	3301      	adds	r3, #1
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	4a4f      	ldr	r2, [pc, #316]	; (8005634 <USBD_COMPOSITE_Mount_Class+0x170>)
 80054f8:	7812      	ldrb	r2, [r2, #0]
 80054fa:	7afc      	ldrb	r4, [r7, #11]
 80054fc:	7a79      	ldrb	r1, [r7, #9]
 80054fe:	9202      	str	r2, [sp, #8]
 8005500:	7aba      	ldrb	r2, [r7, #10]
 8005502:	9201      	str	r2, [sp, #4]
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	4623      	mov	r3, r4
 8005508:	4602      	mov	r2, r0
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f7ff fdde 	bl	80050cc <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3309      	adds	r3, #9
 8005514:	88ba      	ldrh	r2, [r7, #4]
 8005516:	3a09      	subs	r2, #9
 8005518:	4619      	mov	r1, r3
 800551a:	4847      	ldr	r0, [pc, #284]	; (8005638 <USBD_COMPOSITE_Mount_Class+0x174>)
 800551c:	f001 fcf4 	bl	8006f08 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8005520:	4b43      	ldr	r3, [pc, #268]	; (8005630 <USBD_COMPOSITE_Mount_Class+0x16c>)
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	1d3a      	adds	r2, r7, #4
 8005526:	4610      	mov	r0, r2
 8005528:	4798      	blx	r3
 800552a:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800552c:	7a7b      	ldrb	r3, [r7, #9]
 800552e:	3301      	adds	r3, #1
 8005530:	b2d8      	uxtb	r0, r3
 8005532:	7afb      	ldrb	r3, [r7, #11]
 8005534:	3301      	adds	r3, #1
 8005536:	b2db      	uxtb	r3, r3
 8005538:	4a3e      	ldr	r2, [pc, #248]	; (8005634 <USBD_COMPOSITE_Mount_Class+0x170>)
 800553a:	7812      	ldrb	r2, [r2, #0]
 800553c:	7afc      	ldrb	r4, [r7, #11]
 800553e:	7a79      	ldrb	r1, [r7, #9]
 8005540:	9202      	str	r2, [sp, #8]
 8005542:	7aba      	ldrb	r2, [r7, #10]
 8005544:	9201      	str	r2, [sp, #4]
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	4623      	mov	r3, r4
 800554a:	4602      	mov	r2, r0
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f7ff fdbd 	bl	80050cc <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3309      	adds	r3, #9
 8005556:	88ba      	ldrh	r2, [r7, #4]
 8005558:	3a09      	subs	r2, #9
 800555a:	4619      	mov	r1, r3
 800555c:	4837      	ldr	r0, [pc, #220]	; (800563c <USBD_COMPOSITE_Mount_Class+0x178>)
 800555e:	f001 fcd3 	bl	8006f08 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 8005562:	7afb      	ldrb	r3, [r7, #11]
 8005564:	3302      	adds	r3, #2
 8005566:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 8005568:	7abb      	ldrb	r3, [r7, #10]
 800556a:	3301      	adds	r3, #1
 800556c:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 800556e:	7a7b      	ldrb	r3, [r7, #9]
 8005570:	3302      	adds	r3, #2
 8005572:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 8005574:	4b2f      	ldr	r3, [pc, #188]	; (8005634 <USBD_COMPOSITE_Mount_Class+0x170>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	3301      	adds	r3, #1
 800557a:	b2da      	uxtb	r2, r3
 800557c:	4b2d      	ldr	r3, [pc, #180]	; (8005634 <USBD_COMPOSITE_Mount_Class+0x170>)
 800557e:	701a      	strb	r2, [r3, #0]
  out_ep_track += 1;
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 8005580:	234b      	movs	r3, #75	; 0x4b
 8005582:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 8005584:	4b2e      	ldr	r3, [pc, #184]	; (8005640 <USBD_COMPOSITE_Mount_Class+0x17c>)
 8005586:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2209      	movs	r2, #9
 800558c:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3301      	adds	r3, #1
 8005592:	2202      	movs	r2, #2
 8005594:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3302      	adds	r3, #2
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	0a1b      	lsrs	r3, r3, #8
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3303      	adds	r3, #3
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3304      	adds	r3, #4
 80055b2:	7a7a      	ldrb	r2, [r7, #9]
 80055b4:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3305      	adds	r3, #5
 80055ba:	2201      	movs	r2, #1
 80055bc:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3306      	adds	r3, #6
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3307      	adds	r3, #7
 80055ca:	22c0      	movs	r2, #192	; 0xc0
 80055cc:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3308      	adds	r3, #8
 80055d2:	2232      	movs	r2, #50	; 0x32
 80055d4:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 80055d6:	4b1b      	ldr	r3, [pc, #108]	; (8005644 <USBD_COMPOSITE_Mount_Class+0x180>)
 80055d8:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2209      	movs	r2, #9
 80055de:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3301      	adds	r3, #1
 80055e4:	2202      	movs	r2, #2
 80055e6:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	3302      	adds	r3, #2
 80055ec:	88fa      	ldrh	r2, [r7, #6]
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 80055f2:	88fb      	ldrh	r3, [r7, #6]
 80055f4:	0a1b      	lsrs	r3, r3, #8
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3303      	adds	r3, #3
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3304      	adds	r3, #4
 8005604:	7a7a      	ldrb	r2, [r7, #9]
 8005606:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3305      	adds	r3, #5
 800560c:	2201      	movs	r2, #1
 800560e:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3306      	adds	r3, #6
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3307      	adds	r3, #7
 800561c:	22c0      	movs	r2, #192	; 0xc0
 800561e:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3308      	adds	r3, #8
 8005624:	2232      	movs	r2, #50	; 0x32
 8005626:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8005628:	bf00      	nop
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	bd90      	pop	{r4, r7, pc}
 8005630:	2000007c 	.word	0x2000007c
 8005634:	2000018c 	.word	0x2000018c
 8005638:	20000f2d 	.word	0x20000f2d
 800563c:	20000ee1 	.word	0x20000ee1
 8005640:	20000ed8 	.word	0x20000ed8
 8005644:	20000f24 	.word	0x20000f24

08005648 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	4613      	mov	r3, r2
 8005654:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800565c:	2303      	movs	r3, #3
 800565e:	e01b      	b.n	8005698 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pConfDesc = NULL;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	79fa      	ldrb	r2, [r7, #7]
 800568a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f001 fa55 	bl	8006b3c <USBD_LL_Init>
 8005692:	4603      	mov	r3, r0
 8005694:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005696:	7dfb      	ldrb	r3, [r7, #23]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e02d      	b.n	8005714 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	7c1b      	ldrb	r3, [r3, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d112      	bne.n	80056ee <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d01e      	beq.n	8005712 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056dc:	f107 020e 	add.w	r2, r7, #14
 80056e0:	4610      	mov	r0, r2
 80056e2:	4798      	blx	r3
 80056e4:	4602      	mov	r2, r0
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 80056ec:	e011      	b.n	8005712 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00b      	beq.n	8005712 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005702:	f107 020e 	add.w	r2, r7, #14
 8005706:	4610      	mov	r0, r2
 8005708:	4798      	blx	r3
 800570a:	4602      	mov	r2, r0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
  }

  return USBD_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f001 fa5b 	bl	8006be0 <USBD_LL_Start>
 800572a:	4603      	mov	r3, r0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	460b      	mov	r3, r1
 8005754:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005756:	2303      	movs	r3, #3
 8005758:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d009      	beq.n	8005778 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	78fa      	ldrb	r2, [r7, #3]
 800576e:	4611      	mov	r1, r2
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	4798      	blx	r3
 8005774:	4603      	mov	r3, r0
 8005776:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b082      	sub	sp, #8
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	460b      	mov	r3, r1
 800578c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	78fa      	ldrb	r2, [r7, #3]
 80057a2:	4611      	mov	r1, r2
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	4798      	blx	r3
  }

  return USBD_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 ff9d 	bl	8006704 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80057d8:	461a      	mov	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80057e6:	f003 031f 	and.w	r3, r3, #31
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d01a      	beq.n	8005824 <USBD_LL_SetupStage+0x72>
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d822      	bhi.n	8005838 <USBD_LL_SetupStage+0x86>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <USBD_LL_SetupStage+0x4a>
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d00a      	beq.n	8005810 <USBD_LL_SetupStage+0x5e>
 80057fa:	e01d      	b.n	8005838 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fa5d 	bl	8005cc4 <USBD_StdDevReq>
 800580a:	4603      	mov	r3, r0
 800580c:	73fb      	strb	r3, [r7, #15]
      break;
 800580e:	e020      	b.n	8005852 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fac1 	bl	8005da0 <USBD_StdItfReq>
 800581e:	4603      	mov	r3, r0
 8005820:	73fb      	strb	r3, [r7, #15]
      break;
 8005822:	e016      	b.n	8005852 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fb00 	bl	8005e32 <USBD_StdEPReq>
 8005832:	4603      	mov	r3, r0
 8005834:	73fb      	strb	r3, [r7, #15]
      break;
 8005836:	e00c      	b.n	8005852 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800583e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005842:	b2db      	uxtb	r3, r3
 8005844:	4619      	mov	r1, r3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f001 fa2a 	bl	8006ca0 <USBD_LL_StallEP>
 800584c:	4603      	mov	r3, r0
 800584e:	73fb      	strb	r3, [r7, #15]
      break;
 8005850:	bf00      	nop
  }

  return ret;
 8005852:	7bfb      	ldrb	r3, [r7, #15]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	460b      	mov	r3, r1
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800586a:	7afb      	ldrb	r3, [r7, #11]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d138      	bne.n	80058e2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005876:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800587e:	2b03      	cmp	r3, #3
 8005880:	d14a      	bne.n	8005918 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	429a      	cmp	r2, r3
 800588c:	d913      	bls.n	80058b6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	1ad2      	subs	r2, r2, r3
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	4293      	cmp	r3, r2
 80058a6:	bf28      	it	cs
 80058a8:	4613      	movcs	r3, r2
 80058aa:	461a      	mov	r2, r3
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f001 f81c 	bl	80068ec <USBD_CtlContinueRx>
 80058b4:	e030      	b.n	8005918 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d10b      	bne.n	80058da <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f001 f817 	bl	800690e <USBD_CtlSendStatus>
 80058e0:	e01a      	b.n	8005918 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d114      	bne.n	8005918 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00e      	beq.n	8005918 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	7afa      	ldrb	r2, [r7, #11]
 8005904:	4611      	mov	r1, r2
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	4798      	blx	r3
 800590a:	4603      	mov	r3, r0
 800590c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005914:	7dfb      	ldrb	r3, [r7, #23]
 8005916:	e000      	b.n	800591a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b086      	sub	sp, #24
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	460b      	mov	r3, r1
 800592c:	607a      	str	r2, [r7, #4]
 800592e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005930:	7afb      	ldrb	r3, [r7, #11]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d16b      	bne.n	8005a0e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3314      	adds	r3, #20
 800593a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005942:	2b02      	cmp	r3, #2
 8005944:	d156      	bne.n	80059f4 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	429a      	cmp	r2, r3
 8005950:	d914      	bls.n	800597c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	1ad2      	subs	r2, r2, r3
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	461a      	mov	r2, r3
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 ff91 	bl	8006890 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800596e:	2300      	movs	r3, #0
 8005970:	2200      	movs	r2, #0
 8005972:	2100      	movs	r1, #0
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f001 fa3d 	bl	8006df4 <USBD_LL_PrepareReceive>
 800597a:	e03b      	b.n	80059f4 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	429a      	cmp	r2, r3
 8005986:	d11c      	bne.n	80059c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005990:	429a      	cmp	r2, r3
 8005992:	d316      	bcc.n	80059c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800599e:	429a      	cmp	r2, r3
 80059a0:	d20f      	bcs.n	80059c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80059a2:	2200      	movs	r2, #0
 80059a4:	2100      	movs	r1, #0
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 ff72 	bl	8006890 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059b4:	2300      	movs	r3, #0
 80059b6:	2200      	movs	r2, #0
 80059b8:	2100      	movs	r1, #0
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f001 fa1a 	bl	8006df4 <USBD_LL_PrepareReceive>
 80059c0:	e018      	b.n	80059f4 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d10b      	bne.n	80059e6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d005      	beq.n	80059e6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80059e6:	2180      	movs	r1, #128	; 0x80
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f001 f959 	bl	8006ca0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 ffa0 	bl	8006934 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d122      	bne.n	8005a44 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f7ff fe98 	bl	8005734 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005a0c:	e01a      	b.n	8005a44 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d114      	bne.n	8005a44 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00e      	beq.n	8005a44 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	7afa      	ldrb	r2, [r7, #11]
 8005a30:	4611      	mov	r1, r2
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	4798      	blx	r3
 8005a36:	4603      	mov	r3, r0
 8005a38:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005a3a:	7dfb      	ldrb	r3, [r7, #23]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
 8005a42:	e000      	b.n	8005a46 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b082      	sub	sp, #8
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e02a      	b.n	8005ad8 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6852      	ldr	r2, [r2, #4]
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005aa2:	2340      	movs	r3, #64	; 0x40
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 f8b4 	bl	8006c16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2240      	movs	r2, #64	; 0x40
 8005aba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005abe:	2340      	movs	r3, #64	; 0x40
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2180      	movs	r1, #128	; 0x80
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f001 f8a6 	bl	8006c16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2240      	movs	r2, #64	; 0x40
 8005ad4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	78fa      	ldrb	r2, [r7, #3]
 8005af0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2204      	movs	r2, #4
 8005b1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d106      	bne.n	8005b4e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e012      	b.n	8005b98 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d10b      	bne.n	8005b96 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d005      	beq.n	8005b96 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e014      	b.n	8005be4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d10d      	bne.n	8005be2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	4611      	mov	r1, r2
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e014      	b.n	8005c30 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d10d      	bne.n	8005c2e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d007      	beq.n	8005c2e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	78fa      	ldrb	r2, [r7, #3]
 8005c28:	4611      	mov	r1, r2
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d009      	beq.n	8005c7c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6852      	ldr	r2, [r2, #4]
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	4611      	mov	r1, r2
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	4798      	blx	r3
  }

  return USBD_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b087      	sub	sp, #28
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005ca4:	8a3b      	ldrh	r3, [r7, #16]
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	b21a      	sxth	r2, r3
 8005caa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	b21b      	sxth	r3, r3
 8005cb2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005cb4:	89fb      	ldrh	r3, [r7, #14]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
	...

08005cc4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cda:	2b40      	cmp	r3, #64	; 0x40
 8005cdc:	d005      	beq.n	8005cea <USBD_StdDevReq+0x26>
 8005cde:	2b40      	cmp	r3, #64	; 0x40
 8005ce0:	d853      	bhi.n	8005d8a <USBD_StdDevReq+0xc6>
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00b      	beq.n	8005cfe <USBD_StdDevReq+0x3a>
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	d14f      	bne.n	8005d8a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	6839      	ldr	r1, [r7, #0]
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	4798      	blx	r3
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cfc:	e04a      	b.n	8005d94 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	785b      	ldrb	r3, [r3, #1]
 8005d02:	2b09      	cmp	r3, #9
 8005d04:	d83b      	bhi.n	8005d7e <USBD_StdDevReq+0xba>
 8005d06:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <USBD_StdDevReq+0x48>)
 8005d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0c:	08005d61 	.word	0x08005d61
 8005d10:	08005d75 	.word	0x08005d75
 8005d14:	08005d7f 	.word	0x08005d7f
 8005d18:	08005d6b 	.word	0x08005d6b
 8005d1c:	08005d7f 	.word	0x08005d7f
 8005d20:	08005d3f 	.word	0x08005d3f
 8005d24:	08005d35 	.word	0x08005d35
 8005d28:	08005d7f 	.word	0x08005d7f
 8005d2c:	08005d57 	.word	0x08005d57
 8005d30:	08005d49 	.word	0x08005d49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f9de 	bl	80060f8 <USBD_GetDescriptor>
          break;
 8005d3c:	e024      	b.n	8005d88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fb55 	bl	80063f0 <USBD_SetAddress>
          break;
 8005d46:	e01f      	b.n	8005d88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fb94 	bl	8006478 <USBD_SetConfig>
 8005d50:	4603      	mov	r3, r0
 8005d52:	73fb      	strb	r3, [r7, #15]
          break;
 8005d54:	e018      	b.n	8005d88 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fc33 	bl	80065c4 <USBD_GetConfig>
          break;
 8005d5e:	e013      	b.n	8005d88 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fc64 	bl	8006630 <USBD_GetStatus>
          break;
 8005d68:	e00e      	b.n	8005d88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fc93 	bl	8006698 <USBD_SetFeature>
          break;
 8005d72:	e009      	b.n	8005d88 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fca2 	bl	80066c0 <USBD_ClrFeature>
          break;
 8005d7c:	e004      	b.n	8005d88 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fcf9 	bl	8006778 <USBD_CtlError>
          break;
 8005d86:	bf00      	nop
      }
      break;
 8005d88:	e004      	b.n	8005d94 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fcf3 	bl	8006778 <USBD_CtlError>
      break;
 8005d92:	bf00      	nop
  }

  return ret;
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop

08005da0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005db6:	2b40      	cmp	r3, #64	; 0x40
 8005db8:	d005      	beq.n	8005dc6 <USBD_StdItfReq+0x26>
 8005dba:	2b40      	cmp	r3, #64	; 0x40
 8005dbc:	d82f      	bhi.n	8005e1e <USBD_StdItfReq+0x7e>
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <USBD_StdItfReq+0x26>
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	d12b      	bne.n	8005e1e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d81d      	bhi.n	8005e10 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	889b      	ldrh	r3, [r3, #4]
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b0f      	cmp	r3, #15
 8005ddc:	d813      	bhi.n	8005e06 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	6839      	ldr	r1, [r7, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	4798      	blx	r3
 8005dec:	4603      	mov	r3, r0
 8005dee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	88db      	ldrh	r3, [r3, #6]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d110      	bne.n	8005e1a <USBD_StdItfReq+0x7a>
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10d      	bne.n	8005e1a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fd85 	bl	800690e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e04:	e009      	b.n	8005e1a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fcb5 	bl	8006778 <USBD_CtlError>
          break;
 8005e0e:	e004      	b.n	8005e1a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fcb0 	bl	8006778 <USBD_CtlError>
          break;
 8005e18:	e000      	b.n	8005e1c <USBD_StdItfReq+0x7c>
          break;
 8005e1a:	bf00      	nop
      }
      break;
 8005e1c:	e004      	b.n	8005e28 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fca9 	bl	8006778 <USBD_CtlError>
      break;
 8005e26:	bf00      	nop
  }

  return ret;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	889b      	ldrh	r3, [r3, #4]
 8005e44:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d007      	beq.n	8005e62 <USBD_StdEPReq+0x30>
 8005e52:	2b40      	cmp	r3, #64	; 0x40
 8005e54:	f200 8145 	bhi.w	80060e2 <USBD_StdEPReq+0x2b0>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00c      	beq.n	8005e76 <USBD_StdEPReq+0x44>
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	f040 8140 	bne.w	80060e2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	4798      	blx	r3
 8005e70:	4603      	mov	r3, r0
 8005e72:	73fb      	strb	r3, [r7, #15]
      break;
 8005e74:	e13a      	b.n	80060ec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	785b      	ldrb	r3, [r3, #1]
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d007      	beq.n	8005e8e <USBD_StdEPReq+0x5c>
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	f300 8129 	bgt.w	80060d6 <USBD_StdEPReq+0x2a4>
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d07f      	beq.n	8005f88 <USBD_StdEPReq+0x156>
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d03c      	beq.n	8005f06 <USBD_StdEPReq+0xd4>
 8005e8c:	e123      	b.n	80060d6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d002      	beq.n	8005ea0 <USBD_StdEPReq+0x6e>
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d016      	beq.n	8005ecc <USBD_StdEPReq+0x9a>
 8005e9e:	e02c      	b.n	8005efa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ea0:	7bbb      	ldrb	r3, [r7, #14]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00d      	beq.n	8005ec2 <USBD_StdEPReq+0x90>
 8005ea6:	7bbb      	ldrb	r3, [r7, #14]
 8005ea8:	2b80      	cmp	r3, #128	; 0x80
 8005eaa:	d00a      	beq.n	8005ec2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005eac:	7bbb      	ldrb	r3, [r7, #14]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fef5 	bl	8006ca0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005eb6:	2180      	movs	r1, #128	; 0x80
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fef1 	bl	8006ca0 <USBD_LL_StallEP>
 8005ebe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ec0:	e020      	b.n	8005f04 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fc57 	bl	8006778 <USBD_CtlError>
              break;
 8005eca:	e01b      	b.n	8005f04 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	885b      	ldrh	r3, [r3, #2]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10e      	bne.n	8005ef2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ed4:	7bbb      	ldrb	r3, [r7, #14]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00b      	beq.n	8005ef2 <USBD_StdEPReq+0xc0>
 8005eda:	7bbb      	ldrb	r3, [r7, #14]
 8005edc:	2b80      	cmp	r3, #128	; 0x80
 8005ede:	d008      	beq.n	8005ef2 <USBD_StdEPReq+0xc0>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	88db      	ldrh	r3, [r3, #6]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ee8:	7bbb      	ldrb	r3, [r7, #14]
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fed7 	bl	8006ca0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fd0b 	bl	800690e <USBD_CtlSendStatus>

              break;
 8005ef8:	e004      	b.n	8005f04 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fc3b 	bl	8006778 <USBD_CtlError>
              break;
 8005f02:	bf00      	nop
          }
          break;
 8005f04:	e0ec      	b.n	80060e0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d002      	beq.n	8005f18 <USBD_StdEPReq+0xe6>
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d016      	beq.n	8005f44 <USBD_StdEPReq+0x112>
 8005f16:	e030      	b.n	8005f7a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f18:	7bbb      	ldrb	r3, [r7, #14]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00d      	beq.n	8005f3a <USBD_StdEPReq+0x108>
 8005f1e:	7bbb      	ldrb	r3, [r7, #14]
 8005f20:	2b80      	cmp	r3, #128	; 0x80
 8005f22:	d00a      	beq.n	8005f3a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 feb9 	bl	8006ca0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f2e:	2180      	movs	r1, #128	; 0x80
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 feb5 	bl	8006ca0 <USBD_LL_StallEP>
 8005f36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f38:	e025      	b.n	8005f86 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fc1b 	bl	8006778 <USBD_CtlError>
              break;
 8005f42:	e020      	b.n	8005f86 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	885b      	ldrh	r3, [r3, #2]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d11b      	bne.n	8005f84 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f4c:	7bbb      	ldrb	r3, [r7, #14]
 8005f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d004      	beq.n	8005f60 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f56:	7bbb      	ldrb	r3, [r7, #14]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 febf 	bl	8006cde <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fcd4 	bl	800690e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	6839      	ldr	r1, [r7, #0]
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	4798      	blx	r3
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005f78:	e004      	b.n	8005f84 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005f7a:	6839      	ldr	r1, [r7, #0]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fbfb 	bl	8006778 <USBD_CtlError>
              break;
 8005f82:	e000      	b.n	8005f86 <USBD_StdEPReq+0x154>
              break;
 8005f84:	bf00      	nop
          }
          break;
 8005f86:	e0ab      	b.n	80060e0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d002      	beq.n	8005f9a <USBD_StdEPReq+0x168>
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d032      	beq.n	8005ffe <USBD_StdEPReq+0x1cc>
 8005f98:	e097      	b.n	80060ca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f9a:	7bbb      	ldrb	r3, [r7, #14]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d007      	beq.n	8005fb0 <USBD_StdEPReq+0x17e>
 8005fa0:	7bbb      	ldrb	r3, [r7, #14]
 8005fa2:	2b80      	cmp	r3, #128	; 0x80
 8005fa4:	d004      	beq.n	8005fb0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fbe5 	bl	8006778 <USBD_CtlError>
                break;
 8005fae:	e091      	b.n	80060d4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	da0b      	bge.n	8005fd0 <USBD_StdEPReq+0x19e>
 8005fb8:	7bbb      	ldrb	r3, [r7, #14]
 8005fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	3310      	adds	r3, #16
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	4413      	add	r3, r2
 8005fcc:	3304      	adds	r3, #4
 8005fce:	e00b      	b.n	8005fe8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005fd0:	7bbb      	ldrb	r3, [r7, #14]
 8005fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fc2f 	bl	800685a <USBD_CtlSendData>
              break;
 8005ffc:	e06a      	b.n	80060d4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005ffe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006002:	2b00      	cmp	r3, #0
 8006004:	da11      	bge.n	800602a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006006:	7bbb      	ldrb	r3, [r7, #14]
 8006008:	f003 020f 	and.w	r2, r3, #15
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	440b      	add	r3, r1
 8006018:	3324      	adds	r3, #36	; 0x24
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d117      	bne.n	8006050 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006020:	6839      	ldr	r1, [r7, #0]
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fba8 	bl	8006778 <USBD_CtlError>
                  break;
 8006028:	e054      	b.n	80060d4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	f003 020f 	and.w	r2, r3, #15
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	440b      	add	r3, r1
 800603c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d104      	bne.n	8006050 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fb95 	bl	8006778 <USBD_CtlError>
                  break;
 800604e:	e041      	b.n	80060d4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006054:	2b00      	cmp	r3, #0
 8006056:	da0b      	bge.n	8006070 <USBD_StdEPReq+0x23e>
 8006058:	7bbb      	ldrb	r3, [r7, #14]
 800605a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	3310      	adds	r3, #16
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	4413      	add	r3, r2
 800606c:	3304      	adds	r3, #4
 800606e:	e00b      	b.n	8006088 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006070:	7bbb      	ldrb	r3, [r7, #14]
 8006072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	4413      	add	r3, r2
 8006086:	3304      	adds	r3, #4
 8006088:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800608a:	7bbb      	ldrb	r3, [r7, #14]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <USBD_StdEPReq+0x264>
 8006090:	7bbb      	ldrb	r3, [r7, #14]
 8006092:	2b80      	cmp	r3, #128	; 0x80
 8006094:	d103      	bne.n	800609e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	e00e      	b.n	80060bc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800609e:	7bbb      	ldrb	r3, [r7, #14]
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fe3a 	bl	8006d1c <USBD_LL_IsStallEP>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2201      	movs	r2, #1
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	e002      	b.n	80060bc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2202      	movs	r2, #2
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fbc9 	bl	800685a <USBD_CtlSendData>
              break;
 80060c8:	e004      	b.n	80060d4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fb53 	bl	8006778 <USBD_CtlError>
              break;
 80060d2:	bf00      	nop
          }
          break;
 80060d4:	e004      	b.n	80060e0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fb4d 	bl	8006778 <USBD_CtlError>
          break;
 80060de:	bf00      	nop
      }
      break;
 80060e0:	e004      	b.n	80060ec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fb47 	bl	8006778 <USBD_CtlError>
      break;
 80060ea:	bf00      	nop
  }

  return ret;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	885b      	ldrh	r3, [r3, #2]
 8006112:	0a1b      	lsrs	r3, r3, #8
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	2b06      	cmp	r3, #6
 800611a:	f200 813b 	bhi.w	8006394 <USBD_GetDescriptor+0x29c>
 800611e:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <USBD_GetDescriptor+0x2c>)
 8006120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006124:	08006141 	.word	0x08006141
 8006128:	08006159 	.word	0x08006159
 800612c:	08006199 	.word	0x08006199
 8006130:	08006395 	.word	0x08006395
 8006134:	08006395 	.word	0x08006395
 8006138:	08006335 	.word	0x08006335
 800613c:	08006361 	.word	0x08006361
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	7c12      	ldrb	r2, [r2, #16]
 800614c:	f107 0108 	add.w	r1, r7, #8
 8006150:	4610      	mov	r0, r2
 8006152:	4798      	blx	r3
 8006154:	60f8      	str	r0, [r7, #12]
      break;
 8006156:	e125      	b.n	80063a4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	7c1b      	ldrb	r3, [r3, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10d      	bne.n	800617c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006168:	f107 0208 	add.w	r2, r7, #8
 800616c:	4610      	mov	r0, r2
 800616e:	4798      	blx	r3
 8006170:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	3301      	adds	r3, #1
 8006176:	2202      	movs	r2, #2
 8006178:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800617a:	e113      	b.n	80063a4 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	f107 0208 	add.w	r2, r7, #8
 8006188:	4610      	mov	r0, r2
 800618a:	4798      	blx	r3
 800618c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3301      	adds	r3, #1
 8006192:	2202      	movs	r2, #2
 8006194:	701a      	strb	r2, [r3, #0]
      break;
 8006196:	e105      	b.n	80063a4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	885b      	ldrh	r3, [r3, #2]
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b05      	cmp	r3, #5
 80061a0:	f200 80ac 	bhi.w	80062fc <USBD_GetDescriptor+0x204>
 80061a4:	a201      	add	r2, pc, #4	; (adr r2, 80061ac <USBD_GetDescriptor+0xb4>)
 80061a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061aa:	bf00      	nop
 80061ac:	080061c5 	.word	0x080061c5
 80061b0:	080061f9 	.word	0x080061f9
 80061b4:	0800622d 	.word	0x0800622d
 80061b8:	08006261 	.word	0x08006261
 80061bc:	08006295 	.word	0x08006295
 80061c0:	080062c9 	.word	0x080062c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00b      	beq.n	80061e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	7c12      	ldrb	r2, [r2, #16]
 80061dc:	f107 0108 	add.w	r1, r7, #8
 80061e0:	4610      	mov	r0, r2
 80061e2:	4798      	blx	r3
 80061e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061e6:	e0a4      	b.n	8006332 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fac4 	bl	8006778 <USBD_CtlError>
            err++;
 80061f0:	7afb      	ldrb	r3, [r7, #11]
 80061f2:	3301      	adds	r3, #1
 80061f4:	72fb      	strb	r3, [r7, #11]
          break;
 80061f6:	e09c      	b.n	8006332 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00b      	beq.n	800621c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	7c12      	ldrb	r2, [r2, #16]
 8006210:	f107 0108 	add.w	r1, r7, #8
 8006214:	4610      	mov	r0, r2
 8006216:	4798      	blx	r3
 8006218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800621a:	e08a      	b.n	8006332 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800621c:	6839      	ldr	r1, [r7, #0]
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 faaa 	bl	8006778 <USBD_CtlError>
            err++;
 8006224:	7afb      	ldrb	r3, [r7, #11]
 8006226:	3301      	adds	r3, #1
 8006228:	72fb      	strb	r3, [r7, #11]
          break;
 800622a:	e082      	b.n	8006332 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00b      	beq.n	8006250 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	7c12      	ldrb	r2, [r2, #16]
 8006244:	f107 0108 	add.w	r1, r7, #8
 8006248:	4610      	mov	r0, r2
 800624a:	4798      	blx	r3
 800624c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800624e:	e070      	b.n	8006332 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fa90 	bl	8006778 <USBD_CtlError>
            err++;
 8006258:	7afb      	ldrb	r3, [r7, #11]
 800625a:	3301      	adds	r3, #1
 800625c:	72fb      	strb	r3, [r7, #11]
          break;
 800625e:	e068      	b.n	8006332 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	7c12      	ldrb	r2, [r2, #16]
 8006278:	f107 0108 	add.w	r1, r7, #8
 800627c:	4610      	mov	r0, r2
 800627e:	4798      	blx	r3
 8006280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006282:	e056      	b.n	8006332 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fa76 	bl	8006778 <USBD_CtlError>
            err++;
 800628c:	7afb      	ldrb	r3, [r7, #11]
 800628e:	3301      	adds	r3, #1
 8006290:	72fb      	strb	r3, [r7, #11]
          break;
 8006292:	e04e      	b.n	8006332 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00b      	beq.n	80062b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	7c12      	ldrb	r2, [r2, #16]
 80062ac:	f107 0108 	add.w	r1, r7, #8
 80062b0:	4610      	mov	r0, r2
 80062b2:	4798      	blx	r3
 80062b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062b6:	e03c      	b.n	8006332 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fa5c 	bl	8006778 <USBD_CtlError>
            err++;
 80062c0:	7afb      	ldrb	r3, [r7, #11]
 80062c2:	3301      	adds	r3, #1
 80062c4:	72fb      	strb	r3, [r7, #11]
          break;
 80062c6:	e034      	b.n	8006332 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00b      	beq.n	80062ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	7c12      	ldrb	r2, [r2, #16]
 80062e0:	f107 0108 	add.w	r1, r7, #8
 80062e4:	4610      	mov	r0, r2
 80062e6:	4798      	blx	r3
 80062e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062ea:	e022      	b.n	8006332 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa42 	bl	8006778 <USBD_CtlError>
            err++;
 80062f4:	7afb      	ldrb	r3, [r7, #11]
 80062f6:	3301      	adds	r3, #1
 80062f8:	72fb      	strb	r3, [r7, #11]
          break;
 80062fa:	e01a      	b.n	8006332 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00c      	beq.n	8006322 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	8852      	ldrh	r2, [r2, #2]
 8006314:	b2d1      	uxtb	r1, r2
 8006316:	f107 0208 	add.w	r2, r7, #8
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	4798      	blx	r3
 800631e:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8006320:	e006      	b.n	8006330 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fa27 	bl	8006778 <USBD_CtlError>
            err++;
 800632a:	7afb      	ldrb	r3, [r7, #11]
 800632c:	3301      	adds	r3, #1
 800632e:	72fb      	strb	r3, [r7, #11]
          break;
 8006330:	bf00      	nop
      }
      break;
 8006332:	e037      	b.n	80063a4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	7c1b      	ldrb	r3, [r3, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d109      	bne.n	8006350 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006344:	f107 0208 	add.w	r2, r7, #8
 8006348:	4610      	mov	r0, r2
 800634a:	4798      	blx	r3
 800634c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800634e:	e029      	b.n	80063a4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fa10 	bl	8006778 <USBD_CtlError>
        err++;
 8006358:	7afb      	ldrb	r3, [r7, #11]
 800635a:	3301      	adds	r3, #1
 800635c:	72fb      	strb	r3, [r7, #11]
      break;
 800635e:	e021      	b.n	80063a4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	7c1b      	ldrb	r3, [r3, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10d      	bne.n	8006384 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006370:	f107 0208 	add.w	r2, r7, #8
 8006374:	4610      	mov	r0, r2
 8006376:	4798      	blx	r3
 8006378:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3301      	adds	r3, #1
 800637e:	2207      	movs	r2, #7
 8006380:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006382:	e00f      	b.n	80063a4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f9f6 	bl	8006778 <USBD_CtlError>
        err++;
 800638c:	7afb      	ldrb	r3, [r7, #11]
 800638e:	3301      	adds	r3, #1
 8006390:	72fb      	strb	r3, [r7, #11]
      break;
 8006392:	e007      	b.n	80063a4 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f9ee 	bl	8006778 <USBD_CtlError>
      err++;
 800639c:	7afb      	ldrb	r3, [r7, #11]
 800639e:	3301      	adds	r3, #1
 80063a0:	72fb      	strb	r3, [r7, #11]
      break;
 80063a2:	bf00      	nop
  }

  if (err != 0U)
 80063a4:	7afb      	ldrb	r3, [r7, #11]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d11e      	bne.n	80063e8 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	88db      	ldrh	r3, [r3, #6]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d016      	beq.n	80063e0 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 80063b2:	893b      	ldrh	r3, [r7, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00e      	beq.n	80063d6 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	88da      	ldrh	r2, [r3, #6]
 80063bc:	893b      	ldrh	r3, [r7, #8]
 80063be:	4293      	cmp	r3, r2
 80063c0:	bf28      	it	cs
 80063c2:	4613      	movcs	r3, r2
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80063c8:	893b      	ldrh	r3, [r7, #8]
 80063ca:	461a      	mov	r2, r3
 80063cc:	68f9      	ldr	r1, [r7, #12]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fa43 	bl	800685a <USBD_CtlSendData>
 80063d4:	e009      	b.n	80063ea <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80063d6:	6839      	ldr	r1, [r7, #0]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f9cd 	bl	8006778 <USBD_CtlError>
 80063de:	e004      	b.n	80063ea <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fa94 	bl	800690e <USBD_CtlSendStatus>
 80063e6:	e000      	b.n	80063ea <USBD_GetDescriptor+0x2f2>
    return;
 80063e8:	bf00      	nop
  }
}
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	889b      	ldrh	r3, [r3, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d131      	bne.n	8006466 <USBD_SetAddress+0x76>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	88db      	ldrh	r3, [r3, #6]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d12d      	bne.n	8006466 <USBD_SetAddress+0x76>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	885b      	ldrh	r3, [r3, #2]
 800640e:	2b7f      	cmp	r3, #127	; 0x7f
 8006410:	d829      	bhi.n	8006466 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	885b      	ldrh	r3, [r3, #2]
 8006416:	b2db      	uxtb	r3, r3
 8006418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800641c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b03      	cmp	r3, #3
 8006428:	d104      	bne.n	8006434 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f9a3 	bl	8006778 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006432:	e01d      	b.n	8006470 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	7bfa      	ldrb	r2, [r7, #15]
 8006438:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fc97 	bl	8006d74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa61 	bl	800690e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d004      	beq.n	800645c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2202      	movs	r2, #2
 8006456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800645a:	e009      	b.n	8006470 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006464:	e004      	b.n	8006470 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f985 	bl	8006778 <USBD_CtlError>
  }
}
 800646e:	bf00      	nop
 8006470:	bf00      	nop
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	885b      	ldrh	r3, [r3, #2]
 800648a:	b2da      	uxtb	r2, r3
 800648c:	4b4c      	ldr	r3, [pc, #304]	; (80065c0 <USBD_SetConfig+0x148>)
 800648e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006490:	4b4b      	ldr	r3, [pc, #300]	; (80065c0 <USBD_SetConfig+0x148>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d905      	bls.n	80064a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f96c 	bl	8006778 <USBD_CtlError>
    return USBD_FAIL;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e088      	b.n	80065b6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d002      	beq.n	80064b6 <USBD_SetConfig+0x3e>
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d025      	beq.n	8006500 <USBD_SetConfig+0x88>
 80064b4:	e071      	b.n	800659a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80064b6:	4b42      	ldr	r3, [pc, #264]	; (80065c0 <USBD_SetConfig+0x148>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d01c      	beq.n	80064f8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80064be:	4b40      	ldr	r3, [pc, #256]	; (80065c0 <USBD_SetConfig+0x148>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80064c8:	4b3d      	ldr	r3, [pc, #244]	; (80065c0 <USBD_SetConfig+0x148>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff f93b 	bl	800574a <USBD_SetClassConfig>
 80064d4:	4603      	mov	r3, r0
 80064d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f949 	bl	8006778 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80064e6:	e065      	b.n	80065b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fa10 	bl	800690e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2203      	movs	r2, #3
 80064f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80064f6:	e05d      	b.n	80065b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fa08 	bl	800690e <USBD_CtlSendStatus>
      break;
 80064fe:	e059      	b.n	80065b4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006500:	4b2f      	ldr	r3, [pc, #188]	; (80065c0 <USBD_SetConfig+0x148>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d112      	bne.n	800652e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006510:	4b2b      	ldr	r3, [pc, #172]	; (80065c0 <USBD_SetConfig+0x148>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	461a      	mov	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800651a:	4b29      	ldr	r3, [pc, #164]	; (80065c0 <USBD_SetConfig+0x148>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7ff f92e 	bl	8005782 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f9f1 	bl	800690e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800652c:	e042      	b.n	80065b4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800652e:	4b24      	ldr	r3, [pc, #144]	; (80065c0 <USBD_SetConfig+0x148>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	429a      	cmp	r2, r3
 800653a:	d02a      	beq.n	8006592 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	b2db      	uxtb	r3, r3
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff f91c 	bl	8005782 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800654a:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <USBD_SetConfig+0x148>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006554:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <USBD_SetConfig+0x148>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7ff f8f5 	bl	800574a <USBD_SetClassConfig>
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00f      	beq.n	800658a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800656a:	6839      	ldr	r1, [r7, #0]
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f903 	bl	8006778 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	b2db      	uxtb	r3, r3
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7ff f901 	bl	8005782 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006588:	e014      	b.n	80065b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f9bf 	bl	800690e <USBD_CtlSendStatus>
      break;
 8006590:	e010      	b.n	80065b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f9bb 	bl	800690e <USBD_CtlSendStatus>
      break;
 8006598:	e00c      	b.n	80065b4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f8eb 	bl	8006778 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065a2:	4b07      	ldr	r3, [pc, #28]	; (80065c0 <USBD_SetConfig+0x148>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff f8ea 	bl	8005782 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80065ae:	2303      	movs	r3, #3
 80065b0:	73fb      	strb	r3, [r7, #15]
      break;
 80065b2:	bf00      	nop
  }

  return ret;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000260 	.word	0x20000260

080065c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	88db      	ldrh	r3, [r3, #6]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d004      	beq.n	80065e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f8cd 	bl	8006778 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80065de:	e023      	b.n	8006628 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	dc02      	bgt.n	80065f2 <USBD_GetConfig+0x2e>
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	dc03      	bgt.n	80065f8 <USBD_GetConfig+0x34>
 80065f0:	e015      	b.n	800661e <USBD_GetConfig+0x5a>
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d00b      	beq.n	800660e <USBD_GetConfig+0x4a>
 80065f6:	e012      	b.n	800661e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3308      	adds	r3, #8
 8006602:	2201      	movs	r2, #1
 8006604:	4619      	mov	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f927 	bl	800685a <USBD_CtlSendData>
        break;
 800660c:	e00c      	b.n	8006628 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	3304      	adds	r3, #4
 8006612:	2201      	movs	r2, #1
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f91f 	bl	800685a <USBD_CtlSendData>
        break;
 800661c:	e004      	b.n	8006628 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f8a9 	bl	8006778 <USBD_CtlError>
        break;
 8006626:	bf00      	nop
}
 8006628:	bf00      	nop
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006640:	b2db      	uxtb	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	2b02      	cmp	r3, #2
 8006646:	d81e      	bhi.n	8006686 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	88db      	ldrh	r3, [r3, #6]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d004      	beq.n	800665a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f890 	bl	8006778 <USBD_CtlError>
        break;
 8006658:	e01a      	b.n	8006690 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006666:	2b00      	cmp	r3, #0
 8006668:	d005      	beq.n	8006676 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f043 0202 	orr.w	r2, r3, #2
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	330c      	adds	r3, #12
 800667a:	2202      	movs	r2, #2
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f8eb 	bl	800685a <USBD_CtlSendData>
      break;
 8006684:	e004      	b.n	8006690 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f875 	bl	8006778 <USBD_CtlError>
      break;
 800668e:	bf00      	nop
  }
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	885b      	ldrh	r3, [r3, #2]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d106      	bne.n	80066b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f92b 	bl	800690e <USBD_CtlSendStatus>
  }
}
 80066b8:	bf00      	nop
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d80b      	bhi.n	80066f0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	885b      	ldrh	r3, [r3, #2]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d10c      	bne.n	80066fa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f910 	bl	800690e <USBD_CtlSendStatus>
      }
      break;
 80066ee:	e004      	b.n	80066fa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f840 	bl	8006778 <USBD_CtlError>
      break;
 80066f8:	e000      	b.n	80066fc <USBD_ClrFeature+0x3c>
      break;
 80066fa:	bf00      	nop
  }
}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	781a      	ldrb	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3301      	adds	r3, #1
 800671e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	781a      	ldrb	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	3301      	adds	r3, #1
 800672c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f7ff faa9 	bl	8005c86 <SWAPBYTE>
 8006734:	4603      	mov	r3, r0
 8006736:	461a      	mov	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3301      	adds	r3, #1
 8006740:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3301      	adds	r3, #1
 8006746:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f7ff fa9c 	bl	8005c86 <SWAPBYTE>
 800674e:	4603      	mov	r3, r0
 8006750:	461a      	mov	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3301      	adds	r3, #1
 800675a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3301      	adds	r3, #1
 8006760:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f7ff fa8f 	bl	8005c86 <SWAPBYTE>
 8006768:	4603      	mov	r3, r0
 800676a:	461a      	mov	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	80da      	strh	r2, [r3, #6]
}
 8006770:	bf00      	nop
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006782:	2180      	movs	r1, #128	; 0x80
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fa8b 	bl	8006ca0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800678a:	2100      	movs	r1, #0
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fa87 	bl	8006ca0 <USBD_LL_StallEP>
}
 8006792:	bf00      	nop
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b086      	sub	sp, #24
 800679e:	af00      	add	r7, sp, #0
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d036      	beq.n	800681e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80067b4:	6938      	ldr	r0, [r7, #16]
 80067b6:	f000 f836 	bl	8006826 <USBD_GetLen>
 80067ba:	4603      	mov	r3, r0
 80067bc:	3301      	adds	r3, #1
 80067be:	b29b      	uxth	r3, r3
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	4413      	add	r3, r2
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	7812      	ldrb	r2, [r2, #0]
 80067d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
 80067d6:	3301      	adds	r3, #1
 80067d8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80067da:	7dfb      	ldrb	r3, [r7, #23]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	4413      	add	r3, r2
 80067e0:	2203      	movs	r2, #3
 80067e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80067e4:	7dfb      	ldrb	r3, [r7, #23]
 80067e6:	3301      	adds	r3, #1
 80067e8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80067ea:	e013      	b.n	8006814 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	4413      	add	r3, r2
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	7812      	ldrb	r2, [r2, #0]
 80067f6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	3301      	adds	r3, #1
 80067fc:	613b      	str	r3, [r7, #16]
    idx++;
 80067fe:	7dfb      	ldrb	r3, [r7, #23]
 8006800:	3301      	adds	r3, #1
 8006802:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	4413      	add	r3, r2
 800680a:	2200      	movs	r2, #0
 800680c:	701a      	strb	r2, [r3, #0]
    idx++;
 800680e:	7dfb      	ldrb	r3, [r7, #23]
 8006810:	3301      	adds	r3, #1
 8006812:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e7      	bne.n	80067ec <USBD_GetString+0x52>
 800681c:	e000      	b.n	8006820 <USBD_GetString+0x86>
    return;
 800681e:	bf00      	nop
  }
}
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006836:	e005      	b.n	8006844 <USBD_GetLen+0x1e>
  {
    len++;
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	3301      	adds	r3, #1
 800683c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	3301      	adds	r3, #1
 8006842:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1f5      	bne.n	8006838 <USBD_GetLen+0x12>
  }

  return len;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2202      	movs	r2, #2
 800686a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	2100      	movs	r1, #0
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 fa96 	bl	8006db2 <USBD_LL_Transmit>

  return USBD_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	2100      	movs	r1, #0
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 fa85 	bl	8006db2 <USBD_LL_Transmit>

  return USBD_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2203      	movs	r2, #3
 80068c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	2100      	movs	r1, #0
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fa89 	bl	8006df4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	2100      	movs	r1, #0
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 fa78 	bl	8006df4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b082      	sub	sp, #8
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2204      	movs	r2, #4
 800691a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800691e:	2300      	movs	r3, #0
 8006920:	2200      	movs	r2, #0
 8006922:	2100      	movs	r1, #0
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fa44 	bl	8006db2 <USBD_LL_Transmit>

  return USBD_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2205      	movs	r2, #5
 8006940:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006944:	2300      	movs	r3, #0
 8006946:	2200      	movs	r2, #0
 8006948:	2100      	movs	r1, #0
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fa52 	bl	8006df4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b082      	sub	sp, #8
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800696e:	4619      	mov	r1, r3
 8006970:	4610      	mov	r0, r2
 8006972:	f7fe ff1e 	bl	80057b2 <USBD_LL_SetupStage>
}
 8006976:	bf00      	nop
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b082      	sub	sp, #8
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	460b      	mov	r3, r1
 8006988:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006990:	78fa      	ldrb	r2, [r7, #3]
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	4613      	mov	r3, r2
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	1a9b      	subs	r3, r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	440b      	add	r3, r1
 800699e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	78fb      	ldrb	r3, [r7, #3]
 80069a6:	4619      	mov	r1, r3
 80069a8:	f7fe ff58 	bl	800585c <USBD_LL_DataOutStage>
}
 80069ac:	bf00      	nop
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	1a9b      	subs	r3, r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	3348      	adds	r3, #72	; 0x48
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	78fb      	ldrb	r3, [r7, #3]
 80069da:	4619      	mov	r1, r3
 80069dc:	f7fe ffa1 	bl	8005922 <USBD_LL_DataInStage>
}
 80069e0:	bf00      	nop
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7ff f8b0 	bl	8005b5c <USBD_LL_SOF>
}
 80069fc:	bf00      	nop
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d102      	bne.n	8006a1e <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 8006a18:	2301      	movs	r3, #1
 8006a1a:	73fb      	strb	r3, [r7, #15]
 8006a1c:	e008      	b.n	8006a30 <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d102      	bne.n	8006a2c <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]
 8006a2a:	e001      	b.n	8006a30 <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 8006a2c:	f7f9 fe82 	bl	8000734 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a36:	7bfa      	ldrb	r2, [r7, #15]
 8006a38:	4611      	mov	r1, r2
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff f850 	bl	8005ae0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff f801 	bl	8005a4e <USBD_LL_Reset>
}
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff f84c 	bl	8005b00 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6812      	ldr	r2, [r2, #0]
 8006a76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a7a:	f043 0301 	orr.w	r3, r3, #1
 8006a7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d005      	beq.n	8006a94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a88:	4b04      	ldr	r3, [pc, #16]	; (8006a9c <HAL_PCD_SuspendCallback+0x48>)
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	4a03      	ldr	r2, [pc, #12]	; (8006a9c <HAL_PCD_SuspendCallback+0x48>)
 8006a8e:	f043 0306 	orr.w	r3, r3, #6
 8006a92:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 8006a94:	bf00      	nop
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	e000ed00 	.word	0xe000ed00

08006aa0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff f83c 	bl	8005b2c <USBD_LL_Resume>
}
 8006ab4:	bf00      	nop
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ace:	78fa      	ldrb	r2, [r7, #3]
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff f88a 	bl	8005bec <USBD_LL_IsoOUTIncomplete>
}
 8006ad8:	bf00      	nop
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006af2:	78fa      	ldrb	r2, [r7, #3]
 8006af4:	4611      	mov	r1, r2
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7ff f852 	bl	8005ba0 <USBD_LL_IsoINIncomplete>
}
 8006afc:	bf00      	nop
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7ff f890 	bl	8005c38 <USBD_LL_DevConnected>
}
 8006b18:	bf00      	nop
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7ff f88d 	bl	8005c4e <USBD_LL_DevDisconnected>
}
 8006b34:	bf00      	nop
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 8006b44:	4b22      	ldr	r3, [pc, #136]	; (8006bd0 <USBD_LL_Init+0x94>)
 8006b46:	4a23      	ldr	r2, [pc, #140]	; (8006bd4 <USBD_LL_Init+0x98>)
 8006b48:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d138      	bne.n	8006bc4 <USBD_LL_Init+0x88>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 8006b52:	4b1f      	ldr	r3, [pc, #124]	; (8006bd0 <USBD_LL_Init+0x94>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    pdev->pData = hpcd_USB_OTG_PTR;
 8006b5c:	4b1c      	ldr	r3, [pc, #112]	; (8006bd0 <USBD_LL_Init+0x94>)
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
    pma_track += 128;
#endif

#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFo(hpcd_USB_OTG_PTR, 1024); // ALL OUT EP Buffer
 8006b66:	4b1a      	ldr	r3, [pc, #104]	; (8006bd0 <USBD_LL_Init+0x94>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fb fbfb 	bl	800236a <HAL_PCDEx_SetRxFiFo>

    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, 0, 128); // EP0 IN
 8006b74:	4b16      	ldr	r3, [pc, #88]	; (8006bd0 <USBD_LL_Init+0x94>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2280      	movs	r2, #128	; 0x80
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fb fbad 	bl	80022dc <HAL_PCDEx_SetTxFiFo>

#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]
 8006b86:	e01a      	b.n	8006bbe <USBD_LL_Init+0x82>
    {
      HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 64);
 8006b88:	4b11      	ldr	r3, [pc, #68]	; (8006bd0 <USBD_LL_Init+0x94>)
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
 8006b8e:	4a12      	ldr	r2, [pc, #72]	; (8006bd8 <USBD_LL_Init+0x9c>)
 8006b90:	5cd3      	ldrb	r3, [r2, r3]
 8006b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2240      	movs	r2, #64	; 0x40
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	f7fb fb9e 	bl	80022dc <HAL_PCDEx_SetTxFiFo>
      HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 8);
 8006ba0:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <USBD_LL_Init+0x94>)
 8006ba2:	6818      	ldr	r0, [r3, #0]
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	4a0d      	ldr	r2, [pc, #52]	; (8006bdc <USBD_LL_Init+0xa0>)
 8006ba8:	5cd3      	ldrb	r3, [r2, r3]
 8006baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2208      	movs	r2, #8
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	f7fb fb92 	bl	80022dc <HAL_PCDEx_SetTxFiFo>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	73fb      	strb	r3, [r7, #15]
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0e1      	beq.n	8006b88 <USBD_LL_Init+0x4c>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000f70 	.word	0x20000f70
 8006bd4:	2000026c 	.word	0x2000026c
 8006bd8:	20000ca8 	.word	0x20000ca8
 8006bdc:	20000ed4 	.word	0x20000ed4

08006be0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fa fb6e 	bl	80012d8 <HAL_PCD_Start>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 f92a 	bl	8006e5c <USBD_Get_USB_Status>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	4608      	mov	r0, r1
 8006c20:	4611      	mov	r1, r2
 8006c22:	461a      	mov	r2, r3
 8006c24:	4603      	mov	r3, r0
 8006c26:	70fb      	strb	r3, [r7, #3]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	70bb      	strb	r3, [r7, #2]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8006c3e:	78bb      	ldrb	r3, [r7, #2]
 8006c40:	883a      	ldrh	r2, [r7, #0]
 8006c42:	78f9      	ldrb	r1, [r7, #3]
 8006c44:	f7fa ff52 	bl	8001aec <HAL_PCD_EP_Open>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 f904 	bl	8006e5c <USBD_Get_USB_Status>
 8006c54:	4603      	mov	r3, r0
 8006c56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8006c7c:	78fa      	ldrb	r2, [r7, #3]
 8006c7e:	4611      	mov	r1, r2
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fa ff9b 	bl	8001bbc <HAL_PCD_EP_Close>
 8006c86:	4603      	mov	r3, r0
 8006c88:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 f8e5 	bl	8006e5c <USBD_Get_USB_Status>
 8006c92:	4603      	mov	r3, r0
 8006c94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8006cba:	78fa      	ldrb	r2, [r7, #3]
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fb f873 	bl	8001daa <HAL_PCD_EP_SetStall>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f8c6 	bl	8006e5c <USBD_Get_USB_Status>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8006cf8:	78fa      	ldrb	r2, [r7, #3]
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fb f8b8 	bl	8001e72 <HAL_PCD_EP_ClrStall>
 8006d02:	4603      	mov	r3, r0
 8006d04:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 f8a7 	bl	8006e5c <USBD_Get_USB_Status>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d12:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8006d2e:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 8006d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	da0b      	bge.n	8006d50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006d38:	78fb      	ldrb	r3, [r7, #3]
 8006d3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d3e:	68f9      	ldr	r1, [r7, #12]
 8006d40:	4613      	mov	r3, r2
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	1a9b      	subs	r3, r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	440b      	add	r3, r1
 8006d4a:	333e      	adds	r3, #62	; 0x3e
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	e00b      	b.n	8006d68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d56:	68f9      	ldr	r1, [r7, #12]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	1a9b      	subs	r3, r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8006d8e:	78fa      	ldrb	r2, [r7, #3]
 8006d90:	4611      	mov	r1, r2
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fa fe85 	bl	8001aa2 <HAL_PCD_SetAddress>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 f85c 	bl	8006e5c <USBD_Get_USB_Status>
 8006da4:	4603      	mov	r3, r0
 8006da6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b086      	sub	sp, #24
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8006dd0:	7af9      	ldrb	r1, [r7, #11]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	f7fa ff9e 	bl	8001d16 <HAL_PCD_EP_Transmit>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8006dde:	7dfb      	ldrb	r3, [r7, #23]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 f83b 	bl	8006e5c <USBD_Get_USB_Status>
 8006de6:	4603      	mov	r3, r0
 8006de8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006dea:	7dbb      	ldrb	r3, [r7, #22]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	607a      	str	r2, [r7, #4]
 8006dfe:	603b      	str	r3, [r7, #0]
 8006e00:	460b      	mov	r3, r1
 8006e02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8006e12:	7af9      	ldrb	r1, [r7, #11]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	f7fa ff1a 	bl	8001c50 <HAL_PCD_EP_Receive>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 f81a 	bl	8006e5c <USBD_Get_USB_Status>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8006e48:	78fa      	ldrb	r2, [r7, #3]
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fa ff4a 	bl	8001ce6 <HAL_PCD_EP_GetRxCount>
 8006e52:	4603      	mov	r3, r0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d817      	bhi.n	8006ea0 <USBD_Get_USB_Status+0x44>
 8006e70:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <USBD_Get_USB_Status+0x1c>)
 8006e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e76:	bf00      	nop
 8006e78:	08006e89 	.word	0x08006e89
 8006e7c:	08006e8f 	.word	0x08006e8f
 8006e80:	08006e95 	.word	0x08006e95
 8006e84:	08006e9b 	.word	0x08006e9b
  {
  case HAL_OK:
    usb_status = USBD_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e8c:	e00b      	b.n	8006ea6 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	73fb      	strb	r3, [r7, #15]
    break;
 8006e92:	e008      	b.n	8006ea6 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 8006e94:	2301      	movs	r3, #1
 8006e96:	73fb      	strb	r3, [r7, #15]
    break;
 8006e98:	e005      	b.n	8006ea6 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8006e9e:	e002      	b.n	8006ea6 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea4:	bf00      	nop
  }
  return usb_status;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <__errno>:
 8006eb4:	4b01      	ldr	r3, [pc, #4]	; (8006ebc <__errno+0x8>)
 8006eb6:	6818      	ldr	r0, [r3, #0]
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	2000019c 	.word	0x2000019c

08006ec0 <__libc_init_array>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	4d0d      	ldr	r5, [pc, #52]	; (8006ef8 <__libc_init_array+0x38>)
 8006ec4:	4c0d      	ldr	r4, [pc, #52]	; (8006efc <__libc_init_array+0x3c>)
 8006ec6:	1b64      	subs	r4, r4, r5
 8006ec8:	10a4      	asrs	r4, r4, #2
 8006eca:	2600      	movs	r6, #0
 8006ecc:	42a6      	cmp	r6, r4
 8006ece:	d109      	bne.n	8006ee4 <__libc_init_array+0x24>
 8006ed0:	4d0b      	ldr	r5, [pc, #44]	; (8006f00 <__libc_init_array+0x40>)
 8006ed2:	4c0c      	ldr	r4, [pc, #48]	; (8006f04 <__libc_init_array+0x44>)
 8006ed4:	f000 fc62 	bl	800779c <_init>
 8006ed8:	1b64      	subs	r4, r4, r5
 8006eda:	10a4      	asrs	r4, r4, #2
 8006edc:	2600      	movs	r6, #0
 8006ede:	42a6      	cmp	r6, r4
 8006ee0:	d105      	bne.n	8006eee <__libc_init_array+0x2e>
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}
 8006ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee8:	4798      	blx	r3
 8006eea:	3601      	adds	r6, #1
 8006eec:	e7ee      	b.n	8006ecc <__libc_init_array+0xc>
 8006eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef2:	4798      	blx	r3
 8006ef4:	3601      	adds	r6, #1
 8006ef6:	e7f2      	b.n	8006ede <__libc_init_array+0x1e>
 8006ef8:	08007860 	.word	0x08007860
 8006efc:	08007860 	.word	0x08007860
 8006f00:	08007860 	.word	0x08007860
 8006f04:	08007864 	.word	0x08007864

08006f08 <memcpy>:
 8006f08:	440a      	add	r2, r1
 8006f0a:	4291      	cmp	r1, r2
 8006f0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006f10:	d100      	bne.n	8006f14 <memcpy+0xc>
 8006f12:	4770      	bx	lr
 8006f14:	b510      	push	{r4, lr}
 8006f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f1e:	4291      	cmp	r1, r2
 8006f20:	d1f9      	bne.n	8006f16 <memcpy+0xe>
 8006f22:	bd10      	pop	{r4, pc}

08006f24 <memset>:
 8006f24:	4402      	add	r2, r0
 8006f26:	4603      	mov	r3, r0
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d100      	bne.n	8006f2e <memset+0xa>
 8006f2c:	4770      	bx	lr
 8006f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f32:	e7f9      	b.n	8006f28 <memset+0x4>

08006f34 <sniprintf>:
 8006f34:	b40c      	push	{r2, r3}
 8006f36:	b530      	push	{r4, r5, lr}
 8006f38:	4b17      	ldr	r3, [pc, #92]	; (8006f98 <sniprintf+0x64>)
 8006f3a:	1e0c      	subs	r4, r1, #0
 8006f3c:	681d      	ldr	r5, [r3, #0]
 8006f3e:	b09d      	sub	sp, #116	; 0x74
 8006f40:	da08      	bge.n	8006f54 <sniprintf+0x20>
 8006f42:	238b      	movs	r3, #139	; 0x8b
 8006f44:	602b      	str	r3, [r5, #0]
 8006f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f4a:	b01d      	add	sp, #116	; 0x74
 8006f4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f50:	b002      	add	sp, #8
 8006f52:	4770      	bx	lr
 8006f54:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006f58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f5c:	bf14      	ite	ne
 8006f5e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006f62:	4623      	moveq	r3, r4
 8006f64:	9304      	str	r3, [sp, #16]
 8006f66:	9307      	str	r3, [sp, #28]
 8006f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f6c:	9002      	str	r0, [sp, #8]
 8006f6e:	9006      	str	r0, [sp, #24]
 8006f70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f76:	ab21      	add	r3, sp, #132	; 0x84
 8006f78:	a902      	add	r1, sp, #8
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	9301      	str	r3, [sp, #4]
 8006f7e:	f000 f869 	bl	8007054 <_svfiprintf_r>
 8006f82:	1c43      	adds	r3, r0, #1
 8006f84:	bfbc      	itt	lt
 8006f86:	238b      	movlt	r3, #139	; 0x8b
 8006f88:	602b      	strlt	r3, [r5, #0]
 8006f8a:	2c00      	cmp	r4, #0
 8006f8c:	d0dd      	beq.n	8006f4a <sniprintf+0x16>
 8006f8e:	9b02      	ldr	r3, [sp, #8]
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
 8006f94:	e7d9      	b.n	8006f4a <sniprintf+0x16>
 8006f96:	bf00      	nop
 8006f98:	2000019c 	.word	0x2000019c

08006f9c <__ssputs_r>:
 8006f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa0:	688e      	ldr	r6, [r1, #8]
 8006fa2:	429e      	cmp	r6, r3
 8006fa4:	4682      	mov	sl, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	4690      	mov	r8, r2
 8006faa:	461f      	mov	r7, r3
 8006fac:	d838      	bhi.n	8007020 <__ssputs_r+0x84>
 8006fae:	898a      	ldrh	r2, [r1, #12]
 8006fb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fb4:	d032      	beq.n	800701c <__ssputs_r+0x80>
 8006fb6:	6825      	ldr	r5, [r4, #0]
 8006fb8:	6909      	ldr	r1, [r1, #16]
 8006fba:	eba5 0901 	sub.w	r9, r5, r1
 8006fbe:	6965      	ldr	r5, [r4, #20]
 8006fc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fc8:	3301      	adds	r3, #1
 8006fca:	444b      	add	r3, r9
 8006fcc:	106d      	asrs	r5, r5, #1
 8006fce:	429d      	cmp	r5, r3
 8006fd0:	bf38      	it	cc
 8006fd2:	461d      	movcc	r5, r3
 8006fd4:	0553      	lsls	r3, r2, #21
 8006fd6:	d531      	bpl.n	800703c <__ssputs_r+0xa0>
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f000 fb39 	bl	8007650 <_malloc_r>
 8006fde:	4606      	mov	r6, r0
 8006fe0:	b950      	cbnz	r0, 8006ff8 <__ssputs_r+0x5c>
 8006fe2:	230c      	movs	r3, #12
 8006fe4:	f8ca 3000 	str.w	r3, [sl]
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fee:	81a3      	strh	r3, [r4, #12]
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff8:	6921      	ldr	r1, [r4, #16]
 8006ffa:	464a      	mov	r2, r9
 8006ffc:	f7ff ff84 	bl	8006f08 <memcpy>
 8007000:	89a3      	ldrh	r3, [r4, #12]
 8007002:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700a:	81a3      	strh	r3, [r4, #12]
 800700c:	6126      	str	r6, [r4, #16]
 800700e:	6165      	str	r5, [r4, #20]
 8007010:	444e      	add	r6, r9
 8007012:	eba5 0509 	sub.w	r5, r5, r9
 8007016:	6026      	str	r6, [r4, #0]
 8007018:	60a5      	str	r5, [r4, #8]
 800701a:	463e      	mov	r6, r7
 800701c:	42be      	cmp	r6, r7
 800701e:	d900      	bls.n	8007022 <__ssputs_r+0x86>
 8007020:	463e      	mov	r6, r7
 8007022:	4632      	mov	r2, r6
 8007024:	6820      	ldr	r0, [r4, #0]
 8007026:	4641      	mov	r1, r8
 8007028:	f000 faa8 	bl	800757c <memmove>
 800702c:	68a3      	ldr	r3, [r4, #8]
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	1b9b      	subs	r3, r3, r6
 8007032:	4432      	add	r2, r6
 8007034:	60a3      	str	r3, [r4, #8]
 8007036:	6022      	str	r2, [r4, #0]
 8007038:	2000      	movs	r0, #0
 800703a:	e7db      	b.n	8006ff4 <__ssputs_r+0x58>
 800703c:	462a      	mov	r2, r5
 800703e:	f000 fb61 	bl	8007704 <_realloc_r>
 8007042:	4606      	mov	r6, r0
 8007044:	2800      	cmp	r0, #0
 8007046:	d1e1      	bne.n	800700c <__ssputs_r+0x70>
 8007048:	6921      	ldr	r1, [r4, #16]
 800704a:	4650      	mov	r0, sl
 800704c:	f000 fab0 	bl	80075b0 <_free_r>
 8007050:	e7c7      	b.n	8006fe2 <__ssputs_r+0x46>
	...

08007054 <_svfiprintf_r>:
 8007054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007058:	4698      	mov	r8, r3
 800705a:	898b      	ldrh	r3, [r1, #12]
 800705c:	061b      	lsls	r3, r3, #24
 800705e:	b09d      	sub	sp, #116	; 0x74
 8007060:	4607      	mov	r7, r0
 8007062:	460d      	mov	r5, r1
 8007064:	4614      	mov	r4, r2
 8007066:	d50e      	bpl.n	8007086 <_svfiprintf_r+0x32>
 8007068:	690b      	ldr	r3, [r1, #16]
 800706a:	b963      	cbnz	r3, 8007086 <_svfiprintf_r+0x32>
 800706c:	2140      	movs	r1, #64	; 0x40
 800706e:	f000 faef 	bl	8007650 <_malloc_r>
 8007072:	6028      	str	r0, [r5, #0]
 8007074:	6128      	str	r0, [r5, #16]
 8007076:	b920      	cbnz	r0, 8007082 <_svfiprintf_r+0x2e>
 8007078:	230c      	movs	r3, #12
 800707a:	603b      	str	r3, [r7, #0]
 800707c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007080:	e0d1      	b.n	8007226 <_svfiprintf_r+0x1d2>
 8007082:	2340      	movs	r3, #64	; 0x40
 8007084:	616b      	str	r3, [r5, #20]
 8007086:	2300      	movs	r3, #0
 8007088:	9309      	str	r3, [sp, #36]	; 0x24
 800708a:	2320      	movs	r3, #32
 800708c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007090:	f8cd 800c 	str.w	r8, [sp, #12]
 8007094:	2330      	movs	r3, #48	; 0x30
 8007096:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007240 <_svfiprintf_r+0x1ec>
 800709a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800709e:	f04f 0901 	mov.w	r9, #1
 80070a2:	4623      	mov	r3, r4
 80070a4:	469a      	mov	sl, r3
 80070a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070aa:	b10a      	cbz	r2, 80070b0 <_svfiprintf_r+0x5c>
 80070ac:	2a25      	cmp	r2, #37	; 0x25
 80070ae:	d1f9      	bne.n	80070a4 <_svfiprintf_r+0x50>
 80070b0:	ebba 0b04 	subs.w	fp, sl, r4
 80070b4:	d00b      	beq.n	80070ce <_svfiprintf_r+0x7a>
 80070b6:	465b      	mov	r3, fp
 80070b8:	4622      	mov	r2, r4
 80070ba:	4629      	mov	r1, r5
 80070bc:	4638      	mov	r0, r7
 80070be:	f7ff ff6d 	bl	8006f9c <__ssputs_r>
 80070c2:	3001      	adds	r0, #1
 80070c4:	f000 80aa 	beq.w	800721c <_svfiprintf_r+0x1c8>
 80070c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ca:	445a      	add	r2, fp
 80070cc:	9209      	str	r2, [sp, #36]	; 0x24
 80070ce:	f89a 3000 	ldrb.w	r3, [sl]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 80a2 	beq.w	800721c <_svfiprintf_r+0x1c8>
 80070d8:	2300      	movs	r3, #0
 80070da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070e2:	f10a 0a01 	add.w	sl, sl, #1
 80070e6:	9304      	str	r3, [sp, #16]
 80070e8:	9307      	str	r3, [sp, #28]
 80070ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070ee:	931a      	str	r3, [sp, #104]	; 0x68
 80070f0:	4654      	mov	r4, sl
 80070f2:	2205      	movs	r2, #5
 80070f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f8:	4851      	ldr	r0, [pc, #324]	; (8007240 <_svfiprintf_r+0x1ec>)
 80070fa:	f7f9 f871 	bl	80001e0 <memchr>
 80070fe:	9a04      	ldr	r2, [sp, #16]
 8007100:	b9d8      	cbnz	r0, 800713a <_svfiprintf_r+0xe6>
 8007102:	06d0      	lsls	r0, r2, #27
 8007104:	bf44      	itt	mi
 8007106:	2320      	movmi	r3, #32
 8007108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800710c:	0711      	lsls	r1, r2, #28
 800710e:	bf44      	itt	mi
 8007110:	232b      	movmi	r3, #43	; 0x2b
 8007112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007116:	f89a 3000 	ldrb.w	r3, [sl]
 800711a:	2b2a      	cmp	r3, #42	; 0x2a
 800711c:	d015      	beq.n	800714a <_svfiprintf_r+0xf6>
 800711e:	9a07      	ldr	r2, [sp, #28]
 8007120:	4654      	mov	r4, sl
 8007122:	2000      	movs	r0, #0
 8007124:	f04f 0c0a 	mov.w	ip, #10
 8007128:	4621      	mov	r1, r4
 800712a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800712e:	3b30      	subs	r3, #48	; 0x30
 8007130:	2b09      	cmp	r3, #9
 8007132:	d94e      	bls.n	80071d2 <_svfiprintf_r+0x17e>
 8007134:	b1b0      	cbz	r0, 8007164 <_svfiprintf_r+0x110>
 8007136:	9207      	str	r2, [sp, #28]
 8007138:	e014      	b.n	8007164 <_svfiprintf_r+0x110>
 800713a:	eba0 0308 	sub.w	r3, r0, r8
 800713e:	fa09 f303 	lsl.w	r3, r9, r3
 8007142:	4313      	orrs	r3, r2
 8007144:	9304      	str	r3, [sp, #16]
 8007146:	46a2      	mov	sl, r4
 8007148:	e7d2      	b.n	80070f0 <_svfiprintf_r+0x9c>
 800714a:	9b03      	ldr	r3, [sp, #12]
 800714c:	1d19      	adds	r1, r3, #4
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	9103      	str	r1, [sp, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	bfbb      	ittet	lt
 8007156:	425b      	neglt	r3, r3
 8007158:	f042 0202 	orrlt.w	r2, r2, #2
 800715c:	9307      	strge	r3, [sp, #28]
 800715e:	9307      	strlt	r3, [sp, #28]
 8007160:	bfb8      	it	lt
 8007162:	9204      	strlt	r2, [sp, #16]
 8007164:	7823      	ldrb	r3, [r4, #0]
 8007166:	2b2e      	cmp	r3, #46	; 0x2e
 8007168:	d10c      	bne.n	8007184 <_svfiprintf_r+0x130>
 800716a:	7863      	ldrb	r3, [r4, #1]
 800716c:	2b2a      	cmp	r3, #42	; 0x2a
 800716e:	d135      	bne.n	80071dc <_svfiprintf_r+0x188>
 8007170:	9b03      	ldr	r3, [sp, #12]
 8007172:	1d1a      	adds	r2, r3, #4
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	9203      	str	r2, [sp, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	bfb8      	it	lt
 800717c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007180:	3402      	adds	r4, #2
 8007182:	9305      	str	r3, [sp, #20]
 8007184:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007250 <_svfiprintf_r+0x1fc>
 8007188:	7821      	ldrb	r1, [r4, #0]
 800718a:	2203      	movs	r2, #3
 800718c:	4650      	mov	r0, sl
 800718e:	f7f9 f827 	bl	80001e0 <memchr>
 8007192:	b140      	cbz	r0, 80071a6 <_svfiprintf_r+0x152>
 8007194:	2340      	movs	r3, #64	; 0x40
 8007196:	eba0 000a 	sub.w	r0, r0, sl
 800719a:	fa03 f000 	lsl.w	r0, r3, r0
 800719e:	9b04      	ldr	r3, [sp, #16]
 80071a0:	4303      	orrs	r3, r0
 80071a2:	3401      	adds	r4, #1
 80071a4:	9304      	str	r3, [sp, #16]
 80071a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071aa:	4826      	ldr	r0, [pc, #152]	; (8007244 <_svfiprintf_r+0x1f0>)
 80071ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071b0:	2206      	movs	r2, #6
 80071b2:	f7f9 f815 	bl	80001e0 <memchr>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d038      	beq.n	800722c <_svfiprintf_r+0x1d8>
 80071ba:	4b23      	ldr	r3, [pc, #140]	; (8007248 <_svfiprintf_r+0x1f4>)
 80071bc:	bb1b      	cbnz	r3, 8007206 <_svfiprintf_r+0x1b2>
 80071be:	9b03      	ldr	r3, [sp, #12]
 80071c0:	3307      	adds	r3, #7
 80071c2:	f023 0307 	bic.w	r3, r3, #7
 80071c6:	3308      	adds	r3, #8
 80071c8:	9303      	str	r3, [sp, #12]
 80071ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071cc:	4433      	add	r3, r6
 80071ce:	9309      	str	r3, [sp, #36]	; 0x24
 80071d0:	e767      	b.n	80070a2 <_svfiprintf_r+0x4e>
 80071d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80071d6:	460c      	mov	r4, r1
 80071d8:	2001      	movs	r0, #1
 80071da:	e7a5      	b.n	8007128 <_svfiprintf_r+0xd4>
 80071dc:	2300      	movs	r3, #0
 80071de:	3401      	adds	r4, #1
 80071e0:	9305      	str	r3, [sp, #20]
 80071e2:	4619      	mov	r1, r3
 80071e4:	f04f 0c0a 	mov.w	ip, #10
 80071e8:	4620      	mov	r0, r4
 80071ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071ee:	3a30      	subs	r2, #48	; 0x30
 80071f0:	2a09      	cmp	r2, #9
 80071f2:	d903      	bls.n	80071fc <_svfiprintf_r+0x1a8>
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0c5      	beq.n	8007184 <_svfiprintf_r+0x130>
 80071f8:	9105      	str	r1, [sp, #20]
 80071fa:	e7c3      	b.n	8007184 <_svfiprintf_r+0x130>
 80071fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007200:	4604      	mov	r4, r0
 8007202:	2301      	movs	r3, #1
 8007204:	e7f0      	b.n	80071e8 <_svfiprintf_r+0x194>
 8007206:	ab03      	add	r3, sp, #12
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	462a      	mov	r2, r5
 800720c:	4b0f      	ldr	r3, [pc, #60]	; (800724c <_svfiprintf_r+0x1f8>)
 800720e:	a904      	add	r1, sp, #16
 8007210:	4638      	mov	r0, r7
 8007212:	f3af 8000 	nop.w
 8007216:	1c42      	adds	r2, r0, #1
 8007218:	4606      	mov	r6, r0
 800721a:	d1d6      	bne.n	80071ca <_svfiprintf_r+0x176>
 800721c:	89ab      	ldrh	r3, [r5, #12]
 800721e:	065b      	lsls	r3, r3, #25
 8007220:	f53f af2c 	bmi.w	800707c <_svfiprintf_r+0x28>
 8007224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007226:	b01d      	add	sp, #116	; 0x74
 8007228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722c:	ab03      	add	r3, sp, #12
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	462a      	mov	r2, r5
 8007232:	4b06      	ldr	r3, [pc, #24]	; (800724c <_svfiprintf_r+0x1f8>)
 8007234:	a904      	add	r1, sp, #16
 8007236:	4638      	mov	r0, r7
 8007238:	f000 f87a 	bl	8007330 <_printf_i>
 800723c:	e7eb      	b.n	8007216 <_svfiprintf_r+0x1c2>
 800723e:	bf00      	nop
 8007240:	08007824 	.word	0x08007824
 8007244:	0800782e 	.word	0x0800782e
 8007248:	00000000 	.word	0x00000000
 800724c:	08006f9d 	.word	0x08006f9d
 8007250:	0800782a 	.word	0x0800782a

08007254 <_printf_common>:
 8007254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007258:	4616      	mov	r6, r2
 800725a:	4699      	mov	r9, r3
 800725c:	688a      	ldr	r2, [r1, #8]
 800725e:	690b      	ldr	r3, [r1, #16]
 8007260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007264:	4293      	cmp	r3, r2
 8007266:	bfb8      	it	lt
 8007268:	4613      	movlt	r3, r2
 800726a:	6033      	str	r3, [r6, #0]
 800726c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007270:	4607      	mov	r7, r0
 8007272:	460c      	mov	r4, r1
 8007274:	b10a      	cbz	r2, 800727a <_printf_common+0x26>
 8007276:	3301      	adds	r3, #1
 8007278:	6033      	str	r3, [r6, #0]
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	0699      	lsls	r1, r3, #26
 800727e:	bf42      	ittt	mi
 8007280:	6833      	ldrmi	r3, [r6, #0]
 8007282:	3302      	addmi	r3, #2
 8007284:	6033      	strmi	r3, [r6, #0]
 8007286:	6825      	ldr	r5, [r4, #0]
 8007288:	f015 0506 	ands.w	r5, r5, #6
 800728c:	d106      	bne.n	800729c <_printf_common+0x48>
 800728e:	f104 0a19 	add.w	sl, r4, #25
 8007292:	68e3      	ldr	r3, [r4, #12]
 8007294:	6832      	ldr	r2, [r6, #0]
 8007296:	1a9b      	subs	r3, r3, r2
 8007298:	42ab      	cmp	r3, r5
 800729a:	dc26      	bgt.n	80072ea <_printf_common+0x96>
 800729c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072a0:	1e13      	subs	r3, r2, #0
 80072a2:	6822      	ldr	r2, [r4, #0]
 80072a4:	bf18      	it	ne
 80072a6:	2301      	movne	r3, #1
 80072a8:	0692      	lsls	r2, r2, #26
 80072aa:	d42b      	bmi.n	8007304 <_printf_common+0xb0>
 80072ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072b0:	4649      	mov	r1, r9
 80072b2:	4638      	mov	r0, r7
 80072b4:	47c0      	blx	r8
 80072b6:	3001      	adds	r0, #1
 80072b8:	d01e      	beq.n	80072f8 <_printf_common+0xa4>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	68e5      	ldr	r5, [r4, #12]
 80072be:	6832      	ldr	r2, [r6, #0]
 80072c0:	f003 0306 	and.w	r3, r3, #6
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	bf08      	it	eq
 80072c8:	1aad      	subeq	r5, r5, r2
 80072ca:	68a3      	ldr	r3, [r4, #8]
 80072cc:	6922      	ldr	r2, [r4, #16]
 80072ce:	bf0c      	ite	eq
 80072d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072d4:	2500      	movne	r5, #0
 80072d6:	4293      	cmp	r3, r2
 80072d8:	bfc4      	itt	gt
 80072da:	1a9b      	subgt	r3, r3, r2
 80072dc:	18ed      	addgt	r5, r5, r3
 80072de:	2600      	movs	r6, #0
 80072e0:	341a      	adds	r4, #26
 80072e2:	42b5      	cmp	r5, r6
 80072e4:	d11a      	bne.n	800731c <_printf_common+0xc8>
 80072e6:	2000      	movs	r0, #0
 80072e8:	e008      	b.n	80072fc <_printf_common+0xa8>
 80072ea:	2301      	movs	r3, #1
 80072ec:	4652      	mov	r2, sl
 80072ee:	4649      	mov	r1, r9
 80072f0:	4638      	mov	r0, r7
 80072f2:	47c0      	blx	r8
 80072f4:	3001      	adds	r0, #1
 80072f6:	d103      	bne.n	8007300 <_printf_common+0xac>
 80072f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007300:	3501      	adds	r5, #1
 8007302:	e7c6      	b.n	8007292 <_printf_common+0x3e>
 8007304:	18e1      	adds	r1, r4, r3
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	2030      	movs	r0, #48	; 0x30
 800730a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800730e:	4422      	add	r2, r4
 8007310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007318:	3302      	adds	r3, #2
 800731a:	e7c7      	b.n	80072ac <_printf_common+0x58>
 800731c:	2301      	movs	r3, #1
 800731e:	4622      	mov	r2, r4
 8007320:	4649      	mov	r1, r9
 8007322:	4638      	mov	r0, r7
 8007324:	47c0      	blx	r8
 8007326:	3001      	adds	r0, #1
 8007328:	d0e6      	beq.n	80072f8 <_printf_common+0xa4>
 800732a:	3601      	adds	r6, #1
 800732c:	e7d9      	b.n	80072e2 <_printf_common+0x8e>
	...

08007330 <_printf_i>:
 8007330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007334:	460c      	mov	r4, r1
 8007336:	4691      	mov	r9, r2
 8007338:	7e27      	ldrb	r7, [r4, #24]
 800733a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800733c:	2f78      	cmp	r7, #120	; 0x78
 800733e:	4680      	mov	r8, r0
 8007340:	469a      	mov	sl, r3
 8007342:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007346:	d807      	bhi.n	8007358 <_printf_i+0x28>
 8007348:	2f62      	cmp	r7, #98	; 0x62
 800734a:	d80a      	bhi.n	8007362 <_printf_i+0x32>
 800734c:	2f00      	cmp	r7, #0
 800734e:	f000 80d8 	beq.w	8007502 <_printf_i+0x1d2>
 8007352:	2f58      	cmp	r7, #88	; 0x58
 8007354:	f000 80a3 	beq.w	800749e <_printf_i+0x16e>
 8007358:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800735c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007360:	e03a      	b.n	80073d8 <_printf_i+0xa8>
 8007362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007366:	2b15      	cmp	r3, #21
 8007368:	d8f6      	bhi.n	8007358 <_printf_i+0x28>
 800736a:	a001      	add	r0, pc, #4	; (adr r0, 8007370 <_printf_i+0x40>)
 800736c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007370:	080073c9 	.word	0x080073c9
 8007374:	080073dd 	.word	0x080073dd
 8007378:	08007359 	.word	0x08007359
 800737c:	08007359 	.word	0x08007359
 8007380:	08007359 	.word	0x08007359
 8007384:	08007359 	.word	0x08007359
 8007388:	080073dd 	.word	0x080073dd
 800738c:	08007359 	.word	0x08007359
 8007390:	08007359 	.word	0x08007359
 8007394:	08007359 	.word	0x08007359
 8007398:	08007359 	.word	0x08007359
 800739c:	080074e9 	.word	0x080074e9
 80073a0:	0800740d 	.word	0x0800740d
 80073a4:	080074cb 	.word	0x080074cb
 80073a8:	08007359 	.word	0x08007359
 80073ac:	08007359 	.word	0x08007359
 80073b0:	0800750b 	.word	0x0800750b
 80073b4:	08007359 	.word	0x08007359
 80073b8:	0800740d 	.word	0x0800740d
 80073bc:	08007359 	.word	0x08007359
 80073c0:	08007359 	.word	0x08007359
 80073c4:	080074d3 	.word	0x080074d3
 80073c8:	680b      	ldr	r3, [r1, #0]
 80073ca:	1d1a      	adds	r2, r3, #4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	600a      	str	r2, [r1, #0]
 80073d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073d8:	2301      	movs	r3, #1
 80073da:	e0a3      	b.n	8007524 <_printf_i+0x1f4>
 80073dc:	6825      	ldr	r5, [r4, #0]
 80073de:	6808      	ldr	r0, [r1, #0]
 80073e0:	062e      	lsls	r6, r5, #24
 80073e2:	f100 0304 	add.w	r3, r0, #4
 80073e6:	d50a      	bpl.n	80073fe <_printf_i+0xce>
 80073e8:	6805      	ldr	r5, [r0, #0]
 80073ea:	600b      	str	r3, [r1, #0]
 80073ec:	2d00      	cmp	r5, #0
 80073ee:	da03      	bge.n	80073f8 <_printf_i+0xc8>
 80073f0:	232d      	movs	r3, #45	; 0x2d
 80073f2:	426d      	negs	r5, r5
 80073f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073f8:	485e      	ldr	r0, [pc, #376]	; (8007574 <_printf_i+0x244>)
 80073fa:	230a      	movs	r3, #10
 80073fc:	e019      	b.n	8007432 <_printf_i+0x102>
 80073fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007402:	6805      	ldr	r5, [r0, #0]
 8007404:	600b      	str	r3, [r1, #0]
 8007406:	bf18      	it	ne
 8007408:	b22d      	sxthne	r5, r5
 800740a:	e7ef      	b.n	80073ec <_printf_i+0xbc>
 800740c:	680b      	ldr	r3, [r1, #0]
 800740e:	6825      	ldr	r5, [r4, #0]
 8007410:	1d18      	adds	r0, r3, #4
 8007412:	6008      	str	r0, [r1, #0]
 8007414:	0628      	lsls	r0, r5, #24
 8007416:	d501      	bpl.n	800741c <_printf_i+0xec>
 8007418:	681d      	ldr	r5, [r3, #0]
 800741a:	e002      	b.n	8007422 <_printf_i+0xf2>
 800741c:	0669      	lsls	r1, r5, #25
 800741e:	d5fb      	bpl.n	8007418 <_printf_i+0xe8>
 8007420:	881d      	ldrh	r5, [r3, #0]
 8007422:	4854      	ldr	r0, [pc, #336]	; (8007574 <_printf_i+0x244>)
 8007424:	2f6f      	cmp	r7, #111	; 0x6f
 8007426:	bf0c      	ite	eq
 8007428:	2308      	moveq	r3, #8
 800742a:	230a      	movne	r3, #10
 800742c:	2100      	movs	r1, #0
 800742e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007432:	6866      	ldr	r6, [r4, #4]
 8007434:	60a6      	str	r6, [r4, #8]
 8007436:	2e00      	cmp	r6, #0
 8007438:	bfa2      	ittt	ge
 800743a:	6821      	ldrge	r1, [r4, #0]
 800743c:	f021 0104 	bicge.w	r1, r1, #4
 8007440:	6021      	strge	r1, [r4, #0]
 8007442:	b90d      	cbnz	r5, 8007448 <_printf_i+0x118>
 8007444:	2e00      	cmp	r6, #0
 8007446:	d04d      	beq.n	80074e4 <_printf_i+0x1b4>
 8007448:	4616      	mov	r6, r2
 800744a:	fbb5 f1f3 	udiv	r1, r5, r3
 800744e:	fb03 5711 	mls	r7, r3, r1, r5
 8007452:	5dc7      	ldrb	r7, [r0, r7]
 8007454:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007458:	462f      	mov	r7, r5
 800745a:	42bb      	cmp	r3, r7
 800745c:	460d      	mov	r5, r1
 800745e:	d9f4      	bls.n	800744a <_printf_i+0x11a>
 8007460:	2b08      	cmp	r3, #8
 8007462:	d10b      	bne.n	800747c <_printf_i+0x14c>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	07df      	lsls	r7, r3, #31
 8007468:	d508      	bpl.n	800747c <_printf_i+0x14c>
 800746a:	6923      	ldr	r3, [r4, #16]
 800746c:	6861      	ldr	r1, [r4, #4]
 800746e:	4299      	cmp	r1, r3
 8007470:	bfde      	ittt	le
 8007472:	2330      	movle	r3, #48	; 0x30
 8007474:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007478:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800747c:	1b92      	subs	r2, r2, r6
 800747e:	6122      	str	r2, [r4, #16]
 8007480:	f8cd a000 	str.w	sl, [sp]
 8007484:	464b      	mov	r3, r9
 8007486:	aa03      	add	r2, sp, #12
 8007488:	4621      	mov	r1, r4
 800748a:	4640      	mov	r0, r8
 800748c:	f7ff fee2 	bl	8007254 <_printf_common>
 8007490:	3001      	adds	r0, #1
 8007492:	d14c      	bne.n	800752e <_printf_i+0x1fe>
 8007494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007498:	b004      	add	sp, #16
 800749a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749e:	4835      	ldr	r0, [pc, #212]	; (8007574 <_printf_i+0x244>)
 80074a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	680e      	ldr	r6, [r1, #0]
 80074a8:	061f      	lsls	r7, r3, #24
 80074aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80074ae:	600e      	str	r6, [r1, #0]
 80074b0:	d514      	bpl.n	80074dc <_printf_i+0x1ac>
 80074b2:	07d9      	lsls	r1, r3, #31
 80074b4:	bf44      	itt	mi
 80074b6:	f043 0320 	orrmi.w	r3, r3, #32
 80074ba:	6023      	strmi	r3, [r4, #0]
 80074bc:	b91d      	cbnz	r5, 80074c6 <_printf_i+0x196>
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	f023 0320 	bic.w	r3, r3, #32
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	2310      	movs	r3, #16
 80074c8:	e7b0      	b.n	800742c <_printf_i+0xfc>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	f043 0320 	orr.w	r3, r3, #32
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	2378      	movs	r3, #120	; 0x78
 80074d4:	4828      	ldr	r0, [pc, #160]	; (8007578 <_printf_i+0x248>)
 80074d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074da:	e7e3      	b.n	80074a4 <_printf_i+0x174>
 80074dc:	065e      	lsls	r6, r3, #25
 80074de:	bf48      	it	mi
 80074e0:	b2ad      	uxthmi	r5, r5
 80074e2:	e7e6      	b.n	80074b2 <_printf_i+0x182>
 80074e4:	4616      	mov	r6, r2
 80074e6:	e7bb      	b.n	8007460 <_printf_i+0x130>
 80074e8:	680b      	ldr	r3, [r1, #0]
 80074ea:	6826      	ldr	r6, [r4, #0]
 80074ec:	6960      	ldr	r0, [r4, #20]
 80074ee:	1d1d      	adds	r5, r3, #4
 80074f0:	600d      	str	r5, [r1, #0]
 80074f2:	0635      	lsls	r5, r6, #24
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	d501      	bpl.n	80074fc <_printf_i+0x1cc>
 80074f8:	6018      	str	r0, [r3, #0]
 80074fa:	e002      	b.n	8007502 <_printf_i+0x1d2>
 80074fc:	0671      	lsls	r1, r6, #25
 80074fe:	d5fb      	bpl.n	80074f8 <_printf_i+0x1c8>
 8007500:	8018      	strh	r0, [r3, #0]
 8007502:	2300      	movs	r3, #0
 8007504:	6123      	str	r3, [r4, #16]
 8007506:	4616      	mov	r6, r2
 8007508:	e7ba      	b.n	8007480 <_printf_i+0x150>
 800750a:	680b      	ldr	r3, [r1, #0]
 800750c:	1d1a      	adds	r2, r3, #4
 800750e:	600a      	str	r2, [r1, #0]
 8007510:	681e      	ldr	r6, [r3, #0]
 8007512:	6862      	ldr	r2, [r4, #4]
 8007514:	2100      	movs	r1, #0
 8007516:	4630      	mov	r0, r6
 8007518:	f7f8 fe62 	bl	80001e0 <memchr>
 800751c:	b108      	cbz	r0, 8007522 <_printf_i+0x1f2>
 800751e:	1b80      	subs	r0, r0, r6
 8007520:	6060      	str	r0, [r4, #4]
 8007522:	6863      	ldr	r3, [r4, #4]
 8007524:	6123      	str	r3, [r4, #16]
 8007526:	2300      	movs	r3, #0
 8007528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800752c:	e7a8      	b.n	8007480 <_printf_i+0x150>
 800752e:	6923      	ldr	r3, [r4, #16]
 8007530:	4632      	mov	r2, r6
 8007532:	4649      	mov	r1, r9
 8007534:	4640      	mov	r0, r8
 8007536:	47d0      	blx	sl
 8007538:	3001      	adds	r0, #1
 800753a:	d0ab      	beq.n	8007494 <_printf_i+0x164>
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	079b      	lsls	r3, r3, #30
 8007540:	d413      	bmi.n	800756a <_printf_i+0x23a>
 8007542:	68e0      	ldr	r0, [r4, #12]
 8007544:	9b03      	ldr	r3, [sp, #12]
 8007546:	4298      	cmp	r0, r3
 8007548:	bfb8      	it	lt
 800754a:	4618      	movlt	r0, r3
 800754c:	e7a4      	b.n	8007498 <_printf_i+0x168>
 800754e:	2301      	movs	r3, #1
 8007550:	4632      	mov	r2, r6
 8007552:	4649      	mov	r1, r9
 8007554:	4640      	mov	r0, r8
 8007556:	47d0      	blx	sl
 8007558:	3001      	adds	r0, #1
 800755a:	d09b      	beq.n	8007494 <_printf_i+0x164>
 800755c:	3501      	adds	r5, #1
 800755e:	68e3      	ldr	r3, [r4, #12]
 8007560:	9903      	ldr	r1, [sp, #12]
 8007562:	1a5b      	subs	r3, r3, r1
 8007564:	42ab      	cmp	r3, r5
 8007566:	dcf2      	bgt.n	800754e <_printf_i+0x21e>
 8007568:	e7eb      	b.n	8007542 <_printf_i+0x212>
 800756a:	2500      	movs	r5, #0
 800756c:	f104 0619 	add.w	r6, r4, #25
 8007570:	e7f5      	b.n	800755e <_printf_i+0x22e>
 8007572:	bf00      	nop
 8007574:	08007835 	.word	0x08007835
 8007578:	08007846 	.word	0x08007846

0800757c <memmove>:
 800757c:	4288      	cmp	r0, r1
 800757e:	b510      	push	{r4, lr}
 8007580:	eb01 0402 	add.w	r4, r1, r2
 8007584:	d902      	bls.n	800758c <memmove+0x10>
 8007586:	4284      	cmp	r4, r0
 8007588:	4623      	mov	r3, r4
 800758a:	d807      	bhi.n	800759c <memmove+0x20>
 800758c:	1e43      	subs	r3, r0, #1
 800758e:	42a1      	cmp	r1, r4
 8007590:	d008      	beq.n	80075a4 <memmove+0x28>
 8007592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007596:	f803 2f01 	strb.w	r2, [r3, #1]!
 800759a:	e7f8      	b.n	800758e <memmove+0x12>
 800759c:	4402      	add	r2, r0
 800759e:	4601      	mov	r1, r0
 80075a0:	428a      	cmp	r2, r1
 80075a2:	d100      	bne.n	80075a6 <memmove+0x2a>
 80075a4:	bd10      	pop	{r4, pc}
 80075a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075ae:	e7f7      	b.n	80075a0 <memmove+0x24>

080075b0 <_free_r>:
 80075b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075b2:	2900      	cmp	r1, #0
 80075b4:	d048      	beq.n	8007648 <_free_r+0x98>
 80075b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075ba:	9001      	str	r0, [sp, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f1a1 0404 	sub.w	r4, r1, #4
 80075c2:	bfb8      	it	lt
 80075c4:	18e4      	addlt	r4, r4, r3
 80075c6:	f000 f8d3 	bl	8007770 <__malloc_lock>
 80075ca:	4a20      	ldr	r2, [pc, #128]	; (800764c <_free_r+0x9c>)
 80075cc:	9801      	ldr	r0, [sp, #4]
 80075ce:	6813      	ldr	r3, [r2, #0]
 80075d0:	4615      	mov	r5, r2
 80075d2:	b933      	cbnz	r3, 80075e2 <_free_r+0x32>
 80075d4:	6063      	str	r3, [r4, #4]
 80075d6:	6014      	str	r4, [r2, #0]
 80075d8:	b003      	add	sp, #12
 80075da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075de:	f000 b8cd 	b.w	800777c <__malloc_unlock>
 80075e2:	42a3      	cmp	r3, r4
 80075e4:	d90b      	bls.n	80075fe <_free_r+0x4e>
 80075e6:	6821      	ldr	r1, [r4, #0]
 80075e8:	1862      	adds	r2, r4, r1
 80075ea:	4293      	cmp	r3, r2
 80075ec:	bf04      	itt	eq
 80075ee:	681a      	ldreq	r2, [r3, #0]
 80075f0:	685b      	ldreq	r3, [r3, #4]
 80075f2:	6063      	str	r3, [r4, #4]
 80075f4:	bf04      	itt	eq
 80075f6:	1852      	addeq	r2, r2, r1
 80075f8:	6022      	streq	r2, [r4, #0]
 80075fa:	602c      	str	r4, [r5, #0]
 80075fc:	e7ec      	b.n	80075d8 <_free_r+0x28>
 80075fe:	461a      	mov	r2, r3
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	b10b      	cbz	r3, 8007608 <_free_r+0x58>
 8007604:	42a3      	cmp	r3, r4
 8007606:	d9fa      	bls.n	80075fe <_free_r+0x4e>
 8007608:	6811      	ldr	r1, [r2, #0]
 800760a:	1855      	adds	r5, r2, r1
 800760c:	42a5      	cmp	r5, r4
 800760e:	d10b      	bne.n	8007628 <_free_r+0x78>
 8007610:	6824      	ldr	r4, [r4, #0]
 8007612:	4421      	add	r1, r4
 8007614:	1854      	adds	r4, r2, r1
 8007616:	42a3      	cmp	r3, r4
 8007618:	6011      	str	r1, [r2, #0]
 800761a:	d1dd      	bne.n	80075d8 <_free_r+0x28>
 800761c:	681c      	ldr	r4, [r3, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	6053      	str	r3, [r2, #4]
 8007622:	4421      	add	r1, r4
 8007624:	6011      	str	r1, [r2, #0]
 8007626:	e7d7      	b.n	80075d8 <_free_r+0x28>
 8007628:	d902      	bls.n	8007630 <_free_r+0x80>
 800762a:	230c      	movs	r3, #12
 800762c:	6003      	str	r3, [r0, #0]
 800762e:	e7d3      	b.n	80075d8 <_free_r+0x28>
 8007630:	6825      	ldr	r5, [r4, #0]
 8007632:	1961      	adds	r1, r4, r5
 8007634:	428b      	cmp	r3, r1
 8007636:	bf04      	itt	eq
 8007638:	6819      	ldreq	r1, [r3, #0]
 800763a:	685b      	ldreq	r3, [r3, #4]
 800763c:	6063      	str	r3, [r4, #4]
 800763e:	bf04      	itt	eq
 8007640:	1949      	addeq	r1, r1, r5
 8007642:	6021      	streq	r1, [r4, #0]
 8007644:	6054      	str	r4, [r2, #4]
 8007646:	e7c7      	b.n	80075d8 <_free_r+0x28>
 8007648:	b003      	add	sp, #12
 800764a:	bd30      	pop	{r4, r5, pc}
 800764c:	20000264 	.word	0x20000264

08007650 <_malloc_r>:
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007652:	1ccd      	adds	r5, r1, #3
 8007654:	f025 0503 	bic.w	r5, r5, #3
 8007658:	3508      	adds	r5, #8
 800765a:	2d0c      	cmp	r5, #12
 800765c:	bf38      	it	cc
 800765e:	250c      	movcc	r5, #12
 8007660:	2d00      	cmp	r5, #0
 8007662:	4606      	mov	r6, r0
 8007664:	db01      	blt.n	800766a <_malloc_r+0x1a>
 8007666:	42a9      	cmp	r1, r5
 8007668:	d903      	bls.n	8007672 <_malloc_r+0x22>
 800766a:	230c      	movs	r3, #12
 800766c:	6033      	str	r3, [r6, #0]
 800766e:	2000      	movs	r0, #0
 8007670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007672:	f000 f87d 	bl	8007770 <__malloc_lock>
 8007676:	4921      	ldr	r1, [pc, #132]	; (80076fc <_malloc_r+0xac>)
 8007678:	680a      	ldr	r2, [r1, #0]
 800767a:	4614      	mov	r4, r2
 800767c:	b99c      	cbnz	r4, 80076a6 <_malloc_r+0x56>
 800767e:	4f20      	ldr	r7, [pc, #128]	; (8007700 <_malloc_r+0xb0>)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	b923      	cbnz	r3, 800768e <_malloc_r+0x3e>
 8007684:	4621      	mov	r1, r4
 8007686:	4630      	mov	r0, r6
 8007688:	f000 f862 	bl	8007750 <_sbrk_r>
 800768c:	6038      	str	r0, [r7, #0]
 800768e:	4629      	mov	r1, r5
 8007690:	4630      	mov	r0, r6
 8007692:	f000 f85d 	bl	8007750 <_sbrk_r>
 8007696:	1c43      	adds	r3, r0, #1
 8007698:	d123      	bne.n	80076e2 <_malloc_r+0x92>
 800769a:	230c      	movs	r3, #12
 800769c:	6033      	str	r3, [r6, #0]
 800769e:	4630      	mov	r0, r6
 80076a0:	f000 f86c 	bl	800777c <__malloc_unlock>
 80076a4:	e7e3      	b.n	800766e <_malloc_r+0x1e>
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	1b5b      	subs	r3, r3, r5
 80076aa:	d417      	bmi.n	80076dc <_malloc_r+0x8c>
 80076ac:	2b0b      	cmp	r3, #11
 80076ae:	d903      	bls.n	80076b8 <_malloc_r+0x68>
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	441c      	add	r4, r3
 80076b4:	6025      	str	r5, [r4, #0]
 80076b6:	e004      	b.n	80076c2 <_malloc_r+0x72>
 80076b8:	6863      	ldr	r3, [r4, #4]
 80076ba:	42a2      	cmp	r2, r4
 80076bc:	bf0c      	ite	eq
 80076be:	600b      	streq	r3, [r1, #0]
 80076c0:	6053      	strne	r3, [r2, #4]
 80076c2:	4630      	mov	r0, r6
 80076c4:	f000 f85a 	bl	800777c <__malloc_unlock>
 80076c8:	f104 000b 	add.w	r0, r4, #11
 80076cc:	1d23      	adds	r3, r4, #4
 80076ce:	f020 0007 	bic.w	r0, r0, #7
 80076d2:	1ac2      	subs	r2, r0, r3
 80076d4:	d0cc      	beq.n	8007670 <_malloc_r+0x20>
 80076d6:	1a1b      	subs	r3, r3, r0
 80076d8:	50a3      	str	r3, [r4, r2]
 80076da:	e7c9      	b.n	8007670 <_malloc_r+0x20>
 80076dc:	4622      	mov	r2, r4
 80076de:	6864      	ldr	r4, [r4, #4]
 80076e0:	e7cc      	b.n	800767c <_malloc_r+0x2c>
 80076e2:	1cc4      	adds	r4, r0, #3
 80076e4:	f024 0403 	bic.w	r4, r4, #3
 80076e8:	42a0      	cmp	r0, r4
 80076ea:	d0e3      	beq.n	80076b4 <_malloc_r+0x64>
 80076ec:	1a21      	subs	r1, r4, r0
 80076ee:	4630      	mov	r0, r6
 80076f0:	f000 f82e 	bl	8007750 <_sbrk_r>
 80076f4:	3001      	adds	r0, #1
 80076f6:	d1dd      	bne.n	80076b4 <_malloc_r+0x64>
 80076f8:	e7cf      	b.n	800769a <_malloc_r+0x4a>
 80076fa:	bf00      	nop
 80076fc:	20000264 	.word	0x20000264
 8007700:	20000268 	.word	0x20000268

08007704 <_realloc_r>:
 8007704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007706:	4607      	mov	r7, r0
 8007708:	4614      	mov	r4, r2
 800770a:	460e      	mov	r6, r1
 800770c:	b921      	cbnz	r1, 8007718 <_realloc_r+0x14>
 800770e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007712:	4611      	mov	r1, r2
 8007714:	f7ff bf9c 	b.w	8007650 <_malloc_r>
 8007718:	b922      	cbnz	r2, 8007724 <_realloc_r+0x20>
 800771a:	f7ff ff49 	bl	80075b0 <_free_r>
 800771e:	4625      	mov	r5, r4
 8007720:	4628      	mov	r0, r5
 8007722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007724:	f000 f830 	bl	8007788 <_malloc_usable_size_r>
 8007728:	42a0      	cmp	r0, r4
 800772a:	d20f      	bcs.n	800774c <_realloc_r+0x48>
 800772c:	4621      	mov	r1, r4
 800772e:	4638      	mov	r0, r7
 8007730:	f7ff ff8e 	bl	8007650 <_malloc_r>
 8007734:	4605      	mov	r5, r0
 8007736:	2800      	cmp	r0, #0
 8007738:	d0f2      	beq.n	8007720 <_realloc_r+0x1c>
 800773a:	4631      	mov	r1, r6
 800773c:	4622      	mov	r2, r4
 800773e:	f7ff fbe3 	bl	8006f08 <memcpy>
 8007742:	4631      	mov	r1, r6
 8007744:	4638      	mov	r0, r7
 8007746:	f7ff ff33 	bl	80075b0 <_free_r>
 800774a:	e7e9      	b.n	8007720 <_realloc_r+0x1c>
 800774c:	4635      	mov	r5, r6
 800774e:	e7e7      	b.n	8007720 <_realloc_r+0x1c>

08007750 <_sbrk_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4d06      	ldr	r5, [pc, #24]	; (800776c <_sbrk_r+0x1c>)
 8007754:	2300      	movs	r3, #0
 8007756:	4604      	mov	r4, r0
 8007758:	4608      	mov	r0, r1
 800775a:	602b      	str	r3, [r5, #0]
 800775c:	f7f9 f84c 	bl	80007f8 <_sbrk>
 8007760:	1c43      	adds	r3, r0, #1
 8007762:	d102      	bne.n	800776a <_sbrk_r+0x1a>
 8007764:	682b      	ldr	r3, [r5, #0]
 8007766:	b103      	cbz	r3, 800776a <_sbrk_r+0x1a>
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	bd38      	pop	{r3, r4, r5, pc}
 800776c:	20000f74 	.word	0x20000f74

08007770 <__malloc_lock>:
 8007770:	4801      	ldr	r0, [pc, #4]	; (8007778 <__malloc_lock+0x8>)
 8007772:	f000 b811 	b.w	8007798 <__retarget_lock_acquire_recursive>
 8007776:	bf00      	nop
 8007778:	20000f7c 	.word	0x20000f7c

0800777c <__malloc_unlock>:
 800777c:	4801      	ldr	r0, [pc, #4]	; (8007784 <__malloc_unlock+0x8>)
 800777e:	f000 b80c 	b.w	800779a <__retarget_lock_release_recursive>
 8007782:	bf00      	nop
 8007784:	20000f7c 	.word	0x20000f7c

08007788 <_malloc_usable_size_r>:
 8007788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800778c:	1f18      	subs	r0, r3, #4
 800778e:	2b00      	cmp	r3, #0
 8007790:	bfbc      	itt	lt
 8007792:	580b      	ldrlt	r3, [r1, r0]
 8007794:	18c0      	addlt	r0, r0, r3
 8007796:	4770      	bx	lr

08007798 <__retarget_lock_acquire_recursive>:
 8007798:	4770      	bx	lr

0800779a <__retarget_lock_release_recursive>:
 800779a:	4770      	bx	lr

0800779c <_init>:
 800779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779e:	bf00      	nop
 80077a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a2:	bc08      	pop	{r3}
 80077a4:	469e      	mov	lr, r3
 80077a6:	4770      	bx	lr

080077a8 <_fini>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	bf00      	nop
 80077ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ae:	bc08      	pop	{r3}
 80077b0:	469e      	mov	lr, r3
 80077b2:	4770      	bx	lr
