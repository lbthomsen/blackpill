
comptest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d488  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800d628  0800d628  0000e628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d790  0800d790  0000f308  2**0
                  CONTENTS
  4 .ARM          00000008  0800d790  0800d790  0000e790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d798  0800d798  0000f308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d798  0800d798  0000e798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d79c  0800d79c  0000e79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  0800d7a0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db10  20000308  0800daa8  0000f308  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000de18  0800daa8  0000fe18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f308  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022fcd  00000000  00000000  0000f338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005cc5  00000000  00000000  00032305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c50  00000000  00000000  00037fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001569  00000000  00000000  00039c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e253  00000000  00000000  0003b189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023579  00000000  00000000  000593dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d649  00000000  00000000  0007c955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119f9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d94  00000000  00000000  00119fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00121d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000308 	.word	0x20000308
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d610 	.word	0x0800d610

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000030c 	.word	0x2000030c
 80001dc:	0800d610 	.word	0x0800d610

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(startMainTask, NULL, &mainTask_attributes);
 80005b0:	4a08      	ldr	r2, [pc, #32]	@ (80005d4 <MX_FREERTOS_Init+0x28>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	4808      	ldr	r0, [pc, #32]	@ (80005d8 <MX_FREERTOS_Init+0x2c>)
 80005b6:	f009 f904 	bl	80097c2 <osThreadNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <MX_FREERTOS_Init+0x30>)
 80005be:	6013      	str	r3, [r2, #0]

  /* creation of tickTask */
  tickTaskHandle = osThreadNew(startTickTask, NULL, &tickTask_attributes);
 80005c0:	4a07      	ldr	r2, [pc, #28]	@ (80005e0 <MX_FREERTOS_Init+0x34>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <MX_FREERTOS_Init+0x38>)
 80005c6:	f009 f8fc 	bl	80097c2 <osThreadNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a06      	ldr	r2, [pc, #24]	@ (80005e8 <MX_FREERTOS_Init+0x3c>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	0800d6d8 	.word	0x0800d6d8
 80005d8:	080005ed 	.word	0x080005ed
 80005dc:	20000324 	.word	0x20000324
 80005e0:	0800d6fc 	.word	0x0800d6fc
 80005e4:	080005fd 	.word	0x080005fd
 80005e8:	20000328 	.word	0x20000328

080005ec <startMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startMainTask */
void startMainTask(void *argument)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMainTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f009 f976 	bl	80098e6 <osDelay>
 80005fa:	e7fb      	b.n	80005f4 <startMainTask+0x8>

080005fc <startTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTickTask */
void startTickTask(void *argument)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTickTask */
  /* Infinite loop */
  for(;;)
  {
	DBG("Tick %lu", osKernelGetTickCount() / 1000);
 8000604:	f009 f8c8 	bl	8009798 <osKernelGetTickCount>
 8000608:	4603      	mov	r3, r0
 800060a:	4a08      	ldr	r2, [pc, #32]	@ (800062c <startTickTask+0x30>)
 800060c:	fba2 2303 	umull	r2, r3, r2, r3
 8000610:	099b      	lsrs	r3, r3, #6
 8000612:	4619      	mov	r1, r3
 8000614:	4806      	ldr	r0, [pc, #24]	@ (8000630 <startTickTask+0x34>)
 8000616:	f00b ff09 	bl	800c42c <iprintf>
 800061a:	200a      	movs	r0, #10
 800061c:	f00b ff18 	bl	800c450 <putchar>
    osDelay(1000);
 8000620:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000624:	f009 f95f 	bl	80098e6 <osDelay>
  {
 8000628:	bf00      	nop
 800062a:	e7eb      	b.n	8000604 <startTickTask+0x8>
 800062c:	10624dd3 	.word	0x10624dd3
 8000630:	0800d640 	.word	0x0800d640

08000634 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	4b20      	ldr	r3, [pc, #128]	@ (80006d0 <MX_GPIO_Init+0x9c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a1f      	ldr	r2, [pc, #124]	@ (80006d0 <MX_GPIO_Init+0x9c>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b1d      	ldr	r3, [pc, #116]	@ (80006d0 <MX_GPIO_Init+0x9c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b19      	ldr	r3, [pc, #100]	@ (80006d0 <MX_GPIO_Init+0x9c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a18      	ldr	r2, [pc, #96]	@ (80006d0 <MX_GPIO_Init+0x9c>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b16      	ldr	r3, [pc, #88]	@ (80006d0 <MX_GPIO_Init+0x9c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <MX_GPIO_Init+0x9c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a11      	ldr	r2, [pc, #68]	@ (80006d0 <MX_GPIO_Init+0x9c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_GPIO_Init+0x9c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a4:	480b      	ldr	r0, [pc, #44]	@ (80006d4 <MX_GPIO_Init+0xa0>)
 80006a6:	f000 fd99 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80006b0:	2311      	movs	r3, #17
 80006b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	4619      	mov	r1, r3
 80006c2:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <MX_GPIO_Init+0xa0>)
 80006c4:	f000 fc06 	bl	8000ed4 <HAL_GPIO_Init>

}
 80006c8:	bf00      	nop
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020800 	.word	0x40020800

080006d8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
    CDC_Transmit(0, (uint8_t *)ptr, len);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	68b9      	ldr	r1, [r7, #8]
 80006ec:	2000      	movs	r0, #0
 80006ee:	f004 fb2f 	bl	8004d50 <CDC_Transmit>
    return len;
 80006f2:	687b      	ldr	r3, [r7, #4]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f000 fa9f 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f823 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f7ff ff93 	bl	8000634 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 800070e:	f000 f9ed 	bl	8000aec <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000712:	f004 f9b7 	bl	8004a84 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000716:	f008 fff5 	bl	8009704 <osKernelInitialize>
  MX_FREERTOS_Init();
 800071a:	f7ff ff47 	bl	80005ac <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800071e:	f009 f815 	bl	800974c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0, last_blink = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]

  while (1)
  {

	  now = HAL_GetTick();
 800072a:	f000 fac1 	bl	8000cb0 <HAL_GetTick>
 800072e:	6038      	str	r0, [r7, #0]

	  if (now - last_blink >= 500) {
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800073a:	d3f6      	bcc.n	800072a <main+0x2e>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800073c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000740:	4802      	ldr	r0, [pc, #8]	@ (800074c <main+0x50>)
 8000742:	f000 fd64 	bl	800120e <HAL_GPIO_TogglePin>

		  last_blink = now;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	607b      	str	r3, [r7, #4]
	  now = HAL_GetTick();
 800074a:	e7ee      	b.n	800072a <main+0x2e>
 800074c:	40020800 	.word	0x40020800

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	@ 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	@ 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f00b fef7 	bl	800c552 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b27      	ldr	r3, [pc, #156]	@ (8000818 <SystemClock_Config+0xc8>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077c:	4a26      	ldr	r2, [pc, #152]	@ (8000818 <SystemClock_Config+0xc8>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	@ 0x40
 8000784:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <SystemClock_Config+0xc8>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b21      	ldr	r3, [pc, #132]	@ (800081c <SystemClock_Config+0xcc>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a20      	ldr	r2, [pc, #128]	@ (800081c <SystemClock_Config+0xcc>)
 800079a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b1e      	ldr	r3, [pc, #120]	@ (800081c <SystemClock_Config+0xcc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ac:	2301      	movs	r3, #1
 80007ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007c0:	2319      	movs	r3, #25
 80007c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007c4:	23c0      	movs	r3, #192	@ 0xc0
 80007c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 fee5 	bl	80025a4 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e0:	f000 f830 	bl	8000844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e8:	2302      	movs	r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2103      	movs	r1, #3
 8000800:	4618      	mov	r0, r3
 8000802:	f002 f947 	bl	8002a94 <HAL_RCC_ClockConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800080c:	f000 f81a 	bl	8000844 <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	3750      	adds	r7, #80	@ 0x50
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a04      	ldr	r2, [pc, #16]	@ (8000840 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d101      	bne.n	8000836 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000832:	f000 fa29 	bl	8000c88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40014800 	.word	0x40014800

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <Error_Handler+0x8>

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <HAL_MspInit+0x54>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085e:	4a11      	ldr	r2, [pc, #68]	@ (80008a4 <HAL_MspInit+0x54>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000864:	6453      	str	r3, [r2, #68]	@ 0x44
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <HAL_MspInit+0x54>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <HAL_MspInit+0x54>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <HAL_MspInit+0x54>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000880:	6413      	str	r3, [r2, #64]	@ 0x40
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <HAL_MspInit+0x54>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	210f      	movs	r1, #15
 8000892:	f06f 0001 	mvn.w	r0, #1
 8000896:	f000 faf3 	bl	8000e80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	@ 0x30
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	201a      	movs	r0, #26
 80008be:	f000 fadf 	bl	8000e80 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80008c2:	201a      	movs	r0, #26
 80008c4:	f000 faf8 	bl	8000eb8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <HAL_InitTick+0xa0>)
 80008ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000948 <HAL_InitTick+0xa0>)
 80008d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <HAL_InitTick+0xa0>)
 80008da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e4:	f107 0210 	add.w	r2, r7, #16
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fa9c 	bl	8002e2c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008f4:	f002 fa86 	bl	8002e04 <HAL_RCC_GetPCLK2Freq>
 80008f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008fc:	4a13      	ldr	r2, [pc, #76]	@ (800094c <HAL_InitTick+0xa4>)
 80008fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000902:	0c9b      	lsrs	r3, r3, #18
 8000904:	3b01      	subs	r3, #1
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <HAL_InitTick+0xa8>)
 800090a:	4a12      	ldr	r2, [pc, #72]	@ (8000954 <HAL_InitTick+0xac>)
 800090c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <HAL_InitTick+0xa8>)
 8000910:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000914:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000916:	4a0e      	ldr	r2, [pc, #56]	@ (8000950 <HAL_InitTick+0xa8>)
 8000918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800091a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <HAL_InitTick+0xa8>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <HAL_InitTick+0xa8>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000928:	4809      	ldr	r0, [pc, #36]	@ (8000950 <HAL_InitTick+0xa8>)
 800092a:	f002 fab1 	bl	8002e90 <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d104      	bne.n	800093e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000934:	4806      	ldr	r0, [pc, #24]	@ (8000950 <HAL_InitTick+0xa8>)
 8000936:	f002 fb05 	bl	8002f44 <HAL_TIM_Base_Start_IT>
 800093a:	4603      	mov	r3, r0
 800093c:	e000      	b.n	8000940 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3730      	adds	r7, #48	@ 0x30
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	431bde83 	.word	0x431bde83
 8000950:	2000032c 	.word	0x2000032c
 8000954:	40014800 	.word	0x40014800

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <NMI_Handler+0x4>

08000960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <MemManage_Handler+0x4>

08000970 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <UsageFault_Handler+0x4>

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000994:	4802      	ldr	r0, [pc, #8]	@ (80009a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000996:	f002 fb37 	bl	8003008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000032c 	.word	0x2000032c

080009a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009a8:	4802      	ldr	r0, [pc, #8]	@ (80009b4 <OTG_FS_IRQHandler+0x10>)
 80009aa:	f000 fd9a 	bl	80014e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000378 	.word	0x20000378

080009b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	e00a      	b.n	80009e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ca:	f3af 8000 	nop.w
 80009ce:	4601      	mov	r1, r0
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	60ba      	str	r2, [r7, #8]
 80009d6:	b2ca      	uxtb	r2, r1
 80009d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3301      	adds	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbf0      	blt.n	80009ca <_read+0x12>
	}

return len;
 80009e8:	687b      	ldr	r3, [r7, #4]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
	return -1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <_isatty>:

int _isatty(int file)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
	return 1;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a64:	4a14      	ldr	r2, [pc, #80]	@ (8000ab8 <_sbrk+0x5c>)
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <_sbrk+0x60>)
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a70:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a78:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <_sbrk+0x64>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ac4 <_sbrk+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d207      	bcs.n	8000a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a8c:	f00b fe0e 	bl	800c6ac <__errno>
 8000a90:	4603      	mov	r3, r0
 8000a92:	220c      	movs	r2, #12
 8000a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a9a:	e009      	b.n	8000ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ac0 <_sbrk+0x64>)
 8000aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20020000 	.word	0x20020000
 8000abc:	00000400 	.word	0x00000400
 8000ac0:	20000374 	.word	0x20000374
 8000ac4:	2000de18 	.word	0x2000de18

08000ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	@ (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000af0:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000af6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b00:	2202      	movs	r2, #2
 8000b02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b30:	f000 fb87 	bl	8001242 <HAL_PCD_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b3a:	f7ff fe83 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000378 	.word	0x20000378

08000b48 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b68:	d13a      	bne.n	8000be0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <HAL_PCD_MspInit+0xa0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a1d      	ldr	r2, [pc, #116]	@ (8000be8 <HAL_PCD_MspInit+0xa0>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <HAL_PCD_MspInit+0xa0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b86:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b98:	230a      	movs	r3, #10
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4812      	ldr	r0, [pc, #72]	@ (8000bec <HAL_PCD_MspInit+0xa4>)
 8000ba4:	f000 f996 	bl	8000ed4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <HAL_PCD_MspInit+0xa0>)
 8000baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bac:	4a0e      	ldr	r2, [pc, #56]	@ (8000be8 <HAL_PCD_MspInit+0xa0>)
 8000bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bb2:	6353      	str	r3, [r2, #52]	@ 0x34
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <HAL_PCD_MspInit+0xa0>)
 8000bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <HAL_PCD_MspInit+0xa0>)
 8000bbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc4:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <HAL_PCD_MspInit+0xa0>)
 8000bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2105      	movs	r1, #5
 8000bd4:	2043      	movs	r0, #67	@ 0x43
 8000bd6:	f000 f953 	bl	8000e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000bda:	2043      	movs	r0, #67	@ 0x43
 8000bdc:	f000 f96c 	bl	8000eb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	@ 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf4:	480d      	ldr	r0, [pc, #52]	@ (8000c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bf6:	490e      	ldr	r1, [pc, #56]	@ (8000c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8000c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c0c:	4c0b      	ldr	r4, [pc, #44]	@ (8000c3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c1a:	f7ff ff55 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f00b fd4b 	bl	800c6b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c22:	f7ff fd6b 	bl	80006fc <main>
  bx  lr    
 8000c26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8000c34:	0800d7a0 	.word	0x0800d7a0
  ldr r2, =_sbss
 8000c38:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8000c3c:	2000de18 	.word	0x2000de18

08000c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c48:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <HAL_Init+0x40>)
 8000c4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <HAL_Init+0x40>)
 8000c5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	@ (8000c84 <HAL_Init+0x40>)
 8000c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f8fc 	bl	8000e6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	200f      	movs	r0, #15
 8000c74:	f7ff fe18 	bl	80008a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff fdea 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023c00 	.word	0x40023c00

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	@ (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000780 	.word	0x20000780

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	@ (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000780 	.word	0x20000780

08000cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff ffee 	bl	8000cb0 <HAL_GetTick>
 8000cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ce0:	d005      	beq.n	8000cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <HAL_Delay+0x44>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cee:	bf00      	nop
 8000cf0:	f7ff ffde 	bl	8000cb0 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d8f7      	bhi.n	8000cf0 <HAL_Delay+0x28>
  {
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db0b      	blt.n	8000d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 021f 	and.w	r2, r3, #31
 8000d8c:	4907      	ldr	r1, [pc, #28]	@ (8000dac <__NVIC_EnableIRQ+0x38>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	@ (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	@ (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	@ 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	@ 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ff4c 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e92:	f7ff ff61 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000e96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	68b9      	ldr	r1, [r7, #8]
 8000e9c:	6978      	ldr	r0, [r7, #20]
 8000e9e:	f7ff ffb1 	bl	8000e04 <NVIC_EncodePriority>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff80 	bl	8000db0 <__NVIC_SetPriority>
}
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff54 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	@ 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e159      	b.n	80011a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 8148 	bne.w	800119e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d005      	beq.n	8000f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d130      	bne.n	8000f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d017      	beq.n	8000fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d123      	bne.n	8001018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	69b9      	ldr	r1, [r7, #24]
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0203 	and.w	r2, r3, #3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80a2 	beq.w	800119e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b57      	ldr	r3, [pc, #348]	@ (80011bc <HAL_GPIO_Init+0x2e8>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	4a56      	ldr	r2, [pc, #344]	@ (80011bc <HAL_GPIO_Init+0x2e8>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001068:	6453      	str	r3, [r2, #68]	@ 0x44
 800106a:	4b54      	ldr	r3, [pc, #336]	@ (80011bc <HAL_GPIO_Init+0x2e8>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001076:	4a52      	ldr	r2, [pc, #328]	@ (80011c0 <HAL_GPIO_Init+0x2ec>)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a49      	ldr	r2, [pc, #292]	@ (80011c4 <HAL_GPIO_Init+0x2f0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d019      	beq.n	80010d6 <HAL_GPIO_Init+0x202>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a48      	ldr	r2, [pc, #288]	@ (80011c8 <HAL_GPIO_Init+0x2f4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0x1fe>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a47      	ldr	r2, [pc, #284]	@ (80011cc <HAL_GPIO_Init+0x2f8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00d      	beq.n	80010ce <HAL_GPIO_Init+0x1fa>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a46      	ldr	r2, [pc, #280]	@ (80011d0 <HAL_GPIO_Init+0x2fc>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x1f6>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a45      	ldr	r2, [pc, #276]	@ (80011d4 <HAL_GPIO_Init+0x300>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_GPIO_Init+0x1f2>
 80010c2:	2304      	movs	r3, #4
 80010c4:	e008      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010c6:	2307      	movs	r3, #7
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010ca:	2303      	movs	r3, #3
 80010cc:	e004      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010d6:	2300      	movs	r3, #0
 80010d8:	69fa      	ldr	r2, [r7, #28]
 80010da:	f002 0203 	and.w	r2, r2, #3
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	4093      	lsls	r3, r2
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e8:	4935      	ldr	r1, [pc, #212]	@ (80011c0 <HAL_GPIO_Init+0x2ec>)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	3302      	adds	r3, #2
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f6:	4b38      	ldr	r3, [pc, #224]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800111a:	4a2f      	ldr	r2, [pc, #188]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001120:	4b2d      	ldr	r3, [pc, #180]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001144:	4a24      	ldr	r2, [pc, #144]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b23      	ldr	r3, [pc, #140]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116e:	4a1a      	ldr	r2, [pc, #104]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001174:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001198:	4a0f      	ldr	r2, [pc, #60]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3301      	adds	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	2b0f      	cmp	r3, #15
 80011a8:	f67f aea2 	bls.w	8000ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3724      	adds	r7, #36	@ 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40013800 	.word	0x40013800
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40020400 	.word	0x40020400
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40013c00 	.word	0x40013c00

080011dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
 80011e8:	4613      	mov	r3, r2
 80011ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f8:	e003      	b.n	8001202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	041a      	lsls	r2, r3, #16
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	619a      	str	r2, [r3, #24]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800120e:	b480      	push	{r7}
 8001210:	b085      	sub	sp, #20
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	460b      	mov	r3, r1
 8001218:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001220:	887a      	ldrh	r2, [r7, #2]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4013      	ands	r3, r2
 8001226:	041a      	lsls	r2, r3, #16
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43d9      	mvns	r1, r3
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	400b      	ands	r3, r1
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	619a      	str	r2, [r3, #24]
}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001244:	b08f      	sub	sp, #60	@ 0x3c
 8001246:	af0a      	add	r7, sp, #40	@ 0x28
 8001248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d101      	bne.n	8001254 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e10f      	b.n	8001474 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d106      	bne.n	8001274 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fc6a 	bl	8000b48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2203      	movs	r2, #3
 8001278:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f002 f991 	bl	80035ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	687e      	ldr	r6, [r7, #4]
 80012a0:	466d      	mov	r5, sp
 80012a2:	f106 0410 	add.w	r4, r6, #16
 80012a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80012b6:	1d33      	adds	r3, r6, #4
 80012b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ba:	6838      	ldr	r0, [r7, #0]
 80012bc:	f002 f868 	bl	8003390 <USB_CoreInit>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2202      	movs	r2, #2
 80012ca:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e0d0      	b.n	8001474 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 f97f 	bl	80035dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012de:	2300      	movs	r3, #0
 80012e0:	73fb      	strb	r3, [r7, #15]
 80012e2:	e04a      	b.n	800137a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012e4:	7bfa      	ldrb	r2, [r7, #15]
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	333d      	adds	r3, #61	@ 0x3d
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	333c      	adds	r3, #60	@ 0x3c
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	b298      	uxth	r0, r3
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	1a9b      	subs	r3, r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	3342      	adds	r3, #66	@ 0x42
 8001320:	4602      	mov	r2, r0
 8001322:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	1a9b      	subs	r3, r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	333f      	adds	r3, #63	@ 0x3f
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	3344      	adds	r3, #68	@ 0x44
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	1a9b      	subs	r3, r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	3348      	adds	r3, #72	@ 0x48
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	3350      	adds	r3, #80	@ 0x50
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	3301      	adds	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	429a      	cmp	r2, r3
 8001382:	d3af      	bcc.n	80012e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	e044      	b.n	8001414 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	1a9b      	subs	r3, r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	1a9b      	subs	r3, r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	1a9b      	subs	r3, r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	440b      	add	r3, r1
 80013c4:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	1a9b      	subs	r3, r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	1a9b      	subs	r3, r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	1a9b      	subs	r3, r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	3301      	adds	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	d3b5      	bcc.n	800138a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	687e      	ldr	r6, [r7, #4]
 8001426:	466d      	mov	r5, sp
 8001428:	f106 0410 	add.w	r4, r6, #16
 800142c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800142e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001434:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001438:	e885 0003 	stmia.w	r5, {r0, r1}
 800143c:	1d33      	adds	r3, r6, #4
 800143e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001440:	6838      	ldr	r0, [r7, #0]
 8001442:	f002 f917 	bl	8003674 <USB_DevInit>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e00d      	b.n	8001474 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f003 f993 	bl	8004798 <USB_DevDisconnect>

  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800147c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8001490:	2b01      	cmp	r3, #1
 8001492:	d101      	bne.n	8001498 <HAL_PCD_Start+0x1c>
 8001494:	2302      	movs	r3, #2
 8001496:	e020      	b.n	80014da <HAL_PCD_Start+0x5e>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d109      	bne.n	80014bc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d005      	beq.n	80014bc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 f869 	bl	8003598 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f003 f943 	bl	8004756 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014e2:	b590      	push	{r4, r7, lr}
 80014e4:	b08d      	sub	sp, #52	@ 0x34
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 fa01 	bl	8004900 <USB_GetMode>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	f040 839d 	bne.w	8001c40 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f003 f965 	bl	80047da <USB_ReadInterrupts>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 8393 	beq.w	8001c3e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f003 f95c 	bl	80047da <USB_ReadInterrupts>
 8001522:	4603      	mov	r3, r0
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b02      	cmp	r3, #2
 800152a:	d107      	bne.n	800153c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f002 0202 	and.w	r2, r2, #2
 800153a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f003 f94a 	bl	80047da <USB_ReadInterrupts>
 8001546:	4603      	mov	r3, r0
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	2b10      	cmp	r3, #16
 800154e:	d161      	bne.n	8001614 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0210 	bic.w	r2, r2, #16
 800155e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	f003 020f 	and.w	r2, r3, #15
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	4413      	add	r3, r2
 800157c:	3304      	adds	r3, #4
 800157e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001586:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800158a:	d124      	bne.n	80015d6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d035      	beq.n	8001604 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	091b      	lsrs	r3, r3, #4
 80015a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	6a38      	ldr	r0, [r7, #32]
 80015ac:	f002 ff81 	bl	80044b2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	091b      	lsrs	r3, r3, #4
 80015b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015bc:	441a      	add	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	699a      	ldr	r2, [r3, #24]
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ce:	441a      	add	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	619a      	str	r2, [r3, #24]
 80015d4:	e016      	b.n	8001604 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80015dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80015e0:	d110      	bne.n	8001604 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80015e8:	2208      	movs	r2, #8
 80015ea:	4619      	mov	r1, r3
 80015ec:	6a38      	ldr	r0, [r7, #32]
 80015ee:	f002 ff60 	bl	80044b2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	699a      	ldr	r2, [r3, #24]
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015fe:	441a      	add	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699a      	ldr	r2, [r3, #24]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0210 	orr.w	r2, r2, #16
 8001612:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f003 f8de 	bl	80047da <USB_ReadInterrupts>
 800161e:	4603      	mov	r3, r0
 8001620:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001624:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001628:	d16e      	bne.n	8001708 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f003 f8e4 	bl	8004800 <USB_ReadDevAllOutEpInterrupt>
 8001638:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800163a:	e062      	b.n	8001702 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800163c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d057      	beq.n	80016f6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f003 f909 	bl	8004868 <USB_ReadDevOutEPInterrupt>
 8001656:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00c      	beq.n	800167c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	015a      	lsls	r2, r3, #5
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	4413      	add	r3, r2
 800166a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800166e:	461a      	mov	r2, r3
 8001670:	2301      	movs	r3, #1
 8001672:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001674:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 fdde 	bl	8002238 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00c      	beq.n	80016a0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001688:	015a      	lsls	r2, r3, #5
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	4413      	add	r3, r2
 800168e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001692:	461a      	mov	r2, r3
 8001694:	2308      	movs	r3, #8
 8001696:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001698:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fed8 	bl	8002450 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d008      	beq.n	80016bc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80016aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ac:	015a      	lsls	r2, r3, #5
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	4413      	add	r3, r2
 80016b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016b6:	461a      	mov	r2, r3
 80016b8:	2310      	movs	r3, #16
 80016ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	f003 0320 	and.w	r3, r3, #32
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d008      	beq.n	80016d8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	015a      	lsls	r2, r3, #5
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	4413      	add	r3, r2
 80016ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016d2:	461a      	mov	r2, r3
 80016d4:	2320      	movs	r3, #32
 80016d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d009      	beq.n	80016f6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016ee:	461a      	mov	r2, r3
 80016f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	3301      	adds	r3, #1
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80016fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016fe:	085b      	lsrs	r3, r3, #1
 8001700:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001704:	2b00      	cmp	r3, #0
 8001706:	d199      	bne.n	800163c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f003 f864 	bl	80047da <USB_ReadInterrupts>
 8001712:	4603      	mov	r3, r0
 8001714:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001718:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800171c:	f040 80c0 	bne.w	80018a0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f003 f885 	bl	8004834 <USB_ReadDevAllInEpInterrupt>
 800172a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001730:	e0b2      	b.n	8001898 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80a7 	beq.w	800188c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f003 f8ab 	bl	80048a4 <USB_ReadDevInEPInterrupt>
 800174e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d057      	beq.n	800180a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	2201      	movs	r2, #1
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800176e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	43db      	mvns	r3, r3
 8001774:	69f9      	ldr	r1, [r7, #28]
 8001776:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800177a:	4013      	ands	r3, r2
 800177c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	015a      	lsls	r2, r3, #5
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	4413      	add	r3, r2
 8001786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800178a:	461a      	mov	r2, r3
 800178c:	2301      	movs	r3, #1
 800178e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d132      	bne.n	80017fe <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800179c:	4613      	mov	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	1a9b      	subs	r3, r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	3348      	adds	r3, #72	@ 0x48
 80017a8:	6819      	ldr	r1, [r3, #0]
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ae:	4613      	mov	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4403      	add	r3, r0
 80017b8:	3344      	adds	r3, #68	@ 0x44
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4419      	add	r1, r3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017c2:	4613      	mov	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4403      	add	r3, r0
 80017cc:	3348      	adds	r3, #72	@ 0x48
 80017ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80017d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d113      	bne.n	80017fe <HAL_PCD_IRQHandler+0x31c>
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017da:	4613      	mov	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	1a9b      	subs	r3, r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	3350      	adds	r3, #80	@ 0x50
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d108      	bne.n	80017fe <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80017f6:	461a      	mov	r2, r3
 80017f8:	2101      	movs	r1, #1
 80017fa:	f003 f8b3 	bl	8004964 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4619      	mov	r1, r3
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f007 fc8d 	bl	8009124 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001816:	015a      	lsls	r2, r3, #5
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	4413      	add	r3, r2
 800181c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001820:	461a      	mov	r2, r3
 8001822:	2308      	movs	r3, #8
 8001824:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	4413      	add	r3, r2
 8001838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800183c:	461a      	mov	r2, r3
 800183e:	2310      	movs	r3, #16
 8001840:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	015a      	lsls	r2, r3, #5
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	4413      	add	r3, r2
 8001854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001858:	461a      	mov	r2, r3
 800185a:	2340      	movs	r3, #64	@ 0x40
 800185c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	015a      	lsls	r2, r3, #5
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	4413      	add	r3, r2
 8001870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001874:	461a      	mov	r2, r3
 8001876:	2302      	movs	r3, #2
 8001878:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001884:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 fc48 	bl	800211c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188e:	3301      	adds	r3, #1
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001894:	085b      	lsrs	r3, r3, #1
 8001896:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800189a:	2b00      	cmp	r3, #0
 800189c:	f47f af49 	bne.w	8001732 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f002 ff98 	bl	80047da <USB_ReadInterrupts>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80018b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018b4:	d122      	bne.n	80018fc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d108      	bne.n	80018e6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018dc:	2100      	movs	r1, #0
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fe54 	bl	800258c <HAL_PCDEx_LPM_Callback>
 80018e4:	e002      	b.n	80018ec <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f007 fc92 	bl	8009210 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80018fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f002 ff6a 	bl	80047da <USB_ReadInterrupts>
 8001906:	4603      	mov	r3, r0
 8001908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800190c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001910:	d112      	bne.n	8001938 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b01      	cmp	r3, #1
 8001920:	d102      	bne.n	8001928 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f007 fc4e 	bl	80091c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001936:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f002 ff4c 	bl	80047da <USB_ReadInterrupts>
 8001942:	4603      	mov	r3, r0
 8001944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800194c:	f040 80c7 	bne.w	8001ade <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800195e:	f023 0301 	bic.w	r3, r3, #1
 8001962:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2110      	movs	r1, #16
 800196a:	4618      	mov	r0, r3
 800196c:	f001 ffe6 	bl	800393c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001970:	2300      	movs	r3, #0
 8001972:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001974:	e056      	b.n	8001a24 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001978:	015a      	lsls	r2, r3, #5
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	4413      	add	r3, r2
 800197e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001982:	461a      	mov	r2, r3
 8001984:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001988:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800198a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800198c:	015a      	lsls	r2, r3, #5
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	4413      	add	r3, r2
 8001992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800199a:	0151      	lsls	r1, r2, #5
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	440a      	add	r2, r1
 80019a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80019a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80019a8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80019aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ba:	0151      	lsls	r1, r2, #5
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	440a      	add	r2, r1
 80019c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80019c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80019c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019d6:	461a      	mov	r2, r3
 80019d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80019dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019e0:	015a      	lsls	r2, r3, #5
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ee:	0151      	lsls	r1, r2, #5
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	440a      	add	r2, r1
 80019f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80019f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80019fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a00:	015a      	lsls	r2, r3, #5
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a0e:	0151      	lsls	r1, r2, #5
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	440a      	add	r2, r1
 8001a14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001a18:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001a1c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a20:	3301      	adds	r3, #1
 8001a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d3a3      	bcc.n	8001976 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a3c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001a40:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d016      	beq.n	8001a78 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a5a:	f043 030b 	orr.w	r3, r3, #11
 8001a5e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a70:	f043 030b 	orr.w	r3, r3, #11
 8001a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a76:	e015      	b.n	8001aa4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a8a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001a8e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a9e:	f043 030b 	orr.w	r3, r3, #11
 8001aa2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ab2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001ab6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f002 ff4b 	bl	8004964 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f002 fe79 	bl	80047da <USB_ReadInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001af2:	d124      	bne.n	8001b3e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f002 ff0f 	bl	800491c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f001 ff77 	bl	80039f6 <USB_GetDevSpeed>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681c      	ldr	r4, [r3, #0]
 8001b14:	f001 f96a 	bl	8002dec <HAL_RCC_GetHCLKFreq>
 8001b18:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	4620      	mov	r0, r4
 8001b24:	f001 fc96 	bl	8003454 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f007 fb23 	bl	8009174 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fe49 	bl	80047da <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d10a      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f007 fb00 	bl	8009158 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f002 0208 	and.w	r2, r2, #8
 8001b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 fe34 	bl	80047da <USB_ReadInterrupts>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b7c:	d10f      	bne.n	8001b9e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	4619      	mov	r1, r3
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f007 fb61 	bl	8009250 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695a      	ldr	r2, [r3, #20]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f002 fe19 	bl	80047da <USB_ReadInterrupts>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f007 fb34 	bl	800922c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695a      	ldr	r2, [r3, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001bd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f002 fdfe 	bl	80047da <USB_ReadInterrupts>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be8:	d10a      	bne.n	8001c00 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f007 fb42 	bl	8009274 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 fde8 	bl	80047da <USB_ReadInterrupts>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d115      	bne.n	8001c40 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f007 fb32 	bl	8009290 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6859      	ldr	r1, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	e000      	b.n	8001c40 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001c3e:	bf00      	nop
    }
  }
}
 8001c40:	3734      	adds	r7, #52	@ 0x34
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd90      	pop	{r4, r7, pc}

08001c46 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_PCD_SetAddress+0x1a>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e013      	b.n	8001c88 <HAL_PCD_SetAddress+0x42>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	78fa      	ldrb	r2, [r7, #3]
 8001c6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	78fa      	ldrb	r2, [r7, #3]
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f002 fd46 	bl	800470a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	4608      	mov	r0, r1
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	70fb      	strb	r3, [r7, #3]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	803b      	strh	r3, [r7, #0]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	da0f      	bge.n	8001cd6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	f003 020f 	and.w	r2, r3, #15
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	3338      	adds	r3, #56	@ 0x38
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	3304      	adds	r3, #4
 8001ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	705a      	strb	r2, [r3, #1]
 8001cd4:	e00f      	b.n	8001cf6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	f003 020f 	and.w	r2, r3, #15
 8001cdc:	4613      	mov	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	3304      	adds	r3, #4
 8001cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d02:	883a      	ldrh	r2, [r7, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	78ba      	ldrb	r2, [r7, #2]
 8001d0c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	785b      	ldrb	r3, [r3, #1]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d004      	beq.n	8001d20 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d20:	78bb      	ldrb	r3, [r7, #2]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d102      	bne.n	8001d2c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <HAL_PCD_EP_Open+0xaa>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e00e      	b.n	8001d58 <HAL_PCD_EP_Open+0xc8>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68f9      	ldr	r1, [r7, #12]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 fe79 	bl	8003a40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return ret;
 8001d56:	7afb      	ldrb	r3, [r7, #11]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	da0f      	bge.n	8001d94 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	f003 020f 	and.w	r2, r3, #15
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	3338      	adds	r3, #56	@ 0x38
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	3304      	adds	r3, #4
 8001d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	705a      	strb	r2, [r3, #1]
 8001d92:	e00f      	b.n	8001db4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	f003 020f 	and.w	r2, r3, #15
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	3304      	adds	r3, #4
 8001dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_PCD_EP_Close+0x6e>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e00e      	b.n	8001dec <HAL_PCD_EP_Close+0x8c>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68f9      	ldr	r1, [r7, #12]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f001 feb7 	bl	8003b50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	460b      	mov	r3, r1
 8001e02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e04:	7afb      	ldrb	r3, [r7, #11]
 8001e06:	f003 020f 	and.w	r2, r3, #15
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4413      	add	r3, r2
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2200      	movs	r2, #0
 8001e34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e36:	7afb      	ldrb	r3, [r7, #11]
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d102      	bne.n	8001e50 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e50:	7afb      	ldrb	r3, [r7, #11]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	6979      	ldr	r1, [r7, #20]
 8001e68:	f002 f992 	bl	8004190 <USB_EP0StartXfer>
 8001e6c:	e008      	b.n	8001e80 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	6979      	ldr	r1, [r7, #20]
 8001e7c:	f001 ff44 	bl	8003d08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	460b      	mov	r3, r1
 8001e94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	f003 020f 	and.w	r2, r3, #15
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8001eac:	681b      	ldr	r3, [r3, #0]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eca:	7afb      	ldrb	r3, [r7, #11]
 8001ecc:	f003 020f 	and.w	r2, r3, #15
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	3338      	adds	r3, #56	@ 0x38
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4413      	add	r3, r2
 8001ede:	3304      	adds	r3, #4
 8001ee0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001efa:	7afb      	ldrb	r3, [r7, #11]
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d102      	bne.n	8001f14 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f14:	7afb      	ldrb	r3, [r7, #11]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d109      	bne.n	8001f32 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	6979      	ldr	r1, [r7, #20]
 8001f2c:	f002 f930 	bl	8004190 <USB_EP0StartXfer>
 8001f30:	e008      	b.n	8001f44 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	6979      	ldr	r1, [r7, #20]
 8001f40:	f001 fee2 	bl	8003d08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	f003 020f 	and.w	r2, r3, #15
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d901      	bls.n	8001f6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e050      	b.n	800200e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	da0f      	bge.n	8001f94 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	f003 020f 	and.w	r2, r3, #15
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	3338      	adds	r3, #56	@ 0x38
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	3304      	adds	r3, #4
 8001f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	705a      	strb	r2, [r3, #1]
 8001f92:	e00d      	b.n	8001fb0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_PCD_EP_SetStall+0x82>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e01e      	b.n	800200e <HAL_PCD_EP_SetStall+0xc0>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68f9      	ldr	r1, [r7, #12]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f002 fabf 	bl	8004562 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10a      	bne.n	8002004 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	b2d9      	uxtb	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8001ffe:	461a      	mov	r2, r3
 8002000:	f002 fcb0 	bl	8004964 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	460b      	mov	r3, r1
 8002020:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	f003 020f 	and.w	r2, r3, #15
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	429a      	cmp	r2, r3
 800202e:	d901      	bls.n	8002034 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e042      	b.n	80020ba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002038:	2b00      	cmp	r3, #0
 800203a:	da0f      	bge.n	800205c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 020f 	and.w	r2, r3, #15
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	1a9b      	subs	r3, r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	3338      	adds	r3, #56	@ 0x38
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	3304      	adds	r3, #4
 8002052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2201      	movs	r2, #1
 8002058:	705a      	strb	r2, [r3, #1]
 800205a:	e00f      	b.n	800207c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	f003 020f 	and.w	r2, r3, #15
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	1a9b      	subs	r3, r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	3304      	adds	r3, #4
 8002074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	b2da      	uxtb	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_PCD_EP_ClrStall+0x86>
 8002098:	2302      	movs	r3, #2
 800209a:	e00e      	b.n	80020ba <HAL_PCD_EP_ClrStall+0xa4>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68f9      	ldr	r1, [r7, #12]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f002 fac7 	bl	800463e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_PCD_EP_Flush+0x1a>
 80020d8:	2302      	movs	r3, #2
 80020da:	e01b      	b.n	8002114 <HAL_PCD_EP_Flush+0x52>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80020e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	da09      	bge.n	8002100 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	4619      	mov	r1, r3
 80020f8:	4610      	mov	r0, r2
 80020fa:	f001 fc1f 	bl	800393c <USB_FlushTxFifo>
 80020fe:	e004      	b.n	800210a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f001 fc3d 	bl	8003984 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	@ 0x28
 8002120:	af02      	add	r7, sp, #8
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	3338      	adds	r3, #56	@ 0x38
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	4413      	add	r3, r2
 8002140:	3304      	adds	r3, #4
 8002142:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	699a      	ldr	r2, [r3, #24]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	429a      	cmp	r2, r3
 800214e:	d901      	bls.n	8002154 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e06c      	b.n	800222e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	429a      	cmp	r2, r3
 8002168:	d902      	bls.n	8002170 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	3303      	adds	r3, #3
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002178:	e02b      	b.n	80021d2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	429a      	cmp	r2, r3
 800218e:	d902      	bls.n	8002196 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3303      	adds	r3, #3
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	68d9      	ldr	r1, [r3, #12]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	4603      	mov	r3, r0
 80021b4:	6978      	ldr	r0, [r7, #20]
 80021b6:	f002 f93e 	bl	8004436 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	441a      	add	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	441a      	add	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d809      	bhi.n	80021fc <PCD_WriteEmptyTxFifo+0xe0>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	699a      	ldr	r2, [r3, #24]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d203      	bcs.n	80021fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1be      	bne.n	800217a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	429a      	cmp	r2, r3
 8002206:	d811      	bhi.n	800222c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	2201      	movs	r2, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800221c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	43db      	mvns	r3, r3
 8002222:	6939      	ldr	r1, [r7, #16]
 8002224:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002228:	4013      	ands	r3, r2
 800222a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	333c      	adds	r3, #60	@ 0x3c
 8002250:	3304      	adds	r3, #4
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4413      	add	r3, r2
 800225e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b01      	cmp	r3, #1
 800226c:	f040 80a0 	bne.w	80023b0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d015      	beq.n	80022a6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a72      	ldr	r2, [pc, #456]	@ (8002448 <PCD_EP_OutXfrComplete_int+0x210>)
 800227e:	4293      	cmp	r3, r2
 8002280:	f240 80dd 	bls.w	800243e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80d7 	beq.w	800243e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4413      	add	r3, r2
 8002298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800229c:	461a      	mov	r2, r3
 800229e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022a2:	6093      	str	r3, [r2, #8]
 80022a4:	e0cb      	b.n	800243e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d009      	beq.n	80022c4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	015a      	lsls	r2, r3, #5
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022bc:	461a      	mov	r2, r3
 80022be:	2320      	movs	r3, #32
 80022c0:	6093      	str	r3, [r2, #8]
 80022c2:	e0bc      	b.n	800243e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 80b7 	bne.w	800243e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4a5d      	ldr	r2, [pc, #372]	@ (8002448 <PCD_EP_OutXfrComplete_int+0x210>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d90f      	bls.n	80022f8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022ee:	461a      	mov	r2, r3
 80022f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022f4:	6093      	str	r3, [r2, #8]
 80022f6:	e0a2      	b.n	800243e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800230a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	0159      	lsls	r1, r3, #5
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	440b      	add	r3, r1
 8002314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800231e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4403      	add	r3, r0
 800232e:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8002332:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002346:	6819      	ldr	r1, [r3, #0]
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4403      	add	r3, r0
 8002356:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4419      	add	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4403      	add	r3, r0
 800236c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002370:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d114      	bne.n	80023a2 <PCD_EP_OutXfrComplete_int+0x16a>
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d108      	bne.n	80023a2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800239a:	461a      	mov	r2, r3
 800239c:	2101      	movs	r1, #1
 800239e:	f002 fae1 	bl	8004964 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	4619      	mov	r1, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f006 fea0 	bl	80090ee <HAL_PCD_DataOutStageCallback>
 80023ae:	e046      	b.n	800243e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4a26      	ldr	r2, [pc, #152]	@ (800244c <PCD_EP_OutXfrComplete_int+0x214>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d124      	bne.n	8002402 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ce:	461a      	mov	r2, r3
 80023d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023d4:	6093      	str	r3, [r2, #8]
 80023d6:	e032      	b.n	800243e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d008      	beq.n	80023f4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ee:	461a      	mov	r2, r3
 80023f0:	2320      	movs	r3, #32
 80023f2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	4619      	mov	r1, r3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f006 fe77 	bl	80090ee <HAL_PCD_DataOutStageCallback>
 8002400:	e01d      	b.n	800243e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d114      	bne.n	8002432 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d108      	bne.n	8002432 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800242a:	461a      	mov	r2, r3
 800242c:	2100      	movs	r1, #0
 800242e:	f002 fa99 	bl	8004964 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	4619      	mov	r1, r3
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f006 fe58 	bl	80090ee <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	4f54300a 	.word	0x4f54300a
 800244c:	4f54310a 	.word	0x4f54310a

08002450 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	333c      	adds	r3, #60	@ 0x3c
 8002468:	3304      	adds	r3, #4
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4a15      	ldr	r2, [pc, #84]	@ (80024d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d90e      	bls.n	80024a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800249c:	461a      	mov	r2, r3
 800249e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f006 fe10 	bl	80090ca <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4a0a      	ldr	r2, [pc, #40]	@ (80024d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d90c      	bls.n	80024cc <PCD_EP_OutSetupPacket_int+0x7c>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d108      	bne.n	80024cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80024c4:	461a      	mov	r2, r3
 80024c6:	2101      	movs	r1, #1
 80024c8:	f002 fa4c 	bl	8004964 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	4f54300a 	.word	0x4f54300a

080024dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
 80024e8:	4613      	mov	r3, r2
 80024ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d107      	bne.n	800250a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024fa:	883b      	ldrh	r3, [r7, #0]
 80024fc:	0419      	lsls	r1, r3, #16
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	430a      	orrs	r2, r1
 8002506:	629a      	str	r2, [r3, #40]	@ 0x28
 8002508:	e028      	b.n	800255c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002510:	0c1b      	lsrs	r3, r3, #16
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	4413      	add	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	e00d      	b.n	800253a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	3340      	adds	r3, #64	@ 0x40
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4413      	add	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	3301      	adds	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	3b01      	subs	r3, #1
 8002540:	429a      	cmp	r2, r3
 8002542:	d3ec      	bcc.n	800251e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002544:	883b      	ldrh	r3, [r7, #0]
 8002546:	0418      	lsls	r0, r3, #16
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	3b01      	subs	r3, #1
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	4302      	orrs	r2, r0
 8002554:	3340      	adds	r3, #64	@ 0x40
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e267      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d075      	beq.n	80026ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025c2:	4b88      	ldr	r3, [pc, #544]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d00c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ce:	4b85      	ldr	r3, [pc, #532]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d112      	bne.n	8002600 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025da:	4b82      	ldr	r3, [pc, #520]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025e6:	d10b      	bne.n	8002600 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	4b7e      	ldr	r3, [pc, #504]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d05b      	beq.n	80026ac <HAL_RCC_OscConfig+0x108>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d157      	bne.n	80026ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e242      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002608:	d106      	bne.n	8002618 <HAL_RCC_OscConfig+0x74>
 800260a:	4b76      	ldr	r3, [pc, #472]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a75      	ldr	r2, [pc, #468]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e01d      	b.n	8002654 <HAL_RCC_OscConfig+0xb0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x98>
 8002622:	4b70      	ldr	r3, [pc, #448]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a6f      	ldr	r2, [pc, #444]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b6d      	ldr	r3, [pc, #436]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6c      	ldr	r2, [pc, #432]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0xb0>
 800263c:	4b69      	ldr	r3, [pc, #420]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a68      	ldr	r2, [pc, #416]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b66      	ldr	r3, [pc, #408]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a65      	ldr	r2, [pc, #404]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe fb28 	bl	8000cb0 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002664:	f7fe fb24 	bl	8000cb0 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	@ 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e207      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b5b      	ldr	r3, [pc, #364]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0xc0>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fb14 	bl	8000cb0 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe fb10 	bl	8000cb0 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	@ 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e1f3      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	4b51      	ldr	r3, [pc, #324]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0xe8>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d063      	beq.n	8002782 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ba:	4b4a      	ldr	r3, [pc, #296]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c6:	4b47      	ldr	r3, [pc, #284]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d11c      	bne.n	800270c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d2:	4b44      	ldr	r3, [pc, #272]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d116      	bne.n	800270c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	4b41      	ldr	r3, [pc, #260]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_RCC_OscConfig+0x152>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e1c7      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	4b3b      	ldr	r3, [pc, #236]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4937      	ldr	r1, [pc, #220]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270a:	e03a      	b.n	8002782 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002714:	4b34      	ldr	r3, [pc, #208]	@ (80027e8 <HAL_RCC_OscConfig+0x244>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7fe fac9 	bl	8000cb0 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002722:	f7fe fac5 	bl	8000cb0 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e1a8      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	4b2b      	ldr	r3, [pc, #172]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4b28      	ldr	r3, [pc, #160]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4925      	ldr	r1, [pc, #148]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
 8002754:	e015      	b.n	8002782 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	4b24      	ldr	r3, [pc, #144]	@ (80027e8 <HAL_RCC_OscConfig+0x244>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe faa8 	bl	8000cb0 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002764:	f7fe faa4 	bl	8000cb0 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e187      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d036      	beq.n	80027fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d016      	beq.n	80027c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002796:	4b15      	ldr	r3, [pc, #84]	@ (80027ec <HAL_RCC_OscConfig+0x248>)
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7fe fa88 	bl	8000cb0 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a4:	f7fe fa84 	bl	8000cb0 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e167      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b6:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80027b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x200>
 80027c2:	e01b      	b.n	80027fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c4:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <HAL_RCC_OscConfig+0x248>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ca:	f7fe fa71 	bl	8000cb0 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	e00e      	b.n	80027f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d2:	f7fe fa6d 	bl	8000cb0 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d907      	bls.n	80027f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e150      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
 80027e4:	40023800 	.word	0x40023800
 80027e8:	42470000 	.word	0x42470000
 80027ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f0:	4b88      	ldr	r3, [pc, #544]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80027f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ea      	bne.n	80027d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8097 	beq.w	8002938 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280e:	4b81      	ldr	r3, [pc, #516]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	4b7d      	ldr	r3, [pc, #500]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	4a7c      	ldr	r2, [pc, #496]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002828:	6413      	str	r3, [r2, #64]	@ 0x40
 800282a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002836:	2301      	movs	r3, #1
 8002838:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283a:	4b77      	ldr	r3, [pc, #476]	@ (8002a18 <HAL_RCC_OscConfig+0x474>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d118      	bne.n	8002878 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002846:	4b74      	ldr	r3, [pc, #464]	@ (8002a18 <HAL_RCC_OscConfig+0x474>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a73      	ldr	r2, [pc, #460]	@ (8002a18 <HAL_RCC_OscConfig+0x474>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002852:	f7fe fa2d 	bl	8000cb0 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285a:	f7fe fa29 	bl	8000cb0 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e10c      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	4b6a      	ldr	r3, [pc, #424]	@ (8002a18 <HAL_RCC_OscConfig+0x474>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x2ea>
 8002880:	4b64      	ldr	r3, [pc, #400]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002884:	4a63      	ldr	r2, [pc, #396]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6713      	str	r3, [r2, #112]	@ 0x70
 800288c:	e01c      	b.n	80028c8 <HAL_RCC_OscConfig+0x324>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b05      	cmp	r3, #5
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x30c>
 8002896:	4b5f      	ldr	r3, [pc, #380]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	4a5e      	ldr	r2, [pc, #376]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ae:	e00b      	b.n	80028c8 <HAL_RCC_OscConfig+0x324>
 80028b0:	4b58      	ldr	r3, [pc, #352]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b4:	4a57      	ldr	r2, [pc, #348]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80028bc:	4b55      	ldr	r3, [pc, #340]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c0:	4a54      	ldr	r2, [pc, #336]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028c2:	f023 0304 	bic.w	r3, r3, #4
 80028c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d015      	beq.n	80028fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d0:	f7fe f9ee 	bl	8000cb0 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d6:	e00a      	b.n	80028ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d8:	f7fe f9ea 	bl	8000cb0 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e0cb      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ee:	4b49      	ldr	r3, [pc, #292]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ee      	beq.n	80028d8 <HAL_RCC_OscConfig+0x334>
 80028fa:	e014      	b.n	8002926 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7fe f9d8 	bl	8000cb0 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002902:	e00a      	b.n	800291a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002904:	f7fe f9d4 	bl	8000cb0 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e0b5      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800291a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ee      	bne.n	8002904 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002926:	7dfb      	ldrb	r3, [r7, #23]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292c:	4b39      	ldr	r3, [pc, #228]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	4a38      	ldr	r2, [pc, #224]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002932:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002936:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80a1 	beq.w	8002a84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002942:	4b34      	ldr	r3, [pc, #208]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b08      	cmp	r3, #8
 800294c:	d05c      	beq.n	8002a08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d141      	bne.n	80029da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002956:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <HAL_RCC_OscConfig+0x478>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe f9a8 	bl	8000cb0 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002964:	f7fe f9a4 	bl	8000cb0 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e087      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002976:	4b27      	ldr	r3, [pc, #156]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69da      	ldr	r2, [r3, #28]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	019b      	lsls	r3, r3, #6
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002998:	085b      	lsrs	r3, r3, #1
 800299a:	3b01      	subs	r3, #1
 800299c:	041b      	lsls	r3, r3, #16
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a4:	061b      	lsls	r3, r3, #24
 80029a6:	491b      	ldr	r1, [pc, #108]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ac:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <HAL_RCC_OscConfig+0x478>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7fe f97d 	bl	8000cb0 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ba:	f7fe f979 	bl	8000cb0 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e05c      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029cc:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x416>
 80029d8:	e054      	b.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029da:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <HAL_RCC_OscConfig+0x478>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe f966 	bl	8000cb0 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe f962 	bl	8000cb0 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e045      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x444>
 8002a06:	e03d      	b.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d107      	bne.n	8002a20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e038      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40007000 	.word	0x40007000
 8002a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a20:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <HAL_RCC_OscConfig+0x4ec>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d028      	beq.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d121      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d11a      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a50:	4013      	ands	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d111      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d107      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800

08002a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0cc      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b68      	ldr	r3, [pc, #416]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d90c      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b65      	ldr	r3, [pc, #404]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b63      	ldr	r3, [pc, #396]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0b8      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae8:	4b59      	ldr	r3, [pc, #356]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a58      	ldr	r2, [pc, #352]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002af2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b00:	4b53      	ldr	r3, [pc, #332]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4a52      	ldr	r2, [pc, #328]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0c:	4b50      	ldr	r3, [pc, #320]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	494d      	ldr	r1, [pc, #308]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d044      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d107      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	4b47      	ldr	r3, [pc, #284]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d119      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e07f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d003      	beq.n	8002b52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b52:	4b3f      	ldr	r3, [pc, #252]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e06f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b62:	4b3b      	ldr	r3, [pc, #236]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e067      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b37      	ldr	r3, [pc, #220]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4934      	ldr	r1, [pc, #208]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b84:	f7fe f894 	bl	8000cb0 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7fe f890 	bl	8000cb0 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e04f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b25      	ldr	r3, [pc, #148]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d20c      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b22      	ldr	r3, [pc, #136]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e032      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be8:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4916      	ldr	r1, [pc, #88]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c06:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	490e      	ldr	r1, [pc, #56]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c1a:	f000 f821 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	490a      	ldr	r1, [pc, #40]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2c:	5ccb      	ldrb	r3, [r1, r3]
 8002c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c32:	4a09      	ldr	r2, [pc, #36]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c36:	4b09      	ldr	r3, [pc, #36]	@ (8002c5c <HAL_RCC_ClockConfig+0x1c8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fd fe34 	bl	80008a8 <HAL_InitTick>

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023c00 	.word	0x40023c00
 8002c50:	40023800 	.word	0x40023800
 8002c54:	0800d720 	.word	0x0800d720
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	20000004 	.word	0x20000004

08002c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c64:	b090      	sub	sp, #64	@ 0x40
 8002c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c70:	2300      	movs	r3, #0
 8002c72:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c78:	4b59      	ldr	r3, [pc, #356]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d00d      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	f200 80a1 	bhi.w	8002dcc <HAL_RCC_GetSysClockFreq+0x16c>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x34>
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d003      	beq.n	8002c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c92:	e09b      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c94:	4b53      	ldr	r3, [pc, #332]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c96:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002c98:	e09b      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c9a:	4b53      	ldr	r3, [pc, #332]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c9e:	e098      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca0:	4b4f      	ldr	r3, [pc, #316]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ca8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002caa:	4b4d      	ldr	r3, [pc, #308]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d028      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	099b      	lsrs	r3, r3, #6
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	623b      	str	r3, [r7, #32]
 8002cc0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4b47      	ldr	r3, [pc, #284]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ccc:	fb03 f201 	mul.w	r2, r3, r1
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	fb00 f303 	mul.w	r3, r0, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a43      	ldr	r2, [pc, #268]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cda:	fba0 1202 	umull	r1, r2, r0, r2
 8002cde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ce0:	460a      	mov	r2, r1
 8002ce2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ce6:	4413      	add	r3, r2
 8002ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cec:	2200      	movs	r2, #0
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	61fa      	str	r2, [r7, #28]
 8002cf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002cfa:	f7fd fac1 	bl	8000280 <__aeabi_uldivmod>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4613      	mov	r3, r2
 8002d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d06:	e053      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d08:	4b35      	ldr	r3, [pc, #212]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	2200      	movs	r2, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	617a      	str	r2, [r7, #20]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d1a:	f04f 0b00 	mov.w	fp, #0
 8002d1e:	4652      	mov	r2, sl
 8002d20:	465b      	mov	r3, fp
 8002d22:	f04f 0000 	mov.w	r0, #0
 8002d26:	f04f 0100 	mov.w	r1, #0
 8002d2a:	0159      	lsls	r1, r3, #5
 8002d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d30:	0150      	lsls	r0, r2, #5
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	ebb2 080a 	subs.w	r8, r2, sl
 8002d3a:	eb63 090b 	sbc.w	r9, r3, fp
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d52:	ebb2 0408 	subs.w	r4, r2, r8
 8002d56:	eb63 0509 	sbc.w	r5, r3, r9
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	00eb      	lsls	r3, r5, #3
 8002d64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d68:	00e2      	lsls	r2, r4, #3
 8002d6a:	4614      	mov	r4, r2
 8002d6c:	461d      	mov	r5, r3
 8002d6e:	eb14 030a 	adds.w	r3, r4, sl
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	eb45 030b 	adc.w	r3, r5, fp
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d86:	4629      	mov	r1, r5
 8002d88:	028b      	lsls	r3, r1, #10
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d90:	4621      	mov	r1, r4
 8002d92:	028a      	lsls	r2, r1, #10
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	60fa      	str	r2, [r7, #12]
 8002da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da4:	f7fd fa6c 	bl	8000280 <__aeabi_uldivmod>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4613      	mov	r3, r2
 8002dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002db0:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002dc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dca:	e002      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3740      	adds	r7, #64	@ 0x40
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	00f42400 	.word	0x00f42400
 8002de8:	017d7840 	.word	0x017d7840

08002dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df0:	4b03      	ldr	r3, [pc, #12]	@ (8002e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002df2:	681b      	ldr	r3, [r3, #0]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000000 	.word	0x20000000

08002e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e08:	f7ff fff0 	bl	8002dec <HAL_RCC_GetHCLKFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	0b5b      	lsrs	r3, r3, #13
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	4903      	ldr	r1, [pc, #12]	@ (8002e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40023800 	.word	0x40023800
 8002e28:	0800d730 	.word	0x0800d730

08002e2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	220f      	movs	r2, #15
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e3c:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <HAL_RCC_GetClockConfig+0x5c>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0203 	and.w	r2, r3, #3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e48:	4b0f      	ldr	r3, [pc, #60]	@ (8002e88 <HAL_RCC_GetClockConfig+0x5c>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <HAL_RCC_GetClockConfig+0x5c>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e60:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <HAL_RCC_GetClockConfig+0x5c>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	08db      	lsrs	r3, r3, #3
 8002e66:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e6e:	4b07      	ldr	r3, [pc, #28]	@ (8002e8c <HAL_RCC_GetClockConfig+0x60>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0207 	and.w	r2, r3, #7
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	601a      	str	r2, [r3, #0]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40023c00 	.word	0x40023c00

08002e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e041      	b.n	8002f26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f839 	bl	8002f2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	f000 f9ca 	bl	8003268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d001      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e044      	b.n	8002fe6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d018      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f86:	d013      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00e      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a19      	ldr	r2, [pc, #100]	@ (8002ffc <HAL_TIM_Base_Start_IT+0xb8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d009      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a17      	ldr	r2, [pc, #92]	@ (8003000 <HAL_TIM_Base_Start_IT+0xbc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d004      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a16      	ldr	r2, [pc, #88]	@ (8003004 <HAL_TIM_Base_Start_IT+0xc0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d111      	bne.n	8002fd4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b06      	cmp	r3, #6
 8002fc0:	d010      	beq.n	8002fe4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f042 0201 	orr.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd2:	e007      	b.n	8002fe4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40010000 	.word	0x40010000
 8002ff8:	40000400 	.word	0x40000400
 8002ffc:	40000800 	.word	0x40000800
 8003000:	40000c00 	.word	0x40000c00
 8003004:	40014000 	.word	0x40014000

08003008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b02      	cmp	r3, #2
 800301c:	d122      	bne.n	8003064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b02      	cmp	r3, #2
 800302a:	d11b      	bne.n	8003064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0202 	mvn.w	r2, #2
 8003034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f8ee 	bl	800322c <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f8e0 	bl	8003218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f8f1 	bl	8003240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b04      	cmp	r3, #4
 8003070:	d122      	bne.n	80030b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b04      	cmp	r3, #4
 800307e:	d11b      	bne.n	80030b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0204 	mvn.w	r2, #4
 8003088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f8c4 	bl	800322c <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f8b6 	bl	8003218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f8c7 	bl	8003240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d122      	bne.n	800310c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d11b      	bne.n	800310c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0208 	mvn.w	r2, #8
 80030dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2204      	movs	r2, #4
 80030e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f89a 	bl	800322c <HAL_TIM_IC_CaptureCallback>
 80030f8:	e005      	b.n	8003106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f88c 	bl	8003218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f89d 	bl	8003240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b10      	cmp	r3, #16
 8003118:	d122      	bne.n	8003160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b10      	cmp	r3, #16
 8003126:	d11b      	bne.n	8003160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0210 	mvn.w	r2, #16
 8003130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2208      	movs	r2, #8
 8003136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f870 	bl	800322c <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f862 	bl	8003218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f873 	bl	8003240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d10e      	bne.n	800318c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d107      	bne.n	800318c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0201 	mvn.w	r2, #1
 8003184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fd fb4a 	bl	8000820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003196:	2b80      	cmp	r3, #128	@ 0x80
 8003198:	d10e      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a4:	2b80      	cmp	r3, #128	@ 0x80
 80031a6:	d107      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f8e2 	bl	800337c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c2:	2b40      	cmp	r3, #64	@ 0x40
 80031c4:	d10e      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d0:	2b40      	cmp	r3, #64	@ 0x40
 80031d2:	d107      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f838 	bl	8003254 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d10e      	bne.n	8003210 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d107      	bne.n	8003210 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0220 	mvn.w	r2, #32
 8003208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f8ac 	bl	8003368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a34      	ldr	r2, [pc, #208]	@ (800334c <TIM_Base_SetConfig+0xe4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00f      	beq.n	80032a0 <TIM_Base_SetConfig+0x38>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003286:	d00b      	beq.n	80032a0 <TIM_Base_SetConfig+0x38>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a31      	ldr	r2, [pc, #196]	@ (8003350 <TIM_Base_SetConfig+0xe8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d007      	beq.n	80032a0 <TIM_Base_SetConfig+0x38>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a30      	ldr	r2, [pc, #192]	@ (8003354 <TIM_Base_SetConfig+0xec>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d003      	beq.n	80032a0 <TIM_Base_SetConfig+0x38>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a2f      	ldr	r2, [pc, #188]	@ (8003358 <TIM_Base_SetConfig+0xf0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d108      	bne.n	80032b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a25      	ldr	r2, [pc, #148]	@ (800334c <TIM_Base_SetConfig+0xe4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01b      	beq.n	80032f2 <TIM_Base_SetConfig+0x8a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c0:	d017      	beq.n	80032f2 <TIM_Base_SetConfig+0x8a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a22      	ldr	r2, [pc, #136]	@ (8003350 <TIM_Base_SetConfig+0xe8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <TIM_Base_SetConfig+0x8a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a21      	ldr	r2, [pc, #132]	@ (8003354 <TIM_Base_SetConfig+0xec>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00f      	beq.n	80032f2 <TIM_Base_SetConfig+0x8a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a20      	ldr	r2, [pc, #128]	@ (8003358 <TIM_Base_SetConfig+0xf0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00b      	beq.n	80032f2 <TIM_Base_SetConfig+0x8a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1f      	ldr	r2, [pc, #124]	@ (800335c <TIM_Base_SetConfig+0xf4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <TIM_Base_SetConfig+0x8a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003360 <TIM_Base_SetConfig+0xf8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d003      	beq.n	80032f2 <TIM_Base_SetConfig+0x8a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003364 <TIM_Base_SetConfig+0xfc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d108      	bne.n	8003304 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a08      	ldr	r2, [pc, #32]	@ (800334c <TIM_Base_SetConfig+0xe4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d103      	bne.n	8003338 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	615a      	str	r2, [r3, #20]
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40010000 	.word	0x40010000
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800
 8003358:	40000c00 	.word	0x40000c00
 800335c:	40014000 	.word	0x40014000
 8003360:	40014400 	.word	0x40014400
 8003364:	40014800 	.word	0x40014800

08003368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003390:	b084      	sub	sp, #16
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	f107 001c 	add.w	r0, r7, #28
 800339e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d122      	bne.n	80033ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80033bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80033d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d105      	bne.n	80033e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f001 fb1c 	bl	8004a20 <USB_CoreReset>
 80033e8:	4603      	mov	r3, r0
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	e01a      	b.n	8003424 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f001 fb10 	bl	8004a20 <USB_CoreReset>
 8003400:	4603      	mov	r3, r0
 8003402:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	639a      	str	r2, [r3, #56]	@ 0x38
 8003416:	e005      	b.n	8003424 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003426:	2b01      	cmp	r3, #1
 8003428:	d10b      	bne.n	8003442 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f043 0206 	orr.w	r2, r3, #6
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f043 0220 	orr.w	r2, r3, #32
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003442:	7bfb      	ldrb	r3, [r7, #15]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800344e:	b004      	add	sp, #16
 8003450:	4770      	bx	lr
	...

08003454 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	4613      	mov	r3, r2
 8003460:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d165      	bne.n	8003534 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4a41      	ldr	r2, [pc, #260]	@ (8003570 <USB_SetTurnaroundTime+0x11c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d906      	bls.n	800347e <USB_SetTurnaroundTime+0x2a>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4a40      	ldr	r2, [pc, #256]	@ (8003574 <USB_SetTurnaroundTime+0x120>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d202      	bcs.n	800347e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003478:	230f      	movs	r3, #15
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	e062      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4a3c      	ldr	r2, [pc, #240]	@ (8003574 <USB_SetTurnaroundTime+0x120>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d306      	bcc.n	8003494 <USB_SetTurnaroundTime+0x40>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4a3b      	ldr	r2, [pc, #236]	@ (8003578 <USB_SetTurnaroundTime+0x124>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d202      	bcs.n	8003494 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800348e:	230e      	movs	r3, #14
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e057      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4a38      	ldr	r2, [pc, #224]	@ (8003578 <USB_SetTurnaroundTime+0x124>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d306      	bcc.n	80034aa <USB_SetTurnaroundTime+0x56>
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4a37      	ldr	r2, [pc, #220]	@ (800357c <USB_SetTurnaroundTime+0x128>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d202      	bcs.n	80034aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80034a4:	230d      	movs	r3, #13
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	e04c      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4a33      	ldr	r2, [pc, #204]	@ (800357c <USB_SetTurnaroundTime+0x128>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d306      	bcc.n	80034c0 <USB_SetTurnaroundTime+0x6c>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4a32      	ldr	r2, [pc, #200]	@ (8003580 <USB_SetTurnaroundTime+0x12c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d802      	bhi.n	80034c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80034ba:	230c      	movs	r3, #12
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	e041      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003580 <USB_SetTurnaroundTime+0x12c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d906      	bls.n	80034d6 <USB_SetTurnaroundTime+0x82>
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003584 <USB_SetTurnaroundTime+0x130>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d802      	bhi.n	80034d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80034d0:	230b      	movs	r3, #11
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	e036      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003584 <USB_SetTurnaroundTime+0x130>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d906      	bls.n	80034ec <USB_SetTurnaroundTime+0x98>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4a29      	ldr	r2, [pc, #164]	@ (8003588 <USB_SetTurnaroundTime+0x134>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d802      	bhi.n	80034ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80034e6:	230a      	movs	r3, #10
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	e02b      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4a26      	ldr	r2, [pc, #152]	@ (8003588 <USB_SetTurnaroundTime+0x134>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d906      	bls.n	8003502 <USB_SetTurnaroundTime+0xae>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4a25      	ldr	r2, [pc, #148]	@ (800358c <USB_SetTurnaroundTime+0x138>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d202      	bcs.n	8003502 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80034fc:	2309      	movs	r3, #9
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	e020      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	4a21      	ldr	r2, [pc, #132]	@ (800358c <USB_SetTurnaroundTime+0x138>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d306      	bcc.n	8003518 <USB_SetTurnaroundTime+0xc4>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4a20      	ldr	r2, [pc, #128]	@ (8003590 <USB_SetTurnaroundTime+0x13c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d802      	bhi.n	8003518 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003512:	2308      	movs	r3, #8
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	e015      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4a1d      	ldr	r2, [pc, #116]	@ (8003590 <USB_SetTurnaroundTime+0x13c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d906      	bls.n	800352e <USB_SetTurnaroundTime+0xda>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4a1c      	ldr	r2, [pc, #112]	@ (8003594 <USB_SetTurnaroundTime+0x140>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d202      	bcs.n	800352e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003528:	2307      	movs	r3, #7
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	e00a      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800352e:	2306      	movs	r3, #6
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	e007      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800353a:	2309      	movs	r3, #9
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	e001      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003540:	2309      	movs	r3, #9
 8003542:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	029b      	lsls	r3, r3, #10
 8003558:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800355c:	431a      	orrs	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	00d8acbf 	.word	0x00d8acbf
 8003574:	00e4e1c0 	.word	0x00e4e1c0
 8003578:	00f42400 	.word	0x00f42400
 800357c:	01067380 	.word	0x01067380
 8003580:	011a499f 	.word	0x011a499f
 8003584:	01312cff 	.word	0x01312cff
 8003588:	014ca43f 	.word	0x014ca43f
 800358c:	016e3600 	.word	0x016e3600
 8003590:	01a6ab1f 	.word	0x01a6ab1f
 8003594:	01e84800 	.word	0x01e84800

08003598 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f043 0201 	orr.w	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 0201 	bic.w	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d115      	bne.n	800362a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800360a:	2001      	movs	r0, #1
 800360c:	f7fd fb5c 	bl	8000cc8 <HAL_Delay>
      ms++;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3301      	adds	r3, #1
 8003614:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f001 f972 	bl	8004900 <USB_GetMode>
 800361c:	4603      	mov	r3, r0
 800361e:	2b01      	cmp	r3, #1
 8003620:	d01e      	beq.n	8003660 <USB_SetCurrentMode+0x84>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b31      	cmp	r3, #49	@ 0x31
 8003626:	d9f0      	bls.n	800360a <USB_SetCurrentMode+0x2e>
 8003628:	e01a      	b.n	8003660 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d115      	bne.n	800365c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800363c:	2001      	movs	r0, #1
 800363e:	f7fd fb43 	bl	8000cc8 <HAL_Delay>
      ms++;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3301      	adds	r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f001 f959 	bl	8004900 <USB_GetMode>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <USB_SetCurrentMode+0x84>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b31      	cmp	r3, #49	@ 0x31
 8003658:	d9f0      	bls.n	800363c <USB_SetCurrentMode+0x60>
 800365a:	e001      	b.n	8003660 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e005      	b.n	800366c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b32      	cmp	r3, #50	@ 0x32
 8003664:	d101      	bne.n	800366a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003674:	b084      	sub	sp, #16
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	e009      	b.n	80036a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	3340      	adds	r3, #64	@ 0x40
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	2200      	movs	r2, #0
 80036a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	3301      	adds	r3, #1
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	2b0e      	cmp	r3, #14
 80036ac:	d9f2      	bls.n	8003694 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d11c      	bne.n	80036ee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036c2:	f043 0302 	orr.w	r3, r3, #2
 80036c6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d8:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e4:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80036ec:	e00b      	b.n	8003706 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fe:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800370c:	461a      	mov	r2, r3
 800370e:	2300      	movs	r3, #0
 8003710:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003718:	4619      	mov	r1, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003720:	461a      	mov	r2, r3
 8003722:	680b      	ldr	r3, [r1, #0]
 8003724:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003728:	2b01      	cmp	r3, #1
 800372a:	d10c      	bne.n	8003746 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800372c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372e:	2b00      	cmp	r3, #0
 8003730:	d104      	bne.n	800373c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003732:	2100      	movs	r1, #0
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f945 	bl	80039c4 <USB_SetDevSpeed>
 800373a:	e008      	b.n	800374e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800373c:	2101      	movs	r1, #1
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f940 	bl	80039c4 <USB_SetDevSpeed>
 8003744:	e003      	b.n	800374e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003746:	2103      	movs	r1, #3
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f93b 	bl	80039c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800374e:	2110      	movs	r1, #16
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f8f3 	bl	800393c <USB_FlushTxFifo>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f90f 	bl	8003984 <USB_FlushRxFifo>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003776:	461a      	mov	r2, r3
 8003778:	2300      	movs	r3, #0
 800377a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003782:	461a      	mov	r2, r3
 8003784:	2300      	movs	r3, #0
 8003786:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800378e:	461a      	mov	r2, r3
 8003790:	2300      	movs	r3, #0
 8003792:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003794:	2300      	movs	r3, #0
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	e043      	b.n	8003822 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037b0:	d118      	bne.n	80037e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037c4:	461a      	mov	r2, r3
 80037c6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	e013      	b.n	80037f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037da:	461a      	mov	r2, r3
 80037dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e008      	b.n	80037f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037f0:	461a      	mov	r2, r3
 80037f2:	2300      	movs	r3, #0
 80037f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003802:	461a      	mov	r2, r3
 8003804:	2300      	movs	r3, #0
 8003806:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003814:	461a      	mov	r2, r3
 8003816:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800381a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	3301      	adds	r3, #1
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	429a      	cmp	r2, r3
 8003828:	d3b7      	bcc.n	800379a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	e043      	b.n	80038b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003842:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003846:	d118      	bne.n	800387a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800385a:	461a      	mov	r2, r3
 800385c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e013      	b.n	800388c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003870:	461a      	mov	r2, r3
 8003872:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	e008      	b.n	800388c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003886:	461a      	mov	r2, r3
 8003888:	2300      	movs	r3, #0
 800388a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003898:	461a      	mov	r2, r3
 800389a:	2300      	movs	r3, #0
 800389c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038aa:	461a      	mov	r2, r3
 80038ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	3301      	adds	r3, #1
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d3b7      	bcc.n	8003830 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80038e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d105      	bne.n	80038f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	f043 0210 	orr.w	r2, r3, #16
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003938 <USB_DevInit+0x2c4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f043 0208 	orr.w	r2, r3, #8
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003914:	2b01      	cmp	r3, #1
 8003916:	d107      	bne.n	8003928 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003920:	f043 0304 	orr.w	r3, r3, #4
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003928:	7dfb      	ldrb	r3, [r7, #23]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003934:	b004      	add	sp, #16
 8003936:	4770      	bx	lr
 8003938:	803c3800 	.word	0x803c3800

0800393c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	019b      	lsls	r3, r3, #6
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3301      	adds	r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	4a08      	ldr	r2, [pc, #32]	@ (8003980 <USB_FlushTxFifo+0x44>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e006      	b.n	8003974 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b20      	cmp	r3, #32
 8003970:	d0f1      	beq.n	8003956 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	00030d40 	.word	0x00030d40

08003984 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2210      	movs	r2, #16
 8003994:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3301      	adds	r3, #1
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	4a08      	ldr	r2, [pc, #32]	@ (80039c0 <USB_FlushRxFifo+0x3c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e006      	b.n	80039b4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d0f1      	beq.n	8003996 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	00030d40 	.word	0x00030d40

080039c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	68f9      	ldr	r1, [r7, #12]
 80039e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039e4:	4313      	orrs	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b087      	sub	sp, #28
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0306 	and.w	r3, r3, #6
 8003a0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d102      	bne.n	8003a1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003a16:	2300      	movs	r3, #0
 8003a18:	75fb      	strb	r3, [r7, #23]
 8003a1a:	e00a      	b.n	8003a32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d002      	beq.n	8003a28 <USB_GetDevSpeed+0x32>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b06      	cmp	r3, #6
 8003a26:	d102      	bne.n	8003a2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	75fb      	strb	r3, [r7, #23]
 8003a2c:	e001      	b.n	8003a32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003a2e:	230f      	movs	r3, #15
 8003a30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	785b      	ldrb	r3, [r3, #1]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d13a      	bne.n	8003ad2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	68f9      	ldr	r1, [r7, #12]
 8003a76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d155      	bne.n	8003b40 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	78db      	ldrb	r3, [r3, #3]
 8003aae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ab0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	059b      	lsls	r3, r3, #22
 8003ab6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	0151      	lsls	r1, r2, #5
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	440a      	add	r2, r1
 8003ac2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	e036      	b.n	8003b40 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	041b      	lsls	r3, r3, #16
 8003aea:	68f9      	ldr	r1, [r7, #12]
 8003aec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d11a      	bne.n	8003b40 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	78db      	ldrb	r3, [r3, #3]
 8003b24:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b26:	430b      	orrs	r3, r1
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	0151      	lsls	r1, r2, #5
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	440a      	add	r2, r1
 8003b32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b3e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	785b      	ldrb	r3, [r3, #1]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d161      	bne.n	8003c30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b82:	d11f      	bne.n	8003bc4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	0151      	lsls	r1, r2, #5
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	440a      	add	r2, r1
 8003b9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ba2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	0151      	lsls	r1, r2, #5
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	440a      	add	r2, r1
 8003bba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bbe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003bc2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	68f9      	ldr	r1, [r7, #12]
 8003be0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003be4:	4013      	ands	r3, r2
 8003be6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	68f9      	ldr	r1, [r7, #12]
 8003c04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	0159      	lsls	r1, r3, #5
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	440b      	add	r3, r1
 8003c22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c26:	4619      	mov	r1, r3
 8003c28:	4b35      	ldr	r3, [pc, #212]	@ (8003d00 <USB_DeactivateEndpoint+0x1b0>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]
 8003c2e:	e060      	b.n	8003cf2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c46:	d11f      	bne.n	8003c88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	0151      	lsls	r1, r2, #5
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	440a      	add	r2, r1
 8003c5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	0151      	lsls	r1, r2, #5
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	440a      	add	r2, r1
 8003c7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	2101      	movs	r1, #1
 8003c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9e:	041b      	lsls	r3, r3, #16
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	68f9      	ldr	r1, [r7, #12]
 8003ca4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ca8:	4013      	ands	r3, r2
 8003caa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc2:	041b      	lsls	r3, r3, #16
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	68f9      	ldr	r1, [r7, #12]
 8003cc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	0159      	lsls	r1, r3, #5
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	440b      	add	r3, r1
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cea:	4619      	mov	r1, r3
 8003cec:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <USB_DeactivateEndpoint+0x1b4>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	ec337800 	.word	0xec337800
 8003d04:	eff37800 	.word	0xeff37800

08003d08 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08a      	sub	sp, #40	@ 0x28
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	4613      	mov	r3, r2
 8003d14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	785b      	ldrb	r3, [r3, #1]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	f040 815c 	bne.w	8003fe2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d132      	bne.n	8003d98 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	0151      	lsls	r1, r2, #5
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	440a      	add	r2, r1
 8003d48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d4c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003d50:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003d54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	0151      	lsls	r1, r2, #5
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	440a      	add	r2, r1
 8003d6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003d74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	0151      	lsls	r1, r2, #5
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	440a      	add	r2, r1
 8003d8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d90:	0cdb      	lsrs	r3, r3, #19
 8003d92:	04db      	lsls	r3, r3, #19
 8003d94:	6113      	str	r3, [r2, #16]
 8003d96:	e074      	b.n	8003e82 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	0151      	lsls	r1, r2, #5
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	440a      	add	r2, r1
 8003dae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003db2:	0cdb      	lsrs	r3, r3, #19
 8003db4:	04db      	lsls	r3, r3, #19
 8003db6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	0151      	lsls	r1, r2, #5
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	440a      	add	r2, r1
 8003dce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dd2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003dd6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003dda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003de8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	6959      	ldr	r1, [r3, #20]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	440b      	add	r3, r1
 8003df4:	1e59      	subs	r1, r3, #1
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dfe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e00:	4b9d      	ldr	r3, [pc, #628]	@ (8004078 <USB_EPStartXfer+0x370>)
 8003e02:	400b      	ands	r3, r1
 8003e04:	69b9      	ldr	r1, [r7, #24]
 8003e06:	0148      	lsls	r0, r1, #5
 8003e08:	69f9      	ldr	r1, [r7, #28]
 8003e0a:	4401      	add	r1, r0
 8003e0c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003e10:	4313      	orrs	r3, r2
 8003e12:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2a:	69b9      	ldr	r1, [r7, #24]
 8003e2c:	0148      	lsls	r0, r1, #5
 8003e2e:	69f9      	ldr	r1, [r7, #28]
 8003e30:	4401      	add	r1, r0
 8003e32:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003e36:	4313      	orrs	r3, r2
 8003e38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	78db      	ldrb	r3, [r3, #3]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d11f      	bne.n	8003e82 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	0151      	lsls	r1, r2, #5
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	440a      	add	r2, r1
 8003e58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e5c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003e60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	0151      	lsls	r1, r2, #5
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	440a      	add	r2, r1
 8003e78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e7c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003e80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d14b      	bne.n	8003f20 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d009      	beq.n	8003ea4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	78db      	ldrb	r3, [r3, #3]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d128      	bne.n	8003efe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d110      	bne.n	8003ede <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	0151      	lsls	r1, r2, #5
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	440a      	add	r2, r1
 8003ed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ed6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	e00f      	b.n	8003efe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	0151      	lsls	r1, r2, #5
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	440a      	add	r2, r1
 8003ef4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003efc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	0151      	lsls	r1, r2, #5
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	440a      	add	r2, r1
 8003f14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f18:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e12f      	b.n	8004180 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	0151      	lsls	r1, r2, #5
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	440a      	add	r2, r1
 8003f36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f3a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003f3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	78db      	ldrb	r3, [r3, #3]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d015      	beq.n	8003f74 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 8117 	beq.w	8004180 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	2101      	movs	r1, #1
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	69f9      	ldr	r1, [r7, #28]
 8003f6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	634b      	str	r3, [r1, #52]	@ 0x34
 8003f72:	e105      	b.n	8004180 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d110      	bne.n	8003fa6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	0151      	lsls	r1, r2, #5
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	440a      	add	r2, r1
 8003f9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f9e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	e00f      	b.n	8003fc6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	68d9      	ldr	r1, [r3, #12]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	781a      	ldrb	r2, [r3, #0]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	b298      	uxth	r0, r3
 8003fd4:	79fb      	ldrb	r3, [r7, #7]
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	4603      	mov	r3, r0
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fa2b 	bl	8004436 <USB_WritePacket>
 8003fe0:	e0ce      	b.n	8004180 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	0151      	lsls	r1, r2, #5
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	440a      	add	r2, r1
 8003ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ffc:	0cdb      	lsrs	r3, r3, #19
 8003ffe:	04db      	lsls	r3, r3, #19
 8004000:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	0151      	lsls	r1, r2, #5
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	440a      	add	r2, r1
 8004018:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800401c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004020:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004024:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d126      	bne.n	800407c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004044:	69b9      	ldr	r1, [r7, #24]
 8004046:	0148      	lsls	r0, r1, #5
 8004048:	69f9      	ldr	r1, [r7, #28]
 800404a:	4401      	add	r1, r0
 800404c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004050:	4313      	orrs	r3, r2
 8004052:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	0151      	lsls	r1, r2, #5
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	440a      	add	r2, r1
 800406a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800406e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004072:	6113      	str	r3, [r2, #16]
 8004074:	e036      	b.n	80040e4 <USB_EPStartXfer+0x3dc>
 8004076:	bf00      	nop
 8004078:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4413      	add	r3, r2
 8004086:	1e5a      	subs	r2, r3, #1
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	8afb      	ldrh	r3, [r7, #22]
 80040a2:	04d9      	lsls	r1, r3, #19
 80040a4:	4b39      	ldr	r3, [pc, #228]	@ (800418c <USB_EPStartXfer+0x484>)
 80040a6:	400b      	ands	r3, r1
 80040a8:	69b9      	ldr	r1, [r7, #24]
 80040aa:	0148      	lsls	r0, r1, #5
 80040ac:	69f9      	ldr	r1, [r7, #28]
 80040ae:	4401      	add	r1, r0
 80040b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80040b4:	4313      	orrs	r3, r2
 80040b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	8af9      	ldrh	r1, [r7, #22]
 80040cc:	fb01 f303 	mul.w	r3, r1, r3
 80040d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d4:	69b9      	ldr	r1, [r7, #24]
 80040d6:	0148      	lsls	r0, r1, #5
 80040d8:	69f9      	ldr	r1, [r7, #28]
 80040da:	4401      	add	r1, r0
 80040dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80040e0:	4313      	orrs	r3, r2
 80040e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d10d      	bne.n	8004106 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d009      	beq.n	8004106 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	68d9      	ldr	r1, [r3, #12]
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004102:	460a      	mov	r2, r1
 8004104:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	78db      	ldrb	r3, [r3, #3]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d128      	bne.n	8004160 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411a:	2b00      	cmp	r3, #0
 800411c:	d110      	bne.n	8004140 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	0151      	lsls	r1, r2, #5
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	440a      	add	r2, r1
 8004134:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004138:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e00f      	b.n	8004160 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	0151      	lsls	r1, r2, #5
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	440a      	add	r2, r1
 8004156:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800415a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800415e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	0151      	lsls	r1, r2, #5
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	440a      	add	r2, r1
 8004176:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800417a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800417e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	1ff80000 	.word	0x1ff80000

08004190 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	4613      	mov	r3, r2
 800419c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	785b      	ldrb	r3, [r3, #1]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	f040 80cd 	bne.w	800434c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d132      	bne.n	8004220 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041d4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80041d8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80041dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	440a      	add	r2, r1
 8004214:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004218:	0cdb      	lsrs	r3, r3, #19
 800421a:	04db      	lsls	r3, r3, #19
 800421c:	6113      	str	r3, [r2, #16]
 800421e:	e04e      	b.n	80042be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	0151      	lsls	r1, r2, #5
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	440a      	add	r2, r1
 8004236:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800423a:	0cdb      	lsrs	r3, r3, #19
 800423c:	04db      	lsls	r3, r3, #19
 800423e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	0151      	lsls	r1, r2, #5
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	440a      	add	r2, r1
 8004256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800425a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800425e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004262:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	429a      	cmp	r2, r3
 800426e:	d903      	bls.n	8004278 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	440a      	add	r2, r1
 800428e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004292:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004296:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ae:	6939      	ldr	r1, [r7, #16]
 80042b0:	0148      	lsls	r0, r1, #5
 80042b2:	6979      	ldr	r1, [r7, #20]
 80042b4:	4401      	add	r1, r0
 80042b6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80042ba:	4313      	orrs	r3, r2
 80042bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d11e      	bne.n	8004302 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d009      	beq.n	80042e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042d8:	461a      	mov	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	0151      	lsls	r1, r2, #5
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	440a      	add	r2, r1
 80042f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	e092      	b.n	8004428 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	0151      	lsls	r1, r2, #5
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	440a      	add	r2, r1
 8004318:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800431c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004320:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d07e      	beq.n	8004428 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	2101      	movs	r1, #1
 800433c:	fa01 f303 	lsl.w	r3, r1, r3
 8004340:	6979      	ldr	r1, [r7, #20]
 8004342:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004346:	4313      	orrs	r3, r2
 8004348:	634b      	str	r3, [r1, #52]	@ 0x34
 800434a:	e06d      	b.n	8004428 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	0151      	lsls	r1, r2, #5
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	440a      	add	r2, r1
 8004362:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004366:	0cdb      	lsrs	r3, r3, #19
 8004368:	04db      	lsls	r3, r3, #19
 800436a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	0151      	lsls	r1, r2, #5
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	440a      	add	r2, r1
 8004382:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004386:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800438a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800438e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	0151      	lsls	r1, r2, #5
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	440a      	add	r2, r1
 80043b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d6:	6939      	ldr	r1, [r7, #16]
 80043d8:	0148      	lsls	r0, r1, #5
 80043da:	6979      	ldr	r1, [r7, #20]
 80043dc:	4401      	add	r1, r0
 80043de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043e2:	4313      	orrs	r3, r2
 80043e4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d10d      	bne.n	8004408 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d009      	beq.n	8004408 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	68d9      	ldr	r1, [r3, #12]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004404:	460a      	mov	r2, r1
 8004406:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	0151      	lsls	r1, r2, #5
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	440a      	add	r2, r1
 800441e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004422:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004426:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004436:	b480      	push	{r7}
 8004438:	b089      	sub	sp, #36	@ 0x24
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	4611      	mov	r1, r2
 8004442:	461a      	mov	r2, r3
 8004444:	460b      	mov	r3, r1
 8004446:	71fb      	strb	r3, [r7, #7]
 8004448:	4613      	mov	r3, r2
 800444a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004454:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004458:	2b00      	cmp	r3, #0
 800445a:	d123      	bne.n	80044a4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800445c:	88bb      	ldrh	r3, [r7, #4]
 800445e:	3303      	adds	r3, #3
 8004460:	089b      	lsrs	r3, r3, #2
 8004462:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	e018      	b.n	800449c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	031a      	lsls	r2, r3, #12
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	4413      	add	r3, r2
 8004472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004476:	461a      	mov	r2, r3
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	3301      	adds	r3, #1
 8004482:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	3301      	adds	r3, #1
 8004488:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3301      	adds	r3, #1
 800448e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	3301      	adds	r3, #1
 8004494:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	3301      	adds	r3, #1
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d3e2      	bcc.n	800446a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3724      	adds	r7, #36	@ 0x24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b08b      	sub	sp, #44	@ 0x2c
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	4613      	mov	r3, r2
 80044be:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80044d8:	2300      	movs	r3, #0
 80044da:	623b      	str	r3, [r7, #32]
 80044dc:	e014      	b.n	8004508 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	601a      	str	r2, [r3, #0]
    pDest++;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	3301      	adds	r3, #1
 80044ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f2:	3301      	adds	r3, #1
 80044f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	3301      	adds	r3, #1
 80044fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fe:	3301      	adds	r3, #1
 8004500:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	3301      	adds	r3, #1
 8004506:	623b      	str	r3, [r7, #32]
 8004508:	6a3a      	ldr	r2, [r7, #32]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	429a      	cmp	r2, r3
 800450e:	d3e6      	bcc.n	80044de <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004510:	8bfb      	ldrh	r3, [r7, #30]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d01e      	beq.n	8004554 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004520:	461a      	mov	r2, r3
 8004522:	f107 0310 	add.w	r3, r7, #16
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	fa22 f303 	lsr.w	r3, r2, r3
 8004536:	b2da      	uxtb	r2, r3
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	701a      	strb	r2, [r3, #0]
      i++;
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	3301      	adds	r3, #1
 8004540:	623b      	str	r3, [r7, #32]
      pDest++;
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	3301      	adds	r3, #1
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004548:	8bfb      	ldrh	r3, [r7, #30]
 800454a:	3b01      	subs	r3, #1
 800454c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800454e:	8bfb      	ldrh	r3, [r7, #30]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1ea      	bne.n	800452a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004556:	4618      	mov	r0, r3
 8004558:	372c      	adds	r7, #44	@ 0x2c
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	785b      	ldrb	r3, [r3, #1]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d12c      	bne.n	80045d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	db12      	blt.n	80045b6 <USB_EPSetStall+0x54>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00f      	beq.n	80045b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	0151      	lsls	r1, r2, #5
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	440a      	add	r2, r1
 80045ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80045b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	0151      	lsls	r1, r2, #5
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	440a      	add	r2, r1
 80045cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e02b      	b.n	8004630 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	db12      	blt.n	8004610 <USB_EPSetStall+0xae>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00f      	beq.n	8004610 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	0151      	lsls	r1, r2, #5
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	440a      	add	r2, r1
 8004606:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800460a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800460e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	0151      	lsls	r1, r2, #5
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	440a      	add	r2, r1
 8004626:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800462a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800462e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800463e:	b480      	push	{r7}
 8004640:	b085      	sub	sp, #20
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	785b      	ldrb	r3, [r3, #1]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d128      	bne.n	80046ac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	440a      	add	r2, r1
 8004670:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004674:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004678:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	78db      	ldrb	r3, [r3, #3]
 800467e:	2b03      	cmp	r3, #3
 8004680:	d003      	beq.n	800468a <USB_EPClearStall+0x4c>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	78db      	ldrb	r3, [r3, #3]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d138      	bne.n	80046fc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	0151      	lsls	r1, r2, #5
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	440a      	add	r2, r1
 80046a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e027      	b.n	80046fc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	78db      	ldrb	r3, [r3, #3]
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d003      	beq.n	80046dc <USB_EPClearStall+0x9e>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	78db      	ldrb	r3, [r3, #3]
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d10f      	bne.n	80046fc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	0151      	lsls	r1, r2, #5
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	440a      	add	r2, r1
 80046f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046fa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800470a:	b480      	push	{r7}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	460b      	mov	r3, r1
 8004714:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004728:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800472c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800473e:	68f9      	ldr	r1, [r7, #12]
 8004740:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004744:	4313      	orrs	r3, r2
 8004746:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004756:	b480      	push	{r7}
 8004758:	b085      	sub	sp, #20
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004770:	f023 0303 	bic.w	r3, r3, #3
 8004774:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004784:	f023 0302 	bic.w	r3, r3, #2
 8004788:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047c6:	f043 0302 	orr.w	r3, r3, #2
 80047ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047da:	b480      	push	{r7}
 80047dc:	b085      	sub	sp, #20
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4013      	ands	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047f2:	68fb      	ldr	r3, [r7, #12]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	4013      	ands	r3, r2
 8004822:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	0c1b      	lsrs	r3, r3, #16
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	4013      	ands	r3, r2
 8004856:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	b29b      	uxth	r3, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	4013      	ands	r3, r2
 8004894:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004896:	68bb      	ldr	r3, [r7, #8]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
 80048d4:	01db      	lsls	r3, r3, #7
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80048de:	78fb      	ldrb	r3, [r7, #3]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4013      	ands	r3, r2
 80048f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048f2:	68bb      	ldr	r3, [r7, #8]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f003 0301 	and.w	r3, r3, #1
}
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004936:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800493a:	f023 0307 	bic.w	r3, r3, #7
 800493e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800494e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004952:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
	...

08004964 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	460b      	mov	r3, r1
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	333c      	adds	r3, #60	@ 0x3c
 800497a:	3304      	adds	r3, #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4a26      	ldr	r2, [pc, #152]	@ (8004a1c <USB_EP0_OutStart+0xb8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d90a      	bls.n	800499e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004994:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004998:	d101      	bne.n	800499e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	e037      	b.n	8004a0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a4:	461a      	mov	r2, r3
 80049a6:	2300      	movs	r3, #0
 80049a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049cc:	f043 0318 	orr.w	r3, r3, #24
 80049d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049e0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80049e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80049e6:	7afb      	ldrb	r3, [r7, #11]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d10f      	bne.n	8004a0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f2:	461a      	mov	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a06:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004a0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	4f54300a 	.word	0x4f54300a

08004a20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	4a13      	ldr	r2, [pc, #76]	@ (8004a80 <USB_CoreReset+0x60>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e01a      	b.n	8004a72 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	daf3      	bge.n	8004a2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f043 0201 	orr.w	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3301      	adds	r3, #1
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	4a09      	ldr	r2, [pc, #36]	@ (8004a80 <USB_CoreReset+0x60>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d901      	bls.n	8004a64 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e006      	b.n	8004a72 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d0f1      	beq.n	8004a54 <USB_CoreReset+0x34>

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	00030d40 	.word	0x00030d40

08004a84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8004a88:	f001 f9ec 	bl	8005e64 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	4917      	ldr	r1, [pc, #92]	@ (8004aec <MX_USB_DEVICE_Init+0x68>)
 8004a90:	4817      	ldr	r0, [pc, #92]	@ (8004af0 <MX_USB_DEVICE_Init+0x6c>)
 8004a92:	f003 f990 	bl	8007db6 <USBD_Init>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8004a9c:	f7fb fed2 	bl	8000844 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8004aa0:	4914      	ldr	r1, [pc, #80]	@ (8004af4 <MX_USB_DEVICE_Init+0x70>)
 8004aa2:	4813      	ldr	r0, [pc, #76]	@ (8004af0 <MX_USB_DEVICE_Init+0x6c>)
 8004aa4:	f003 f9b3 	bl	8007e0e <USBD_RegisterClass>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8004aae:	f7fb fec9 	bl	8000844 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8004ab2:	4911      	ldr	r1, [pc, #68]	@ (8004af8 <MX_USB_DEVICE_Init+0x74>)
 8004ab4:	480e      	ldr	r0, [pc, #56]	@ (8004af0 <MX_USB_DEVICE_Init+0x6c>)
 8004ab6:	f000 feb5 	bl	8005824 <USBD_CDC_ACM_RegisterInterface>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8004ac0:	f7fb fec0 	bl	8000844 <Error_Handler>
  {
    Error_Handler();
  }
#endif
#if (USBD_USE_MSC == 1)
  if (USBD_MSC_RegisterStorage(&hUsbDevice, &USBD_Storage_Interface_fops) != USBD_OK)
 8004ac4:	490d      	ldr	r1, [pc, #52]	@ (8004afc <MX_USB_DEVICE_Init+0x78>)
 8004ac6:	480a      	ldr	r0, [pc, #40]	@ (8004af0 <MX_USB_DEVICE_Init+0x6c>)
 8004ac8:	f001 fce4 	bl	8006494 <USBD_MSC_RegisterStorage>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8004ad2:	f7fb feb7 	bl	8000844 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8004ad6:	4806      	ldr	r0, [pc, #24]	@ (8004af0 <MX_USB_DEVICE_Init+0x6c>)
 8004ad8:	f003 f9d7 	bl	8007e8a <USBD_Start>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 8004ae2:	f7fb feaf 	bl	8000844 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20000020 	.word	0x20000020
 8004af0:	20000784 	.word	0x20000784
 8004af4:	20000170 	.word	0x20000170
 8004af8:	2000000c 	.word	0x2000000c
 8004afc:	20000070 	.word	0x20000070

08004b00 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	01db      	lsls	r3, r3, #7
 8004b0e:	4a06      	ldr	r2, [pc, #24]	@ (8004b28 <CDC_Init+0x28>)
 8004b10:	441a      	add	r2, r3
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	4905      	ldr	r1, [pc, #20]	@ (8004b2c <CDC_Init+0x2c>)
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 febe 	bl	8005898 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 8004b1c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000aa0 	.word	0x20000aa0
 8004b2c:	20000784 	.word	0x20000784

08004b30 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 8004b3a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	603a      	str	r2, [r7, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	4603      	mov	r3, r0
 8004b54:	71fb      	strb	r3, [r7, #7]
 8004b56:	460b      	mov	r3, r1
 8004b58:	71bb      	strb	r3, [r7, #6]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8004b5e:	79bb      	ldrb	r3, [r7, #6]
 8004b60:	2b23      	cmp	r3, #35	@ 0x23
 8004b62:	f200 80b6 	bhi.w	8004cd2 <CDC_Control+0x18a>
 8004b66:	a201      	add	r2, pc, #4	@ (adr r2, 8004b6c <CDC_Control+0x24>)
 8004b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6c:	08004cd3 	.word	0x08004cd3
 8004b70:	08004cd3 	.word	0x08004cd3
 8004b74:	08004cd3 	.word	0x08004cd3
 8004b78:	08004cd3 	.word	0x08004cd3
 8004b7c:	08004cd3 	.word	0x08004cd3
 8004b80:	08004cd3 	.word	0x08004cd3
 8004b84:	08004cd3 	.word	0x08004cd3
 8004b88:	08004cd3 	.word	0x08004cd3
 8004b8c:	08004cd3 	.word	0x08004cd3
 8004b90:	08004cd3 	.word	0x08004cd3
 8004b94:	08004cd3 	.word	0x08004cd3
 8004b98:	08004cd3 	.word	0x08004cd3
 8004b9c:	08004cd3 	.word	0x08004cd3
 8004ba0:	08004cd3 	.word	0x08004cd3
 8004ba4:	08004cd3 	.word	0x08004cd3
 8004ba8:	08004cd3 	.word	0x08004cd3
 8004bac:	08004cd3 	.word	0x08004cd3
 8004bb0:	08004cd3 	.word	0x08004cd3
 8004bb4:	08004cd3 	.word	0x08004cd3
 8004bb8:	08004cd3 	.word	0x08004cd3
 8004bbc:	08004cd3 	.word	0x08004cd3
 8004bc0:	08004cd3 	.word	0x08004cd3
 8004bc4:	08004cd3 	.word	0x08004cd3
 8004bc8:	08004cd3 	.word	0x08004cd3
 8004bcc:	08004cd3 	.word	0x08004cd3
 8004bd0:	08004cd3 	.word	0x08004cd3
 8004bd4:	08004cd3 	.word	0x08004cd3
 8004bd8:	08004cd3 	.word	0x08004cd3
 8004bdc:	08004cd3 	.word	0x08004cd3
 8004be0:	08004cd3 	.word	0x08004cd3
 8004be4:	08004cd3 	.word	0x08004cd3
 8004be8:	08004cd3 	.word	0x08004cd3
 8004bec:	08004bfd 	.word	0x08004bfd
 8004bf0:	08004c5d 	.word	0x08004c5d
 8004bf4:	08004cd3 	.word	0x08004cd3
 8004bf8:	08004cd3 	.word	0x08004cd3
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	3301      	adds	r3, #1
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	021b      	lsls	r3, r3, #8
 8004c0a:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	3302      	adds	r3, #2
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004c14:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	3303      	adds	r3, #3
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	061b      	lsls	r3, r3, #24
 8004c1e:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	4611      	mov	r1, r2
 8004c24:	4a2f      	ldr	r2, [pc, #188]	@ (8004ce4 <CDC_Control+0x19c>)
 8004c26:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	7911      	ldrb	r1, [r2, #4]
 8004c30:	4a2c      	ldr	r2, [pc, #176]	@ (8004ce4 <CDC_Control+0x19c>)
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4413      	add	r3, r2
 8004c36:	460a      	mov	r2, r1
 8004c38:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	7951      	ldrb	r1, [r2, #5]
 8004c40:	4a28      	ldr	r2, [pc, #160]	@ (8004ce4 <CDC_Control+0x19c>)
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4413      	add	r3, r2
 8004c46:	460a      	mov	r2, r1
 8004c48:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	7991      	ldrb	r1, [r2, #6]
 8004c50:	4a24      	ldr	r2, [pc, #144]	@ (8004ce4 <CDC_Control+0x19c>)
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4413      	add	r3, r2
 8004c56:	460a      	mov	r2, r1
 8004c58:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 8004c5a:	e03b      	b.n	8004cd4 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	4a21      	ldr	r2, [pc, #132]	@ (8004ce4 <CDC_Control+0x19c>)
 8004c60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ce4 <CDC_Control+0x19c>)
 8004c6e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c72:	0a1a      	lsrs	r2, r3, #8
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	3301      	adds	r3, #1
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	4a19      	ldr	r2, [pc, #100]	@ (8004ce4 <CDC_Control+0x19c>)
 8004c80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c84:	0c1a      	lsrs	r2, r3, #16
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	3302      	adds	r3, #2
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	4a14      	ldr	r2, [pc, #80]	@ (8004ce4 <CDC_Control+0x19c>)
 8004c92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c96:	0e1a      	lsrs	r2, r3, #24
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	3303      	adds	r3, #3
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8004ca0:	79fb      	ldrb	r3, [r7, #7]
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	3204      	adds	r2, #4
 8004ca6:	490f      	ldr	r1, [pc, #60]	@ (8004ce4 <CDC_Control+0x19c>)
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	440b      	add	r3, r1
 8004cac:	791b      	ldrb	r3, [r3, #4]
 8004cae:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	3205      	adds	r2, #5
 8004cb6:	490b      	ldr	r1, [pc, #44]	@ (8004ce4 <CDC_Control+0x19c>)
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	440b      	add	r3, r1
 8004cbc:	795b      	ldrb	r3, [r3, #5]
 8004cbe:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	3206      	adds	r2, #6
 8004cc6:	4907      	ldr	r1, [pc, #28]	@ (8004ce4 <CDC_Control+0x19c>)
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	440b      	add	r3, r1
 8004ccc:	799b      	ldrb	r3, [r3, #6]
 8004cce:	7013      	strb	r3, [r2, #0]
    break;
 8004cd0:	e000      	b.n	8004cd4 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8004cd2:	bf00      	nop
  }

  return (USBD_OK);
 8004cd4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	20000b20 	.word	0x20000b20

08004ce8 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 f825 	bl	8004d50 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	4907      	ldr	r1, [pc, #28]	@ (8004d28 <CDC_Receive+0x40>)
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fdc3 	bl	8005898 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	4904      	ldr	r1, [pc, #16]	@ (8004d28 <CDC_Receive+0x40>)
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fe1e 	bl	8005958 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8004d1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000784 	.word	0x20000784

08004d2c <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	461a      	mov	r2, r3
 8004d38:	4603      	mov	r3, r0
 8004d3a:	73fb      	strb	r3, [r7, #15]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	6039      	str	r1, [r7, #0]
 8004d5a:	71fb      	strb	r3, [r7, #7]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 8004d68:	79fb      	ldrb	r3, [r7, #7]
 8004d6a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	4a0e      	ldr	r2, [pc, #56]	@ (8004dac <CDC_Transmit+0x5c>)
 8004d74:	4413      	add	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e00d      	b.n	8004da2 <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 8004d86:	88bb      	ldrh	r3, [r7, #4]
 8004d88:	79f8      	ldrb	r0, [r7, #7]
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	4908      	ldr	r1, [pc, #32]	@ (8004db0 <CDC_Transmit+0x60>)
 8004d8e:	f000 fd5f 	bl	8005850 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	4906      	ldr	r1, [pc, #24]	@ (8004db0 <CDC_Transmit+0x60>)
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fd9c 	bl	80058d4 <USBD_CDC_TransmitPacket>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20008d40 	.word	0x20008d40
 8004db0:	20000784 	.word	0x20000784

08004db4 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	6039      	str	r1, [r7, #0]
 8004dbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2212      	movs	r2, #18
 8004dc4:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8004dc6:	4b03      	ldr	r3, [pc, #12]	@ (8004dd4 <USBD_DeviceDescriptor+0x20>)
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	2000003c 	.word	0x2000003c

08004dd8 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	6039      	str	r1, [r7, #0]
 8004de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2204      	movs	r2, #4
 8004de8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004dea:	4b03      	ldr	r3, [pc, #12]	@ (8004df8 <USBD_LangIDStrDescriptor+0x20>)
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	20000050 	.word	0x20000050

08004dfc <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	6039      	str	r1, [r7, #0]
 8004e06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d105      	bne.n	8004e1a <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	4907      	ldr	r1, [pc, #28]	@ (8004e30 <USBD_ProductStrDescriptor+0x34>)
 8004e12:	4808      	ldr	r0, [pc, #32]	@ (8004e34 <USBD_ProductStrDescriptor+0x38>)
 8004e14:	f004 f879 	bl	8008f0a <USBD_GetString>
 8004e18:	e004      	b.n	8004e24 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	4904      	ldr	r1, [pc, #16]	@ (8004e30 <USBD_ProductStrDescriptor+0x34>)
 8004e1e:	4805      	ldr	r0, [pc, #20]	@ (8004e34 <USBD_ProductStrDescriptor+0x38>)
 8004e20:	f004 f873 	bl	8008f0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8004e24:	4b02      	ldr	r3, [pc, #8]	@ (8004e30 <USBD_ProductStrDescriptor+0x34>)
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000b28 	.word	0x20000b28
 8004e34:	0800d64c 	.word	0x0800d64c

08004e38 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	6039      	str	r1, [r7, #0]
 8004e42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	4904      	ldr	r1, [pc, #16]	@ (8004e58 <USBD_ManufacturerStrDescriptor+0x20>)
 8004e48:	4804      	ldr	r0, [pc, #16]	@ (8004e5c <USBD_ManufacturerStrDescriptor+0x24>)
 8004e4a:	f004 f85e 	bl	8008f0a <USBD_GetString>
  return USBD_StrDesc;
 8004e4e:	4b02      	ldr	r3, [pc, #8]	@ (8004e58 <USBD_ManufacturerStrDescriptor+0x20>)
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20000b28 	.word	0x20000b28
 8004e5c:	0800d664 	.word	0x0800d664

08004e60 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	6039      	str	r1, [r7, #0]
 8004e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	221a      	movs	r2, #26
 8004e70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8004e72:	f000 f843 	bl	8004efc <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8004e76:	4b02      	ldr	r3, [pc, #8]	@ (8004e80 <USBD_SerialStrDescriptor+0x20>)
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20000054 	.word	0x20000054

08004e84 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	6039      	str	r1, [r7, #0]
 8004e8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	4907      	ldr	r1, [pc, #28]	@ (8004eb8 <USBD_ConfigStrDescriptor+0x34>)
 8004e9a:	4808      	ldr	r0, [pc, #32]	@ (8004ebc <USBD_ConfigStrDescriptor+0x38>)
 8004e9c:	f004 f835 	bl	8008f0a <USBD_GetString>
 8004ea0:	e004      	b.n	8004eac <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	4904      	ldr	r1, [pc, #16]	@ (8004eb8 <USBD_ConfigStrDescriptor+0x34>)
 8004ea6:	4805      	ldr	r0, [pc, #20]	@ (8004ebc <USBD_ConfigStrDescriptor+0x38>)
 8004ea8:	f004 f82f 	bl	8008f0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8004eac:	4b02      	ldr	r3, [pc, #8]	@ (8004eb8 <USBD_ConfigStrDescriptor+0x34>)
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000b28 	.word	0x20000b28
 8004ebc:	0800d678 	.word	0x0800d678

08004ec0 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	6039      	str	r1, [r7, #0]
 8004eca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d105      	bne.n	8004ede <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	4907      	ldr	r1, [pc, #28]	@ (8004ef4 <USBD_InterfaceStrDescriptor+0x34>)
 8004ed6:	4808      	ldr	r0, [pc, #32]	@ (8004ef8 <USBD_InterfaceStrDescriptor+0x38>)
 8004ed8:	f004 f817 	bl	8008f0a <USBD_GetString>
 8004edc:	e004      	b.n	8004ee8 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	4904      	ldr	r1, [pc, #16]	@ (8004ef4 <USBD_InterfaceStrDescriptor+0x34>)
 8004ee2:	4805      	ldr	r0, [pc, #20]	@ (8004ef8 <USBD_InterfaceStrDescriptor+0x38>)
 8004ee4:	f004 f811 	bl	8008f0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8004ee8:	4b02      	ldr	r3, [pc, #8]	@ (8004ef4 <USBD_InterfaceStrDescriptor+0x34>)
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000b28 	.word	0x20000b28
 8004ef8:	0800d688 	.word	0x0800d688

08004efc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004f02:	4b0f      	ldr	r3, [pc, #60]	@ (8004f40 <Get_SerialNum+0x44>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004f08:	4b0e      	ldr	r3, [pc, #56]	@ (8004f44 <Get_SerialNum+0x48>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f48 <Get_SerialNum+0x4c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4413      	add	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d009      	beq.n	8004f36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004f22:	2208      	movs	r2, #8
 8004f24:	4909      	ldr	r1, [pc, #36]	@ (8004f4c <Get_SerialNum+0x50>)
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f814 	bl	8004f54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004f2c:	2204      	movs	r2, #4
 8004f2e:	4908      	ldr	r1, [pc, #32]	@ (8004f50 <Get_SerialNum+0x54>)
 8004f30:	68b8      	ldr	r0, [r7, #8]
 8004f32:	f000 f80f 	bl	8004f54 <IntToUnicode>
  }
}
 8004f36:	bf00      	nop
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	1fff7a10 	.word	0x1fff7a10
 8004f44:	1fff7a14 	.word	0x1fff7a14
 8004f48:	1fff7a18 	.word	0x1fff7a18
 8004f4c:	20000056 	.word	0x20000056
 8004f50:	20000066 	.word	0x20000066

08004f54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8004f66:	2300      	movs	r3, #0
 8004f68:	75fb      	strb	r3, [r7, #23]
 8004f6a:	e027      	b.n	8004fbc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	0f1b      	lsrs	r3, r3, #28
 8004f70:	2b09      	cmp	r3, #9
 8004f72:	d80b      	bhi.n	8004f8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	0f1b      	lsrs	r3, r3, #28
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	4619      	mov	r1, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	440b      	add	r3, r1
 8004f84:	3230      	adds	r2, #48	@ 0x30
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e00a      	b.n	8004fa2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	0f1b      	lsrs	r3, r3, #28
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	7dfb      	ldrb	r3, [r7, #23]
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	4619      	mov	r1, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	440b      	add	r3, r1
 8004f9c:	3237      	adds	r2, #55	@ 0x37
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8004fa8:	7dfb      	ldrb	r3, [r7, #23]
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	3301      	adds	r3, #1
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	75fb      	strb	r3, [r7, #23]
 8004fbc:	7dfa      	ldrb	r2, [r7, #23]
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d3d3      	bcc.n	8004f6c <IntToUnicode+0x18>
  }
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <STORAGE_Init>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init(uint8_t lun)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	4603      	mov	r3, r0
 8004fda:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8004fdc:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <STORAGE_GetCapacity>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
 8004ff6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	22c8      	movs	r2, #200	@ 0xc8
 8004ffc:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005004:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8005006:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <STORAGE_IsReady>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady(uint8_t lun)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800501e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <STORAGE_IsWriteProtected>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected(uint8_t lun)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	4603      	mov	r3, r0
 8005034:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8005036:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <STORAGE_Read>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8005044:	b480      	push	{r7}
 8005046:	b089      	sub	sp, #36	@ 0x24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60b9      	str	r1, [r7, #8]
 800504c:	607a      	str	r2, [r7, #4]
 800504e:	461a      	mov	r2, r3
 8005050:	4603      	mov	r3, r0
 8005052:	73fb      	strb	r3, [r7, #15]
 8005054:	4613      	mov	r3, r2
 8005056:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

  uint32_t bytecount = blk_len*STORAGE_BLK_SIZ;
 8005058:	89bb      	ldrh	r3, [r7, #12]
 800505a:	025b      	lsls	r3, r3, #9
 800505c:	61bb      	str	r3, [r7, #24]
  uint32_t mem_address = blk_addr*STORAGE_BLK_SIZ;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	025b      	lsls	r3, r3, #9
 8005062:	617b      	str	r3, [r7, #20]

  for(uint32_t i=0; i<bytecount; i++)
 8005064:	2300      	movs	r3, #0
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	e00b      	b.n	8005082 <STORAGE_Read+0x3e>
      {
	  buf[i] = MSC_Storage[mem_address+i];
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	441a      	add	r2, r3
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	440b      	add	r3, r1
 8005076:	4908      	ldr	r1, [pc, #32]	@ (8005098 <STORAGE_Read+0x54>)
 8005078:	5c8a      	ldrb	r2, [r1, r2]
 800507a:	701a      	strb	r2, [r3, #0]
  for(uint32_t i=0; i<bytecount; i++)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	3301      	adds	r3, #1
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	429a      	cmp	r2, r3
 8005088:	d3ef      	bcc.n	800506a <STORAGE_Read+0x26>
      }

  return (USBD_OK);
 800508a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800508c:	4618      	mov	r0, r3
 800508e:	3724      	adds	r7, #36	@ 0x24
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	20000d28 	.word	0x20000d28

0800509c <STORAGE_Write>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800509c:	b480      	push	{r7}
 800509e:	b089      	sub	sp, #36	@ 0x24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	607a      	str	r2, [r7, #4]
 80050a6:	461a      	mov	r2, r3
 80050a8:	4603      	mov	r3, r0
 80050aa:	73fb      	strb	r3, [r7, #15]
 80050ac:	4613      	mov	r3, r2
 80050ae:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */

   uint32_t bytecount = blk_len*STORAGE_BLK_SIZ;
 80050b0:	89bb      	ldrh	r3, [r7, #12]
 80050b2:	025b      	lsls	r3, r3, #9
 80050b4:	61bb      	str	r3, [r7, #24]
   uint32_t mem_address = blk_addr*STORAGE_BLK_SIZ;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	025b      	lsls	r3, r3, #9
 80050ba:	617b      	str	r3, [r7, #20]

    for(uint32_t i=0; i<bytecount; i++)
 80050bc:	2300      	movs	r3, #0
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	e00b      	b.n	80050da <STORAGE_Write+0x3e>
    {
	MSC_Storage[mem_address+i] = buf[i];
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	441a      	add	r2, r3
 80050c8:	6979      	ldr	r1, [r7, #20]
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	440b      	add	r3, r1
 80050ce:	7811      	ldrb	r1, [r2, #0]
 80050d0:	4a07      	ldr	r2, [pc, #28]	@ (80050f0 <STORAGE_Write+0x54>)
 80050d2:	54d1      	strb	r1, [r2, r3]
    for(uint32_t i=0; i<bytecount; i++)
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	3301      	adds	r3, #1
 80050d8:	61fb      	str	r3, [r7, #28]
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d3ef      	bcc.n	80050c2 <STORAGE_Write+0x26>
    }

  return (USBD_OK);
 80050e2:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3724      	adds	r7, #36	@ 0x24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	20000d28 	.word	0x20000d28

080050f4 <STORAGE_GetMaxLun>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80050f8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005110:	2300      	movs	r3, #0
 8005112:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005114:	2300      	movs	r3, #0
 8005116:	73fb      	strb	r3, [r7, #15]
 8005118:	e0c6      	b.n	80052a8 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005120:	fb02 f303 	mul.w	r3, r2, r3
 8005124:	4a65      	ldr	r2, [pc, #404]	@ (80052bc <USBD_CDC_Init+0x1b8>)
 8005126:	4413      	add	r3, r2
 8005128:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	7c1b      	ldrb	r3, [r3, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d13d      	bne.n	80051ae <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8005132:	7bfb      	ldrb	r3, [r7, #15]
 8005134:	4a62      	ldr	r2, [pc, #392]	@ (80052c0 <USBD_CDC_Init+0x1bc>)
 8005136:	5cd1      	ldrb	r1, [r2, r3]
 8005138:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800513c:	2202      	movs	r2, #2
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f004 f92d 	bl	800939e <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	4a5e      	ldr	r2, [pc, #376]	@ (80052c0 <USBD_CDC_Init+0x1bc>)
 8005148:	5cd3      	ldrb	r3, [r2, r3]
 800514a:	f003 020f 	and.w	r2, r3, #15
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	3324      	adds	r3, #36	@ 0x24
 800515c:	2201      	movs	r2, #1
 800515e:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	4a58      	ldr	r2, [pc, #352]	@ (80052c4 <USBD_CDC_Init+0x1c0>)
 8005164:	5cd1      	ldrb	r1, [r2, r3]
 8005166:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800516a:	2202      	movs	r2, #2
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f004 f916 	bl	800939e <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	4a53      	ldr	r2, [pc, #332]	@ (80052c4 <USBD_CDC_Init+0x1c0>)
 8005176:	5cd3      	ldrb	r3, [r2, r3]
 8005178:	f003 020f 	and.w	r2, r3, #15
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800518c:	2201      	movs	r2, #1
 800518e:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005190:	7bfb      	ldrb	r3, [r7, #15]
 8005192:	4a4d      	ldr	r2, [pc, #308]	@ (80052c8 <USBD_CDC_Init+0x1c4>)
 8005194:	5cd3      	ldrb	r3, [r2, r3]
 8005196:	f003 020f 	and.w	r2, r3, #15
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	4613      	mov	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	3326      	adds	r3, #38	@ 0x26
 80051a8:	2210      	movs	r2, #16
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	e03a      	b.n	8005224 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	4a43      	ldr	r2, [pc, #268]	@ (80052c0 <USBD_CDC_Init+0x1bc>)
 80051b2:	5cd1      	ldrb	r1, [r2, r3]
 80051b4:	2340      	movs	r3, #64	@ 0x40
 80051b6:	2202      	movs	r2, #2
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f004 f8f0 	bl	800939e <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80051be:	7bfb      	ldrb	r3, [r7, #15]
 80051c0:	4a3f      	ldr	r2, [pc, #252]	@ (80052c0 <USBD_CDC_Init+0x1bc>)
 80051c2:	5cd3      	ldrb	r3, [r2, r3]
 80051c4:	f003 020f 	and.w	r2, r3, #15
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	3324      	adds	r3, #36	@ 0x24
 80051d6:	2201      	movs	r2, #1
 80051d8:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	4a39      	ldr	r2, [pc, #228]	@ (80052c4 <USBD_CDC_Init+0x1c0>)
 80051de:	5cd1      	ldrb	r1, [r2, r3]
 80051e0:	2340      	movs	r3, #64	@ 0x40
 80051e2:	2202      	movs	r2, #2
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f004 f8da 	bl	800939e <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	4a35      	ldr	r2, [pc, #212]	@ (80052c4 <USBD_CDC_Init+0x1c0>)
 80051ee:	5cd3      	ldrb	r3, [r2, r3]
 80051f0:	f003 020f 	and.w	r2, r3, #15
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005204:	2201      	movs	r2, #1
 8005206:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	4a2f      	ldr	r2, [pc, #188]	@ (80052c8 <USBD_CDC_Init+0x1c4>)
 800520c:	5cd3      	ldrb	r3, [r2, r3]
 800520e:	f003 020f 	and.w	r2, r3, #15
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	3326      	adds	r3, #38	@ 0x26
 8005220:	2210      	movs	r2, #16
 8005222:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	4a28      	ldr	r2, [pc, #160]	@ (80052c8 <USBD_CDC_Init+0x1c4>)
 8005228:	5cd1      	ldrb	r1, [r2, r3]
 800522a:	2308      	movs	r3, #8
 800522c:	2203      	movs	r2, #3
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f004 f8b5 	bl	800939e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	4a24      	ldr	r2, [pc, #144]	@ (80052c8 <USBD_CDC_Init+0x1c4>)
 8005238:	5cd3      	ldrb	r3, [r2, r3]
 800523a:	f003 020f 	and.w	r2, r3, #15
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	3324      	adds	r3, #36	@ 0x24
 800524c:	2201      	movs	r2, #1
 800524e:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	7bfa      	ldrb	r2, [r7, #15]
 800525a:	4610      	mov	r0, r2
 800525c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2200      	movs	r2, #0
 8005262:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2200      	movs	r2, #0
 800526a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	7c1b      	ldrb	r3, [r3, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10b      	bne.n	800528e <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	4a12      	ldr	r2, [pc, #72]	@ (80052c4 <USBD_CDC_Init+0x1c0>)
 800527a:	5cd1      	ldrb	r1, [r2, r3]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005282:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f004 f997 	bl	80095ba <USBD_LL_PrepareReceive>
 800528c:	e009      	b.n	80052a2 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	4a0c      	ldr	r2, [pc, #48]	@ (80052c4 <USBD_CDC_Init+0x1c0>)
 8005292:	5cd1      	ldrb	r1, [r2, r3]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800529a:	2340      	movs	r3, #64	@ 0x40
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f004 f98c 	bl	80095ba <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	3301      	adds	r3, #1
 80052a6:	73fb      	strb	r3, [r7, #15]
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f43f af35 	beq.w	800511a <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20008d40 	.word	0x20008d40
 80052c0:	20008d28 	.word	0x20008d28
 80052c4:	20008d2c 	.word	0x20008d2c
 80052c8:	20008d30 	.word	0x20008d30

080052cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80052d8:	2300      	movs	r3, #0
 80052da:	73fb      	strb	r3, [r7, #15]
 80052dc:	e057      	b.n	800538e <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	4a2f      	ldr	r2, [pc, #188]	@ (80053a0 <USBD_CDC_DeInit+0xd4>)
 80052e2:	5cd3      	ldrb	r3, [r2, r3]
 80052e4:	4619      	mov	r1, r3
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f004 f87f 	bl	80093ea <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
 80052ee:	4a2c      	ldr	r2, [pc, #176]	@ (80053a0 <USBD_CDC_DeInit+0xd4>)
 80052f0:	5cd3      	ldrb	r3, [r2, r3]
 80052f2:	f003 020f 	and.w	r2, r3, #15
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	3324      	adds	r3, #36	@ 0x24
 8005304:	2200      	movs	r2, #0
 8005306:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	4a26      	ldr	r2, [pc, #152]	@ (80053a4 <USBD_CDC_DeInit+0xd8>)
 800530c:	5cd3      	ldrb	r3, [r2, r3]
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f004 f86a 	bl	80093ea <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	4a22      	ldr	r2, [pc, #136]	@ (80053a4 <USBD_CDC_DeInit+0xd8>)
 800531a:	5cd3      	ldrb	r3, [r2, r3]
 800531c:	f003 020f 	and.w	r2, r3, #15
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005330:	2200      	movs	r2, #0
 8005332:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	4a1c      	ldr	r2, [pc, #112]	@ (80053a8 <USBD_CDC_DeInit+0xdc>)
 8005338:	5cd3      	ldrb	r3, [r2, r3]
 800533a:	4619      	mov	r1, r3
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f004 f854 	bl	80093ea <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 8005342:	7bfb      	ldrb	r3, [r7, #15]
 8005344:	4a18      	ldr	r2, [pc, #96]	@ (80053a8 <USBD_CDC_DeInit+0xdc>)
 8005346:	5cd3      	ldrb	r3, [r2, r3]
 8005348:	f003 020f 	and.w	r2, r3, #15
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	3324      	adds	r3, #36	@ 0x24
 800535a:	2200      	movs	r2, #0
 800535c:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	4a11      	ldr	r2, [pc, #68]	@ (80053a8 <USBD_CDC_DeInit+0xdc>)
 8005362:	5cd3      	ldrb	r3, [r2, r3]
 8005364:	f003 020f 	and.w	r2, r3, #15
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	3326      	adds	r3, #38	@ 0x26
 8005376:	2200      	movs	r2, #0
 8005378:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	7bfa      	ldrb	r2, [r7, #15]
 8005384:	4610      	mov	r0, r2
 8005386:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005388:	7bfb      	ldrb	r3, [r7, #15]
 800538a:	3301      	adds	r3, #1
 800538c:	73fb      	strb	r3, [r7, #15]
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0a4      	beq.n	80052de <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20008d28 	.word	0x20008d28
 80053a4:	20008d2c 	.word	0x20008d2c
 80053a8:	20008d30 	.word	0x20008d30

080053ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80053ac:	b590      	push	{r4, r7, lr}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 80053c6:	2300      	movs	r3, #0
 80053c8:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80053ca:	2300      	movs	r3, #0
 80053cc:	757b      	strb	r3, [r7, #21]
 80053ce:	e015      	b.n	80053fc <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	889b      	ldrh	r3, [r3, #4]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	7d7b      	ldrb	r3, [r7, #21]
 80053d8:	496d      	ldr	r1, [pc, #436]	@ (8005590 <USBD_CDC_Setup+0x1e4>)
 80053da:	5ccb      	ldrb	r3, [r1, r3]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d007      	beq.n	80053f0 <USBD_CDC_Setup+0x44>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	889b      	ldrh	r3, [r3, #4]
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	7d7b      	ldrb	r3, [r7, #21]
 80053e8:	496a      	ldr	r1, [pc, #424]	@ (8005594 <USBD_CDC_Setup+0x1e8>)
 80053ea:	5ccb      	ldrb	r3, [r1, r3]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d102      	bne.n	80053f6 <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 80053f0:	7d7b      	ldrb	r3, [r7, #21]
 80053f2:	75bb      	strb	r3, [r7, #22]
      break;
 80053f4:	e005      	b.n	8005402 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80053f6:	7d7b      	ldrb	r3, [r7, #21]
 80053f8:	3301      	adds	r3, #1
 80053fa:	757b      	strb	r3, [r7, #21]
 80053fc:	7d7b      	ldrb	r3, [r7, #21]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0e6      	beq.n	80053d0 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 8005402:	7dbb      	ldrb	r3, [r7, #22]
 8005404:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005408:	fb02 f303 	mul.w	r3, r2, r3
 800540c:	4a62      	ldr	r2, [pc, #392]	@ (8005598 <USBD_CDC_Setup+0x1ec>)
 800540e:	4413      	add	r3, r2
 8005410:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800541a:	2b00      	cmp	r3, #0
 800541c:	d04a      	beq.n	80054b4 <USBD_CDC_Setup+0x108>
 800541e:	2b20      	cmp	r3, #32
 8005420:	f040 80aa 	bne.w	8005578 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	88db      	ldrh	r3, [r3, #6]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d038      	beq.n	800549e <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	b25b      	sxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	da1d      	bge.n	8005472 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800543c:	689c      	ldr	r4, [r3, #8]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	7859      	ldrb	r1, [r3, #1]
 8005442:	7dbb      	ldrb	r3, [r7, #22]
 8005444:	025b      	lsls	r3, r3, #9
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	441a      	add	r2, r3
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	88db      	ldrh	r3, [r3, #6]
 800544e:	7db8      	ldrb	r0, [r7, #22]
 8005450:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	88db      	ldrh	r3, [r3, #6]
 8005456:	2b07      	cmp	r3, #7
 8005458:	bf28      	it	cs
 800545a:	2307      	movcs	r3, #7
 800545c:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 800545e:	7dbb      	ldrb	r3, [r7, #22]
 8005460:	025b      	lsls	r3, r3, #9
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4413      	add	r3, r2
 8005466:	89fa      	ldrh	r2, [r7, #14]
 8005468:	4619      	mov	r1, r3
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f003 fdad 	bl	8008fca <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8005470:	e089      	b.n	8005586 <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	785a      	ldrb	r2, [r3, #1]
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	88db      	ldrh	r3, [r3, #6]
 8005480:	b2da      	uxtb	r2, r3
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8005488:	7dbb      	ldrb	r3, [r7, #22]
 800548a:	025b      	lsls	r3, r3, #9
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	18d1      	adds	r1, r2, r3
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	88db      	ldrh	r3, [r3, #6]
 8005494:	461a      	mov	r2, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f003 fdc3 	bl	8009022 <USBD_CtlPrepareRx>
    break;
 800549c:	e073      	b.n	8005586 <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80054a4:	689c      	ldr	r4, [r3, #8]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	7859      	ldrb	r1, [r3, #1]
 80054aa:	7db8      	ldrb	r0, [r7, #22]
 80054ac:	2300      	movs	r3, #0
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	47a0      	blx	r4
    break;
 80054b2:	e068      	b.n	8005586 <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	785b      	ldrb	r3, [r3, #1]
 80054b8:	2b0b      	cmp	r3, #11
 80054ba:	d852      	bhi.n	8005562 <USBD_CDC_Setup+0x1b6>
 80054bc:	a201      	add	r2, pc, #4	@ (adr r2, 80054c4 <USBD_CDC_Setup+0x118>)
 80054be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c2:	bf00      	nop
 80054c4:	080054f5 	.word	0x080054f5
 80054c8:	08005571 	.word	0x08005571
 80054cc:	08005563 	.word	0x08005563
 80054d0:	08005563 	.word	0x08005563
 80054d4:	08005563 	.word	0x08005563
 80054d8:	08005563 	.word	0x08005563
 80054dc:	08005563 	.word	0x08005563
 80054e0:	08005563 	.word	0x08005563
 80054e4:	08005563 	.word	0x08005563
 80054e8:	08005563 	.word	0x08005563
 80054ec:	0800551f 	.word	0x0800551f
 80054f0:	08005549 	.word	0x08005549
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d107      	bne.n	8005510 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005500:	f107 030a 	add.w	r3, r7, #10
 8005504:	2202      	movs	r2, #2
 8005506:	4619      	mov	r1, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f003 fd5e 	bl	8008fca <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800550e:	e032      	b.n	8005576 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f003 fce8 	bl	8008ee8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005518:	2303      	movs	r3, #3
 800551a:	75fb      	strb	r3, [r7, #23]
      break;
 800551c:	e02b      	b.n	8005576 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b03      	cmp	r3, #3
 8005528:	d107      	bne.n	800553a <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800552a:	f107 030d 	add.w	r3, r7, #13
 800552e:	2201      	movs	r2, #1
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f003 fd49 	bl	8008fca <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005538:	e01d      	b.n	8005576 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f003 fcd3 	bl	8008ee8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005542:	2303      	movs	r3, #3
 8005544:	75fb      	strb	r3, [r7, #23]
      break;
 8005546:	e016      	b.n	8005576 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b03      	cmp	r3, #3
 8005552:	d00f      	beq.n	8005574 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8005554:	6839      	ldr	r1, [r7, #0]
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f003 fcc6 	bl	8008ee8 <USBD_CtlError>
        ret = USBD_FAIL;
 800555c:	2303      	movs	r3, #3
 800555e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005560:	e008      	b.n	8005574 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005562:	6839      	ldr	r1, [r7, #0]
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f003 fcbf 	bl	8008ee8 <USBD_CtlError>
      ret = USBD_FAIL;
 800556a:	2303      	movs	r3, #3
 800556c:	75fb      	strb	r3, [r7, #23]
      break;
 800556e:	e002      	b.n	8005576 <USBD_CDC_Setup+0x1ca>
      break;
 8005570:	bf00      	nop
 8005572:	e008      	b.n	8005586 <USBD_CDC_Setup+0x1da>
      break;
 8005574:	bf00      	nop
    }
    break;
 8005576:	e006      	b.n	8005586 <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8005578:	6839      	ldr	r1, [r7, #0]
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f003 fcb4 	bl	8008ee8 <USBD_CtlError>
    ret = USBD_FAIL;
 8005580:	2303      	movs	r3, #3
 8005582:	75fb      	strb	r3, [r7, #23]
    break;
 8005584:	bf00      	nop
  }

  return (uint8_t)ret;
 8005586:	7dfb      	ldrb	r3, [r7, #23]
}
 8005588:	4618      	mov	r0, r3
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	bd90      	pop	{r4, r7, pc}
 8005590:	20008d34 	.word	0x20008d34
 8005594:	20008d38 	.word	0x20008d38
 8005598:	20008d40 	.word	0x20008d40

0800559c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800559c:	b590      	push	{r4, r7, lr}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80055a8:	2300      	movs	r3, #0
 80055aa:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80055b2:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80055b8:	2300      	movs	r3, #0
 80055ba:	75bb      	strb	r3, [r7, #22]
 80055bc:	e00d      	b.n	80055da <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 80055be:	78fa      	ldrb	r2, [r7, #3]
 80055c0:	7dbb      	ldrb	r3, [r7, #22]
 80055c2:	4934      	ldr	r1, [pc, #208]	@ (8005694 <USBD_CDC_DataIn+0xf8>)
 80055c4:	5ccb      	ldrb	r3, [r1, r3]
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d102      	bne.n	80055d4 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 80055ce:	7dbb      	ldrb	r3, [r7, #22]
 80055d0:	75fb      	strb	r3, [r7, #23]
      break;
 80055d2:	e005      	b.n	80055e0 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80055d4:	7dbb      	ldrb	r3, [r7, #22]
 80055d6:	3301      	adds	r3, #1
 80055d8:	75bb      	strb	r3, [r7, #22]
 80055da:	7dbb      	ldrb	r3, [r7, #22]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0ee      	beq.n	80055be <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
 80055e2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80055e6:	fb02 f303 	mul.w	r3, r2, r3
 80055ea:	4a2b      	ldr	r2, [pc, #172]	@ (8005698 <USBD_CDC_DataIn+0xfc>)
 80055ec:	4413      	add	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80055f0:	78fa      	ldrb	r2, [r7, #3]
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	3318      	adds	r3, #24
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d029      	beq.n	800565a <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005606:	78fa      	ldrb	r2, [r7, #3]
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	3318      	adds	r3, #24
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	78f9      	ldrb	r1, [r7, #3]
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	460b      	mov	r3, r1
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	1a5b      	subs	r3, r3, r1
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4403      	add	r3, r0
 8005626:	3344      	adds	r3, #68	@ 0x44
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	fbb2 f1f3 	udiv	r1, r2, r3
 800562e:	fb01 f303 	mul.w	r3, r1, r3
 8005632:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005634:	2b00      	cmp	r3, #0
 8005636:	d110      	bne.n	800565a <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	3318      	adds	r3, #24
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800564c:	78f9      	ldrb	r1, [r7, #3]
 800564e:	2300      	movs	r3, #0
 8005650:	2200      	movs	r2, #0
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f003 ff90 	bl	8009578 <USBD_LL_Transmit>
 8005658:	e016      	b.n	8005688 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2200      	movs	r2, #0
 800565e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00c      	beq.n	8005688 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005674:	691c      	ldr	r4, [r3, #16]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	7df8      	ldrb	r0, [r7, #23]
 8005686:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	bd90      	pop	{r4, r7, pc}
 8005692:	bf00      	nop
 8005694:	20008d28 	.word	0x20008d28
 8005698:	20008d40 	.word	0x20008d40

0800569c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 80056ac:	2300      	movs	r3, #0
 80056ae:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80056b0:	2300      	movs	r3, #0
 80056b2:	73bb      	strb	r3, [r7, #14]
 80056b4:	e00b      	b.n	80056ce <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 80056b6:	7bbb      	ldrb	r3, [r7, #14]
 80056b8:	4a17      	ldr	r2, [pc, #92]	@ (8005718 <USBD_CDC_DataOut+0x7c>)
 80056ba:	5cd3      	ldrb	r3, [r2, r3]
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d102      	bne.n	80056c8 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 80056c2:	7bbb      	ldrb	r3, [r7, #14]
 80056c4:	73fb      	strb	r3, [r7, #15]
      break;
 80056c6:	e005      	b.n	80056d4 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80056c8:	7bbb      	ldrb	r3, [r7, #14]
 80056ca:	3301      	adds	r3, #1
 80056cc:	73bb      	strb	r3, [r7, #14]
 80056ce:	7bbb      	ldrb	r3, [r7, #14]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0f0      	beq.n	80056b6 <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80056da:	fb02 f303 	mul.w	r3, r2, r3
 80056de:	4a0f      	ldr	r2, [pc, #60]	@ (800571c <USBD_CDC_DataOut+0x80>)
 80056e0:	4413      	add	r3, r2
 80056e2:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f003 ff87 	bl	80095fc <USBD_LL_GetRxDataSize>
 80056ee:	4602      	mov	r2, r0
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800570a:	7bf8      	ldrb	r0, [r7, #15]
 800570c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	20008d2c 	.word	0x20008d2c
 800571c:	20008d40 	.word	0x20008d40

08005720 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005720:	b590      	push	{r4, r7, lr}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005728:	2300      	movs	r3, #0
 800572a:	60bb      	str	r3, [r7, #8]

  if (hcdc == NULL)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <USBD_CDC_EP0_RxReady+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8005732:	2303      	movs	r3, #3
 8005734:	e02f      	b.n	8005796 <USBD_CDC_EP0_RxReady+0x76>
  }

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005736:	2300      	movs	r3, #0
 8005738:	73fb      	strb	r3, [r7, #15]
 800573a:	e028      	b.n	800578e <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005742:	fb02 f303 	mul.w	r3, r2, r3
 8005746:	4a16      	ldr	r2, [pc, #88]	@ (80057a0 <USBD_CDC_EP0_RxReady+0x80>)
 8005748:	4413      	add	r3, r2
 800574a:	60bb      	str	r3, [r7, #8]

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005752:	2b00      	cmp	r3, #0
 8005754:	d018      	beq.n	8005788 <USBD_CDC_EP0_RxReady+0x68>
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800575c:	2bff      	cmp	r3, #255	@ 0xff
 800575e:	d013      	beq.n	8005788 <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005766:	689c      	ldr	r4, [r3, #8]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800576e:	7bfb      	ldrb	r3, [r7, #15]
 8005770:	025b      	lsls	r3, r3, #9
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	441a      	add	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800577c:	7bf8      	ldrb	r0, [r7, #15]
 800577e:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	22ff      	movs	r2, #255	@ 0xff
 8005784:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	3301      	adds	r3, #1
 800578c:	73fb      	strb	r3, [r7, #15]
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d0d3      	beq.n	800573c <USBD_CDC_EP0_RxReady+0x1c>
    }
  }

  return (uint8_t)USBD_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	bd90      	pop	{r4, r7, pc}
 800579e:	bf00      	nop
 80057a0:	20008d40 	.word	0x20008d40

080057a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	224b      	movs	r2, #75	@ 0x4b
 80057b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80057b2:	4b03      	ldr	r3, [pc, #12]	@ (80057c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	20000124 	.word	0x20000124

080057c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	224b      	movs	r2, #75	@ 0x4b
 80057d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80057d2:	4b03      	ldr	r3, [pc, #12]	@ (80057e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	200000d8 	.word	0x200000d8

080057e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	224b      	movs	r2, #75	@ 0x4b
 80057f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80057f2:	4b03      	ldr	r3, [pc, #12]	@ (8005800 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	20000124 	.word	0x20000124

08005804 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	220a      	movs	r2, #10
 8005810:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005812:	4b03      	ldr	r3, [pc, #12]	@ (8005820 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	20000090 	.word	0x20000090

08005824 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005834:	2303      	movs	r3, #3
 8005836:	e004      	b.n	8005842 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
	...

08005850 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	607a      	str	r2, [r7, #4]
 800585a:	603b      	str	r3, [r7, #0]
 800585c:	4603      	mov	r3, r0
 800585e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005860:	2300      	movs	r3, #0
 8005862:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	4a09      	ldr	r2, [pc, #36]	@ (8005894 <USBD_CDC_SetTxBuffer+0x44>)
 8005870:	4413      	add	r3, r2
 8005872:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	20008d40 	.word	0x20008d40

08005898 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80058b0:	fb02 f303 	mul.w	r3, r2, r3
 80058b4:	4a06      	ldr	r2, [pc, #24]	@ (80058d0 <USBD_CDC_SetRxBuffer+0x38>)
 80058b6:	4413      	add	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	20008d40 	.word	0x20008d40

080058d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	6039      	str	r1, [r7, #0]
 80058de:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80058ee:	fb02 f303 	mul.w	r3, r2, r3
 80058f2:	4a17      	ldr	r2, [pc, #92]	@ (8005950 <USBD_CDC_TransmitPacket+0x7c>)
 80058f4:	4413      	add	r3, r2
 80058f6:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d121      	bne.n	8005946 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2201      	movs	r2, #1
 8005906:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800590a:	79fb      	ldrb	r3, [r7, #7]
 800590c:	4a11      	ldr	r2, [pc, #68]	@ (8005954 <USBD_CDC_TransmitPacket+0x80>)
 800590e:	5cd3      	ldrb	r3, [r2, r3]
 8005910:	f003 020f 	and.w	r2, r3, #15
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800591a:	6838      	ldr	r0, [r7, #0]
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4403      	add	r3, r0
 8005926:	3318      	adds	r3, #24
 8005928:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	4a09      	ldr	r2, [pc, #36]	@ (8005954 <USBD_CDC_TransmitPacket+0x80>)
 800592e:	5cd1      	ldrb	r1, [r2, r3]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800593c:	6838      	ldr	r0, [r7, #0]
 800593e:	f003 fe1b 	bl	8009578 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005946:	7bfb      	ldrb	r3, [r7, #15]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20008d40 	.word	0x20008d40
 8005954:	20008d28 	.word	0x20008d28

08005958 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	6039      	str	r1, [r7, #0]
 8005962:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800596e:	fb02 f303 	mul.w	r3, r2, r3
 8005972:	4a11      	ldr	r2, [pc, #68]	@ (80059b8 <USBD_CDC_ReceivePacket+0x60>)
 8005974:	4413      	add	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	7c1b      	ldrb	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10b      	bne.n	8005998 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	4a0e      	ldr	r2, [pc, #56]	@ (80059bc <USBD_CDC_ReceivePacket+0x64>)
 8005984:	5cd1      	ldrb	r1, [r2, r3]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800598c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005990:	6838      	ldr	r0, [r7, #0]
 8005992:	f003 fe12 	bl	80095ba <USBD_LL_PrepareReceive>
 8005996:	e009      	b.n	80059ac <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	4a08      	ldr	r2, [pc, #32]	@ (80059bc <USBD_CDC_ReceivePacket+0x64>)
 800599c:	5cd1      	ldrb	r1, [r2, r3]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80059a4:	2340      	movs	r3, #64	@ 0x40
 80059a6:	6838      	ldr	r0, [r7, #0]
 80059a8:	f003 fe07 	bl	80095ba <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20008d40 	.word	0x20008d40
 80059bc:	20008d2c 	.word	0x20008d2c

080059c0 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	4608      	mov	r0, r1
 80059ca:	4611      	mov	r1, r2
 80059cc:	461a      	mov	r2, r3
 80059ce:	4603      	mov	r3, r0
 80059d0:	70fb      	strb	r3, [r7, #3]
 80059d2:	460b      	mov	r3, r1
 80059d4:	70bb      	strb	r3, [r7, #2]
 80059d6:	4613      	mov	r3, r2
 80059d8:	707b      	strb	r3, [r7, #1]
  desc += 9;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3309      	adds	r3, #9
 80059de:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80059e0:	2300      	movs	r3, #0
 80059e2:	73fb      	strb	r3, [r7, #15]
 80059e4:	e05b      	b.n	8005a9e <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3302      	adds	r3, #2
 80059ea:	78fa      	ldrb	r2, [r7, #3]
 80059ec:	701a      	strb	r2, [r3, #0]
    desc[7] = str_idx;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3307      	adds	r3, #7
 80059f2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80059f6:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	330a      	adds	r3, #10
 80059fc:	78fa      	ldrb	r2, [r7, #3]
 80059fe:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	331a      	adds	r3, #26
 8005a04:	78ba      	ldrb	r2, [r7, #2]
 8005a06:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3322      	adds	r3, #34	@ 0x22
 8005a0c:	78fa      	ldrb	r2, [r7, #3]
 8005a0e:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3323      	adds	r3, #35	@ 0x23
 8005a14:	78ba      	ldrb	r2, [r7, #2]
 8005a16:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3326      	adds	r3, #38	@ 0x26
 8005a1c:	7e3a      	ldrb	r2, [r7, #24]
 8005a1e:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	332d      	adds	r3, #45	@ 0x2d
 8005a24:	78ba      	ldrb	r2, [r7, #2]
 8005a26:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3336      	adds	r3, #54	@ 0x36
 8005a2c:	7f3a      	ldrb	r2, [r7, #28]
 8005a2e:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	333d      	adds	r3, #61	@ 0x3d
 8005a34:	787a      	ldrb	r2, [r7, #1]
 8005a36:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3342      	adds	r3, #66	@ 0x42
 8005a3c:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	491c      	ldr	r1, [pc, #112]	@ (8005ab4 <USBD_Update_CDC_ACM_DESC+0xf4>)
 8005a42:	787a      	ldrb	r2, [r7, #1]
 8005a44:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
 8005a48:	491b      	ldr	r1, [pc, #108]	@ (8005ab8 <USBD_Update_CDC_ACM_DESC+0xf8>)
 8005a4a:	7f3a      	ldrb	r2, [r7, #28]
 8005a4c:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	491a      	ldr	r1, [pc, #104]	@ (8005abc <USBD_Update_CDC_ACM_DESC+0xfc>)
 8005a52:	7e3a      	ldrb	r2, [r7, #24]
 8005a54:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	4919      	ldr	r1, [pc, #100]	@ (8005ac0 <USBD_Update_CDC_ACM_DESC+0x100>)
 8005a5a:	78fa      	ldrb	r2, [r7, #3]
 8005a5c:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	4918      	ldr	r1, [pc, #96]	@ (8005ac4 <USBD_Update_CDC_ACM_DESC+0x104>)
 8005a62:	78ba      	ldrb	r2, [r7, #2]
 8005a64:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	4917      	ldr	r1, [pc, #92]	@ (8005ac8 <USBD_Update_CDC_ACM_DESC+0x108>)
 8005a6a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005a6e:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8005a70:	787b      	ldrb	r3, [r7, #1]
 8005a72:	3302      	adds	r3, #2
 8005a74:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 8005a76:	787b      	ldrb	r3, [r7, #1]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8005a7c:	7f3b      	ldrb	r3, [r7, #28]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8005a82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a86:	3301      	adds	r3, #1
 8005a88:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	3302      	adds	r3, #2
 8005a90:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	3301      	adds	r3, #1
 8005a96:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	73fb      	strb	r3, [r7, #15]
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0a0      	beq.n	80059e6 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20008d28 	.word	0x20008d28
 8005ab8:	20008d2c 	.word	0x20008d2c
 8005abc:	20008d30 	.word	0x20008d30
 8005ac0:	20008d34 	.word	0x20008d34
 8005ac4:	20008d38 	.word	0x20008d38
 8005ac8:	20008d3c 	.word	0x20008d3c

08005acc <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8005ad8:	4b08      	ldr	r3, [pc, #32]	@ (8005afc <USBD_COMPOSITE_Init+0x30>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	78fa      	ldrb	r2, [r7, #3]
 8005ade:	4611      	mov	r1, r2
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	4798      	blx	r3
#endif
#if (USBD_USE_UVC == 1)
  USBD_VIDEO.Init(pdev, cfgidx);
#endif
#if (USBD_USE_MSC == 1)
  USBD_MSC.Init(pdev, cfgidx);
 8005ae4:	4b06      	ldr	r3, [pc, #24]	@ (8005b00 <USBD_COMPOSITE_Init+0x34>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	78fa      	ldrb	r2, [r7, #3]
 8005aea:	4611      	mov	r1, r2
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	2000009c 	.word	0x2000009c
 8005b00:	200001bc 	.word	0x200001bc

08005b04 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8005b10:	4b08      	ldr	r3, [pc, #32]	@ (8005b34 <USBD_COMPOSITE_DeInit+0x30>)
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	78fa      	ldrb	r2, [r7, #3]
 8005b16:	4611      	mov	r1, r2
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	4798      	blx	r3
#endif
#if (USBD_USE_UVC == 1)
  USBD_VIDEO.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_MSC == 1)
  USBD_MSC.DeInit(pdev, cfgidx);
 8005b1c:	4b06      	ldr	r3, [pc, #24]	@ (8005b38 <USBD_COMPOSITE_DeInit+0x34>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	78fa      	ldrb	r2, [r7, #3]
 8005b22:	4611      	mov	r1, r2
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	2000009c 	.word	0x2000009c
 8005b38:	200001bc 	.word	0x200001bc

08005b3c <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005b46:	2300      	movs	r3, #0
 8005b48:	73fb      	strb	r3, [r7, #15]
 8005b4a:	e019      	b.n	8005b80 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	889b      	ldrh	r3, [r3, #4]
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	4915      	ldr	r1, [pc, #84]	@ (8005bac <USBD_COMPOSITE_Setup+0x70>)
 8005b56:	5ccb      	ldrb	r3, [r1, r3]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d007      	beq.n	8005b6c <USBD_COMPOSITE_Setup+0x30>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	889b      	ldrh	r3, [r3, #4]
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	4912      	ldr	r1, [pc, #72]	@ (8005bb0 <USBD_COMPOSITE_Setup+0x74>)
 8005b66:	5ccb      	ldrb	r3, [r1, r3]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d106      	bne.n	8005b7a <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8005b6c:	4b11      	ldr	r3, [pc, #68]	@ (8005bb4 <USBD_COMPOSITE_Setup+0x78>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	6839      	ldr	r1, [r7, #0]
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	4798      	blx	r3
 8005b76:	4603      	mov	r3, r0
 8005b78:	e014      	b.n	8005ba4 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0e2      	beq.n	8005b4c <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_VIDEO.Setup(pdev, req);
  }
#endif
#if (USBD_USE_MSC == 1)
  if (LOBYTE(req->wIndex) == MSC_ITF_NBR)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	889b      	ldrh	r3, [r3, #4]
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb8 <USBD_COMPOSITE_Setup+0x7c>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d106      	bne.n	8005ba2 <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_MSC.Setup(pdev, req);
 8005b94:	4b09      	ldr	r3, [pc, #36]	@ (8005bbc <USBD_COMPOSITE_Setup+0x80>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	6839      	ldr	r1, [r7, #0]
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	4798      	blx	r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	e000      	b.n	8005ba4 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 8005ba2:	2303      	movs	r3, #3
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	20008d34 	.word	0x20008d34
 8005bb0:	20008d38 	.word	0x20008d38
 8005bb4:	2000009c 	.word	0x2000009c
 8005bb8:	20009064 	.word	0x20009064
 8005bbc:	200001bc 	.word	0x200001bc

08005bc0 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	73fb      	strb	r3, [r7, #15]
 8005bd0:	e01a      	b.n	8005c08 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8005bd2:	78fa      	ldrb	r2, [r7, #3]
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	4918      	ldr	r1, [pc, #96]	@ (8005c38 <USBD_COMPOSITE_DataIn+0x78>)
 8005bd8:	5ccb      	ldrb	r3, [r1, r3]
 8005bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d007      	beq.n	8005bf2 <USBD_COMPOSITE_DataIn+0x32>
 8005be2:	78fa      	ldrb	r2, [r7, #3]
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	4915      	ldr	r1, [pc, #84]	@ (8005c3c <USBD_COMPOSITE_DataIn+0x7c>)
 8005be8:	5ccb      	ldrb	r3, [r1, r3]
 8005bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d107      	bne.n	8005c02 <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8005bf2:	4b13      	ldr	r3, [pc, #76]	@ (8005c40 <USBD_COMPOSITE_DataIn+0x80>)
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	78fa      	ldrb	r2, [r7, #3]
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	4798      	blx	r3
 8005bfe:	4603      	mov	r3, r0
 8005c00:	e015      	b.n	8005c2e <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	3301      	adds	r3, #1
 8005c06:	73fb      	strb	r3, [r7, #15]
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0e1      	beq.n	8005bd2 <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_VIDEO.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_MSC == 1)
  if (epnum == (MSC_IN_EP & 0x7F))
 8005c0e:	78fa      	ldrb	r2, [r7, #3]
 8005c10:	4b0c      	ldr	r3, [pc, #48]	@ (8005c44 <USBD_COMPOSITE_DataIn+0x84>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d107      	bne.n	8005c2c <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_MSC.DataIn(pdev, epnum);
 8005c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c48 <USBD_COMPOSITE_DataIn+0x88>)
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	78fa      	ldrb	r2, [r7, #3]
 8005c22:	4611      	mov	r1, r2
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	4798      	blx	r3
 8005c28:	4603      	mov	r3, r0
 8005c2a:	e000      	b.n	8005c2e <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8005c2c:	2303      	movs	r3, #3
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20008d28 	.word	0x20008d28
 8005c3c:	20008d30 	.word	0x20008d30
 8005c40:	2000009c 	.word	0x2000009c
 8005c44:	200001ba 	.word	0x200001ba
 8005c48:	200001bc 	.word	0x200001bc

08005c4c <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8005c54:	4b04      	ldr	r3, [pc, #16]	@ (8005c68 <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	2000009c 	.word	0x2000009c

08005c6c <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005cd8:	2300      	movs	r3, #0
 8005cda:	73fb      	strb	r3, [r7, #15]
 8005cdc:	e010      	b.n	8005d00 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	4a12      	ldr	r2, [pc, #72]	@ (8005d2c <USBD_COMPOSITE_DataOut+0x60>)
 8005ce2:	5cd3      	ldrb	r3, [r2, r3]
 8005ce4:	78fa      	ldrb	r2, [r7, #3]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d107      	bne.n	8005cfa <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8005cea:	4b11      	ldr	r3, [pc, #68]	@ (8005d30 <USBD_COMPOSITE_DataOut+0x64>)
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	78fa      	ldrb	r2, [r7, #3]
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	4798      	blx	r3
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	e013      	b.n	8005d22 <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	73fb      	strb	r3, [r7, #15]
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0eb      	beq.n	8005cde <USBD_COMPOSITE_DataOut+0x12>
  }
#endif
#if (USBD_USE_UVC == 1)
#endif
#if (USBD_USE_MSC == 1)
  if (epnum == MSC_OUT_EP)
 8005d06:	4b0b      	ldr	r3, [pc, #44]	@ (8005d34 <USBD_COMPOSITE_DataOut+0x68>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	78fa      	ldrb	r2, [r7, #3]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d107      	bne.n	8005d20 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_MSC.DataOut(pdev, epnum);
 8005d10:	4b09      	ldr	r3, [pc, #36]	@ (8005d38 <USBD_COMPOSITE_DataOut+0x6c>)
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	78fa      	ldrb	r2, [r7, #3]
 8005d16:	4611      	mov	r1, r2
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	4798      	blx	r3
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	e000      	b.n	8005d22 <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8005d20:	2303      	movs	r3, #3
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20008d2c 	.word	0x20008d2c
 8005d30:	2000009c 	.word	0x2000009c
 8005d34:	200001bb 	.word	0x200001bb
 8005d38:	200001bc 	.word	0x200001bc

08005d3c <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2262      	movs	r2, #98	@ 0x62
 8005d48:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8005d4a:	4b03      	ldr	r3, [pc, #12]	@ (8005d58 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	20008fc0 	.word	0x20008fc0

08005d5c <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2262      	movs	r2, #98	@ 0x62
 8005d68:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 8005d6a:	4b03      	ldr	r3, [pc, #12]	@ (8005d78 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	20008f5c 	.word	0x20008f5c

08005d7c <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2262      	movs	r2, #98	@ 0x62
 8005d88:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8005d8a:	4b03      	ldr	r3, [pc, #12]	@ (8005d98 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	20008fc0 	.word	0x20008fc0

08005d9c <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	220a      	movs	r2, #10
 8005da8:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8005daa:	4b03      	ldr	r3, [pc, #12]	@ (8005db8 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	200001b0 	.word	0x200001b0

08005dbc <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08a      	sub	sp, #40	@ 0x28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8005dca:	4b20      	ldr	r3, [pc, #128]	@ (8005e4c <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	7afa      	ldrb	r2, [r7, #11]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d835      	bhi.n	8005e40 <USBD_COMPOSITE_GetUsrStringDesc+0x84>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 8005dd4:	f107 0314 	add.w	r3, r7, #20
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	605a      	str	r2, [r3, #4]
 8005dde:	609a      	str	r2, [r3, #8]
 8005de0:	60da      	str	r2, [r3, #12]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005de2:	2300      	movs	r3, #0
 8005de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005de8:	e01a      	b.n	8005e20 <USBD_COMPOSITE_GetUsrStringDesc+0x64>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8005dea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dee:	4a18      	ldr	r2, [pc, #96]	@ (8005e50 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 8005df0:	5cd3      	ldrb	r3, [r2, r3]
 8005df2:	7afa      	ldrb	r2, [r7, #11]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d10e      	bne.n	8005e16 <USBD_COMPOSITE_GetUsrStringDesc+0x5a>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8005df8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dfc:	f107 0014 	add.w	r0, r7, #20
 8005e00:	4a14      	ldr	r2, [pc, #80]	@ (8005e54 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 8005e02:	2110      	movs	r1, #16
 8005e04:	f006 fb2c 	bl	800c460 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8005e08:	f107 0314 	add.w	r3, r7, #20
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	4912      	ldr	r1, [pc, #72]	@ (8005e58 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8005e10:	4618      	mov	r0, r3
 8005e12:	f003 f87a 	bl	8008f0a <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005e16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005e20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0e0      	beq.n	8005dea <USBD_COMPOSITE_GetUsrStringDesc+0x2e>
    {
      USBD_GetString((uint8_t *)UVC_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_MSC == 1)
    if (index == MSC_BOT_STR_DESC_IDX)
 8005e28:	4b0c      	ldr	r3, [pc, #48]	@ (8005e5c <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	7afa      	ldrb	r2, [r7, #11]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d104      	bne.n	8005e3c <USBD_COMPOSITE_GetUsrStringDesc+0x80>
    {
      USBD_GetString((uint8_t *)MSC_BOT_STR_DESC, USBD_StrDesc, length);
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	4908      	ldr	r1, [pc, #32]	@ (8005e58 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8005e36:	480a      	ldr	r0, [pc, #40]	@ (8005e60 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 8005e38:	f003 f867 	bl	8008f0a <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 8005e3c:	4b06      	ldr	r3, [pc, #24]	@ (8005e58 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8005e3e:	e000      	b.n	8005e42 <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8005e40:	2300      	movs	r3, #0
  }
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3728      	adds	r7, #40	@ 0x28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	200001ac 	.word	0x200001ac
 8005e50:	20008d3c 	.word	0x20008d3c
 8005e54:	0800d69c 	.word	0x0800d69c
 8005e58:	20009024 	.word	0x20009024
 8005e5c:	20009065 	.word	0x20009065
 8005e60:	0800d6ac 	.word	0x0800d6ac

08005e64 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8005e64:	b590      	push	{r4, r7, lr}
 8005e66:	b089      	sub	sp, #36	@ 0x24
 8005e68:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 8005e72:	2381      	movs	r3, #129	@ 0x81
 8005e74:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 8005e76:	2301      	movs	r3, #1
 8005e78:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	727b      	strb	r3, [r7, #9]

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8005e7e:	4b74      	ldr	r3, [pc, #464]	@ (8006050 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8005e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e82:	1d3a      	adds	r2, r7, #4
 8005e84:	4610      	mov	r0, r2
 8005e86:	4798      	blx	r3
 8005e88:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8005e8a:	7a7b      	ldrb	r3, [r7, #9]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	b2d8      	uxtb	r0, r3
 8005e90:	7afb      	ldrb	r3, [r7, #11]
 8005e92:	3301      	adds	r3, #1
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	4a6f      	ldr	r2, [pc, #444]	@ (8006054 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005e98:	7812      	ldrb	r2, [r2, #0]
 8005e9a:	7afc      	ldrb	r4, [r7, #11]
 8005e9c:	7a79      	ldrb	r1, [r7, #9]
 8005e9e:	9202      	str	r2, [sp, #8]
 8005ea0:	7aba      	ldrb	r2, [r7, #10]
 8005ea2:	9201      	str	r2, [sp, #4]
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	4623      	mov	r3, r4
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f7ff fd88 	bl	80059c0 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3309      	adds	r3, #9
 8005eb4:	88ba      	ldrh	r2, [r7, #4]
 8005eb6:	3a09      	subs	r2, #9
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4867      	ldr	r0, [pc, #412]	@ (8006058 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 8005ebc:	f006 fc23 	bl	800c706 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8005ec0:	4b63      	ldr	r3, [pc, #396]	@ (8006050 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec4:	1d3a      	adds	r2, r7, #4
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	4798      	blx	r3
 8005eca:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8005ecc:	7a7b      	ldrb	r3, [r7, #9]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	b2d8      	uxtb	r0, r3
 8005ed2:	7afb      	ldrb	r3, [r7, #11]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	4a5e      	ldr	r2, [pc, #376]	@ (8006054 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005eda:	7812      	ldrb	r2, [r2, #0]
 8005edc:	7afc      	ldrb	r4, [r7, #11]
 8005ede:	7a79      	ldrb	r1, [r7, #9]
 8005ee0:	9202      	str	r2, [sp, #8]
 8005ee2:	7aba      	ldrb	r2, [r7, #10]
 8005ee4:	9201      	str	r2, [sp, #4]
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	4623      	mov	r3, r4
 8005eea:	4602      	mov	r2, r0
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7ff fd67 	bl	80059c0 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3309      	adds	r3, #9
 8005ef6:	88ba      	ldrh	r2, [r7, #4]
 8005ef8:	3a09      	subs	r2, #9
 8005efa:	4619      	mov	r1, r3
 8005efc:	4857      	ldr	r0, [pc, #348]	@ (800605c <USBD_COMPOSITE_Mount_Class+0x1f8>)
 8005efe:	f006 fc02 	bl	800c706 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 8005f02:	7afb      	ldrb	r3, [r7, #11]
 8005f04:	3302      	adds	r3, #2
 8005f06:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 8005f08:	7abb      	ldrb	r3, [r7, #10]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 8005f0e:	7a7b      	ldrb	r3, [r7, #9]
 8005f10:	3302      	adds	r3, #2
 8005f12:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 8005f14:	4b4f      	ldr	r3, [pc, #316]	@ (8006054 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8006054 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005f1e:	701a      	strb	r2, [r3, #0]
  in_ep_track += 1;
  interface_no_track += 2;
  USBD_Track_String_Index += 1;
#endif
#if (USBD_USE_MSC == 1)
  ptr = USBD_MSC.GetFSConfigDescriptor(&len);
 8005f20:	4b4f      	ldr	r3, [pc, #316]	@ (8006060 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 8005f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f24:	1d3a      	adds	r2, r7, #4
 8005f26:	4610      	mov	r0, r2
 8005f28:	4798      	blx	r3
 8005f2a:	60f8      	str	r0, [r7, #12]
  USBD_Update_MSC_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005f2c:	4b49      	ldr	r3, [pc, #292]	@ (8006054 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	7ab8      	ldrb	r0, [r7, #10]
 8005f32:	7afa      	ldrb	r2, [r7, #11]
 8005f34:	7a79      	ldrb	r1, [r7, #9]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	4603      	mov	r3, r0
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 fac0 	bl	80064c0 <USBD_Update_MSC_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_MSC_DESC, ptr + 0x09, len - 0x09);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	3309      	adds	r3, #9
 8005f44:	88ba      	ldrh	r2, [r7, #4]
 8005f46:	3a09      	subs	r2, #9
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4846      	ldr	r0, [pc, #280]	@ (8006064 <USBD_COMPOSITE_Mount_Class+0x200>)
 8005f4c:	f006 fbdb 	bl	800c706 <memcpy>

  ptr = USBD_MSC.GetHSConfigDescriptor(&len);
 8005f50:	4b43      	ldr	r3, [pc, #268]	@ (8006060 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 8005f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f54:	1d3a      	adds	r2, r7, #4
 8005f56:	4610      	mov	r0, r2
 8005f58:	4798      	blx	r3
 8005f5a:	60f8      	str	r0, [r7, #12]
  USBD_Update_MSC_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8006054 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	7ab8      	ldrb	r0, [r7, #10]
 8005f62:	7afa      	ldrb	r2, [r7, #11]
 8005f64:	7a79      	ldrb	r1, [r7, #9]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	4603      	mov	r3, r0
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 faa8 	bl	80064c0 <USBD_Update_MSC_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_MSC_DESC, ptr + 0x09, len - 0x09);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3309      	adds	r3, #9
 8005f74:	88ba      	ldrh	r2, [r7, #4]
 8005f76:	3a09      	subs	r2, #9
 8005f78:	4619      	mov	r1, r3
 8005f7a:	483b      	ldr	r0, [pc, #236]	@ (8006068 <USBD_COMPOSITE_Mount_Class+0x204>)
 8005f7c:	f006 fbc3 	bl	800c706 <memcpy>
  in_ep_track += 1;
 8005f80:	7afb      	ldrb	r3, [r7, #11]
 8005f82:	3301      	adds	r3, #1
 8005f84:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 8005f86:	7abb      	ldrb	r3, [r7, #10]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 8005f8c:	7a7b      	ldrb	r3, [r7, #9]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8005f92:	4b30      	ldr	r3, [pc, #192]	@ (8006054 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	3301      	adds	r3, #1
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8006054 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005f9c:	701a      	strb	r2, [r3, #0]
  out_ep_track += 1;
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 8005f9e:	2362      	movs	r3, #98	@ 0x62
 8005fa0:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 8005fa2:	4b32      	ldr	r3, [pc, #200]	@ (800606c <USBD_COMPOSITE_Mount_Class+0x208>)
 8005fa4:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2209      	movs	r2, #9
 8005faa:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3302      	adds	r3, #2
 8005fb8:	88fa      	ldrh	r2, [r7, #6]
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	0a1b      	lsrs	r3, r3, #8
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3303      	adds	r3, #3
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	7a7a      	ldrb	r2, [r7, #9]
 8005fd2:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3305      	adds	r3, #5
 8005fd8:	2201      	movs	r2, #1
 8005fda:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3306      	adds	r3, #6
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3307      	adds	r3, #7
 8005fe8:	22c0      	movs	r2, #192	@ 0xc0
 8005fea:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3308      	adds	r3, #8
 8005ff0:	2232      	movs	r2, #50	@ 0x32
 8005ff2:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 8005ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8006070 <USBD_COMPOSITE_Mount_Class+0x20c>)
 8005ff6:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2209      	movs	r2, #9
 8005ffc:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3301      	adds	r3, #1
 8006002:	2202      	movs	r2, #2
 8006004:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3302      	adds	r3, #2
 800600a:	88fa      	ldrh	r2, [r7, #6]
 800600c:	b2d2      	uxtb	r2, r2
 800600e:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8006010:	88fb      	ldrh	r3, [r7, #6]
 8006012:	0a1b      	lsrs	r3, r3, #8
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3303      	adds	r3, #3
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3304      	adds	r3, #4
 8006022:	7a7a      	ldrb	r2, [r7, #9]
 8006024:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3305      	adds	r3, #5
 800602a:	2201      	movs	r2, #1
 800602c:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3306      	adds	r3, #6
 8006032:	2200      	movs	r2, #0
 8006034:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3307      	adds	r3, #7
 800603a:	22c0      	movs	r2, #192	@ 0xc0
 800603c:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3308      	adds	r3, #8
 8006042:	2232      	movs	r2, #50	@ 0x32
 8006044:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8006046:	bf00      	nop
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	bd90      	pop	{r4, r7, pc}
 800604e:	bf00      	nop
 8006050:	2000009c 	.word	0x2000009c
 8006054:	200001ac 	.word	0x200001ac
 8006058:	20008f65 	.word	0x20008f65
 800605c:	20008fc9 	.word	0x20008fc9
 8006060:	200001bc 	.word	0x200001bc
 8006064:	20008fa7 	.word	0x20008fa7
 8006068:	2000900b 	.word	0x2000900b
 800606c:	20008fc0 	.word	0x20008fc0
 8006070:	20008f5c 	.word	0x20008f5c

08006074 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = &USBD_MSC_Instance;
 8006080:	4b37      	ldr	r3, [pc, #220]	@ (8006160 <USBD_MSC_Init+0xec>)
 8006082:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d105      	bne.n	8006096 <USBD_MSC_Init+0x22>
  {
    pdev->pClassData_MSC = NULL;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
    return (uint8_t)USBD_EMEM;
 8006092:	2302      	movs	r3, #2
 8006094:	e060      	b.n	8006158 <USBD_MSC_Init+0xe4>
  }

  pdev->pClassData_MSC = (void *)hmsc;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	7c1b      	ldrb	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d12b      	bne.n	80060fe <USBD_MSC_Init+0x8a>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80060a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006164 <USBD_MSC_Init+0xf0>)
 80060a8:	7819      	ldrb	r1, [r3, #0]
 80060aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060ae:	2202      	movs	r2, #2
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f003 f974 	bl	800939e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 80060b6:	4b2b      	ldr	r3, [pc, #172]	@ (8006164 <USBD_MSC_Init+0xf0>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	f003 020f 	and.w	r2, r3, #15
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80060ce:	2201      	movs	r2, #1
 80060d0:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80060d2:	4b25      	ldr	r3, [pc, #148]	@ (8006168 <USBD_MSC_Init+0xf4>)
 80060d4:	7819      	ldrb	r1, [r3, #0]
 80060d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060da:	2202      	movs	r2, #2
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f003 f95e 	bl	800939e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 80060e2:	4b21      	ldr	r3, [pc, #132]	@ (8006168 <USBD_MSC_Init+0xf4>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	f003 020f 	and.w	r2, r3, #15
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	3324      	adds	r3, #36	@ 0x24
 80060f8:	2201      	movs	r2, #1
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	e028      	b.n	8006150 <USBD_MSC_Init+0xdc>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80060fe:	4b19      	ldr	r3, [pc, #100]	@ (8006164 <USBD_MSC_Init+0xf0>)
 8006100:	7819      	ldrb	r1, [r3, #0]
 8006102:	2340      	movs	r3, #64	@ 0x40
 8006104:	2202      	movs	r2, #2
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f003 f949 	bl	800939e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 800610c:	4b15      	ldr	r3, [pc, #84]	@ (8006164 <USBD_MSC_Init+0xf0>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	f003 020f 	and.w	r2, r3, #15
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	4613      	mov	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	440b      	add	r3, r1
 8006120:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006124:	2201      	movs	r2, #1
 8006126:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006128:	4b0f      	ldr	r3, [pc, #60]	@ (8006168 <USBD_MSC_Init+0xf4>)
 800612a:	7819      	ldrb	r1, [r3, #0]
 800612c:	2340      	movs	r3, #64	@ 0x40
 800612e:	2202      	movs	r2, #2
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f003 f934 	bl	800939e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 8006136:	4b0c      	ldr	r3, [pc, #48]	@ (8006168 <USBD_MSC_Init+0xf4>)
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	f003 020f 	and.w	r2, r3, #15
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	440b      	add	r3, r1
 800614a:	3324      	adds	r3, #36	@ 0x24
 800614c:	2201      	movs	r2, #1
 800614e:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f9ed 	bl	8006530 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	20009068 	.word	0x20009068
 8006164:	200001bb 	.word	0x200001bb
 8006168:	200001ba 	.word	0x200001ba

0800616c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_OUT_EP);
 8006178:	4b1b      	ldr	r3, [pc, #108]	@ (80061e8 <USBD_MSC_DeInit+0x7c>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f003 f933 	bl	80093ea <USBD_LL_CloseEP>
  pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 0U;
 8006184:	4b18      	ldr	r3, [pc, #96]	@ (80061e8 <USBD_MSC_DeInit+0x7c>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	f003 020f 	and.w	r2, r3, #15
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	440b      	add	r3, r1
 8006198:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800619c:	2200      	movs	r2, #0
 800619e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_IN_EP);
 80061a0:	4b12      	ldr	r3, [pc, #72]	@ (80061ec <USBD_MSC_DeInit+0x80>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	4619      	mov	r1, r3
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f003 f91f 	bl	80093ea <USBD_LL_CloseEP>
  pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 0U;
 80061ac:	4b0f      	ldr	r3, [pc, #60]	@ (80061ec <USBD_MSC_DeInit+0x80>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	f003 020f 	and.w	r2, r3, #15
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	3324      	adds	r3, #36	@ 0x24
 80061c2:	2200      	movs	r2, #0
 80061c4:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassData_MSC != NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d006      	beq.n	80061de <USBD_MSC_DeInit+0x72>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fa1f 	bl	8006614 <MSC_BOT_DeInit>
#if (0)
    (void)USBD_free(pdev->pClassData_MSC);
#endif
    pdev->pClassData_MSC = NULL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
  }

  return (uint8_t)USBD_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	200001bb 	.word	0x200001bb
 80061ec:	200001ba 	.word	0x200001ba

080061f0 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8006200:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006210:	2303      	movs	r3, #3
 8006212:	e0db      	b.n	80063cc <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800621c:	2b00      	cmp	r3, #0
 800621e:	d04e      	beq.n	80062be <USBD_MSC_Setup+0xce>
 8006220:	2b20      	cmp	r3, #32
 8006222:	f040 80cb 	bne.w	80063bc <USBD_MSC_Setup+0x1cc>
  {
  /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	785b      	ldrb	r3, [r3, #1]
 800622a:	2bfe      	cmp	r3, #254	@ 0xfe
 800622c:	d002      	beq.n	8006234 <USBD_MSC_Setup+0x44>
 800622e:	2bff      	cmp	r3, #255	@ 0xff
 8006230:	d025      	beq.n	800627e <USBD_MSC_Setup+0x8e>
 8006232:	e03c      	b.n	80062ae <USBD_MSC_Setup+0xbe>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue == 0U) && (req->wLength == 1U) &&
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	885b      	ldrh	r3, [r3, #2]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d119      	bne.n	8006270 <USBD_MSC_Setup+0x80>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	88db      	ldrh	r3, [r3, #6]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d115      	bne.n	8006270 <USBD_MSC_Setup+0x80>
          ((req->bmRequest & 0x80U) == 0x80U))
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	b25b      	sxtb	r3, r3
      if ((req->wValue == 0U) && (req->wLength == 1U) &&
 800624a:	2b00      	cmp	r3, #0
 800624c:	da10      	bge.n	8006270 <USBD_MSC_Setup+0x80>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetMaxLun();
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	4798      	blx	r3
 8006258:	4603      	mov	r3, r0
 800625a:	461a      	mov	r2, r3
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2201      	movs	r2, #1
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f002 feaf 	bl	8008fca <USBD_CtlSendData>
 800626c:	bf00      	nop
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800626e:	e025      	b.n	80062bc <USBD_MSC_Setup+0xcc>
        USBD_CtlError(pdev, req);
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f002 fe38 	bl	8008ee8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006278:	2303      	movs	r3, #3
 800627a:	75fb      	strb	r3, [r7, #23]
      break;
 800627c:	e01e      	b.n	80062bc <USBD_MSC_Setup+0xcc>

    case BOT_RESET:
      if ((req->wValue == 0U) && (req->wLength == 0U) &&
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	885b      	ldrh	r3, [r3, #2]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10c      	bne.n	80062a0 <USBD_MSC_Setup+0xb0>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	88db      	ldrh	r3, [r3, #6]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d108      	bne.n	80062a0 <USBD_MSC_Setup+0xb0>
          ((req->bmRequest & 0x80U) != 0x80U))
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	b25b      	sxtb	r3, r3
      if ((req->wValue == 0U) && (req->wLength == 0U) &&
 8006294:	2b00      	cmp	r3, #0
 8006296:	db03      	blt.n	80062a0 <USBD_MSC_Setup+0xb0>
      {
        MSC_BOT_Reset(pdev);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f98b 	bl	80065b4 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800629e:	e00d      	b.n	80062bc <USBD_MSC_Setup+0xcc>
        USBD_CtlError(pdev, req);
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f002 fe20 	bl	8008ee8 <USBD_CtlError>
        ret = USBD_FAIL;
 80062a8:	2303      	movs	r3, #3
 80062aa:	75fb      	strb	r3, [r7, #23]
      break;
 80062ac:	e006      	b.n	80062bc <USBD_MSC_Setup+0xcc>

    default:
      USBD_CtlError(pdev, req);
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f002 fe19 	bl	8008ee8 <USBD_CtlError>
      ret = USBD_FAIL;
 80062b6:	2303      	movs	r3, #3
 80062b8:	75fb      	strb	r3, [r7, #23]
      break;
 80062ba:	bf00      	nop
    }
    break;
 80062bc:	e085      	b.n	80063ca <USBD_MSC_Setup+0x1da>
  /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	2b0b      	cmp	r3, #11
 80062c4:	d871      	bhi.n	80063aa <USBD_MSC_Setup+0x1ba>
 80062c6:	a201      	add	r2, pc, #4	@ (adr r2, 80062cc <USBD_MSC_Setup+0xdc>)
 80062c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062cc:	080062fd 	.word	0x080062fd
 80062d0:	08006379 	.word	0x08006379
 80062d4:	080063ab 	.word	0x080063ab
 80062d8:	080063ab 	.word	0x080063ab
 80062dc:	080063ab 	.word	0x080063ab
 80062e0:	080063ab 	.word	0x080063ab
 80062e4:	080063ab 	.word	0x080063ab
 80062e8:	080063ab 	.word	0x080063ab
 80062ec:	080063ab 	.word	0x080063ab
 80062f0:	080063ab 	.word	0x080063ab
 80062f4:	08006327 	.word	0x08006327
 80062f8:	08006351 	.word	0x08006351
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b03      	cmp	r3, #3
 8006306:	d107      	bne.n	8006318 <USBD_MSC_Setup+0x128>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006308:	f107 030e 	add.w	r3, r7, #14
 800630c:	2202      	movs	r2, #2
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f002 fe5a 	bl	8008fca <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006316:	e050      	b.n	80063ba <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f002 fde4 	bl	8008ee8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006320:	2303      	movs	r3, #3
 8006322:	75fb      	strb	r3, [r7, #23]
      break;
 8006324:	e049      	b.n	80063ba <USBD_MSC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b03      	cmp	r3, #3
 8006330:	d107      	bne.n	8006342 <USBD_MSC_Setup+0x152>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	3304      	adds	r3, #4
 8006336:	2201      	movs	r2, #1
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f002 fe45 	bl	8008fca <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006340:	e03b      	b.n	80063ba <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f002 fdcf 	bl	8008ee8 <USBD_CtlError>
        ret = USBD_FAIL;
 800634a:	2303      	movs	r3, #3
 800634c:	75fb      	strb	r3, [r7, #23]
      break;
 800634e:	e034      	b.n	80063ba <USBD_MSC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b03      	cmp	r3, #3
 800635a:	d106      	bne.n	800636a <USBD_MSC_Setup+0x17a>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	885b      	ldrh	r3, [r3, #2]
 8006360:	b2db      	uxtb	r3, r3
 8006362:	461a      	mov	r2, r3
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006368:	e027      	b.n	80063ba <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f002 fdbb 	bl	8008ee8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006372:	2303      	movs	r3, #3
 8006374:	75fb      	strb	r3, [r7, #23]
      break;
 8006376:	e020      	b.n	80063ba <USBD_MSC_Setup+0x1ca>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b03      	cmp	r3, #3
 8006382:	d119      	bne.n	80063b8 <USBD_MSC_Setup+0x1c8>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	885b      	ldrh	r3, [r3, #2]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d115      	bne.n	80063b8 <USBD_MSC_Setup+0x1c8>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	889b      	ldrh	r3, [r3, #4]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f003 f847 	bl	8009428 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	889b      	ldrh	r3, [r3, #4]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fae6 	bl	8006974 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 80063a8:	e006      	b.n	80063b8 <USBD_MSC_Setup+0x1c8>

    default:
      USBD_CtlError(pdev, req);
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f002 fd9b 	bl	8008ee8 <USBD_CtlError>
      ret = USBD_FAIL;
 80063b2:	2303      	movs	r3, #3
 80063b4:	75fb      	strb	r3, [r7, #23]
      break;
 80063b6:	e000      	b.n	80063ba <USBD_MSC_Setup+0x1ca>
      break;
 80063b8:	bf00      	nop
    }
    break;
 80063ba:	e006      	b.n	80063ca <USBD_MSC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f002 fd92 	bl	8008ee8 <USBD_CtlError>
    ret = USBD_FAIL;
 80063c4:	2303      	movs	r3, #3
 80063c6:	75fb      	strb	r3, [r7, #23]
    break;
 80063c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80063ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f929 	bl	800663c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f94f 	bl	80066a8 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8006422:	4b03      	ldr	r3, [pc, #12]	@ (8006430 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	200001f8 	.word	0x200001f8

08006434 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006442:	4b03      	ldr	r3, [pc, #12]	@ (8006450 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	20000218 	.word	0x20000218

08006454 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2220      	movs	r2, #32
 8006460:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006462:	4b03      	ldr	r3, [pc, #12]	@ (8006470 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	20000238 	.word	0x20000238

08006474 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	220a      	movs	r2, #10
 8006480:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006482:	4b03      	ldr	r3, [pc, #12]	@ (8006490 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006484:	4618      	mov	r0, r3
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	20000258 	.word	0x20000258

08006494 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e004      	b.n	80064b2 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData_MSC = fops;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc

  return (uint8_t)USBD_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
	...

080064c0 <USBD_Update_MSC_DESC>:

void USBD_Update_MSC_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	4608      	mov	r0, r1
 80064ca:	4611      	mov	r1, r2
 80064cc:	461a      	mov	r2, r3
 80064ce:	4603      	mov	r3, r0
 80064d0:	70fb      	strb	r3, [r7, #3]
 80064d2:	460b      	mov	r3, r1
 80064d4:	70bb      	strb	r3, [r7, #2]
 80064d6:	4613      	mov	r3, r2
 80064d8:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	330b      	adds	r3, #11
 80064de:	78fa      	ldrb	r2, [r7, #3]
 80064e0:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3311      	adds	r3, #17
 80064e6:	7c3a      	ldrb	r2, [r7, #16]
 80064e8:	701a      	strb	r2, [r3, #0]
  desc[20] = in_ep;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3314      	adds	r3, #20
 80064ee:	78ba      	ldrb	r2, [r7, #2]
 80064f0:	701a      	strb	r2, [r3, #0]
  desc[27] = out_ep;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	331b      	adds	r3, #27
 80064f6:	787a      	ldrb	r2, [r7, #1]
 80064f8:	701a      	strb	r2, [r3, #0]

  MSC_IN_EP = in_ep;
 80064fa:	4a09      	ldr	r2, [pc, #36]	@ (8006520 <USBD_Update_MSC_DESC+0x60>)
 80064fc:	78bb      	ldrb	r3, [r7, #2]
 80064fe:	7013      	strb	r3, [r2, #0]
  MSC_OUT_EP = out_ep;
 8006500:	4a08      	ldr	r2, [pc, #32]	@ (8006524 <USBD_Update_MSC_DESC+0x64>)
 8006502:	787b      	ldrb	r3, [r7, #1]
 8006504:	7013      	strb	r3, [r2, #0]
  MSC_ITF_NBR = itf_no;
 8006506:	4a08      	ldr	r2, [pc, #32]	@ (8006528 <USBD_Update_MSC_DESC+0x68>)
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	7013      	strb	r3, [r2, #0]
  MSC_BOT_STR_DESC_IDX = str_idx;
 800650c:	4a07      	ldr	r2, [pc, #28]	@ (800652c <USBD_Update_MSC_DESC+0x6c>)
 800650e:	7c3b      	ldrb	r3, [r7, #16]
 8006510:	7013      	strb	r3, [r2, #0]
}
 8006512:	bf00      	nop
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	200001ba 	.word	0x200001ba
 8006524:	200001bb 	.word	0x200001bb
 8006528:	20009064 	.word	0x20009064
 800652c:	20009065 	.word	0x20009065

08006530 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 800653e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d02d      	beq.n	80065a2 <MSC_BOT_Init+0x72>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Init(0U);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2000      	movs	r0, #0
 8006574:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_OUT_EP);
 8006576:	4b0d      	ldr	r3, [pc, #52]	@ (80065ac <MSC_BOT_Init+0x7c>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f002 ff53 	bl	8009428 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_IN_EP);
 8006582:	4b0b      	ldr	r3, [pc, #44]	@ (80065b0 <MSC_BOT_Init+0x80>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f002 ff4d 	bl	8009428 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 800658e:	4b07      	ldr	r3, [pc, #28]	@ (80065ac <MSC_BOT_Init+0x7c>)
 8006590:	7819      	ldrb	r1, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8006598:	231f      	movs	r3, #31
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f003 f80d 	bl	80095ba <USBD_LL_PrepareReceive>
 80065a0:	e000      	b.n	80065a4 <MSC_BOT_Init+0x74>
    return;
 80065a2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	200001bb 	.word	0x200001bb
 80065b0:	200001ba 	.word	0x200001ba

080065b4 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 80065c2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d01b      	beq.n	8006602 <MSC_BOT_Reset+0x4e>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_IN_EP);
 80065d6:	4b0d      	ldr	r3, [pc, #52]	@ (800660c <MSC_BOT_Reset+0x58>)
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f002 ff61 	bl	80094a4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_OUT_EP);
 80065e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006610 <MSC_BOT_Reset+0x5c>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f002 ff5b 	bl	80094a4 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 80065ee:	4b08      	ldr	r3, [pc, #32]	@ (8006610 <MSC_BOT_Reset+0x5c>)
 80065f0:	7819      	ldrb	r1, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80065f8:	231f      	movs	r3, #31
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f002 ffdd 	bl	80095ba <USBD_LL_PrepareReceive>
 8006600:	e000      	b.n	8006604 <MSC_BOT_Reset+0x50>
    return;
 8006602:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	200001ba 	.word	0x200001ba
 8006610:	200001bb 	.word	0x200001bb

08006614 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8006622:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	721a      	strb	r2, [r3, #8]
  }
}
 8006630:	bf00      	nop
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 800664e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d020      	beq.n	8006698 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	7a1b      	ldrb	r3, [r3, #8]
 800665a:	2b02      	cmp	r3, #2
 800665c:	d005      	beq.n	800666a <MSC_BOT_DataIn+0x2e>
 800665e:	2b02      	cmp	r3, #2
 8006660:	db1c      	blt.n	800669c <MSC_BOT_DataIn+0x60>
 8006662:	3b03      	subs	r3, #3
 8006664:	2b01      	cmp	r3, #1
 8006666:	d819      	bhi.n	800669c <MSC_BOT_DataIn+0x60>
 8006668:	e011      	b.n	800668e <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8006676:	461a      	mov	r2, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f9b1 	bl	80069e0 <SCSI_ProcessCmd>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	da0d      	bge.n	80066a0 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006684:	2101      	movs	r1, #1
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f900 	bl	800688c <MSC_BOT_SendCSW>
      }
      break;
 800668c:	e008      	b.n	80066a0 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800668e:	2100      	movs	r1, #0
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f8fb 	bl	800688c <MSC_BOT_SendCSW>
      break;
 8006696:	e004      	b.n	80066a2 <MSC_BOT_DataIn+0x66>
    return;
 8006698:	bf00      	nop
 800669a:	e002      	b.n	80066a2 <MSC_BOT_DataIn+0x66>

    default:
      break;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <MSC_BOT_DataIn+0x66>
      break;
 80066a0:	bf00      	nop
  }
}
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 80066ba:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d01c      	beq.n	80066fc <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	7a1b      	ldrb	r3, [r3, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <MSC_BOT_DataOut+0x28>
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d004      	beq.n	80066d8 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80066ce:	e018      	b.n	8006702 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f819 	bl	8006708 <MSC_BOT_CBW_Decode>
      break;
 80066d6:	e014      	b.n	8006702 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 80066e4:	461a      	mov	r2, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f97a 	bl	80069e0 <SCSI_ProcessCmd>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	da06      	bge.n	8006700 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80066f2:	2101      	movs	r1, #1
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f8c9 	bl	800688c <MSC_BOT_SendCSW>
      break;
 80066fa:	e001      	b.n	8006700 <MSC_BOT_DataOut+0x58>
    return;
 80066fc:	bf00      	nop
 80066fe:	e000      	b.n	8006702 <MSC_BOT_DataOut+0x5a>
      break;
 8006700:	bf00      	nop
  }
}
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8006716:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d079      	beq.n	8006812 <MSC_BOT_CBW_Decode+0x10a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 8006736:	4b3a      	ldr	r3, [pc, #232]	@ (8006820 <MSC_BOT_CBW_Decode+0x118>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f002 ff5d 	bl	80095fc <USBD_LL_GetRxDataSize>
 8006742:	4603      	mov	r3, r0
 8006744:	2b1f      	cmp	r3, #31
 8006746:	d114      	bne.n	8006772 <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 800674e:	4a35      	ldr	r2, [pc, #212]	@ (8006824 <MSC_BOT_CBW_Decode+0x11c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d10e      	bne.n	8006772 <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800675a:	2b01      	cmp	r3, #1
 800675c:	d809      	bhi.n	8006772 <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bCBLength > 16U))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800676e:	2b10      	cmp	r3, #16
 8006770:	d90e      	bls.n	8006790 <MSC_BOT_CBW_Decode+0x88>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006778:	2320      	movs	r3, #32
 800677a:	2205      	movs	r2, #5
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fdda 	bl	8007336 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2202      	movs	r2, #2
 8006786:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f8b5 	bl	80068f8 <MSC_BOT_Abort>
 800678e:	e043      	b.n	8006818 <MSC_BOT_CBW_Decode+0x110>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800679c:	461a      	mov	r2, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f91e 	bl	80069e0 <SCSI_ProcessCmd>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	da0c      	bge.n	80067c4 <MSC_BOT_CBW_Decode+0xbc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	7a1b      	ldrb	r3, [r3, #8]
 80067ae:	2b05      	cmp	r3, #5
 80067b0:	d104      	bne.n	80067bc <MSC_BOT_CBW_Decode+0xb4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80067b2:	2101      	movs	r1, #1
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f869 	bl	800688c <MSC_BOT_SendCSW>
 80067ba:	e02d      	b.n	8006818 <MSC_BOT_CBW_Decode+0x110>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f89b 	bl	80068f8 <MSC_BOT_Abort>
 80067c2:	e029      	b.n	8006818 <MSC_BOT_CBW_Decode+0x110>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	7a1b      	ldrb	r3, [r3, #8]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d024      	beq.n	8006816 <MSC_BOT_CBW_Decode+0x10e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d020      	beq.n	8006816 <MSC_BOT_CBW_Decode+0x10e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d01c      	beq.n	8006816 <MSC_BOT_CBW_Decode+0x10e>
    {
      if (hmsc->bot_data_length > 0U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d009      	beq.n	80067f8 <MSC_BOT_CBW_Decode+0xf0>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f103 0110 	add.w	r1, r3, #16
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	461a      	mov	r2, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f819 	bl	8006828 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80067f6:	e00f      	b.n	8006818 <MSC_BOT_CBW_Decode+0x110>
      }
      else if (hmsc->bot_data_length == 0U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <MSC_BOT_CBW_Decode+0x102>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006800:	2100      	movs	r1, #0
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f842 	bl	800688c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006808:	e006      	b.n	8006818 <MSC_BOT_CBW_Decode+0x110>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f874 	bl	80068f8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8006810:	e002      	b.n	8006818 <MSC_BOT_CBW_Decode+0x110>
    return;
 8006812:	bf00      	nop
 8006814:	e000      	b.n	8006818 <MSC_BOT_CBW_Decode+0x110>
      }
    }
    else
    {
      return;
 8006816:	bf00      	nop
    }
  }
}
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	200001bb 	.word	0x200001bb
 8006824:	43425355 	.word	0x43425355

08006828 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 800683a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	4293      	cmp	r3, r2
 8006846:	bf28      	it	cs
 8006848:	4613      	movcs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d016      	beq.n	8006880 <MSC_BOT_SendData+0x58>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	1ad2      	subs	r2, r2, r3
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2204      	movs	r2, #4
 800686e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, pbuf, length);
 8006870:	4b05      	ldr	r3, [pc, #20]	@ (8006888 <MSC_BOT_SendData+0x60>)
 8006872:	7819      	ldrb	r1, [r3, #0]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f002 fe7d 	bl	8009578 <USBD_LL_Transmit>
 800687e:	e000      	b.n	8006882 <MSC_BOT_SendData+0x5a>
    return;
 8006880:	bf00      	nop
}
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	200001ba 	.word	0x200001ba

0800688c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 800689e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d01d      	beq.n	80068e2 <MSC_BOT_SendCSW+0x56>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4a10      	ldr	r2, [pc, #64]	@ (80068ec <MSC_BOT_SendCSW+0x60>)
 80068aa:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	78fa      	ldrb	r2, [r7, #3]
 80068b2:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, (uint8_t *)&hmsc->csw,
 80068bc:	4b0c      	ldr	r3, [pc, #48]	@ (80068f0 <MSC_BOT_SendCSW+0x64>)
 80068be:	7819      	ldrb	r1, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 80068c6:	230d      	movs	r3, #13
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f002 fe55 	bl	8009578 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 80068ce:	4b09      	ldr	r3, [pc, #36]	@ (80068f4 <MSC_BOT_SendCSW+0x68>)
 80068d0:	7819      	ldrb	r1, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80068d8:	231f      	movs	r3, #31
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f002 fe6d 	bl	80095ba <USBD_LL_PrepareReceive>
 80068e0:	e000      	b.n	80068e4 <MSC_BOT_SendCSW+0x58>
    return;
 80068e2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	53425355 	.word	0x53425355
 80068f0:	200001ba 	.word	0x200001ba
 80068f4:	200001bb 	.word	0x200001bb

080068f8 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8006906:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d02a      	beq.n	8006964 <MSC_BOT_Abort+0x6c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10e      	bne.n	8006936 <MSC_BOT_Abort+0x3e>
      (hmsc->cbw.dDataLength != 0U) &&
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <MSC_BOT_Abort+0x3e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8006926:	2b00      	cmp	r3, #0
 8006928:	d105      	bne.n	8006936 <MSC_BOT_Abort+0x3e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 800692a:	4b10      	ldr	r3, [pc, #64]	@ (800696c <MSC_BOT_Abort+0x74>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f002 fd98 	bl	8009466 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 8006936:	4b0e      	ldr	r3, [pc, #56]	@ (8006970 <MSC_BOT_Abort+0x78>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f002 fd92 	bl	8009466 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	7a5b      	ldrb	r3, [r3, #9]
 8006946:	2b02      	cmp	r3, #2
 8006948:	d10d      	bne.n	8006966 <MSC_BOT_Abort+0x6e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 800694a:	4b09      	ldr	r3, [pc, #36]	@ (8006970 <MSC_BOT_Abort+0x78>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f002 fd88 	bl	8009466 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 8006956:	4b05      	ldr	r3, [pc, #20]	@ (800696c <MSC_BOT_Abort+0x74>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f002 fd82 	bl	8009466 <USBD_LL_StallEP>
 8006962:	e000      	b.n	8006966 <MSC_BOT_Abort+0x6e>
    return;
 8006964:	bf00      	nop
  }
}
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	200001bb 	.word	0x200001bb
 8006970:	200001ba 	.word	0x200001ba

08006974 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8006986:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d01d      	beq.n	80069ca <MSC_BOT_CplClrFeature+0x56>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	7a5b      	ldrb	r3, [r3, #9]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d10c      	bne.n	80069b0 <MSC_BOT_CplClrFeature+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 8006996:	4b10      	ldr	r3, [pc, #64]	@ (80069d8 <MSC_BOT_CplClrFeature+0x64>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f002 fd62 	bl	8009466 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 80069a2:	4b0e      	ldr	r3, [pc, #56]	@ (80069dc <MSC_BOT_CplClrFeature+0x68>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f002 fd5c 	bl	8009466 <USBD_LL_StallEP>
 80069ae:	e00f      	b.n	80069d0 <MSC_BOT_CplClrFeature+0x5c>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80069b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	da0a      	bge.n	80069ce <MSC_BOT_CplClrFeature+0x5a>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	7a5b      	ldrb	r3, [r3, #9]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d006      	beq.n	80069ce <MSC_BOT_CplClrFeature+0x5a>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80069c0:	2101      	movs	r1, #1
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff ff62 	bl	800688c <MSC_BOT_SendCSW>
 80069c8:	e002      	b.n	80069d0 <MSC_BOT_CplClrFeature+0x5c>
    return;
 80069ca:	bf00      	nop
 80069cc:	e000      	b.n	80069d0 <MSC_BOT_CplClrFeature+0x5c>
  }
  else
  {
    return;
 80069ce:	bf00      	nop
  }
}
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	200001ba 	.word	0x200001ba
 80069dc:	200001bb 	.word	0x200001bb

080069e0 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	460b      	mov	r3, r1
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 80069f4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d102      	bne.n	8006a02 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 80069fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a00:	e168      	b.n	8006cd4 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2baa      	cmp	r3, #170	@ 0xaa
 8006a08:	f000 8144 	beq.w	8006c94 <SCSI_ProcessCmd+0x2b4>
 8006a0c:	2baa      	cmp	r3, #170	@ 0xaa
 8006a0e:	f300 8153 	bgt.w	8006cb8 <SCSI_ProcessCmd+0x2d8>
 8006a12:	2ba8      	cmp	r3, #168	@ 0xa8
 8006a14:	f000 812c 	beq.w	8006c70 <SCSI_ProcessCmd+0x290>
 8006a18:	2ba8      	cmp	r3, #168	@ 0xa8
 8006a1a:	f300 814d 	bgt.w	8006cb8 <SCSI_ProcessCmd+0x2d8>
 8006a1e:	2b5a      	cmp	r3, #90	@ 0x5a
 8006a20:	f300 80c0 	bgt.w	8006ba4 <SCSI_ProcessCmd+0x1c4>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f2c0 8147 	blt.w	8006cb8 <SCSI_ProcessCmd+0x2d8>
 8006a2a:	2b5a      	cmp	r3, #90	@ 0x5a
 8006a2c:	f200 8144 	bhi.w	8006cb8 <SCSI_ProcessCmd+0x2d8>
 8006a30:	a201      	add	r2, pc, #4	@ (adr r2, 8006a38 <SCSI_ProcessCmd+0x58>)
 8006a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a36:	bf00      	nop
 8006a38:	08006bab 	.word	0x08006bab
 8006a3c:	08006cb9 	.word	0x08006cb9
 8006a40:	08006cb9 	.word	0x08006cb9
 8006a44:	08006bbd 	.word	0x08006bbd
 8006a48:	08006cb9 	.word	0x08006cb9
 8006a4c:	08006cb9 	.word	0x08006cb9
 8006a50:	08006cb9 	.word	0x08006cb9
 8006a54:	08006cb9 	.word	0x08006cb9
 8006a58:	08006cb9 	.word	0x08006cb9
 8006a5c:	08006cb9 	.word	0x08006cb9
 8006a60:	08006cb9 	.word	0x08006cb9
 8006a64:	08006cb9 	.word	0x08006cb9
 8006a68:	08006cb9 	.word	0x08006cb9
 8006a6c:	08006cb9 	.word	0x08006cb9
 8006a70:	08006cb9 	.word	0x08006cb9
 8006a74:	08006cb9 	.word	0x08006cb9
 8006a78:	08006cb9 	.word	0x08006cb9
 8006a7c:	08006cb9 	.word	0x08006cb9
 8006a80:	08006bcf 	.word	0x08006bcf
 8006a84:	08006cb9 	.word	0x08006cb9
 8006a88:	08006cb9 	.word	0x08006cb9
 8006a8c:	08006cb9 	.word	0x08006cb9
 8006a90:	08006cb9 	.word	0x08006cb9
 8006a94:	08006cb9 	.word	0x08006cb9
 8006a98:	08006cb9 	.word	0x08006cb9
 8006a9c:	08006cb9 	.word	0x08006cb9
 8006aa0:	08006c05 	.word	0x08006c05
 8006aa4:	08006be1 	.word	0x08006be1
 8006aa8:	08006cb9 	.word	0x08006cb9
 8006aac:	08006cb9 	.word	0x08006cb9
 8006ab0:	08006bf3 	.word	0x08006bf3
 8006ab4:	08006cb9 	.word	0x08006cb9
 8006ab8:	08006cb9 	.word	0x08006cb9
 8006abc:	08006cb9 	.word	0x08006cb9
 8006ac0:	08006cb9 	.word	0x08006cb9
 8006ac4:	08006c29 	.word	0x08006c29
 8006ac8:	08006cb9 	.word	0x08006cb9
 8006acc:	08006c3b 	.word	0x08006c3b
 8006ad0:	08006cb9 	.word	0x08006cb9
 8006ad4:	08006cb9 	.word	0x08006cb9
 8006ad8:	08006c5f 	.word	0x08006c5f
 8006adc:	08006cb9 	.word	0x08006cb9
 8006ae0:	08006c83 	.word	0x08006c83
 8006ae4:	08006cb9 	.word	0x08006cb9
 8006ae8:	08006cb9 	.word	0x08006cb9
 8006aec:	08006cb9 	.word	0x08006cb9
 8006af0:	08006cb9 	.word	0x08006cb9
 8006af4:	08006ca7 	.word	0x08006ca7
 8006af8:	08006cb9 	.word	0x08006cb9
 8006afc:	08006cb9 	.word	0x08006cb9
 8006b00:	08006cb9 	.word	0x08006cb9
 8006b04:	08006cb9 	.word	0x08006cb9
 8006b08:	08006cb9 	.word	0x08006cb9
 8006b0c:	08006cb9 	.word	0x08006cb9
 8006b10:	08006cb9 	.word	0x08006cb9
 8006b14:	08006cb9 	.word	0x08006cb9
 8006b18:	08006cb9 	.word	0x08006cb9
 8006b1c:	08006cb9 	.word	0x08006cb9
 8006b20:	08006cb9 	.word	0x08006cb9
 8006b24:	08006cb9 	.word	0x08006cb9
 8006b28:	08006cb9 	.word	0x08006cb9
 8006b2c:	08006cb9 	.word	0x08006cb9
 8006b30:	08006cb9 	.word	0x08006cb9
 8006b34:	08006cb9 	.word	0x08006cb9
 8006b38:	08006cb9 	.word	0x08006cb9
 8006b3c:	08006cb9 	.word	0x08006cb9
 8006b40:	08006cb9 	.word	0x08006cb9
 8006b44:	08006cb9 	.word	0x08006cb9
 8006b48:	08006cb9 	.word	0x08006cb9
 8006b4c:	08006cb9 	.word	0x08006cb9
 8006b50:	08006cb9 	.word	0x08006cb9
 8006b54:	08006cb9 	.word	0x08006cb9
 8006b58:	08006cb9 	.word	0x08006cb9
 8006b5c:	08006cb9 	.word	0x08006cb9
 8006b60:	08006cb9 	.word	0x08006cb9
 8006b64:	08006cb9 	.word	0x08006cb9
 8006b68:	08006cb9 	.word	0x08006cb9
 8006b6c:	08006cb9 	.word	0x08006cb9
 8006b70:	08006cb9 	.word	0x08006cb9
 8006b74:	08006cb9 	.word	0x08006cb9
 8006b78:	08006cb9 	.word	0x08006cb9
 8006b7c:	08006cb9 	.word	0x08006cb9
 8006b80:	08006cb9 	.word	0x08006cb9
 8006b84:	08006cb9 	.word	0x08006cb9
 8006b88:	08006cb9 	.word	0x08006cb9
 8006b8c:	08006cb9 	.word	0x08006cb9
 8006b90:	08006cb9 	.word	0x08006cb9
 8006b94:	08006cb9 	.word	0x08006cb9
 8006b98:	08006cb9 	.word	0x08006cb9
 8006b9c:	08006cb9 	.word	0x08006cb9
 8006ba0:	08006c17 	.word	0x08006c17
 8006ba4:	2b9e      	cmp	r3, #158	@ 0x9e
 8006ba6:	d051      	beq.n	8006c4c <SCSI_ProcessCmd+0x26c>
 8006ba8:	e086      	b.n	8006cb8 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8006baa:	7afb      	ldrb	r3, [r7, #11]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f893 	bl	8006cdc <SCSI_TestUnitReady>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8006bba:	e089      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8006bbc:	7afb      	ldrb	r3, [r7, #11]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 fb38 	bl	8007238 <SCSI_RequestSense>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	75fb      	strb	r3, [r7, #23]
      break;
 8006bcc:	e080      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8006bce:	7afb      	ldrb	r3, [r7, #11]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 f8d1 	bl	8006d7c <SCSI_Inquiry>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bde:	e077      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8006be0:	7afb      	ldrb	r3, [r7, #11]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	4619      	mov	r1, r3
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 fbec 	bl	80073c4 <SCSI_StartStopUnit>
 8006bec:	4603      	mov	r3, r0
 8006bee:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf0:	e06e      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8006bf2:	7afb      	ldrb	r3, [r7, #11]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 fc34 	bl	8007466 <SCSI_AllowPreventRemovable>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	75fb      	strb	r3, [r7, #23]
      break;
 8006c02:	e065      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8006c04:	7afb      	ldrb	r3, [r7, #11]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fabc 	bl	8007188 <SCSI_ModeSense6>
 8006c10:	4603      	mov	r3, r0
 8006c12:	75fb      	strb	r3, [r7, #23]
      break;
 8006c14:	e05c      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8006c16:	7afb      	ldrb	r3, [r7, #11]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 fadf 	bl	80071e0 <SCSI_ModeSense10>
 8006c22:	4603      	mov	r3, r0
 8006c24:	75fb      	strb	r3, [r7, #23]
      break;
 8006c26:	e053      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8006c28:	7afb      	ldrb	r3, [r7, #11]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 fa37 	bl	80070a2 <SCSI_ReadFormatCapacity>
 8006c34:	4603      	mov	r3, r0
 8006c36:	75fb      	strb	r3, [r7, #23]
      break;
 8006c38:	e04a      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8006c3a:	7afb      	ldrb	r3, [r7, #11]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f90f 	bl	8006e64 <SCSI_ReadCapacity10>
 8006c46:	4603      	mov	r3, r0
 8006c48:	75fb      	strb	r3, [r7, #23]
      break;
 8006c4a:	e041      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8006c4c:	7afb      	ldrb	r3, [r7, #11]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	4619      	mov	r1, r3
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f97b 	bl	8006f4e <SCSI_ReadCapacity16>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c5c:	e038      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8006c5e:	7afb      	ldrb	r3, [r7, #11]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	4619      	mov	r1, r3
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 fc27 	bl	80074b8 <SCSI_Read10>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c6e:	e02f      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8006c70:	7afb      	ldrb	r3, [r7, #11]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	4619      	mov	r1, r3
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 fcbe 	bl	80075f8 <SCSI_Read12>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c80:	e026      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8006c82:	7afb      	ldrb	r3, [r7, #11]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	4619      	mov	r1, r3
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 fd61 	bl	8007750 <SCSI_Write10>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	75fb      	strb	r3, [r7, #23]
      break;
 8006c92:	e01d      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8006c94:	7afb      	ldrb	r3, [r7, #11]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 fe20 	bl	80078e0 <SCSI_Write12>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca4:	e014      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8006ca6:	7afb      	ldrb	r3, [r7, #11]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	4619      	mov	r1, r3
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 feef 	bl	8007a90 <SCSI_Verify10>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb6:	e00b      	b.n	8006cd0 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006cb8:	7af9      	ldrb	r1, [r7, #11]
 8006cba:	2320      	movs	r3, #32
 8006cbc:	2205      	movs	r2, #5
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 fb39 	bl	8007336 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8006cca:	23ff      	movs	r3, #255	@ 0xff
 8006ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cce:	bf00      	nop
  }

  return ret;
 8006cd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8006cf0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d102      	bne.n	8006cfe <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8006cf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006cfc:	e03a      	b.n	8006d74 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00a      	beq.n	8006d1e <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006d0e:	2320      	movs	r3, #32
 8006d10:	2205      	movs	r2, #5
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 fb0f 	bl	8007336 <SCSI_SenseCode>

    return -1;
 8006d18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d1c:	e02a      	b.n	8006d74 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d10b      	bne.n	8006d40 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006d28:	7af9      	ldrb	r1, [r7, #11]
 8006d2a:	233a      	movs	r3, #58	@ 0x3a
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 fb01 	bl	8007336 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2205      	movs	r2, #5
 8006d38:	721a      	strb	r2, [r3, #8]
    return -1;
 8006d3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d3e:	e019      	b.n	8006d74 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	7afa      	ldrb	r2, [r7, #11]
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	4798      	blx	r3
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00b      	beq.n	8006d6c <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006d54:	7af9      	ldrb	r1, [r7, #11]
 8006d56:	233a      	movs	r3, #58	@ 0x3a
 8006d58:	2202      	movs	r2, #2
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 faeb 	bl	8007336 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	2205      	movs	r2, #5
 8006d64:	721a      	strb	r2, [r3, #8]

    return -1;
 8006d66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d6a:	e003      	b.n	8006d74 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	60da      	str	r2, [r3, #12]

  return 0;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	460b      	mov	r3, r1
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8006d90:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d102      	bne.n	8006d9e <SCSI_Inquiry+0x22>
  {
    return -1;
 8006d98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d9c:	e059      	b.n	8006e52 <SCSI_Inquiry+0xd6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006dae:	2320      	movs	r3, #32
 8006db0:	2205      	movs	r2, #5
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 fabf 	bl	8007336 <SCSI_SenseCode>
    return -1;
 8006db8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006dbc:	e049      	b.n	8006e52 <SCSI_Inquiry+0xd6>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d020      	beq.n	8006e0e <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	3302      	adds	r3, #2
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d105      	bne.n	8006de2 <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8006dd6:	2206      	movs	r2, #6
 8006dd8:	4920      	ldr	r1, [pc, #128]	@ (8006e5c <SCSI_Inquiry+0xe0>)
 8006dda:	69b8      	ldr	r0, [r7, #24]
 8006ddc:	f000 ffc2 	bl	8007d64 <SCSI_UpdateBotData>
 8006de0:	e036      	b.n	8006e50 <SCSI_Inquiry+0xd4>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3302      	adds	r3, #2
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b80      	cmp	r3, #128	@ 0x80
 8006dea:	d105      	bne.n	8006df8 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8006dec:	2208      	movs	r2, #8
 8006dee:	491c      	ldr	r1, [pc, #112]	@ (8006e60 <SCSI_Inquiry+0xe4>)
 8006df0:	69b8      	ldr	r0, [r7, #24]
 8006df2:	f000 ffb7 	bl	8007d64 <SCSI_UpdateBotData>
 8006df6:	e02b      	b.n	8006e50 <SCSI_Inquiry+0xd4>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006dfe:	2324      	movs	r3, #36	@ 0x24
 8006e00:	2205      	movs	r2, #5
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 fa97 	bl	8007336 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8006e08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e0c:	e021      	b.n	8006e52 <SCSI_Inquiry+0xd6>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData_MSC)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 8006e14:	69d9      	ldr	r1, [r3, #28]
 8006e16:	7afa      	ldrb	r2, [r7, #11]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	3304      	adds	r3, #4
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	3305      	adds	r3, #5
 8006e2c:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3304      	adds	r3, #4
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	461a      	mov	r2, r3
 8006e36:	8bfb      	ldrh	r3, [r7, #30]
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d303      	bcc.n	8006e44 <SCSI_Inquiry+0xc8>
    {
      len = params[4];
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3304      	adds	r3, #4
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8006e44:	8bfb      	ldrh	r3, [r7, #30]
 8006e46:	461a      	mov	r2, r3
 8006e48:	6979      	ldr	r1, [r7, #20]
 8006e4a:	69b8      	ldr	r0, [r7, #24]
 8006e4c:	f000 ff8a 	bl	8007d64 <SCSI_UpdateBotData>
  }

  return 0;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3720      	adds	r7, #32
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000264 	.word	0x20000264
 8006e60:	2000026c 	.word	0x2000026c

08006e64 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8006e78:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d102      	bne.n	8006e86 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8006e80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e84:	e05f      	b.n	8006f46 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8006e9a:	7af8      	ldrb	r0, [r7, #11]
 8006e9c:	4798      	blx	r3
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006ea2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d104      	bne.n	8006eb4 <SCSI_ReadCapacity10+0x50>
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d108      	bne.n	8006ec6 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006eb4:	7af9      	ldrb	r1, [r7, #11]
 8006eb6:	233a      	movs	r3, #58	@ 0x3a
 8006eb8:	2202      	movs	r2, #2
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fa3b 	bl	8007336 <SCSI_SenseCode>
    return -1;
 8006ec0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ec4:	e03f      	b.n	8006f46 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	0e1b      	lsrs	r3, r3, #24
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8006edc:	3b01      	subs	r3, #1
 8006ede:	0c1b      	lsrs	r3, r3, #16
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8006eec:	3b01      	subs	r3, #1
 8006eee:	0a1b      	lsrs	r3, r3, #8
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	3b01      	subs	r3, #1
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006f0c:	161b      	asrs	r3, r3, #24
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006f1a:	141b      	asrs	r3, r3, #16
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006f28:	0a1b      	lsrs	r3, r3, #8
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2208      	movs	r2, #8
 8006f42:	60da      	str	r2, [r3, #12]

  return 0;
 8006f44:	2300      	movs	r3, #0

}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b088      	sub	sp, #32
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	460b      	mov	r3, r1
 8006f58:	607a      	str	r2, [r7, #4]
 8006f5a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8006f62:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d102      	bne.n	8006f70 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8006f6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f6e:	e094      	b.n	800709a <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8006f84:	7af8      	ldrb	r0, [r7, #11]
 8006f86:	4798      	blx	r3
 8006f88:	4603      	mov	r3, r0
 8006f8a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006f8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d104      	bne.n	8006f9e <SCSI_ReadCapacity16+0x50>
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d108      	bne.n	8006fb0 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006f9e:	7af9      	ldrb	r1, [r7, #11]
 8006fa0:	233a      	movs	r3, #58	@ 0x3a
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f9c6 	bl	8007336 <SCSI_SenseCode>
    return -1;
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006fae:	e074      	b.n	800709a <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	330a      	adds	r3, #10
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	330b      	adds	r3, #11
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006fc0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	330c      	adds	r3, #12
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8006fca:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	320d      	adds	r2, #13
 8006fd0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8006fd2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	77fb      	strb	r3, [r7, #31]
 8006fdc:	e007      	b.n	8006fee <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8006fde:	7ffb      	ldrb	r3, [r7, #31]
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006fe8:	7ffb      	ldrb	r3, [r7, #31]
 8006fea:	3301      	adds	r3, #1
 8006fec:	77fb      	strb	r3, [r7, #31]
 8006fee:	7ffa      	ldrb	r2, [r7, #31]
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d3f2      	bcc.n	8006fde <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8006ffe:	3b01      	subs	r3, #1
 8007000:	0e1b      	lsrs	r3, r3, #24
 8007002:	b2da      	uxtb	r2, r3
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800700e:	3b01      	subs	r3, #1
 8007010:	0c1b      	lsrs	r3, r3, #16
 8007012:	b2da      	uxtb	r2, r3
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800701e:	3b01      	subs	r3, #1
 8007020:	0a1b      	lsrs	r3, r3, #8
 8007022:	b2da      	uxtb	r2, r3
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800702e:	b2db      	uxtb	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b2da      	uxtb	r2, r3
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800703e:	161b      	asrs	r3, r3, #24
 8007040:	b2da      	uxtb	r2, r3
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800704c:	141b      	asrs	r3, r3, #16
 800704e:	b2da      	uxtb	r2, r3
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800705a:	0a1b      	lsrs	r3, r3, #8
 800705c:	b29b      	uxth	r3, r3
 800705e:	b2da      	uxtb	r2, r3
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800706a:	b2da      	uxtb	r2, r3
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	330a      	adds	r3, #10
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	330b      	adds	r3, #11
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007080:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	330c      	adds	r3, #12
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800708a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	320d      	adds	r2, #13
 8007090:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007092:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	60da      	str	r2, [r3, #12]

  return 0;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3720      	adds	r7, #32
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b088      	sub	sp, #32
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	460b      	mov	r3, r1
 80070ac:	607a      	str	r2, [r7, #4]
 80070ae:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 80070b6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d102      	bne.n	80070c4 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 80070be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070c2:	e05c      	b.n	800717e <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &blk_nbr, &blk_size);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f107 0214 	add.w	r2, r7, #20
 80070d0:	f107 0110 	add.w	r1, r7, #16
 80070d4:	7af8      	ldrb	r0, [r7, #11]
 80070d6:	4798      	blx	r3
 80070d8:	4603      	mov	r3, r0
 80070da:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80070dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d104      	bne.n	80070ee <SCSI_ReadFormatCapacity+0x4c>
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d108      	bne.n	8007100 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80070ee:	7af9      	ldrb	r1, [r7, #11]
 80070f0:	233a      	movs	r3, #58	@ 0x3a
 80070f2:	2202      	movs	r2, #2
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 f91e 	bl	8007336 <SCSI_SenseCode>
    return -1;
 80070fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070fe:	e03e      	b.n	800717e <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8007100:	2300      	movs	r3, #0
 8007102:	83fb      	strh	r3, [r7, #30]
 8007104:	e007      	b.n	8007116 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8007106:	8bfb      	ldrh	r3, [r7, #30]
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	4413      	add	r3, r2
 800710c:	2200      	movs	r2, #0
 800710e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8007110:	8bfb      	ldrh	r3, [r7, #30]
 8007112:	3301      	adds	r3, #1
 8007114:	83fb      	strh	r3, [r7, #30]
 8007116:	8bfb      	ldrh	r3, [r7, #30]
 8007118:	2b0b      	cmp	r3, #11
 800711a:	d9f4      	bls.n	8007106 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	2208      	movs	r2, #8
 8007120:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	3b01      	subs	r3, #1
 8007126:	0e1b      	lsrs	r3, r3, #24
 8007128:	b2da      	uxtb	r2, r3
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	3b01      	subs	r3, #1
 8007132:	0c1b      	lsrs	r3, r3, #16
 8007134:	b2da      	uxtb	r2, r3
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	3b01      	subs	r3, #1
 800713e:	0a1b      	lsrs	r3, r3, #8
 8007140:	b2da      	uxtb	r2, r3
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	3b01      	subs	r3, #1
 800714c:	b2da      	uxtb	r2, r3
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	2202      	movs	r2, #2
 8007156:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007158:	8abb      	ldrh	r3, [r7, #20]
 800715a:	141b      	asrs	r3, r3, #16
 800715c:	b2da      	uxtb	r2, r3
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007162:	8abb      	ldrh	r3, [r7, #20]
 8007164:	0a1b      	lsrs	r3, r3, #8
 8007166:	b29b      	uxth	r3, r3
 8007168:	b2da      	uxtb	r2, r3
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800716e:	8abb      	ldrh	r3, [r7, #20]
 8007170:	b2da      	uxtb	r2, r3
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	220c      	movs	r2, #12
 800717a:	60da      	str	r2, [r3, #12]

  return 0;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3720      	adds	r7, #32
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	460b      	mov	r3, r1
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 800719c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800719e:	2317      	movs	r3, #23
 80071a0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <SCSI_ModeSense6+0x26>
  {
    return -1;
 80071a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071ac:	e011      	b.n	80071d2 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3304      	adds	r3, #4
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	461a      	mov	r2, r3
 80071b6:	8afb      	ldrh	r3, [r7, #22]
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d303      	bcc.n	80071c4 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3304      	adds	r3, #4
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80071c4:	8afb      	ldrh	r3, [r7, #22]
 80071c6:	461a      	mov	r2, r3
 80071c8:	4904      	ldr	r1, [pc, #16]	@ (80071dc <SCSI_ModeSense6+0x54>)
 80071ca:	6938      	ldr	r0, [r7, #16]
 80071cc:	f000 fdca 	bl	8007d64 <SCSI_UpdateBotData>

  return 0;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20000274 	.word	0x20000274

080071e0 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	460b      	mov	r3, r1
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 80071f4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80071f6:	231b      	movs	r3, #27
 80071f8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d102      	bne.n	8007206 <SCSI_ModeSense10+0x26>
  {
    return -1;
 8007200:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007204:	e011      	b.n	800722a <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3308      	adds	r3, #8
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	461a      	mov	r2, r3
 800720e:	8afb      	ldrh	r3, [r7, #22]
 8007210:	4293      	cmp	r3, r2
 8007212:	d303      	bcc.n	800721c <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3308      	adds	r3, #8
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800721c:	8afb      	ldrh	r3, [r7, #22]
 800721e:	461a      	mov	r2, r3
 8007220:	4904      	ldr	r1, [pc, #16]	@ (8007234 <SCSI_ModeSense10+0x54>)
 8007222:	6938      	ldr	r0, [r7, #16]
 8007224:	f000 fd9e 	bl	8007d64 <SCSI_UpdateBotData>

  return 0;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	2000028c 	.word	0x2000028c

08007238 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	460b      	mov	r3, r1
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 800724c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d102      	bne.n	800725a <SCSI_RequestSense+0x22>
  {
    return -1;
 8007254:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007258:	e069      	b.n	800732e <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10a      	bne.n	800727a <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800726a:	2320      	movs	r3, #32
 800726c:	2205      	movs	r2, #5
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 f861 	bl	8007336 <SCSI_SenseCode>
    return -1;
 8007274:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007278:	e059      	b.n	800732e <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800727a:	2300      	movs	r3, #0
 800727c:	75fb      	strb	r3, [r7, #23]
 800727e:	e007      	b.n	8007290 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8007280:	7dfb      	ldrb	r3, [r7, #23]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	4413      	add	r3, r2
 8007286:	2200      	movs	r2, #0
 8007288:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	3301      	adds	r3, #1
 800728e:	75fb      	strb	r3, [r7, #23]
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	2b11      	cmp	r3, #17
 8007294:	d9f4      	bls.n	8007280 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	2270      	movs	r2, #112	@ 0x70
 800729a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	220c      	movs	r2, #12
 80072a0:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d02e      	beq.n	8007310 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80072b8:	461a      	mov	r2, r3
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	3248      	adds	r2, #72	@ 0x48
 80072be:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	3348      	adds	r3, #72	@ 0x48
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	4413      	add	r3, r2
 80072d4:	791a      	ldrb	r2, [r3, #4]
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	3348      	adds	r3, #72	@ 0x48
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	4413      	add	r3, r2
 80072e8:	795a      	ldrb	r2, [r3, #5]
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80072f4:	3301      	adds	r3, #1
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007304:	2b04      	cmp	r3, #4
 8007306:	d103      	bne.n	8007310 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2212      	movs	r2, #18
 8007314:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	3304      	adds	r3, #4
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b12      	cmp	r3, #18
 800731e:	d805      	bhi.n	800732c <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3304      	adds	r3, #4
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	4608      	mov	r0, r1
 8007340:	4611      	mov	r1, r2
 8007342:	461a      	mov	r2, r3
 8007344:	4603      	mov	r3, r0
 8007346:	70fb      	strb	r3, [r7, #3]
 8007348:	460b      	mov	r3, r1
 800734a:	70bb      	strb	r3, [r7, #2]
 800734c:	4613      	mov	r3, r2
 800734e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8007356:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d02c      	beq.n	80073b8 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007364:	461a      	mov	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3248      	adds	r2, #72	@ 0x48
 800736a:	78b9      	ldrb	r1, [r7, #2]
 800736c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	3348      	adds	r3, #72	@ 0x48
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	4413      	add	r3, r2
 800737e:	787a      	ldrb	r2, [r7, #1]
 8007380:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	3348      	adds	r3, #72	@ 0x48
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	4413      	add	r3, r2
 8007390:	2200      	movs	r2, #0
 8007392:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800739a:	3301      	adds	r3, #1
 800739c:	b2da      	uxtb	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d105      	bne.n	80073ba <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 80073b6:	e000      	b.n	80073ba <SCSI_SenseCode+0x84>
    return;
 80073b8:	bf00      	nop
  }
}
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	460b      	mov	r3, r1
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 80073d8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 80073e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073e4:	e03b      	b.n	800745e <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d10f      	bne.n	8007410 <SCSI_StartStopUnit+0x4c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3304      	adds	r3, #4
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d108      	bne.n	8007410 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80073fe:	7af9      	ldrb	r1, [r7, #11]
 8007400:	2324      	movs	r3, #36	@ 0x24
 8007402:	2205      	movs	r2, #5
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7ff ff96 	bl	8007336 <SCSI_SenseCode>

    return -1;
 800740a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800740e:	e026      	b.n	800745e <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3304      	adds	r3, #4
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	2b01      	cmp	r3, #1
 800741c:	d104      	bne.n	8007428 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8007426:	e016      	b.n	8007456 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3304      	adds	r3, #4
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d104      	bne.n	8007440 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2202      	movs	r2, #2
 800743a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800743e:	e00a      	b.n	8007456 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3304      	adds	r3, #4
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	2b03      	cmp	r3, #3
 800744c:	d103      	bne.n	8007456 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2200      	movs	r2, #0
 800745a:	60da      	str	r2, [r3, #12]

  return 0;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007466:	b480      	push	{r7}
 8007468:	b087      	sub	sp, #28
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	460b      	mov	r3, r1
 8007470:	607a      	str	r2, [r7, #4]
 8007472:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 800747a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d102      	bne.n	8007488 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 8007482:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007486:	e011      	b.n	80074ac <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3304      	adds	r3, #4
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d104      	bne.n	800749c <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800749a:	e003      	b.n	80074a4 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2200      	movs	r2, #0
 80074a8:	60da      	str	r2, [r3, #12]

  return 0;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	371c      	adds	r7, #28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	460b      	mov	r3, r1
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 80074cc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d102      	bne.n	80074da <SCSI_Read10+0x22>
  {
    return -1;
 80074d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074d8:	e08a      	b.n	80075f0 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	7a1b      	ldrb	r3, [r3, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d17c      	bne.n	80075dc <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80074e8:	b25b      	sxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	db0a      	blt.n	8007504 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80074f4:	2320      	movs	r3, #32
 80074f6:	2205      	movs	r2, #5
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff ff1c 	bl	8007336 <SCSI_SenseCode>
      return -1;
 80074fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007502:	e075      	b.n	80075f0 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800750a:	2b02      	cmp	r3, #2
 800750c:	d108      	bne.n	8007520 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800750e:	7af9      	ldrb	r1, [r7, #11]
 8007510:	233a      	movs	r3, #58	@ 0x3a
 8007512:	2202      	movs	r2, #2
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f7ff ff0e 	bl	8007336 <SCSI_SenseCode>

      return -1;
 800751a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800751e:	e067      	b.n	80075f0 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	7afa      	ldrb	r2, [r7, #11]
 800752a:	4610      	mov	r0, r2
 800752c:	4798      	blx	r3
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d008      	beq.n	8007546 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007534:	7af9      	ldrb	r1, [r7, #11]
 8007536:	233a      	movs	r3, #58	@ 0x3a
 8007538:	2202      	movs	r2, #2
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff fefb 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007540:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007544:	e054      	b.n	80075f0 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3302      	adds	r3, #2
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3303      	adds	r3, #3
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007556:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3304      	adds	r3, #4
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007560:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	3205      	adds	r2, #5
 8007566:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007568:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3307      	adds	r3, #7
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	021b      	lsls	r3, r3, #8
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	3208      	adds	r2, #8
 800757c:	7812      	ldrb	r2, [r2, #0]
 800757e:	431a      	orrs	r2, r3
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007592:	7af9      	ldrb	r1, [r7, #11]
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fab4 	bl	8007b02 <SCSI_CheckAddressRange>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	da02      	bge.n	80075a6 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80075a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075a4:	e024      	b.n	80075f0 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80075b2:	6979      	ldr	r1, [r7, #20]
 80075b4:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 80075b8:	fb01 f303 	mul.w	r3, r1, r3
 80075bc:	429a      	cmp	r2, r3
 80075be:	d00a      	beq.n	80075d6 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80075c6:	2320      	movs	r3, #32
 80075c8:	2205      	movs	r2, #5
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f7ff feb3 	bl	8007336 <SCSI_SenseCode>
      return -1;
 80075d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075d4:	e00c      	b.n	80075f0 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2202      	movs	r2, #2
 80075da:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075e2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80075e4:	7afb      	ldrb	r3, [r7, #11]
 80075e6:	4619      	mov	r1, r3
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 fab3 	bl	8007b54 <SCSI_ProcessRead>
 80075ee:	4603      	mov	r3, r0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	460b      	mov	r3, r1
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 800760c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d102      	bne.n	800761a <SCSI_Read12+0x22>
  {
    return -1;
 8007614:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007618:	e095      	b.n	8007746 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	7a1b      	ldrb	r3, [r3, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f040 8087 	bne.w	8007732 <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800762a:	b25b      	sxtb	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	db0a      	blt.n	8007646 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007636:	2320      	movs	r3, #32
 8007638:	2205      	movs	r2, #5
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f7ff fe7b 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007640:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007644:	e07f      	b.n	8007746 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800764c:	2b02      	cmp	r3, #2
 800764e:	d108      	bne.n	8007662 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007650:	7af9      	ldrb	r1, [r7, #11]
 8007652:	233a      	movs	r3, #58	@ 0x3a
 8007654:	2202      	movs	r2, #2
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7ff fe6d 	bl	8007336 <SCSI_SenseCode>
      return -1;
 800765c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007660:	e071      	b.n	8007746 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	7afa      	ldrb	r2, [r7, #11]
 800766c:	4610      	mov	r0, r2
 800766e:	4798      	blx	r3
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d008      	beq.n	8007688 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007676:	7af9      	ldrb	r1, [r7, #11]
 8007678:	233a      	movs	r3, #58	@ 0x3a
 800767a:	2202      	movs	r2, #2
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff fe5a 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007682:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007686:	e05e      	b.n	8007746 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3302      	adds	r3, #2
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3303      	adds	r3, #3
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007698:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3304      	adds	r3, #4
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80076a2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	3205      	adds	r2, #5
 80076a8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80076aa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	3306      	adds	r3, #6
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3307      	adds	r3, #7
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80076c2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3308      	adds	r3, #8
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80076cc:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	3209      	adds	r2, #9
 80076d2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80076d4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80076e8:	7af9      	ldrb	r1, [r7, #11]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 fa09 	bl	8007b02 <SCSI_CheckAddressRange>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	da02      	bge.n	80076fc <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80076f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076fa:	e024      	b.n	8007746 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007708:	6979      	ldr	r1, [r7, #20]
 800770a:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 800770e:	fb01 f303 	mul.w	r3, r1, r3
 8007712:	429a      	cmp	r2, r3
 8007714:	d00a      	beq.n	800772c <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800771c:	2320      	movs	r3, #32
 800771e:	2205      	movs	r2, #5
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f7ff fe08 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007726:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800772a:	e00c      	b.n	8007746 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	2202      	movs	r2, #2
 8007730:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007738:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800773a:	7afb      	ldrb	r3, [r7, #11]
 800773c:	4619      	mov	r1, r3
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fa08 	bl	8007b54 <SCSI_ProcessRead>
 8007744:	4603      	mov	r3, r0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3718      	adds	r7, #24
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	460b      	mov	r3, r1
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8007764:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d102      	bne.n	8007772 <SCSI_Write10+0x22>
  {
    return -1;
 800776c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007770:	e0b0      	b.n	80078d4 <SCSI_Write10+0x184>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	7a1b      	ldrb	r3, [r3, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	f040 80a6 	bne.w	80078c8 <SCSI_Write10+0x178>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800778c:	2320      	movs	r3, #32
 800778e:	2205      	movs	r2, #5
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f7ff fdd0 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007796:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800779a:	e09b      	b.n	80078d4 <SCSI_Write10+0x184>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80077a2:	b25b      	sxtb	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	da0a      	bge.n	80077be <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80077ae:	2320      	movs	r3, #32
 80077b0:	2205      	movs	r2, #5
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f7ff fdbf 	bl	8007336 <SCSI_SenseCode>
      return -1;
 80077b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80077bc:	e08a      	b.n	80078d4 <SCSI_Write10+0x184>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	7afa      	ldrb	r2, [r7, #11]
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d008      	beq.n	80077e4 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80077d2:	7af9      	ldrb	r1, [r7, #11]
 80077d4:	233a      	movs	r3, #58	@ 0x3a
 80077d6:	2202      	movs	r2, #2
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f7ff fdac 	bl	8007336 <SCSI_SenseCode>
      return -1;
 80077de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80077e2:	e077      	b.n	80078d4 <SCSI_Write10+0x184>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsWriteProtected(lun) != 0)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	7afa      	ldrb	r2, [r7, #11]
 80077ee:	4610      	mov	r0, r2
 80077f0:	4798      	blx	r3
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d008      	beq.n	800780a <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80077f8:	7af9      	ldrb	r1, [r7, #11]
 80077fa:	2327      	movs	r3, #39	@ 0x27
 80077fc:	2202      	movs	r2, #2
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f7ff fd99 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007804:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007808:	e064      	b.n	80078d4 <SCSI_Write10+0x184>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3302      	adds	r3, #2
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3303      	adds	r3, #3
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800781a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3304      	adds	r3, #4
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007824:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	3205      	adds	r2, #5
 800782a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800782c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3307      	adds	r3, #7
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	3208      	adds	r2, #8
 8007840:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007842:	431a      	orrs	r2, r3
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007856:	7af9      	ldrb	r1, [r7, #11]
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 f952 	bl	8007b02 <SCSI_CheckAddressRange>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	da02      	bge.n	800786a <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007864:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007868:	e034      	b.n	80078d4 <SCSI_Write10+0x184>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8007876:	fb02 f303 	mul.w	r3, r2, r3
 800787a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	429a      	cmp	r2, r3
 8007886:	d00a      	beq.n	800789e <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800788e:	2320      	movs	r3, #32
 8007890:	2205      	movs	r2, #5
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f7ff fd4f 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007898:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800789c:	e01a      	b.n	80078d4 <SCSI_Write10+0x184>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078a4:	bf28      	it	cs
 80078a6:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80078aa:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2201      	movs	r2, #1
 80078b0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 80078b2:	4b0a      	ldr	r3, [pc, #40]	@ (80078dc <SCSI_Write10+0x18c>)
 80078b4:	7819      	ldrb	r1, [r3, #0]
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f103 0210 	add.w	r2, r3, #16
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f001 fe7b 	bl	80095ba <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	e005      	b.n	80078d4 <SCSI_Write10+0x184>
    return SCSI_ProcessWrite(pdev, lun);
 80078c8:	7afb      	ldrb	r3, [r7, #11]
 80078ca:	4619      	mov	r1, r3
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 f9bd 	bl	8007c4c <SCSI_ProcessWrite>
 80078d2:	4603      	mov	r3, r0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	200001bb 	.word	0x200001bb

080078e0 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	460b      	mov	r3, r1
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 80078f4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <SCSI_Write12+0x22>
  {
    return -1;
 80078fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007900:	e0c0      	b.n	8007a84 <SCSI_Write12+0x1a4>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	7a1b      	ldrb	r3, [r3, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f040 80b6 	bne.w	8007a78 <SCSI_Write12+0x198>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10a      	bne.n	800792c <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800791c:	2320      	movs	r3, #32
 800791e:	2205      	movs	r2, #5
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f7ff fd08 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007926:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800792a:	e0ab      	b.n	8007a84 <SCSI_Write12+0x1a4>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8007932:	b25b      	sxtb	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	da0a      	bge.n	800794e <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800793e:	2320      	movs	r3, #32
 8007940:	2205      	movs	r2, #5
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff fcf7 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007948:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800794c:	e09a      	b.n	8007a84 <SCSI_Write12+0x1a4>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	7afa      	ldrb	r2, [r7, #11]
 8007958:	4610      	mov	r0, r2
 800795a:	4798      	blx	r3
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00b      	beq.n	800797a <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007962:	7af9      	ldrb	r1, [r7, #11]
 8007964:	233a      	movs	r3, #58	@ 0x3a
 8007966:	2202      	movs	r2, #2
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7ff fce4 	bl	8007336 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	2205      	movs	r2, #5
 8007972:	721a      	strb	r2, [r3, #8]
      return -1;
 8007974:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007978:	e084      	b.n	8007a84 <SCSI_Write12+0x1a4>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsWriteProtected(lun) != 0)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	7afa      	ldrb	r2, [r7, #11]
 8007984:	4610      	mov	r0, r2
 8007986:	4798      	blx	r3
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00b      	beq.n	80079a6 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800798e:	7af9      	ldrb	r1, [r7, #11]
 8007990:	2327      	movs	r3, #39	@ 0x27
 8007992:	2202      	movs	r2, #2
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f7ff fcce 	bl	8007336 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2205      	movs	r2, #5
 800799e:	721a      	strb	r2, [r3, #8]
      return -1;
 80079a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079a4:	e06e      	b.n	8007a84 <SCSI_Write12+0x1a4>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	3302      	adds	r3, #2
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3303      	adds	r3, #3
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80079b6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3304      	adds	r3, #4
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80079c0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	3205      	adds	r2, #5
 80079c6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80079c8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3306      	adds	r3, #6
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3307      	adds	r3, #7
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80079e0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3308      	adds	r3, #8
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80079ea:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	3209      	adds	r2, #9
 80079f0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80079f2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007a06:	7af9      	ldrb	r1, [r7, #11]
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 f87a 	bl	8007b02 <SCSI_CheckAddressRange>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	da02      	bge.n	8007a1a <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007a14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a18:	e034      	b.n	8007a84 <SCSI_Write12+0x1a4>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8007a26:	fb02 f303 	mul.w	r3, r2, r3
 8007a2a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d00a      	beq.n	8007a4e <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007a3e:	2320      	movs	r3, #32
 8007a40:	2205      	movs	r2, #5
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f7ff fc77 	bl	8007336 <SCSI_SenseCode>
      return -1;
 8007a48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a4c:	e01a      	b.n	8007a84 <SCSI_Write12+0x1a4>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a54:	bf28      	it	cs
 8007a56:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8007a5a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 8007a62:	4b0a      	ldr	r3, [pc, #40]	@ (8007a8c <SCSI_Write12+0x1ac>)
 8007a64:	7819      	ldrb	r1, [r3, #0]
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f103 0210 	add.w	r2, r3, #16
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f001 fda3 	bl	80095ba <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007a74:	2300      	movs	r3, #0
 8007a76:	e005      	b.n	8007a84 <SCSI_Write12+0x1a4>
    return SCSI_ProcessWrite(pdev, lun);
 8007a78:	7afb      	ldrb	r3, [r7, #11]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 f8e5 	bl	8007c4c <SCSI_ProcessWrite>
 8007a82:	4603      	mov	r3, r0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	200001bb 	.word	0x200001bb

08007a90 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8007aa4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d102      	bne.n	8007ab2 <SCSI_Verify10+0x22>
  {
    return -1;
 8007aac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ab0:	e023      	b.n	8007afa <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d008      	beq.n	8007ad2 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007ac0:	7af9      	ldrb	r1, [r7, #11]
 8007ac2:	2324      	movs	r3, #36	@ 0x24
 8007ac4:	2205      	movs	r2, #5
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f7ff fc35 	bl	8007336 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007acc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ad0:	e013      	b.n	8007afa <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007ade:	7af9      	ldrb	r1, [r7, #11]
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f80e 	bl	8007b02 <SCSI_CheckAddressRange>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	da02      	bge.n	8007af2 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8007aec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007af0:	e003      	b.n	8007afa <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	2200      	movs	r2, #0
 8007af6:	60da      	str	r2, [r3, #12]

  return 0;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3718      	adds	r7, #24
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b086      	sub	sp, #24
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	60f8      	str	r0, [r7, #12]
 8007b0a:	607a      	str	r2, [r7, #4]
 8007b0c:	603b      	str	r3, [r7, #0]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8007b18:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d102      	bne.n	8007b26 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8007b20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b24:	e011      	b.n	8007b4a <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	441a      	add	r2, r3
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d908      	bls.n	8007b48 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007b36:	7af9      	ldrb	r1, [r7, #11]
 8007b38:	2321      	movs	r3, #33	@ 0x21
 8007b3a:	2205      	movs	r2, #5
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f7ff fbfa 	bl	8007336 <SCSI_SenseCode>
    return -1;
 8007b42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b46:	e000      	b.n	8007b4a <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3718      	adds	r7, #24
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007b54:	b590      	push	{r4, r7, lr}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8007b66:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8007b74:	fb02 f303 	mul.w	r3, r2, r3
 8007b78:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d102      	bne.n	8007b86 <SCSI_ProcessRead+0x32>
  {
    return -1;
 8007b80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b84:	e05c      	b.n	8007c40 <SCSI_ProcessRead+0xec>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b8c:	bf28      	it	cs
 8007b8e:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8007b92:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Read(lun, hmsc->bot_data,
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 8007b9a:	691c      	ldr	r4, [r3, #16]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f103 0110 	add.w	r1, r3, #16
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007bae:	4618      	mov	r0, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Read(lun, hmsc->bot_data,
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	78f8      	ldrb	r0, [r7, #3]
 8007bba:	47a0      	blx	r4
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	da08      	bge.n	8007bd4 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007bc2:	78f9      	ldrb	r1, [r7, #3]
 8007bc4:	2311      	movs	r3, #17
 8007bc6:	2204      	movs	r2, #4
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff fbb4 	bl	8007336 <SCSI_SenseCode>
    return -1;
 8007bce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bd2:	e035      	b.n	8007c40 <SCSI_ProcessRead+0xec>
  }

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, hmsc->bot_data, len);
 8007bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8007c48 <SCSI_ProcessRead+0xf4>)
 8007bd6:	7819      	ldrb	r1, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f103 0210 	add.w	r2, r3, #16
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 fcc9 	bl	8009578 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bfa:	441a      	add	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007c0e:	4619      	mov	r1, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c16:	1ad2      	subs	r2, r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	1ad2      	subs	r2, r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d102      	bne.n	8007c3e <SCSI_ProcessRead+0xea>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2203      	movs	r2, #3
 8007c3c:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd90      	pop	{r4, r7, pc}
 8007c48:	200001ba 	.word	0x200001ba

08007c4c <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007c4c:	b590      	push	{r4, r7, lr}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8007c5e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8007c6c:	fb02 f303 	mul.w	r3, r2, r3
 8007c70:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d102      	bne.n	8007c7e <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8007c78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c7c:	e06c      	b.n	8007d58 <SCSI_ProcessWrite+0x10c>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c84:	bf28      	it	cs
 8007c86:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8007c8a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Write(lun, hmsc->bot_data,
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32fc 	ldr.w	r3, [r3, #764]	@ 0x2fc
 8007c92:	695c      	ldr	r4, [r3, #20]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f103 0110 	add.w	r1, r3, #16
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Write(lun, hmsc->bot_data,
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	78f8      	ldrb	r0, [r7, #3]
 8007cb2:	47a0      	blx	r4
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	da08      	bge.n	8007ccc <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007cba:	78f9      	ldrb	r1, [r7, #3]
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	2204      	movs	r2, #4
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff fb38 	bl	8007336 <SCSI_SenseCode>
    return -1;
 8007cc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007cca:	e045      	b.n	8007d58 <SCSI_ProcessWrite+0x10c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007cd8:	4619      	mov	r1, r3
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ce0:	441a      	add	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cfc:	1ad2      	subs	r2, r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	1ad2      	subs	r2, r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d104      	bne.n	8007d28 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007d1e:	2100      	movs	r1, #0
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7fe fdb3 	bl	800688c <MSC_BOT_SendCSW>
 8007d26:	e016      	b.n	8007d56 <SCSI_ProcessWrite+0x10a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8007d34:	fb02 f303 	mul.w	r3, r2, r3
 8007d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d3c:	bf28      	it	cs
 8007d3e:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8007d42:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 8007d44:	4b06      	ldr	r3, [pc, #24]	@ (8007d60 <SCSI_ProcessWrite+0x114>)
 8007d46:	7819      	ldrb	r1, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f103 0210 	add.w	r2, r3, #16
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 fc32 	bl	80095ba <USBD_LL_PrepareReceive>
  }

  return 0;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd90      	pop	{r4, r7, pc}
 8007d60:	200001bb 	.word	0x200001bb

08007d64 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8007d72:	88fb      	ldrh	r3, [r7, #6]
 8007d74:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d102      	bne.n	8007d82 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8007d7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d80:	e013      	b.n	8007daa <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8007d82:	8afa      	ldrh	r2, [r7, #22]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8007d88:	e00b      	b.n	8007da2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8007d8a:	8afb      	ldrh	r3, [r7, #22]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8007d90:	8afb      	ldrh	r3, [r7, #22]
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	441a      	add	r2, r3
 8007d96:	8afb      	ldrh	r3, [r7, #22]
 8007d98:	7811      	ldrb	r1, [r2, #0]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	460a      	mov	r2, r1
 8007da0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8007da2:	8afb      	ldrh	r3, [r7, #22]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1f0      	bne.n	8007d8a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b086      	sub	sp, #24
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	60f8      	str	r0, [r7, #12]
 8007dbe:	60b9      	str	r1, [r7, #8]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e01b      	b.n	8007e06 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	79fa      	ldrb	r2, [r7, #7]
 8007df8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f001 fa56 	bl	80092ac <USBD_LL_Init>
 8007e00:	4603      	mov	r3, r0
 8007e02:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3718      	adds	r7, #24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e02d      	b.n	8007e82 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	7c1b      	ldrb	r3, [r3, #16]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d112      	bne.n	8007e5c <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d01e      	beq.n	8007e80 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e4a:	f107 020e 	add.w	r2, r7, #14
 8007e4e:	4610      	mov	r0, r2
 8007e50:	4798      	blx	r3
 8007e52:	4602      	mov	r2, r0
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 8007e5a:	e011      	b.n	8007e80 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e70:	f107 020e 	add.w	r2, r7, #14
 8007e74:	4610      	mov	r0, r2
 8007e76:	4798      	blx	r3
 8007e78:	4602      	mov	r2, r0
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f001 fa68 	bl	8009368 <USBD_LL_Start>
 8007e98:	4603      	mov	r3, r0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d009      	beq.n	8007ee6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	78fa      	ldrb	r2, [r7, #3]
 8007edc:	4611      	mov	r1, r2
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	4798      	blx	r3
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d007      	beq.n	8007f16 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	78fa      	ldrb	r2, [r7, #3]
 8007f10:	4611      	mov	r1, r2
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	4798      	blx	r3
  }

  return USBD_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 ff9e 	bl	8008e74 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007f46:	461a      	mov	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007f54:	f003 031f 	and.w	r3, r3, #31
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d01a      	beq.n	8007f92 <USBD_LL_SetupStage+0x72>
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d822      	bhi.n	8007fa6 <USBD_LL_SetupStage+0x86>
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <USBD_LL_SetupStage+0x4a>
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d00a      	beq.n	8007f7e <USBD_LL_SetupStage+0x5e>
 8007f68:	e01d      	b.n	8007fa6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fa5e 	bl	8008434 <USBD_StdDevReq>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f7c:	e020      	b.n	8007fc0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fac2 	bl	8008510 <USBD_StdItfReq>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f90:	e016      	b.n	8007fc0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fb01 	bl	80085a2 <USBD_StdEPReq>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fa4:	e00c      	b.n	8007fc0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007fac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 fa56 	bl	8009466 <USBD_LL_StallEP>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007fbe:	bf00      	nop
  }

  return ret;
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b086      	sub	sp, #24
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	60f8      	str	r0, [r7, #12]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	607a      	str	r2, [r7, #4]
 8007fd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007fd8:	7afb      	ldrb	r3, [r7, #11]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d138      	bne.n	8008050 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007fe4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	d14a      	bne.n	8008086 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d913      	bls.n	8008024 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	1ad2      	subs	r2, r2, r3
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	68da      	ldr	r2, [r3, #12]
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	4293      	cmp	r3, r2
 8008014:	bf28      	it	cs
 8008016:	4613      	movcs	r3, r2
 8008018:	461a      	mov	r2, r3
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f001 f81d 	bl	800905c <USBD_CtlContinueRx>
 8008022:	e030      	b.n	8008086 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b03      	cmp	r3, #3
 800802e:	d10b      	bne.n	8008048 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d005      	beq.n	8008048 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f001 f818 	bl	800907e <USBD_CtlSendStatus>
 800804e:	e01a      	b.n	8008086 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b03      	cmp	r3, #3
 800805a:	d114      	bne.n	8008086 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00e      	beq.n	8008086 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	7afa      	ldrb	r2, [r7, #11]
 8008072:	4611      	mov	r1, r2
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	4798      	blx	r3
 8008078:	4603      	mov	r3, r0
 800807a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008082:	7dfb      	ldrb	r3, [r7, #23]
 8008084:	e000      	b.n	8008088 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	460b      	mov	r3, r1
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800809e:	7afb      	ldrb	r3, [r7, #11]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d16b      	bne.n	800817c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	3314      	adds	r3, #20
 80080a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d156      	bne.n	8008162 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	689a      	ldr	r2, [r3, #8]
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d914      	bls.n	80080ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	1ad2      	subs	r2, r2, r3
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	461a      	mov	r2, r3
 80080d4:	6879      	ldr	r1, [r7, #4]
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 ff92 	bl	8009000 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080dc:	2300      	movs	r3, #0
 80080de:	2200      	movs	r2, #0
 80080e0:	2100      	movs	r1, #0
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f001 fa69 	bl	80095ba <USBD_LL_PrepareReceive>
 80080e8:	e03b      	b.n	8008162 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d11c      	bne.n	8008130 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80080fe:	429a      	cmp	r2, r3
 8008100:	d316      	bcc.n	8008130 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800810c:	429a      	cmp	r2, r3
 800810e:	d20f      	bcs.n	8008130 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008110:	2200      	movs	r2, #0
 8008112:	2100      	movs	r1, #0
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 ff73 	bl	8009000 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008122:	2300      	movs	r3, #0
 8008124:	2200      	movs	r2, #0
 8008126:	2100      	movs	r1, #0
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f001 fa46 	bl	80095ba <USBD_LL_PrepareReceive>
 800812e:	e018      	b.n	8008162 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b03      	cmp	r3, #3
 800813a:	d10b      	bne.n	8008154 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d005      	beq.n	8008154 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008154:	2180      	movs	r1, #128	@ 0x80
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f001 f985 	bl	8009466 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 ffa1 	bl	80090a4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008168:	2b01      	cmp	r3, #1
 800816a:	d122      	bne.n	80081b2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f7ff fe98 	bl	8007ea2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800817a:	e01a      	b.n	80081b2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b03      	cmp	r3, #3
 8008186:	d114      	bne.n	80081b2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00e      	beq.n	80081b2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	7afa      	ldrb	r2, [r7, #11]
 800819e:	4611      	mov	r1, r2
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	4798      	blx	r3
 80081a4:	4603      	mov	r3, r0
 80081a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80081a8:	7dfb      	ldrb	r3, [r7, #23]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	e000      	b.n	80081b4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e02a      	b.n	8008246 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d009      	beq.n	8008210 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	6852      	ldr	r2, [r2, #4]
 8008208:	b2d2      	uxtb	r2, r2
 800820a:	4611      	mov	r1, r2
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008210:	2340      	movs	r3, #64	@ 0x40
 8008212:	2200      	movs	r2, #0
 8008214:	2100      	movs	r1, #0
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f001 f8c1 	bl	800939e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2240      	movs	r2, #64	@ 0x40
 8008228:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800822c:	2340      	movs	r3, #64	@ 0x40
 800822e:	2200      	movs	r2, #0
 8008230:	2180      	movs	r1, #128	@ 0x80
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 f8b3 	bl	800939e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2240      	movs	r2, #64	@ 0x40
 8008242:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	460b      	mov	r3, r1
 8008258:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	78fa      	ldrb	r2, [r7, #3]
 800825e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800826e:	b480      	push	{r7}
 8008270:	b083      	sub	sp, #12
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800827c:	b2da      	uxtb	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2204      	movs	r2, #4
 8008288:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	d106      	bne.n	80082bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b082      	sub	sp, #8
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80082dc:	2303      	movs	r3, #3
 80082de:	e012      	b.n	8008306 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	d10b      	bne.n	8008304 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b082      	sub	sp, #8
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	460b      	mov	r3, r1
 8008318:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008324:	2303      	movs	r3, #3
 8008326:	e014      	b.n	8008352 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b03      	cmp	r3, #3
 8008332:	d10d      	bne.n	8008350 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d007      	beq.n	8008350 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	78fa      	ldrb	r2, [r7, #3]
 800834a:	4611      	mov	r1, r2
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b082      	sub	sp, #8
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	460b      	mov	r3, r1
 8008364:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800836c:	2b00      	cmp	r3, #0
 800836e:	d101      	bne.n	8008374 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008370:	2303      	movs	r3, #3
 8008372:	e014      	b.n	800839e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b03      	cmp	r3, #3
 800837e:	d10d      	bne.n	800839c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008388:	2b00      	cmp	r3, #0
 800838a:	d007      	beq.n	800839c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008394:	78fa      	ldrb	r2, [r7, #3]
 8008396:	4611      	mov	r1, r2
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80083a6:	b480      	push	{r7}
 80083a8:	b083      	sub	sp, #12
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d009      	beq.n	80083ea <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	6852      	ldr	r2, [r2, #4]
 80083e2:	b2d2      	uxtb	r2, r2
 80083e4:	4611      	mov	r1, r2
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
  }

  return USBD_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b087      	sub	sp, #28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	3301      	adds	r3, #1
 800840a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008412:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008416:	021b      	lsls	r3, r3, #8
 8008418:	b21a      	sxth	r2, r3
 800841a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800841e:	4313      	orrs	r3, r2
 8008420:	b21b      	sxth	r3, r3
 8008422:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008424:	89fb      	ldrh	r3, [r7, #14]
}
 8008426:	4618      	mov	r0, r3
 8008428:	371c      	adds	r7, #28
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
	...

08008434 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800844a:	2b40      	cmp	r3, #64	@ 0x40
 800844c:	d005      	beq.n	800845a <USBD_StdDevReq+0x26>
 800844e:	2b40      	cmp	r3, #64	@ 0x40
 8008450:	d853      	bhi.n	80084fa <USBD_StdDevReq+0xc6>
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00b      	beq.n	800846e <USBD_StdDevReq+0x3a>
 8008456:	2b20      	cmp	r3, #32
 8008458:	d14f      	bne.n	80084fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	4798      	blx	r3
 8008468:	4603      	mov	r3, r0
 800846a:	73fb      	strb	r3, [r7, #15]
      break;
 800846c:	e04a      	b.n	8008504 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	785b      	ldrb	r3, [r3, #1]
 8008472:	2b09      	cmp	r3, #9
 8008474:	d83b      	bhi.n	80084ee <USBD_StdDevReq+0xba>
 8008476:	a201      	add	r2, pc, #4	@ (adr r2, 800847c <USBD_StdDevReq+0x48>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	080084d1 	.word	0x080084d1
 8008480:	080084e5 	.word	0x080084e5
 8008484:	080084ef 	.word	0x080084ef
 8008488:	080084db 	.word	0x080084db
 800848c:	080084ef 	.word	0x080084ef
 8008490:	080084af 	.word	0x080084af
 8008494:	080084a5 	.word	0x080084a5
 8008498:	080084ef 	.word	0x080084ef
 800849c:	080084c7 	.word	0x080084c7
 80084a0:	080084b9 	.word	0x080084b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f9de 	bl	8008868 <USBD_GetDescriptor>
          break;
 80084ac:	e024      	b.n	80084f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fb55 	bl	8008b60 <USBD_SetAddress>
          break;
 80084b6:	e01f      	b.n	80084f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fb94 	bl	8008be8 <USBD_SetConfig>
 80084c0:	4603      	mov	r3, r0
 80084c2:	73fb      	strb	r3, [r7, #15]
          break;
 80084c4:	e018      	b.n	80084f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fc33 	bl	8008d34 <USBD_GetConfig>
          break;
 80084ce:	e013      	b.n	80084f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fc64 	bl	8008da0 <USBD_GetStatus>
          break;
 80084d8:	e00e      	b.n	80084f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fc93 	bl	8008e08 <USBD_SetFeature>
          break;
 80084e2:	e009      	b.n	80084f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fca2 	bl	8008e30 <USBD_ClrFeature>
          break;
 80084ec:	e004      	b.n	80084f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fcf9 	bl	8008ee8 <USBD_CtlError>
          break;
 80084f6:	bf00      	nop
      }
      break;
 80084f8:	e004      	b.n	8008504 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fcf3 	bl	8008ee8 <USBD_CtlError>
      break;
 8008502:	bf00      	nop
  }

  return ret;
 8008504:	7bfb      	ldrb	r3, [r7, #15]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop

08008510 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008526:	2b40      	cmp	r3, #64	@ 0x40
 8008528:	d005      	beq.n	8008536 <USBD_StdItfReq+0x26>
 800852a:	2b40      	cmp	r3, #64	@ 0x40
 800852c:	d82f      	bhi.n	800858e <USBD_StdItfReq+0x7e>
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <USBD_StdItfReq+0x26>
 8008532:	2b20      	cmp	r3, #32
 8008534:	d12b      	bne.n	800858e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800853c:	b2db      	uxtb	r3, r3
 800853e:	3b01      	subs	r3, #1
 8008540:	2b02      	cmp	r3, #2
 8008542:	d81d      	bhi.n	8008580 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	889b      	ldrh	r3, [r3, #4]
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b0f      	cmp	r3, #15
 800854c:	d813      	bhi.n	8008576 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	4798      	blx	r3
 800855c:	4603      	mov	r3, r0
 800855e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	88db      	ldrh	r3, [r3, #6]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d110      	bne.n	800858a <USBD_StdItfReq+0x7a>
 8008568:	7bfb      	ldrb	r3, [r7, #15]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10d      	bne.n	800858a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fd85 	bl	800907e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008574:	e009      	b.n	800858a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fcb5 	bl	8008ee8 <USBD_CtlError>
          break;
 800857e:	e004      	b.n	800858a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fcb0 	bl	8008ee8 <USBD_CtlError>
          break;
 8008588:	e000      	b.n	800858c <USBD_StdItfReq+0x7c>
          break;
 800858a:	bf00      	nop
      }
      break;
 800858c:	e004      	b.n	8008598 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fca9 	bl	8008ee8 <USBD_CtlError>
      break;
 8008596:	bf00      	nop
  }

  return ret;
 8008598:	7bfb      	ldrb	r3, [r7, #15]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	889b      	ldrh	r3, [r3, #4]
 80085b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085be:	2b40      	cmp	r3, #64	@ 0x40
 80085c0:	d007      	beq.n	80085d2 <USBD_StdEPReq+0x30>
 80085c2:	2b40      	cmp	r3, #64	@ 0x40
 80085c4:	f200 8145 	bhi.w	8008852 <USBD_StdEPReq+0x2b0>
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00c      	beq.n	80085e6 <USBD_StdEPReq+0x44>
 80085cc:	2b20      	cmp	r3, #32
 80085ce:	f040 8140 	bne.w	8008852 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	4798      	blx	r3
 80085e0:	4603      	mov	r3, r0
 80085e2:	73fb      	strb	r3, [r7, #15]
      break;
 80085e4:	e13a      	b.n	800885c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	785b      	ldrb	r3, [r3, #1]
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d007      	beq.n	80085fe <USBD_StdEPReq+0x5c>
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	f300 8129 	bgt.w	8008846 <USBD_StdEPReq+0x2a4>
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d07f      	beq.n	80086f8 <USBD_StdEPReq+0x156>
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d03c      	beq.n	8008676 <USBD_StdEPReq+0xd4>
 80085fc:	e123      	b.n	8008846 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b02      	cmp	r3, #2
 8008608:	d002      	beq.n	8008610 <USBD_StdEPReq+0x6e>
 800860a:	2b03      	cmp	r3, #3
 800860c:	d016      	beq.n	800863c <USBD_StdEPReq+0x9a>
 800860e:	e02c      	b.n	800866a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008610:	7bbb      	ldrb	r3, [r7, #14]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00d      	beq.n	8008632 <USBD_StdEPReq+0x90>
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	2b80      	cmp	r3, #128	@ 0x80
 800861a:	d00a      	beq.n	8008632 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800861c:	7bbb      	ldrb	r3, [r7, #14]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 ff20 	bl	8009466 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008626:	2180      	movs	r1, #128	@ 0x80
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 ff1c 	bl	8009466 <USBD_LL_StallEP>
 800862e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008630:	e020      	b.n	8008674 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fc57 	bl	8008ee8 <USBD_CtlError>
              break;
 800863a:	e01b      	b.n	8008674 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	885b      	ldrh	r3, [r3, #2]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10e      	bne.n	8008662 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00b      	beq.n	8008662 <USBD_StdEPReq+0xc0>
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	2b80      	cmp	r3, #128	@ 0x80
 800864e:	d008      	beq.n	8008662 <USBD_StdEPReq+0xc0>
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	88db      	ldrh	r3, [r3, #6]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d104      	bne.n	8008662 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 ff02 	bl	8009466 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fd0b 	bl	800907e <USBD_CtlSendStatus>

              break;
 8008668:	e004      	b.n	8008674 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fc3b 	bl	8008ee8 <USBD_CtlError>
              break;
 8008672:	bf00      	nop
          }
          break;
 8008674:	e0ec      	b.n	8008850 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b02      	cmp	r3, #2
 8008680:	d002      	beq.n	8008688 <USBD_StdEPReq+0xe6>
 8008682:	2b03      	cmp	r3, #3
 8008684:	d016      	beq.n	80086b4 <USBD_StdEPReq+0x112>
 8008686:	e030      	b.n	80086ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008688:	7bbb      	ldrb	r3, [r7, #14]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00d      	beq.n	80086aa <USBD_StdEPReq+0x108>
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	2b80      	cmp	r3, #128	@ 0x80
 8008692:	d00a      	beq.n	80086aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fee4 	bl	8009466 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800869e:	2180      	movs	r1, #128	@ 0x80
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fee0 	bl	8009466 <USBD_LL_StallEP>
 80086a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086a8:	e025      	b.n	80086f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fc1b 	bl	8008ee8 <USBD_CtlError>
              break;
 80086b2:	e020      	b.n	80086f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	885b      	ldrh	r3, [r3, #2]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d11b      	bne.n	80086f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d004      	beq.n	80086d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	4619      	mov	r1, r3
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 feea 	bl	80094a4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fcd4 	bl	800907e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	4798      	blx	r3
 80086e4:	4603      	mov	r3, r0
 80086e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80086e8:	e004      	b.n	80086f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fbfb 	bl	8008ee8 <USBD_CtlError>
              break;
 80086f2:	e000      	b.n	80086f6 <USBD_StdEPReq+0x154>
              break;
 80086f4:	bf00      	nop
          }
          break;
 80086f6:	e0ab      	b.n	8008850 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b02      	cmp	r3, #2
 8008702:	d002      	beq.n	800870a <USBD_StdEPReq+0x168>
 8008704:	2b03      	cmp	r3, #3
 8008706:	d032      	beq.n	800876e <USBD_StdEPReq+0x1cc>
 8008708:	e097      	b.n	800883a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d007      	beq.n	8008720 <USBD_StdEPReq+0x17e>
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	2b80      	cmp	r3, #128	@ 0x80
 8008714:	d004      	beq.n	8008720 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fbe5 	bl	8008ee8 <USBD_CtlError>
                break;
 800871e:	e091      	b.n	8008844 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008724:	2b00      	cmp	r3, #0
 8008726:	da0b      	bge.n	8008740 <USBD_StdEPReq+0x19e>
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800872e:	4613      	mov	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	3310      	adds	r3, #16
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	4413      	add	r3, r2
 800873c:	3304      	adds	r3, #4
 800873e:	e00b      	b.n	8008758 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008746:	4613      	mov	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	4413      	add	r3, r2
 8008756:	3304      	adds	r3, #4
 8008758:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2200      	movs	r2, #0
 800875e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2202      	movs	r2, #2
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fc2f 	bl	8008fca <USBD_CtlSendData>
              break;
 800876c:	e06a      	b.n	8008844 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800876e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008772:	2b00      	cmp	r3, #0
 8008774:	da11      	bge.n	800879a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008776:	7bbb      	ldrb	r3, [r7, #14]
 8008778:	f003 020f 	and.w	r2, r3, #15
 800877c:	6879      	ldr	r1, [r7, #4]
 800877e:	4613      	mov	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	440b      	add	r3, r1
 8008788:	3324      	adds	r3, #36	@ 0x24
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d117      	bne.n	80087c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fba8 	bl	8008ee8 <USBD_CtlError>
                  break;
 8008798:	e054      	b.n	8008844 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800879a:	7bbb      	ldrb	r3, [r7, #14]
 800879c:	f003 020f 	and.w	r2, r3, #15
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d104      	bne.n	80087c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fb95 	bl	8008ee8 <USBD_CtlError>
                  break;
 80087be:	e041      	b.n	8008844 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	da0b      	bge.n	80087e0 <USBD_StdEPReq+0x23e>
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
 80087ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087ce:	4613      	mov	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4413      	add	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	3310      	adds	r3, #16
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	4413      	add	r3, r2
 80087dc:	3304      	adds	r3, #4
 80087de:	e00b      	b.n	80087f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087e0:	7bbb      	ldrb	r3, [r7, #14]
 80087e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087e6:	4613      	mov	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	4413      	add	r3, r2
 80087f6:	3304      	adds	r3, #4
 80087f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <USBD_StdEPReq+0x264>
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	2b80      	cmp	r3, #128	@ 0x80
 8008804:	d103      	bne.n	800880e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	e00e      	b.n	800882c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800880e:	7bbb      	ldrb	r3, [r7, #14]
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fe65 	bl	80094e2 <USBD_LL_IsStallEP>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d003      	beq.n	8008826 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2201      	movs	r2, #1
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	e002      	b.n	800882c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2202      	movs	r2, #2
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fbc9 	bl	8008fca <USBD_CtlSendData>
              break;
 8008838:	e004      	b.n	8008844 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800883a:	6839      	ldr	r1, [r7, #0]
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fb53 	bl	8008ee8 <USBD_CtlError>
              break;
 8008842:	bf00      	nop
          }
          break;
 8008844:	e004      	b.n	8008850 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fb4d 	bl	8008ee8 <USBD_CtlError>
          break;
 800884e:	bf00      	nop
      }
      break;
 8008850:	e004      	b.n	800885c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fb47 	bl	8008ee8 <USBD_CtlError>
      break;
 800885a:	bf00      	nop
  }

  return ret;
 800885c:	7bfb      	ldrb	r3, [r7, #15]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008872:	2300      	movs	r3, #0
 8008874:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008876:	2300      	movs	r3, #0
 8008878:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800887a:	2300      	movs	r3, #0
 800887c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	885b      	ldrh	r3, [r3, #2]
 8008882:	0a1b      	lsrs	r3, r3, #8
 8008884:	b29b      	uxth	r3, r3
 8008886:	3b01      	subs	r3, #1
 8008888:	2b06      	cmp	r3, #6
 800888a:	f200 813b 	bhi.w	8008b04 <USBD_GetDescriptor+0x29c>
 800888e:	a201      	add	r2, pc, #4	@ (adr r2, 8008894 <USBD_GetDescriptor+0x2c>)
 8008890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008894:	080088b1 	.word	0x080088b1
 8008898:	080088c9 	.word	0x080088c9
 800889c:	08008909 	.word	0x08008909
 80088a0:	08008b05 	.word	0x08008b05
 80088a4:	08008b05 	.word	0x08008b05
 80088a8:	08008aa5 	.word	0x08008aa5
 80088ac:	08008ad1 	.word	0x08008ad1
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	7c12      	ldrb	r2, [r2, #16]
 80088bc:	f107 0108 	add.w	r1, r7, #8
 80088c0:	4610      	mov	r0, r2
 80088c2:	4798      	blx	r3
 80088c4:	60f8      	str	r0, [r7, #12]
      break;
 80088c6:	e125      	b.n	8008b14 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	7c1b      	ldrb	r3, [r3, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10d      	bne.n	80088ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d8:	f107 0208 	add.w	r2, r7, #8
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	3301      	adds	r3, #1
 80088e6:	2202      	movs	r2, #2
 80088e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088ea:	e113      	b.n	8008b14 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f4:	f107 0208 	add.w	r2, r7, #8
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
 80088fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3301      	adds	r3, #1
 8008902:	2202      	movs	r2, #2
 8008904:	701a      	strb	r2, [r3, #0]
      break;
 8008906:	e105      	b.n	8008b14 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	885b      	ldrh	r3, [r3, #2]
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b05      	cmp	r3, #5
 8008910:	f200 80ac 	bhi.w	8008a6c <USBD_GetDescriptor+0x204>
 8008914:	a201      	add	r2, pc, #4	@ (adr r2, 800891c <USBD_GetDescriptor+0xb4>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	08008935 	.word	0x08008935
 8008920:	08008969 	.word	0x08008969
 8008924:	0800899d 	.word	0x0800899d
 8008928:	080089d1 	.word	0x080089d1
 800892c:	08008a05 	.word	0x08008a05
 8008930:	08008a39 	.word	0x08008a39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00b      	beq.n	8008958 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	7c12      	ldrb	r2, [r2, #16]
 800894c:	f107 0108 	add.w	r1, r7, #8
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
 8008954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008956:	e0a4      	b.n	8008aa2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fac4 	bl	8008ee8 <USBD_CtlError>
            err++;
 8008960:	7afb      	ldrb	r3, [r7, #11]
 8008962:	3301      	adds	r3, #1
 8008964:	72fb      	strb	r3, [r7, #11]
          break;
 8008966:	e09c      	b.n	8008aa2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00b      	beq.n	800898c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	7c12      	ldrb	r2, [r2, #16]
 8008980:	f107 0108 	add.w	r1, r7, #8
 8008984:	4610      	mov	r0, r2
 8008986:	4798      	blx	r3
 8008988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800898a:	e08a      	b.n	8008aa2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 faaa 	bl	8008ee8 <USBD_CtlError>
            err++;
 8008994:	7afb      	ldrb	r3, [r7, #11]
 8008996:	3301      	adds	r3, #1
 8008998:	72fb      	strb	r3, [r7, #11]
          break;
 800899a:	e082      	b.n	8008aa2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00b      	beq.n	80089c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	7c12      	ldrb	r2, [r2, #16]
 80089b4:	f107 0108 	add.w	r1, r7, #8
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089be:	e070      	b.n	8008aa2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fa90 	bl	8008ee8 <USBD_CtlError>
            err++;
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	3301      	adds	r3, #1
 80089cc:	72fb      	strb	r3, [r7, #11]
          break;
 80089ce:	e068      	b.n	8008aa2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7c12      	ldrb	r2, [r2, #16]
 80089e8:	f107 0108 	add.w	r1, r7, #8
 80089ec:	4610      	mov	r0, r2
 80089ee:	4798      	blx	r3
 80089f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089f2:	e056      	b.n	8008aa2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fa76 	bl	8008ee8 <USBD_CtlError>
            err++;
 80089fc:	7afb      	ldrb	r3, [r7, #11]
 80089fe:	3301      	adds	r3, #1
 8008a00:	72fb      	strb	r3, [r7, #11]
          break;
 8008a02:	e04e      	b.n	8008aa2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	7c12      	ldrb	r2, [r2, #16]
 8008a1c:	f107 0108 	add.w	r1, r7, #8
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
 8008a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a26:	e03c      	b.n	8008aa2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fa5c 	bl	8008ee8 <USBD_CtlError>
            err++;
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	3301      	adds	r3, #1
 8008a34:	72fb      	strb	r3, [r7, #11]
          break;
 8008a36:	e034      	b.n	8008aa2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00b      	beq.n	8008a5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	7c12      	ldrb	r2, [r2, #16]
 8008a50:	f107 0108 	add.w	r1, r7, #8
 8008a54:	4610      	mov	r0, r2
 8008a56:	4798      	blx	r3
 8008a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a5a:	e022      	b.n	8008aa2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa42 	bl	8008ee8 <USBD_CtlError>
            err++;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	3301      	adds	r3, #1
 8008a68:	72fb      	strb	r3, [r7, #11]
          break;
 8008a6a:	e01a      	b.n	8008aa2 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00c      	beq.n	8008a92 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	8852      	ldrh	r2, [r2, #2]
 8008a84:	b2d1      	uxtb	r1, r2
 8008a86:	f107 0208 	add.w	r2, r7, #8
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	4798      	blx	r3
 8008a8e:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8008a90:	e006      	b.n	8008aa0 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fa27 	bl	8008ee8 <USBD_CtlError>
            err++;
 8008a9a:	7afb      	ldrb	r3, [r7, #11]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	72fb      	strb	r3, [r7, #11]
          break;
 8008aa0:	bf00      	nop
      }
      break;
 8008aa2:	e037      	b.n	8008b14 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	7c1b      	ldrb	r3, [r3, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d109      	bne.n	8008ac0 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ab4:	f107 0208 	add.w	r2, r7, #8
 8008ab8:	4610      	mov	r0, r2
 8008aba:	4798      	blx	r3
 8008abc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008abe:	e029      	b.n	8008b14 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008ac0:	6839      	ldr	r1, [r7, #0]
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fa10 	bl	8008ee8 <USBD_CtlError>
        err++;
 8008ac8:	7afb      	ldrb	r3, [r7, #11]
 8008aca:	3301      	adds	r3, #1
 8008acc:	72fb      	strb	r3, [r7, #11]
      break;
 8008ace:	e021      	b.n	8008b14 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	7c1b      	ldrb	r3, [r3, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10d      	bne.n	8008af4 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ae0:	f107 0208 	add.w	r2, r7, #8
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4798      	blx	r3
 8008ae8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3301      	adds	r3, #1
 8008aee:	2207      	movs	r2, #7
 8008af0:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008af2:	e00f      	b.n	8008b14 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f9f6 	bl	8008ee8 <USBD_CtlError>
        err++;
 8008afc:	7afb      	ldrb	r3, [r7, #11]
 8008afe:	3301      	adds	r3, #1
 8008b00:	72fb      	strb	r3, [r7, #11]
      break;
 8008b02:	e007      	b.n	8008b14 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f9ee 	bl	8008ee8 <USBD_CtlError>
      err++;
 8008b0c:	7afb      	ldrb	r3, [r7, #11]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	72fb      	strb	r3, [r7, #11]
      break;
 8008b12:	bf00      	nop
  }

  if (err != 0U)
 8008b14:	7afb      	ldrb	r3, [r7, #11]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d11e      	bne.n	8008b58 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	88db      	ldrh	r3, [r3, #6]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d016      	beq.n	8008b50 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 8008b22:	893b      	ldrh	r3, [r7, #8]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00e      	beq.n	8008b46 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	88da      	ldrh	r2, [r3, #6]
 8008b2c:	893b      	ldrh	r3, [r7, #8]
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	bf28      	it	cs
 8008b32:	4613      	movcs	r3, r2
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b38:	893b      	ldrh	r3, [r7, #8]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	68f9      	ldr	r1, [r7, #12]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fa43 	bl	8008fca <USBD_CtlSendData>
 8008b44:	e009      	b.n	8008b5a <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f9cd 	bl	8008ee8 <USBD_CtlError>
 8008b4e:	e004      	b.n	8008b5a <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fa94 	bl	800907e <USBD_CtlSendStatus>
 8008b56:	e000      	b.n	8008b5a <USBD_GetDescriptor+0x2f2>
    return;
 8008b58:	bf00      	nop
  }
}
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	889b      	ldrh	r3, [r3, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d131      	bne.n	8008bd6 <USBD_SetAddress+0x76>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	88db      	ldrh	r3, [r3, #6]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d12d      	bne.n	8008bd6 <USBD_SetAddress+0x76>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	885b      	ldrh	r3, [r3, #2]
 8008b7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b80:	d829      	bhi.n	8008bd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	885b      	ldrh	r3, [r3, #2]
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d104      	bne.n	8008ba4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f9a3 	bl	8008ee8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba2:	e01d      	b.n	8008be0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	7bfa      	ldrb	r2, [r7, #15]
 8008ba8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fcc2 	bl	800953a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fa61 	bl	800907e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d004      	beq.n	8008bcc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bca:	e009      	b.n	8008be0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd4:	e004      	b.n	8008be0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f985 	bl	8008ee8 <USBD_CtlError>
  }
}
 8008bde:	bf00      	nop
 8008be0:	bf00      	nop
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	885b      	ldrh	r3, [r3, #2]
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	4b4c      	ldr	r3, [pc, #304]	@ (8008d30 <USBD_SetConfig+0x148>)
 8008bfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c00:	4b4b      	ldr	r3, [pc, #300]	@ (8008d30 <USBD_SetConfig+0x148>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d905      	bls.n	8008c14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f96c 	bl	8008ee8 <USBD_CtlError>
    return USBD_FAIL;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e088      	b.n	8008d26 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d002      	beq.n	8008c26 <USBD_SetConfig+0x3e>
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d025      	beq.n	8008c70 <USBD_SetConfig+0x88>
 8008c24:	e071      	b.n	8008d0a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c26:	4b42      	ldr	r3, [pc, #264]	@ (8008d30 <USBD_SetConfig+0x148>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d01c      	beq.n	8008c68 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008c2e:	4b40      	ldr	r3, [pc, #256]	@ (8008d30 <USBD_SetConfig+0x148>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c38:	4b3d      	ldr	r3, [pc, #244]	@ (8008d30 <USBD_SetConfig+0x148>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff f93a 	bl	8007eb8 <USBD_SetClassConfig>
 8008c44:	4603      	mov	r3, r0
 8008c46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d004      	beq.n	8008c58 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f949 	bl	8008ee8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c56:	e065      	b.n	8008d24 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fa10 	bl	800907e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2203      	movs	r2, #3
 8008c62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008c66:	e05d      	b.n	8008d24 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fa08 	bl	800907e <USBD_CtlSendStatus>
      break;
 8008c6e:	e059      	b.n	8008d24 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c70:	4b2f      	ldr	r3, [pc, #188]	@ (8008d30 <USBD_SetConfig+0x148>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d112      	bne.n	8008c9e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008c80:	4b2b      	ldr	r3, [pc, #172]	@ (8008d30 <USBD_SetConfig+0x148>)
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	461a      	mov	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c8a:	4b29      	ldr	r3, [pc, #164]	@ (8008d30 <USBD_SetConfig+0x148>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff f92d 	bl	8007ef0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f9f1 	bl	800907e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c9c:	e042      	b.n	8008d24 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008c9e:	4b24      	ldr	r3, [pc, #144]	@ (8008d30 <USBD_SetConfig+0x148>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d02a      	beq.n	8008d02 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7ff f91b 	bl	8007ef0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008cba:	4b1d      	ldr	r3, [pc, #116]	@ (8008d30 <USBD_SetConfig+0x148>)
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8008d30 <USBD_SetConfig+0x148>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff f8f4 	bl	8007eb8 <USBD_SetClassConfig>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00f      	beq.n	8008cfa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f903 	bl	8008ee8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7ff f900 	bl	8007ef0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008cf8:	e014      	b.n	8008d24 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f9bf 	bl	800907e <USBD_CtlSendStatus>
      break;
 8008d00:	e010      	b.n	8008d24 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f9bb 	bl	800907e <USBD_CtlSendStatus>
      break;
 8008d08:	e00c      	b.n	8008d24 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008d0a:	6839      	ldr	r1, [r7, #0]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f8eb 	bl	8008ee8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d12:	4b07      	ldr	r3, [pc, #28]	@ (8008d30 <USBD_SetConfig+0x148>)
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff f8e9 	bl	8007ef0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	73fb      	strb	r3, [r7, #15]
      break;
 8008d22:	bf00      	nop
  }

  return ret;
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	200092dc 	.word	0x200092dc

08008d34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	88db      	ldrh	r3, [r3, #6]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d004      	beq.n	8008d50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f8cd 	bl	8008ee8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d4e:	e023      	b.n	8008d98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	dc02      	bgt.n	8008d62 <USBD_GetConfig+0x2e>
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dc03      	bgt.n	8008d68 <USBD_GetConfig+0x34>
 8008d60:	e015      	b.n	8008d8e <USBD_GetConfig+0x5a>
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d00b      	beq.n	8008d7e <USBD_GetConfig+0x4a>
 8008d66:	e012      	b.n	8008d8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	3308      	adds	r3, #8
 8008d72:	2201      	movs	r2, #1
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f927 	bl	8008fca <USBD_CtlSendData>
        break;
 8008d7c:	e00c      	b.n	8008d98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3304      	adds	r3, #4
 8008d82:	2201      	movs	r2, #1
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f91f 	bl	8008fca <USBD_CtlSendData>
        break;
 8008d8c:	e004      	b.n	8008d98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f8a9 	bl	8008ee8 <USBD_CtlError>
        break;
 8008d96:	bf00      	nop
}
 8008d98:	bf00      	nop
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	3b01      	subs	r3, #1
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d81e      	bhi.n	8008df6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	88db      	ldrh	r3, [r3, #6]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d004      	beq.n	8008dca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f890 	bl	8008ee8 <USBD_CtlError>
        break;
 8008dc8:	e01a      	b.n	8008e00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d005      	beq.n	8008de6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	f043 0202 	orr.w	r2, r3, #2
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	330c      	adds	r3, #12
 8008dea:	2202      	movs	r2, #2
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f8eb 	bl	8008fca <USBD_CtlSendData>
      break;
 8008df4:	e004      	b.n	8008e00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008df6:	6839      	ldr	r1, [r7, #0]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f875 	bl	8008ee8 <USBD_CtlError>
      break;
 8008dfe:	bf00      	nop
  }
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	885b      	ldrh	r3, [r3, #2]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d106      	bne.n	8008e28 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f92b 	bl	800907e <USBD_CtlSendStatus>
  }
}
 8008e28:	bf00      	nop
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	3b01      	subs	r3, #1
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d80b      	bhi.n	8008e60 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	885b      	ldrh	r3, [r3, #2]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d10c      	bne.n	8008e6a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f910 	bl	800907e <USBD_CtlSendStatus>
      }
      break;
 8008e5e:	e004      	b.n	8008e6a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f840 	bl	8008ee8 <USBD_CtlError>
      break;
 8008e68:	e000      	b.n	8008e6c <USBD_ClrFeature+0x3c>
      break;
 8008e6a:	bf00      	nop
  }
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	781a      	ldrb	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	781a      	ldrb	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f7ff faa8 	bl	80083f4 <SWAPBYTE>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f7ff fa9b 	bl	80083f4 <SWAPBYTE>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f7ff fa8e 	bl	80083f4 <SWAPBYTE>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	461a      	mov	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	80da      	strh	r2, [r3, #6]
}
 8008ee0:	bf00      	nop
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ef2:	2180      	movs	r1, #128	@ 0x80
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fab6 	bl	8009466 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008efa:	2100      	movs	r1, #0
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fab2 	bl	8009466 <USBD_LL_StallEP>
}
 8008f02:	bf00      	nop
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b086      	sub	sp, #24
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	60f8      	str	r0, [r7, #12]
 8008f12:	60b9      	str	r1, [r7, #8]
 8008f14:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d036      	beq.n	8008f8e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f24:	6938      	ldr	r0, [r7, #16]
 8008f26:	f000 f836 	bl	8008f96 <USBD_GetLen>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f38:	7dfb      	ldrb	r3, [r7, #23]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	7812      	ldrb	r2, [r2, #0]
 8008f42:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	3301      	adds	r3, #1
 8008f48:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f4a:	7dfb      	ldrb	r3, [r7, #23]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	4413      	add	r3, r2
 8008f50:	2203      	movs	r2, #3
 8008f52:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f54:	7dfb      	ldrb	r3, [r7, #23]
 8008f56:	3301      	adds	r3, #1
 8008f58:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f5a:	e013      	b.n	8008f84 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	4413      	add	r3, r2
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	7812      	ldrb	r2, [r2, #0]
 8008f66:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	613b      	str	r3, [r7, #16]
    idx++;
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
 8008f70:	3301      	adds	r3, #1
 8008f72:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	4413      	add	r3, r2
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f7e:	7dfb      	ldrb	r3, [r7, #23]
 8008f80:	3301      	adds	r3, #1
 8008f82:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1e7      	bne.n	8008f5c <USBD_GetString+0x52>
 8008f8c:	e000      	b.n	8008f90 <USBD_GetString+0x86>
    return;
 8008f8e:	bf00      	nop
  }
}
 8008f90:	3718      	adds	r7, #24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b085      	sub	sp, #20
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fa6:	e005      	b.n	8008fb4 <USBD_GetLen+0x1e>
  {
    len++;
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	3301      	adds	r3, #1
 8008fac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1f5      	bne.n	8008fa8 <USBD_GetLen+0x12>
  }

  return len;
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b084      	sub	sp, #16
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	60f8      	str	r0, [r7, #12]
 8008fd2:	60b9      	str	r1, [r7, #8]
 8008fd4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2202      	movs	r2, #2
 8008fda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	2100      	movs	r1, #0
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fac1 	bl	8009578 <USBD_LL_Transmit>

  return USBD_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	2100      	movs	r1, #0
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f000 fab0 	bl	8009578 <USBD_LL_Transmit>

  return USBD_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	60f8      	str	r0, [r7, #12]
 800902a:	60b9      	str	r1, [r7, #8]
 800902c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2203      	movs	r2, #3
 8009032:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	2100      	movs	r1, #0
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f000 fab4 	bl	80095ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	2100      	movs	r1, #0
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f000 faa3 	bl	80095ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b082      	sub	sp, #8
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2204      	movs	r2, #4
 800908a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800908e:	2300      	movs	r3, #0
 8009090:	2200      	movs	r2, #0
 8009092:	2100      	movs	r1, #0
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fa6f 	bl	8009578 <USBD_LL_Transmit>

  return USBD_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2205      	movs	r2, #5
 80090b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090b4:	2300      	movs	r3, #0
 80090b6:	2200      	movs	r2, #0
 80090b8:	2100      	movs	r1, #0
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fa7d 	bl	80095ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80090de:	4619      	mov	r1, r3
 80090e0:	4610      	mov	r0, r2
 80090e2:	f7fe ff1d 	bl	8007f20 <USBD_LL_SetupStage>
}
 80090e6:	bf00      	nop
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b082      	sub	sp, #8
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	460b      	mov	r3, r1
 80090f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8009100:	78fa      	ldrb	r2, [r7, #3]
 8009102:	6879      	ldr	r1, [r7, #4]
 8009104:	4613      	mov	r3, r2
 8009106:	00db      	lsls	r3, r3, #3
 8009108:	1a9b      	subs	r3, r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	440b      	add	r3, r1
 800910e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	4619      	mov	r1, r3
 8009118:	f7fe ff57 	bl	8007fca <USBD_LL_DataOutStage>
}
 800911c:	bf00      	nop
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	4613      	mov	r3, r2
 800913c:	00db      	lsls	r3, r3, #3
 800913e:	1a9b      	subs	r3, r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	440b      	add	r3, r1
 8009144:	3348      	adds	r3, #72	@ 0x48
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	4619      	mov	r1, r3
 800914c:	f7fe ffa0 	bl	8008090 <USBD_LL_DataInStage>
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009166:	4618      	mov	r0, r3
 8009168:	f7ff f8af 	bl	80082ca <USBD_LL_SOF>
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800917c:	2301      	movs	r3, #1
 800917e:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	2b02      	cmp	r3, #2
 8009186:	d102      	bne.n	800918e <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 8009188:	2301      	movs	r3, #1
 800918a:	73fb      	strb	r3, [r7, #15]
 800918c:	e008      	b.n	80091a0 <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d102      	bne.n	800919c <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]
 800919a:	e001      	b.n	80091a0 <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800919c:	f7f7 fb52 	bl	8000844 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80091a6:	7bfa      	ldrb	r2, [r7, #15]
 80091a8:	4611      	mov	r1, r2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7ff f84f 	bl	800824e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7ff f800 	bl	80081bc <USBD_LL_Reset>
}
 80091bc:	bf00      	nop
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7ff f84b 	bl	800826e <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	6812      	ldr	r2, [r2, #0]
 80091e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80091ea:	f043 0301 	orr.w	r3, r3, #1
 80091ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a1b      	ldr	r3, [r3, #32]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d005      	beq.n	8009204 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091f8:	4b04      	ldr	r3, [pc, #16]	@ (800920c <HAL_PCD_SuspendCallback+0x48>)
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	4a03      	ldr	r2, [pc, #12]	@ (800920c <HAL_PCD_SuspendCallback+0x48>)
 80091fe:	f043 0306 	orr.w	r3, r3, #6
 8009202:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 8009204:	bf00      	nop
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	e000ed00 	.word	0xe000ed00

08009210 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800921e:	4618      	mov	r0, r3
 8009220:	f7ff f83b 	bl	800829a <USBD_LL_Resume>
}
 8009224:	bf00      	nop
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	460b      	mov	r3, r1
 8009236:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800923e:	78fa      	ldrb	r2, [r7, #3]
 8009240:	4611      	mov	r1, r2
 8009242:	4618      	mov	r0, r3
 8009244:	f7ff f889 	bl	800835a <USBD_LL_IsoOUTIncomplete>
}
 8009248:	bf00      	nop
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009262:	78fa      	ldrb	r2, [r7, #3]
 8009264:	4611      	mov	r1, r2
 8009266:	4618      	mov	r0, r3
 8009268:	f7ff f851 	bl	800830e <USBD_LL_IsoINIncomplete>
}
 800926c:	bf00      	nop
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff f88f 	bl	80083a6 <USBD_LL_DevConnected>
}
 8009288:	bf00      	nop
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800929e:	4618      	mov	r0, r3
 80092a0:	f7ff f88c 	bl	80083bc <USBD_LL_DevDisconnected>
}
 80092a4:	bf00      	nop
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 80092b4:	4b27      	ldr	r3, [pc, #156]	@ (8009354 <USBD_LL_Init+0xa8>)
 80092b6:	4a28      	ldr	r2, [pc, #160]	@ (8009358 <USBD_LL_Init+0xac>)
 80092b8:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d142      	bne.n	8009348 <USBD_LL_Init+0x9c>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 80092c2:	4b24      	ldr	r3, [pc, #144]	@ (8009354 <USBD_LL_Init+0xa8>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    pdev->pData = hpcd_USB_OTG_PTR;
 80092cc:	4b21      	ldr	r3, [pc, #132]	@ (8009354 <USBD_LL_Init+0xa8>)
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
    pma_track += 128;
#endif

#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFo(hpcd_USB_OTG_PTR, 128); // ALL OUT EP Buffer
 80092d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009354 <USBD_LL_Init+0xa8>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2180      	movs	r1, #128	@ 0x80
 80092dc:	4618      	mov	r0, r3
 80092de:	f7f9 f944 	bl	800256a <HAL_PCDEx_SetRxFiFo>

    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, 0, 16); // EP0 IN
 80092e2:	4b1c      	ldr	r3, [pc, #112]	@ (8009354 <USBD_LL_Init+0xa8>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2210      	movs	r2, #16
 80092e8:	2100      	movs	r1, #0
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7f9 f8f6 	bl	80024dc <HAL_PCDEx_SetTxFiFo>

#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80092f0:	2300      	movs	r3, #0
 80092f2:	73fb      	strb	r3, [r7, #15]
 80092f4:	e01a      	b.n	800932c <USBD_LL_Init+0x80>
    {
      HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 32);
 80092f6:	4b17      	ldr	r3, [pc, #92]	@ (8009354 <USBD_LL_Init+0xa8>)
 80092f8:	6818      	ldr	r0, [r3, #0]
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
 80092fc:	4a17      	ldr	r2, [pc, #92]	@ (800935c <USBD_LL_Init+0xb0>)
 80092fe:	5cd3      	ldrb	r3, [r2, r3]
 8009300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2220      	movs	r2, #32
 8009308:	4619      	mov	r1, r3
 800930a:	f7f9 f8e7 	bl	80024dc <HAL_PCDEx_SetTxFiFo>
      HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 16);
 800930e:	4b11      	ldr	r3, [pc, #68]	@ (8009354 <USBD_LL_Init+0xa8>)
 8009310:	6818      	ldr	r0, [r3, #0]
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	4a12      	ldr	r2, [pc, #72]	@ (8009360 <USBD_LL_Init+0xb4>)
 8009316:	5cd3      	ldrb	r3, [r2, r3]
 8009318:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800931c:	b2db      	uxtb	r3, r3
 800931e:	2210      	movs	r2, #16
 8009320:	4619      	mov	r1, r3
 8009322:	f7f9 f8db 	bl	80024dc <HAL_PCDEx_SetTxFiFo>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	3301      	adds	r3, #1
 800932a:	73fb      	strb	r3, [r7, #15]
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d0e1      	beq.n	80092f6 <USBD_LL_Init+0x4a>
#endif
#if (USBD_USE_UVC == 1)
    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (UVC_IN_EP & 0x7F), 512);
#endif
#if (USBD_USE_MSC == 1)
    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (MSC_IN_EP & 0x7F), 32);
 8009332:	4b08      	ldr	r3, [pc, #32]	@ (8009354 <USBD_LL_Init+0xa8>)
 8009334:	6818      	ldr	r0, [r3, #0]
 8009336:	4b0b      	ldr	r3, [pc, #44]	@ (8009364 <USBD_LL_Init+0xb8>)
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2220      	movs	r2, #32
 8009342:	4619      	mov	r1, r3
 8009344:	f7f9 f8ca 	bl	80024dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	200092e0 	.word	0x200092e0
 8009358:	20000378 	.word	0x20000378
 800935c:	20008d28 	.word	0x20008d28
 8009360:	20008d30 	.word	0x20008d30
 8009364:	200001ba 	.word	0x200001ba

08009368 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009370:	2300      	movs	r3, #0
 8009372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800937e:	4618      	mov	r0, r3
 8009380:	f7f8 f87c 	bl	800147c <HAL_PCD_Start>
 8009384:	4603      	mov	r3, r0
 8009386:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009388:	7bfb      	ldrb	r3, [r7, #15]
 800938a:	4618      	mov	r0, r3
 800938c:	f000 f94a 	bl	8009624 <USBD_Get_USB_Status>
 8009390:	4603      	mov	r3, r0
 8009392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009394:	7bbb      	ldrb	r3, [r7, #14]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b084      	sub	sp, #16
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	4608      	mov	r0, r1
 80093a8:	4611      	mov	r1, r2
 80093aa:	461a      	mov	r2, r3
 80093ac:	4603      	mov	r3, r0
 80093ae:	70fb      	strb	r3, [r7, #3]
 80093b0:	460b      	mov	r3, r1
 80093b2:	70bb      	strb	r3, [r7, #2]
 80093b4:	4613      	mov	r3, r2
 80093b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 80093c6:	78bb      	ldrb	r3, [r7, #2]
 80093c8:	883a      	ldrh	r2, [r7, #0]
 80093ca:	78f9      	ldrb	r1, [r7, #3]
 80093cc:	f7f8 fc60 	bl	8001c90 <HAL_PCD_EP_Open>
 80093d0:	4603      	mov	r3, r0
 80093d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 f924 	bl	8009624 <USBD_Get_USB_Status>
 80093dc:	4603      	mov	r3, r0
 80093de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	460b      	mov	r3, r1
 80093f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093fa:	2300      	movs	r3, #0
 80093fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8009404:	78fa      	ldrb	r2, [r7, #3]
 8009406:	4611      	mov	r1, r2
 8009408:	4618      	mov	r0, r3
 800940a:	f7f8 fca9 	bl	8001d60 <HAL_PCD_EP_Close>
 800940e:	4603      	mov	r3, r0
 8009410:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	4618      	mov	r0, r3
 8009416:	f000 f905 	bl	8009624 <USBD_Get_USB_Status>
 800941a:	4603      	mov	r3, r0
 800941c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800941e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8009442:	78fa      	ldrb	r2, [r7, #3]
 8009444:	4611      	mov	r1, r2
 8009446:	4618      	mov	r0, r3
 8009448:	f7f8 fe3b 	bl	80020c2 <HAL_PCD_EP_Flush>
 800944c:	4603      	mov	r3, r0
 800944e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009450:	7bfb      	ldrb	r3, [r7, #15]
 8009452:	4618      	mov	r0, r3
 8009454:	f000 f8e6 	bl	8009624 <USBD_Get_USB_Status>
 8009458:	4603      	mov	r3, r0
 800945a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800945c:	7bbb      	ldrb	r3, [r7, #14]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b084      	sub	sp, #16
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	460b      	mov	r3, r1
 8009470:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8009480:	78fa      	ldrb	r2, [r7, #3]
 8009482:	4611      	mov	r1, r2
 8009484:	4618      	mov	r0, r3
 8009486:	f7f8 fd62 	bl	8001f4e <HAL_PCD_EP_SetStall>
 800948a:	4603      	mov	r3, r0
 800948c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800948e:	7bfb      	ldrb	r3, [r7, #15]
 8009490:	4618      	mov	r0, r3
 8009492:	f000 f8c7 	bl	8009624 <USBD_Get_USB_Status>
 8009496:	4603      	mov	r3, r0
 8009498:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800949a:	7bbb      	ldrb	r3, [r7, #14]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80094be:	78fa      	ldrb	r2, [r7, #3]
 80094c0:	4611      	mov	r1, r2
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7f8 fda7 	bl	8002016 <HAL_PCD_EP_ClrStall>
 80094c8:	4603      	mov	r3, r0
 80094ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 f8a8 	bl	8009624 <USBD_Get_USB_Status>
 80094d4:	4603      	mov	r3, r0
 80094d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b085      	sub	sp, #20
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	460b      	mov	r3, r1
 80094ec:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80094f4:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 80094f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	da0b      	bge.n	8009516 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094fe:	78fb      	ldrb	r3, [r7, #3]
 8009500:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009504:	68f9      	ldr	r1, [r7, #12]
 8009506:	4613      	mov	r3, r2
 8009508:	00db      	lsls	r3, r3, #3
 800950a:	1a9b      	subs	r3, r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	440b      	add	r3, r1
 8009510:	333e      	adds	r3, #62	@ 0x3e
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	e00b      	b.n	800952e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009516:	78fb      	ldrb	r3, [r7, #3]
 8009518:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800951c:	68f9      	ldr	r1, [r7, #12]
 800951e:	4613      	mov	r3, r2
 8009520:	00db      	lsls	r3, r3, #3
 8009522:	1a9b      	subs	r3, r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	440b      	add	r3, r1
 8009528:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800952c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800952e:	4618      	mov	r0, r3
 8009530:	3714      	adds	r7, #20
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr

0800953a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	460b      	mov	r3, r1
 8009544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8009554:	78fa      	ldrb	r2, [r7, #3]
 8009556:	4611      	mov	r1, r2
 8009558:	4618      	mov	r0, r3
 800955a:	f7f8 fb74 	bl	8001c46 <HAL_PCD_SetAddress>
 800955e:	4603      	mov	r3, r0
 8009560:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	4618      	mov	r0, r3
 8009566:	f000 f85d 	bl	8009624 <USBD_Get_USB_Status>
 800956a:	4603      	mov	r3, r0
 800956c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800956e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	607a      	str	r2, [r7, #4]
 8009582:	603b      	str	r3, [r7, #0]
 8009584:	460b      	mov	r3, r1
 8009586:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 8009596:	7af9      	ldrb	r1, [r7, #11]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	f7f8 fc8d 	bl	8001eba <HAL_PCD_EP_Transmit>
 80095a0:	4603      	mov	r3, r0
 80095a2:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 f83c 	bl	8009624 <USBD_Get_USB_Status>
 80095ac:	4603      	mov	r3, r0
 80095ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b086      	sub	sp, #24
 80095be:	af00      	add	r7, sp, #0
 80095c0:	60f8      	str	r0, [r7, #12]
 80095c2:	607a      	str	r2, [r7, #4]
 80095c4:	603b      	str	r3, [r7, #0]
 80095c6:	460b      	mov	r3, r1
 80095c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 80095d8:	7af9      	ldrb	r1, [r7, #11]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	f7f8 fc09 	bl	8001df4 <HAL_PCD_EP_Receive>
 80095e2:	4603      	mov	r3, r0
 80095e4:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 f81b 	bl	8009624 <USBD_Get_USB_Status>
 80095ee:	4603      	mov	r3, r0
 80095f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3718      	adds	r7, #24
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800960e:	78fa      	ldrb	r2, [r7, #3]
 8009610:	4611      	mov	r1, r2
 8009612:	4618      	mov	r0, r3
 8009614:	f7f8 fc39 	bl	8001e8a <HAL_PCD_EP_GetRxCount>
 8009618:	4603      	mov	r3, r0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
	...

08009624 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	4603      	mov	r3, r0
 800962c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009632:	79fb      	ldrb	r3, [r7, #7]
 8009634:	2b03      	cmp	r3, #3
 8009636:	d817      	bhi.n	8009668 <USBD_Get_USB_Status+0x44>
 8009638:	a201      	add	r2, pc, #4	@ (adr r2, 8009640 <USBD_Get_USB_Status+0x1c>)
 800963a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963e:	bf00      	nop
 8009640:	08009651 	.word	0x08009651
 8009644:	08009657 	.word	0x08009657
 8009648:	0800965d 	.word	0x0800965d
 800964c:	08009663 	.word	0x08009663
  {
  case HAL_OK:
    usb_status = USBD_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	73fb      	strb	r3, [r7, #15]
    break;
 8009654:	e00b      	b.n	800966e <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 8009656:	2303      	movs	r3, #3
 8009658:	73fb      	strb	r3, [r7, #15]
    break;
 800965a:	e008      	b.n	800966e <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800965c:	2301      	movs	r3, #1
 800965e:	73fb      	strb	r3, [r7, #15]
    break;
 8009660:	e005      	b.n	800966e <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 8009662:	2303      	movs	r3, #3
 8009664:	73fb      	strb	r3, [r7, #15]
    break;
 8009666:	e002      	b.n	800966e <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 8009668:	2303      	movs	r3, #3
 800966a:	73fb      	strb	r3, [r7, #15]
    break;
 800966c:	bf00      	nop
  }
  return usb_status;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3714      	adds	r7, #20
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <__NVIC_SetPriority>:
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	4603      	mov	r3, r0
 8009684:	6039      	str	r1, [r7, #0]
 8009686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800968c:	2b00      	cmp	r3, #0
 800968e:	db0a      	blt.n	80096a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	b2da      	uxtb	r2, r3
 8009694:	490c      	ldr	r1, [pc, #48]	@ (80096c8 <__NVIC_SetPriority+0x4c>)
 8009696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800969a:	0112      	lsls	r2, r2, #4
 800969c:	b2d2      	uxtb	r2, r2
 800969e:	440b      	add	r3, r1
 80096a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80096a4:	e00a      	b.n	80096bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	4908      	ldr	r1, [pc, #32]	@ (80096cc <__NVIC_SetPriority+0x50>)
 80096ac:	79fb      	ldrb	r3, [r7, #7]
 80096ae:	f003 030f 	and.w	r3, r3, #15
 80096b2:	3b04      	subs	r3, #4
 80096b4:	0112      	lsls	r2, r2, #4
 80096b6:	b2d2      	uxtb	r2, r2
 80096b8:	440b      	add	r3, r1
 80096ba:	761a      	strb	r2, [r3, #24]
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	e000e100 	.word	0xe000e100
 80096cc:	e000ed00 	.word	0xe000ed00

080096d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80096d0:	b580      	push	{r7, lr}
 80096d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80096d4:	4b05      	ldr	r3, [pc, #20]	@ (80096ec <SysTick_Handler+0x1c>)
 80096d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80096d8:	f001 fd6c 	bl	800b1b4 <xTaskGetSchedulerState>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d001      	beq.n	80096e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80096e2:	f002 fb61 	bl	800bda8 <xPortSysTickHandler>
  }
}
 80096e6:	bf00      	nop
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	e000e010 	.word	0xe000e010

080096f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80096f0:	b580      	push	{r7, lr}
 80096f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80096f4:	2100      	movs	r1, #0
 80096f6:	f06f 0004 	mvn.w	r0, #4
 80096fa:	f7ff ffbf 	bl	800967c <__NVIC_SetPriority>
#endif
}
 80096fe:	bf00      	nop
 8009700:	bd80      	pop	{r7, pc}
	...

08009704 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800970a:	f3ef 8305 	mrs	r3, IPSR
 800970e:	603b      	str	r3, [r7, #0]
  return(result);
 8009710:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009712:	2b00      	cmp	r3, #0
 8009714:	d003      	beq.n	800971e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009716:	f06f 0305 	mvn.w	r3, #5
 800971a:	607b      	str	r3, [r7, #4]
 800971c:	e00c      	b.n	8009738 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800971e:	4b0a      	ldr	r3, [pc, #40]	@ (8009748 <osKernelInitialize+0x44>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d105      	bne.n	8009732 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009726:	4b08      	ldr	r3, [pc, #32]	@ (8009748 <osKernelInitialize+0x44>)
 8009728:	2201      	movs	r2, #1
 800972a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800972c:	2300      	movs	r3, #0
 800972e:	607b      	str	r3, [r7, #4]
 8009730:	e002      	b.n	8009738 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009732:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009736:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009738:	687b      	ldr	r3, [r7, #4]
}
 800973a:	4618      	mov	r0, r3
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	200092e4 	.word	0x200092e4

0800974c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009752:	f3ef 8305 	mrs	r3, IPSR
 8009756:	603b      	str	r3, [r7, #0]
  return(result);
 8009758:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800975a:	2b00      	cmp	r3, #0
 800975c:	d003      	beq.n	8009766 <osKernelStart+0x1a>
    stat = osErrorISR;
 800975e:	f06f 0305 	mvn.w	r3, #5
 8009762:	607b      	str	r3, [r7, #4]
 8009764:	e010      	b.n	8009788 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009766:	4b0b      	ldr	r3, [pc, #44]	@ (8009794 <osKernelStart+0x48>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d109      	bne.n	8009782 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800976e:	f7ff ffbf 	bl	80096f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009772:	4b08      	ldr	r3, [pc, #32]	@ (8009794 <osKernelStart+0x48>)
 8009774:	2202      	movs	r2, #2
 8009776:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009778:	f001 f8a6 	bl	800a8c8 <vTaskStartScheduler>
      stat = osOK;
 800977c:	2300      	movs	r3, #0
 800977e:	607b      	str	r3, [r7, #4]
 8009780:	e002      	b.n	8009788 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009782:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009786:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009788:	687b      	ldr	r3, [r7, #4]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	200092e4 	.word	0x200092e4

08009798 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800979e:	f3ef 8305 	mrs	r3, IPSR
 80097a2:	603b      	str	r3, [r7, #0]
  return(result);
 80097a4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80097aa:	f001 f9b9 	bl	800ab20 <xTaskGetTickCountFromISR>
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	e002      	b.n	80097b8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80097b2:	f001 f9a5 	bl	800ab00 <xTaskGetTickCount>
 80097b6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80097b8:	687b      	ldr	r3, [r7, #4]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b08e      	sub	sp, #56	@ 0x38
 80097c6:	af04      	add	r7, sp, #16
 80097c8:	60f8      	str	r0, [r7, #12]
 80097ca:	60b9      	str	r1, [r7, #8]
 80097cc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097d2:	f3ef 8305 	mrs	r3, IPSR
 80097d6:	617b      	str	r3, [r7, #20]
  return(result);
 80097d8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d17e      	bne.n	80098dc <osThreadNew+0x11a>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d07b      	beq.n	80098dc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80097e4:	2380      	movs	r3, #128	@ 0x80
 80097e6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80097e8:	2318      	movs	r3, #24
 80097ea:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80097ec:	2300      	movs	r3, #0
 80097ee:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80097f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80097f4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d045      	beq.n	8009888 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d002      	beq.n	800980a <osThreadNew+0x48>
        name = attr->name;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d002      	beq.n	8009818 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d008      	beq.n	8009830 <osThreadNew+0x6e>
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	2b38      	cmp	r3, #56	@ 0x38
 8009822:	d805      	bhi.n	8009830 <osThreadNew+0x6e>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <osThreadNew+0x72>
        return (NULL);
 8009830:	2300      	movs	r3, #0
 8009832:	e054      	b.n	80098de <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	695b      	ldr	r3, [r3, #20]
 8009840:	089b      	lsrs	r3, r3, #2
 8009842:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00e      	beq.n	800986a <osThreadNew+0xa8>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	2ba7      	cmp	r3, #167	@ 0xa7
 8009852:	d90a      	bls.n	800986a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009858:	2b00      	cmp	r3, #0
 800985a:	d006      	beq.n	800986a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d002      	beq.n	800986a <osThreadNew+0xa8>
        mem = 1;
 8009864:	2301      	movs	r3, #1
 8009866:	61bb      	str	r3, [r7, #24]
 8009868:	e010      	b.n	800988c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10c      	bne.n	800988c <osThreadNew+0xca>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d108      	bne.n	800988c <osThreadNew+0xca>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d104      	bne.n	800988c <osThreadNew+0xca>
          mem = 0;
 8009882:	2300      	movs	r3, #0
 8009884:	61bb      	str	r3, [r7, #24]
 8009886:	e001      	b.n	800988c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009888:	2300      	movs	r3, #0
 800988a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d110      	bne.n	80098b4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800989a:	9202      	str	r2, [sp, #8]
 800989c:	9301      	str	r3, [sp, #4]
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	6a3a      	ldr	r2, [r7, #32]
 80098a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 fe19 	bl	800a4e0 <xTaskCreateStatic>
 80098ae:	4603      	mov	r3, r0
 80098b0:	613b      	str	r3, [r7, #16]
 80098b2:	e013      	b.n	80098dc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d110      	bne.n	80098dc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80098ba:	6a3b      	ldr	r3, [r7, #32]
 80098bc:	b29a      	uxth	r2, r3
 80098be:	f107 0310 	add.w	r3, r7, #16
 80098c2:	9301      	str	r3, [sp, #4]
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f000 fe67 	bl	800a5a0 <xTaskCreate>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d001      	beq.n	80098dc <osThreadNew+0x11a>
            hTask = NULL;
 80098d8:	2300      	movs	r3, #0
 80098da:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80098dc:	693b      	ldr	r3, [r7, #16]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3728      	adds	r7, #40	@ 0x28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b084      	sub	sp, #16
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098ee:	f3ef 8305 	mrs	r3, IPSR
 80098f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80098f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d003      	beq.n	8009902 <osDelay+0x1c>
    stat = osErrorISR;
 80098fa:	f06f 0305 	mvn.w	r3, #5
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	e007      	b.n	8009912 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009902:	2300      	movs	r3, #0
 8009904:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <osDelay+0x2c>
      vTaskDelay(ticks);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 ffa5 	bl	800a85c <vTaskDelay>
    }
  }

  return (stat);
 8009912:	68fb      	ldr	r3, [r7, #12]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	4a07      	ldr	r2, [pc, #28]	@ (8009948 <vApplicationGetIdleTaskMemory+0x2c>)
 800992c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	4a06      	ldr	r2, [pc, #24]	@ (800994c <vApplicationGetIdleTaskMemory+0x30>)
 8009932:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2280      	movs	r2, #128	@ 0x80
 8009938:	601a      	str	r2, [r3, #0]
}
 800993a:	bf00      	nop
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	200092e8 	.word	0x200092e8
 800994c:	20009390 	.word	0x20009390

08009950 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4a07      	ldr	r2, [pc, #28]	@ (800997c <vApplicationGetTimerTaskMemory+0x2c>)
 8009960:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	4a06      	ldr	r2, [pc, #24]	@ (8009980 <vApplicationGetTimerTaskMemory+0x30>)
 8009966:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800996e:	601a      	str	r2, [r3, #0]
}
 8009970:	bf00      	nop
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	20009590 	.word	0x20009590
 8009980:	20009638 	.word	0x20009638

08009984 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f103 0208 	add.w	r2, r3, #8
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800999c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f103 0208 	add.w	r2, r3, #8
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f103 0208 	add.w	r2, r3, #8
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80099d2:	bf00      	nop
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099de:	b480      	push	{r7}
 80099e0:	b085      	sub	sp, #20
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	689a      	ldr	r2, [r3, #8]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	683a      	ldr	r2, [r7, #0]
 8009a02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	1c5a      	adds	r2, r3, #1
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	601a      	str	r2, [r3, #0]
}
 8009a1a:	bf00      	nop
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a26:	b480      	push	{r7}
 8009a28:	b085      	sub	sp, #20
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a3c:	d103      	bne.n	8009a46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	60fb      	str	r3, [r7, #12]
 8009a44:	e00c      	b.n	8009a60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	3308      	adds	r3, #8
 8009a4a:	60fb      	str	r3, [r7, #12]
 8009a4c:	e002      	b.n	8009a54 <vListInsert+0x2e>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d2f6      	bcs.n	8009a4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	683a      	ldr	r2, [r7, #0]
 8009a6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	1c5a      	adds	r2, r3, #1
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	601a      	str	r2, [r3, #0]
}
 8009a8c:	bf00      	nop
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	6892      	ldr	r2, [r2, #8]
 8009aae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	6852      	ldr	r2, [r2, #4]
 8009ab8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d103      	bne.n	8009acc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	689a      	ldr	r2, [r3, #8]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	1e5a      	subs	r2, r3, #1
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10b      	bne.n	8009b18 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009b12:	bf00      	nop
 8009b14:	bf00      	nop
 8009b16:	e7fd      	b.n	8009b14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009b18:	f002 f8b6 	bl	800bc88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b24:	68f9      	ldr	r1, [r7, #12]
 8009b26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009b28:	fb01 f303 	mul.w	r3, r1, r3
 8009b2c:	441a      	add	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	68f9      	ldr	r1, [r7, #12]
 8009b4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009b4e:	fb01 f303 	mul.w	r3, r1, r3
 8009b52:	441a      	add	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	22ff      	movs	r2, #255	@ 0xff
 8009b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	22ff      	movs	r2, #255	@ 0xff
 8009b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d114      	bne.n	8009b98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d01a      	beq.n	8009bac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	3310      	adds	r3, #16
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f001 f954 	bl	800ae28 <xTaskRemoveFromEventList>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d012      	beq.n	8009bac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b86:	4b0d      	ldr	r3, [pc, #52]	@ (8009bbc <xQueueGenericReset+0xd0>)
 8009b88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	e009      	b.n	8009bac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	3310      	adds	r3, #16
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7ff fef1 	bl	8009984 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3324      	adds	r3, #36	@ 0x24
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7ff feec 	bl	8009984 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009bac:	f002 f89e 	bl	800bcec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009bb0:	2301      	movs	r3, #1
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	e000ed04 	.word	0xe000ed04

08009bc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08e      	sub	sp, #56	@ 0x38
 8009bc4:	af02      	add	r7, sp, #8
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10b      	bne.n	8009bec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009be6:	bf00      	nop
 8009be8:	bf00      	nop
 8009bea:	e7fd      	b.n	8009be8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d10b      	bne.n	8009c0a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop
 8009c08:	e7fd      	b.n	8009c06 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d002      	beq.n	8009c16 <xQueueGenericCreateStatic+0x56>
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d001      	beq.n	8009c1a <xQueueGenericCreateStatic+0x5a>
 8009c16:	2301      	movs	r3, #1
 8009c18:	e000      	b.n	8009c1c <xQueueGenericCreateStatic+0x5c>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10b      	bne.n	8009c38 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	623b      	str	r3, [r7, #32]
}
 8009c32:	bf00      	nop
 8009c34:	bf00      	nop
 8009c36:	e7fd      	b.n	8009c34 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d102      	bne.n	8009c44 <xQueueGenericCreateStatic+0x84>
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d101      	bne.n	8009c48 <xQueueGenericCreateStatic+0x88>
 8009c44:	2301      	movs	r3, #1
 8009c46:	e000      	b.n	8009c4a <xQueueGenericCreateStatic+0x8a>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10b      	bne.n	8009c66 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	61fb      	str	r3, [r7, #28]
}
 8009c60:	bf00      	nop
 8009c62:	bf00      	nop
 8009c64:	e7fd      	b.n	8009c62 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009c66:	2350      	movs	r3, #80	@ 0x50
 8009c68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	2b50      	cmp	r3, #80	@ 0x50
 8009c6e:	d00b      	beq.n	8009c88 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	61bb      	str	r3, [r7, #24]
}
 8009c82:	bf00      	nop
 8009c84:	bf00      	nop
 8009c86:	e7fd      	b.n	8009c84 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00d      	beq.n	8009cb0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c9c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	68b9      	ldr	r1, [r7, #8]
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f000 f805 	bl	8009cba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3730      	adds	r7, #48	@ 0x30
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	60f8      	str	r0, [r7, #12]
 8009cc2:	60b9      	str	r1, [r7, #8]
 8009cc4:	607a      	str	r2, [r7, #4]
 8009cc6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d103      	bne.n	8009cd6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	69ba      	ldr	r2, [r7, #24]
 8009cd2:	601a      	str	r2, [r3, #0]
 8009cd4:	e002      	b.n	8009cdc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ce8:	2101      	movs	r1, #1
 8009cea:	69b8      	ldr	r0, [r7, #24]
 8009cec:	f7ff fefe 	bl	8009aec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	78fa      	ldrb	r2, [r7, #3]
 8009cf4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009cf8:	bf00      	nop
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b08e      	sub	sp, #56	@ 0x38
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
 8009d0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10b      	bne.n	8009d34 <xQueueGenericSend+0x34>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009d2e:	bf00      	nop
 8009d30:	bf00      	nop
 8009d32:	e7fd      	b.n	8009d30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d103      	bne.n	8009d42 <xQueueGenericSend+0x42>
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d101      	bne.n	8009d46 <xQueueGenericSend+0x46>
 8009d42:	2301      	movs	r3, #1
 8009d44:	e000      	b.n	8009d48 <xQueueGenericSend+0x48>
 8009d46:	2300      	movs	r3, #0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10b      	bne.n	8009d64 <xQueueGenericSend+0x64>
	__asm volatile
 8009d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009d5e:	bf00      	nop
 8009d60:	bf00      	nop
 8009d62:	e7fd      	b.n	8009d60 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d103      	bne.n	8009d72 <xQueueGenericSend+0x72>
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d101      	bne.n	8009d76 <xQueueGenericSend+0x76>
 8009d72:	2301      	movs	r3, #1
 8009d74:	e000      	b.n	8009d78 <xQueueGenericSend+0x78>
 8009d76:	2300      	movs	r3, #0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10b      	bne.n	8009d94 <xQueueGenericSend+0x94>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	623b      	str	r3, [r7, #32]
}
 8009d8e:	bf00      	nop
 8009d90:	bf00      	nop
 8009d92:	e7fd      	b.n	8009d90 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d94:	f001 fa0e 	bl	800b1b4 <xTaskGetSchedulerState>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d102      	bne.n	8009da4 <xQueueGenericSend+0xa4>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d101      	bne.n	8009da8 <xQueueGenericSend+0xa8>
 8009da4:	2301      	movs	r3, #1
 8009da6:	e000      	b.n	8009daa <xQueueGenericSend+0xaa>
 8009da8:	2300      	movs	r3, #0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10b      	bne.n	8009dc6 <xQueueGenericSend+0xc6>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	61fb      	str	r3, [r7, #28]
}
 8009dc0:	bf00      	nop
 8009dc2:	bf00      	nop
 8009dc4:	e7fd      	b.n	8009dc2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dc6:	f001 ff5f 	bl	800bc88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d302      	bcc.n	8009ddc <xQueueGenericSend+0xdc>
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d129      	bne.n	8009e30 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	68b9      	ldr	r1, [r7, #8]
 8009de0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009de2:	f000 fa0f 	bl	800a204 <prvCopyDataToQueue>
 8009de6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d010      	beq.n	8009e12 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df2:	3324      	adds	r3, #36	@ 0x24
 8009df4:	4618      	mov	r0, r3
 8009df6:	f001 f817 	bl	800ae28 <xTaskRemoveFromEventList>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d013      	beq.n	8009e28 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e00:	4b3f      	ldr	r3, [pc, #252]	@ (8009f00 <xQueueGenericSend+0x200>)
 8009e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	e00a      	b.n	8009e28 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d007      	beq.n	8009e28 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e18:	4b39      	ldr	r3, [pc, #228]	@ (8009f00 <xQueueGenericSend+0x200>)
 8009e1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e1e:	601a      	str	r2, [r3, #0]
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e28:	f001 ff60 	bl	800bcec <vPortExitCritical>
				return pdPASS;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e063      	b.n	8009ef8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d103      	bne.n	8009e3e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e36:	f001 ff59 	bl	800bcec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	e05c      	b.n	8009ef8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d106      	bne.n	8009e52 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e44:	f107 0314 	add.w	r3, r7, #20
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f001 f851 	bl	800aef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e52:	f001 ff4b 	bl	800bcec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e56:	f000 fda7 	bl	800a9a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e5a:	f001 ff15 	bl	800bc88 <vPortEnterCritical>
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e64:	b25b      	sxtb	r3, r3
 8009e66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e6a:	d103      	bne.n	8009e74 <xQueueGenericSend+0x174>
 8009e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e7a:	b25b      	sxtb	r3, r3
 8009e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e80:	d103      	bne.n	8009e8a <xQueueGenericSend+0x18a>
 8009e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e84:	2200      	movs	r2, #0
 8009e86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e8a:	f001 ff2f 	bl	800bcec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e8e:	1d3a      	adds	r2, r7, #4
 8009e90:	f107 0314 	add.w	r3, r7, #20
 8009e94:	4611      	mov	r1, r2
 8009e96:	4618      	mov	r0, r3
 8009e98:	f001 f840 	bl	800af1c <xTaskCheckForTimeOut>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d124      	bne.n	8009eec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009ea2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ea4:	f000 faa6 	bl	800a3f4 <prvIsQueueFull>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d018      	beq.n	8009ee0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb0:	3310      	adds	r3, #16
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f000 ff64 	bl	800ad84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ebc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ebe:	f000 fa31 	bl	800a324 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009ec2:	f000 fd7f 	bl	800a9c4 <xTaskResumeAll>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f47f af7c 	bne.w	8009dc6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009ece:	4b0c      	ldr	r3, [pc, #48]	@ (8009f00 <xQueueGenericSend+0x200>)
 8009ed0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ed4:	601a      	str	r2, [r3, #0]
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	e772      	b.n	8009dc6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ee0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ee2:	f000 fa1f 	bl	800a324 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ee6:	f000 fd6d 	bl	800a9c4 <xTaskResumeAll>
 8009eea:	e76c      	b.n	8009dc6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009eec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009eee:	f000 fa19 	bl	800a324 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ef2:	f000 fd67 	bl	800a9c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009ef6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3738      	adds	r7, #56	@ 0x38
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	e000ed04 	.word	0xe000ed04

08009f04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b090      	sub	sp, #64	@ 0x40
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
 8009f10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10b      	bne.n	8009f34 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f2e:	bf00      	nop
 8009f30:	bf00      	nop
 8009f32:	e7fd      	b.n	8009f30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d103      	bne.n	8009f42 <xQueueGenericSendFromISR+0x3e>
 8009f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <xQueueGenericSendFromISR+0x42>
 8009f42:	2301      	movs	r3, #1
 8009f44:	e000      	b.n	8009f48 <xQueueGenericSendFromISR+0x44>
 8009f46:	2300      	movs	r3, #0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10b      	bne.n	8009f64 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f50:	f383 8811 	msr	BASEPRI, r3
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f5e:	bf00      	nop
 8009f60:	bf00      	nop
 8009f62:	e7fd      	b.n	8009f60 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d103      	bne.n	8009f72 <xQueueGenericSendFromISR+0x6e>
 8009f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d101      	bne.n	8009f76 <xQueueGenericSendFromISR+0x72>
 8009f72:	2301      	movs	r3, #1
 8009f74:	e000      	b.n	8009f78 <xQueueGenericSendFromISR+0x74>
 8009f76:	2300      	movs	r3, #0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10b      	bne.n	8009f94 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	623b      	str	r3, [r7, #32]
}
 8009f8e:	bf00      	nop
 8009f90:	bf00      	nop
 8009f92:	e7fd      	b.n	8009f90 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f94:	f001 ff58 	bl	800be48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009f98:	f3ef 8211 	mrs	r2, BASEPRI
 8009f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	61fa      	str	r2, [r7, #28]
 8009fae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009fb0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fb2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d302      	bcc.n	8009fc6 <xQueueGenericSendFromISR+0xc2>
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d12f      	bne.n	800a026 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fd6:	683a      	ldr	r2, [r7, #0]
 8009fd8:	68b9      	ldr	r1, [r7, #8]
 8009fda:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009fdc:	f000 f912 	bl	800a204 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009fe0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fe8:	d112      	bne.n	800a010 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d016      	beq.n	800a020 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff4:	3324      	adds	r3, #36	@ 0x24
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f000 ff16 	bl	800ae28 <xTaskRemoveFromEventList>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00e      	beq.n	800a020 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00b      	beq.n	800a020 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	e007      	b.n	800a020 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a010:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a014:	3301      	adds	r3, #1
 800a016:	b2db      	uxtb	r3, r3
 800a018:	b25a      	sxtb	r2, r3
 800a01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a020:	2301      	movs	r3, #1
 800a022:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a024:	e001      	b.n	800a02a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a026:	2300      	movs	r3, #0
 800a028:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a02a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a02c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a034:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3740      	adds	r7, #64	@ 0x40
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08c      	sub	sp, #48	@ 0x30
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a04c:	2300      	movs	r3, #0
 800a04e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10b      	bne.n	800a072 <xQueueReceive+0x32>
	__asm volatile
 800a05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05e:	f383 8811 	msr	BASEPRI, r3
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	f3bf 8f4f 	dsb	sy
 800a06a:	623b      	str	r3, [r7, #32]
}
 800a06c:	bf00      	nop
 800a06e:	bf00      	nop
 800a070:	e7fd      	b.n	800a06e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d103      	bne.n	800a080 <xQueueReceive+0x40>
 800a078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <xQueueReceive+0x44>
 800a080:	2301      	movs	r3, #1
 800a082:	e000      	b.n	800a086 <xQueueReceive+0x46>
 800a084:	2300      	movs	r3, #0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10b      	bne.n	800a0a2 <xQueueReceive+0x62>
	__asm volatile
 800a08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	61fb      	str	r3, [r7, #28]
}
 800a09c:	bf00      	nop
 800a09e:	bf00      	nop
 800a0a0:	e7fd      	b.n	800a09e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0a2:	f001 f887 	bl	800b1b4 <xTaskGetSchedulerState>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d102      	bne.n	800a0b2 <xQueueReceive+0x72>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <xQueueReceive+0x76>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e000      	b.n	800a0b8 <xQueueReceive+0x78>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10b      	bne.n	800a0d4 <xQueueReceive+0x94>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	61bb      	str	r3, [r7, #24]
}
 800a0ce:	bf00      	nop
 800a0d0:	bf00      	nop
 800a0d2:	e7fd      	b.n	800a0d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0d4:	f001 fdd8 	bl	800bc88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d01f      	beq.n	800a124 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0e4:	68b9      	ldr	r1, [r7, #8]
 800a0e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0e8:	f000 f8f6 	bl	800a2d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ee:	1e5a      	subs	r2, r3, #1
 800a0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00f      	beq.n	800a11c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fe:	3310      	adds	r3, #16
 800a100:	4618      	mov	r0, r3
 800a102:	f000 fe91 	bl	800ae28 <xTaskRemoveFromEventList>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d007      	beq.n	800a11c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a10c:	4b3c      	ldr	r3, [pc, #240]	@ (800a200 <xQueueReceive+0x1c0>)
 800a10e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a11c:	f001 fde6 	bl	800bcec <vPortExitCritical>
				return pdPASS;
 800a120:	2301      	movs	r3, #1
 800a122:	e069      	b.n	800a1f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d103      	bne.n	800a132 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a12a:	f001 fddf 	bl	800bcec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a12e:	2300      	movs	r3, #0
 800a130:	e062      	b.n	800a1f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a134:	2b00      	cmp	r3, #0
 800a136:	d106      	bne.n	800a146 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a138:	f107 0310 	add.w	r3, r7, #16
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 fed7 	bl	800aef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a142:	2301      	movs	r3, #1
 800a144:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a146:	f001 fdd1 	bl	800bcec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a14a:	f000 fc2d 	bl	800a9a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a14e:	f001 fd9b 	bl	800bc88 <vPortEnterCritical>
 800a152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a158:	b25b      	sxtb	r3, r3
 800a15a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a15e:	d103      	bne.n	800a168 <xQueueReceive+0x128>
 800a160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a162:	2200      	movs	r2, #0
 800a164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a16a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a16e:	b25b      	sxtb	r3, r3
 800a170:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a174:	d103      	bne.n	800a17e <xQueueReceive+0x13e>
 800a176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a17e:	f001 fdb5 	bl	800bcec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a182:	1d3a      	adds	r2, r7, #4
 800a184:	f107 0310 	add.w	r3, r7, #16
 800a188:	4611      	mov	r1, r2
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 fec6 	bl	800af1c <xTaskCheckForTimeOut>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d123      	bne.n	800a1de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a196:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a198:	f000 f916 	bl	800a3c8 <prvIsQueueEmpty>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d017      	beq.n	800a1d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a4:	3324      	adds	r3, #36	@ 0x24
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	4611      	mov	r1, r2
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 fdea 	bl	800ad84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1b2:	f000 f8b7 	bl	800a324 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1b6:	f000 fc05 	bl	800a9c4 <xTaskResumeAll>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d189      	bne.n	800a0d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a1c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a200 <xQueueReceive+0x1c0>)
 800a1c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1c6:	601a      	str	r2, [r3, #0]
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	e780      	b.n	800a0d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a1d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1d4:	f000 f8a6 	bl	800a324 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1d8:	f000 fbf4 	bl	800a9c4 <xTaskResumeAll>
 800a1dc:	e77a      	b.n	800a0d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a1de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1e0:	f000 f8a0 	bl	800a324 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1e4:	f000 fbee 	bl	800a9c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1ea:	f000 f8ed 	bl	800a3c8 <prvIsQueueEmpty>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f43f af6f 	beq.w	800a0d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3730      	adds	r7, #48	@ 0x30
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	e000ed04 	.word	0xe000ed04

0800a204 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a210:	2300      	movs	r3, #0
 800a212:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a218:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10d      	bne.n	800a23e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d14d      	bne.n	800a2c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 ffde 	bl	800b1f0 <xTaskPriorityDisinherit>
 800a234:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	609a      	str	r2, [r3, #8]
 800a23c:	e043      	b.n	800a2c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d119      	bne.n	800a278 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6858      	ldr	r0, [r3, #4]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a24c:	461a      	mov	r2, r3
 800a24e:	68b9      	ldr	r1, [r7, #8]
 800a250:	f002 fa59 	bl	800c706 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a25c:	441a      	add	r2, r3
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d32b      	bcc.n	800a2c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	605a      	str	r2, [r3, #4]
 800a276:	e026      	b.n	800a2c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	68d8      	ldr	r0, [r3, #12]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a280:	461a      	mov	r2, r3
 800a282:	68b9      	ldr	r1, [r7, #8]
 800a284:	f002 fa3f 	bl	800c706 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	68da      	ldr	r2, [r3, #12]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a290:	425b      	negs	r3, r3
 800a292:	441a      	add	r2, r3
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	68da      	ldr	r2, [r3, #12]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d207      	bcs.n	800a2b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	689a      	ldr	r2, [r3, #8]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2ac:	425b      	negs	r3, r3
 800a2ae:	441a      	add	r2, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d105      	bne.n	800a2c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a2ce:	697b      	ldr	r3, [r7, #20]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3718      	adds	r7, #24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d018      	beq.n	800a31c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	68da      	ldr	r2, [r3, #12]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2f2:	441a      	add	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68da      	ldr	r2, [r3, #12]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	429a      	cmp	r2, r3
 800a302:	d303      	bcc.n	800a30c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	68d9      	ldr	r1, [r3, #12]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a314:	461a      	mov	r2, r3
 800a316:	6838      	ldr	r0, [r7, #0]
 800a318:	f002 f9f5 	bl	800c706 <memcpy>
	}
}
 800a31c:	bf00      	nop
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a32c:	f001 fcac 	bl	800bc88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a336:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a338:	e011      	b.n	800a35e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d012      	beq.n	800a368 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	3324      	adds	r3, #36	@ 0x24
 800a346:	4618      	mov	r0, r3
 800a348:	f000 fd6e 	bl	800ae28 <xTaskRemoveFromEventList>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d001      	beq.n	800a356 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a352:	f000 fe47 	bl	800afe4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a356:	7bfb      	ldrb	r3, [r7, #15]
 800a358:	3b01      	subs	r3, #1
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a35e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a362:	2b00      	cmp	r3, #0
 800a364:	dce9      	bgt.n	800a33a <prvUnlockQueue+0x16>
 800a366:	e000      	b.n	800a36a <prvUnlockQueue+0x46>
					break;
 800a368:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	22ff      	movs	r2, #255	@ 0xff
 800a36e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a372:	f001 fcbb 	bl	800bcec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a376:	f001 fc87 	bl	800bc88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a380:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a382:	e011      	b.n	800a3a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d012      	beq.n	800a3b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	3310      	adds	r3, #16
 800a390:	4618      	mov	r0, r3
 800a392:	f000 fd49 	bl	800ae28 <xTaskRemoveFromEventList>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d001      	beq.n	800a3a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a39c:	f000 fe22 	bl	800afe4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a3a0:	7bbb      	ldrb	r3, [r7, #14]
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	dce9      	bgt.n	800a384 <prvUnlockQueue+0x60>
 800a3b0:	e000      	b.n	800a3b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a3b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	22ff      	movs	r2, #255	@ 0xff
 800a3b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a3bc:	f001 fc96 	bl	800bcec <vPortExitCritical>
}
 800a3c0:	bf00      	nop
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a3d0:	f001 fc5a 	bl	800bc88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d102      	bne.n	800a3e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	60fb      	str	r3, [r7, #12]
 800a3e0:	e001      	b.n	800a3e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a3e6:	f001 fc81 	bl	800bcec <vPortExitCritical>

	return xReturn;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a3fc:	f001 fc44 	bl	800bc88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a408:	429a      	cmp	r2, r3
 800a40a:	d102      	bne.n	800a412 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a40c:	2301      	movs	r3, #1
 800a40e:	60fb      	str	r3, [r7, #12]
 800a410:	e001      	b.n	800a416 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a412:	2300      	movs	r3, #0
 800a414:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a416:	f001 fc69 	bl	800bcec <vPortExitCritical>

	return xReturn;
 800a41a:	68fb      	ldr	r3, [r7, #12]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a42e:	2300      	movs	r3, #0
 800a430:	60fb      	str	r3, [r7, #12]
 800a432:	e014      	b.n	800a45e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a434:	4a0f      	ldr	r2, [pc, #60]	@ (800a474 <vQueueAddToRegistry+0x50>)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d10b      	bne.n	800a458 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a440:	490c      	ldr	r1, [pc, #48]	@ (800a474 <vQueueAddToRegistry+0x50>)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	683a      	ldr	r2, [r7, #0]
 800a446:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a44a:	4a0a      	ldr	r2, [pc, #40]	@ (800a474 <vQueueAddToRegistry+0x50>)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	00db      	lsls	r3, r3, #3
 800a450:	4413      	add	r3, r2
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a456:	e006      	b.n	800a466 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	3301      	adds	r3, #1
 800a45c:	60fb      	str	r3, [r7, #12]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2b07      	cmp	r3, #7
 800a462:	d9e7      	bls.n	800a434 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a464:	bf00      	nop
 800a466:	bf00      	nop
 800a468:	3714      	adds	r7, #20
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	20009a38 	.word	0x20009a38

0800a478 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a488:	f001 fbfe 	bl	800bc88 <vPortEnterCritical>
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a492:	b25b      	sxtb	r3, r3
 800a494:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a498:	d103      	bne.n	800a4a2 <vQueueWaitForMessageRestricted+0x2a>
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4a8:	b25b      	sxtb	r3, r3
 800a4aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4ae:	d103      	bne.n	800a4b8 <vQueueWaitForMessageRestricted+0x40>
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4b8:	f001 fc18 	bl	800bcec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d106      	bne.n	800a4d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	3324      	adds	r3, #36	@ 0x24
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	68b9      	ldr	r1, [r7, #8]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 fc7f 	bl	800add0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a4d2:	6978      	ldr	r0, [r7, #20]
 800a4d4:	f7ff ff26 	bl	800a324 <prvUnlockQueue>
	}
 800a4d8:	bf00      	nop
 800a4da:	3718      	adds	r7, #24
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b08e      	sub	sp, #56	@ 0x38
 800a4e4:	af04      	add	r7, sp, #16
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d10b      	bne.n	800a50c <xTaskCreateStatic+0x2c>
	__asm volatile
 800a4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f8:	f383 8811 	msr	BASEPRI, r3
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	623b      	str	r3, [r7, #32]
}
 800a506:	bf00      	nop
 800a508:	bf00      	nop
 800a50a:	e7fd      	b.n	800a508 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10b      	bne.n	800a52a <xTaskCreateStatic+0x4a>
	__asm volatile
 800a512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	61fb      	str	r3, [r7, #28]
}
 800a524:	bf00      	nop
 800a526:	bf00      	nop
 800a528:	e7fd      	b.n	800a526 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a52a:	23a8      	movs	r3, #168	@ 0xa8
 800a52c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	2ba8      	cmp	r3, #168	@ 0xa8
 800a532:	d00b      	beq.n	800a54c <xTaskCreateStatic+0x6c>
	__asm volatile
 800a534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	61bb      	str	r3, [r7, #24]
}
 800a546:	bf00      	nop
 800a548:	bf00      	nop
 800a54a:	e7fd      	b.n	800a548 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a54c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a550:	2b00      	cmp	r3, #0
 800a552:	d01e      	beq.n	800a592 <xTaskCreateStatic+0xb2>
 800a554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a556:	2b00      	cmp	r3, #0
 800a558:	d01b      	beq.n	800a592 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a55c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a560:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a562:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a566:	2202      	movs	r2, #2
 800a568:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a56c:	2300      	movs	r3, #0
 800a56e:	9303      	str	r3, [sp, #12]
 800a570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a572:	9302      	str	r3, [sp, #8]
 800a574:	f107 0314 	add.w	r3, r7, #20
 800a578:	9301      	str	r3, [sp, #4]
 800a57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	68b9      	ldr	r1, [r7, #8]
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f000 f851 	bl	800a62c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a58a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a58c:	f000 f8f6 	bl	800a77c <prvAddNewTaskToReadyList>
 800a590:	e001      	b.n	800a596 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a592:	2300      	movs	r3, #0
 800a594:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a596:	697b      	ldr	r3, [r7, #20]
	}
 800a598:	4618      	mov	r0, r3
 800a59a:	3728      	adds	r7, #40	@ 0x28
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08c      	sub	sp, #48	@ 0x30
 800a5a4:	af04      	add	r7, sp, #16
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	603b      	str	r3, [r7, #0]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a5b0:	88fb      	ldrh	r3, [r7, #6]
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f001 fc89 	bl	800becc <pvPortMalloc>
 800a5ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00e      	beq.n	800a5e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a5c2:	20a8      	movs	r0, #168	@ 0xa8
 800a5c4:	f001 fc82 	bl	800becc <pvPortMalloc>
 800a5c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d003      	beq.n	800a5d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	631a      	str	r2, [r3, #48]	@ 0x30
 800a5d6:	e005      	b.n	800a5e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a5d8:	6978      	ldr	r0, [r7, #20]
 800a5da:	f001 fd45 	bl	800c068 <vPortFree>
 800a5de:	e001      	b.n	800a5e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d017      	beq.n	800a61a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a5f2:	88fa      	ldrh	r2, [r7, #6]
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	9303      	str	r3, [sp, #12]
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	9302      	str	r3, [sp, #8]
 800a5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5fe:	9301      	str	r3, [sp, #4]
 800a600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	68b9      	ldr	r1, [r7, #8]
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f000 f80f 	bl	800a62c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a60e:	69f8      	ldr	r0, [r7, #28]
 800a610:	f000 f8b4 	bl	800a77c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a614:	2301      	movs	r3, #1
 800a616:	61bb      	str	r3, [r7, #24]
 800a618:	e002      	b.n	800a620 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a61a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a61e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a620:	69bb      	ldr	r3, [r7, #24]
	}
 800a622:	4618      	mov	r0, r3
 800a624:	3720      	adds	r7, #32
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
	...

0800a62c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b088      	sub	sp, #32
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
 800a638:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	461a      	mov	r2, r3
 800a644:	21a5      	movs	r1, #165	@ 0xa5
 800a646:	f001 ff84 	bl	800c552 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a654:	3b01      	subs	r3, #1
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4413      	add	r3, r2
 800a65a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	f023 0307 	bic.w	r3, r3, #7
 800a662:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	f003 0307 	and.w	r3, r3, #7
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00b      	beq.n	800a686 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	617b      	str	r3, [r7, #20]
}
 800a680:	bf00      	nop
 800a682:	bf00      	nop
 800a684:	e7fd      	b.n	800a682 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d01f      	beq.n	800a6cc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a68c:	2300      	movs	r3, #0
 800a68e:	61fb      	str	r3, [r7, #28]
 800a690:	e012      	b.n	800a6b8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	4413      	add	r3, r2
 800a698:	7819      	ldrb	r1, [r3, #0]
 800a69a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	4413      	add	r3, r2
 800a6a0:	3334      	adds	r3, #52	@ 0x34
 800a6a2:	460a      	mov	r2, r1
 800a6a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d006      	beq.n	800a6c0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	61fb      	str	r3, [r7, #28]
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	2b0f      	cmp	r3, #15
 800a6bc:	d9e9      	bls.n	800a692 <prvInitialiseNewTask+0x66>
 800a6be:	e000      	b.n	800a6c2 <prvInitialiseNewTask+0x96>
			{
				break;
 800a6c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a6ca:	e003      	b.n	800a6d4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d6:	2b37      	cmp	r3, #55	@ 0x37
 800a6d8:	d901      	bls.n	800a6de <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a6da:	2337      	movs	r3, #55	@ 0x37
 800a6dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6e8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f2:	3304      	adds	r3, #4
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7ff f965 	bl	80099c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fc:	3318      	adds	r3, #24
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7ff f960 	bl	80099c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a708:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a712:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a718:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71c:	2200      	movs	r2, #0
 800a71e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a724:	2200      	movs	r2, #0
 800a726:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72c:	3354      	adds	r3, #84	@ 0x54
 800a72e:	224c      	movs	r2, #76	@ 0x4c
 800a730:	2100      	movs	r1, #0
 800a732:	4618      	mov	r0, r3
 800a734:	f001 ff0d 	bl	800c552 <memset>
 800a738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73a:	4a0d      	ldr	r2, [pc, #52]	@ (800a770 <prvInitialiseNewTask+0x144>)
 800a73c:	659a      	str	r2, [r3, #88]	@ 0x58
 800a73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a740:	4a0c      	ldr	r2, [pc, #48]	@ (800a774 <prvInitialiseNewTask+0x148>)
 800a742:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a746:	4a0c      	ldr	r2, [pc, #48]	@ (800a778 <prvInitialiseNewTask+0x14c>)
 800a748:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	68f9      	ldr	r1, [r7, #12]
 800a74e:	69b8      	ldr	r0, [r7, #24]
 800a750:	f001 f96c 	bl	800ba2c <pxPortInitialiseStack>
 800a754:	4602      	mov	r2, r0
 800a756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a758:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d002      	beq.n	800a766 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a766:	bf00      	nop
 800a768:	3720      	adds	r7, #32
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	2000dccc 	.word	0x2000dccc
 800a774:	2000dd34 	.word	0x2000dd34
 800a778:	2000dd9c 	.word	0x2000dd9c

0800a77c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a784:	f001 fa80 	bl	800bc88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a788:	4b2d      	ldr	r3, [pc, #180]	@ (800a840 <prvAddNewTaskToReadyList+0xc4>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	3301      	adds	r3, #1
 800a78e:	4a2c      	ldr	r2, [pc, #176]	@ (800a840 <prvAddNewTaskToReadyList+0xc4>)
 800a790:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a792:	4b2c      	ldr	r3, [pc, #176]	@ (800a844 <prvAddNewTaskToReadyList+0xc8>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d109      	bne.n	800a7ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a79a:	4a2a      	ldr	r2, [pc, #168]	@ (800a844 <prvAddNewTaskToReadyList+0xc8>)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a7a0:	4b27      	ldr	r3, [pc, #156]	@ (800a840 <prvAddNewTaskToReadyList+0xc4>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d110      	bne.n	800a7ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a7a8:	f000 fc40 	bl	800b02c <prvInitialiseTaskLists>
 800a7ac:	e00d      	b.n	800a7ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a7ae:	4b26      	ldr	r3, [pc, #152]	@ (800a848 <prvAddNewTaskToReadyList+0xcc>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d109      	bne.n	800a7ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a7b6:	4b23      	ldr	r3, [pc, #140]	@ (800a844 <prvAddNewTaskToReadyList+0xc8>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d802      	bhi.n	800a7ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a7c4:	4a1f      	ldr	r2, [pc, #124]	@ (800a844 <prvAddNewTaskToReadyList+0xc8>)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a7ca:	4b20      	ldr	r3, [pc, #128]	@ (800a84c <prvAddNewTaskToReadyList+0xd0>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	4a1e      	ldr	r2, [pc, #120]	@ (800a84c <prvAddNewTaskToReadyList+0xd0>)
 800a7d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a7d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a84c <prvAddNewTaskToReadyList+0xd0>)
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7e0:	4b1b      	ldr	r3, [pc, #108]	@ (800a850 <prvAddNewTaskToReadyList+0xd4>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d903      	bls.n	800a7f0 <prvAddNewTaskToReadyList+0x74>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ec:	4a18      	ldr	r2, [pc, #96]	@ (800a850 <prvAddNewTaskToReadyList+0xd4>)
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	4a15      	ldr	r2, [pc, #84]	@ (800a854 <prvAddNewTaskToReadyList+0xd8>)
 800a7fe:	441a      	add	r2, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3304      	adds	r3, #4
 800a804:	4619      	mov	r1, r3
 800a806:	4610      	mov	r0, r2
 800a808:	f7ff f8e9 	bl	80099de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a80c:	f001 fa6e 	bl	800bcec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a810:	4b0d      	ldr	r3, [pc, #52]	@ (800a848 <prvAddNewTaskToReadyList+0xcc>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00e      	beq.n	800a836 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a818:	4b0a      	ldr	r3, [pc, #40]	@ (800a844 <prvAddNewTaskToReadyList+0xc8>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a822:	429a      	cmp	r2, r3
 800a824:	d207      	bcs.n	800a836 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a826:	4b0c      	ldr	r3, [pc, #48]	@ (800a858 <prvAddNewTaskToReadyList+0xdc>)
 800a828:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a836:	bf00      	nop
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	20009f4c 	.word	0x20009f4c
 800a844:	20009a78 	.word	0x20009a78
 800a848:	20009f58 	.word	0x20009f58
 800a84c:	20009f68 	.word	0x20009f68
 800a850:	20009f54 	.word	0x20009f54
 800a854:	20009a7c 	.word	0x20009a7c
 800a858:	e000ed04 	.word	0xe000ed04

0800a85c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a864:	2300      	movs	r3, #0
 800a866:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d018      	beq.n	800a8a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a86e:	4b14      	ldr	r3, [pc, #80]	@ (800a8c0 <vTaskDelay+0x64>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00b      	beq.n	800a88e <vTaskDelay+0x32>
	__asm volatile
 800a876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	60bb      	str	r3, [r7, #8]
}
 800a888:	bf00      	nop
 800a88a:	bf00      	nop
 800a88c:	e7fd      	b.n	800a88a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a88e:	f000 f88b 	bl	800a9a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a892:	2100      	movs	r1, #0
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fd1b 	bl	800b2d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a89a:	f000 f893 	bl	800a9c4 <xTaskResumeAll>
 800a89e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d107      	bne.n	800a8b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a8a6:	4b07      	ldr	r3, [pc, #28]	@ (800a8c4 <vTaskDelay+0x68>)
 800a8a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a8b6:	bf00      	nop
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	20009f74 	.word	0x20009f74
 800a8c4:	e000ed04 	.word	0xe000ed04

0800a8c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b08a      	sub	sp, #40	@ 0x28
 800a8cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a8d6:	463a      	mov	r2, r7
 800a8d8:	1d39      	adds	r1, r7, #4
 800a8da:	f107 0308 	add.w	r3, r7, #8
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7ff f81c 	bl	800991c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a8e4:	6839      	ldr	r1, [r7, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	9202      	str	r2, [sp, #8]
 800a8ec:	9301      	str	r3, [sp, #4]
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	460a      	mov	r2, r1
 800a8f6:	4924      	ldr	r1, [pc, #144]	@ (800a988 <vTaskStartScheduler+0xc0>)
 800a8f8:	4824      	ldr	r0, [pc, #144]	@ (800a98c <vTaskStartScheduler+0xc4>)
 800a8fa:	f7ff fdf1 	bl	800a4e0 <xTaskCreateStatic>
 800a8fe:	4603      	mov	r3, r0
 800a900:	4a23      	ldr	r2, [pc, #140]	@ (800a990 <vTaskStartScheduler+0xc8>)
 800a902:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a904:	4b22      	ldr	r3, [pc, #136]	@ (800a990 <vTaskStartScheduler+0xc8>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d002      	beq.n	800a912 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a90c:	2301      	movs	r3, #1
 800a90e:	617b      	str	r3, [r7, #20]
 800a910:	e001      	b.n	800a916 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a912:	2300      	movs	r3, #0
 800a914:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d102      	bne.n	800a922 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a91c:	f000 fd2c 	bl	800b378 <xTimerCreateTimerTask>
 800a920:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	2b01      	cmp	r3, #1
 800a926:	d11b      	bne.n	800a960 <vTaskStartScheduler+0x98>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	613b      	str	r3, [r7, #16]
}
 800a93a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a93c:	4b15      	ldr	r3, [pc, #84]	@ (800a994 <vTaskStartScheduler+0xcc>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	3354      	adds	r3, #84	@ 0x54
 800a942:	4a15      	ldr	r2, [pc, #84]	@ (800a998 <vTaskStartScheduler+0xd0>)
 800a944:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a946:	4b15      	ldr	r3, [pc, #84]	@ (800a99c <vTaskStartScheduler+0xd4>)
 800a948:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a94c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a94e:	4b14      	ldr	r3, [pc, #80]	@ (800a9a0 <vTaskStartScheduler+0xd8>)
 800a950:	2201      	movs	r2, #1
 800a952:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a954:	4b13      	ldr	r3, [pc, #76]	@ (800a9a4 <vTaskStartScheduler+0xdc>)
 800a956:	2200      	movs	r2, #0
 800a958:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a95a:	f001 f8f1 	bl	800bb40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a95e:	e00f      	b.n	800a980 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a966:	d10b      	bne.n	800a980 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96c:	f383 8811 	msr	BASEPRI, r3
 800a970:	f3bf 8f6f 	isb	sy
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	60fb      	str	r3, [r7, #12]
}
 800a97a:	bf00      	nop
 800a97c:	bf00      	nop
 800a97e:	e7fd      	b.n	800a97c <vTaskStartScheduler+0xb4>
}
 800a980:	bf00      	nop
 800a982:	3718      	adds	r7, #24
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	0800d6c0 	.word	0x0800d6c0
 800a98c:	0800affd 	.word	0x0800affd
 800a990:	20009f70 	.word	0x20009f70
 800a994:	20009a78 	.word	0x20009a78
 800a998:	200002b8 	.word	0x200002b8
 800a99c:	20009f6c 	.word	0x20009f6c
 800a9a0:	20009f58 	.word	0x20009f58
 800a9a4:	20009f50 	.word	0x20009f50

0800a9a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a9ac:	4b04      	ldr	r3, [pc, #16]	@ (800a9c0 <vTaskSuspendAll+0x18>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	4a03      	ldr	r2, [pc, #12]	@ (800a9c0 <vTaskSuspendAll+0x18>)
 800a9b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a9b6:	bf00      	nop
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr
 800a9c0:	20009f74 	.word	0x20009f74

0800a9c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a9d2:	4b42      	ldr	r3, [pc, #264]	@ (800aadc <xTaskResumeAll+0x118>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d10b      	bne.n	800a9f2 <xTaskResumeAll+0x2e>
	__asm volatile
 800a9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	603b      	str	r3, [r7, #0]
}
 800a9ec:	bf00      	nop
 800a9ee:	bf00      	nop
 800a9f0:	e7fd      	b.n	800a9ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a9f2:	f001 f949 	bl	800bc88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a9f6:	4b39      	ldr	r3, [pc, #228]	@ (800aadc <xTaskResumeAll+0x118>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	4a37      	ldr	r2, [pc, #220]	@ (800aadc <xTaskResumeAll+0x118>)
 800a9fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa00:	4b36      	ldr	r3, [pc, #216]	@ (800aadc <xTaskResumeAll+0x118>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d162      	bne.n	800aace <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa08:	4b35      	ldr	r3, [pc, #212]	@ (800aae0 <xTaskResumeAll+0x11c>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d05e      	beq.n	800aace <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa10:	e02f      	b.n	800aa72 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa12:	4b34      	ldr	r3, [pc, #208]	@ (800aae4 <xTaskResumeAll+0x120>)
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3318      	adds	r3, #24
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff f83a 	bl	8009a98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	3304      	adds	r3, #4
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7ff f835 	bl	8009a98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa32:	4b2d      	ldr	r3, [pc, #180]	@ (800aae8 <xTaskResumeAll+0x124>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d903      	bls.n	800aa42 <xTaskResumeAll+0x7e>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa3e:	4a2a      	ldr	r2, [pc, #168]	@ (800aae8 <xTaskResumeAll+0x124>)
 800aa40:	6013      	str	r3, [r2, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa46:	4613      	mov	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4413      	add	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	4a27      	ldr	r2, [pc, #156]	@ (800aaec <xTaskResumeAll+0x128>)
 800aa50:	441a      	add	r2, r3
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	3304      	adds	r3, #4
 800aa56:	4619      	mov	r1, r3
 800aa58:	4610      	mov	r0, r2
 800aa5a:	f7fe ffc0 	bl	80099de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa62:	4b23      	ldr	r3, [pc, #140]	@ (800aaf0 <xTaskResumeAll+0x12c>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d302      	bcc.n	800aa72 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800aa6c:	4b21      	ldr	r3, [pc, #132]	@ (800aaf4 <xTaskResumeAll+0x130>)
 800aa6e:	2201      	movs	r2, #1
 800aa70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa72:	4b1c      	ldr	r3, [pc, #112]	@ (800aae4 <xTaskResumeAll+0x120>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1cb      	bne.n	800aa12 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa80:	f000 fb78 	bl	800b174 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aa84:	4b1c      	ldr	r3, [pc, #112]	@ (800aaf8 <xTaskResumeAll+0x134>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d010      	beq.n	800aab2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa90:	f000 f858 	bl	800ab44 <xTaskIncrementTick>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d002      	beq.n	800aaa0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800aa9a:	4b16      	ldr	r3, [pc, #88]	@ (800aaf4 <xTaskResumeAll+0x130>)
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d1f1      	bne.n	800aa90 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800aaac:	4b12      	ldr	r3, [pc, #72]	@ (800aaf8 <xTaskResumeAll+0x134>)
 800aaae:	2200      	movs	r2, #0
 800aab0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aab2:	4b10      	ldr	r3, [pc, #64]	@ (800aaf4 <xTaskResumeAll+0x130>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d009      	beq.n	800aace <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aaba:	2301      	movs	r3, #1
 800aabc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aabe:	4b0f      	ldr	r3, [pc, #60]	@ (800aafc <xTaskResumeAll+0x138>)
 800aac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aace:	f001 f90d 	bl	800bcec <vPortExitCritical>

	return xAlreadyYielded;
 800aad2:	68bb      	ldr	r3, [r7, #8]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	20009f74 	.word	0x20009f74
 800aae0:	20009f4c 	.word	0x20009f4c
 800aae4:	20009f0c 	.word	0x20009f0c
 800aae8:	20009f54 	.word	0x20009f54
 800aaec:	20009a7c 	.word	0x20009a7c
 800aaf0:	20009a78 	.word	0x20009a78
 800aaf4:	20009f60 	.word	0x20009f60
 800aaf8:	20009f5c 	.word	0x20009f5c
 800aafc:	e000ed04 	.word	0xe000ed04

0800ab00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ab06:	4b05      	ldr	r3, [pc, #20]	@ (800ab1c <xTaskGetTickCount+0x1c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ab0c:	687b      	ldr	r3, [r7, #4]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	370c      	adds	r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	20009f50 	.word	0x20009f50

0800ab20 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab26:	f001 f98f 	bl	800be48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ab2e:	4b04      	ldr	r3, [pc, #16]	@ (800ab40 <xTaskGetTickCountFromISR+0x20>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab34:	683b      	ldr	r3, [r7, #0]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	20009f50 	.word	0x20009f50

0800ab44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab4e:	4b4f      	ldr	r3, [pc, #316]	@ (800ac8c <xTaskIncrementTick+0x148>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f040 8090 	bne.w	800ac78 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab58:	4b4d      	ldr	r3, [pc, #308]	@ (800ac90 <xTaskIncrementTick+0x14c>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab60:	4a4b      	ldr	r2, [pc, #300]	@ (800ac90 <xTaskIncrementTick+0x14c>)
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d121      	bne.n	800abb0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab6c:	4b49      	ldr	r3, [pc, #292]	@ (800ac94 <xTaskIncrementTick+0x150>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00b      	beq.n	800ab8e <xTaskIncrementTick+0x4a>
	__asm volatile
 800ab76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab7a:	f383 8811 	msr	BASEPRI, r3
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f3bf 8f4f 	dsb	sy
 800ab86:	603b      	str	r3, [r7, #0]
}
 800ab88:	bf00      	nop
 800ab8a:	bf00      	nop
 800ab8c:	e7fd      	b.n	800ab8a <xTaskIncrementTick+0x46>
 800ab8e:	4b41      	ldr	r3, [pc, #260]	@ (800ac94 <xTaskIncrementTick+0x150>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	60fb      	str	r3, [r7, #12]
 800ab94:	4b40      	ldr	r3, [pc, #256]	@ (800ac98 <xTaskIncrementTick+0x154>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a3e      	ldr	r2, [pc, #248]	@ (800ac94 <xTaskIncrementTick+0x150>)
 800ab9a:	6013      	str	r3, [r2, #0]
 800ab9c:	4a3e      	ldr	r2, [pc, #248]	@ (800ac98 <xTaskIncrementTick+0x154>)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6013      	str	r3, [r2, #0]
 800aba2:	4b3e      	ldr	r3, [pc, #248]	@ (800ac9c <xTaskIncrementTick+0x158>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	3301      	adds	r3, #1
 800aba8:	4a3c      	ldr	r2, [pc, #240]	@ (800ac9c <xTaskIncrementTick+0x158>)
 800abaa:	6013      	str	r3, [r2, #0]
 800abac:	f000 fae2 	bl	800b174 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800abb0:	4b3b      	ldr	r3, [pc, #236]	@ (800aca0 <xTaskIncrementTick+0x15c>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d349      	bcc.n	800ac4e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abba:	4b36      	ldr	r3, [pc, #216]	@ (800ac94 <xTaskIncrementTick+0x150>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d104      	bne.n	800abce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abc4:	4b36      	ldr	r3, [pc, #216]	@ (800aca0 <xTaskIncrementTick+0x15c>)
 800abc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800abca:	601a      	str	r2, [r3, #0]
					break;
 800abcc:	e03f      	b.n	800ac4e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abce:	4b31      	ldr	r3, [pc, #196]	@ (800ac94 <xTaskIncrementTick+0x150>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800abde:	693a      	ldr	r2, [r7, #16]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d203      	bcs.n	800abee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800abe6:	4a2e      	ldr	r2, [pc, #184]	@ (800aca0 <xTaskIncrementTick+0x15c>)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800abec:	e02f      	b.n	800ac4e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	3304      	adds	r3, #4
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fe ff50 	bl	8009a98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d004      	beq.n	800ac0a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	3318      	adds	r3, #24
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7fe ff47 	bl	8009a98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac0e:	4b25      	ldr	r3, [pc, #148]	@ (800aca4 <xTaskIncrementTick+0x160>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d903      	bls.n	800ac1e <xTaskIncrementTick+0xda>
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac1a:	4a22      	ldr	r2, [pc, #136]	@ (800aca4 <xTaskIncrementTick+0x160>)
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac22:	4613      	mov	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4a1f      	ldr	r2, [pc, #124]	@ (800aca8 <xTaskIncrementTick+0x164>)
 800ac2c:	441a      	add	r2, r3
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	3304      	adds	r3, #4
 800ac32:	4619      	mov	r1, r3
 800ac34:	4610      	mov	r0, r2
 800ac36:	f7fe fed2 	bl	80099de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac3e:	4b1b      	ldr	r3, [pc, #108]	@ (800acac <xTaskIncrementTick+0x168>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d3b8      	bcc.n	800abba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac4c:	e7b5      	b.n	800abba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac4e:	4b17      	ldr	r3, [pc, #92]	@ (800acac <xTaskIncrementTick+0x168>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac54:	4914      	ldr	r1, [pc, #80]	@ (800aca8 <xTaskIncrementTick+0x164>)
 800ac56:	4613      	mov	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	4413      	add	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	440b      	add	r3, r1
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d901      	bls.n	800ac6a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ac66:	2301      	movs	r3, #1
 800ac68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ac6a:	4b11      	ldr	r3, [pc, #68]	@ (800acb0 <xTaskIncrementTick+0x16c>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d007      	beq.n	800ac82 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ac72:	2301      	movs	r3, #1
 800ac74:	617b      	str	r3, [r7, #20]
 800ac76:	e004      	b.n	800ac82 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ac78:	4b0e      	ldr	r3, [pc, #56]	@ (800acb4 <xTaskIncrementTick+0x170>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	4a0d      	ldr	r2, [pc, #52]	@ (800acb4 <xTaskIncrementTick+0x170>)
 800ac80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ac82:	697b      	ldr	r3, [r7, #20]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3718      	adds	r7, #24
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	20009f74 	.word	0x20009f74
 800ac90:	20009f50 	.word	0x20009f50
 800ac94:	20009f04 	.word	0x20009f04
 800ac98:	20009f08 	.word	0x20009f08
 800ac9c:	20009f64 	.word	0x20009f64
 800aca0:	20009f6c 	.word	0x20009f6c
 800aca4:	20009f54 	.word	0x20009f54
 800aca8:	20009a7c 	.word	0x20009a7c
 800acac:	20009a78 	.word	0x20009a78
 800acb0:	20009f60 	.word	0x20009f60
 800acb4:	20009f5c 	.word	0x20009f5c

0800acb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800acbe:	4b2b      	ldr	r3, [pc, #172]	@ (800ad6c <vTaskSwitchContext+0xb4>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d003      	beq.n	800acce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800acc6:	4b2a      	ldr	r3, [pc, #168]	@ (800ad70 <vTaskSwitchContext+0xb8>)
 800acc8:	2201      	movs	r2, #1
 800acca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800accc:	e047      	b.n	800ad5e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800acce:	4b28      	ldr	r3, [pc, #160]	@ (800ad70 <vTaskSwitchContext+0xb8>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acd4:	4b27      	ldr	r3, [pc, #156]	@ (800ad74 <vTaskSwitchContext+0xbc>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	60fb      	str	r3, [r7, #12]
 800acda:	e011      	b.n	800ad00 <vTaskSwitchContext+0x48>
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d10b      	bne.n	800acfa <vTaskSwitchContext+0x42>
	__asm volatile
 800ace2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace6:	f383 8811 	msr	BASEPRI, r3
 800acea:	f3bf 8f6f 	isb	sy
 800acee:	f3bf 8f4f 	dsb	sy
 800acf2:	607b      	str	r3, [r7, #4]
}
 800acf4:	bf00      	nop
 800acf6:	bf00      	nop
 800acf8:	e7fd      	b.n	800acf6 <vTaskSwitchContext+0x3e>
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	3b01      	subs	r3, #1
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	491d      	ldr	r1, [pc, #116]	@ (800ad78 <vTaskSwitchContext+0xc0>)
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	4613      	mov	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4413      	add	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	440b      	add	r3, r1
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d0e3      	beq.n	800acdc <vTaskSwitchContext+0x24>
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	4613      	mov	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	4413      	add	r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	4a16      	ldr	r2, [pc, #88]	@ (800ad78 <vTaskSwitchContext+0xc0>)
 800ad20:	4413      	add	r3, r2
 800ad22:	60bb      	str	r3, [r7, #8]
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	605a      	str	r2, [r3, #4]
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	685a      	ldr	r2, [r3, #4]
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	3308      	adds	r3, #8
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d104      	bne.n	800ad44 <vTaskSwitchContext+0x8c>
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	685a      	ldr	r2, [r3, #4]
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	605a      	str	r2, [r3, #4]
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	4a0c      	ldr	r2, [pc, #48]	@ (800ad7c <vTaskSwitchContext+0xc4>)
 800ad4c:	6013      	str	r3, [r2, #0]
 800ad4e:	4a09      	ldr	r2, [pc, #36]	@ (800ad74 <vTaskSwitchContext+0xbc>)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad54:	4b09      	ldr	r3, [pc, #36]	@ (800ad7c <vTaskSwitchContext+0xc4>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	3354      	adds	r3, #84	@ 0x54
 800ad5a:	4a09      	ldr	r2, [pc, #36]	@ (800ad80 <vTaskSwitchContext+0xc8>)
 800ad5c:	6013      	str	r3, [r2, #0]
}
 800ad5e:	bf00      	nop
 800ad60:	3714      	adds	r7, #20
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	20009f74 	.word	0x20009f74
 800ad70:	20009f60 	.word	0x20009f60
 800ad74:	20009f54 	.word	0x20009f54
 800ad78:	20009a7c 	.word	0x20009a7c
 800ad7c:	20009a78 	.word	0x20009a78
 800ad80:	200002b8 	.word	0x200002b8

0800ad84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10b      	bne.n	800adac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ad94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad98:	f383 8811 	msr	BASEPRI, r3
 800ad9c:	f3bf 8f6f 	isb	sy
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	60fb      	str	r3, [r7, #12]
}
 800ada6:	bf00      	nop
 800ada8:	bf00      	nop
 800adaa:	e7fd      	b.n	800ada8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800adac:	4b07      	ldr	r3, [pc, #28]	@ (800adcc <vTaskPlaceOnEventList+0x48>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	3318      	adds	r3, #24
 800adb2:	4619      	mov	r1, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7fe fe36 	bl	8009a26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800adba:	2101      	movs	r1, #1
 800adbc:	6838      	ldr	r0, [r7, #0]
 800adbe:	f000 fa87 	bl	800b2d0 <prvAddCurrentTaskToDelayedList>
}
 800adc2:	bf00      	nop
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	20009a78 	.word	0x20009a78

0800add0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d10b      	bne.n	800adfa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ade2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	617b      	str	r3, [r7, #20]
}
 800adf4:	bf00      	nop
 800adf6:	bf00      	nop
 800adf8:	e7fd      	b.n	800adf6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800adfa:	4b0a      	ldr	r3, [pc, #40]	@ (800ae24 <vTaskPlaceOnEventListRestricted+0x54>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3318      	adds	r3, #24
 800ae00:	4619      	mov	r1, r3
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f7fe fdeb 	bl	80099de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d002      	beq.n	800ae14 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ae0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ae14:	6879      	ldr	r1, [r7, #4]
 800ae16:	68b8      	ldr	r0, [r7, #8]
 800ae18:	f000 fa5a 	bl	800b2d0 <prvAddCurrentTaskToDelayedList>
	}
 800ae1c:	bf00      	nop
 800ae1e:	3718      	adds	r7, #24
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	20009a78 	.word	0x20009a78

0800ae28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10b      	bne.n	800ae56 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	60fb      	str	r3, [r7, #12]
}
 800ae50:	bf00      	nop
 800ae52:	bf00      	nop
 800ae54:	e7fd      	b.n	800ae52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	3318      	adds	r3, #24
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fe fe1c 	bl	8009a98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae60:	4b1d      	ldr	r3, [pc, #116]	@ (800aed8 <xTaskRemoveFromEventList+0xb0>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d11d      	bne.n	800aea4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	3304      	adds	r3, #4
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fe fe13 	bl	8009a98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae76:	4b19      	ldr	r3, [pc, #100]	@ (800aedc <xTaskRemoveFromEventList+0xb4>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d903      	bls.n	800ae86 <xTaskRemoveFromEventList+0x5e>
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae82:	4a16      	ldr	r2, [pc, #88]	@ (800aedc <xTaskRemoveFromEventList+0xb4>)
 800ae84:	6013      	str	r3, [r2, #0]
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae8a:	4613      	mov	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	4413      	add	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4a13      	ldr	r2, [pc, #76]	@ (800aee0 <xTaskRemoveFromEventList+0xb8>)
 800ae94:	441a      	add	r2, r3
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	3304      	adds	r3, #4
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	4610      	mov	r0, r2
 800ae9e:	f7fe fd9e 	bl	80099de <vListInsertEnd>
 800aea2:	e005      	b.n	800aeb0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	3318      	adds	r3, #24
 800aea8:	4619      	mov	r1, r3
 800aeaa:	480e      	ldr	r0, [pc, #56]	@ (800aee4 <xTaskRemoveFromEventList+0xbc>)
 800aeac:	f7fe fd97 	bl	80099de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeb4:	4b0c      	ldr	r3, [pc, #48]	@ (800aee8 <xTaskRemoveFromEventList+0xc0>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d905      	bls.n	800aeca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aebe:	2301      	movs	r3, #1
 800aec0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aec2:	4b0a      	ldr	r3, [pc, #40]	@ (800aeec <xTaskRemoveFromEventList+0xc4>)
 800aec4:	2201      	movs	r2, #1
 800aec6:	601a      	str	r2, [r3, #0]
 800aec8:	e001      	b.n	800aece <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aeca:	2300      	movs	r3, #0
 800aecc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aece:	697b      	ldr	r3, [r7, #20]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3718      	adds	r7, #24
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	20009f74 	.word	0x20009f74
 800aedc:	20009f54 	.word	0x20009f54
 800aee0:	20009a7c 	.word	0x20009a7c
 800aee4:	20009f0c 	.word	0x20009f0c
 800aee8:	20009a78 	.word	0x20009a78
 800aeec:	20009f60 	.word	0x20009f60

0800aef0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aef8:	4b06      	ldr	r3, [pc, #24]	@ (800af14 <vTaskInternalSetTimeOutState+0x24>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af00:	4b05      	ldr	r3, [pc, #20]	@ (800af18 <vTaskInternalSetTimeOutState+0x28>)
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	605a      	str	r2, [r3, #4]
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	20009f64 	.word	0x20009f64
 800af18:	20009f50 	.word	0x20009f50

0800af1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b088      	sub	sp, #32
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10b      	bne.n	800af44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800af2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af30:	f383 8811 	msr	BASEPRI, r3
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	613b      	str	r3, [r7, #16]
}
 800af3e:	bf00      	nop
 800af40:	bf00      	nop
 800af42:	e7fd      	b.n	800af40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10b      	bne.n	800af62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	60fb      	str	r3, [r7, #12]
}
 800af5c:	bf00      	nop
 800af5e:	bf00      	nop
 800af60:	e7fd      	b.n	800af5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800af62:	f000 fe91 	bl	800bc88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800af66:	4b1d      	ldr	r3, [pc, #116]	@ (800afdc <xTaskCheckForTimeOut+0xc0>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	69ba      	ldr	r2, [r7, #24]
 800af72:	1ad3      	subs	r3, r2, r3
 800af74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af7e:	d102      	bne.n	800af86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800af80:	2300      	movs	r3, #0
 800af82:	61fb      	str	r3, [r7, #28]
 800af84:	e023      	b.n	800afce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	4b15      	ldr	r3, [pc, #84]	@ (800afe0 <xTaskCheckForTimeOut+0xc4>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d007      	beq.n	800afa2 <xTaskCheckForTimeOut+0x86>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	69ba      	ldr	r2, [r7, #24]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d302      	bcc.n	800afa2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af9c:	2301      	movs	r3, #1
 800af9e:	61fb      	str	r3, [r7, #28]
 800afa0:	e015      	b.n	800afce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	697a      	ldr	r2, [r7, #20]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d20b      	bcs.n	800afc4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	1ad2      	subs	r2, r2, r3
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7ff ff99 	bl	800aef0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800afbe:	2300      	movs	r3, #0
 800afc0:	61fb      	str	r3, [r7, #28]
 800afc2:	e004      	b.n	800afce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	2200      	movs	r2, #0
 800afc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800afca:	2301      	movs	r3, #1
 800afcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800afce:	f000 fe8d 	bl	800bcec <vPortExitCritical>

	return xReturn;
 800afd2:	69fb      	ldr	r3, [r7, #28]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3720      	adds	r7, #32
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	20009f50 	.word	0x20009f50
 800afe0:	20009f64 	.word	0x20009f64

0800afe4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800afe4:	b480      	push	{r7}
 800afe6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800afe8:	4b03      	ldr	r3, [pc, #12]	@ (800aff8 <vTaskMissedYield+0x14>)
 800afea:	2201      	movs	r2, #1
 800afec:	601a      	str	r2, [r3, #0]
}
 800afee:	bf00      	nop
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr
 800aff8:	20009f60 	.word	0x20009f60

0800affc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b004:	f000 f852 	bl	800b0ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b008:	4b06      	ldr	r3, [pc, #24]	@ (800b024 <prvIdleTask+0x28>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d9f9      	bls.n	800b004 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b010:	4b05      	ldr	r3, [pc, #20]	@ (800b028 <prvIdleTask+0x2c>)
 800b012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b016:	601a      	str	r2, [r3, #0]
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b020:	e7f0      	b.n	800b004 <prvIdleTask+0x8>
 800b022:	bf00      	nop
 800b024:	20009a7c 	.word	0x20009a7c
 800b028:	e000ed04 	.word	0xe000ed04

0800b02c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b032:	2300      	movs	r3, #0
 800b034:	607b      	str	r3, [r7, #4]
 800b036:	e00c      	b.n	800b052 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	4613      	mov	r3, r2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	4413      	add	r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4a12      	ldr	r2, [pc, #72]	@ (800b08c <prvInitialiseTaskLists+0x60>)
 800b044:	4413      	add	r3, r2
 800b046:	4618      	mov	r0, r3
 800b048:	f7fe fc9c 	bl	8009984 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	3301      	adds	r3, #1
 800b050:	607b      	str	r3, [r7, #4]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2b37      	cmp	r3, #55	@ 0x37
 800b056:	d9ef      	bls.n	800b038 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b058:	480d      	ldr	r0, [pc, #52]	@ (800b090 <prvInitialiseTaskLists+0x64>)
 800b05a:	f7fe fc93 	bl	8009984 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b05e:	480d      	ldr	r0, [pc, #52]	@ (800b094 <prvInitialiseTaskLists+0x68>)
 800b060:	f7fe fc90 	bl	8009984 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b064:	480c      	ldr	r0, [pc, #48]	@ (800b098 <prvInitialiseTaskLists+0x6c>)
 800b066:	f7fe fc8d 	bl	8009984 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b06a:	480c      	ldr	r0, [pc, #48]	@ (800b09c <prvInitialiseTaskLists+0x70>)
 800b06c:	f7fe fc8a 	bl	8009984 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b070:	480b      	ldr	r0, [pc, #44]	@ (800b0a0 <prvInitialiseTaskLists+0x74>)
 800b072:	f7fe fc87 	bl	8009984 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b076:	4b0b      	ldr	r3, [pc, #44]	@ (800b0a4 <prvInitialiseTaskLists+0x78>)
 800b078:	4a05      	ldr	r2, [pc, #20]	@ (800b090 <prvInitialiseTaskLists+0x64>)
 800b07a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b07c:	4b0a      	ldr	r3, [pc, #40]	@ (800b0a8 <prvInitialiseTaskLists+0x7c>)
 800b07e:	4a05      	ldr	r2, [pc, #20]	@ (800b094 <prvInitialiseTaskLists+0x68>)
 800b080:	601a      	str	r2, [r3, #0]
}
 800b082:	bf00      	nop
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	20009a7c 	.word	0x20009a7c
 800b090:	20009edc 	.word	0x20009edc
 800b094:	20009ef0 	.word	0x20009ef0
 800b098:	20009f0c 	.word	0x20009f0c
 800b09c:	20009f20 	.word	0x20009f20
 800b0a0:	20009f38 	.word	0x20009f38
 800b0a4:	20009f04 	.word	0x20009f04
 800b0a8:	20009f08 	.word	0x20009f08

0800b0ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0b2:	e019      	b.n	800b0e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b0b4:	f000 fde8 	bl	800bc88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0b8:	4b10      	ldr	r3, [pc, #64]	@ (800b0fc <prvCheckTasksWaitingTermination+0x50>)
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	3304      	adds	r3, #4
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fe fce7 	bl	8009a98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b0ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b100 <prvCheckTasksWaitingTermination+0x54>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	4a0b      	ldr	r2, [pc, #44]	@ (800b100 <prvCheckTasksWaitingTermination+0x54>)
 800b0d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b0d4:	4b0b      	ldr	r3, [pc, #44]	@ (800b104 <prvCheckTasksWaitingTermination+0x58>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	4a0a      	ldr	r2, [pc, #40]	@ (800b104 <prvCheckTasksWaitingTermination+0x58>)
 800b0dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b0de:	f000 fe05 	bl	800bcec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f000 f810 	bl	800b108 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0e8:	4b06      	ldr	r3, [pc, #24]	@ (800b104 <prvCheckTasksWaitingTermination+0x58>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1e1      	bne.n	800b0b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b0f0:	bf00      	nop
 800b0f2:	bf00      	nop
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20009f20 	.word	0x20009f20
 800b100:	20009f4c 	.word	0x20009f4c
 800b104:	20009f34 	.word	0x20009f34

0800b108 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	3354      	adds	r3, #84	@ 0x54
 800b114:	4618      	mov	r0, r3
 800b116:	f001 fa35 	bl	800c584 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b120:	2b00      	cmp	r3, #0
 800b122:	d108      	bne.n	800b136 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b128:	4618      	mov	r0, r3
 800b12a:	f000 ff9d 	bl	800c068 <vPortFree>
				vPortFree( pxTCB );
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 ff9a 	bl	800c068 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b134:	e019      	b.n	800b16a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d103      	bne.n	800b148 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 ff91 	bl	800c068 <vPortFree>
	}
 800b146:	e010      	b.n	800b16a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d00b      	beq.n	800b16a <prvDeleteTCB+0x62>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	60fb      	str	r3, [r7, #12]
}
 800b164:	bf00      	nop
 800b166:	bf00      	nop
 800b168:	e7fd      	b.n	800b166 <prvDeleteTCB+0x5e>
	}
 800b16a:	bf00      	nop
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
	...

0800b174 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b17a:	4b0c      	ldr	r3, [pc, #48]	@ (800b1ac <prvResetNextTaskUnblockTime+0x38>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d104      	bne.n	800b18e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b184:	4b0a      	ldr	r3, [pc, #40]	@ (800b1b0 <prvResetNextTaskUnblockTime+0x3c>)
 800b186:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b18a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b18c:	e008      	b.n	800b1a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b18e:	4b07      	ldr	r3, [pc, #28]	@ (800b1ac <prvResetNextTaskUnblockTime+0x38>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	4a04      	ldr	r2, [pc, #16]	@ (800b1b0 <prvResetNextTaskUnblockTime+0x3c>)
 800b19e:	6013      	str	r3, [r2, #0]
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	20009f04 	.word	0x20009f04
 800b1b0:	20009f6c 	.word	0x20009f6c

0800b1b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b1ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b1e8 <xTaskGetSchedulerState+0x34>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d102      	bne.n	800b1c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	607b      	str	r3, [r7, #4]
 800b1c6:	e008      	b.n	800b1da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1c8:	4b08      	ldr	r3, [pc, #32]	@ (800b1ec <xTaskGetSchedulerState+0x38>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d102      	bne.n	800b1d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b1d0:	2302      	movs	r3, #2
 800b1d2:	607b      	str	r3, [r7, #4]
 800b1d4:	e001      	b.n	800b1da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b1da:	687b      	ldr	r3, [r7, #4]
	}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr
 800b1e8:	20009f58 	.word	0x20009f58
 800b1ec:	20009f74 	.word	0x20009f74

0800b1f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d058      	beq.n	800b2b8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b206:	4b2f      	ldr	r3, [pc, #188]	@ (800b2c4 <xTaskPriorityDisinherit+0xd4>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d00b      	beq.n	800b228 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	60fb      	str	r3, [r7, #12]
}
 800b222:	bf00      	nop
 800b224:	bf00      	nop
 800b226:	e7fd      	b.n	800b224 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10b      	bne.n	800b248 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	60bb      	str	r3, [r7, #8]
}
 800b242:	bf00      	nop
 800b244:	bf00      	nop
 800b246:	e7fd      	b.n	800b244 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b24c:	1e5a      	subs	r2, r3, #1
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d02c      	beq.n	800b2b8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b262:	2b00      	cmp	r3, #0
 800b264:	d128      	bne.n	800b2b8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	3304      	adds	r3, #4
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fe fc14 	bl	8009a98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b27c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b288:	4b0f      	ldr	r3, [pc, #60]	@ (800b2c8 <xTaskPriorityDisinherit+0xd8>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d903      	bls.n	800b298 <xTaskPriorityDisinherit+0xa8>
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b294:	4a0c      	ldr	r2, [pc, #48]	@ (800b2c8 <xTaskPriorityDisinherit+0xd8>)
 800b296:	6013      	str	r3, [r2, #0]
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b29c:	4613      	mov	r3, r2
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4413      	add	r3, r2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4a09      	ldr	r2, [pc, #36]	@ (800b2cc <xTaskPriorityDisinherit+0xdc>)
 800b2a6:	441a      	add	r2, r3
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	3304      	adds	r3, #4
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	4610      	mov	r0, r2
 800b2b0:	f7fe fb95 	bl	80099de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2b8:	697b      	ldr	r3, [r7, #20]
	}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3718      	adds	r7, #24
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	20009a78 	.word	0x20009a78
 800b2c8:	20009f54 	.word	0x20009f54
 800b2cc:	20009a7c 	.word	0x20009a7c

0800b2d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b2da:	4b21      	ldr	r3, [pc, #132]	@ (800b360 <prvAddCurrentTaskToDelayedList+0x90>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2e0:	4b20      	ldr	r3, [pc, #128]	@ (800b364 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7fe fbd6 	bl	8009a98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2f2:	d10a      	bne.n	800b30a <prvAddCurrentTaskToDelayedList+0x3a>
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d007      	beq.n	800b30a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2fa:	4b1a      	ldr	r3, [pc, #104]	@ (800b364 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	3304      	adds	r3, #4
 800b300:	4619      	mov	r1, r3
 800b302:	4819      	ldr	r0, [pc, #100]	@ (800b368 <prvAddCurrentTaskToDelayedList+0x98>)
 800b304:	f7fe fb6b 	bl	80099de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b308:	e026      	b.n	800b358 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4413      	add	r3, r2
 800b310:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b312:	4b14      	ldr	r3, [pc, #80]	@ (800b364 <prvAddCurrentTaskToDelayedList+0x94>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d209      	bcs.n	800b336 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b322:	4b12      	ldr	r3, [pc, #72]	@ (800b36c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	4b0f      	ldr	r3, [pc, #60]	@ (800b364 <prvAddCurrentTaskToDelayedList+0x94>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3304      	adds	r3, #4
 800b32c:	4619      	mov	r1, r3
 800b32e:	4610      	mov	r0, r2
 800b330:	f7fe fb79 	bl	8009a26 <vListInsert>
}
 800b334:	e010      	b.n	800b358 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b336:	4b0e      	ldr	r3, [pc, #56]	@ (800b370 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	4b0a      	ldr	r3, [pc, #40]	@ (800b364 <prvAddCurrentTaskToDelayedList+0x94>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3304      	adds	r3, #4
 800b340:	4619      	mov	r1, r3
 800b342:	4610      	mov	r0, r2
 800b344:	f7fe fb6f 	bl	8009a26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b348:	4b0a      	ldr	r3, [pc, #40]	@ (800b374 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d202      	bcs.n	800b358 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b352:	4a08      	ldr	r2, [pc, #32]	@ (800b374 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	6013      	str	r3, [r2, #0]
}
 800b358:	bf00      	nop
 800b35a:	3710      	adds	r7, #16
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	20009f50 	.word	0x20009f50
 800b364:	20009a78 	.word	0x20009a78
 800b368:	20009f38 	.word	0x20009f38
 800b36c:	20009f08 	.word	0x20009f08
 800b370:	20009f04 	.word	0x20009f04
 800b374:	20009f6c 	.word	0x20009f6c

0800b378 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b08a      	sub	sp, #40	@ 0x28
 800b37c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b37e:	2300      	movs	r3, #0
 800b380:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b382:	f000 fb13 	bl	800b9ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b386:	4b1d      	ldr	r3, [pc, #116]	@ (800b3fc <xTimerCreateTimerTask+0x84>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d021      	beq.n	800b3d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b38e:	2300      	movs	r3, #0
 800b390:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b392:	2300      	movs	r3, #0
 800b394:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b396:	1d3a      	adds	r2, r7, #4
 800b398:	f107 0108 	add.w	r1, r7, #8
 800b39c:	f107 030c 	add.w	r3, r7, #12
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fe fad5 	bl	8009950 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b3a6:	6879      	ldr	r1, [r7, #4]
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	9202      	str	r2, [sp, #8]
 800b3ae:	9301      	str	r3, [sp, #4]
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	9300      	str	r3, [sp, #0]
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	460a      	mov	r2, r1
 800b3b8:	4911      	ldr	r1, [pc, #68]	@ (800b400 <xTimerCreateTimerTask+0x88>)
 800b3ba:	4812      	ldr	r0, [pc, #72]	@ (800b404 <xTimerCreateTimerTask+0x8c>)
 800b3bc:	f7ff f890 	bl	800a4e0 <xTaskCreateStatic>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	4a11      	ldr	r2, [pc, #68]	@ (800b408 <xTimerCreateTimerTask+0x90>)
 800b3c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b3c6:	4b10      	ldr	r3, [pc, #64]	@ (800b408 <xTimerCreateTimerTask+0x90>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d001      	beq.n	800b3d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d10b      	bne.n	800b3f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b3d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3dc:	f383 8811 	msr	BASEPRI, r3
 800b3e0:	f3bf 8f6f 	isb	sy
 800b3e4:	f3bf 8f4f 	dsb	sy
 800b3e8:	613b      	str	r3, [r7, #16]
}
 800b3ea:	bf00      	nop
 800b3ec:	bf00      	nop
 800b3ee:	e7fd      	b.n	800b3ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b3f0:	697b      	ldr	r3, [r7, #20]
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3718      	adds	r7, #24
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	20009fa8 	.word	0x20009fa8
 800b400:	0800d6c8 	.word	0x0800d6c8
 800b404:	0800b545 	.word	0x0800b545
 800b408:	20009fac 	.word	0x20009fac

0800b40c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b08a      	sub	sp, #40	@ 0x28
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
 800b418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b41a:	2300      	movs	r3, #0
 800b41c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d10b      	bne.n	800b43c <xTimerGenericCommand+0x30>
	__asm volatile
 800b424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b428:	f383 8811 	msr	BASEPRI, r3
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	623b      	str	r3, [r7, #32]
}
 800b436:	bf00      	nop
 800b438:	bf00      	nop
 800b43a:	e7fd      	b.n	800b438 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b43c:	4b19      	ldr	r3, [pc, #100]	@ (800b4a4 <xTimerGenericCommand+0x98>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d02a      	beq.n	800b49a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	2b05      	cmp	r3, #5
 800b454:	dc18      	bgt.n	800b488 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b456:	f7ff fead 	bl	800b1b4 <xTaskGetSchedulerState>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	d109      	bne.n	800b474 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b460:	4b10      	ldr	r3, [pc, #64]	@ (800b4a4 <xTimerGenericCommand+0x98>)
 800b462:	6818      	ldr	r0, [r3, #0]
 800b464:	f107 0110 	add.w	r1, r7, #16
 800b468:	2300      	movs	r3, #0
 800b46a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b46c:	f7fe fc48 	bl	8009d00 <xQueueGenericSend>
 800b470:	6278      	str	r0, [r7, #36]	@ 0x24
 800b472:	e012      	b.n	800b49a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b474:	4b0b      	ldr	r3, [pc, #44]	@ (800b4a4 <xTimerGenericCommand+0x98>)
 800b476:	6818      	ldr	r0, [r3, #0]
 800b478:	f107 0110 	add.w	r1, r7, #16
 800b47c:	2300      	movs	r3, #0
 800b47e:	2200      	movs	r2, #0
 800b480:	f7fe fc3e 	bl	8009d00 <xQueueGenericSend>
 800b484:	6278      	str	r0, [r7, #36]	@ 0x24
 800b486:	e008      	b.n	800b49a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b488:	4b06      	ldr	r3, [pc, #24]	@ (800b4a4 <xTimerGenericCommand+0x98>)
 800b48a:	6818      	ldr	r0, [r3, #0]
 800b48c:	f107 0110 	add.w	r1, r7, #16
 800b490:	2300      	movs	r3, #0
 800b492:	683a      	ldr	r2, [r7, #0]
 800b494:	f7fe fd36 	bl	8009f04 <xQueueGenericSendFromISR>
 800b498:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3728      	adds	r7, #40	@ 0x28
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	20009fa8 	.word	0x20009fa8

0800b4a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b088      	sub	sp, #32
 800b4ac:	af02      	add	r7, sp, #8
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4b2:	4b23      	ldr	r3, [pc, #140]	@ (800b540 <prvProcessExpiredTimer+0x98>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	3304      	adds	r3, #4
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7fe fae9 	bl	8009a98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4cc:	f003 0304 	and.w	r3, r3, #4
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d023      	beq.n	800b51c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	699a      	ldr	r2, [r3, #24]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	18d1      	adds	r1, r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	6978      	ldr	r0, [r7, #20]
 800b4e2:	f000 f8d5 	bl	800b690 <prvInsertTimerInActiveList>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d020      	beq.n	800b52e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	6978      	ldr	r0, [r7, #20]
 800b4f8:	f7ff ff88 	bl	800b40c <xTimerGenericCommand>
 800b4fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d114      	bne.n	800b52e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b508:	f383 8811 	msr	BASEPRI, r3
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	60fb      	str	r3, [r7, #12]
}
 800b516:	bf00      	nop
 800b518:	bf00      	nop
 800b51a:	e7fd      	b.n	800b518 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b522:	f023 0301 	bic.w	r3, r3, #1
 800b526:	b2da      	uxtb	r2, r3
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	6a1b      	ldr	r3, [r3, #32]
 800b532:	6978      	ldr	r0, [r7, #20]
 800b534:	4798      	blx	r3
}
 800b536:	bf00      	nop
 800b538:	3718      	adds	r7, #24
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	20009fa0 	.word	0x20009fa0

0800b544 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b54c:	f107 0308 	add.w	r3, r7, #8
 800b550:	4618      	mov	r0, r3
 800b552:	f000 f859 	bl	800b608 <prvGetNextExpireTime>
 800b556:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	4619      	mov	r1, r3
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f000 f805 	bl	800b56c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b562:	f000 f8d7 	bl	800b714 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b566:	bf00      	nop
 800b568:	e7f0      	b.n	800b54c <prvTimerTask+0x8>
	...

0800b56c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b576:	f7ff fa17 	bl	800a9a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b57a:	f107 0308 	add.w	r3, r7, #8
 800b57e:	4618      	mov	r0, r3
 800b580:	f000 f866 	bl	800b650 <prvSampleTimeNow>
 800b584:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d130      	bne.n	800b5ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10a      	bne.n	800b5a8 <prvProcessTimerOrBlockTask+0x3c>
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	429a      	cmp	r2, r3
 800b598:	d806      	bhi.n	800b5a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b59a:	f7ff fa13 	bl	800a9c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b59e:	68f9      	ldr	r1, [r7, #12]
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f7ff ff81 	bl	800b4a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b5a6:	e024      	b.n	800b5f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d008      	beq.n	800b5c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b5ae:	4b13      	ldr	r3, [pc, #76]	@ (800b5fc <prvProcessTimerOrBlockTask+0x90>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <prvProcessTimerOrBlockTask+0x50>
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e000      	b.n	800b5be <prvProcessTimerOrBlockTask+0x52>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b5c0:	4b0f      	ldr	r3, [pc, #60]	@ (800b600 <prvProcessTimerOrBlockTask+0x94>)
 800b5c2:	6818      	ldr	r0, [r3, #0]
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	1ad3      	subs	r3, r2, r3
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	f7fe ff53 	bl	800a478 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b5d2:	f7ff f9f7 	bl	800a9c4 <xTaskResumeAll>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10a      	bne.n	800b5f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b5dc:	4b09      	ldr	r3, [pc, #36]	@ (800b604 <prvProcessTimerOrBlockTask+0x98>)
 800b5de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5e2:	601a      	str	r2, [r3, #0]
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	f3bf 8f6f 	isb	sy
}
 800b5ec:	e001      	b.n	800b5f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b5ee:	f7ff f9e9 	bl	800a9c4 <xTaskResumeAll>
}
 800b5f2:	bf00      	nop
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	20009fa4 	.word	0x20009fa4
 800b600:	20009fa8 	.word	0x20009fa8
 800b604:	e000ed04 	.word	0xe000ed04

0800b608 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b610:	4b0e      	ldr	r3, [pc, #56]	@ (800b64c <prvGetNextExpireTime+0x44>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d101      	bne.n	800b61e <prvGetNextExpireTime+0x16>
 800b61a:	2201      	movs	r2, #1
 800b61c:	e000      	b.n	800b620 <prvGetNextExpireTime+0x18>
 800b61e:	2200      	movs	r2, #0
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d105      	bne.n	800b638 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b62c:	4b07      	ldr	r3, [pc, #28]	@ (800b64c <prvGetNextExpireTime+0x44>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	60fb      	str	r3, [r7, #12]
 800b636:	e001      	b.n	800b63c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b638:	2300      	movs	r3, #0
 800b63a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b63c:	68fb      	ldr	r3, [r7, #12]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3714      	adds	r7, #20
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	20009fa0 	.word	0x20009fa0

0800b650 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b658:	f7ff fa52 	bl	800ab00 <xTaskGetTickCount>
 800b65c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b65e:	4b0b      	ldr	r3, [pc, #44]	@ (800b68c <prvSampleTimeNow+0x3c>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	429a      	cmp	r2, r3
 800b666:	d205      	bcs.n	800b674 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b668:	f000 f93a 	bl	800b8e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	601a      	str	r2, [r3, #0]
 800b672:	e002      	b.n	800b67a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b67a:	4a04      	ldr	r2, [pc, #16]	@ (800b68c <prvSampleTimeNow+0x3c>)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b680:	68fb      	ldr	r3, [r7, #12]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	20009fb0 	.word	0x20009fb0

0800b690 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
 800b69c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	68ba      	ldr	r2, [r7, #8]
 800b6a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d812      	bhi.n	800b6dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	1ad2      	subs	r2, r2, r3
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	699b      	ldr	r3, [r3, #24]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d302      	bcc.n	800b6ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	617b      	str	r3, [r7, #20]
 800b6c8:	e01b      	b.n	800b702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b6ca:	4b10      	ldr	r3, [pc, #64]	@ (800b70c <prvInsertTimerInActiveList+0x7c>)
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	3304      	adds	r3, #4
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	f7fe f9a6 	bl	8009a26 <vListInsert>
 800b6da:	e012      	b.n	800b702 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d206      	bcs.n	800b6f2 <prvInsertTimerInActiveList+0x62>
 800b6e4:	68ba      	ldr	r2, [r7, #8]
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d302      	bcc.n	800b6f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	617b      	str	r3, [r7, #20]
 800b6f0:	e007      	b.n	800b702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6f2:	4b07      	ldr	r3, [pc, #28]	@ (800b710 <prvInsertTimerInActiveList+0x80>)
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	3304      	adds	r3, #4
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	f7fe f992 	bl	8009a26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b702:	697b      	ldr	r3, [r7, #20]
}
 800b704:	4618      	mov	r0, r3
 800b706:	3718      	adds	r7, #24
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	20009fa4 	.word	0x20009fa4
 800b710:	20009fa0 	.word	0x20009fa0

0800b714 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b08e      	sub	sp, #56	@ 0x38
 800b718:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b71a:	e0ce      	b.n	800b8ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	da19      	bge.n	800b756 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b722:	1d3b      	adds	r3, r7, #4
 800b724:	3304      	adds	r3, #4
 800b726:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d10b      	bne.n	800b746 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	61fb      	str	r3, [r7, #28]
}
 800b740:	bf00      	nop
 800b742:	bf00      	nop
 800b744:	e7fd      	b.n	800b742 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b74c:	6850      	ldr	r0, [r2, #4]
 800b74e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b750:	6892      	ldr	r2, [r2, #8]
 800b752:	4611      	mov	r1, r2
 800b754:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f2c0 80ae 	blt.w	800b8ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b764:	695b      	ldr	r3, [r3, #20]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d004      	beq.n	800b774 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b76c:	3304      	adds	r3, #4
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fe f992 	bl	8009a98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b774:	463b      	mov	r3, r7
 800b776:	4618      	mov	r0, r3
 800b778:	f7ff ff6a 	bl	800b650 <prvSampleTimeNow>
 800b77c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b09      	cmp	r3, #9
 800b782:	f200 8097 	bhi.w	800b8b4 <prvProcessReceivedCommands+0x1a0>
 800b786:	a201      	add	r2, pc, #4	@ (adr r2, 800b78c <prvProcessReceivedCommands+0x78>)
 800b788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78c:	0800b7b5 	.word	0x0800b7b5
 800b790:	0800b7b5 	.word	0x0800b7b5
 800b794:	0800b7b5 	.word	0x0800b7b5
 800b798:	0800b82b 	.word	0x0800b82b
 800b79c:	0800b83f 	.word	0x0800b83f
 800b7a0:	0800b88b 	.word	0x0800b88b
 800b7a4:	0800b7b5 	.word	0x0800b7b5
 800b7a8:	0800b7b5 	.word	0x0800b7b5
 800b7ac:	0800b82b 	.word	0x0800b82b
 800b7b0:	0800b83f 	.word	0x0800b83f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b7ba:	f043 0301 	orr.w	r3, r3, #1
 800b7be:	b2da      	uxtb	r2, r3
 800b7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7c6:	68ba      	ldr	r2, [r7, #8]
 800b7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	18d1      	adds	r1, r2, r3
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7d4:	f7ff ff5c 	bl	800b690 <prvInsertTimerInActiveList>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d06c      	beq.n	800b8b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e0:	6a1b      	ldr	r3, [r3, #32]
 800b7e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b7ec:	f003 0304 	and.w	r3, r3, #4
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d061      	beq.n	800b8b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f8:	699b      	ldr	r3, [r3, #24]
 800b7fa:	441a      	add	r2, r3
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	2300      	movs	r3, #0
 800b802:	2100      	movs	r1, #0
 800b804:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b806:	f7ff fe01 	bl	800b40c <xTimerGenericCommand>
 800b80a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b80c:	6a3b      	ldr	r3, [r7, #32]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d152      	bne.n	800b8b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b816:	f383 8811 	msr	BASEPRI, r3
 800b81a:	f3bf 8f6f 	isb	sy
 800b81e:	f3bf 8f4f 	dsb	sy
 800b822:	61bb      	str	r3, [r7, #24]
}
 800b824:	bf00      	nop
 800b826:	bf00      	nop
 800b828:	e7fd      	b.n	800b826 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b830:	f023 0301 	bic.w	r3, r3, #1
 800b834:	b2da      	uxtb	r2, r3
 800b836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b838:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b83c:	e03d      	b.n	800b8ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b840:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b844:	f043 0301 	orr.w	r3, r3, #1
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b84c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b850:	68ba      	ldr	r2, [r7, #8]
 800b852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b854:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b858:	699b      	ldr	r3, [r3, #24]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10b      	bne.n	800b876 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	617b      	str	r3, [r7, #20]
}
 800b870:	bf00      	nop
 800b872:	bf00      	nop
 800b874:	e7fd      	b.n	800b872 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b878:	699a      	ldr	r2, [r3, #24]
 800b87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b87c:	18d1      	adds	r1, r2, r3
 800b87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b884:	f7ff ff04 	bl	800b690 <prvInsertTimerInActiveList>
					break;
 800b888:	e017      	b.n	800b8ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b88c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b890:	f003 0302 	and.w	r3, r3, #2
 800b894:	2b00      	cmp	r3, #0
 800b896:	d103      	bne.n	800b8a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b898:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b89a:	f000 fbe5 	bl	800c068 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b89e:	e00c      	b.n	800b8ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8a6:	f023 0301 	bic.w	r3, r3, #1
 800b8aa:	b2da      	uxtb	r2, r3
 800b8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b8b2:	e002      	b.n	800b8ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b8b4:	bf00      	nop
 800b8b6:	e000      	b.n	800b8ba <prvProcessReceivedCommands+0x1a6>
					break;
 800b8b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8ba:	4b08      	ldr	r3, [pc, #32]	@ (800b8dc <prvProcessReceivedCommands+0x1c8>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	1d39      	adds	r1, r7, #4
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7fe fbbc 	bl	800a040 <xQueueReceive>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	f47f af26 	bne.w	800b71c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b8d0:	bf00      	nop
 800b8d2:	bf00      	nop
 800b8d4:	3730      	adds	r7, #48	@ 0x30
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	20009fa8 	.word	0x20009fa8

0800b8e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8e6:	e049      	b.n	800b97c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8e8:	4b2e      	ldr	r3, [pc, #184]	@ (800b9a4 <prvSwitchTimerLists+0xc4>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8f2:	4b2c      	ldr	r3, [pc, #176]	@ (800b9a4 <prvSwitchTimerLists+0xc4>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	3304      	adds	r3, #4
 800b900:	4618      	mov	r0, r3
 800b902:	f7fe f8c9 	bl	8009a98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b914:	f003 0304 	and.w	r3, r3, #4
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d02f      	beq.n	800b97c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	699b      	ldr	r3, [r3, #24]
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	4413      	add	r3, r2
 800b924:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d90e      	bls.n	800b94c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b93a:	4b1a      	ldr	r3, [pc, #104]	@ (800b9a4 <prvSwitchTimerLists+0xc4>)
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	3304      	adds	r3, #4
 800b942:	4619      	mov	r1, r3
 800b944:	4610      	mov	r0, r2
 800b946:	f7fe f86e 	bl	8009a26 <vListInsert>
 800b94a:	e017      	b.n	800b97c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b94c:	2300      	movs	r3, #0
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	2300      	movs	r3, #0
 800b952:	693a      	ldr	r2, [r7, #16]
 800b954:	2100      	movs	r1, #0
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f7ff fd58 	bl	800b40c <xTimerGenericCommand>
 800b95c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10b      	bne.n	800b97c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	603b      	str	r3, [r7, #0]
}
 800b976:	bf00      	nop
 800b978:	bf00      	nop
 800b97a:	e7fd      	b.n	800b978 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b97c:	4b09      	ldr	r3, [pc, #36]	@ (800b9a4 <prvSwitchTimerLists+0xc4>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1b0      	bne.n	800b8e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b986:	4b07      	ldr	r3, [pc, #28]	@ (800b9a4 <prvSwitchTimerLists+0xc4>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b98c:	4b06      	ldr	r3, [pc, #24]	@ (800b9a8 <prvSwitchTimerLists+0xc8>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a04      	ldr	r2, [pc, #16]	@ (800b9a4 <prvSwitchTimerLists+0xc4>)
 800b992:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b994:	4a04      	ldr	r2, [pc, #16]	@ (800b9a8 <prvSwitchTimerLists+0xc8>)
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	6013      	str	r3, [r2, #0]
}
 800b99a:	bf00      	nop
 800b99c:	3718      	adds	r7, #24
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	20009fa0 	.word	0x20009fa0
 800b9a8:	20009fa4 	.word	0x20009fa4

0800b9ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b9b2:	f000 f969 	bl	800bc88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b9b6:	4b15      	ldr	r3, [pc, #84]	@ (800ba0c <prvCheckForValidListAndQueue+0x60>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d120      	bne.n	800ba00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b9be:	4814      	ldr	r0, [pc, #80]	@ (800ba10 <prvCheckForValidListAndQueue+0x64>)
 800b9c0:	f7fd ffe0 	bl	8009984 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b9c4:	4813      	ldr	r0, [pc, #76]	@ (800ba14 <prvCheckForValidListAndQueue+0x68>)
 800b9c6:	f7fd ffdd 	bl	8009984 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b9ca:	4b13      	ldr	r3, [pc, #76]	@ (800ba18 <prvCheckForValidListAndQueue+0x6c>)
 800b9cc:	4a10      	ldr	r2, [pc, #64]	@ (800ba10 <prvCheckForValidListAndQueue+0x64>)
 800b9ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b9d0:	4b12      	ldr	r3, [pc, #72]	@ (800ba1c <prvCheckForValidListAndQueue+0x70>)
 800b9d2:	4a10      	ldr	r2, [pc, #64]	@ (800ba14 <prvCheckForValidListAndQueue+0x68>)
 800b9d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	4b11      	ldr	r3, [pc, #68]	@ (800ba20 <prvCheckForValidListAndQueue+0x74>)
 800b9dc:	4a11      	ldr	r2, [pc, #68]	@ (800ba24 <prvCheckForValidListAndQueue+0x78>)
 800b9de:	2110      	movs	r1, #16
 800b9e0:	200a      	movs	r0, #10
 800b9e2:	f7fe f8ed 	bl	8009bc0 <xQueueGenericCreateStatic>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	4a08      	ldr	r2, [pc, #32]	@ (800ba0c <prvCheckForValidListAndQueue+0x60>)
 800b9ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b9ec:	4b07      	ldr	r3, [pc, #28]	@ (800ba0c <prvCheckForValidListAndQueue+0x60>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d005      	beq.n	800ba00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b9f4:	4b05      	ldr	r3, [pc, #20]	@ (800ba0c <prvCheckForValidListAndQueue+0x60>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	490b      	ldr	r1, [pc, #44]	@ (800ba28 <prvCheckForValidListAndQueue+0x7c>)
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe fd12 	bl	800a424 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba00:	f000 f974 	bl	800bcec <vPortExitCritical>
}
 800ba04:	bf00      	nop
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20009fa8 	.word	0x20009fa8
 800ba10:	20009f78 	.word	0x20009f78
 800ba14:	20009f8c 	.word	0x20009f8c
 800ba18:	20009fa0 	.word	0x20009fa0
 800ba1c:	20009fa4 	.word	0x20009fa4
 800ba20:	2000a054 	.word	0x2000a054
 800ba24:	20009fb4 	.word	0x20009fb4
 800ba28:	0800d6d0 	.word	0x0800d6d0

0800ba2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b085      	sub	sp, #20
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3b04      	subs	r3, #4
 800ba3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ba44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	3b04      	subs	r3, #4
 800ba4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	f023 0201 	bic.w	r2, r3, #1
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	3b04      	subs	r3, #4
 800ba5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba5c:	4a0c      	ldr	r2, [pc, #48]	@ (800ba90 <pxPortInitialiseStack+0x64>)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	3b14      	subs	r3, #20
 800ba66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	3b04      	subs	r3, #4
 800ba72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f06f 0202 	mvn.w	r2, #2
 800ba7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	3b20      	subs	r3, #32
 800ba80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba82:	68fb      	ldr	r3, [r7, #12]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3714      	adds	r7, #20
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr
 800ba90:	0800ba95 	.word	0x0800ba95

0800ba94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba9e:	4b13      	ldr	r3, [pc, #76]	@ (800baec <prvTaskExitError+0x58>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800baa6:	d00b      	beq.n	800bac0 <prvTaskExitError+0x2c>
	__asm volatile
 800baa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baac:	f383 8811 	msr	BASEPRI, r3
 800bab0:	f3bf 8f6f 	isb	sy
 800bab4:	f3bf 8f4f 	dsb	sy
 800bab8:	60fb      	str	r3, [r7, #12]
}
 800baba:	bf00      	nop
 800babc:	bf00      	nop
 800babe:	e7fd      	b.n	800babc <prvTaskExitError+0x28>
	__asm volatile
 800bac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bac4:	f383 8811 	msr	BASEPRI, r3
 800bac8:	f3bf 8f6f 	isb	sy
 800bacc:	f3bf 8f4f 	dsb	sy
 800bad0:	60bb      	str	r3, [r7, #8]
}
 800bad2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bad4:	bf00      	nop
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d0fc      	beq.n	800bad6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800badc:	bf00      	nop
 800bade:	bf00      	nop
 800bae0:	3714      	adds	r7, #20
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	200002a8 	.word	0x200002a8

0800baf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800baf0:	4b07      	ldr	r3, [pc, #28]	@ (800bb10 <pxCurrentTCBConst2>)
 800baf2:	6819      	ldr	r1, [r3, #0]
 800baf4:	6808      	ldr	r0, [r1, #0]
 800baf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bafa:	f380 8809 	msr	PSP, r0
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f04f 0000 	mov.w	r0, #0
 800bb06:	f380 8811 	msr	BASEPRI, r0
 800bb0a:	4770      	bx	lr
 800bb0c:	f3af 8000 	nop.w

0800bb10 <pxCurrentTCBConst2>:
 800bb10:	20009a78 	.word	0x20009a78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb14:	bf00      	nop
 800bb16:	bf00      	nop

0800bb18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb18:	4808      	ldr	r0, [pc, #32]	@ (800bb3c <prvPortStartFirstTask+0x24>)
 800bb1a:	6800      	ldr	r0, [r0, #0]
 800bb1c:	6800      	ldr	r0, [r0, #0]
 800bb1e:	f380 8808 	msr	MSP, r0
 800bb22:	f04f 0000 	mov.w	r0, #0
 800bb26:	f380 8814 	msr	CONTROL, r0
 800bb2a:	b662      	cpsie	i
 800bb2c:	b661      	cpsie	f
 800bb2e:	f3bf 8f4f 	dsb	sy
 800bb32:	f3bf 8f6f 	isb	sy
 800bb36:	df00      	svc	0
 800bb38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb3a:	bf00      	nop
 800bb3c:	e000ed08 	.word	0xe000ed08

0800bb40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bb46:	4b47      	ldr	r3, [pc, #284]	@ (800bc64 <xPortStartScheduler+0x124>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a47      	ldr	r2, [pc, #284]	@ (800bc68 <xPortStartScheduler+0x128>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d10b      	bne.n	800bb68 <xPortStartScheduler+0x28>
	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	60fb      	str	r3, [r7, #12]
}
 800bb62:	bf00      	nop
 800bb64:	bf00      	nop
 800bb66:	e7fd      	b.n	800bb64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb68:	4b3e      	ldr	r3, [pc, #248]	@ (800bc64 <xPortStartScheduler+0x124>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	4a3f      	ldr	r2, [pc, #252]	@ (800bc6c <xPortStartScheduler+0x12c>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d10b      	bne.n	800bb8a <xPortStartScheduler+0x4a>
	__asm volatile
 800bb72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb76:	f383 8811 	msr	BASEPRI, r3
 800bb7a:	f3bf 8f6f 	isb	sy
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	613b      	str	r3, [r7, #16]
}
 800bb84:	bf00      	nop
 800bb86:	bf00      	nop
 800bb88:	e7fd      	b.n	800bb86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb8a:	4b39      	ldr	r3, [pc, #228]	@ (800bc70 <xPortStartScheduler+0x130>)
 800bb8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	22ff      	movs	r2, #255	@ 0xff
 800bb9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bba4:	78fb      	ldrb	r3, [r7, #3]
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	4b31      	ldr	r3, [pc, #196]	@ (800bc74 <xPortStartScheduler+0x134>)
 800bbb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bbb2:	4b31      	ldr	r3, [pc, #196]	@ (800bc78 <xPortStartScheduler+0x138>)
 800bbb4:	2207      	movs	r2, #7
 800bbb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbb8:	e009      	b.n	800bbce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bbba:	4b2f      	ldr	r3, [pc, #188]	@ (800bc78 <xPortStartScheduler+0x138>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	4a2d      	ldr	r2, [pc, #180]	@ (800bc78 <xPortStartScheduler+0x138>)
 800bbc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bbc4:	78fb      	ldrb	r3, [r7, #3]
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	005b      	lsls	r3, r3, #1
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbce:	78fb      	ldrb	r3, [r7, #3]
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbd6:	2b80      	cmp	r3, #128	@ 0x80
 800bbd8:	d0ef      	beq.n	800bbba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bbda:	4b27      	ldr	r3, [pc, #156]	@ (800bc78 <xPortStartScheduler+0x138>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f1c3 0307 	rsb	r3, r3, #7
 800bbe2:	2b04      	cmp	r3, #4
 800bbe4:	d00b      	beq.n	800bbfe <xPortStartScheduler+0xbe>
	__asm volatile
 800bbe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbea:	f383 8811 	msr	BASEPRI, r3
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	60bb      	str	r3, [r7, #8]
}
 800bbf8:	bf00      	nop
 800bbfa:	bf00      	nop
 800bbfc:	e7fd      	b.n	800bbfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bbfe:	4b1e      	ldr	r3, [pc, #120]	@ (800bc78 <xPortStartScheduler+0x138>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	021b      	lsls	r3, r3, #8
 800bc04:	4a1c      	ldr	r2, [pc, #112]	@ (800bc78 <xPortStartScheduler+0x138>)
 800bc06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc08:	4b1b      	ldr	r3, [pc, #108]	@ (800bc78 <xPortStartScheduler+0x138>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bc10:	4a19      	ldr	r2, [pc, #100]	@ (800bc78 <xPortStartScheduler+0x138>)
 800bc12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	b2da      	uxtb	r2, r3
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc1c:	4b17      	ldr	r3, [pc, #92]	@ (800bc7c <xPortStartScheduler+0x13c>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a16      	ldr	r2, [pc, #88]	@ (800bc7c <xPortStartScheduler+0x13c>)
 800bc22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bc26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc28:	4b14      	ldr	r3, [pc, #80]	@ (800bc7c <xPortStartScheduler+0x13c>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4a13      	ldr	r2, [pc, #76]	@ (800bc7c <xPortStartScheduler+0x13c>)
 800bc2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bc32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc34:	f000 f8da 	bl	800bdec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc38:	4b11      	ldr	r3, [pc, #68]	@ (800bc80 <xPortStartScheduler+0x140>)
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc3e:	f000 f8f9 	bl	800be34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bc42:	4b10      	ldr	r3, [pc, #64]	@ (800bc84 <xPortStartScheduler+0x144>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a0f      	ldr	r2, [pc, #60]	@ (800bc84 <xPortStartScheduler+0x144>)
 800bc48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bc4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc4e:	f7ff ff63 	bl	800bb18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc52:	f7ff f831 	bl	800acb8 <vTaskSwitchContext>
	prvTaskExitError();
 800bc56:	f7ff ff1d 	bl	800ba94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3718      	adds	r7, #24
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	e000ed00 	.word	0xe000ed00
 800bc68:	410fc271 	.word	0x410fc271
 800bc6c:	410fc270 	.word	0x410fc270
 800bc70:	e000e400 	.word	0xe000e400
 800bc74:	2000a0a4 	.word	0x2000a0a4
 800bc78:	2000a0a8 	.word	0x2000a0a8
 800bc7c:	e000ed20 	.word	0xe000ed20
 800bc80:	200002a8 	.word	0x200002a8
 800bc84:	e000ef34 	.word	0xe000ef34

0800bc88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	607b      	str	r3, [r7, #4]
}
 800bca0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bca2:	4b10      	ldr	r3, [pc, #64]	@ (800bce4 <vPortEnterCritical+0x5c>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	3301      	adds	r3, #1
 800bca8:	4a0e      	ldr	r2, [pc, #56]	@ (800bce4 <vPortEnterCritical+0x5c>)
 800bcaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bcac:	4b0d      	ldr	r3, [pc, #52]	@ (800bce4 <vPortEnterCritical+0x5c>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d110      	bne.n	800bcd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bcb4:	4b0c      	ldr	r3, [pc, #48]	@ (800bce8 <vPortEnterCritical+0x60>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00b      	beq.n	800bcd6 <vPortEnterCritical+0x4e>
	__asm volatile
 800bcbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	603b      	str	r3, [r7, #0]
}
 800bcd0:	bf00      	nop
 800bcd2:	bf00      	nop
 800bcd4:	e7fd      	b.n	800bcd2 <vPortEnterCritical+0x4a>
	}
}
 800bcd6:	bf00      	nop
 800bcd8:	370c      	adds	r7, #12
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	200002a8 	.word	0x200002a8
 800bce8:	e000ed04 	.word	0xe000ed04

0800bcec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bcf2:	4b12      	ldr	r3, [pc, #72]	@ (800bd3c <vPortExitCritical+0x50>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d10b      	bne.n	800bd12 <vPortExitCritical+0x26>
	__asm volatile
 800bcfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcfe:	f383 8811 	msr	BASEPRI, r3
 800bd02:	f3bf 8f6f 	isb	sy
 800bd06:	f3bf 8f4f 	dsb	sy
 800bd0a:	607b      	str	r3, [r7, #4]
}
 800bd0c:	bf00      	nop
 800bd0e:	bf00      	nop
 800bd10:	e7fd      	b.n	800bd0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bd12:	4b0a      	ldr	r3, [pc, #40]	@ (800bd3c <vPortExitCritical+0x50>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	3b01      	subs	r3, #1
 800bd18:	4a08      	ldr	r2, [pc, #32]	@ (800bd3c <vPortExitCritical+0x50>)
 800bd1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd1c:	4b07      	ldr	r3, [pc, #28]	@ (800bd3c <vPortExitCritical+0x50>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d105      	bne.n	800bd30 <vPortExitCritical+0x44>
 800bd24:	2300      	movs	r3, #0
 800bd26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	f383 8811 	msr	BASEPRI, r3
}
 800bd2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd30:	bf00      	nop
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	200002a8 	.word	0x200002a8

0800bd40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd40:	f3ef 8009 	mrs	r0, PSP
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	4b15      	ldr	r3, [pc, #84]	@ (800bda0 <pxCurrentTCBConst>)
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	f01e 0f10 	tst.w	lr, #16
 800bd50:	bf08      	it	eq
 800bd52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5a:	6010      	str	r0, [r2, #0]
 800bd5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bd64:	f380 8811 	msr	BASEPRI, r0
 800bd68:	f3bf 8f4f 	dsb	sy
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f7fe ffa2 	bl	800acb8 <vTaskSwitchContext>
 800bd74:	f04f 0000 	mov.w	r0, #0
 800bd78:	f380 8811 	msr	BASEPRI, r0
 800bd7c:	bc09      	pop	{r0, r3}
 800bd7e:	6819      	ldr	r1, [r3, #0]
 800bd80:	6808      	ldr	r0, [r1, #0]
 800bd82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd86:	f01e 0f10 	tst.w	lr, #16
 800bd8a:	bf08      	it	eq
 800bd8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd90:	f380 8809 	msr	PSP, r0
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	f3af 8000 	nop.w

0800bda0 <pxCurrentTCBConst>:
 800bda0:	20009a78 	.word	0x20009a78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bda4:	bf00      	nop
 800bda6:	bf00      	nop

0800bda8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	607b      	str	r3, [r7, #4]
}
 800bdc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bdc2:	f7fe febf 	bl	800ab44 <xTaskIncrementTick>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d003      	beq.n	800bdd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bdcc:	4b06      	ldr	r3, [pc, #24]	@ (800bde8 <xPortSysTickHandler+0x40>)
 800bdce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	f383 8811 	msr	BASEPRI, r3
}
 800bdde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bde0:	bf00      	nop
 800bde2:	3708      	adds	r7, #8
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	e000ed04 	.word	0xe000ed04

0800bdec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bdec:	b480      	push	{r7}
 800bdee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bdf0:	4b0b      	ldr	r3, [pc, #44]	@ (800be20 <vPortSetupTimerInterrupt+0x34>)
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bdf6:	4b0b      	ldr	r3, [pc, #44]	@ (800be24 <vPortSetupTimerInterrupt+0x38>)
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bdfc:	4b0a      	ldr	r3, [pc, #40]	@ (800be28 <vPortSetupTimerInterrupt+0x3c>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a0a      	ldr	r2, [pc, #40]	@ (800be2c <vPortSetupTimerInterrupt+0x40>)
 800be02:	fba2 2303 	umull	r2, r3, r2, r3
 800be06:	099b      	lsrs	r3, r3, #6
 800be08:	4a09      	ldr	r2, [pc, #36]	@ (800be30 <vPortSetupTimerInterrupt+0x44>)
 800be0a:	3b01      	subs	r3, #1
 800be0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be0e:	4b04      	ldr	r3, [pc, #16]	@ (800be20 <vPortSetupTimerInterrupt+0x34>)
 800be10:	2207      	movs	r2, #7
 800be12:	601a      	str	r2, [r3, #0]
}
 800be14:	bf00      	nop
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	e000e010 	.word	0xe000e010
 800be24:	e000e018 	.word	0xe000e018
 800be28:	20000000 	.word	0x20000000
 800be2c:	10624dd3 	.word	0x10624dd3
 800be30:	e000e014 	.word	0xe000e014

0800be34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800be44 <vPortEnableVFP+0x10>
 800be38:	6801      	ldr	r1, [r0, #0]
 800be3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800be3e:	6001      	str	r1, [r0, #0]
 800be40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800be42:	bf00      	nop
 800be44:	e000ed88 	.word	0xe000ed88

0800be48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800be4e:	f3ef 8305 	mrs	r3, IPSR
 800be52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2b0f      	cmp	r3, #15
 800be58:	d915      	bls.n	800be86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800be5a:	4a18      	ldr	r2, [pc, #96]	@ (800bebc <vPortValidateInterruptPriority+0x74>)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	4413      	add	r3, r2
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be64:	4b16      	ldr	r3, [pc, #88]	@ (800bec0 <vPortValidateInterruptPriority+0x78>)
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	7afa      	ldrb	r2, [r7, #11]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d20b      	bcs.n	800be86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800be6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be72:	f383 8811 	msr	BASEPRI, r3
 800be76:	f3bf 8f6f 	isb	sy
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	607b      	str	r3, [r7, #4]
}
 800be80:	bf00      	nop
 800be82:	bf00      	nop
 800be84:	e7fd      	b.n	800be82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be86:	4b0f      	ldr	r3, [pc, #60]	@ (800bec4 <vPortValidateInterruptPriority+0x7c>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800be8e:	4b0e      	ldr	r3, [pc, #56]	@ (800bec8 <vPortValidateInterruptPriority+0x80>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	429a      	cmp	r2, r3
 800be94:	d90b      	bls.n	800beae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800be96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9a:	f383 8811 	msr	BASEPRI, r3
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	603b      	str	r3, [r7, #0]
}
 800bea8:	bf00      	nop
 800beaa:	bf00      	nop
 800beac:	e7fd      	b.n	800beaa <vPortValidateInterruptPriority+0x62>
	}
 800beae:	bf00      	nop
 800beb0:	3714      	adds	r7, #20
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	e000e3f0 	.word	0xe000e3f0
 800bec0:	2000a0a4 	.word	0x2000a0a4
 800bec4:	e000ed0c 	.word	0xe000ed0c
 800bec8:	2000a0a8 	.word	0x2000a0a8

0800becc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b08a      	sub	sp, #40	@ 0x28
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bed4:	2300      	movs	r3, #0
 800bed6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bed8:	f7fe fd66 	bl	800a9a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bedc:	4b5c      	ldr	r3, [pc, #368]	@ (800c050 <pvPortMalloc+0x184>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bee4:	f000 f924 	bl	800c130 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bee8:	4b5a      	ldr	r3, [pc, #360]	@ (800c054 <pvPortMalloc+0x188>)
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4013      	ands	r3, r2
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f040 8095 	bne.w	800c020 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d01e      	beq.n	800bf3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800befc:	2208      	movs	r2, #8
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4413      	add	r3, r2
 800bf02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f003 0307 	and.w	r3, r3, #7
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d015      	beq.n	800bf3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f023 0307 	bic.w	r3, r3, #7
 800bf14:	3308      	adds	r3, #8
 800bf16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f003 0307 	and.w	r3, r3, #7
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00b      	beq.n	800bf3a <pvPortMalloc+0x6e>
	__asm volatile
 800bf22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf26:	f383 8811 	msr	BASEPRI, r3
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	f3bf 8f4f 	dsb	sy
 800bf32:	617b      	str	r3, [r7, #20]
}
 800bf34:	bf00      	nop
 800bf36:	bf00      	nop
 800bf38:	e7fd      	b.n	800bf36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d06f      	beq.n	800c020 <pvPortMalloc+0x154>
 800bf40:	4b45      	ldr	r3, [pc, #276]	@ (800c058 <pvPortMalloc+0x18c>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d86a      	bhi.n	800c020 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bf4a:	4b44      	ldr	r3, [pc, #272]	@ (800c05c <pvPortMalloc+0x190>)
 800bf4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bf4e:	4b43      	ldr	r3, [pc, #268]	@ (800c05c <pvPortMalloc+0x190>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf54:	e004      	b.n	800bf60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bf56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d903      	bls.n	800bf72 <pvPortMalloc+0xa6>
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1f1      	bne.n	800bf56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bf72:	4b37      	ldr	r3, [pc, #220]	@ (800c050 <pvPortMalloc+0x184>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d051      	beq.n	800c020 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bf7c:	6a3b      	ldr	r3, [r7, #32]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2208      	movs	r2, #8
 800bf82:	4413      	add	r3, r2
 800bf84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	6a3b      	ldr	r3, [r7, #32]
 800bf8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf90:	685a      	ldr	r2, [r3, #4]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	1ad2      	subs	r2, r2, r3
 800bf96:	2308      	movs	r3, #8
 800bf98:	005b      	lsls	r3, r3, #1
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d920      	bls.n	800bfe0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	f003 0307 	and.w	r3, r3, #7
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00b      	beq.n	800bfc8 <pvPortMalloc+0xfc>
	__asm volatile
 800bfb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	613b      	str	r3, [r7, #16]
}
 800bfc2:	bf00      	nop
 800bfc4:	bf00      	nop
 800bfc6:	e7fd      	b.n	800bfc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bfc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfca:	685a      	ldr	r2, [r3, #4]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	1ad2      	subs	r2, r2, r3
 800bfd0:	69bb      	ldr	r3, [r7, #24]
 800bfd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bfda:	69b8      	ldr	r0, [r7, #24]
 800bfdc:	f000 f90a 	bl	800c1f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bfe0:	4b1d      	ldr	r3, [pc, #116]	@ (800c058 <pvPortMalloc+0x18c>)
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	4a1b      	ldr	r2, [pc, #108]	@ (800c058 <pvPortMalloc+0x18c>)
 800bfec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bfee:	4b1a      	ldr	r3, [pc, #104]	@ (800c058 <pvPortMalloc+0x18c>)
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	4b1b      	ldr	r3, [pc, #108]	@ (800c060 <pvPortMalloc+0x194>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d203      	bcs.n	800c002 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bffa:	4b17      	ldr	r3, [pc, #92]	@ (800c058 <pvPortMalloc+0x18c>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a18      	ldr	r2, [pc, #96]	@ (800c060 <pvPortMalloc+0x194>)
 800c000:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c004:	685a      	ldr	r2, [r3, #4]
 800c006:	4b13      	ldr	r3, [pc, #76]	@ (800c054 <pvPortMalloc+0x188>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	431a      	orrs	r2, r3
 800c00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c00e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c012:	2200      	movs	r2, #0
 800c014:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c016:	4b13      	ldr	r3, [pc, #76]	@ (800c064 <pvPortMalloc+0x198>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	3301      	adds	r3, #1
 800c01c:	4a11      	ldr	r2, [pc, #68]	@ (800c064 <pvPortMalloc+0x198>)
 800c01e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c020:	f7fe fcd0 	bl	800a9c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	f003 0307 	and.w	r3, r3, #7
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00b      	beq.n	800c046 <pvPortMalloc+0x17a>
	__asm volatile
 800c02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	60fb      	str	r3, [r7, #12]
}
 800c040:	bf00      	nop
 800c042:	bf00      	nop
 800c044:	e7fd      	b.n	800c042 <pvPortMalloc+0x176>
	return pvReturn;
 800c046:	69fb      	ldr	r3, [r7, #28]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3728      	adds	r7, #40	@ 0x28
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	2000dcb4 	.word	0x2000dcb4
 800c054:	2000dcc8 	.word	0x2000dcc8
 800c058:	2000dcb8 	.word	0x2000dcb8
 800c05c:	2000dcac 	.word	0x2000dcac
 800c060:	2000dcbc 	.word	0x2000dcbc
 800c064:	2000dcc0 	.word	0x2000dcc0

0800c068 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b086      	sub	sp, #24
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d04f      	beq.n	800c11a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c07a:	2308      	movs	r3, #8
 800c07c:	425b      	negs	r3, r3
 800c07e:	697a      	ldr	r2, [r7, #20]
 800c080:	4413      	add	r3, r2
 800c082:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	685a      	ldr	r2, [r3, #4]
 800c08c:	4b25      	ldr	r3, [pc, #148]	@ (800c124 <vPortFree+0xbc>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4013      	ands	r3, r2
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10b      	bne.n	800c0ae <vPortFree+0x46>
	__asm volatile
 800c096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c09a:	f383 8811 	msr	BASEPRI, r3
 800c09e:	f3bf 8f6f 	isb	sy
 800c0a2:	f3bf 8f4f 	dsb	sy
 800c0a6:	60fb      	str	r3, [r7, #12]
}
 800c0a8:	bf00      	nop
 800c0aa:	bf00      	nop
 800c0ac:	e7fd      	b.n	800c0aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00b      	beq.n	800c0ce <vPortFree+0x66>
	__asm volatile
 800c0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ba:	f383 8811 	msr	BASEPRI, r3
 800c0be:	f3bf 8f6f 	isb	sy
 800c0c2:	f3bf 8f4f 	dsb	sy
 800c0c6:	60bb      	str	r3, [r7, #8]
}
 800c0c8:	bf00      	nop
 800c0ca:	bf00      	nop
 800c0cc:	e7fd      	b.n	800c0ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	685a      	ldr	r2, [r3, #4]
 800c0d2:	4b14      	ldr	r3, [pc, #80]	@ (800c124 <vPortFree+0xbc>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4013      	ands	r3, r2
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d01e      	beq.n	800c11a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d11a      	bne.n	800c11a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	685a      	ldr	r2, [r3, #4]
 800c0e8:	4b0e      	ldr	r3, [pc, #56]	@ (800c124 <vPortFree+0xbc>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	43db      	mvns	r3, r3
 800c0ee:	401a      	ands	r2, r3
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c0f4:	f7fe fc58 	bl	800a9a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	685a      	ldr	r2, [r3, #4]
 800c0fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c128 <vPortFree+0xc0>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4413      	add	r3, r2
 800c102:	4a09      	ldr	r2, [pc, #36]	@ (800c128 <vPortFree+0xc0>)
 800c104:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c106:	6938      	ldr	r0, [r7, #16]
 800c108:	f000 f874 	bl	800c1f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c10c:	4b07      	ldr	r3, [pc, #28]	@ (800c12c <vPortFree+0xc4>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	3301      	adds	r3, #1
 800c112:	4a06      	ldr	r2, [pc, #24]	@ (800c12c <vPortFree+0xc4>)
 800c114:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c116:	f7fe fc55 	bl	800a9c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c11a:	bf00      	nop
 800c11c:	3718      	adds	r7, #24
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	2000dcc8 	.word	0x2000dcc8
 800c128:	2000dcb8 	.word	0x2000dcb8
 800c12c:	2000dcc4 	.word	0x2000dcc4

0800c130 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c136:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c13a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c13c:	4b27      	ldr	r3, [pc, #156]	@ (800c1dc <prvHeapInit+0xac>)
 800c13e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f003 0307 	and.w	r3, r3, #7
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00c      	beq.n	800c164 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	3307      	adds	r3, #7
 800c14e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f023 0307 	bic.w	r3, r3, #7
 800c156:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c158:	68ba      	ldr	r2, [r7, #8]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	1ad3      	subs	r3, r2, r3
 800c15e:	4a1f      	ldr	r2, [pc, #124]	@ (800c1dc <prvHeapInit+0xac>)
 800c160:	4413      	add	r3, r2
 800c162:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c168:	4a1d      	ldr	r2, [pc, #116]	@ (800c1e0 <prvHeapInit+0xb0>)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c16e:	4b1c      	ldr	r3, [pc, #112]	@ (800c1e0 <prvHeapInit+0xb0>)
 800c170:	2200      	movs	r2, #0
 800c172:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	68ba      	ldr	r2, [r7, #8]
 800c178:	4413      	add	r3, r2
 800c17a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c17c:	2208      	movs	r2, #8
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	1a9b      	subs	r3, r3, r2
 800c182:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f023 0307 	bic.w	r3, r3, #7
 800c18a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	4a15      	ldr	r2, [pc, #84]	@ (800c1e4 <prvHeapInit+0xb4>)
 800c190:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c192:	4b14      	ldr	r3, [pc, #80]	@ (800c1e4 <prvHeapInit+0xb4>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2200      	movs	r2, #0
 800c198:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c19a:	4b12      	ldr	r3, [pc, #72]	@ (800c1e4 <prvHeapInit+0xb4>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	1ad2      	subs	r2, r2, r3
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c1b0:	4b0c      	ldr	r3, [pc, #48]	@ (800c1e4 <prvHeapInit+0xb4>)
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	4a0a      	ldr	r2, [pc, #40]	@ (800c1e8 <prvHeapInit+0xb8>)
 800c1be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	4a09      	ldr	r2, [pc, #36]	@ (800c1ec <prvHeapInit+0xbc>)
 800c1c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c1c8:	4b09      	ldr	r3, [pc, #36]	@ (800c1f0 <prvHeapInit+0xc0>)
 800c1ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c1ce:	601a      	str	r2, [r3, #0]
}
 800c1d0:	bf00      	nop
 800c1d2:	3714      	adds	r7, #20
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	2000a0ac 	.word	0x2000a0ac
 800c1e0:	2000dcac 	.word	0x2000dcac
 800c1e4:	2000dcb4 	.word	0x2000dcb4
 800c1e8:	2000dcbc 	.word	0x2000dcbc
 800c1ec:	2000dcb8 	.word	0x2000dcb8
 800c1f0:	2000dcc8 	.word	0x2000dcc8

0800c1f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c1fc:	4b28      	ldr	r3, [pc, #160]	@ (800c2a0 <prvInsertBlockIntoFreeList+0xac>)
 800c1fe:	60fb      	str	r3, [r7, #12]
 800c200:	e002      	b.n	800c208 <prvInsertBlockIntoFreeList+0x14>
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	60fb      	str	r3, [r7, #12]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	429a      	cmp	r2, r3
 800c210:	d8f7      	bhi.n	800c202 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	68ba      	ldr	r2, [r7, #8]
 800c21c:	4413      	add	r3, r2
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	429a      	cmp	r2, r3
 800c222:	d108      	bne.n	800c236 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	685a      	ldr	r2, [r3, #4]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	441a      	add	r2, r3
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	68ba      	ldr	r2, [r7, #8]
 800c240:	441a      	add	r2, r3
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	429a      	cmp	r2, r3
 800c248:	d118      	bne.n	800c27c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681a      	ldr	r2, [r3, #0]
 800c24e:	4b15      	ldr	r3, [pc, #84]	@ (800c2a4 <prvInsertBlockIntoFreeList+0xb0>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	429a      	cmp	r2, r3
 800c254:	d00d      	beq.n	800c272 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	685a      	ldr	r2, [r3, #4]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	441a      	add	r2, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	601a      	str	r2, [r3, #0]
 800c270:	e008      	b.n	800c284 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c272:	4b0c      	ldr	r3, [pc, #48]	@ (800c2a4 <prvInsertBlockIntoFreeList+0xb0>)
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	601a      	str	r2, [r3, #0]
 800c27a:	e003      	b.n	800c284 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d002      	beq.n	800c292 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c292:	bf00      	nop
 800c294:	3714      	adds	r7, #20
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	2000dcac 	.word	0x2000dcac
 800c2a4:	2000dcb4 	.word	0x2000dcb4

0800c2a8 <std>:
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	b510      	push	{r4, lr}
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	e9c0 3300 	strd	r3, r3, [r0]
 800c2b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2b6:	6083      	str	r3, [r0, #8]
 800c2b8:	8181      	strh	r1, [r0, #12]
 800c2ba:	6643      	str	r3, [r0, #100]	@ 0x64
 800c2bc:	81c2      	strh	r2, [r0, #14]
 800c2be:	6183      	str	r3, [r0, #24]
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	2208      	movs	r2, #8
 800c2c4:	305c      	adds	r0, #92	@ 0x5c
 800c2c6:	f000 f944 	bl	800c552 <memset>
 800c2ca:	4b0d      	ldr	r3, [pc, #52]	@ (800c300 <std+0x58>)
 800c2cc:	6263      	str	r3, [r4, #36]	@ 0x24
 800c2ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c304 <std+0x5c>)
 800c2d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c2d2:	4b0d      	ldr	r3, [pc, #52]	@ (800c308 <std+0x60>)
 800c2d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c2d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c30c <std+0x64>)
 800c2d8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c2da:	4b0d      	ldr	r3, [pc, #52]	@ (800c310 <std+0x68>)
 800c2dc:	6224      	str	r4, [r4, #32]
 800c2de:	429c      	cmp	r4, r3
 800c2e0:	d006      	beq.n	800c2f0 <std+0x48>
 800c2e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c2e6:	4294      	cmp	r4, r2
 800c2e8:	d002      	beq.n	800c2f0 <std+0x48>
 800c2ea:	33d0      	adds	r3, #208	@ 0xd0
 800c2ec:	429c      	cmp	r4, r3
 800c2ee:	d105      	bne.n	800c2fc <std+0x54>
 800c2f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2f8:	f000 ba02 	b.w	800c700 <__retarget_lock_init_recursive>
 800c2fc:	bd10      	pop	{r4, pc}
 800c2fe:	bf00      	nop
 800c300:	0800c4cd 	.word	0x0800c4cd
 800c304:	0800c4ef 	.word	0x0800c4ef
 800c308:	0800c527 	.word	0x0800c527
 800c30c:	0800c54b 	.word	0x0800c54b
 800c310:	2000dccc 	.word	0x2000dccc

0800c314 <stdio_exit_handler>:
 800c314:	4a02      	ldr	r2, [pc, #8]	@ (800c320 <stdio_exit_handler+0xc>)
 800c316:	4903      	ldr	r1, [pc, #12]	@ (800c324 <stdio_exit_handler+0x10>)
 800c318:	4803      	ldr	r0, [pc, #12]	@ (800c328 <stdio_exit_handler+0x14>)
 800c31a:	f000 b869 	b.w	800c3f0 <_fwalk_sglue>
 800c31e:	bf00      	nop
 800c320:	200002ac 	.word	0x200002ac
 800c324:	0800d269 	.word	0x0800d269
 800c328:	200002bc 	.word	0x200002bc

0800c32c <cleanup_stdio>:
 800c32c:	6841      	ldr	r1, [r0, #4]
 800c32e:	4b0c      	ldr	r3, [pc, #48]	@ (800c360 <cleanup_stdio+0x34>)
 800c330:	4299      	cmp	r1, r3
 800c332:	b510      	push	{r4, lr}
 800c334:	4604      	mov	r4, r0
 800c336:	d001      	beq.n	800c33c <cleanup_stdio+0x10>
 800c338:	f000 ff96 	bl	800d268 <_fflush_r>
 800c33c:	68a1      	ldr	r1, [r4, #8]
 800c33e:	4b09      	ldr	r3, [pc, #36]	@ (800c364 <cleanup_stdio+0x38>)
 800c340:	4299      	cmp	r1, r3
 800c342:	d002      	beq.n	800c34a <cleanup_stdio+0x1e>
 800c344:	4620      	mov	r0, r4
 800c346:	f000 ff8f 	bl	800d268 <_fflush_r>
 800c34a:	68e1      	ldr	r1, [r4, #12]
 800c34c:	4b06      	ldr	r3, [pc, #24]	@ (800c368 <cleanup_stdio+0x3c>)
 800c34e:	4299      	cmp	r1, r3
 800c350:	d004      	beq.n	800c35c <cleanup_stdio+0x30>
 800c352:	4620      	mov	r0, r4
 800c354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c358:	f000 bf86 	b.w	800d268 <_fflush_r>
 800c35c:	bd10      	pop	{r4, pc}
 800c35e:	bf00      	nop
 800c360:	2000dccc 	.word	0x2000dccc
 800c364:	2000dd34 	.word	0x2000dd34
 800c368:	2000dd9c 	.word	0x2000dd9c

0800c36c <global_stdio_init.part.0>:
 800c36c:	b510      	push	{r4, lr}
 800c36e:	4b0b      	ldr	r3, [pc, #44]	@ (800c39c <global_stdio_init.part.0+0x30>)
 800c370:	4c0b      	ldr	r4, [pc, #44]	@ (800c3a0 <global_stdio_init.part.0+0x34>)
 800c372:	4a0c      	ldr	r2, [pc, #48]	@ (800c3a4 <global_stdio_init.part.0+0x38>)
 800c374:	601a      	str	r2, [r3, #0]
 800c376:	4620      	mov	r0, r4
 800c378:	2200      	movs	r2, #0
 800c37a:	2104      	movs	r1, #4
 800c37c:	f7ff ff94 	bl	800c2a8 <std>
 800c380:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c384:	2201      	movs	r2, #1
 800c386:	2109      	movs	r1, #9
 800c388:	f7ff ff8e 	bl	800c2a8 <std>
 800c38c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c390:	2202      	movs	r2, #2
 800c392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c396:	2112      	movs	r1, #18
 800c398:	f7ff bf86 	b.w	800c2a8 <std>
 800c39c:	2000de04 	.word	0x2000de04
 800c3a0:	2000dccc 	.word	0x2000dccc
 800c3a4:	0800c315 	.word	0x0800c315

0800c3a8 <__sfp_lock_acquire>:
 800c3a8:	4801      	ldr	r0, [pc, #4]	@ (800c3b0 <__sfp_lock_acquire+0x8>)
 800c3aa:	f000 b9aa 	b.w	800c702 <__retarget_lock_acquire_recursive>
 800c3ae:	bf00      	nop
 800c3b0:	2000de0d 	.word	0x2000de0d

0800c3b4 <__sfp_lock_release>:
 800c3b4:	4801      	ldr	r0, [pc, #4]	@ (800c3bc <__sfp_lock_release+0x8>)
 800c3b6:	f000 b9a5 	b.w	800c704 <__retarget_lock_release_recursive>
 800c3ba:	bf00      	nop
 800c3bc:	2000de0d 	.word	0x2000de0d

0800c3c0 <__sinit>:
 800c3c0:	b510      	push	{r4, lr}
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	f7ff fff0 	bl	800c3a8 <__sfp_lock_acquire>
 800c3c8:	6a23      	ldr	r3, [r4, #32]
 800c3ca:	b11b      	cbz	r3, 800c3d4 <__sinit+0x14>
 800c3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3d0:	f7ff bff0 	b.w	800c3b4 <__sfp_lock_release>
 800c3d4:	4b04      	ldr	r3, [pc, #16]	@ (800c3e8 <__sinit+0x28>)
 800c3d6:	6223      	str	r3, [r4, #32]
 800c3d8:	4b04      	ldr	r3, [pc, #16]	@ (800c3ec <__sinit+0x2c>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1f5      	bne.n	800c3cc <__sinit+0xc>
 800c3e0:	f7ff ffc4 	bl	800c36c <global_stdio_init.part.0>
 800c3e4:	e7f2      	b.n	800c3cc <__sinit+0xc>
 800c3e6:	bf00      	nop
 800c3e8:	0800c32d 	.word	0x0800c32d
 800c3ec:	2000de04 	.word	0x2000de04

0800c3f0 <_fwalk_sglue>:
 800c3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3f4:	4607      	mov	r7, r0
 800c3f6:	4688      	mov	r8, r1
 800c3f8:	4614      	mov	r4, r2
 800c3fa:	2600      	movs	r6, #0
 800c3fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c400:	f1b9 0901 	subs.w	r9, r9, #1
 800c404:	d505      	bpl.n	800c412 <_fwalk_sglue+0x22>
 800c406:	6824      	ldr	r4, [r4, #0]
 800c408:	2c00      	cmp	r4, #0
 800c40a:	d1f7      	bne.n	800c3fc <_fwalk_sglue+0xc>
 800c40c:	4630      	mov	r0, r6
 800c40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c412:	89ab      	ldrh	r3, [r5, #12]
 800c414:	2b01      	cmp	r3, #1
 800c416:	d907      	bls.n	800c428 <_fwalk_sglue+0x38>
 800c418:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c41c:	3301      	adds	r3, #1
 800c41e:	d003      	beq.n	800c428 <_fwalk_sglue+0x38>
 800c420:	4629      	mov	r1, r5
 800c422:	4638      	mov	r0, r7
 800c424:	47c0      	blx	r8
 800c426:	4306      	orrs	r6, r0
 800c428:	3568      	adds	r5, #104	@ 0x68
 800c42a:	e7e9      	b.n	800c400 <_fwalk_sglue+0x10>

0800c42c <iprintf>:
 800c42c:	b40f      	push	{r0, r1, r2, r3}
 800c42e:	b507      	push	{r0, r1, r2, lr}
 800c430:	4906      	ldr	r1, [pc, #24]	@ (800c44c <iprintf+0x20>)
 800c432:	ab04      	add	r3, sp, #16
 800c434:	6808      	ldr	r0, [r1, #0]
 800c436:	f853 2b04 	ldr.w	r2, [r3], #4
 800c43a:	6881      	ldr	r1, [r0, #8]
 800c43c:	9301      	str	r3, [sp, #4]
 800c43e:	f000 fbeb 	bl	800cc18 <_vfiprintf_r>
 800c442:	b003      	add	sp, #12
 800c444:	f85d eb04 	ldr.w	lr, [sp], #4
 800c448:	b004      	add	sp, #16
 800c44a:	4770      	bx	lr
 800c44c:	200002b8 	.word	0x200002b8

0800c450 <putchar>:
 800c450:	4b02      	ldr	r3, [pc, #8]	@ (800c45c <putchar+0xc>)
 800c452:	4601      	mov	r1, r0
 800c454:	6818      	ldr	r0, [r3, #0]
 800c456:	6882      	ldr	r2, [r0, #8]
 800c458:	f000 bf2e 	b.w	800d2b8 <_putc_r>
 800c45c:	200002b8 	.word	0x200002b8

0800c460 <sniprintf>:
 800c460:	b40c      	push	{r2, r3}
 800c462:	b530      	push	{r4, r5, lr}
 800c464:	4b18      	ldr	r3, [pc, #96]	@ (800c4c8 <sniprintf+0x68>)
 800c466:	1e0c      	subs	r4, r1, #0
 800c468:	681d      	ldr	r5, [r3, #0]
 800c46a:	b09d      	sub	sp, #116	@ 0x74
 800c46c:	da08      	bge.n	800c480 <sniprintf+0x20>
 800c46e:	238b      	movs	r3, #139	@ 0x8b
 800c470:	602b      	str	r3, [r5, #0]
 800c472:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c476:	b01d      	add	sp, #116	@ 0x74
 800c478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c47c:	b002      	add	sp, #8
 800c47e:	4770      	bx	lr
 800c480:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c484:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c488:	f04f 0300 	mov.w	r3, #0
 800c48c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c48e:	bf14      	ite	ne
 800c490:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800c494:	4623      	moveq	r3, r4
 800c496:	9304      	str	r3, [sp, #16]
 800c498:	9307      	str	r3, [sp, #28]
 800c49a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c49e:	9002      	str	r0, [sp, #8]
 800c4a0:	9006      	str	r0, [sp, #24]
 800c4a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c4a6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c4a8:	ab21      	add	r3, sp, #132	@ 0x84
 800c4aa:	a902      	add	r1, sp, #8
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	9301      	str	r3, [sp, #4]
 800c4b0:	f000 fa8c 	bl	800c9cc <_svfiprintf_r>
 800c4b4:	1c43      	adds	r3, r0, #1
 800c4b6:	bfbc      	itt	lt
 800c4b8:	238b      	movlt	r3, #139	@ 0x8b
 800c4ba:	602b      	strlt	r3, [r5, #0]
 800c4bc:	2c00      	cmp	r4, #0
 800c4be:	d0da      	beq.n	800c476 <sniprintf+0x16>
 800c4c0:	9b02      	ldr	r3, [sp, #8]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	701a      	strb	r2, [r3, #0]
 800c4c6:	e7d6      	b.n	800c476 <sniprintf+0x16>
 800c4c8:	200002b8 	.word	0x200002b8

0800c4cc <__sread>:
 800c4cc:	b510      	push	{r4, lr}
 800c4ce:	460c      	mov	r4, r1
 800c4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4d4:	f000 f8c6 	bl	800c664 <_read_r>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	bfab      	itete	ge
 800c4dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c4de:	89a3      	ldrhlt	r3, [r4, #12]
 800c4e0:	181b      	addge	r3, r3, r0
 800c4e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c4e6:	bfac      	ite	ge
 800c4e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c4ea:	81a3      	strhlt	r3, [r4, #12]
 800c4ec:	bd10      	pop	{r4, pc}

0800c4ee <__swrite>:
 800c4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4f2:	461f      	mov	r7, r3
 800c4f4:	898b      	ldrh	r3, [r1, #12]
 800c4f6:	05db      	lsls	r3, r3, #23
 800c4f8:	4605      	mov	r5, r0
 800c4fa:	460c      	mov	r4, r1
 800c4fc:	4616      	mov	r6, r2
 800c4fe:	d505      	bpl.n	800c50c <__swrite+0x1e>
 800c500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c504:	2302      	movs	r3, #2
 800c506:	2200      	movs	r2, #0
 800c508:	f000 f89a 	bl	800c640 <_lseek_r>
 800c50c:	89a3      	ldrh	r3, [r4, #12]
 800c50e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c512:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c516:	81a3      	strh	r3, [r4, #12]
 800c518:	4632      	mov	r2, r6
 800c51a:	463b      	mov	r3, r7
 800c51c:	4628      	mov	r0, r5
 800c51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c522:	f000 b8b1 	b.w	800c688 <_write_r>

0800c526 <__sseek>:
 800c526:	b510      	push	{r4, lr}
 800c528:	460c      	mov	r4, r1
 800c52a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c52e:	f000 f887 	bl	800c640 <_lseek_r>
 800c532:	1c43      	adds	r3, r0, #1
 800c534:	89a3      	ldrh	r3, [r4, #12]
 800c536:	bf15      	itete	ne
 800c538:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c53a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c53e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c542:	81a3      	strheq	r3, [r4, #12]
 800c544:	bf18      	it	ne
 800c546:	81a3      	strhne	r3, [r4, #12]
 800c548:	bd10      	pop	{r4, pc}

0800c54a <__sclose>:
 800c54a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c54e:	f000 b809 	b.w	800c564 <_close_r>

0800c552 <memset>:
 800c552:	4402      	add	r2, r0
 800c554:	4603      	mov	r3, r0
 800c556:	4293      	cmp	r3, r2
 800c558:	d100      	bne.n	800c55c <memset+0xa>
 800c55a:	4770      	bx	lr
 800c55c:	f803 1b01 	strb.w	r1, [r3], #1
 800c560:	e7f9      	b.n	800c556 <memset+0x4>
	...

0800c564 <_close_r>:
 800c564:	b538      	push	{r3, r4, r5, lr}
 800c566:	4d06      	ldr	r5, [pc, #24]	@ (800c580 <_close_r+0x1c>)
 800c568:	2300      	movs	r3, #0
 800c56a:	4604      	mov	r4, r0
 800c56c:	4608      	mov	r0, r1
 800c56e:	602b      	str	r3, [r5, #0]
 800c570:	f7f4 fa3f 	bl	80009f2 <_close>
 800c574:	1c43      	adds	r3, r0, #1
 800c576:	d102      	bne.n	800c57e <_close_r+0x1a>
 800c578:	682b      	ldr	r3, [r5, #0]
 800c57a:	b103      	cbz	r3, 800c57e <_close_r+0x1a>
 800c57c:	6023      	str	r3, [r4, #0]
 800c57e:	bd38      	pop	{r3, r4, r5, pc}
 800c580:	2000de08 	.word	0x2000de08

0800c584 <_reclaim_reent>:
 800c584:	4b2d      	ldr	r3, [pc, #180]	@ (800c63c <_reclaim_reent+0xb8>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4283      	cmp	r3, r0
 800c58a:	b570      	push	{r4, r5, r6, lr}
 800c58c:	4604      	mov	r4, r0
 800c58e:	d053      	beq.n	800c638 <_reclaim_reent+0xb4>
 800c590:	69c3      	ldr	r3, [r0, #28]
 800c592:	b31b      	cbz	r3, 800c5dc <_reclaim_reent+0x58>
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	b163      	cbz	r3, 800c5b2 <_reclaim_reent+0x2e>
 800c598:	2500      	movs	r5, #0
 800c59a:	69e3      	ldr	r3, [r4, #28]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	5959      	ldr	r1, [r3, r5]
 800c5a0:	b9b1      	cbnz	r1, 800c5d0 <_reclaim_reent+0x4c>
 800c5a2:	3504      	adds	r5, #4
 800c5a4:	2d80      	cmp	r5, #128	@ 0x80
 800c5a6:	d1f8      	bne.n	800c59a <_reclaim_reent+0x16>
 800c5a8:	69e3      	ldr	r3, [r4, #28]
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	68d9      	ldr	r1, [r3, #12]
 800c5ae:	f000 f8b9 	bl	800c724 <_free_r>
 800c5b2:	69e3      	ldr	r3, [r4, #28]
 800c5b4:	6819      	ldr	r1, [r3, #0]
 800c5b6:	b111      	cbz	r1, 800c5be <_reclaim_reent+0x3a>
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	f000 f8b3 	bl	800c724 <_free_r>
 800c5be:	69e3      	ldr	r3, [r4, #28]
 800c5c0:	689d      	ldr	r5, [r3, #8]
 800c5c2:	b15d      	cbz	r5, 800c5dc <_reclaim_reent+0x58>
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	682d      	ldr	r5, [r5, #0]
 800c5ca:	f000 f8ab 	bl	800c724 <_free_r>
 800c5ce:	e7f8      	b.n	800c5c2 <_reclaim_reent+0x3e>
 800c5d0:	680e      	ldr	r6, [r1, #0]
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f000 f8a6 	bl	800c724 <_free_r>
 800c5d8:	4631      	mov	r1, r6
 800c5da:	e7e1      	b.n	800c5a0 <_reclaim_reent+0x1c>
 800c5dc:	6961      	ldr	r1, [r4, #20]
 800c5de:	b111      	cbz	r1, 800c5e6 <_reclaim_reent+0x62>
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f000 f89f 	bl	800c724 <_free_r>
 800c5e6:	69e1      	ldr	r1, [r4, #28]
 800c5e8:	b111      	cbz	r1, 800c5f0 <_reclaim_reent+0x6c>
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f000 f89a 	bl	800c724 <_free_r>
 800c5f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c5f2:	b111      	cbz	r1, 800c5fa <_reclaim_reent+0x76>
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	f000 f895 	bl	800c724 <_free_r>
 800c5fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5fc:	b111      	cbz	r1, 800c604 <_reclaim_reent+0x80>
 800c5fe:	4620      	mov	r0, r4
 800c600:	f000 f890 	bl	800c724 <_free_r>
 800c604:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c606:	b111      	cbz	r1, 800c60e <_reclaim_reent+0x8a>
 800c608:	4620      	mov	r0, r4
 800c60a:	f000 f88b 	bl	800c724 <_free_r>
 800c60e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c610:	b111      	cbz	r1, 800c618 <_reclaim_reent+0x94>
 800c612:	4620      	mov	r0, r4
 800c614:	f000 f886 	bl	800c724 <_free_r>
 800c618:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c61a:	b111      	cbz	r1, 800c622 <_reclaim_reent+0x9e>
 800c61c:	4620      	mov	r0, r4
 800c61e:	f000 f881 	bl	800c724 <_free_r>
 800c622:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c624:	b111      	cbz	r1, 800c62c <_reclaim_reent+0xa8>
 800c626:	4620      	mov	r0, r4
 800c628:	f000 f87c 	bl	800c724 <_free_r>
 800c62c:	6a23      	ldr	r3, [r4, #32]
 800c62e:	b11b      	cbz	r3, 800c638 <_reclaim_reent+0xb4>
 800c630:	4620      	mov	r0, r4
 800c632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c636:	4718      	bx	r3
 800c638:	bd70      	pop	{r4, r5, r6, pc}
 800c63a:	bf00      	nop
 800c63c:	200002b8 	.word	0x200002b8

0800c640 <_lseek_r>:
 800c640:	b538      	push	{r3, r4, r5, lr}
 800c642:	4d07      	ldr	r5, [pc, #28]	@ (800c660 <_lseek_r+0x20>)
 800c644:	4604      	mov	r4, r0
 800c646:	4608      	mov	r0, r1
 800c648:	4611      	mov	r1, r2
 800c64a:	2200      	movs	r2, #0
 800c64c:	602a      	str	r2, [r5, #0]
 800c64e:	461a      	mov	r2, r3
 800c650:	f7f4 f9f6 	bl	8000a40 <_lseek>
 800c654:	1c43      	adds	r3, r0, #1
 800c656:	d102      	bne.n	800c65e <_lseek_r+0x1e>
 800c658:	682b      	ldr	r3, [r5, #0]
 800c65a:	b103      	cbz	r3, 800c65e <_lseek_r+0x1e>
 800c65c:	6023      	str	r3, [r4, #0]
 800c65e:	bd38      	pop	{r3, r4, r5, pc}
 800c660:	2000de08 	.word	0x2000de08

0800c664 <_read_r>:
 800c664:	b538      	push	{r3, r4, r5, lr}
 800c666:	4d07      	ldr	r5, [pc, #28]	@ (800c684 <_read_r+0x20>)
 800c668:	4604      	mov	r4, r0
 800c66a:	4608      	mov	r0, r1
 800c66c:	4611      	mov	r1, r2
 800c66e:	2200      	movs	r2, #0
 800c670:	602a      	str	r2, [r5, #0]
 800c672:	461a      	mov	r2, r3
 800c674:	f7f4 f9a0 	bl	80009b8 <_read>
 800c678:	1c43      	adds	r3, r0, #1
 800c67a:	d102      	bne.n	800c682 <_read_r+0x1e>
 800c67c:	682b      	ldr	r3, [r5, #0]
 800c67e:	b103      	cbz	r3, 800c682 <_read_r+0x1e>
 800c680:	6023      	str	r3, [r4, #0]
 800c682:	bd38      	pop	{r3, r4, r5, pc}
 800c684:	2000de08 	.word	0x2000de08

0800c688 <_write_r>:
 800c688:	b538      	push	{r3, r4, r5, lr}
 800c68a:	4d07      	ldr	r5, [pc, #28]	@ (800c6a8 <_write_r+0x20>)
 800c68c:	4604      	mov	r4, r0
 800c68e:	4608      	mov	r0, r1
 800c690:	4611      	mov	r1, r2
 800c692:	2200      	movs	r2, #0
 800c694:	602a      	str	r2, [r5, #0]
 800c696:	461a      	mov	r2, r3
 800c698:	f7f4 f81e 	bl	80006d8 <_write>
 800c69c:	1c43      	adds	r3, r0, #1
 800c69e:	d102      	bne.n	800c6a6 <_write_r+0x1e>
 800c6a0:	682b      	ldr	r3, [r5, #0]
 800c6a2:	b103      	cbz	r3, 800c6a6 <_write_r+0x1e>
 800c6a4:	6023      	str	r3, [r4, #0]
 800c6a6:	bd38      	pop	{r3, r4, r5, pc}
 800c6a8:	2000de08 	.word	0x2000de08

0800c6ac <__errno>:
 800c6ac:	4b01      	ldr	r3, [pc, #4]	@ (800c6b4 <__errno+0x8>)
 800c6ae:	6818      	ldr	r0, [r3, #0]
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	200002b8 	.word	0x200002b8

0800c6b8 <__libc_init_array>:
 800c6b8:	b570      	push	{r4, r5, r6, lr}
 800c6ba:	4d0d      	ldr	r5, [pc, #52]	@ (800c6f0 <__libc_init_array+0x38>)
 800c6bc:	4c0d      	ldr	r4, [pc, #52]	@ (800c6f4 <__libc_init_array+0x3c>)
 800c6be:	1b64      	subs	r4, r4, r5
 800c6c0:	10a4      	asrs	r4, r4, #2
 800c6c2:	2600      	movs	r6, #0
 800c6c4:	42a6      	cmp	r6, r4
 800c6c6:	d109      	bne.n	800c6dc <__libc_init_array+0x24>
 800c6c8:	4d0b      	ldr	r5, [pc, #44]	@ (800c6f8 <__libc_init_array+0x40>)
 800c6ca:	4c0c      	ldr	r4, [pc, #48]	@ (800c6fc <__libc_init_array+0x44>)
 800c6cc:	f000 ffa0 	bl	800d610 <_init>
 800c6d0:	1b64      	subs	r4, r4, r5
 800c6d2:	10a4      	asrs	r4, r4, #2
 800c6d4:	2600      	movs	r6, #0
 800c6d6:	42a6      	cmp	r6, r4
 800c6d8:	d105      	bne.n	800c6e6 <__libc_init_array+0x2e>
 800c6da:	bd70      	pop	{r4, r5, r6, pc}
 800c6dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6e0:	4798      	blx	r3
 800c6e2:	3601      	adds	r6, #1
 800c6e4:	e7ee      	b.n	800c6c4 <__libc_init_array+0xc>
 800c6e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6ea:	4798      	blx	r3
 800c6ec:	3601      	adds	r6, #1
 800c6ee:	e7f2      	b.n	800c6d6 <__libc_init_array+0x1e>
 800c6f0:	0800d798 	.word	0x0800d798
 800c6f4:	0800d798 	.word	0x0800d798
 800c6f8:	0800d798 	.word	0x0800d798
 800c6fc:	0800d79c 	.word	0x0800d79c

0800c700 <__retarget_lock_init_recursive>:
 800c700:	4770      	bx	lr

0800c702 <__retarget_lock_acquire_recursive>:
 800c702:	4770      	bx	lr

0800c704 <__retarget_lock_release_recursive>:
 800c704:	4770      	bx	lr

0800c706 <memcpy>:
 800c706:	440a      	add	r2, r1
 800c708:	4291      	cmp	r1, r2
 800c70a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c70e:	d100      	bne.n	800c712 <memcpy+0xc>
 800c710:	4770      	bx	lr
 800c712:	b510      	push	{r4, lr}
 800c714:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c71c:	4291      	cmp	r1, r2
 800c71e:	d1f9      	bne.n	800c714 <memcpy+0xe>
 800c720:	bd10      	pop	{r4, pc}
	...

0800c724 <_free_r>:
 800c724:	b538      	push	{r3, r4, r5, lr}
 800c726:	4605      	mov	r5, r0
 800c728:	2900      	cmp	r1, #0
 800c72a:	d041      	beq.n	800c7b0 <_free_r+0x8c>
 800c72c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c730:	1f0c      	subs	r4, r1, #4
 800c732:	2b00      	cmp	r3, #0
 800c734:	bfb8      	it	lt
 800c736:	18e4      	addlt	r4, r4, r3
 800c738:	f000 f8e0 	bl	800c8fc <__malloc_lock>
 800c73c:	4a1d      	ldr	r2, [pc, #116]	@ (800c7b4 <_free_r+0x90>)
 800c73e:	6813      	ldr	r3, [r2, #0]
 800c740:	b933      	cbnz	r3, 800c750 <_free_r+0x2c>
 800c742:	6063      	str	r3, [r4, #4]
 800c744:	6014      	str	r4, [r2, #0]
 800c746:	4628      	mov	r0, r5
 800c748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c74c:	f000 b8dc 	b.w	800c908 <__malloc_unlock>
 800c750:	42a3      	cmp	r3, r4
 800c752:	d908      	bls.n	800c766 <_free_r+0x42>
 800c754:	6820      	ldr	r0, [r4, #0]
 800c756:	1821      	adds	r1, r4, r0
 800c758:	428b      	cmp	r3, r1
 800c75a:	bf01      	itttt	eq
 800c75c:	6819      	ldreq	r1, [r3, #0]
 800c75e:	685b      	ldreq	r3, [r3, #4]
 800c760:	1809      	addeq	r1, r1, r0
 800c762:	6021      	streq	r1, [r4, #0]
 800c764:	e7ed      	b.n	800c742 <_free_r+0x1e>
 800c766:	461a      	mov	r2, r3
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	b10b      	cbz	r3, 800c770 <_free_r+0x4c>
 800c76c:	42a3      	cmp	r3, r4
 800c76e:	d9fa      	bls.n	800c766 <_free_r+0x42>
 800c770:	6811      	ldr	r1, [r2, #0]
 800c772:	1850      	adds	r0, r2, r1
 800c774:	42a0      	cmp	r0, r4
 800c776:	d10b      	bne.n	800c790 <_free_r+0x6c>
 800c778:	6820      	ldr	r0, [r4, #0]
 800c77a:	4401      	add	r1, r0
 800c77c:	1850      	adds	r0, r2, r1
 800c77e:	4283      	cmp	r3, r0
 800c780:	6011      	str	r1, [r2, #0]
 800c782:	d1e0      	bne.n	800c746 <_free_r+0x22>
 800c784:	6818      	ldr	r0, [r3, #0]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	6053      	str	r3, [r2, #4]
 800c78a:	4408      	add	r0, r1
 800c78c:	6010      	str	r0, [r2, #0]
 800c78e:	e7da      	b.n	800c746 <_free_r+0x22>
 800c790:	d902      	bls.n	800c798 <_free_r+0x74>
 800c792:	230c      	movs	r3, #12
 800c794:	602b      	str	r3, [r5, #0]
 800c796:	e7d6      	b.n	800c746 <_free_r+0x22>
 800c798:	6820      	ldr	r0, [r4, #0]
 800c79a:	1821      	adds	r1, r4, r0
 800c79c:	428b      	cmp	r3, r1
 800c79e:	bf04      	itt	eq
 800c7a0:	6819      	ldreq	r1, [r3, #0]
 800c7a2:	685b      	ldreq	r3, [r3, #4]
 800c7a4:	6063      	str	r3, [r4, #4]
 800c7a6:	bf04      	itt	eq
 800c7a8:	1809      	addeq	r1, r1, r0
 800c7aa:	6021      	streq	r1, [r4, #0]
 800c7ac:	6054      	str	r4, [r2, #4]
 800c7ae:	e7ca      	b.n	800c746 <_free_r+0x22>
 800c7b0:	bd38      	pop	{r3, r4, r5, pc}
 800c7b2:	bf00      	nop
 800c7b4:	2000de14 	.word	0x2000de14

0800c7b8 <sbrk_aligned>:
 800c7b8:	b570      	push	{r4, r5, r6, lr}
 800c7ba:	4e0f      	ldr	r6, [pc, #60]	@ (800c7f8 <sbrk_aligned+0x40>)
 800c7bc:	460c      	mov	r4, r1
 800c7be:	6831      	ldr	r1, [r6, #0]
 800c7c0:	4605      	mov	r5, r0
 800c7c2:	b911      	cbnz	r1, 800c7ca <sbrk_aligned+0x12>
 800c7c4:	f000 fe5a 	bl	800d47c <_sbrk_r>
 800c7c8:	6030      	str	r0, [r6, #0]
 800c7ca:	4621      	mov	r1, r4
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	f000 fe55 	bl	800d47c <_sbrk_r>
 800c7d2:	1c43      	adds	r3, r0, #1
 800c7d4:	d103      	bne.n	800c7de <sbrk_aligned+0x26>
 800c7d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c7da:	4620      	mov	r0, r4
 800c7dc:	bd70      	pop	{r4, r5, r6, pc}
 800c7de:	1cc4      	adds	r4, r0, #3
 800c7e0:	f024 0403 	bic.w	r4, r4, #3
 800c7e4:	42a0      	cmp	r0, r4
 800c7e6:	d0f8      	beq.n	800c7da <sbrk_aligned+0x22>
 800c7e8:	1a21      	subs	r1, r4, r0
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	f000 fe46 	bl	800d47c <_sbrk_r>
 800c7f0:	3001      	adds	r0, #1
 800c7f2:	d1f2      	bne.n	800c7da <sbrk_aligned+0x22>
 800c7f4:	e7ef      	b.n	800c7d6 <sbrk_aligned+0x1e>
 800c7f6:	bf00      	nop
 800c7f8:	2000de10 	.word	0x2000de10

0800c7fc <_malloc_r>:
 800c7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c800:	1ccd      	adds	r5, r1, #3
 800c802:	f025 0503 	bic.w	r5, r5, #3
 800c806:	3508      	adds	r5, #8
 800c808:	2d0c      	cmp	r5, #12
 800c80a:	bf38      	it	cc
 800c80c:	250c      	movcc	r5, #12
 800c80e:	2d00      	cmp	r5, #0
 800c810:	4606      	mov	r6, r0
 800c812:	db01      	blt.n	800c818 <_malloc_r+0x1c>
 800c814:	42a9      	cmp	r1, r5
 800c816:	d904      	bls.n	800c822 <_malloc_r+0x26>
 800c818:	230c      	movs	r3, #12
 800c81a:	6033      	str	r3, [r6, #0]
 800c81c:	2000      	movs	r0, #0
 800c81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c822:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c8f8 <_malloc_r+0xfc>
 800c826:	f000 f869 	bl	800c8fc <__malloc_lock>
 800c82a:	f8d8 3000 	ldr.w	r3, [r8]
 800c82e:	461c      	mov	r4, r3
 800c830:	bb44      	cbnz	r4, 800c884 <_malloc_r+0x88>
 800c832:	4629      	mov	r1, r5
 800c834:	4630      	mov	r0, r6
 800c836:	f7ff ffbf 	bl	800c7b8 <sbrk_aligned>
 800c83a:	1c43      	adds	r3, r0, #1
 800c83c:	4604      	mov	r4, r0
 800c83e:	d158      	bne.n	800c8f2 <_malloc_r+0xf6>
 800c840:	f8d8 4000 	ldr.w	r4, [r8]
 800c844:	4627      	mov	r7, r4
 800c846:	2f00      	cmp	r7, #0
 800c848:	d143      	bne.n	800c8d2 <_malloc_r+0xd6>
 800c84a:	2c00      	cmp	r4, #0
 800c84c:	d04b      	beq.n	800c8e6 <_malloc_r+0xea>
 800c84e:	6823      	ldr	r3, [r4, #0]
 800c850:	4639      	mov	r1, r7
 800c852:	4630      	mov	r0, r6
 800c854:	eb04 0903 	add.w	r9, r4, r3
 800c858:	f000 fe10 	bl	800d47c <_sbrk_r>
 800c85c:	4581      	cmp	r9, r0
 800c85e:	d142      	bne.n	800c8e6 <_malloc_r+0xea>
 800c860:	6821      	ldr	r1, [r4, #0]
 800c862:	1a6d      	subs	r5, r5, r1
 800c864:	4629      	mov	r1, r5
 800c866:	4630      	mov	r0, r6
 800c868:	f7ff ffa6 	bl	800c7b8 <sbrk_aligned>
 800c86c:	3001      	adds	r0, #1
 800c86e:	d03a      	beq.n	800c8e6 <_malloc_r+0xea>
 800c870:	6823      	ldr	r3, [r4, #0]
 800c872:	442b      	add	r3, r5
 800c874:	6023      	str	r3, [r4, #0]
 800c876:	f8d8 3000 	ldr.w	r3, [r8]
 800c87a:	685a      	ldr	r2, [r3, #4]
 800c87c:	bb62      	cbnz	r2, 800c8d8 <_malloc_r+0xdc>
 800c87e:	f8c8 7000 	str.w	r7, [r8]
 800c882:	e00f      	b.n	800c8a4 <_malloc_r+0xa8>
 800c884:	6822      	ldr	r2, [r4, #0]
 800c886:	1b52      	subs	r2, r2, r5
 800c888:	d420      	bmi.n	800c8cc <_malloc_r+0xd0>
 800c88a:	2a0b      	cmp	r2, #11
 800c88c:	d917      	bls.n	800c8be <_malloc_r+0xc2>
 800c88e:	1961      	adds	r1, r4, r5
 800c890:	42a3      	cmp	r3, r4
 800c892:	6025      	str	r5, [r4, #0]
 800c894:	bf18      	it	ne
 800c896:	6059      	strne	r1, [r3, #4]
 800c898:	6863      	ldr	r3, [r4, #4]
 800c89a:	bf08      	it	eq
 800c89c:	f8c8 1000 	streq.w	r1, [r8]
 800c8a0:	5162      	str	r2, [r4, r5]
 800c8a2:	604b      	str	r3, [r1, #4]
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	f000 f82f 	bl	800c908 <__malloc_unlock>
 800c8aa:	f104 000b 	add.w	r0, r4, #11
 800c8ae:	1d23      	adds	r3, r4, #4
 800c8b0:	f020 0007 	bic.w	r0, r0, #7
 800c8b4:	1ac2      	subs	r2, r0, r3
 800c8b6:	bf1c      	itt	ne
 800c8b8:	1a1b      	subne	r3, r3, r0
 800c8ba:	50a3      	strne	r3, [r4, r2]
 800c8bc:	e7af      	b.n	800c81e <_malloc_r+0x22>
 800c8be:	6862      	ldr	r2, [r4, #4]
 800c8c0:	42a3      	cmp	r3, r4
 800c8c2:	bf0c      	ite	eq
 800c8c4:	f8c8 2000 	streq.w	r2, [r8]
 800c8c8:	605a      	strne	r2, [r3, #4]
 800c8ca:	e7eb      	b.n	800c8a4 <_malloc_r+0xa8>
 800c8cc:	4623      	mov	r3, r4
 800c8ce:	6864      	ldr	r4, [r4, #4]
 800c8d0:	e7ae      	b.n	800c830 <_malloc_r+0x34>
 800c8d2:	463c      	mov	r4, r7
 800c8d4:	687f      	ldr	r7, [r7, #4]
 800c8d6:	e7b6      	b.n	800c846 <_malloc_r+0x4a>
 800c8d8:	461a      	mov	r2, r3
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	42a3      	cmp	r3, r4
 800c8de:	d1fb      	bne.n	800c8d8 <_malloc_r+0xdc>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	6053      	str	r3, [r2, #4]
 800c8e4:	e7de      	b.n	800c8a4 <_malloc_r+0xa8>
 800c8e6:	230c      	movs	r3, #12
 800c8e8:	6033      	str	r3, [r6, #0]
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f000 f80c 	bl	800c908 <__malloc_unlock>
 800c8f0:	e794      	b.n	800c81c <_malloc_r+0x20>
 800c8f2:	6005      	str	r5, [r0, #0]
 800c8f4:	e7d6      	b.n	800c8a4 <_malloc_r+0xa8>
 800c8f6:	bf00      	nop
 800c8f8:	2000de14 	.word	0x2000de14

0800c8fc <__malloc_lock>:
 800c8fc:	4801      	ldr	r0, [pc, #4]	@ (800c904 <__malloc_lock+0x8>)
 800c8fe:	f7ff bf00 	b.w	800c702 <__retarget_lock_acquire_recursive>
 800c902:	bf00      	nop
 800c904:	2000de0c 	.word	0x2000de0c

0800c908 <__malloc_unlock>:
 800c908:	4801      	ldr	r0, [pc, #4]	@ (800c910 <__malloc_unlock+0x8>)
 800c90a:	f7ff befb 	b.w	800c704 <__retarget_lock_release_recursive>
 800c90e:	bf00      	nop
 800c910:	2000de0c 	.word	0x2000de0c

0800c914 <__ssputs_r>:
 800c914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c918:	688e      	ldr	r6, [r1, #8]
 800c91a:	461f      	mov	r7, r3
 800c91c:	42be      	cmp	r6, r7
 800c91e:	680b      	ldr	r3, [r1, #0]
 800c920:	4682      	mov	sl, r0
 800c922:	460c      	mov	r4, r1
 800c924:	4690      	mov	r8, r2
 800c926:	d82d      	bhi.n	800c984 <__ssputs_r+0x70>
 800c928:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c92c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c930:	d026      	beq.n	800c980 <__ssputs_r+0x6c>
 800c932:	6965      	ldr	r5, [r4, #20]
 800c934:	6909      	ldr	r1, [r1, #16]
 800c936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c93a:	eba3 0901 	sub.w	r9, r3, r1
 800c93e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c942:	1c7b      	adds	r3, r7, #1
 800c944:	444b      	add	r3, r9
 800c946:	106d      	asrs	r5, r5, #1
 800c948:	429d      	cmp	r5, r3
 800c94a:	bf38      	it	cc
 800c94c:	461d      	movcc	r5, r3
 800c94e:	0553      	lsls	r3, r2, #21
 800c950:	d527      	bpl.n	800c9a2 <__ssputs_r+0x8e>
 800c952:	4629      	mov	r1, r5
 800c954:	f7ff ff52 	bl	800c7fc <_malloc_r>
 800c958:	4606      	mov	r6, r0
 800c95a:	b360      	cbz	r0, 800c9b6 <__ssputs_r+0xa2>
 800c95c:	6921      	ldr	r1, [r4, #16]
 800c95e:	464a      	mov	r2, r9
 800c960:	f7ff fed1 	bl	800c706 <memcpy>
 800c964:	89a3      	ldrh	r3, [r4, #12]
 800c966:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c96a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c96e:	81a3      	strh	r3, [r4, #12]
 800c970:	6126      	str	r6, [r4, #16]
 800c972:	6165      	str	r5, [r4, #20]
 800c974:	444e      	add	r6, r9
 800c976:	eba5 0509 	sub.w	r5, r5, r9
 800c97a:	6026      	str	r6, [r4, #0]
 800c97c:	60a5      	str	r5, [r4, #8]
 800c97e:	463e      	mov	r6, r7
 800c980:	42be      	cmp	r6, r7
 800c982:	d900      	bls.n	800c986 <__ssputs_r+0x72>
 800c984:	463e      	mov	r6, r7
 800c986:	6820      	ldr	r0, [r4, #0]
 800c988:	4632      	mov	r2, r6
 800c98a:	4641      	mov	r1, r8
 800c98c:	f000 fd5c 	bl	800d448 <memmove>
 800c990:	68a3      	ldr	r3, [r4, #8]
 800c992:	1b9b      	subs	r3, r3, r6
 800c994:	60a3      	str	r3, [r4, #8]
 800c996:	6823      	ldr	r3, [r4, #0]
 800c998:	4433      	add	r3, r6
 800c99a:	6023      	str	r3, [r4, #0]
 800c99c:	2000      	movs	r0, #0
 800c99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9a2:	462a      	mov	r2, r5
 800c9a4:	f000 fd7a 	bl	800d49c <_realloc_r>
 800c9a8:	4606      	mov	r6, r0
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	d1e0      	bne.n	800c970 <__ssputs_r+0x5c>
 800c9ae:	6921      	ldr	r1, [r4, #16]
 800c9b0:	4650      	mov	r0, sl
 800c9b2:	f7ff feb7 	bl	800c724 <_free_r>
 800c9b6:	230c      	movs	r3, #12
 800c9b8:	f8ca 3000 	str.w	r3, [sl]
 800c9bc:	89a3      	ldrh	r3, [r4, #12]
 800c9be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9c2:	81a3      	strh	r3, [r4, #12]
 800c9c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9c8:	e7e9      	b.n	800c99e <__ssputs_r+0x8a>
	...

0800c9cc <_svfiprintf_r>:
 800c9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d0:	4698      	mov	r8, r3
 800c9d2:	898b      	ldrh	r3, [r1, #12]
 800c9d4:	061b      	lsls	r3, r3, #24
 800c9d6:	b09d      	sub	sp, #116	@ 0x74
 800c9d8:	4607      	mov	r7, r0
 800c9da:	460d      	mov	r5, r1
 800c9dc:	4614      	mov	r4, r2
 800c9de:	d510      	bpl.n	800ca02 <_svfiprintf_r+0x36>
 800c9e0:	690b      	ldr	r3, [r1, #16]
 800c9e2:	b973      	cbnz	r3, 800ca02 <_svfiprintf_r+0x36>
 800c9e4:	2140      	movs	r1, #64	@ 0x40
 800c9e6:	f7ff ff09 	bl	800c7fc <_malloc_r>
 800c9ea:	6028      	str	r0, [r5, #0]
 800c9ec:	6128      	str	r0, [r5, #16]
 800c9ee:	b930      	cbnz	r0, 800c9fe <_svfiprintf_r+0x32>
 800c9f0:	230c      	movs	r3, #12
 800c9f2:	603b      	str	r3, [r7, #0]
 800c9f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9f8:	b01d      	add	sp, #116	@ 0x74
 800c9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fe:	2340      	movs	r3, #64	@ 0x40
 800ca00:	616b      	str	r3, [r5, #20]
 800ca02:	2300      	movs	r3, #0
 800ca04:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca06:	2320      	movs	r3, #32
 800ca08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca10:	2330      	movs	r3, #48	@ 0x30
 800ca12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cbb0 <_svfiprintf_r+0x1e4>
 800ca16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca1a:	f04f 0901 	mov.w	r9, #1
 800ca1e:	4623      	mov	r3, r4
 800ca20:	469a      	mov	sl, r3
 800ca22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca26:	b10a      	cbz	r2, 800ca2c <_svfiprintf_r+0x60>
 800ca28:	2a25      	cmp	r2, #37	@ 0x25
 800ca2a:	d1f9      	bne.n	800ca20 <_svfiprintf_r+0x54>
 800ca2c:	ebba 0b04 	subs.w	fp, sl, r4
 800ca30:	d00b      	beq.n	800ca4a <_svfiprintf_r+0x7e>
 800ca32:	465b      	mov	r3, fp
 800ca34:	4622      	mov	r2, r4
 800ca36:	4629      	mov	r1, r5
 800ca38:	4638      	mov	r0, r7
 800ca3a:	f7ff ff6b 	bl	800c914 <__ssputs_r>
 800ca3e:	3001      	adds	r0, #1
 800ca40:	f000 80a7 	beq.w	800cb92 <_svfiprintf_r+0x1c6>
 800ca44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca46:	445a      	add	r2, fp
 800ca48:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f000 809f 	beq.w	800cb92 <_svfiprintf_r+0x1c6>
 800ca54:	2300      	movs	r3, #0
 800ca56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca5e:	f10a 0a01 	add.w	sl, sl, #1
 800ca62:	9304      	str	r3, [sp, #16]
 800ca64:	9307      	str	r3, [sp, #28]
 800ca66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca6a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca6c:	4654      	mov	r4, sl
 800ca6e:	2205      	movs	r2, #5
 800ca70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca74:	484e      	ldr	r0, [pc, #312]	@ (800cbb0 <_svfiprintf_r+0x1e4>)
 800ca76:	f7f3 fbb3 	bl	80001e0 <memchr>
 800ca7a:	9a04      	ldr	r2, [sp, #16]
 800ca7c:	b9d8      	cbnz	r0, 800cab6 <_svfiprintf_r+0xea>
 800ca7e:	06d0      	lsls	r0, r2, #27
 800ca80:	bf44      	itt	mi
 800ca82:	2320      	movmi	r3, #32
 800ca84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca88:	0711      	lsls	r1, r2, #28
 800ca8a:	bf44      	itt	mi
 800ca8c:	232b      	movmi	r3, #43	@ 0x2b
 800ca8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca92:	f89a 3000 	ldrb.w	r3, [sl]
 800ca96:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca98:	d015      	beq.n	800cac6 <_svfiprintf_r+0xfa>
 800ca9a:	9a07      	ldr	r2, [sp, #28]
 800ca9c:	4654      	mov	r4, sl
 800ca9e:	2000      	movs	r0, #0
 800caa0:	f04f 0c0a 	mov.w	ip, #10
 800caa4:	4621      	mov	r1, r4
 800caa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caaa:	3b30      	subs	r3, #48	@ 0x30
 800caac:	2b09      	cmp	r3, #9
 800caae:	d94b      	bls.n	800cb48 <_svfiprintf_r+0x17c>
 800cab0:	b1b0      	cbz	r0, 800cae0 <_svfiprintf_r+0x114>
 800cab2:	9207      	str	r2, [sp, #28]
 800cab4:	e014      	b.n	800cae0 <_svfiprintf_r+0x114>
 800cab6:	eba0 0308 	sub.w	r3, r0, r8
 800caba:	fa09 f303 	lsl.w	r3, r9, r3
 800cabe:	4313      	orrs	r3, r2
 800cac0:	9304      	str	r3, [sp, #16]
 800cac2:	46a2      	mov	sl, r4
 800cac4:	e7d2      	b.n	800ca6c <_svfiprintf_r+0xa0>
 800cac6:	9b03      	ldr	r3, [sp, #12]
 800cac8:	1d19      	adds	r1, r3, #4
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	9103      	str	r1, [sp, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	bfbb      	ittet	lt
 800cad2:	425b      	neglt	r3, r3
 800cad4:	f042 0202 	orrlt.w	r2, r2, #2
 800cad8:	9307      	strge	r3, [sp, #28]
 800cada:	9307      	strlt	r3, [sp, #28]
 800cadc:	bfb8      	it	lt
 800cade:	9204      	strlt	r2, [sp, #16]
 800cae0:	7823      	ldrb	r3, [r4, #0]
 800cae2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cae4:	d10a      	bne.n	800cafc <_svfiprintf_r+0x130>
 800cae6:	7863      	ldrb	r3, [r4, #1]
 800cae8:	2b2a      	cmp	r3, #42	@ 0x2a
 800caea:	d132      	bne.n	800cb52 <_svfiprintf_r+0x186>
 800caec:	9b03      	ldr	r3, [sp, #12]
 800caee:	1d1a      	adds	r2, r3, #4
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	9203      	str	r2, [sp, #12]
 800caf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800caf8:	3402      	adds	r4, #2
 800cafa:	9305      	str	r3, [sp, #20]
 800cafc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cbc0 <_svfiprintf_r+0x1f4>
 800cb00:	7821      	ldrb	r1, [r4, #0]
 800cb02:	2203      	movs	r2, #3
 800cb04:	4650      	mov	r0, sl
 800cb06:	f7f3 fb6b 	bl	80001e0 <memchr>
 800cb0a:	b138      	cbz	r0, 800cb1c <_svfiprintf_r+0x150>
 800cb0c:	9b04      	ldr	r3, [sp, #16]
 800cb0e:	eba0 000a 	sub.w	r0, r0, sl
 800cb12:	2240      	movs	r2, #64	@ 0x40
 800cb14:	4082      	lsls	r2, r0
 800cb16:	4313      	orrs	r3, r2
 800cb18:	3401      	adds	r4, #1
 800cb1a:	9304      	str	r3, [sp, #16]
 800cb1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb20:	4824      	ldr	r0, [pc, #144]	@ (800cbb4 <_svfiprintf_r+0x1e8>)
 800cb22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb26:	2206      	movs	r2, #6
 800cb28:	f7f3 fb5a 	bl	80001e0 <memchr>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d036      	beq.n	800cb9e <_svfiprintf_r+0x1d2>
 800cb30:	4b21      	ldr	r3, [pc, #132]	@ (800cbb8 <_svfiprintf_r+0x1ec>)
 800cb32:	bb1b      	cbnz	r3, 800cb7c <_svfiprintf_r+0x1b0>
 800cb34:	9b03      	ldr	r3, [sp, #12]
 800cb36:	3307      	adds	r3, #7
 800cb38:	f023 0307 	bic.w	r3, r3, #7
 800cb3c:	3308      	adds	r3, #8
 800cb3e:	9303      	str	r3, [sp, #12]
 800cb40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb42:	4433      	add	r3, r6
 800cb44:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb46:	e76a      	b.n	800ca1e <_svfiprintf_r+0x52>
 800cb48:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb4c:	460c      	mov	r4, r1
 800cb4e:	2001      	movs	r0, #1
 800cb50:	e7a8      	b.n	800caa4 <_svfiprintf_r+0xd8>
 800cb52:	2300      	movs	r3, #0
 800cb54:	3401      	adds	r4, #1
 800cb56:	9305      	str	r3, [sp, #20]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	f04f 0c0a 	mov.w	ip, #10
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb64:	3a30      	subs	r2, #48	@ 0x30
 800cb66:	2a09      	cmp	r2, #9
 800cb68:	d903      	bls.n	800cb72 <_svfiprintf_r+0x1a6>
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d0c6      	beq.n	800cafc <_svfiprintf_r+0x130>
 800cb6e:	9105      	str	r1, [sp, #20]
 800cb70:	e7c4      	b.n	800cafc <_svfiprintf_r+0x130>
 800cb72:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb76:	4604      	mov	r4, r0
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e7f0      	b.n	800cb5e <_svfiprintf_r+0x192>
 800cb7c:	ab03      	add	r3, sp, #12
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	462a      	mov	r2, r5
 800cb82:	4b0e      	ldr	r3, [pc, #56]	@ (800cbbc <_svfiprintf_r+0x1f0>)
 800cb84:	a904      	add	r1, sp, #16
 800cb86:	4638      	mov	r0, r7
 800cb88:	f3af 8000 	nop.w
 800cb8c:	1c42      	adds	r2, r0, #1
 800cb8e:	4606      	mov	r6, r0
 800cb90:	d1d6      	bne.n	800cb40 <_svfiprintf_r+0x174>
 800cb92:	89ab      	ldrh	r3, [r5, #12]
 800cb94:	065b      	lsls	r3, r3, #25
 800cb96:	f53f af2d 	bmi.w	800c9f4 <_svfiprintf_r+0x28>
 800cb9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb9c:	e72c      	b.n	800c9f8 <_svfiprintf_r+0x2c>
 800cb9e:	ab03      	add	r3, sp, #12
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	462a      	mov	r2, r5
 800cba4:	4b05      	ldr	r3, [pc, #20]	@ (800cbbc <_svfiprintf_r+0x1f0>)
 800cba6:	a904      	add	r1, sp, #16
 800cba8:	4638      	mov	r0, r7
 800cbaa:	f000 f9bb 	bl	800cf24 <_printf_i>
 800cbae:	e7ed      	b.n	800cb8c <_svfiprintf_r+0x1c0>
 800cbb0:	0800d75c 	.word	0x0800d75c
 800cbb4:	0800d766 	.word	0x0800d766
 800cbb8:	00000000 	.word	0x00000000
 800cbbc:	0800c915 	.word	0x0800c915
 800cbc0:	0800d762 	.word	0x0800d762

0800cbc4 <__sfputc_r>:
 800cbc4:	6893      	ldr	r3, [r2, #8]
 800cbc6:	3b01      	subs	r3, #1
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	b410      	push	{r4}
 800cbcc:	6093      	str	r3, [r2, #8]
 800cbce:	da08      	bge.n	800cbe2 <__sfputc_r+0x1e>
 800cbd0:	6994      	ldr	r4, [r2, #24]
 800cbd2:	42a3      	cmp	r3, r4
 800cbd4:	db01      	blt.n	800cbda <__sfputc_r+0x16>
 800cbd6:	290a      	cmp	r1, #10
 800cbd8:	d103      	bne.n	800cbe2 <__sfputc_r+0x1e>
 800cbda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbde:	f000 bb9f 	b.w	800d320 <__swbuf_r>
 800cbe2:	6813      	ldr	r3, [r2, #0]
 800cbe4:	1c58      	adds	r0, r3, #1
 800cbe6:	6010      	str	r0, [r2, #0]
 800cbe8:	7019      	strb	r1, [r3, #0]
 800cbea:	4608      	mov	r0, r1
 800cbec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbf0:	4770      	bx	lr

0800cbf2 <__sfputs_r>:
 800cbf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf4:	4606      	mov	r6, r0
 800cbf6:	460f      	mov	r7, r1
 800cbf8:	4614      	mov	r4, r2
 800cbfa:	18d5      	adds	r5, r2, r3
 800cbfc:	42ac      	cmp	r4, r5
 800cbfe:	d101      	bne.n	800cc04 <__sfputs_r+0x12>
 800cc00:	2000      	movs	r0, #0
 800cc02:	e007      	b.n	800cc14 <__sfputs_r+0x22>
 800cc04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc08:	463a      	mov	r2, r7
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	f7ff ffda 	bl	800cbc4 <__sfputc_r>
 800cc10:	1c43      	adds	r3, r0, #1
 800cc12:	d1f3      	bne.n	800cbfc <__sfputs_r+0xa>
 800cc14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc18 <_vfiprintf_r>:
 800cc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1c:	460d      	mov	r5, r1
 800cc1e:	b09d      	sub	sp, #116	@ 0x74
 800cc20:	4614      	mov	r4, r2
 800cc22:	4698      	mov	r8, r3
 800cc24:	4606      	mov	r6, r0
 800cc26:	b118      	cbz	r0, 800cc30 <_vfiprintf_r+0x18>
 800cc28:	6a03      	ldr	r3, [r0, #32]
 800cc2a:	b90b      	cbnz	r3, 800cc30 <_vfiprintf_r+0x18>
 800cc2c:	f7ff fbc8 	bl	800c3c0 <__sinit>
 800cc30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc32:	07d9      	lsls	r1, r3, #31
 800cc34:	d405      	bmi.n	800cc42 <_vfiprintf_r+0x2a>
 800cc36:	89ab      	ldrh	r3, [r5, #12]
 800cc38:	059a      	lsls	r2, r3, #22
 800cc3a:	d402      	bmi.n	800cc42 <_vfiprintf_r+0x2a>
 800cc3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc3e:	f7ff fd60 	bl	800c702 <__retarget_lock_acquire_recursive>
 800cc42:	89ab      	ldrh	r3, [r5, #12]
 800cc44:	071b      	lsls	r3, r3, #28
 800cc46:	d501      	bpl.n	800cc4c <_vfiprintf_r+0x34>
 800cc48:	692b      	ldr	r3, [r5, #16]
 800cc4a:	b99b      	cbnz	r3, 800cc74 <_vfiprintf_r+0x5c>
 800cc4c:	4629      	mov	r1, r5
 800cc4e:	4630      	mov	r0, r6
 800cc50:	f000 fba4 	bl	800d39c <__swsetup_r>
 800cc54:	b170      	cbz	r0, 800cc74 <_vfiprintf_r+0x5c>
 800cc56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc58:	07dc      	lsls	r4, r3, #31
 800cc5a:	d504      	bpl.n	800cc66 <_vfiprintf_r+0x4e>
 800cc5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc60:	b01d      	add	sp, #116	@ 0x74
 800cc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc66:	89ab      	ldrh	r3, [r5, #12]
 800cc68:	0598      	lsls	r0, r3, #22
 800cc6a:	d4f7      	bmi.n	800cc5c <_vfiprintf_r+0x44>
 800cc6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc6e:	f7ff fd49 	bl	800c704 <__retarget_lock_release_recursive>
 800cc72:	e7f3      	b.n	800cc5c <_vfiprintf_r+0x44>
 800cc74:	2300      	movs	r3, #0
 800cc76:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc78:	2320      	movs	r3, #32
 800cc7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc82:	2330      	movs	r3, #48	@ 0x30
 800cc84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ce34 <_vfiprintf_r+0x21c>
 800cc88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc8c:	f04f 0901 	mov.w	r9, #1
 800cc90:	4623      	mov	r3, r4
 800cc92:	469a      	mov	sl, r3
 800cc94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc98:	b10a      	cbz	r2, 800cc9e <_vfiprintf_r+0x86>
 800cc9a:	2a25      	cmp	r2, #37	@ 0x25
 800cc9c:	d1f9      	bne.n	800cc92 <_vfiprintf_r+0x7a>
 800cc9e:	ebba 0b04 	subs.w	fp, sl, r4
 800cca2:	d00b      	beq.n	800ccbc <_vfiprintf_r+0xa4>
 800cca4:	465b      	mov	r3, fp
 800cca6:	4622      	mov	r2, r4
 800cca8:	4629      	mov	r1, r5
 800ccaa:	4630      	mov	r0, r6
 800ccac:	f7ff ffa1 	bl	800cbf2 <__sfputs_r>
 800ccb0:	3001      	adds	r0, #1
 800ccb2:	f000 80a7 	beq.w	800ce04 <_vfiprintf_r+0x1ec>
 800ccb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccb8:	445a      	add	r2, fp
 800ccba:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccbc:	f89a 3000 	ldrb.w	r3, [sl]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f000 809f 	beq.w	800ce04 <_vfiprintf_r+0x1ec>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cccc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccd0:	f10a 0a01 	add.w	sl, sl, #1
 800ccd4:	9304      	str	r3, [sp, #16]
 800ccd6:	9307      	str	r3, [sp, #28]
 800ccd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ccdc:	931a      	str	r3, [sp, #104]	@ 0x68
 800ccde:	4654      	mov	r4, sl
 800cce0:	2205      	movs	r2, #5
 800cce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cce6:	4853      	ldr	r0, [pc, #332]	@ (800ce34 <_vfiprintf_r+0x21c>)
 800cce8:	f7f3 fa7a 	bl	80001e0 <memchr>
 800ccec:	9a04      	ldr	r2, [sp, #16]
 800ccee:	b9d8      	cbnz	r0, 800cd28 <_vfiprintf_r+0x110>
 800ccf0:	06d1      	lsls	r1, r2, #27
 800ccf2:	bf44      	itt	mi
 800ccf4:	2320      	movmi	r3, #32
 800ccf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccfa:	0713      	lsls	r3, r2, #28
 800ccfc:	bf44      	itt	mi
 800ccfe:	232b      	movmi	r3, #43	@ 0x2b
 800cd00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd04:	f89a 3000 	ldrb.w	r3, [sl]
 800cd08:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd0a:	d015      	beq.n	800cd38 <_vfiprintf_r+0x120>
 800cd0c:	9a07      	ldr	r2, [sp, #28]
 800cd0e:	4654      	mov	r4, sl
 800cd10:	2000      	movs	r0, #0
 800cd12:	f04f 0c0a 	mov.w	ip, #10
 800cd16:	4621      	mov	r1, r4
 800cd18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd1c:	3b30      	subs	r3, #48	@ 0x30
 800cd1e:	2b09      	cmp	r3, #9
 800cd20:	d94b      	bls.n	800cdba <_vfiprintf_r+0x1a2>
 800cd22:	b1b0      	cbz	r0, 800cd52 <_vfiprintf_r+0x13a>
 800cd24:	9207      	str	r2, [sp, #28]
 800cd26:	e014      	b.n	800cd52 <_vfiprintf_r+0x13a>
 800cd28:	eba0 0308 	sub.w	r3, r0, r8
 800cd2c:	fa09 f303 	lsl.w	r3, r9, r3
 800cd30:	4313      	orrs	r3, r2
 800cd32:	9304      	str	r3, [sp, #16]
 800cd34:	46a2      	mov	sl, r4
 800cd36:	e7d2      	b.n	800ccde <_vfiprintf_r+0xc6>
 800cd38:	9b03      	ldr	r3, [sp, #12]
 800cd3a:	1d19      	adds	r1, r3, #4
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	9103      	str	r1, [sp, #12]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	bfbb      	ittet	lt
 800cd44:	425b      	neglt	r3, r3
 800cd46:	f042 0202 	orrlt.w	r2, r2, #2
 800cd4a:	9307      	strge	r3, [sp, #28]
 800cd4c:	9307      	strlt	r3, [sp, #28]
 800cd4e:	bfb8      	it	lt
 800cd50:	9204      	strlt	r2, [sp, #16]
 800cd52:	7823      	ldrb	r3, [r4, #0]
 800cd54:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd56:	d10a      	bne.n	800cd6e <_vfiprintf_r+0x156>
 800cd58:	7863      	ldrb	r3, [r4, #1]
 800cd5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd5c:	d132      	bne.n	800cdc4 <_vfiprintf_r+0x1ac>
 800cd5e:	9b03      	ldr	r3, [sp, #12]
 800cd60:	1d1a      	adds	r2, r3, #4
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	9203      	str	r2, [sp, #12]
 800cd66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd6a:	3402      	adds	r4, #2
 800cd6c:	9305      	str	r3, [sp, #20]
 800cd6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ce44 <_vfiprintf_r+0x22c>
 800cd72:	7821      	ldrb	r1, [r4, #0]
 800cd74:	2203      	movs	r2, #3
 800cd76:	4650      	mov	r0, sl
 800cd78:	f7f3 fa32 	bl	80001e0 <memchr>
 800cd7c:	b138      	cbz	r0, 800cd8e <_vfiprintf_r+0x176>
 800cd7e:	9b04      	ldr	r3, [sp, #16]
 800cd80:	eba0 000a 	sub.w	r0, r0, sl
 800cd84:	2240      	movs	r2, #64	@ 0x40
 800cd86:	4082      	lsls	r2, r0
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	3401      	adds	r4, #1
 800cd8c:	9304      	str	r3, [sp, #16]
 800cd8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd92:	4829      	ldr	r0, [pc, #164]	@ (800ce38 <_vfiprintf_r+0x220>)
 800cd94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd98:	2206      	movs	r2, #6
 800cd9a:	f7f3 fa21 	bl	80001e0 <memchr>
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	d03f      	beq.n	800ce22 <_vfiprintf_r+0x20a>
 800cda2:	4b26      	ldr	r3, [pc, #152]	@ (800ce3c <_vfiprintf_r+0x224>)
 800cda4:	bb1b      	cbnz	r3, 800cdee <_vfiprintf_r+0x1d6>
 800cda6:	9b03      	ldr	r3, [sp, #12]
 800cda8:	3307      	adds	r3, #7
 800cdaa:	f023 0307 	bic.w	r3, r3, #7
 800cdae:	3308      	adds	r3, #8
 800cdb0:	9303      	str	r3, [sp, #12]
 800cdb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdb4:	443b      	add	r3, r7
 800cdb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdb8:	e76a      	b.n	800cc90 <_vfiprintf_r+0x78>
 800cdba:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdbe:	460c      	mov	r4, r1
 800cdc0:	2001      	movs	r0, #1
 800cdc2:	e7a8      	b.n	800cd16 <_vfiprintf_r+0xfe>
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	3401      	adds	r4, #1
 800cdc8:	9305      	str	r3, [sp, #20]
 800cdca:	4619      	mov	r1, r3
 800cdcc:	f04f 0c0a 	mov.w	ip, #10
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdd6:	3a30      	subs	r2, #48	@ 0x30
 800cdd8:	2a09      	cmp	r2, #9
 800cdda:	d903      	bls.n	800cde4 <_vfiprintf_r+0x1cc>
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d0c6      	beq.n	800cd6e <_vfiprintf_r+0x156>
 800cde0:	9105      	str	r1, [sp, #20]
 800cde2:	e7c4      	b.n	800cd6e <_vfiprintf_r+0x156>
 800cde4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cde8:	4604      	mov	r4, r0
 800cdea:	2301      	movs	r3, #1
 800cdec:	e7f0      	b.n	800cdd0 <_vfiprintf_r+0x1b8>
 800cdee:	ab03      	add	r3, sp, #12
 800cdf0:	9300      	str	r3, [sp, #0]
 800cdf2:	462a      	mov	r2, r5
 800cdf4:	4b12      	ldr	r3, [pc, #72]	@ (800ce40 <_vfiprintf_r+0x228>)
 800cdf6:	a904      	add	r1, sp, #16
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	f3af 8000 	nop.w
 800cdfe:	4607      	mov	r7, r0
 800ce00:	1c78      	adds	r0, r7, #1
 800ce02:	d1d6      	bne.n	800cdb2 <_vfiprintf_r+0x19a>
 800ce04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce06:	07d9      	lsls	r1, r3, #31
 800ce08:	d405      	bmi.n	800ce16 <_vfiprintf_r+0x1fe>
 800ce0a:	89ab      	ldrh	r3, [r5, #12]
 800ce0c:	059a      	lsls	r2, r3, #22
 800ce0e:	d402      	bmi.n	800ce16 <_vfiprintf_r+0x1fe>
 800ce10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce12:	f7ff fc77 	bl	800c704 <__retarget_lock_release_recursive>
 800ce16:	89ab      	ldrh	r3, [r5, #12]
 800ce18:	065b      	lsls	r3, r3, #25
 800ce1a:	f53f af1f 	bmi.w	800cc5c <_vfiprintf_r+0x44>
 800ce1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce20:	e71e      	b.n	800cc60 <_vfiprintf_r+0x48>
 800ce22:	ab03      	add	r3, sp, #12
 800ce24:	9300      	str	r3, [sp, #0]
 800ce26:	462a      	mov	r2, r5
 800ce28:	4b05      	ldr	r3, [pc, #20]	@ (800ce40 <_vfiprintf_r+0x228>)
 800ce2a:	a904      	add	r1, sp, #16
 800ce2c:	4630      	mov	r0, r6
 800ce2e:	f000 f879 	bl	800cf24 <_printf_i>
 800ce32:	e7e4      	b.n	800cdfe <_vfiprintf_r+0x1e6>
 800ce34:	0800d75c 	.word	0x0800d75c
 800ce38:	0800d766 	.word	0x0800d766
 800ce3c:	00000000 	.word	0x00000000
 800ce40:	0800cbf3 	.word	0x0800cbf3
 800ce44:	0800d762 	.word	0x0800d762

0800ce48 <_printf_common>:
 800ce48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce4c:	4616      	mov	r6, r2
 800ce4e:	4698      	mov	r8, r3
 800ce50:	688a      	ldr	r2, [r1, #8]
 800ce52:	690b      	ldr	r3, [r1, #16]
 800ce54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	bfb8      	it	lt
 800ce5c:	4613      	movlt	r3, r2
 800ce5e:	6033      	str	r3, [r6, #0]
 800ce60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ce64:	4607      	mov	r7, r0
 800ce66:	460c      	mov	r4, r1
 800ce68:	b10a      	cbz	r2, 800ce6e <_printf_common+0x26>
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	6033      	str	r3, [r6, #0]
 800ce6e:	6823      	ldr	r3, [r4, #0]
 800ce70:	0699      	lsls	r1, r3, #26
 800ce72:	bf42      	ittt	mi
 800ce74:	6833      	ldrmi	r3, [r6, #0]
 800ce76:	3302      	addmi	r3, #2
 800ce78:	6033      	strmi	r3, [r6, #0]
 800ce7a:	6825      	ldr	r5, [r4, #0]
 800ce7c:	f015 0506 	ands.w	r5, r5, #6
 800ce80:	d106      	bne.n	800ce90 <_printf_common+0x48>
 800ce82:	f104 0a19 	add.w	sl, r4, #25
 800ce86:	68e3      	ldr	r3, [r4, #12]
 800ce88:	6832      	ldr	r2, [r6, #0]
 800ce8a:	1a9b      	subs	r3, r3, r2
 800ce8c:	42ab      	cmp	r3, r5
 800ce8e:	dc26      	bgt.n	800cede <_printf_common+0x96>
 800ce90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ce94:	6822      	ldr	r2, [r4, #0]
 800ce96:	3b00      	subs	r3, #0
 800ce98:	bf18      	it	ne
 800ce9a:	2301      	movne	r3, #1
 800ce9c:	0692      	lsls	r2, r2, #26
 800ce9e:	d42b      	bmi.n	800cef8 <_printf_common+0xb0>
 800cea0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cea4:	4641      	mov	r1, r8
 800cea6:	4638      	mov	r0, r7
 800cea8:	47c8      	blx	r9
 800ceaa:	3001      	adds	r0, #1
 800ceac:	d01e      	beq.n	800ceec <_printf_common+0xa4>
 800ceae:	6823      	ldr	r3, [r4, #0]
 800ceb0:	6922      	ldr	r2, [r4, #16]
 800ceb2:	f003 0306 	and.w	r3, r3, #6
 800ceb6:	2b04      	cmp	r3, #4
 800ceb8:	bf02      	ittt	eq
 800ceba:	68e5      	ldreq	r5, [r4, #12]
 800cebc:	6833      	ldreq	r3, [r6, #0]
 800cebe:	1aed      	subeq	r5, r5, r3
 800cec0:	68a3      	ldr	r3, [r4, #8]
 800cec2:	bf0c      	ite	eq
 800cec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cec8:	2500      	movne	r5, #0
 800ceca:	4293      	cmp	r3, r2
 800cecc:	bfc4      	itt	gt
 800cece:	1a9b      	subgt	r3, r3, r2
 800ced0:	18ed      	addgt	r5, r5, r3
 800ced2:	2600      	movs	r6, #0
 800ced4:	341a      	adds	r4, #26
 800ced6:	42b5      	cmp	r5, r6
 800ced8:	d11a      	bne.n	800cf10 <_printf_common+0xc8>
 800ceda:	2000      	movs	r0, #0
 800cedc:	e008      	b.n	800cef0 <_printf_common+0xa8>
 800cede:	2301      	movs	r3, #1
 800cee0:	4652      	mov	r2, sl
 800cee2:	4641      	mov	r1, r8
 800cee4:	4638      	mov	r0, r7
 800cee6:	47c8      	blx	r9
 800cee8:	3001      	adds	r0, #1
 800ceea:	d103      	bne.n	800cef4 <_printf_common+0xac>
 800ceec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cef4:	3501      	adds	r5, #1
 800cef6:	e7c6      	b.n	800ce86 <_printf_common+0x3e>
 800cef8:	18e1      	adds	r1, r4, r3
 800cefa:	1c5a      	adds	r2, r3, #1
 800cefc:	2030      	movs	r0, #48	@ 0x30
 800cefe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cf02:	4422      	add	r2, r4
 800cf04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cf08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cf0c:	3302      	adds	r3, #2
 800cf0e:	e7c7      	b.n	800cea0 <_printf_common+0x58>
 800cf10:	2301      	movs	r3, #1
 800cf12:	4622      	mov	r2, r4
 800cf14:	4641      	mov	r1, r8
 800cf16:	4638      	mov	r0, r7
 800cf18:	47c8      	blx	r9
 800cf1a:	3001      	adds	r0, #1
 800cf1c:	d0e6      	beq.n	800ceec <_printf_common+0xa4>
 800cf1e:	3601      	adds	r6, #1
 800cf20:	e7d9      	b.n	800ced6 <_printf_common+0x8e>
	...

0800cf24 <_printf_i>:
 800cf24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf28:	7e0f      	ldrb	r7, [r1, #24]
 800cf2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cf2c:	2f78      	cmp	r7, #120	@ 0x78
 800cf2e:	4691      	mov	r9, r2
 800cf30:	4680      	mov	r8, r0
 800cf32:	460c      	mov	r4, r1
 800cf34:	469a      	mov	sl, r3
 800cf36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cf3a:	d807      	bhi.n	800cf4c <_printf_i+0x28>
 800cf3c:	2f62      	cmp	r7, #98	@ 0x62
 800cf3e:	d80a      	bhi.n	800cf56 <_printf_i+0x32>
 800cf40:	2f00      	cmp	r7, #0
 800cf42:	f000 80d1 	beq.w	800d0e8 <_printf_i+0x1c4>
 800cf46:	2f58      	cmp	r7, #88	@ 0x58
 800cf48:	f000 80b8 	beq.w	800d0bc <_printf_i+0x198>
 800cf4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cf54:	e03a      	b.n	800cfcc <_printf_i+0xa8>
 800cf56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cf5a:	2b15      	cmp	r3, #21
 800cf5c:	d8f6      	bhi.n	800cf4c <_printf_i+0x28>
 800cf5e:	a101      	add	r1, pc, #4	@ (adr r1, 800cf64 <_printf_i+0x40>)
 800cf60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf64:	0800cfbd 	.word	0x0800cfbd
 800cf68:	0800cfd1 	.word	0x0800cfd1
 800cf6c:	0800cf4d 	.word	0x0800cf4d
 800cf70:	0800cf4d 	.word	0x0800cf4d
 800cf74:	0800cf4d 	.word	0x0800cf4d
 800cf78:	0800cf4d 	.word	0x0800cf4d
 800cf7c:	0800cfd1 	.word	0x0800cfd1
 800cf80:	0800cf4d 	.word	0x0800cf4d
 800cf84:	0800cf4d 	.word	0x0800cf4d
 800cf88:	0800cf4d 	.word	0x0800cf4d
 800cf8c:	0800cf4d 	.word	0x0800cf4d
 800cf90:	0800d0cf 	.word	0x0800d0cf
 800cf94:	0800cffb 	.word	0x0800cffb
 800cf98:	0800d089 	.word	0x0800d089
 800cf9c:	0800cf4d 	.word	0x0800cf4d
 800cfa0:	0800cf4d 	.word	0x0800cf4d
 800cfa4:	0800d0f1 	.word	0x0800d0f1
 800cfa8:	0800cf4d 	.word	0x0800cf4d
 800cfac:	0800cffb 	.word	0x0800cffb
 800cfb0:	0800cf4d 	.word	0x0800cf4d
 800cfb4:	0800cf4d 	.word	0x0800cf4d
 800cfb8:	0800d091 	.word	0x0800d091
 800cfbc:	6833      	ldr	r3, [r6, #0]
 800cfbe:	1d1a      	adds	r2, r3, #4
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	6032      	str	r2, [r6, #0]
 800cfc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cfc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e09c      	b.n	800d10a <_printf_i+0x1e6>
 800cfd0:	6833      	ldr	r3, [r6, #0]
 800cfd2:	6820      	ldr	r0, [r4, #0]
 800cfd4:	1d19      	adds	r1, r3, #4
 800cfd6:	6031      	str	r1, [r6, #0]
 800cfd8:	0606      	lsls	r6, r0, #24
 800cfda:	d501      	bpl.n	800cfe0 <_printf_i+0xbc>
 800cfdc:	681d      	ldr	r5, [r3, #0]
 800cfde:	e003      	b.n	800cfe8 <_printf_i+0xc4>
 800cfe0:	0645      	lsls	r5, r0, #25
 800cfe2:	d5fb      	bpl.n	800cfdc <_printf_i+0xb8>
 800cfe4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cfe8:	2d00      	cmp	r5, #0
 800cfea:	da03      	bge.n	800cff4 <_printf_i+0xd0>
 800cfec:	232d      	movs	r3, #45	@ 0x2d
 800cfee:	426d      	negs	r5, r5
 800cff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cff4:	4858      	ldr	r0, [pc, #352]	@ (800d158 <_printf_i+0x234>)
 800cff6:	230a      	movs	r3, #10
 800cff8:	e011      	b.n	800d01e <_printf_i+0xfa>
 800cffa:	6821      	ldr	r1, [r4, #0]
 800cffc:	6833      	ldr	r3, [r6, #0]
 800cffe:	0608      	lsls	r0, r1, #24
 800d000:	f853 5b04 	ldr.w	r5, [r3], #4
 800d004:	d402      	bmi.n	800d00c <_printf_i+0xe8>
 800d006:	0649      	lsls	r1, r1, #25
 800d008:	bf48      	it	mi
 800d00a:	b2ad      	uxthmi	r5, r5
 800d00c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d00e:	4852      	ldr	r0, [pc, #328]	@ (800d158 <_printf_i+0x234>)
 800d010:	6033      	str	r3, [r6, #0]
 800d012:	bf14      	ite	ne
 800d014:	230a      	movne	r3, #10
 800d016:	2308      	moveq	r3, #8
 800d018:	2100      	movs	r1, #0
 800d01a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d01e:	6866      	ldr	r6, [r4, #4]
 800d020:	60a6      	str	r6, [r4, #8]
 800d022:	2e00      	cmp	r6, #0
 800d024:	db05      	blt.n	800d032 <_printf_i+0x10e>
 800d026:	6821      	ldr	r1, [r4, #0]
 800d028:	432e      	orrs	r6, r5
 800d02a:	f021 0104 	bic.w	r1, r1, #4
 800d02e:	6021      	str	r1, [r4, #0]
 800d030:	d04b      	beq.n	800d0ca <_printf_i+0x1a6>
 800d032:	4616      	mov	r6, r2
 800d034:	fbb5 f1f3 	udiv	r1, r5, r3
 800d038:	fb03 5711 	mls	r7, r3, r1, r5
 800d03c:	5dc7      	ldrb	r7, [r0, r7]
 800d03e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d042:	462f      	mov	r7, r5
 800d044:	42bb      	cmp	r3, r7
 800d046:	460d      	mov	r5, r1
 800d048:	d9f4      	bls.n	800d034 <_printf_i+0x110>
 800d04a:	2b08      	cmp	r3, #8
 800d04c:	d10b      	bne.n	800d066 <_printf_i+0x142>
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	07df      	lsls	r7, r3, #31
 800d052:	d508      	bpl.n	800d066 <_printf_i+0x142>
 800d054:	6923      	ldr	r3, [r4, #16]
 800d056:	6861      	ldr	r1, [r4, #4]
 800d058:	4299      	cmp	r1, r3
 800d05a:	bfde      	ittt	le
 800d05c:	2330      	movle	r3, #48	@ 0x30
 800d05e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d062:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d066:	1b92      	subs	r2, r2, r6
 800d068:	6122      	str	r2, [r4, #16]
 800d06a:	f8cd a000 	str.w	sl, [sp]
 800d06e:	464b      	mov	r3, r9
 800d070:	aa03      	add	r2, sp, #12
 800d072:	4621      	mov	r1, r4
 800d074:	4640      	mov	r0, r8
 800d076:	f7ff fee7 	bl	800ce48 <_printf_common>
 800d07a:	3001      	adds	r0, #1
 800d07c:	d14a      	bne.n	800d114 <_printf_i+0x1f0>
 800d07e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d082:	b004      	add	sp, #16
 800d084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d088:	6823      	ldr	r3, [r4, #0]
 800d08a:	f043 0320 	orr.w	r3, r3, #32
 800d08e:	6023      	str	r3, [r4, #0]
 800d090:	4832      	ldr	r0, [pc, #200]	@ (800d15c <_printf_i+0x238>)
 800d092:	2778      	movs	r7, #120	@ 0x78
 800d094:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d098:	6823      	ldr	r3, [r4, #0]
 800d09a:	6831      	ldr	r1, [r6, #0]
 800d09c:	061f      	lsls	r7, r3, #24
 800d09e:	f851 5b04 	ldr.w	r5, [r1], #4
 800d0a2:	d402      	bmi.n	800d0aa <_printf_i+0x186>
 800d0a4:	065f      	lsls	r7, r3, #25
 800d0a6:	bf48      	it	mi
 800d0a8:	b2ad      	uxthmi	r5, r5
 800d0aa:	6031      	str	r1, [r6, #0]
 800d0ac:	07d9      	lsls	r1, r3, #31
 800d0ae:	bf44      	itt	mi
 800d0b0:	f043 0320 	orrmi.w	r3, r3, #32
 800d0b4:	6023      	strmi	r3, [r4, #0]
 800d0b6:	b11d      	cbz	r5, 800d0c0 <_printf_i+0x19c>
 800d0b8:	2310      	movs	r3, #16
 800d0ba:	e7ad      	b.n	800d018 <_printf_i+0xf4>
 800d0bc:	4826      	ldr	r0, [pc, #152]	@ (800d158 <_printf_i+0x234>)
 800d0be:	e7e9      	b.n	800d094 <_printf_i+0x170>
 800d0c0:	6823      	ldr	r3, [r4, #0]
 800d0c2:	f023 0320 	bic.w	r3, r3, #32
 800d0c6:	6023      	str	r3, [r4, #0]
 800d0c8:	e7f6      	b.n	800d0b8 <_printf_i+0x194>
 800d0ca:	4616      	mov	r6, r2
 800d0cc:	e7bd      	b.n	800d04a <_printf_i+0x126>
 800d0ce:	6833      	ldr	r3, [r6, #0]
 800d0d0:	6825      	ldr	r5, [r4, #0]
 800d0d2:	6961      	ldr	r1, [r4, #20]
 800d0d4:	1d18      	adds	r0, r3, #4
 800d0d6:	6030      	str	r0, [r6, #0]
 800d0d8:	062e      	lsls	r6, r5, #24
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	d501      	bpl.n	800d0e2 <_printf_i+0x1be>
 800d0de:	6019      	str	r1, [r3, #0]
 800d0e0:	e002      	b.n	800d0e8 <_printf_i+0x1c4>
 800d0e2:	0668      	lsls	r0, r5, #25
 800d0e4:	d5fb      	bpl.n	800d0de <_printf_i+0x1ba>
 800d0e6:	8019      	strh	r1, [r3, #0]
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	6123      	str	r3, [r4, #16]
 800d0ec:	4616      	mov	r6, r2
 800d0ee:	e7bc      	b.n	800d06a <_printf_i+0x146>
 800d0f0:	6833      	ldr	r3, [r6, #0]
 800d0f2:	1d1a      	adds	r2, r3, #4
 800d0f4:	6032      	str	r2, [r6, #0]
 800d0f6:	681e      	ldr	r6, [r3, #0]
 800d0f8:	6862      	ldr	r2, [r4, #4]
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	f7f3 f86f 	bl	80001e0 <memchr>
 800d102:	b108      	cbz	r0, 800d108 <_printf_i+0x1e4>
 800d104:	1b80      	subs	r0, r0, r6
 800d106:	6060      	str	r0, [r4, #4]
 800d108:	6863      	ldr	r3, [r4, #4]
 800d10a:	6123      	str	r3, [r4, #16]
 800d10c:	2300      	movs	r3, #0
 800d10e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d112:	e7aa      	b.n	800d06a <_printf_i+0x146>
 800d114:	6923      	ldr	r3, [r4, #16]
 800d116:	4632      	mov	r2, r6
 800d118:	4649      	mov	r1, r9
 800d11a:	4640      	mov	r0, r8
 800d11c:	47d0      	blx	sl
 800d11e:	3001      	adds	r0, #1
 800d120:	d0ad      	beq.n	800d07e <_printf_i+0x15a>
 800d122:	6823      	ldr	r3, [r4, #0]
 800d124:	079b      	lsls	r3, r3, #30
 800d126:	d413      	bmi.n	800d150 <_printf_i+0x22c>
 800d128:	68e0      	ldr	r0, [r4, #12]
 800d12a:	9b03      	ldr	r3, [sp, #12]
 800d12c:	4298      	cmp	r0, r3
 800d12e:	bfb8      	it	lt
 800d130:	4618      	movlt	r0, r3
 800d132:	e7a6      	b.n	800d082 <_printf_i+0x15e>
 800d134:	2301      	movs	r3, #1
 800d136:	4632      	mov	r2, r6
 800d138:	4649      	mov	r1, r9
 800d13a:	4640      	mov	r0, r8
 800d13c:	47d0      	blx	sl
 800d13e:	3001      	adds	r0, #1
 800d140:	d09d      	beq.n	800d07e <_printf_i+0x15a>
 800d142:	3501      	adds	r5, #1
 800d144:	68e3      	ldr	r3, [r4, #12]
 800d146:	9903      	ldr	r1, [sp, #12]
 800d148:	1a5b      	subs	r3, r3, r1
 800d14a:	42ab      	cmp	r3, r5
 800d14c:	dcf2      	bgt.n	800d134 <_printf_i+0x210>
 800d14e:	e7eb      	b.n	800d128 <_printf_i+0x204>
 800d150:	2500      	movs	r5, #0
 800d152:	f104 0619 	add.w	r6, r4, #25
 800d156:	e7f5      	b.n	800d144 <_printf_i+0x220>
 800d158:	0800d76d 	.word	0x0800d76d
 800d15c:	0800d77e 	.word	0x0800d77e

0800d160 <__sflush_r>:
 800d160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d168:	0716      	lsls	r6, r2, #28
 800d16a:	4605      	mov	r5, r0
 800d16c:	460c      	mov	r4, r1
 800d16e:	d454      	bmi.n	800d21a <__sflush_r+0xba>
 800d170:	684b      	ldr	r3, [r1, #4]
 800d172:	2b00      	cmp	r3, #0
 800d174:	dc02      	bgt.n	800d17c <__sflush_r+0x1c>
 800d176:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d178:	2b00      	cmp	r3, #0
 800d17a:	dd48      	ble.n	800d20e <__sflush_r+0xae>
 800d17c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d17e:	2e00      	cmp	r6, #0
 800d180:	d045      	beq.n	800d20e <__sflush_r+0xae>
 800d182:	2300      	movs	r3, #0
 800d184:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d188:	682f      	ldr	r7, [r5, #0]
 800d18a:	6a21      	ldr	r1, [r4, #32]
 800d18c:	602b      	str	r3, [r5, #0]
 800d18e:	d030      	beq.n	800d1f2 <__sflush_r+0x92>
 800d190:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d192:	89a3      	ldrh	r3, [r4, #12]
 800d194:	0759      	lsls	r1, r3, #29
 800d196:	d505      	bpl.n	800d1a4 <__sflush_r+0x44>
 800d198:	6863      	ldr	r3, [r4, #4]
 800d19a:	1ad2      	subs	r2, r2, r3
 800d19c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d19e:	b10b      	cbz	r3, 800d1a4 <__sflush_r+0x44>
 800d1a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d1a2:	1ad2      	subs	r2, r2, r3
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1a8:	6a21      	ldr	r1, [r4, #32]
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	47b0      	blx	r6
 800d1ae:	1c43      	adds	r3, r0, #1
 800d1b0:	89a3      	ldrh	r3, [r4, #12]
 800d1b2:	d106      	bne.n	800d1c2 <__sflush_r+0x62>
 800d1b4:	6829      	ldr	r1, [r5, #0]
 800d1b6:	291d      	cmp	r1, #29
 800d1b8:	d82b      	bhi.n	800d212 <__sflush_r+0xb2>
 800d1ba:	4a2a      	ldr	r2, [pc, #168]	@ (800d264 <__sflush_r+0x104>)
 800d1bc:	40ca      	lsrs	r2, r1
 800d1be:	07d6      	lsls	r6, r2, #31
 800d1c0:	d527      	bpl.n	800d212 <__sflush_r+0xb2>
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	6062      	str	r2, [r4, #4]
 800d1c6:	04d9      	lsls	r1, r3, #19
 800d1c8:	6922      	ldr	r2, [r4, #16]
 800d1ca:	6022      	str	r2, [r4, #0]
 800d1cc:	d504      	bpl.n	800d1d8 <__sflush_r+0x78>
 800d1ce:	1c42      	adds	r2, r0, #1
 800d1d0:	d101      	bne.n	800d1d6 <__sflush_r+0x76>
 800d1d2:	682b      	ldr	r3, [r5, #0]
 800d1d4:	b903      	cbnz	r3, 800d1d8 <__sflush_r+0x78>
 800d1d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800d1d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1da:	602f      	str	r7, [r5, #0]
 800d1dc:	b1b9      	cbz	r1, 800d20e <__sflush_r+0xae>
 800d1de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1e2:	4299      	cmp	r1, r3
 800d1e4:	d002      	beq.n	800d1ec <__sflush_r+0x8c>
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	f7ff fa9c 	bl	800c724 <_free_r>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1f0:	e00d      	b.n	800d20e <__sflush_r+0xae>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	47b0      	blx	r6
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	1c50      	adds	r0, r2, #1
 800d1fc:	d1c9      	bne.n	800d192 <__sflush_r+0x32>
 800d1fe:	682b      	ldr	r3, [r5, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d0c6      	beq.n	800d192 <__sflush_r+0x32>
 800d204:	2b1d      	cmp	r3, #29
 800d206:	d001      	beq.n	800d20c <__sflush_r+0xac>
 800d208:	2b16      	cmp	r3, #22
 800d20a:	d11e      	bne.n	800d24a <__sflush_r+0xea>
 800d20c:	602f      	str	r7, [r5, #0]
 800d20e:	2000      	movs	r0, #0
 800d210:	e022      	b.n	800d258 <__sflush_r+0xf8>
 800d212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d216:	b21b      	sxth	r3, r3
 800d218:	e01b      	b.n	800d252 <__sflush_r+0xf2>
 800d21a:	690f      	ldr	r7, [r1, #16]
 800d21c:	2f00      	cmp	r7, #0
 800d21e:	d0f6      	beq.n	800d20e <__sflush_r+0xae>
 800d220:	0793      	lsls	r3, r2, #30
 800d222:	680e      	ldr	r6, [r1, #0]
 800d224:	bf08      	it	eq
 800d226:	694b      	ldreq	r3, [r1, #20]
 800d228:	600f      	str	r7, [r1, #0]
 800d22a:	bf18      	it	ne
 800d22c:	2300      	movne	r3, #0
 800d22e:	eba6 0807 	sub.w	r8, r6, r7
 800d232:	608b      	str	r3, [r1, #8]
 800d234:	f1b8 0f00 	cmp.w	r8, #0
 800d238:	dde9      	ble.n	800d20e <__sflush_r+0xae>
 800d23a:	6a21      	ldr	r1, [r4, #32]
 800d23c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d23e:	4643      	mov	r3, r8
 800d240:	463a      	mov	r2, r7
 800d242:	4628      	mov	r0, r5
 800d244:	47b0      	blx	r6
 800d246:	2800      	cmp	r0, #0
 800d248:	dc08      	bgt.n	800d25c <__sflush_r+0xfc>
 800d24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d24e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d252:	81a3      	strh	r3, [r4, #12]
 800d254:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d25c:	4407      	add	r7, r0
 800d25e:	eba8 0800 	sub.w	r8, r8, r0
 800d262:	e7e7      	b.n	800d234 <__sflush_r+0xd4>
 800d264:	20400001 	.word	0x20400001

0800d268 <_fflush_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	690b      	ldr	r3, [r1, #16]
 800d26c:	4605      	mov	r5, r0
 800d26e:	460c      	mov	r4, r1
 800d270:	b913      	cbnz	r3, 800d278 <_fflush_r+0x10>
 800d272:	2500      	movs	r5, #0
 800d274:	4628      	mov	r0, r5
 800d276:	bd38      	pop	{r3, r4, r5, pc}
 800d278:	b118      	cbz	r0, 800d282 <_fflush_r+0x1a>
 800d27a:	6a03      	ldr	r3, [r0, #32]
 800d27c:	b90b      	cbnz	r3, 800d282 <_fflush_r+0x1a>
 800d27e:	f7ff f89f 	bl	800c3c0 <__sinit>
 800d282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d0f3      	beq.n	800d272 <_fflush_r+0xa>
 800d28a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d28c:	07d0      	lsls	r0, r2, #31
 800d28e:	d404      	bmi.n	800d29a <_fflush_r+0x32>
 800d290:	0599      	lsls	r1, r3, #22
 800d292:	d402      	bmi.n	800d29a <_fflush_r+0x32>
 800d294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d296:	f7ff fa34 	bl	800c702 <__retarget_lock_acquire_recursive>
 800d29a:	4628      	mov	r0, r5
 800d29c:	4621      	mov	r1, r4
 800d29e:	f7ff ff5f 	bl	800d160 <__sflush_r>
 800d2a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2a4:	07da      	lsls	r2, r3, #31
 800d2a6:	4605      	mov	r5, r0
 800d2a8:	d4e4      	bmi.n	800d274 <_fflush_r+0xc>
 800d2aa:	89a3      	ldrh	r3, [r4, #12]
 800d2ac:	059b      	lsls	r3, r3, #22
 800d2ae:	d4e1      	bmi.n	800d274 <_fflush_r+0xc>
 800d2b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2b2:	f7ff fa27 	bl	800c704 <__retarget_lock_release_recursive>
 800d2b6:	e7dd      	b.n	800d274 <_fflush_r+0xc>

0800d2b8 <_putc_r>:
 800d2b8:	b570      	push	{r4, r5, r6, lr}
 800d2ba:	460d      	mov	r5, r1
 800d2bc:	4614      	mov	r4, r2
 800d2be:	4606      	mov	r6, r0
 800d2c0:	b118      	cbz	r0, 800d2ca <_putc_r+0x12>
 800d2c2:	6a03      	ldr	r3, [r0, #32]
 800d2c4:	b90b      	cbnz	r3, 800d2ca <_putc_r+0x12>
 800d2c6:	f7ff f87b 	bl	800c3c0 <__sinit>
 800d2ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2cc:	07d8      	lsls	r0, r3, #31
 800d2ce:	d405      	bmi.n	800d2dc <_putc_r+0x24>
 800d2d0:	89a3      	ldrh	r3, [r4, #12]
 800d2d2:	0599      	lsls	r1, r3, #22
 800d2d4:	d402      	bmi.n	800d2dc <_putc_r+0x24>
 800d2d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2d8:	f7ff fa13 	bl	800c702 <__retarget_lock_acquire_recursive>
 800d2dc:	68a3      	ldr	r3, [r4, #8]
 800d2de:	3b01      	subs	r3, #1
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	60a3      	str	r3, [r4, #8]
 800d2e4:	da05      	bge.n	800d2f2 <_putc_r+0x3a>
 800d2e6:	69a2      	ldr	r2, [r4, #24]
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	db12      	blt.n	800d312 <_putc_r+0x5a>
 800d2ec:	b2eb      	uxtb	r3, r5
 800d2ee:	2b0a      	cmp	r3, #10
 800d2f0:	d00f      	beq.n	800d312 <_putc_r+0x5a>
 800d2f2:	6823      	ldr	r3, [r4, #0]
 800d2f4:	1c5a      	adds	r2, r3, #1
 800d2f6:	6022      	str	r2, [r4, #0]
 800d2f8:	701d      	strb	r5, [r3, #0]
 800d2fa:	b2ed      	uxtb	r5, r5
 800d2fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2fe:	07da      	lsls	r2, r3, #31
 800d300:	d405      	bmi.n	800d30e <_putc_r+0x56>
 800d302:	89a3      	ldrh	r3, [r4, #12]
 800d304:	059b      	lsls	r3, r3, #22
 800d306:	d402      	bmi.n	800d30e <_putc_r+0x56>
 800d308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d30a:	f7ff f9fb 	bl	800c704 <__retarget_lock_release_recursive>
 800d30e:	4628      	mov	r0, r5
 800d310:	bd70      	pop	{r4, r5, r6, pc}
 800d312:	4629      	mov	r1, r5
 800d314:	4622      	mov	r2, r4
 800d316:	4630      	mov	r0, r6
 800d318:	f000 f802 	bl	800d320 <__swbuf_r>
 800d31c:	4605      	mov	r5, r0
 800d31e:	e7ed      	b.n	800d2fc <_putc_r+0x44>

0800d320 <__swbuf_r>:
 800d320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d322:	460e      	mov	r6, r1
 800d324:	4614      	mov	r4, r2
 800d326:	4605      	mov	r5, r0
 800d328:	b118      	cbz	r0, 800d332 <__swbuf_r+0x12>
 800d32a:	6a03      	ldr	r3, [r0, #32]
 800d32c:	b90b      	cbnz	r3, 800d332 <__swbuf_r+0x12>
 800d32e:	f7ff f847 	bl	800c3c0 <__sinit>
 800d332:	69a3      	ldr	r3, [r4, #24]
 800d334:	60a3      	str	r3, [r4, #8]
 800d336:	89a3      	ldrh	r3, [r4, #12]
 800d338:	071a      	lsls	r2, r3, #28
 800d33a:	d501      	bpl.n	800d340 <__swbuf_r+0x20>
 800d33c:	6923      	ldr	r3, [r4, #16]
 800d33e:	b943      	cbnz	r3, 800d352 <__swbuf_r+0x32>
 800d340:	4621      	mov	r1, r4
 800d342:	4628      	mov	r0, r5
 800d344:	f000 f82a 	bl	800d39c <__swsetup_r>
 800d348:	b118      	cbz	r0, 800d352 <__swbuf_r+0x32>
 800d34a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d34e:	4638      	mov	r0, r7
 800d350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d352:	6823      	ldr	r3, [r4, #0]
 800d354:	6922      	ldr	r2, [r4, #16]
 800d356:	1a98      	subs	r0, r3, r2
 800d358:	6963      	ldr	r3, [r4, #20]
 800d35a:	b2f6      	uxtb	r6, r6
 800d35c:	4283      	cmp	r3, r0
 800d35e:	4637      	mov	r7, r6
 800d360:	dc05      	bgt.n	800d36e <__swbuf_r+0x4e>
 800d362:	4621      	mov	r1, r4
 800d364:	4628      	mov	r0, r5
 800d366:	f7ff ff7f 	bl	800d268 <_fflush_r>
 800d36a:	2800      	cmp	r0, #0
 800d36c:	d1ed      	bne.n	800d34a <__swbuf_r+0x2a>
 800d36e:	68a3      	ldr	r3, [r4, #8]
 800d370:	3b01      	subs	r3, #1
 800d372:	60a3      	str	r3, [r4, #8]
 800d374:	6823      	ldr	r3, [r4, #0]
 800d376:	1c5a      	adds	r2, r3, #1
 800d378:	6022      	str	r2, [r4, #0]
 800d37a:	701e      	strb	r6, [r3, #0]
 800d37c:	6962      	ldr	r2, [r4, #20]
 800d37e:	1c43      	adds	r3, r0, #1
 800d380:	429a      	cmp	r2, r3
 800d382:	d004      	beq.n	800d38e <__swbuf_r+0x6e>
 800d384:	89a3      	ldrh	r3, [r4, #12]
 800d386:	07db      	lsls	r3, r3, #31
 800d388:	d5e1      	bpl.n	800d34e <__swbuf_r+0x2e>
 800d38a:	2e0a      	cmp	r6, #10
 800d38c:	d1df      	bne.n	800d34e <__swbuf_r+0x2e>
 800d38e:	4621      	mov	r1, r4
 800d390:	4628      	mov	r0, r5
 800d392:	f7ff ff69 	bl	800d268 <_fflush_r>
 800d396:	2800      	cmp	r0, #0
 800d398:	d0d9      	beq.n	800d34e <__swbuf_r+0x2e>
 800d39a:	e7d6      	b.n	800d34a <__swbuf_r+0x2a>

0800d39c <__swsetup_r>:
 800d39c:	b538      	push	{r3, r4, r5, lr}
 800d39e:	4b29      	ldr	r3, [pc, #164]	@ (800d444 <__swsetup_r+0xa8>)
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	6818      	ldr	r0, [r3, #0]
 800d3a4:	460c      	mov	r4, r1
 800d3a6:	b118      	cbz	r0, 800d3b0 <__swsetup_r+0x14>
 800d3a8:	6a03      	ldr	r3, [r0, #32]
 800d3aa:	b90b      	cbnz	r3, 800d3b0 <__swsetup_r+0x14>
 800d3ac:	f7ff f808 	bl	800c3c0 <__sinit>
 800d3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3b4:	0719      	lsls	r1, r3, #28
 800d3b6:	d422      	bmi.n	800d3fe <__swsetup_r+0x62>
 800d3b8:	06da      	lsls	r2, r3, #27
 800d3ba:	d407      	bmi.n	800d3cc <__swsetup_r+0x30>
 800d3bc:	2209      	movs	r2, #9
 800d3be:	602a      	str	r2, [r5, #0]
 800d3c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3c4:	81a3      	strh	r3, [r4, #12]
 800d3c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3ca:	e033      	b.n	800d434 <__swsetup_r+0x98>
 800d3cc:	0758      	lsls	r0, r3, #29
 800d3ce:	d512      	bpl.n	800d3f6 <__swsetup_r+0x5a>
 800d3d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d3d2:	b141      	cbz	r1, 800d3e6 <__swsetup_r+0x4a>
 800d3d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d3d8:	4299      	cmp	r1, r3
 800d3da:	d002      	beq.n	800d3e2 <__swsetup_r+0x46>
 800d3dc:	4628      	mov	r0, r5
 800d3de:	f7ff f9a1 	bl	800c724 <_free_r>
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d3e6:	89a3      	ldrh	r3, [r4, #12]
 800d3e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d3ec:	81a3      	strh	r3, [r4, #12]
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	6063      	str	r3, [r4, #4]
 800d3f2:	6923      	ldr	r3, [r4, #16]
 800d3f4:	6023      	str	r3, [r4, #0]
 800d3f6:	89a3      	ldrh	r3, [r4, #12]
 800d3f8:	f043 0308 	orr.w	r3, r3, #8
 800d3fc:	81a3      	strh	r3, [r4, #12]
 800d3fe:	6923      	ldr	r3, [r4, #16]
 800d400:	b94b      	cbnz	r3, 800d416 <__swsetup_r+0x7a>
 800d402:	89a3      	ldrh	r3, [r4, #12]
 800d404:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d40c:	d003      	beq.n	800d416 <__swsetup_r+0x7a>
 800d40e:	4621      	mov	r1, r4
 800d410:	4628      	mov	r0, r5
 800d412:	f000 f897 	bl	800d544 <__smakebuf_r>
 800d416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d41a:	f013 0201 	ands.w	r2, r3, #1
 800d41e:	d00a      	beq.n	800d436 <__swsetup_r+0x9a>
 800d420:	2200      	movs	r2, #0
 800d422:	60a2      	str	r2, [r4, #8]
 800d424:	6962      	ldr	r2, [r4, #20]
 800d426:	4252      	negs	r2, r2
 800d428:	61a2      	str	r2, [r4, #24]
 800d42a:	6922      	ldr	r2, [r4, #16]
 800d42c:	b942      	cbnz	r2, 800d440 <__swsetup_r+0xa4>
 800d42e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d432:	d1c5      	bne.n	800d3c0 <__swsetup_r+0x24>
 800d434:	bd38      	pop	{r3, r4, r5, pc}
 800d436:	0799      	lsls	r1, r3, #30
 800d438:	bf58      	it	pl
 800d43a:	6962      	ldrpl	r2, [r4, #20]
 800d43c:	60a2      	str	r2, [r4, #8]
 800d43e:	e7f4      	b.n	800d42a <__swsetup_r+0x8e>
 800d440:	2000      	movs	r0, #0
 800d442:	e7f7      	b.n	800d434 <__swsetup_r+0x98>
 800d444:	200002b8 	.word	0x200002b8

0800d448 <memmove>:
 800d448:	4288      	cmp	r0, r1
 800d44a:	b510      	push	{r4, lr}
 800d44c:	eb01 0402 	add.w	r4, r1, r2
 800d450:	d902      	bls.n	800d458 <memmove+0x10>
 800d452:	4284      	cmp	r4, r0
 800d454:	4623      	mov	r3, r4
 800d456:	d807      	bhi.n	800d468 <memmove+0x20>
 800d458:	1e43      	subs	r3, r0, #1
 800d45a:	42a1      	cmp	r1, r4
 800d45c:	d008      	beq.n	800d470 <memmove+0x28>
 800d45e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d462:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d466:	e7f8      	b.n	800d45a <memmove+0x12>
 800d468:	4402      	add	r2, r0
 800d46a:	4601      	mov	r1, r0
 800d46c:	428a      	cmp	r2, r1
 800d46e:	d100      	bne.n	800d472 <memmove+0x2a>
 800d470:	bd10      	pop	{r4, pc}
 800d472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d476:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d47a:	e7f7      	b.n	800d46c <memmove+0x24>

0800d47c <_sbrk_r>:
 800d47c:	b538      	push	{r3, r4, r5, lr}
 800d47e:	4d06      	ldr	r5, [pc, #24]	@ (800d498 <_sbrk_r+0x1c>)
 800d480:	2300      	movs	r3, #0
 800d482:	4604      	mov	r4, r0
 800d484:	4608      	mov	r0, r1
 800d486:	602b      	str	r3, [r5, #0]
 800d488:	f7f3 fae8 	bl	8000a5c <_sbrk>
 800d48c:	1c43      	adds	r3, r0, #1
 800d48e:	d102      	bne.n	800d496 <_sbrk_r+0x1a>
 800d490:	682b      	ldr	r3, [r5, #0]
 800d492:	b103      	cbz	r3, 800d496 <_sbrk_r+0x1a>
 800d494:	6023      	str	r3, [r4, #0]
 800d496:	bd38      	pop	{r3, r4, r5, pc}
 800d498:	2000de08 	.word	0x2000de08

0800d49c <_realloc_r>:
 800d49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a0:	4607      	mov	r7, r0
 800d4a2:	4614      	mov	r4, r2
 800d4a4:	460d      	mov	r5, r1
 800d4a6:	b921      	cbnz	r1, 800d4b2 <_realloc_r+0x16>
 800d4a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ac:	4611      	mov	r1, r2
 800d4ae:	f7ff b9a5 	b.w	800c7fc <_malloc_r>
 800d4b2:	b92a      	cbnz	r2, 800d4c0 <_realloc_r+0x24>
 800d4b4:	f7ff f936 	bl	800c724 <_free_r>
 800d4b8:	4625      	mov	r5, r4
 800d4ba:	4628      	mov	r0, r5
 800d4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c0:	f000 f89e 	bl	800d600 <_malloc_usable_size_r>
 800d4c4:	4284      	cmp	r4, r0
 800d4c6:	4606      	mov	r6, r0
 800d4c8:	d802      	bhi.n	800d4d0 <_realloc_r+0x34>
 800d4ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d4ce:	d8f4      	bhi.n	800d4ba <_realloc_r+0x1e>
 800d4d0:	4621      	mov	r1, r4
 800d4d2:	4638      	mov	r0, r7
 800d4d4:	f7ff f992 	bl	800c7fc <_malloc_r>
 800d4d8:	4680      	mov	r8, r0
 800d4da:	b908      	cbnz	r0, 800d4e0 <_realloc_r+0x44>
 800d4dc:	4645      	mov	r5, r8
 800d4de:	e7ec      	b.n	800d4ba <_realloc_r+0x1e>
 800d4e0:	42b4      	cmp	r4, r6
 800d4e2:	4622      	mov	r2, r4
 800d4e4:	4629      	mov	r1, r5
 800d4e6:	bf28      	it	cs
 800d4e8:	4632      	movcs	r2, r6
 800d4ea:	f7ff f90c 	bl	800c706 <memcpy>
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	4638      	mov	r0, r7
 800d4f2:	f7ff f917 	bl	800c724 <_free_r>
 800d4f6:	e7f1      	b.n	800d4dc <_realloc_r+0x40>

0800d4f8 <__swhatbuf_r>:
 800d4f8:	b570      	push	{r4, r5, r6, lr}
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d500:	2900      	cmp	r1, #0
 800d502:	b096      	sub	sp, #88	@ 0x58
 800d504:	4615      	mov	r5, r2
 800d506:	461e      	mov	r6, r3
 800d508:	da0d      	bge.n	800d526 <__swhatbuf_r+0x2e>
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d510:	f04f 0100 	mov.w	r1, #0
 800d514:	bf14      	ite	ne
 800d516:	2340      	movne	r3, #64	@ 0x40
 800d518:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d51c:	2000      	movs	r0, #0
 800d51e:	6031      	str	r1, [r6, #0]
 800d520:	602b      	str	r3, [r5, #0]
 800d522:	b016      	add	sp, #88	@ 0x58
 800d524:	bd70      	pop	{r4, r5, r6, pc}
 800d526:	466a      	mov	r2, sp
 800d528:	f000 f848 	bl	800d5bc <_fstat_r>
 800d52c:	2800      	cmp	r0, #0
 800d52e:	dbec      	blt.n	800d50a <__swhatbuf_r+0x12>
 800d530:	9901      	ldr	r1, [sp, #4]
 800d532:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d536:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d53a:	4259      	negs	r1, r3
 800d53c:	4159      	adcs	r1, r3
 800d53e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d542:	e7eb      	b.n	800d51c <__swhatbuf_r+0x24>

0800d544 <__smakebuf_r>:
 800d544:	898b      	ldrh	r3, [r1, #12]
 800d546:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d548:	079d      	lsls	r5, r3, #30
 800d54a:	4606      	mov	r6, r0
 800d54c:	460c      	mov	r4, r1
 800d54e:	d507      	bpl.n	800d560 <__smakebuf_r+0x1c>
 800d550:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d554:	6023      	str	r3, [r4, #0]
 800d556:	6123      	str	r3, [r4, #16]
 800d558:	2301      	movs	r3, #1
 800d55a:	6163      	str	r3, [r4, #20]
 800d55c:	b003      	add	sp, #12
 800d55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d560:	ab01      	add	r3, sp, #4
 800d562:	466a      	mov	r2, sp
 800d564:	f7ff ffc8 	bl	800d4f8 <__swhatbuf_r>
 800d568:	9f00      	ldr	r7, [sp, #0]
 800d56a:	4605      	mov	r5, r0
 800d56c:	4639      	mov	r1, r7
 800d56e:	4630      	mov	r0, r6
 800d570:	f7ff f944 	bl	800c7fc <_malloc_r>
 800d574:	b948      	cbnz	r0, 800d58a <__smakebuf_r+0x46>
 800d576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d57a:	059a      	lsls	r2, r3, #22
 800d57c:	d4ee      	bmi.n	800d55c <__smakebuf_r+0x18>
 800d57e:	f023 0303 	bic.w	r3, r3, #3
 800d582:	f043 0302 	orr.w	r3, r3, #2
 800d586:	81a3      	strh	r3, [r4, #12]
 800d588:	e7e2      	b.n	800d550 <__smakebuf_r+0xc>
 800d58a:	89a3      	ldrh	r3, [r4, #12]
 800d58c:	6020      	str	r0, [r4, #0]
 800d58e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d592:	81a3      	strh	r3, [r4, #12]
 800d594:	9b01      	ldr	r3, [sp, #4]
 800d596:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d59a:	b15b      	cbz	r3, 800d5b4 <__smakebuf_r+0x70>
 800d59c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	f000 f81d 	bl	800d5e0 <_isatty_r>
 800d5a6:	b128      	cbz	r0, 800d5b4 <__smakebuf_r+0x70>
 800d5a8:	89a3      	ldrh	r3, [r4, #12]
 800d5aa:	f023 0303 	bic.w	r3, r3, #3
 800d5ae:	f043 0301 	orr.w	r3, r3, #1
 800d5b2:	81a3      	strh	r3, [r4, #12]
 800d5b4:	89a3      	ldrh	r3, [r4, #12]
 800d5b6:	431d      	orrs	r5, r3
 800d5b8:	81a5      	strh	r5, [r4, #12]
 800d5ba:	e7cf      	b.n	800d55c <__smakebuf_r+0x18>

0800d5bc <_fstat_r>:
 800d5bc:	b538      	push	{r3, r4, r5, lr}
 800d5be:	4d07      	ldr	r5, [pc, #28]	@ (800d5dc <_fstat_r+0x20>)
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	4608      	mov	r0, r1
 800d5c6:	4611      	mov	r1, r2
 800d5c8:	602b      	str	r3, [r5, #0]
 800d5ca:	f7f3 fa1e 	bl	8000a0a <_fstat>
 800d5ce:	1c43      	adds	r3, r0, #1
 800d5d0:	d102      	bne.n	800d5d8 <_fstat_r+0x1c>
 800d5d2:	682b      	ldr	r3, [r5, #0]
 800d5d4:	b103      	cbz	r3, 800d5d8 <_fstat_r+0x1c>
 800d5d6:	6023      	str	r3, [r4, #0]
 800d5d8:	bd38      	pop	{r3, r4, r5, pc}
 800d5da:	bf00      	nop
 800d5dc:	2000de08 	.word	0x2000de08

0800d5e0 <_isatty_r>:
 800d5e0:	b538      	push	{r3, r4, r5, lr}
 800d5e2:	4d06      	ldr	r5, [pc, #24]	@ (800d5fc <_isatty_r+0x1c>)
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	4604      	mov	r4, r0
 800d5e8:	4608      	mov	r0, r1
 800d5ea:	602b      	str	r3, [r5, #0]
 800d5ec:	f7f3 fa1d 	bl	8000a2a <_isatty>
 800d5f0:	1c43      	adds	r3, r0, #1
 800d5f2:	d102      	bne.n	800d5fa <_isatty_r+0x1a>
 800d5f4:	682b      	ldr	r3, [r5, #0]
 800d5f6:	b103      	cbz	r3, 800d5fa <_isatty_r+0x1a>
 800d5f8:	6023      	str	r3, [r4, #0]
 800d5fa:	bd38      	pop	{r3, r4, r5, pc}
 800d5fc:	2000de08 	.word	0x2000de08

0800d600 <_malloc_usable_size_r>:
 800d600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d604:	1f18      	subs	r0, r3, #4
 800d606:	2b00      	cmp	r3, #0
 800d608:	bfbc      	itt	lt
 800d60a:	580b      	ldrlt	r3, [r1, r0]
 800d60c:	18c0      	addlt	r0, r0, r3
 800d60e:	4770      	bx	lr

0800d610 <_init>:
 800d610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d612:	bf00      	nop
 800d614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d616:	bc08      	pop	{r3}
 800d618:	469e      	mov	lr, r3
 800d61a:	4770      	bx	lr

0800d61c <_fini>:
 800d61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d61e:	bf00      	nop
 800d620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d622:	bc08      	pop	{r3}
 800d624:	469e      	mov	lr, r3
 800d626:	4770      	bx	lr
