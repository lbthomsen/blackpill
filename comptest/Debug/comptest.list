
comptest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800d590  0800d590  0001d590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6f8  0800d6f8  00020308  2**0
                  CONTENTS
  4 .ARM          00000008  0800d6f8  0800d6f8  0001d6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d700  0800d700  00020308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d700  0800d700  0001d700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d704  0800d704  0001d704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  0800d708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db10  20000308  0800da10  00020308  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000de18  0800da10  0002de18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022fbd  00000000  00000000  0002037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005cb3  00000000  00000000  00043338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c50  00000000  00000000  00048ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001568  00000000  00000000  0004ac40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e190  00000000  00000000  0004c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023891  00000000  00000000  0006a338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d500  00000000  00000000  0008dbc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d94  00000000  00000000  0012b0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00132e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000308 	.word	0x20000308
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d578 	.word	0x0800d578

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000030c 	.word	0x2000030c
 80001dc:	0800d578 	.word	0x0800d578

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(startMainTask, NULL, &mainTask_attributes);
 8000580:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <MX_FREERTOS_Init+0x28>)
 8000582:	2100      	movs	r1, #0
 8000584:	4808      	ldr	r0, [pc, #32]	; (80005a8 <MX_FREERTOS_Init+0x2c>)
 8000586:	f009 f8fc 	bl	8009782 <osThreadNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a07      	ldr	r2, [pc, #28]	; (80005ac <MX_FREERTOS_Init+0x30>)
 800058e:	6013      	str	r3, [r2, #0]

  /* creation of tickTask */
  tickTaskHandle = osThreadNew(startTickTask, NULL, &tickTask_attributes);
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <MX_FREERTOS_Init+0x34>)
 8000592:	2100      	movs	r1, #0
 8000594:	4807      	ldr	r0, [pc, #28]	; (80005b4 <MX_FREERTOS_Init+0x38>)
 8000596:	f009 f8f4 	bl	8009782 <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <MX_FREERTOS_Init+0x3c>)
 800059e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	0800d640 	.word	0x0800d640
 80005a8:	080005bd 	.word	0x080005bd
 80005ac:	20000324 	.word	0x20000324
 80005b0:	0800d664 	.word	0x0800d664
 80005b4:	080005cd 	.word	0x080005cd
 80005b8:	20000328 	.word	0x20000328

080005bc <startMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startMainTask */
void startMainTask(void *argument)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMainTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f009 f96e 	bl	80098a6 <osDelay>
 80005ca:	e7fb      	b.n	80005c4 <startMainTask+0x8>

080005cc <startTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTickTask */
void startTickTask(void *argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTickTask */
  /* Infinite loop */
  for(;;)
  {
	DBG("Tick %lu", osKernelGetTickCount() / 1000);
 80005d4:	f009 f8c0 	bl	8009758 <osKernelGetTickCount>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a08      	ldr	r2, [pc, #32]	; (80005fc <startTickTask+0x30>)
 80005dc:	fba2 2303 	umull	r2, r3, r2, r3
 80005e0:	099b      	lsrs	r3, r3, #6
 80005e2:	4619      	mov	r1, r3
 80005e4:	4806      	ldr	r0, [pc, #24]	; (8000600 <startTickTask+0x34>)
 80005e6:	f00b fed3 	bl	800c390 <iprintf>
 80005ea:	200a      	movs	r0, #10
 80005ec:	f00b fee2 	bl	800c3b4 <putchar>
    osDelay(1000);
 80005f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f4:	f009 f957 	bl	80098a6 <osDelay>
  {
 80005f8:	e7ec      	b.n	80005d4 <startTickTask+0x8>
 80005fa:	bf00      	nop
 80005fc:	10624dd3 	.word	0x10624dd3
 8000600:	0800d5a8 	.word	0x0800d5a8

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <MX_GPIO_Init+0x9c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a1f      	ldr	r2, [pc, #124]	; (80006a0 <MX_GPIO_Init+0x9c>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_GPIO_Init+0x9c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_GPIO_Init+0x9c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <MX_GPIO_Init+0x9c>)
 8000640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <MX_GPIO_Init+0x9c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_GPIO_Init+0x9c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <MX_GPIO_Init+0x9c>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_GPIO_Init+0x9c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000674:	480b      	ldr	r0, [pc, #44]	; (80006a4 <MX_GPIO_Init+0xa0>)
 8000676:	f000 fd93 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800067a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800067e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000680:	2311      	movs	r3, #17
 8000682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4619      	mov	r1, r3
 8000692:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0xa0>)
 8000694:	f000 fc00 	bl	8000e98 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020800 	.word	0x40020800

080006a8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
    CDC_Transmit(0, (uint8_t *)ptr, len);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	461a      	mov	r2, r3
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	2000      	movs	r0, #0
 80006be:	f004 fb29 	bl	8004d14 <CDC_Transmit>
    return len;
 80006c2:	687b      	ldr	r3, [r7, #4]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d2:	f000 fa99 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d6:	f000 f823 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006da:	f7ff ff93 	bl	8000604 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006de:	f000 f9e7 	bl	8000ab0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80006e2:	f004 f9b1 	bl	8004a48 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80006e6:	f008 ffed 	bl	80096c4 <osKernelInitialize>
  MX_FREERTOS_Init();
 80006ea:	f7ff ff47 	bl	800057c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80006ee:	f009 f80d 	bl	800970c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0, last_blink = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]

  while (1)
  {

	  now = HAL_GetTick();
 80006fa:	f000 fabb 	bl	8000c74 <HAL_GetTick>
 80006fe:	6038      	str	r0, [r7, #0]

	  if (now - last_blink >= 500) {
 8000700:	683a      	ldr	r2, [r7, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800070a:	d3f6      	bcc.n	80006fa <main+0x2e>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800070c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <main+0x50>)
 8000712:	f000 fd5e 	bl	80011d2 <HAL_GPIO_TogglePin>

		  last_blink = now;
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	607b      	str	r3, [r7, #4]
	  now = HAL_GetTick();
 800071a:	e7ee      	b.n	80006fa <main+0x2e>
 800071c:	40020800 	.word	0x40020800

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	; 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2230      	movs	r2, #48	; 0x30
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f00b febf 	bl	800c4b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <SystemClock_Config+0xc8>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a26      	ldr	r2, [pc, #152]	; (80007e8 <SystemClock_Config+0xc8>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <SystemClock_Config+0xc8>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <SystemClock_Config+0xcc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a20      	ldr	r2, [pc, #128]	; (80007ec <SystemClock_Config+0xcc>)
 800076a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <SystemClock_Config+0xcc>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077c:	2301      	movs	r3, #1
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000790:	2319      	movs	r3, #25
 8000792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000794:	23c0      	movs	r3, #192	; 0xc0
 8000796:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800079c:	2304      	movs	r3, #4
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fedf 	bl	8002568 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b0:	f000 f830 	bl	8000814 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2302      	movs	r3, #2
 80007ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2103      	movs	r1, #3
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 f941 	bl	8002a58 <HAL_RCC_ClockConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007dc:	f000 f81a 	bl	8000814 <Error_Handler>
  }
}
 80007e0:	bf00      	nop
 80007e2:	3750      	adds	r7, #80	; 0x50
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d101      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000802:	f000 fa23 	bl	8000c4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40014800 	.word	0x40014800

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_MspInit+0x54>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	4a11      	ldr	r2, [pc, #68]	; (8000874 <HAL_MspInit+0x54>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000834:	6453      	str	r3, [r2, #68]	; 0x44
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_MspInit+0x54>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_MspInit+0x54>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <HAL_MspInit+0x54>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_MspInit+0x54>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	210f      	movs	r1, #15
 8000862:	f06f 0001 	mvn.w	r0, #1
 8000866:	f000 faed 	bl	8000e44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	; 0x30
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000888:	2200      	movs	r2, #0
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	201a      	movs	r0, #26
 800088e:	f000 fad9 	bl	8000e44 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000892:	201a      	movs	r0, #26
 8000894:	f000 faf2 	bl	8000e7c <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <HAL_InitTick+0xa0>)
 800089e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a0:	4a1d      	ldr	r2, [pc, #116]	; (8000918 <HAL_InitTick+0xa0>)
 80008a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a6:	6453      	str	r3, [r2, #68]	; 0x44
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <HAL_InitTick+0xa0>)
 80008aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008b4:	f107 0210 	add.w	r2, r7, #16
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4611      	mov	r1, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 fa96 	bl	8002df0 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008c4:	f002 fa80 	bl	8002dc8 <HAL_RCC_GetPCLK2Freq>
 80008c8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008cc:	4a13      	ldr	r2, [pc, #76]	; (800091c <HAL_InitTick+0xa4>)
 80008ce:	fba2 2303 	umull	r2, r3, r2, r3
 80008d2:	0c9b      	lsrs	r3, r3, #18
 80008d4:	3b01      	subs	r3, #1
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <HAL_InitTick+0xa8>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <HAL_InitTick+0xac>)
 80008dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_InitTick+0xa8>)
 80008e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e4:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80008e6:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <HAL_InitTick+0xa8>)
 80008e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ea:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_InitTick+0xa8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <HAL_InitTick+0xa8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <HAL_InitTick+0xa8>)
 80008fa:	f002 faab 	bl	8002e54 <HAL_TIM_Base_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d104      	bne.n	800090e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000904:	4806      	ldr	r0, [pc, #24]	; (8000920 <HAL_InitTick+0xa8>)
 8000906:	f002 faff 	bl	8002f08 <HAL_TIM_Base_Start_IT>
 800090a:	4603      	mov	r3, r0
 800090c:	e000      	b.n	8000910 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
}
 8000910:	4618      	mov	r0, r3
 8000912:	3730      	adds	r7, #48	; 0x30
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	431bde83 	.word	0x431bde83
 8000920:	2000032c 	.word	0x2000032c
 8000924:	40014800 	.word	0x40014800

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800092c:	e7fe      	b.n	800092c <NMI_Handler+0x4>

0800092e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <MemManage_Handler+0x4>

0800093a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <UsageFault_Handler+0x4>

08000946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800095a:	f002 fb37 	bl	8002fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000032c 	.word	0x2000032c

08000968 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <OTG_FS_IRQHandler+0x10>)
 800096e:	f000 fd9a 	bl	80014a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000378 	.word	0x20000378

0800097c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	e00a      	b.n	80009a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800098e:	f3af 8000 	nop.w
 8000992:	4601      	mov	r1, r0
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	60ba      	str	r2, [r7, #8]
 800099a:	b2ca      	uxtb	r2, r1
 800099c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	3301      	adds	r3, #1
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697a      	ldr	r2, [r7, #20]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	dbf0      	blt.n	800098e <_read+0x12>
	}

return len;
 80009ac:	687b      	ldr	r3, [r7, #4]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
	return -1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009de:	605a      	str	r2, [r3, #4]
	return 0;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <_isatty>:

int _isatty(int file)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
	return 1;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <_sbrk+0x5c>)
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <_sbrk+0x60>)
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <_sbrk+0x64>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <_sbrk+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d207      	bcs.n	8000a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a50:	f00b fdd4 	bl	800c5fc <__errno>
 8000a54:	4603      	mov	r3, r0
 8000a56:	220c      	movs	r2, #12
 8000a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a5e:	e009      	b.n	8000a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <_sbrk+0x64>)
 8000a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20020000 	.word	0x20020000
 8000a80:	00000400 	.word	0x00000400
 8000a84:	20000374 	.word	0x20000374
 8000a88:	2000de18 	.word	0x2000de18

08000a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <SystemInit+0x20>)
 8000a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a96:	4a05      	ldr	r2, [pc, #20]	; (8000aac <SystemInit+0x20>)
 8000a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000aba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abe:	2204      	movs	r2, #4
 8000ac0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af4:	f000 fb87 	bl	8001206 <HAL_PCD_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000afe:	f7ff fe89 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000378 	.word	0x20000378

08000b0c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b2c:	d13a      	bne.n	8000ba4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <HAL_PCD_MspInit+0xa0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a1d      	ldr	r2, [pc, #116]	; (8000bac <HAL_PCD_MspInit+0xa0>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <HAL_PCD_MspInit+0xa0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b4a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b5c:	230a      	movs	r3, #10
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <HAL_PCD_MspInit+0xa4>)
 8000b68:	f000 f996 	bl	8000e98 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_PCD_MspInit+0xa0>)
 8000b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <HAL_PCD_MspInit+0xa0>)
 8000b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b76:	6353      	str	r3, [r2, #52]	; 0x34
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_PCD_MspInit+0xa0>)
 8000b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_PCD_MspInit+0xa0>)
 8000b82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b86:	6453      	str	r3, [r2, #68]	; 0x44
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_PCD_MspInit+0xa0>)
 8000b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2105      	movs	r1, #5
 8000b98:	2043      	movs	r0, #67	; 0x43
 8000b9a:	f000 f953 	bl	8000e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000b9e:	2043      	movs	r0, #67	; 0x43
 8000ba0:	f000 f96c 	bl	8000e7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	; 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd0:	4c0b      	ldr	r4, [pc, #44]	; (8000c00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bde:	f7ff ff55 	bl	8000a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f00b fd11 	bl	800c608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be6:	f7ff fd71 	bl	80006cc <main>
  bx  lr    
 8000bea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8000bf8:	0800d708 	.word	0x0800d708
  ldr r2, =_sbss
 8000bfc:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8000c00:	2000de18 	.word	0x2000de18

08000c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC_IRQHandler>
	...

08000c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <HAL_Init+0x40>)
 8000c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_Init+0x40>)
 8000c1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <HAL_Init+0x40>)
 8000c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 f8fc 	bl	8000e2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c36:	200f      	movs	r0, #15
 8000c38:	f7ff fe1e 	bl	8000878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3c:	f7ff fdf0 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023c00 	.word	0x40023c00

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000780 	.word	0x20000780

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000780 	.word	0x20000780

08000c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff ffee 	bl	8000c74 <HAL_GetTick>
 8000c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ca4:	d005      	beq.n	8000cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_Delay+0x44>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cb2:	bf00      	nop
 8000cb4:	f7ff ffde 	bl	8000c74 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d8f7      	bhi.n	8000cb4 <HAL_Delay+0x28>
  {
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	; (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff4c 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e56:	f7ff ff61 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000e5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f7ff ffb1 	bl	8000dc8 <NVIC_EncodePriority>
 8000e66:	4602      	mov	r2, r0
 8000e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff80 	bl	8000d74 <__NVIC_SetPriority>
}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff54 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	e159      	b.n	8001168 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 8148 	bne.w	8001162 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d005      	beq.n	8000eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80a2 	beq.w	8001162 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b57      	ldr	r3, [pc, #348]	; (8001180 <HAL_GPIO_Init+0x2e8>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a56      	ldr	r2, [pc, #344]	; (8001180 <HAL_GPIO_Init+0x2e8>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b54      	ldr	r3, [pc, #336]	; (8001180 <HAL_GPIO_Init+0x2e8>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	4a52      	ldr	r2, [pc, #328]	; (8001184 <HAL_GPIO_Init+0x2ec>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a49      	ldr	r2, [pc, #292]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d019      	beq.n	800109a <HAL_GPIO_Init+0x202>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a48      	ldr	r2, [pc, #288]	; (800118c <HAL_GPIO_Init+0x2f4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d013      	beq.n	8001096 <HAL_GPIO_Init+0x1fe>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a47      	ldr	r2, [pc, #284]	; (8001190 <HAL_GPIO_Init+0x2f8>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d00d      	beq.n	8001092 <HAL_GPIO_Init+0x1fa>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a46      	ldr	r2, [pc, #280]	; (8001194 <HAL_GPIO_Init+0x2fc>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d007      	beq.n	800108e <HAL_GPIO_Init+0x1f6>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a45      	ldr	r2, [pc, #276]	; (8001198 <HAL_GPIO_Init+0x300>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_GPIO_Init+0x1f2>
 8001086:	2304      	movs	r3, #4
 8001088:	e008      	b.n	800109c <HAL_GPIO_Init+0x204>
 800108a:	2307      	movs	r3, #7
 800108c:	e006      	b.n	800109c <HAL_GPIO_Init+0x204>
 800108e:	2303      	movs	r3, #3
 8001090:	e004      	b.n	800109c <HAL_GPIO_Init+0x204>
 8001092:	2302      	movs	r3, #2
 8001094:	e002      	b.n	800109c <HAL_GPIO_Init+0x204>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <HAL_GPIO_Init+0x204>
 800109a:	2300      	movs	r3, #0
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	f002 0203 	and.w	r2, r2, #3
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	4093      	lsls	r3, r2
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ac:	4935      	ldr	r1, [pc, #212]	; (8001184 <HAL_GPIO_Init+0x2ec>)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3302      	adds	r3, #2
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ba:	4b38      	ldr	r3, [pc, #224]	; (800119c <HAL_GPIO_Init+0x304>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010de:	4a2f      	ldr	r2, [pc, #188]	; (800119c <HAL_GPIO_Init+0x304>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <HAL_GPIO_Init+0x304>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001108:	4a24      	ldr	r2, [pc, #144]	; (800119c <HAL_GPIO_Init+0x304>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <HAL_GPIO_Init+0x304>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001132:	4a1a      	ldr	r2, [pc, #104]	; (800119c <HAL_GPIO_Init+0x304>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_GPIO_Init+0x304>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800115c:	4a0f      	ldr	r2, [pc, #60]	; (800119c <HAL_GPIO_Init+0x304>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3301      	adds	r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	2b0f      	cmp	r3, #15
 800116c:	f67f aea2 	bls.w	8000eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40013800 	.word	0x40013800
 8001188:	40020000 	.word	0x40020000
 800118c:	40020400 	.word	0x40020400
 8001190:	40020800 	.word	0x40020800
 8001194:	40020c00 	.word	0x40020c00
 8001198:	40021000 	.word	0x40021000
 800119c:	40013c00 	.word	0x40013c00

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011bc:	e003      	b.n	80011c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	041a      	lsls	r2, r3, #16
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b085      	sub	sp, #20
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e4:	887a      	ldrh	r2, [r7, #2]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4013      	ands	r3, r2
 80011ea:	041a      	lsls	r2, r3, #16
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	400b      	ands	r3, r1
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	619a      	str	r2, [r3, #24]
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001208:	b08f      	sub	sp, #60	; 0x3c
 800120a:	af0a      	add	r7, sp, #40	; 0x28
 800120c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e10f      	b.n	8001438 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d106      	bne.n	8001238 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fc6a 	bl	8000b0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2203      	movs	r2, #3
 800123c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f002 f991 	bl	800357e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	687e      	ldr	r6, [r7, #4]
 8001264:	466d      	mov	r5, sp
 8001266:	f106 0410 	add.w	r4, r6, #16
 800126a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800126e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001272:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001276:	e885 0003 	stmia.w	r5, {r0, r1}
 800127a:	1d33      	adds	r3, r6, #4
 800127c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800127e:	6838      	ldr	r0, [r7, #0]
 8001280:	f002 f868 	bl	8003354 <USB_CoreInit>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2202      	movs	r2, #2
 800128e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e0d0      	b.n	8001438 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f002 f97f 	bl	80035a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e04a      	b.n	800133e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	1a9b      	subs	r3, r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	333d      	adds	r3, #61	; 0x3d
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	1a9b      	subs	r3, r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	333c      	adds	r3, #60	; 0x3c
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	b298      	uxth	r0, r3
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	1a9b      	subs	r3, r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	3342      	adds	r3, #66	; 0x42
 80012e4:	4602      	mov	r2, r0
 80012e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	1a9b      	subs	r3, r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	333f      	adds	r3, #63	; 0x3f
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	3344      	adds	r3, #68	; 0x44
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	1a9b      	subs	r3, r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	3348      	adds	r3, #72	; 0x48
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	1a9b      	subs	r3, r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	3350      	adds	r3, #80	; 0x50
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	3301      	adds	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	429a      	cmp	r2, r3
 8001346:	d3af      	bcc.n	80012a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	e044      	b.n	80013d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	1a9b      	subs	r3, r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	1a9b      	subs	r3, r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	1a9b      	subs	r3, r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013a6:	7bfa      	ldrb	r2, [r7, #15]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	1a9b      	subs	r3, r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	1a9b      	subs	r3, r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	3301      	adds	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d3b5      	bcc.n	800134e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	687e      	ldr	r6, [r7, #4]
 80013ea:	466d      	mov	r5, sp
 80013ec:	f106 0410 	add.w	r4, r6, #16
 80013f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001400:	1d33      	adds	r3, r6, #4
 8001402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001404:	6838      	ldr	r0, [r7, #0]
 8001406:	f002 f917 	bl	8003638 <USB_DevInit>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2202      	movs	r2, #2
 8001414:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e00d      	b.n	8001438 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f003 f993 	bl	800475c <USB_DevDisconnect>

  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001440 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_PCD_Start+0x1c>
 8001458:	2302      	movs	r3, #2
 800145a:	e020      	b.n	800149e <HAL_PCD_Start+0x5e>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	2b01      	cmp	r3, #1
 800146a:	d109      	bne.n	8001480 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001470:	2b01      	cmp	r3, #1
 8001472:	d005      	beq.n	8001480 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001478:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f002 f869 	bl	800355c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f003 f943 	bl	800471a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014a6:	b590      	push	{r4, r7, lr}
 80014a8:	b08d      	sub	sp, #52	; 0x34
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 fa01 	bl	80048c4 <USB_GetMode>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f040 839d 	bne.w	8001c04 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f003 f965 	bl	800479e <USB_ReadInterrupts>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 8393 	beq.w	8001c02 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 f95c 	bl	800479e <USB_ReadInterrupts>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d107      	bne.n	8001500 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	695a      	ldr	r2, [r3, #20]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f002 0202 	and.w	r2, r2, #2
 80014fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f003 f94a 	bl	800479e <USB_ReadInterrupts>
 800150a:	4603      	mov	r3, r0
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	2b10      	cmp	r3, #16
 8001512:	d161      	bne.n	80015d8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699a      	ldr	r2, [r3, #24]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0210 	bic.w	r2, r2, #16
 8001522:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	f003 020f 	and.w	r2, r3, #15
 8001530:	4613      	mov	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	1a9b      	subs	r3, r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	3304      	adds	r3, #4
 8001542:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	0c5b      	lsrs	r3, r3, #17
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	2b02      	cmp	r3, #2
 800154e:	d124      	bne.n	800159a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d035      	beq.n	80015c8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800156a:	b29b      	uxth	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	6a38      	ldr	r0, [r7, #32]
 8001570:	f002 ff81 	bl	8004476 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001580:	441a      	add	r2, r3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	699a      	ldr	r2, [r3, #24]
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001592:	441a      	add	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	619a      	str	r2, [r3, #24]
 8001598:	e016      	b.n	80015c8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	0c5b      	lsrs	r3, r3, #17
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d110      	bne.n	80015c8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80015ac:	2208      	movs	r2, #8
 80015ae:	4619      	mov	r1, r3
 80015b0:	6a38      	ldr	r0, [r7, #32]
 80015b2:	f002 ff60 	bl	8004476 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	699a      	ldr	r2, [r3, #24]
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c2:	441a      	add	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699a      	ldr	r2, [r3, #24]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0210 	orr.w	r2, r2, #16
 80015d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 f8de 	bl	800479e <USB_ReadInterrupts>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015ec:	d16e      	bne.n	80016cc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 f8e4 	bl	80047c4 <USB_ReadDevAllOutEpInterrupt>
 80015fc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80015fe:	e062      	b.n	80016c6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d057      	beq.n	80016ba <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f003 f909 	bl	800482c <USB_ReadDevOutEPInterrupt>
 800161a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00c      	beq.n	8001640 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	015a      	lsls	r2, r3, #5
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	4413      	add	r3, r2
 800162e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001632:	461a      	mov	r2, r3
 8001634:	2301      	movs	r3, #1
 8001636:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 fdde 	bl	80021fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00c      	beq.n	8001664 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	015a      	lsls	r2, r3, #5
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	4413      	add	r3, r2
 8001652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001656:	461a      	mov	r2, r3
 8001658:	2308      	movs	r3, #8
 800165a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800165c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fed8 	bl	8002414 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	2b00      	cmp	r3, #0
 800166c:	d008      	beq.n	8001680 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	015a      	lsls	r2, r3, #5
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	4413      	add	r3, r2
 8001676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800167a:	461a      	mov	r2, r3
 800167c:	2310      	movs	r3, #16
 800167e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f003 0320 	and.w	r3, r3, #32
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	015a      	lsls	r2, r3, #5
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001696:	461a      	mov	r2, r3
 8001698:	2320      	movs	r3, #32
 800169a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	015a      	lsls	r2, r3, #5
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	4413      	add	r3, r2
 80016ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016b2:	461a      	mov	r2, r3
 80016b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	3301      	adds	r3, #1
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c2:	085b      	lsrs	r3, r3, #1
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d199      	bne.n	8001600 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f003 f864 	bl	800479e <USB_ReadInterrupts>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016e0:	f040 80c0 	bne.w	8001864 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 f885 	bl	80047f8 <USB_ReadDevAllInEpInterrupt>
 80016ee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80016f4:	e0b2      	b.n	800185c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 80a7 	beq.w	8001850 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f003 f8ab 	bl	8004868 <USB_ReadDevInEPInterrupt>
 8001712:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d057      	beq.n	80017ce <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	2201      	movs	r2, #1
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43db      	mvns	r3, r3
 8001738:	69f9      	ldr	r1, [r7, #28]
 800173a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800173e:	4013      	ands	r3, r2
 8001740:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	015a      	lsls	r2, r3, #5
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	4413      	add	r3, r2
 800174a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800174e:	461a      	mov	r2, r3
 8001750:	2301      	movs	r3, #1
 8001752:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d132      	bne.n	80017c2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001760:	4613      	mov	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	1a9b      	subs	r3, r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	3348      	adds	r3, #72	; 0x48
 800176c:	6819      	ldr	r1, [r3, #0]
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4403      	add	r3, r0
 800177c:	3344      	adds	r3, #68	; 0x44
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4419      	add	r1, r3
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001786:	4613      	mov	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4403      	add	r3, r0
 8001790:	3348      	adds	r3, #72	; 0x48
 8001792:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	2b00      	cmp	r3, #0
 8001798:	d113      	bne.n	80017c2 <HAL_PCD_IRQHandler+0x31c>
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800179e:	4613      	mov	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	1a9b      	subs	r3, r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	3350      	adds	r3, #80	; 0x50
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d108      	bne.n	80017c2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80017ba:	461a      	mov	r2, r3
 80017bc:	2101      	movs	r1, #1
 80017be:	f003 f8b3 	bl	8004928 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	4619      	mov	r1, r3
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f007 fc8b 	bl	80090e4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	015a      	lsls	r2, r3, #5
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	4413      	add	r3, r2
 80017e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e4:	461a      	mov	r2, r3
 80017e6:	2308      	movs	r3, #8
 80017e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	015a      	lsls	r2, r3, #5
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001800:	461a      	mov	r2, r3
 8001802:	2310      	movs	r3, #16
 8001804:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	4413      	add	r3, r2
 8001818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800181c:	461a      	mov	r2, r3
 800181e:	2340      	movs	r3, #64	; 0x40
 8001820:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	015a      	lsls	r2, r3, #5
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	4413      	add	r3, r2
 8001834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001838:	461a      	mov	r2, r3
 800183a:	2302      	movs	r3, #2
 800183c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fc48 	bl	80020e0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	3301      	adds	r3, #1
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001858:	085b      	lsrs	r3, r3, #1
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800185c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185e:	2b00      	cmp	r3, #0
 8001860:	f47f af49 	bne.w	80016f6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f002 ff98 	bl	800479e <USB_ReadInterrupts>
 800186e:	4603      	mov	r3, r0
 8001870:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001878:	d122      	bne.n	80018c0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001894:	2b01      	cmp	r3, #1
 8001896:	d108      	bne.n	80018aa <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018a0:	2100      	movs	r1, #0
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 fe54 	bl	8002550 <HAL_PCDEx_LPM_Callback>
 80018a8:	e002      	b.n	80018b0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f007 fc90 	bl	80091d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80018be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 ff6a 	bl	800479e <USB_ReadInterrupts>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018d4:	d112      	bne.n	80018fc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d102      	bne.n	80018ec <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f007 fc4c 	bl	8009184 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018fa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f002 ff4c 	bl	800479e <USB_ReadInterrupts>
 8001906:	4603      	mov	r3, r0
 8001908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800190c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001910:	f040 80c7 	bne.w	8001aa2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2110      	movs	r1, #16
 800192e:	4618      	mov	r0, r3
 8001930:	f001 ffe6 	bl	8003900 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001934:	2300      	movs	r3, #0
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001938:	e056      	b.n	80019e8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001946:	461a      	mov	r2, r3
 8001948:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800194c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001950:	015a      	lsls	r2, r3, #5
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	4413      	add	r3, r2
 8001956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800195e:	0151      	lsls	r1, r2, #5
 8001960:	69fa      	ldr	r2, [r7, #28]
 8001962:	440a      	add	r2, r1
 8001964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001968:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800196c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001970:	015a      	lsls	r2, r3, #5
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	4413      	add	r3, r2
 8001976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800197e:	0151      	lsls	r1, r2, #5
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	440a      	add	r2, r1
 8001984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001988:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800198c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	015a      	lsls	r2, r3, #5
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	4413      	add	r3, r2
 8001996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800199a:	461a      	mov	r2, r3
 800199c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019b2:	0151      	lsls	r1, r2, #5
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	440a      	add	r2, r1
 80019b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c4:	015a      	lsls	r2, r3, #5
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019d2:	0151      	lsls	r1, r2, #5
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	440a      	add	r2, r1
 80019d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e4:	3301      	adds	r3, #1
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d3a3      	bcc.n	800193a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a00:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a04:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d016      	beq.n	8001a3c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a1e:	f043 030b 	orr.w	r3, r3, #11
 8001a22:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a34:	f043 030b 	orr.w	r3, r3, #11
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	e015      	b.n	8001a68 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a4e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a52:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a62:	f043 030b 	orr.w	r3, r3, #11
 8001a66:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	69fa      	ldr	r2, [r7, #28]
 8001a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a76:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a7a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f002 ff4b 	bl	8004928 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 fe79 	bl	800479e <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ab6:	d124      	bne.n	8001b02 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 ff0f 	bl	80048e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 ff77 	bl	80039ba <USB_GetDevSpeed>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681c      	ldr	r4, [r3, #0]
 8001ad8:	f001 f96a 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8001adc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f001 fc96 	bl	8003418 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f007 fb21 	bl	8009134 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 fe49 	bl	800479e <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d10a      	bne.n	8001b2c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f007 fafe 	bl	8009118 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f002 0208 	and.w	r2, r2, #8
 8001b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 fe34 	bl	800479e <USB_ReadInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b40:	d10f      	bne.n	8001b62 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f007 fb5f 	bl	8009210 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	695a      	ldr	r2, [r3, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f002 fe19 	bl	800479e <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b76:	d10f      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4619      	mov	r1, r3
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f007 fb32 	bl	80091ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 fdfe 	bl	800479e <USB_ReadInterrupts>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bac:	d10a      	bne.n	8001bc4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f007 fb40 	bl	8009234 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001bc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f002 fde8 	bl	800479e <USB_ReadInterrupts>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d115      	bne.n	8001c04 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f007 fb30 	bl	8009250 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6859      	ldr	r1, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	e000      	b.n	8001c04 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001c02:	bf00      	nop
    }
  }
}
 8001c04:	3734      	adds	r7, #52	; 0x34
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd90      	pop	{r4, r7, pc}

08001c0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_PCD_SetAddress+0x1a>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e013      	b.n	8001c4c <HAL_PCD_SetAddress+0x42>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	78fa      	ldrb	r2, [r7, #3]
 8001c30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	78fa      	ldrb	r2, [r7, #3]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 fd46 	bl	80046ce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	4608      	mov	r0, r1
 8001c5e:	4611      	mov	r1, r2
 8001c60:	461a      	mov	r2, r3
 8001c62:	4603      	mov	r3, r0
 8001c64:	70fb      	strb	r3, [r7, #3]
 8001c66:	460b      	mov	r3, r1
 8001c68:	803b      	strh	r3, [r7, #0]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	da0f      	bge.n	8001c9a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	f003 020f 	and.w	r2, r3, #15
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	3338      	adds	r3, #56	; 0x38
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3304      	adds	r3, #4
 8001c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	705a      	strb	r2, [r3, #1]
 8001c98:	e00f      	b.n	8001cba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f003 020f 	and.w	r2, r3, #15
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cc6:	883a      	ldrh	r2, [r7, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	78ba      	ldrb	r2, [r7, #2]
 8001cd0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	785b      	ldrb	r3, [r3, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ce4:	78bb      	ldrb	r3, [r7, #2]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d102      	bne.n	8001cf0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_PCD_EP_Open+0xaa>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e00e      	b.n	8001d1c <HAL_PCD_EP_Open+0xc8>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68f9      	ldr	r1, [r7, #12]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 fe79 	bl	8003a04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001d1a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	da0f      	bge.n	8001d58 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	f003 020f 	and.w	r2, r3, #15
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	3338      	adds	r3, #56	; 0x38
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2201      	movs	r2, #1
 8001d54:	705a      	strb	r2, [r3, #1]
 8001d56:	e00f      	b.n	8001d78 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	f003 020f 	and.w	r2, r3, #15
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3304      	adds	r3, #4
 8001d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_PCD_EP_Close+0x6e>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e00e      	b.n	8001db0 <HAL_PCD_EP_Close+0x8c>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68f9      	ldr	r1, [r7, #12]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 feb7 	bl	8003b14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	f003 020f 	and.w	r2, r3, #15
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4413      	add	r3, r2
 8001dde:	3304      	adds	r3, #4
 8001de0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2200      	movs	r2, #0
 8001df8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dfa:	7afb      	ldrb	r3, [r7, #11]
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d102      	bne.n	8001e14 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e14:	7afb      	ldrb	r3, [r7, #11]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	6979      	ldr	r1, [r7, #20]
 8001e2c:	f002 f992 	bl	8004154 <USB_EP0StartXfer>
 8001e30:	e008      	b.n	8001e44 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	6979      	ldr	r1, [r7, #20]
 8001e40:	f001 ff44 	bl	8003ccc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	f003 020f 	and.w	r2, r3, #15
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e70:	681b      	ldr	r3, [r3, #0]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e8e:	7afb      	ldrb	r3, [r7, #11]
 8001e90:	f003 020f 	and.w	r2, r3, #15
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	3338      	adds	r3, #56	; 0x38
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ebe:	7afb      	ldrb	r3, [r7, #11]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d102      	bne.n	8001ed8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ed8:	7afb      	ldrb	r3, [r7, #11]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	6979      	ldr	r1, [r7, #20]
 8001ef0:	f002 f930 	bl	8004154 <USB_EP0StartXfer>
 8001ef4:	e008      	b.n	8001f08 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	6979      	ldr	r1, [r7, #20]
 8001f04:	f001 fee2 	bl	8003ccc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	f003 020f 	and.w	r2, r3, #15
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d901      	bls.n	8001f30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e050      	b.n	8001fd2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	da0f      	bge.n	8001f58 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	f003 020f 	and.w	r2, r3, #15
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	3338      	adds	r3, #56	; 0x38
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2201      	movs	r2, #1
 8001f54:	705a      	strb	r2, [r3, #1]
 8001f56:	e00d      	b.n	8001f74 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	1a9b      	subs	r3, r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_PCD_EP_SetStall+0x82>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e01e      	b.n	8001fd2 <HAL_PCD_EP_SetStall+0xc0>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68f9      	ldr	r1, [r7, #12]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 fabf 	bl	8004526 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10a      	bne.n	8001fc8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	b2d9      	uxtb	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f002 fcb0 	bl	8004928 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	f003 020f 	and.w	r2, r3, #15
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d901      	bls.n	8001ff8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e042      	b.n	800207e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	da0f      	bge.n	8002020 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	f003 020f 	and.w	r2, r3, #15
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	3338      	adds	r3, #56	; 0x38
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	3304      	adds	r3, #4
 8002016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2201      	movs	r2, #1
 800201c:	705a      	strb	r2, [r3, #1]
 800201e:	e00f      	b.n	8002040 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	f003 020f 	and.w	r2, r3, #15
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	3304      	adds	r3, #4
 8002038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	b2da      	uxtb	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_PCD_EP_ClrStall+0x86>
 800205c:	2302      	movs	r3, #2
 800205e:	e00e      	b.n	800207e <HAL_PCD_EP_ClrStall+0xa4>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68f9      	ldr	r1, [r7, #12]
 800206e:	4618      	mov	r0, r3
 8002070:	f002 fac7 	bl	8004602 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	460b      	mov	r3, r1
 8002090:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_PCD_EP_Flush+0x1a>
 800209c:	2302      	movs	r3, #2
 800209e:	e01b      	b.n	80020d8 <HAL_PCD_EP_Flush+0x52>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80020a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	da09      	bge.n	80020c4 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	4619      	mov	r1, r3
 80020bc:	4610      	mov	r0, r2
 80020be:	f001 fc1f 	bl	8003900 <USB_FlushTxFifo>
 80020c2:	e004      	b.n	80020ce <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f001 fc3d 	bl	8003948 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	3338      	adds	r3, #56	; 0x38
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	3304      	adds	r3, #4
 8002106:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	699a      	ldr	r2, [r3, #24]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	429a      	cmp	r2, r3
 8002112:	d901      	bls.n	8002118 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e06c      	b.n	80021f2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	429a      	cmp	r2, r3
 800212c:	d902      	bls.n	8002134 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	3303      	adds	r3, #3
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800213c:	e02b      	b.n	8002196 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	429a      	cmp	r2, r3
 8002152:	d902      	bls.n	800215a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3303      	adds	r3, #3
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	68d9      	ldr	r1, [r3, #12]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002172:	b2db      	uxtb	r3, r3
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	4603      	mov	r3, r0
 8002178:	6978      	ldr	r0, [r7, #20]
 800217a:	f002 f93e 	bl	80043fa <USB_WritePacket>

    ep->xfer_buff  += len;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	441a      	add	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	441a      	add	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4413      	add	r3, r2
 800219e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d809      	bhi.n	80021c0 <PCD_WriteEmptyTxFifo+0xe0>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	699a      	ldr	r2, [r3, #24]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d203      	bcs.n	80021c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1be      	bne.n	800213e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d811      	bhi.n	80021f0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	2201      	movs	r2, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	6939      	ldr	r1, [r7, #16]
 80021e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021ec:	4013      	ands	r3, r2
 80021ee:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3720      	adds	r7, #32
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	333c      	adds	r3, #60	; 0x3c
 8002214:	3304      	adds	r3, #4
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b01      	cmp	r3, #1
 8002230:	f040 80a0 	bne.w	8002374 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d015      	beq.n	800226a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4a72      	ldr	r2, [pc, #456]	; (800240c <PCD_EP_OutXfrComplete_int+0x210>)
 8002242:	4293      	cmp	r3, r2
 8002244:	f240 80dd 	bls.w	8002402 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80d7 	beq.w	8002402 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4413      	add	r3, r2
 800225c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002260:	461a      	mov	r2, r3
 8002262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002266:	6093      	str	r3, [r2, #8]
 8002268:	e0cb      	b.n	8002402 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002280:	461a      	mov	r2, r3
 8002282:	2320      	movs	r3, #32
 8002284:	6093      	str	r3, [r2, #8]
 8002286:	e0bc      	b.n	8002402 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800228e:	2b00      	cmp	r3, #0
 8002290:	f040 80b7 	bne.w	8002402 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4a5d      	ldr	r2, [pc, #372]	; (800240c <PCD_EP_OutXfrComplete_int+0x210>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d90f      	bls.n	80022bc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b2:	461a      	mov	r2, r3
 80022b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022b8:	6093      	str	r3, [r2, #8]
 80022ba:	e0a2      	b.n	8002402 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022ce:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	0159      	lsls	r1, r3, #5
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	440b      	add	r3, r1
 80022d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80022e2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4403      	add	r3, r0
 80022f2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80022f6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800230a:	6819      	ldr	r1, [r3, #0]
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4403      	add	r3, r0
 800231a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4419      	add	r1, r3
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4403      	add	r3, r0
 8002330:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002334:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d114      	bne.n	8002366 <PCD_EP_OutXfrComplete_int+0x16a>
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d108      	bne.n	8002366 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800235e:	461a      	mov	r2, r3
 8002360:	2101      	movs	r1, #1
 8002362:	f002 fae1 	bl	8004928 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	4619      	mov	r1, r3
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f006 fe9e 	bl	80090ae <HAL_PCD_DataOutStageCallback>
 8002372:	e046      	b.n	8002402 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4a26      	ldr	r2, [pc, #152]	; (8002410 <PCD_EP_OutXfrComplete_int+0x214>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d124      	bne.n	80023c6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4413      	add	r3, r2
 800238e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002392:	461a      	mov	r2, r3
 8002394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002398:	6093      	str	r3, [r2, #8]
 800239a:	e032      	b.n	8002402 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f003 0320 	and.w	r3, r3, #32
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b2:	461a      	mov	r2, r3
 80023b4:	2320      	movs	r3, #32
 80023b6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	4619      	mov	r1, r3
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f006 fe75 	bl	80090ae <HAL_PCD_DataOutStageCallback>
 80023c4:	e01d      	b.n	8002402 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d114      	bne.n	80023f6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d108      	bne.n	80023f6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023ee:	461a      	mov	r2, r3
 80023f0:	2100      	movs	r1, #0
 80023f2:	f002 fa99 	bl	8004928 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	4619      	mov	r1, r3
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f006 fe56 	bl	80090ae <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	4f54300a 	.word	0x4f54300a
 8002410:	4f54310a 	.word	0x4f54310a

08002414 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	333c      	adds	r3, #60	; 0x3c
 800242c:	3304      	adds	r3, #4
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4a15      	ldr	r2, [pc, #84]	; (800249c <PCD_EP_OutSetupPacket_int+0x88>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d90e      	bls.n	8002468 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002450:	2b00      	cmp	r3, #0
 8002452:	d009      	beq.n	8002468 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002460:	461a      	mov	r2, r3
 8002462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002466:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f006 fe0e 	bl	800908a <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4a0a      	ldr	r2, [pc, #40]	; (800249c <PCD_EP_OutSetupPacket_int+0x88>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d90c      	bls.n	8002490 <PCD_EP_OutSetupPacket_int+0x7c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d108      	bne.n	8002490 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002488:	461a      	mov	r2, r3
 800248a:	2101      	movs	r1, #1
 800248c:	f002 fa4c 	bl	8004928 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	4f54300a 	.word	0x4f54300a

080024a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
 80024ac:	4613      	mov	r3, r2
 80024ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d107      	bne.n	80024ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024be:	883b      	ldrh	r3, [r7, #0]
 80024c0:	0419      	lsls	r1, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28
 80024cc:	e028      	b.n	8002520 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	4413      	add	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]
 80024e0:	e00d      	b.n	80024fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	3340      	adds	r3, #64	; 0x40
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	0c1b      	lsrs	r3, r3, #16
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	4413      	add	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	3301      	adds	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	3b01      	subs	r3, #1
 8002504:	429a      	cmp	r2, r3
 8002506:	d3ec      	bcc.n	80024e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002508:	883b      	ldrh	r3, [r7, #0]
 800250a:	0418      	lsls	r0, r3, #16
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	3b01      	subs	r3, #1
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	4302      	orrs	r2, r0
 8002518:	3340      	adds	r3, #64	; 0x40
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	460b      	mov	r3, r1
 8002538:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e267      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d075      	beq.n	8002672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002586:	4b88      	ldr	r3, [pc, #544]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b04      	cmp	r3, #4
 8002590:	d00c      	beq.n	80025ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002592:	4b85      	ldr	r3, [pc, #532]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800259a:	2b08      	cmp	r3, #8
 800259c:	d112      	bne.n	80025c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259e:	4b82      	ldr	r3, [pc, #520]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025aa:	d10b      	bne.n	80025c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	4b7e      	ldr	r3, [pc, #504]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d05b      	beq.n	8002670 <HAL_RCC_OscConfig+0x108>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d157      	bne.n	8002670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e242      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025cc:	d106      	bne.n	80025dc <HAL_RCC_OscConfig+0x74>
 80025ce:	4b76      	ldr	r3, [pc, #472]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a75      	ldr	r2, [pc, #468]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e01d      	b.n	8002618 <HAL_RCC_OscConfig+0xb0>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x98>
 80025e6:	4b70      	ldr	r3, [pc, #448]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6f      	ldr	r2, [pc, #444]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b6d      	ldr	r3, [pc, #436]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a6c      	ldr	r2, [pc, #432]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0xb0>
 8002600:	4b69      	ldr	r3, [pc, #420]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a68      	ldr	r2, [pc, #416]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b66      	ldr	r3, [pc, #408]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a65      	ldr	r2, [pc, #404]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7fe fb28 	bl	8000c74 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe fb24 	bl	8000c74 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e207      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b5b      	ldr	r3, [pc, #364]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0xc0>
 8002646:	e014      	b.n	8002672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fb14 	bl	8000c74 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002650:	f7fe fb10 	bl	8000c74 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1f3      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002662:	4b51      	ldr	r3, [pc, #324]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0xe8>
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d063      	beq.n	8002746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800267e:	4b4a      	ldr	r3, [pc, #296]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268a:	4b47      	ldr	r3, [pc, #284]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002692:	2b08      	cmp	r3, #8
 8002694:	d11c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002696:	4b44      	ldr	r3, [pc, #272]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d116      	bne.n	80026d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	4b41      	ldr	r3, [pc, #260]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_RCC_OscConfig+0x152>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e1c7      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ba:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4937      	ldr	r1, [pc, #220]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ce:	e03a      	b.n	8002746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d8:	4b34      	ldr	r3, [pc, #208]	; (80027ac <HAL_RCC_OscConfig+0x244>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7fe fac9 	bl	8000c74 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e6:	f7fe fac5 	bl	8000c74 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e1a8      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f8:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002704:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4925      	ldr	r1, [pc, #148]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]
 8002718:	e015      	b.n	8002746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271a:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCC_OscConfig+0x244>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe faa8 	bl	8000c74 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002728:	f7fe faa4 	bl	8000c74 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e187      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273a:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d036      	beq.n	80027c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d016      	beq.n	8002788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <HAL_RCC_OscConfig+0x248>)
 800275c:	2201      	movs	r2, #1
 800275e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7fe fa88 	bl	8000c74 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002768:	f7fe fa84 	bl	8000c74 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e167      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 800277c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x200>
 8002786:	e01b      	b.n	80027c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_RCC_OscConfig+0x248>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278e:	f7fe fa71 	bl	8000c74 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002794:	e00e      	b.n	80027b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002796:	f7fe fa6d 	bl	8000c74 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d907      	bls.n	80027b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e150      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
 80027a8:	40023800 	.word	0x40023800
 80027ac:	42470000 	.word	0x42470000
 80027b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b4:	4b88      	ldr	r3, [pc, #544]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ea      	bne.n	8002796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 8097 	beq.w	80028fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d2:	4b81      	ldr	r3, [pc, #516]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10f      	bne.n	80027fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	4b7d      	ldr	r3, [pc, #500]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a7c      	ldr	r2, [pc, #496]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b7a      	ldr	r3, [pc, #488]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fa:	2301      	movs	r3, #1
 80027fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fe:	4b77      	ldr	r3, [pc, #476]	; (80029dc <HAL_RCC_OscConfig+0x474>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d118      	bne.n	800283c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800280a:	4b74      	ldr	r3, [pc, #464]	; (80029dc <HAL_RCC_OscConfig+0x474>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a73      	ldr	r2, [pc, #460]	; (80029dc <HAL_RCC_OscConfig+0x474>)
 8002810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002816:	f7fe fa2d 	bl	8000c74 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281e:	f7fe fa29 	bl	8000c74 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e10c      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	4b6a      	ldr	r3, [pc, #424]	; (80029dc <HAL_RCC_OscConfig+0x474>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x2ea>
 8002844:	4b64      	ldr	r3, [pc, #400]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	4a63      	ldr	r2, [pc, #396]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6713      	str	r3, [r2, #112]	; 0x70
 8002850:	e01c      	b.n	800288c <HAL_RCC_OscConfig+0x324>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b05      	cmp	r3, #5
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x30c>
 800285a:	4b5f      	ldr	r3, [pc, #380]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285e:	4a5e      	ldr	r2, [pc, #376]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002860:	f043 0304 	orr.w	r3, r3, #4
 8002864:	6713      	str	r3, [r2, #112]	; 0x70
 8002866:	4b5c      	ldr	r3, [pc, #368]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	4a5b      	ldr	r2, [pc, #364]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6713      	str	r3, [r2, #112]	; 0x70
 8002872:	e00b      	b.n	800288c <HAL_RCC_OscConfig+0x324>
 8002874:	4b58      	ldr	r3, [pc, #352]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	4a57      	ldr	r2, [pc, #348]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	6713      	str	r3, [r2, #112]	; 0x70
 8002880:	4b55      	ldr	r3, [pc, #340]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002884:	4a54      	ldr	r2, [pc, #336]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002886:	f023 0304 	bic.w	r3, r3, #4
 800288a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d015      	beq.n	80028c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7fe f9ee 	bl	8000c74 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7fe f9ea 	bl	8000c74 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e0cb      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b2:	4b49      	ldr	r3, [pc, #292]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0ee      	beq.n	800289c <HAL_RCC_OscConfig+0x334>
 80028be:	e014      	b.n	80028ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c0:	f7fe f9d8 	bl	8000c74 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c6:	e00a      	b.n	80028de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c8:	f7fe f9d4 	bl	8000c74 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0b5      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028de:	4b3e      	ldr	r3, [pc, #248]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ee      	bne.n	80028c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d105      	bne.n	80028fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f0:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	4a38      	ldr	r2, [pc, #224]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80028f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80a1 	beq.w	8002a48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002906:	4b34      	ldr	r3, [pc, #208]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b08      	cmp	r3, #8
 8002910:	d05c      	beq.n	80029cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d141      	bne.n	800299e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291a:	4b31      	ldr	r3, [pc, #196]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7fe f9a8 	bl	8000c74 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe f9a4 	bl	8000c74 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e087      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293a:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69da      	ldr	r2, [r3, #28]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	019b      	lsls	r3, r3, #6
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	3b01      	subs	r3, #1
 8002960:	041b      	lsls	r3, r3, #16
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	491b      	ldr	r1, [pc, #108]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002976:	f7fe f97d 	bl	8000c74 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297e:	f7fe f979 	bl	8000c74 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e05c      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x416>
 800299c:	e054      	b.n	8002a48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fe f966 	bl	8000c74 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ac:	f7fe f962 	bl	8000c74 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e045      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029be:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x444>
 80029ca:	e03d      	b.n	8002a48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d107      	bne.n	80029e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e038      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40007000 	.word	0x40007000
 80029e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_RCC_OscConfig+0x4ec>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d028      	beq.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d121      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d11a      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d111      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	085b      	lsrs	r3, r3, #1
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d107      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800

08002a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0cc      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b68      	ldr	r3, [pc, #416]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d90c      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b65      	ldr	r3, [pc, #404]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0b8      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d020      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aac:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac4:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b50      	ldr	r3, [pc, #320]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	494d      	ldr	r1, [pc, #308]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d044      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d119      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b16:	4b3f      	ldr	r3, [pc, #252]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e06f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b26:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e067      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b36:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f023 0203 	bic.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4934      	ldr	r1, [pc, #208]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b48:	f7fe f894 	bl	8000c74 <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7fe f890 	bl	8000c74 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e04f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 020c 	and.w	r2, r3, #12
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1eb      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d20c      	bcs.n	8002ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e032      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4916      	ldr	r1, [pc, #88]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	490e      	ldr	r1, [pc, #56]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bde:	f000 f821 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	490a      	ldr	r1, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	5ccb      	ldrb	r3, [r1, r3]
 8002bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf6:	4a09      	ldr	r2, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd fe3a 	bl	8000878 <HAL_InitTick>

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023c00 	.word	0x40023c00
 8002c14:	40023800 	.word	0x40023800
 8002c18:	0800d688 	.word	0x0800d688
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	20000004 	.word	0x20000004

08002c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c28:	b090      	sub	sp, #64	; 0x40
 8002c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c30:	2300      	movs	r3, #0
 8002c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c34:	2300      	movs	r3, #0
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c3c:	4b59      	ldr	r3, [pc, #356]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d00d      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x40>
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	f200 80a1 	bhi.w	8002d90 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x34>
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d003      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c56:	e09b      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c58:	4b53      	ldr	r3, [pc, #332]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c5a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c5c:	e09b      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c5e:	4b53      	ldr	r3, [pc, #332]	; (8002dac <HAL_RCC_GetSysClockFreq+0x188>)
 8002c60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c62:	e098      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c64:	4b4f      	ldr	r3, [pc, #316]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c6e:	4b4d      	ldr	r3, [pc, #308]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d028      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	099b      	lsrs	r3, r3, #6
 8002c80:	2200      	movs	r2, #0
 8002c82:	623b      	str	r3, [r7, #32]
 8002c84:	627a      	str	r2, [r7, #36]	; 0x24
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4b47      	ldr	r3, [pc, #284]	; (8002dac <HAL_RCC_GetSysClockFreq+0x188>)
 8002c90:	fb03 f201 	mul.w	r2, r3, r1
 8002c94:	2300      	movs	r3, #0
 8002c96:	fb00 f303 	mul.w	r3, r0, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4a43      	ldr	r2, [pc, #268]	; (8002dac <HAL_RCC_GetSysClockFreq+0x188>)
 8002c9e:	fba0 1202 	umull	r1, r2, r0, r2
 8002ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ca4:	460a      	mov	r2, r1
 8002ca6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002caa:	4413      	add	r3, r2
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	61fa      	str	r2, [r7, #28]
 8002cb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cbe:	f7fd fadf 	bl	8000280 <__aeabi_uldivmod>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cca:	e053      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ccc:	4b35      	ldr	r3, [pc, #212]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	099b      	lsrs	r3, r3, #6
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	617a      	str	r2, [r7, #20]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cde:	f04f 0b00 	mov.w	fp, #0
 8002ce2:	4652      	mov	r2, sl
 8002ce4:	465b      	mov	r3, fp
 8002ce6:	f04f 0000 	mov.w	r0, #0
 8002cea:	f04f 0100 	mov.w	r1, #0
 8002cee:	0159      	lsls	r1, r3, #5
 8002cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cf4:	0150      	lsls	r0, r2, #5
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	ebb2 080a 	subs.w	r8, r2, sl
 8002cfe:	eb63 090b 	sbc.w	r9, r3, fp
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d16:	ebb2 0408 	subs.w	r4, r2, r8
 8002d1a:	eb63 0509 	sbc.w	r5, r3, r9
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	00eb      	lsls	r3, r5, #3
 8002d28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d2c:	00e2      	lsls	r2, r4, #3
 8002d2e:	4614      	mov	r4, r2
 8002d30:	461d      	mov	r5, r3
 8002d32:	eb14 030a 	adds.w	r3, r4, sl
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	eb45 030b 	adc.w	r3, r5, fp
 8002d3c:	607b      	str	r3, [r7, #4]
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	028b      	lsls	r3, r1, #10
 8002d4e:	4621      	mov	r1, r4
 8002d50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d54:	4621      	mov	r1, r4
 8002d56:	028a      	lsls	r2, r1, #10
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	60fa      	str	r2, [r7, #12]
 8002d64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d68:	f7fd fa8a 	bl	8000280 <__aeabi_uldivmod>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4613      	mov	r3, r2
 8002d72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d8e:	e002      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3740      	adds	r7, #64	; 0x40
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800
 8002da8:	00f42400 	.word	0x00f42400
 8002dac:	017d7840 	.word	0x017d7840

08002db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db4:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000000 	.word	0x20000000

08002dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dcc:	f7ff fff0 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	0b5b      	lsrs	r3, r3, #13
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	4903      	ldr	r1, [pc, #12]	; (8002dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40023800 	.word	0x40023800
 8002dec:	0800d698 	.word	0x0800d698

08002df0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	220f      	movs	r2, #15
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_RCC_GetClockConfig+0x5c>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0203 	and.w	r2, r3, #3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <HAL_RCC_GetClockConfig+0x5c>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <HAL_RCC_GetClockConfig+0x5c>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <HAL_RCC_GetClockConfig+0x5c>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	08db      	lsrs	r3, r3, #3
 8002e2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <HAL_RCC_GetClockConfig+0x60>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0207 	and.w	r2, r3, #7
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	601a      	str	r2, [r3, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40023c00 	.word	0x40023c00

08002e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e041      	b.n	8002eea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f839 	bl	8002ef2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f000 f9ca 	bl	800322c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d001      	beq.n	8002f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e044      	b.n	8002faa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1e      	ldr	r2, [pc, #120]	; (8002fb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d018      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x6c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4a:	d013      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x6c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1a      	ldr	r2, [pc, #104]	; (8002fbc <HAL_TIM_Base_Start_IT+0xb4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00e      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x6c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a19      	ldr	r2, [pc, #100]	; (8002fc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d009      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x6c>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x6c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d111      	bne.n	8002f98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b06      	cmp	r3, #6
 8002f84:	d010      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f96:	e007      	b.n	8002fa8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40010000 	.word	0x40010000
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800
 8002fc4:	40000c00 	.word	0x40000c00
 8002fc8:	40014000 	.word	0x40014000

08002fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d122      	bne.n	8003028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d11b      	bne.n	8003028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0202 	mvn.w	r2, #2
 8002ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8ee 	bl	80031f0 <HAL_TIM_IC_CaptureCallback>
 8003014:	e005      	b.n	8003022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f8e0 	bl	80031dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f8f1 	bl	8003204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b04      	cmp	r3, #4
 8003034:	d122      	bne.n	800307c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b04      	cmp	r3, #4
 8003042:	d11b      	bne.n	800307c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0204 	mvn.w	r2, #4
 800304c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2202      	movs	r2, #2
 8003052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f8c4 	bl	80031f0 <HAL_TIM_IC_CaptureCallback>
 8003068:	e005      	b.n	8003076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8b6 	bl	80031dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f8c7 	bl	8003204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b08      	cmp	r3, #8
 8003088:	d122      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b08      	cmp	r3, #8
 8003096:	d11b      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0208 	mvn.w	r2, #8
 80030a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2204      	movs	r2, #4
 80030a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f89a 	bl	80031f0 <HAL_TIM_IC_CaptureCallback>
 80030bc:	e005      	b.n	80030ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f88c 	bl	80031dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f89d 	bl	8003204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b10      	cmp	r3, #16
 80030dc:	d122      	bne.n	8003124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d11b      	bne.n	8003124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0210 	mvn.w	r2, #16
 80030f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2208      	movs	r2, #8
 80030fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f870 	bl	80031f0 <HAL_TIM_IC_CaptureCallback>
 8003110:	e005      	b.n	800311e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f862 	bl	80031dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f873 	bl	8003204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b01      	cmp	r3, #1
 8003130:	d10e      	bne.n	8003150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b01      	cmp	r3, #1
 800313e:	d107      	bne.n	8003150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0201 	mvn.w	r2, #1
 8003148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd fb50 	bl	80007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315a:	2b80      	cmp	r3, #128	; 0x80
 800315c:	d10e      	bne.n	800317c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003168:	2b80      	cmp	r3, #128	; 0x80
 800316a:	d107      	bne.n	800317c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f8e2 	bl	8003340 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b40      	cmp	r3, #64	; 0x40
 8003188:	d10e      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003194:	2b40      	cmp	r3, #64	; 0x40
 8003196:	d107      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f838 	bl	8003218 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d10e      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d107      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0220 	mvn.w	r2, #32
 80031cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f8ac 	bl	800332c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a34      	ldr	r2, [pc, #208]	; (8003310 <TIM_Base_SetConfig+0xe4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00f      	beq.n	8003264 <TIM_Base_SetConfig+0x38>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324a:	d00b      	beq.n	8003264 <TIM_Base_SetConfig+0x38>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a31      	ldr	r2, [pc, #196]	; (8003314 <TIM_Base_SetConfig+0xe8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d007      	beq.n	8003264 <TIM_Base_SetConfig+0x38>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a30      	ldr	r2, [pc, #192]	; (8003318 <TIM_Base_SetConfig+0xec>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d003      	beq.n	8003264 <TIM_Base_SetConfig+0x38>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a2f      	ldr	r2, [pc, #188]	; (800331c <TIM_Base_SetConfig+0xf0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d108      	bne.n	8003276 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a25      	ldr	r2, [pc, #148]	; (8003310 <TIM_Base_SetConfig+0xe4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01b      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003284:	d017      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a22      	ldr	r2, [pc, #136]	; (8003314 <TIM_Base_SetConfig+0xe8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a21      	ldr	r2, [pc, #132]	; (8003318 <TIM_Base_SetConfig+0xec>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00f      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a20      	ldr	r2, [pc, #128]	; (800331c <TIM_Base_SetConfig+0xf0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00b      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a1f      	ldr	r2, [pc, #124]	; (8003320 <TIM_Base_SetConfig+0xf4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d007      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <TIM_Base_SetConfig+0xf8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d003      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <TIM_Base_SetConfig+0xfc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d108      	bne.n	80032c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a08      	ldr	r2, [pc, #32]	; (8003310 <TIM_Base_SetConfig+0xe4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d103      	bne.n	80032fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	615a      	str	r2, [r3, #20]
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40010000 	.word	0x40010000
 8003314:	40000400 	.word	0x40000400
 8003318:	40000800 	.word	0x40000800
 800331c:	40000c00 	.word	0x40000c00
 8003320:	40014000 	.word	0x40014000
 8003324:	40014400 	.word	0x40014400
 8003328:	40014800 	.word	0x40014800

0800332c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003354:	b084      	sub	sp, #16
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	f107 001c 	add.w	r0, r7, #28
 8003362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	2b01      	cmp	r3, #1
 800336a:	d122      	bne.n	80033b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003396:	2b01      	cmp	r3, #1
 8003398:	d105      	bne.n	80033a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f001 fb1c 	bl	80049e4 <USB_CoreReset>
 80033ac:	4603      	mov	r3, r0
 80033ae:	73fb      	strb	r3, [r7, #15]
 80033b0:	e01a      	b.n	80033e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f001 fb10 	bl	80049e4 <USB_CoreReset>
 80033c4:	4603      	mov	r3, r0
 80033c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80033c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
 80033da:	e005      	b.n	80033e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10b      	bne.n	8003406 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f043 0206 	orr.w	r2, r3, #6
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f043 0220 	orr.w	r2, r3, #32
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003412:	b004      	add	sp, #16
 8003414:	4770      	bx	lr
	...

08003418 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	4613      	mov	r3, r2
 8003424:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d165      	bne.n	80034f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4a41      	ldr	r2, [pc, #260]	; (8003534 <USB_SetTurnaroundTime+0x11c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d906      	bls.n	8003442 <USB_SetTurnaroundTime+0x2a>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4a40      	ldr	r2, [pc, #256]	; (8003538 <USB_SetTurnaroundTime+0x120>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d202      	bcs.n	8003442 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800343c:	230f      	movs	r3, #15
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	e062      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4a3c      	ldr	r2, [pc, #240]	; (8003538 <USB_SetTurnaroundTime+0x120>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d306      	bcc.n	8003458 <USB_SetTurnaroundTime+0x40>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4a3b      	ldr	r2, [pc, #236]	; (800353c <USB_SetTurnaroundTime+0x124>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d202      	bcs.n	8003458 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003452:	230e      	movs	r3, #14
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	e057      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4a38      	ldr	r2, [pc, #224]	; (800353c <USB_SetTurnaroundTime+0x124>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d306      	bcc.n	800346e <USB_SetTurnaroundTime+0x56>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4a37      	ldr	r2, [pc, #220]	; (8003540 <USB_SetTurnaroundTime+0x128>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d202      	bcs.n	800346e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003468:	230d      	movs	r3, #13
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e04c      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4a33      	ldr	r2, [pc, #204]	; (8003540 <USB_SetTurnaroundTime+0x128>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d306      	bcc.n	8003484 <USB_SetTurnaroundTime+0x6c>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4a32      	ldr	r2, [pc, #200]	; (8003544 <USB_SetTurnaroundTime+0x12c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d802      	bhi.n	8003484 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800347e:	230c      	movs	r3, #12
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	e041      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4a2f      	ldr	r2, [pc, #188]	; (8003544 <USB_SetTurnaroundTime+0x12c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d906      	bls.n	800349a <USB_SetTurnaroundTime+0x82>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4a2e      	ldr	r2, [pc, #184]	; (8003548 <USB_SetTurnaroundTime+0x130>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d802      	bhi.n	800349a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003494:	230b      	movs	r3, #11
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e036      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4a2a      	ldr	r2, [pc, #168]	; (8003548 <USB_SetTurnaroundTime+0x130>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d906      	bls.n	80034b0 <USB_SetTurnaroundTime+0x98>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4a29      	ldr	r2, [pc, #164]	; (800354c <USB_SetTurnaroundTime+0x134>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d802      	bhi.n	80034b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80034aa:	230a      	movs	r3, #10
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	e02b      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4a26      	ldr	r2, [pc, #152]	; (800354c <USB_SetTurnaroundTime+0x134>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d906      	bls.n	80034c6 <USB_SetTurnaroundTime+0xae>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4a25      	ldr	r2, [pc, #148]	; (8003550 <USB_SetTurnaroundTime+0x138>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d202      	bcs.n	80034c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80034c0:	2309      	movs	r3, #9
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	e020      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4a21      	ldr	r2, [pc, #132]	; (8003550 <USB_SetTurnaroundTime+0x138>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d306      	bcc.n	80034dc <USB_SetTurnaroundTime+0xc4>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4a20      	ldr	r2, [pc, #128]	; (8003554 <USB_SetTurnaroundTime+0x13c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d802      	bhi.n	80034dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80034d6:	2308      	movs	r3, #8
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e015      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4a1d      	ldr	r2, [pc, #116]	; (8003554 <USB_SetTurnaroundTime+0x13c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d906      	bls.n	80034f2 <USB_SetTurnaroundTime+0xda>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4a1c      	ldr	r2, [pc, #112]	; (8003558 <USB_SetTurnaroundTime+0x140>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d202      	bcs.n	80034f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80034ec:	2307      	movs	r3, #7
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	e00a      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80034f2:	2306      	movs	r3, #6
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	e007      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80034fe:	2309      	movs	r3, #9
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	e001      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003504:	2309      	movs	r3, #9
 8003506:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	029b      	lsls	r3, r3, #10
 800351c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003520:	431a      	orrs	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	00d8acbf 	.word	0x00d8acbf
 8003538:	00e4e1c0 	.word	0x00e4e1c0
 800353c:	00f42400 	.word	0x00f42400
 8003540:	01067380 	.word	0x01067380
 8003544:	011a499f 	.word	0x011a499f
 8003548:	01312cff 	.word	0x01312cff
 800354c:	014ca43f 	.word	0x014ca43f
 8003550:	016e3600 	.word	0x016e3600
 8003554:	01a6ab1f 	.word	0x01a6ab1f
 8003558:	01e84800 	.word	0x01e84800

0800355c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f043 0201 	orr.w	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f023 0201 	bic.w	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d115      	bne.n	80035ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035ce:	2001      	movs	r0, #1
 80035d0:	f7fd fb5c 	bl	8000c8c <HAL_Delay>
      ms++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	3301      	adds	r3, #1
 80035d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f001 f972 	bl	80048c4 <USB_GetMode>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d01e      	beq.n	8003624 <USB_SetCurrentMode+0x84>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b31      	cmp	r3, #49	; 0x31
 80035ea:	d9f0      	bls.n	80035ce <USB_SetCurrentMode+0x2e>
 80035ec:	e01a      	b.n	8003624 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80035ee:	78fb      	ldrb	r3, [r7, #3]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d115      	bne.n	8003620 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003600:	2001      	movs	r0, #1
 8003602:	f7fd fb43 	bl	8000c8c <HAL_Delay>
      ms++;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3301      	adds	r3, #1
 800360a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f001 f959 	bl	80048c4 <USB_GetMode>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <USB_SetCurrentMode+0x84>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b31      	cmp	r3, #49	; 0x31
 800361c:	d9f0      	bls.n	8003600 <USB_SetCurrentMode+0x60>
 800361e:	e001      	b.n	8003624 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e005      	b.n	8003630 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b32      	cmp	r3, #50	; 0x32
 8003628:	d101      	bne.n	800362e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003638:	b084      	sub	sp, #16
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003652:	2300      	movs	r3, #0
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	e009      	b.n	800366c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	3340      	adds	r3, #64	; 0x40
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	2200      	movs	r2, #0
 8003664:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	3301      	adds	r3, #1
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b0e      	cmp	r3, #14
 8003670:	d9f2      	bls.n	8003658 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d11c      	bne.n	80036b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003686:	f043 0302 	orr.w	r3, r3, #2
 800368a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	639a      	str	r2, [r3, #56]	; 0x38
 80036b0:	e00b      	b.n	80036ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036d0:	461a      	mov	r2, r3
 80036d2:	2300      	movs	r3, #0
 80036d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036dc:	4619      	mov	r1, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e4:	461a      	mov	r2, r3
 80036e6:	680b      	ldr	r3, [r1, #0]
 80036e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d10c      	bne.n	800370a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80036f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d104      	bne.n	8003700 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036f6:	2100      	movs	r1, #0
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f945 	bl	8003988 <USB_SetDevSpeed>
 80036fe:	e008      	b.n	8003712 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003700:	2101      	movs	r1, #1
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f940 	bl	8003988 <USB_SetDevSpeed>
 8003708:	e003      	b.n	8003712 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800370a:	2103      	movs	r1, #3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f93b 	bl	8003988 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003712:	2110      	movs	r1, #16
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f8f3 	bl	8003900 <USB_FlushTxFifo>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f90f 	bl	8003948 <USB_FlushRxFifo>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373a:	461a      	mov	r2, r3
 800373c:	2300      	movs	r3, #0
 800373e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003746:	461a      	mov	r2, r3
 8003748:	2300      	movs	r3, #0
 800374a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003752:	461a      	mov	r2, r3
 8003754:	2300      	movs	r3, #0
 8003756:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	e043      	b.n	80037e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003774:	d118      	bne.n	80037a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003788:	461a      	mov	r2, r3
 800378a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	e013      	b.n	80037ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379e:	461a      	mov	r2, r3
 80037a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e008      	b.n	80037ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b4:	461a      	mov	r2, r3
 80037b6:	2300      	movs	r3, #0
 80037b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c6:	461a      	mov	r2, r3
 80037c8:	2300      	movs	r3, #0
 80037ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d8:	461a      	mov	r2, r3
 80037da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	3301      	adds	r3, #1
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d3b7      	bcc.n	800375e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	e043      	b.n	800387c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800380a:	d118      	bne.n	800383e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10a      	bne.n	8003828 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381e:	461a      	mov	r2, r3
 8003820:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	e013      	b.n	8003850 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003834:	461a      	mov	r2, r3
 8003836:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	e008      	b.n	8003850 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384a:	461a      	mov	r2, r3
 800384c:	2300      	movs	r3, #0
 800384e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385c:	461a      	mov	r2, r3
 800385e:	2300      	movs	r3, #0
 8003860:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386e:	461a      	mov	r2, r3
 8003870:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003874:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	3301      	adds	r3, #1
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	429a      	cmp	r2, r3
 8003882:	d3b7      	bcc.n	80037f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003896:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d105      	bne.n	80038b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f043 0210 	orr.w	r2, r3, #16
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <USB_DevInit+0x2c4>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d005      	beq.n	80038d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f043 0208 	orr.w	r2, r3, #8
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d107      	bne.n	80038ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038e4:	f043 0304 	orr.w	r3, r3, #4
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038f8:	b004      	add	sp, #16
 80038fa:	4770      	bx	lr
 80038fc:	803c3800 	.word	0x803c3800

08003900 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	019b      	lsls	r3, r3, #6
 8003912:	f043 0220 	orr.w	r2, r3, #32
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3301      	adds	r3, #1
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	4a08      	ldr	r2, [pc, #32]	; (8003944 <USB_FlushTxFifo+0x44>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e006      	b.n	8003938 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b20      	cmp	r3, #32
 8003934:	d0f1      	beq.n	800391a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	00030d40 	.word	0x00030d40

08003948 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2210      	movs	r2, #16
 8003958:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3301      	adds	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	4a08      	ldr	r2, [pc, #32]	; (8003984 <USB_FlushRxFifo+0x3c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d901      	bls.n	800396a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e006      	b.n	8003978 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	2b10      	cmp	r3, #16
 8003974:	d0f1      	beq.n	800395a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	00030d40 	.word	0x00030d40

08003988 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	68f9      	ldr	r1, [r7, #12]
 80039a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b087      	sub	sp, #28
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 0306 	and.w	r3, r3, #6
 80039d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d102      	bne.n	80039e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80039da:	2300      	movs	r3, #0
 80039dc:	75fb      	strb	r3, [r7, #23]
 80039de:	e00a      	b.n	80039f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d002      	beq.n	80039ec <USB_GetDevSpeed+0x32>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b06      	cmp	r3, #6
 80039ea:	d102      	bne.n	80039f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80039ec:	2302      	movs	r3, #2
 80039ee:	75fb      	strb	r3, [r7, #23]
 80039f0:	e001      	b.n	80039f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80039f2:	230f      	movs	r3, #15
 80039f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	785b      	ldrb	r3, [r3, #1]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d13a      	bne.n	8003a96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	2101      	movs	r1, #1
 8003a32:	fa01 f303 	lsl.w	r3, r1, r3
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	68f9      	ldr	r1, [r7, #12]
 8003a3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d155      	bne.n	8003b04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	78db      	ldrb	r3, [r3, #3]
 8003a72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	059b      	lsls	r3, r3, #22
 8003a7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	0151      	lsls	r1, r2, #5
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	440a      	add	r2, r1
 8003a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e036      	b.n	8003b04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9c:	69da      	ldr	r2, [r3, #28]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aac:	041b      	lsls	r3, r3, #16
 8003aae:	68f9      	ldr	r1, [r7, #12]
 8003ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d11a      	bne.n	8003b04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	78db      	ldrb	r3, [r3, #3]
 8003ae8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003aea:	430b      	orrs	r3, r1
 8003aec:	4313      	orrs	r3, r2
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	0151      	lsls	r1, r2, #5
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	440a      	add	r2, r1
 8003af6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	785b      	ldrb	r3, [r3, #1]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d161      	bne.n	8003bf4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b46:	d11f      	bne.n	8003b88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	0151      	lsls	r1, r2, #5
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	440a      	add	r2, r1
 8003b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	0151      	lsls	r1, r2, #5
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	440a      	add	r2, r1
 8003b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	2101      	movs	r1, #1
 8003b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	68f9      	ldr	r1, [r7, #12]
 8003ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ba8:	4013      	ands	r3, r2
 8003baa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb2:	69da      	ldr	r2, [r3, #28]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	68f9      	ldr	r1, [r7, #12]
 8003bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	0159      	lsls	r1, r3, #5
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	440b      	add	r3, r1
 8003be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bea:	4619      	mov	r1, r3
 8003bec:	4b35      	ldr	r3, [pc, #212]	; (8003cc4 <USB_DeactivateEndpoint+0x1b0>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]
 8003bf2:	e060      	b.n	8003cb6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c0a:	d11f      	bne.n	8003c4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	0151      	lsls	r1, r2, #5
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	440a      	add	r2, r1
 8003c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	0151      	lsls	r1, r2, #5
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	440a      	add	r2, r1
 8003c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	041b      	lsls	r3, r3, #16
 8003c64:	43db      	mvns	r3, r3
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	2101      	movs	r1, #1
 8003c82:	fa01 f303 	lsl.w	r3, r1, r3
 8003c86:	041b      	lsls	r3, r3, #16
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c90:	4013      	ands	r3, r2
 8003c92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	0159      	lsls	r1, r3, #5
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	440b      	add	r3, r1
 8003caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <USB_DeactivateEndpoint+0x1b4>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	ec337800 	.word	0xec337800
 8003cc8:	eff37800 	.word	0xeff37800

08003ccc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	785b      	ldrb	r3, [r3, #1]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	f040 815c 	bne.w	8003fa6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d132      	bne.n	8003d5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	0151      	lsls	r1, r2, #5
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	440a      	add	r2, r1
 8003d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	0151      	lsls	r1, r2, #5
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	440a      	add	r2, r1
 8003d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	0151      	lsls	r1, r2, #5
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	440a      	add	r2, r1
 8003d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d54:	0cdb      	lsrs	r3, r3, #19
 8003d56:	04db      	lsls	r3, r3, #19
 8003d58:	6113      	str	r3, [r2, #16]
 8003d5a:	e074      	b.n	8003e46 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	0151      	lsls	r1, r2, #5
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	440a      	add	r2, r1
 8003d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d76:	0cdb      	lsrs	r3, r3, #19
 8003d78:	04db      	lsls	r3, r3, #19
 8003d7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	0151      	lsls	r1, r2, #5
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	440a      	add	r2, r1
 8003d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	6959      	ldr	r1, [r3, #20]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	440b      	add	r3, r1
 8003db8:	1e59      	subs	r1, r3, #1
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dc2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003dc4:	4b9d      	ldr	r3, [pc, #628]	; (800403c <USB_EPStartXfer+0x370>)
 8003dc6:	400b      	ands	r3, r1
 8003dc8:	69b9      	ldr	r1, [r7, #24]
 8003dca:	0148      	lsls	r0, r1, #5
 8003dcc:	69f9      	ldr	r1, [r7, #28]
 8003dce:	4401      	add	r1, r0
 8003dd0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dee:	69b9      	ldr	r1, [r7, #24]
 8003df0:	0148      	lsls	r0, r1, #5
 8003df2:	69f9      	ldr	r1, [r7, #28]
 8003df4:	4401      	add	r1, r0
 8003df6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	78db      	ldrb	r3, [r3, #3]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d11f      	bne.n	8003e46 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	0151      	lsls	r1, r2, #5
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	440a      	add	r2, r1
 8003e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	0151      	lsls	r1, r2, #5
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	440a      	add	r2, r1
 8003e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d14b      	bne.n	8003ee4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d009      	beq.n	8003e68 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e60:	461a      	mov	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	78db      	ldrb	r3, [r3, #3]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d128      	bne.n	8003ec2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d110      	bne.n	8003ea2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	0151      	lsls	r1, r2, #5
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	440a      	add	r2, r1
 8003e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	e00f      	b.n	8003ec2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	0151      	lsls	r1, r2, #5
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	440a      	add	r2, r1
 8003eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	0151      	lsls	r1, r2, #5
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003edc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e12f      	b.n	8004144 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	0151      	lsls	r1, r2, #5
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	440a      	add	r2, r1
 8003efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003efe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	78db      	ldrb	r3, [r3, #3]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d015      	beq.n	8003f38 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8117 	beq.w	8004144 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	2101      	movs	r1, #1
 8003f28:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2c:	69f9      	ldr	r1, [r7, #28]
 8003f2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f32:	4313      	orrs	r3, r2
 8003f34:	634b      	str	r3, [r1, #52]	; 0x34
 8003f36:	e105      	b.n	8004144 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d110      	bne.n	8003f6a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	0151      	lsls	r1, r2, #5
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	440a      	add	r2, r1
 8003f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	e00f      	b.n	8003f8a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	0151      	lsls	r1, r2, #5
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	440a      	add	r2, r1
 8003f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f88:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	68d9      	ldr	r1, [r3, #12]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	781a      	ldrb	r2, [r3, #0]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	b298      	uxth	r0, r3
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fa2b 	bl	80043fa <USB_WritePacket>
 8003fa4:	e0ce      	b.n	8004144 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc0:	0cdb      	lsrs	r3, r3, #19
 8003fc2:	04db      	lsls	r3, r3, #19
 8003fc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	0151      	lsls	r1, r2, #5
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	440a      	add	r2, r1
 8003fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fe4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fe8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d126      	bne.n	8004040 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004008:	69b9      	ldr	r1, [r7, #24]
 800400a:	0148      	lsls	r0, r1, #5
 800400c:	69f9      	ldr	r1, [r7, #28]
 800400e:	4401      	add	r1, r0
 8004010:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004014:	4313      	orrs	r3, r2
 8004016:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	0151      	lsls	r1, r2, #5
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	440a      	add	r2, r1
 800402e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004032:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004036:	6113      	str	r3, [r2, #16]
 8004038:	e036      	b.n	80040a8 <USB_EPStartXfer+0x3dc>
 800403a:	bf00      	nop
 800403c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4413      	add	r3, r2
 800404a:	1e5a      	subs	r2, r3, #1
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	8afb      	ldrh	r3, [r7, #22]
 8004066:	04d9      	lsls	r1, r3, #19
 8004068:	4b39      	ldr	r3, [pc, #228]	; (8004150 <USB_EPStartXfer+0x484>)
 800406a:	400b      	ands	r3, r1
 800406c:	69b9      	ldr	r1, [r7, #24]
 800406e:	0148      	lsls	r0, r1, #5
 8004070:	69f9      	ldr	r1, [r7, #28]
 8004072:	4401      	add	r1, r0
 8004074:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004078:	4313      	orrs	r3, r2
 800407a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	8af9      	ldrh	r1, [r7, #22]
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004098:	69b9      	ldr	r1, [r7, #24]
 800409a:	0148      	lsls	r0, r1, #5
 800409c:	69f9      	ldr	r1, [r7, #28]
 800409e:	4401      	add	r1, r0
 80040a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040a4:	4313      	orrs	r3, r2
 80040a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d10d      	bne.n	80040ca <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	68d9      	ldr	r1, [r3, #12]
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c6:	460a      	mov	r2, r1
 80040c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	78db      	ldrb	r3, [r3, #3]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d128      	bne.n	8004124 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d110      	bne.n	8004104 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	0151      	lsls	r1, r2, #5
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	440a      	add	r2, r1
 80040f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e00f      	b.n	8004124 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	0151      	lsls	r1, r2, #5
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	440a      	add	r2, r1
 800411a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800411e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004122:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	0151      	lsls	r1, r2, #5
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	440a      	add	r2, r1
 800413a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800413e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004142:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	1ff80000 	.word	0x1ff80000

08004154 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	4613      	mov	r3, r2
 8004160:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	785b      	ldrb	r3, [r3, #1]
 8004170:	2b01      	cmp	r3, #1
 8004172:	f040 80cd 	bne.w	8004310 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d132      	bne.n	80041e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	0151      	lsls	r1, r2, #5
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	440a      	add	r2, r1
 8004194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004198:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800419c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	0151      	lsls	r1, r2, #5
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	440a      	add	r2, r1
 80041b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	0151      	lsls	r1, r2, #5
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	440a      	add	r2, r1
 80041d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041dc:	0cdb      	lsrs	r3, r3, #19
 80041de:	04db      	lsls	r3, r3, #19
 80041e0:	6113      	str	r3, [r2, #16]
 80041e2:	e04e      	b.n	8004282 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	0151      	lsls	r1, r2, #5
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	440a      	add	r2, r1
 80041fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041fe:	0cdb      	lsrs	r3, r3, #19
 8004200:	04db      	lsls	r3, r3, #19
 8004202:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	0151      	lsls	r1, r2, #5
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	440a      	add	r2, r1
 800421a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004222:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004226:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	695a      	ldr	r2, [r3, #20]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	429a      	cmp	r2, r3
 8004232:	d903      	bls.n	800423c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	0151      	lsls	r1, r2, #5
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	440a      	add	r2, r1
 8004252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004256:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800425a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004272:	6939      	ldr	r1, [r7, #16]
 8004274:	0148      	lsls	r0, r1, #5
 8004276:	6979      	ldr	r1, [r7, #20]
 8004278:	4401      	add	r1, r0
 800427a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800427e:	4313      	orrs	r3, r2
 8004280:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d11e      	bne.n	80042c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d009      	beq.n	80042a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429c:	461a      	mov	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	0151      	lsls	r1, r2, #5
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	440a      	add	r2, r1
 80042ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	e092      	b.n	80043ec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	0151      	lsls	r1, r2, #5
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	440a      	add	r2, r1
 80042dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d07e      	beq.n	80043ec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	2101      	movs	r1, #1
 8004300:	fa01 f303 	lsl.w	r3, r1, r3
 8004304:	6979      	ldr	r1, [r7, #20]
 8004306:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800430a:	4313      	orrs	r3, r2
 800430c:	634b      	str	r3, [r1, #52]	; 0x34
 800430e:	e06d      	b.n	80043ec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	0151      	lsls	r1, r2, #5
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	440a      	add	r2, r1
 8004326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800432a:	0cdb      	lsrs	r3, r3, #19
 800432c:	04db      	lsls	r3, r3, #19
 800432e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	440a      	add	r2, r1
 8004346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800434a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800434e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004352:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	0151      	lsls	r1, r2, #5
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	440a      	add	r2, r1
 800437a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800437e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004382:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439a:	6939      	ldr	r1, [r7, #16]
 800439c:	0148      	lsls	r0, r1, #5
 800439e:	6979      	ldr	r1, [r7, #20]
 80043a0:	4401      	add	r1, r0
 80043a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043a6:	4313      	orrs	r3, r2
 80043a8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d10d      	bne.n	80043cc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d009      	beq.n	80043cc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	68d9      	ldr	r1, [r3, #12]
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	460a      	mov	r2, r1
 80043ca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	0151      	lsls	r1, r2, #5
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	440a      	add	r2, r1
 80043e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b089      	sub	sp, #36	; 0x24
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	4611      	mov	r1, r2
 8004406:	461a      	mov	r2, r3
 8004408:	460b      	mov	r3, r1
 800440a:	71fb      	strb	r3, [r7, #7]
 800440c:	4613      	mov	r3, r2
 800440e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004418:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800441c:	2b00      	cmp	r3, #0
 800441e:	d123      	bne.n	8004468 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004420:	88bb      	ldrh	r3, [r7, #4]
 8004422:	3303      	adds	r3, #3
 8004424:	089b      	lsrs	r3, r3, #2
 8004426:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004428:	2300      	movs	r3, #0
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	e018      	b.n	8004460 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	031a      	lsls	r2, r3, #12
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	4413      	add	r3, r2
 8004436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443a:	461a      	mov	r2, r3
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	3301      	adds	r3, #1
 8004446:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	3301      	adds	r3, #1
 800444c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	3301      	adds	r3, #1
 8004452:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	3301      	adds	r3, #1
 8004458:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	3301      	adds	r3, #1
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	429a      	cmp	r2, r3
 8004466:	d3e2      	bcc.n	800442e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3724      	adds	r7, #36	; 0x24
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004476:	b480      	push	{r7}
 8004478:	b08b      	sub	sp, #44	; 0x2c
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	4613      	mov	r3, r2
 8004482:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	089b      	lsrs	r3, r3, #2
 8004490:	b29b      	uxth	r3, r3
 8004492:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800449c:	2300      	movs	r3, #0
 800449e:	623b      	str	r3, [r7, #32]
 80044a0:	e014      	b.n	80044cc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	601a      	str	r2, [r3, #0]
    pDest++;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	3301      	adds	r3, #1
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	3301      	adds	r3, #1
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	3301      	adds	r3, #1
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	3301      	adds	r3, #1
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	3301      	adds	r3, #1
 80044ca:	623b      	str	r3, [r7, #32]
 80044cc:	6a3a      	ldr	r2, [r7, #32]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d3e6      	bcc.n	80044a2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80044d4:	8bfb      	ldrh	r3, [r7, #30]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d01e      	beq.n	8004518 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e4:	461a      	mov	r2, r3
 80044e6:	f107 0310 	add.w	r3, r7, #16
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	fa22 f303 	lsr.w	r3, r2, r3
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	701a      	strb	r2, [r3, #0]
      i++;
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	3301      	adds	r3, #1
 8004504:	623b      	str	r3, [r7, #32]
      pDest++;
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	3301      	adds	r3, #1
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800450c:	8bfb      	ldrh	r3, [r7, #30]
 800450e:	3b01      	subs	r3, #1
 8004510:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004512:	8bfb      	ldrh	r3, [r7, #30]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1ea      	bne.n	80044ee <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800451a:	4618      	mov	r0, r3
 800451c:	372c      	adds	r7, #44	; 0x2c
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004526:	b480      	push	{r7}
 8004528:	b085      	sub	sp, #20
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	785b      	ldrb	r3, [r3, #1]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d12c      	bne.n	800459c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	db12      	blt.n	800457a <USB_EPSetStall+0x54>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00f      	beq.n	800457a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	0151      	lsls	r1, r2, #5
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	440a      	add	r2, r1
 8004570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004574:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004578:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	0151      	lsls	r1, r2, #5
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	440a      	add	r2, r1
 8004590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e02b      	b.n	80045f4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	db12      	blt.n	80045d4 <USB_EPSetStall+0xae>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00f      	beq.n	80045d4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	0151      	lsls	r1, r2, #5
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	440a      	add	r2, r1
 80045ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045d2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	0151      	lsls	r1, r2, #5
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	440a      	add	r2, r1
 80045ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004602:	b480      	push	{r7}
 8004604:	b085      	sub	sp, #20
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	785b      	ldrb	r3, [r3, #1]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d128      	bne.n	8004670 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	0151      	lsls	r1, r2, #5
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	440a      	add	r2, r1
 8004634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004638:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800463c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	78db      	ldrb	r3, [r3, #3]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d003      	beq.n	800464e <USB_EPClearStall+0x4c>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	78db      	ldrb	r3, [r3, #3]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d138      	bne.n	80046c0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	0151      	lsls	r1, r2, #5
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	440a      	add	r2, r1
 8004664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	e027      	b.n	80046c0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	440a      	add	r2, r1
 8004686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800468a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800468e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	78db      	ldrb	r3, [r3, #3]
 8004694:	2b03      	cmp	r3, #3
 8004696:	d003      	beq.n	80046a0 <USB_EPClearStall+0x9e>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	78db      	ldrb	r3, [r3, #3]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d10f      	bne.n	80046c0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	0151      	lsls	r1, r2, #5
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	440a      	add	r2, r1
 80046b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046be:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80046f0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	78fb      	ldrb	r3, [r7, #3]
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004702:	68f9      	ldr	r1, [r7, #12]
 8004704:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004708:	4313      	orrs	r3, r2
 800470a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800471a:	b480      	push	{r7}
 800471c:	b085      	sub	sp, #20
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004734:	f023 0303 	bic.w	r3, r3, #3
 8004738:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004748:	f023 0302 	bic.w	r3, r3, #2
 800474c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004776:	f023 0303 	bic.w	r3, r3, #3
 800477a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800478a:	f043 0302 	orr.w	r3, r3, #2
 800478e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800479e:	b480      	push	{r7}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4013      	ands	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047b6:	68fb      	ldr	r3, [r7, #12]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	4013      	ands	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	0c1b      	lsrs	r3, r3, #16
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	4013      	ands	r3, r2
 800481a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	b29b      	uxth	r3, r3
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	4013      	ands	r3, r2
 8004858:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800485a:	68bb      	ldr	r3, [r7, #8]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800488c:	78fb      	ldrb	r3, [r7, #3]
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
 8004898:	01db      	lsls	r3, r3, #7
 800489a:	b2db      	uxtb	r3, r3
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4013      	ands	r3, r2
 80048b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048b6:	68bb      	ldr	r3, [r7, #8]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	f003 0301 	and.w	r3, r3, #1
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80048fe:	f023 0307 	bic.w	r3, r3, #7
 8004902:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004916:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	460b      	mov	r3, r1
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	333c      	adds	r3, #60	; 0x3c
 800493e:	3304      	adds	r3, #4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4a26      	ldr	r2, [pc, #152]	; (80049e0 <USB_EP0_OutStart+0xb8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d90a      	bls.n	8004962 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004958:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800495c:	d101      	bne.n	8004962 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	e037      	b.n	80049d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004968:	461a      	mov	r2, r3
 800496a:	2300      	movs	r3, #0
 800496c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800497c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004980:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004990:	f043 0318 	orr.w	r3, r3, #24
 8004994:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80049a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80049aa:	7afb      	ldrb	r3, [r7, #11]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d10f      	bne.n	80049d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b6:	461a      	mov	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80049ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	4f54300a 	.word	0x4f54300a

080049e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3301      	adds	r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	4a13      	ldr	r2, [pc, #76]	; (8004a44 <USB_CoreReset+0x60>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d901      	bls.n	8004a00 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e01a      	b.n	8004a36 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	daf3      	bge.n	80049f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f043 0201 	orr.w	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	4a09      	ldr	r2, [pc, #36]	; (8004a44 <USB_CoreReset+0x60>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d901      	bls.n	8004a28 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e006      	b.n	8004a36 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d0f1      	beq.n	8004a18 <USB_CoreReset+0x34>

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	00030d40 	.word	0x00030d40

08004a48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8004a4c:	f001 f9ec 	bl	8005e28 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8004a50:	2200      	movs	r2, #0
 8004a52:	4917      	ldr	r1, [pc, #92]	; (8004ab0 <MX_USB_DEVICE_Init+0x68>)
 8004a54:	4817      	ldr	r0, [pc, #92]	; (8004ab4 <MX_USB_DEVICE_Init+0x6c>)
 8004a56:	f003 f990 	bl	8007d7a <USBD_Init>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8004a60:	f7fb fed8 	bl	8000814 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8004a64:	4914      	ldr	r1, [pc, #80]	; (8004ab8 <MX_USB_DEVICE_Init+0x70>)
 8004a66:	4813      	ldr	r0, [pc, #76]	; (8004ab4 <MX_USB_DEVICE_Init+0x6c>)
 8004a68:	f003 f9b3 	bl	8007dd2 <USBD_RegisterClass>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8004a72:	f7fb fecf 	bl	8000814 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8004a76:	4911      	ldr	r1, [pc, #68]	; (8004abc <MX_USB_DEVICE_Init+0x74>)
 8004a78:	480e      	ldr	r0, [pc, #56]	; (8004ab4 <MX_USB_DEVICE_Init+0x6c>)
 8004a7a:	f000 feb5 	bl	80057e8 <USBD_CDC_ACM_RegisterInterface>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8004a84:	f7fb fec6 	bl	8000814 <Error_Handler>
  {
    Error_Handler();
  }
#endif
#if (USBD_USE_MSC == 1)
  if (USBD_MSC_RegisterStorage(&hUsbDevice, &USBD_Storage_Interface_fops) != USBD_OK)
 8004a88:	490d      	ldr	r1, [pc, #52]	; (8004ac0 <MX_USB_DEVICE_Init+0x78>)
 8004a8a:	480a      	ldr	r0, [pc, #40]	; (8004ab4 <MX_USB_DEVICE_Init+0x6c>)
 8004a8c:	f001 fce4 	bl	8006458 <USBD_MSC_RegisterStorage>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8004a96:	f7fb febd 	bl	8000814 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8004a9a:	4806      	ldr	r0, [pc, #24]	; (8004ab4 <MX_USB_DEVICE_Init+0x6c>)
 8004a9c:	f003 f9d7 	bl	8007e4e <USBD_Start>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 8004aa6:	f7fb feb5 	bl	8000814 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004aaa:	bf00      	nop
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000020 	.word	0x20000020
 8004ab4:	20000784 	.word	0x20000784
 8004ab8:	20000170 	.word	0x20000170
 8004abc:	2000000c 	.word	0x2000000c
 8004ac0:	20000070 	.word	0x20000070

08004ac4 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	01db      	lsls	r3, r3, #7
 8004ad2:	4a06      	ldr	r2, [pc, #24]	; (8004aec <CDC_Init+0x28>)
 8004ad4:	441a      	add	r2, r3
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	4905      	ldr	r1, [pc, #20]	; (8004af0 <CDC_Init+0x2c>)
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 febe 	bl	800585c <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 8004ae0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20000aa0 	.word	0x20000aa0
 8004af0:	20000784 	.word	0x20000784

08004af4 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 8004afe:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	603a      	str	r2, [r7, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	4603      	mov	r3, r0
 8004b18:	71fb      	strb	r3, [r7, #7]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	71bb      	strb	r3, [r7, #6]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8004b22:	79bb      	ldrb	r3, [r7, #6]
 8004b24:	2b23      	cmp	r3, #35	; 0x23
 8004b26:	f200 80b6 	bhi.w	8004c96 <CDC_Control+0x18a>
 8004b2a:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <CDC_Control+0x24>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004c97 	.word	0x08004c97
 8004b34:	08004c97 	.word	0x08004c97
 8004b38:	08004c97 	.word	0x08004c97
 8004b3c:	08004c97 	.word	0x08004c97
 8004b40:	08004c97 	.word	0x08004c97
 8004b44:	08004c97 	.word	0x08004c97
 8004b48:	08004c97 	.word	0x08004c97
 8004b4c:	08004c97 	.word	0x08004c97
 8004b50:	08004c97 	.word	0x08004c97
 8004b54:	08004c97 	.word	0x08004c97
 8004b58:	08004c97 	.word	0x08004c97
 8004b5c:	08004c97 	.word	0x08004c97
 8004b60:	08004c97 	.word	0x08004c97
 8004b64:	08004c97 	.word	0x08004c97
 8004b68:	08004c97 	.word	0x08004c97
 8004b6c:	08004c97 	.word	0x08004c97
 8004b70:	08004c97 	.word	0x08004c97
 8004b74:	08004c97 	.word	0x08004c97
 8004b78:	08004c97 	.word	0x08004c97
 8004b7c:	08004c97 	.word	0x08004c97
 8004b80:	08004c97 	.word	0x08004c97
 8004b84:	08004c97 	.word	0x08004c97
 8004b88:	08004c97 	.word	0x08004c97
 8004b8c:	08004c97 	.word	0x08004c97
 8004b90:	08004c97 	.word	0x08004c97
 8004b94:	08004c97 	.word	0x08004c97
 8004b98:	08004c97 	.word	0x08004c97
 8004b9c:	08004c97 	.word	0x08004c97
 8004ba0:	08004c97 	.word	0x08004c97
 8004ba4:	08004c97 	.word	0x08004c97
 8004ba8:	08004c97 	.word	0x08004c97
 8004bac:	08004c97 	.word	0x08004c97
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004c21 	.word	0x08004c21
 8004bb8:	08004c97 	.word	0x08004c97
 8004bbc:	08004c97 	.word	0x08004c97
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	3302      	adds	r3, #2
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004bd8:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	3303      	adds	r3, #3
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	061b      	lsls	r3, r3, #24
 8004be2:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004be4:	79fb      	ldrb	r3, [r7, #7]
 8004be6:	4611      	mov	r1, r2
 8004be8:	4a2f      	ldr	r2, [pc, #188]	; (8004ca8 <CDC_Control+0x19c>)
 8004bea:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8004bee:	79fb      	ldrb	r3, [r7, #7]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	7911      	ldrb	r1, [r2, #4]
 8004bf4:	4a2c      	ldr	r2, [pc, #176]	; (8004ca8 <CDC_Control+0x19c>)
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	460a      	mov	r2, r1
 8004bfc:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	7951      	ldrb	r1, [r2, #5]
 8004c04:	4a28      	ldr	r2, [pc, #160]	; (8004ca8 <CDC_Control+0x19c>)
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4413      	add	r3, r2
 8004c0a:	460a      	mov	r2, r1
 8004c0c:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	7991      	ldrb	r1, [r2, #6]
 8004c14:	4a24      	ldr	r2, [pc, #144]	; (8004ca8 <CDC_Control+0x19c>)
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	4413      	add	r3, r2
 8004c1a:	460a      	mov	r2, r1
 8004c1c:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 8004c1e:	e03b      	b.n	8004c98 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	4a21      	ldr	r2, [pc, #132]	; (8004ca8 <CDC_Control+0x19c>)
 8004c24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	4a1d      	ldr	r2, [pc, #116]	; (8004ca8 <CDC_Control+0x19c>)
 8004c32:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c36:	0a1a      	lsrs	r2, r3, #8
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	4a19      	ldr	r2, [pc, #100]	; (8004ca8 <CDC_Control+0x19c>)
 8004c44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c48:	0c1a      	lsrs	r2, r3, #16
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	3302      	adds	r3, #2
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	4a14      	ldr	r2, [pc, #80]	; (8004ca8 <CDC_Control+0x19c>)
 8004c56:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c5a:	0e1a      	lsrs	r2, r3, #24
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	3303      	adds	r3, #3
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	3204      	adds	r2, #4
 8004c6a:	490f      	ldr	r1, [pc, #60]	; (8004ca8 <CDC_Control+0x19c>)
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	440b      	add	r3, r1
 8004c70:	791b      	ldrb	r3, [r3, #4]
 8004c72:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	3205      	adds	r2, #5
 8004c7a:	490b      	ldr	r1, [pc, #44]	; (8004ca8 <CDC_Control+0x19c>)
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	440b      	add	r3, r1
 8004c80:	795b      	ldrb	r3, [r3, #5]
 8004c82:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	3206      	adds	r2, #6
 8004c8a:	4907      	ldr	r1, [pc, #28]	; (8004ca8 <CDC_Control+0x19c>)
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	440b      	add	r3, r1
 8004c90:	799b      	ldrb	r3, [r3, #6]
 8004c92:	7013      	strb	r3, [r2, #0]
    break;
 8004c94:	e000      	b.n	8004c98 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8004c96:	bf00      	nop
  }

  return (USBD_OK);
 8004c98:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20000b20 	.word	0x20000b20

08004cac <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f825 	bl	8004d14 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	4907      	ldr	r1, [pc, #28]	; (8004cec <CDC_Receive+0x40>)
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fdc3 	bl	800585c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
 8004cd8:	4904      	ldr	r1, [pc, #16]	; (8004cec <CDC_Receive+0x40>)
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fe1e 	bl	800591c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8004ce0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000784 	.word	0x20000784

08004cf0 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	607a      	str	r2, [r7, #4]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	73fb      	strb	r3, [r7, #15]
 8004d00:	4613      	mov	r3, r2
 8004d02:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	6039      	str	r1, [r7, #0]
 8004d1e:	71fb      	strb	r3, [r7, #7]
 8004d20:	4613      	mov	r3, r2
 8004d22:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004d32:	fb02 f303 	mul.w	r3, r2, r3
 8004d36:	4a0e      	ldr	r2, [pc, #56]	; (8004d70 <CDC_Transmit+0x5c>)
 8004d38:	4413      	add	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e00d      	b.n	8004d66 <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 8004d4a:	88bb      	ldrh	r3, [r7, #4]
 8004d4c:	79f8      	ldrb	r0, [r7, #7]
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	4908      	ldr	r1, [pc, #32]	; (8004d74 <CDC_Transmit+0x60>)
 8004d52:	f000 fd5f 	bl	8005814 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	4906      	ldr	r1, [pc, #24]	; (8004d74 <CDC_Transmit+0x60>)
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fd9c 	bl	8005898 <USBD_CDC_TransmitPacket>
 8004d60:	4603      	mov	r3, r0
 8004d62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20008d40 	.word	0x20008d40
 8004d74:	20000784 	.word	0x20000784

08004d78 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	6039      	str	r1, [r7, #0]
 8004d82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2212      	movs	r2, #18
 8004d88:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8004d8a:	4b03      	ldr	r3, [pc, #12]	; (8004d98 <USBD_DeviceDescriptor+0x20>)
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	2000003c 	.word	0x2000003c

08004d9c <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	6039      	str	r1, [r7, #0]
 8004da6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2204      	movs	r2, #4
 8004dac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004dae:	4b03      	ldr	r3, [pc, #12]	; (8004dbc <USBD_LangIDStrDescriptor+0x20>)
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	20000050 	.word	0x20000050

08004dc0 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	6039      	str	r1, [r7, #0]
 8004dca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004dcc:	79fb      	ldrb	r3, [r7, #7]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d105      	bne.n	8004dde <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	4907      	ldr	r1, [pc, #28]	; (8004df4 <USBD_ProductStrDescriptor+0x34>)
 8004dd6:	4808      	ldr	r0, [pc, #32]	; (8004df8 <USBD_ProductStrDescriptor+0x38>)
 8004dd8:	f004 f877 	bl	8008eca <USBD_GetString>
 8004ddc:	e004      	b.n	8004de8 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	4904      	ldr	r1, [pc, #16]	; (8004df4 <USBD_ProductStrDescriptor+0x34>)
 8004de2:	4805      	ldr	r0, [pc, #20]	; (8004df8 <USBD_ProductStrDescriptor+0x38>)
 8004de4:	f004 f871 	bl	8008eca <USBD_GetString>
  }
  return USBD_StrDesc;
 8004de8:	4b02      	ldr	r3, [pc, #8]	; (8004df4 <USBD_ProductStrDescriptor+0x34>)
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000b28 	.word	0x20000b28
 8004df8:	0800d5b4 	.word	0x0800d5b4

08004dfc <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	6039      	str	r1, [r7, #0]
 8004e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	4904      	ldr	r1, [pc, #16]	; (8004e1c <USBD_ManufacturerStrDescriptor+0x20>)
 8004e0c:	4804      	ldr	r0, [pc, #16]	; (8004e20 <USBD_ManufacturerStrDescriptor+0x24>)
 8004e0e:	f004 f85c 	bl	8008eca <USBD_GetString>
  return USBD_StrDesc;
 8004e12:	4b02      	ldr	r3, [pc, #8]	; (8004e1c <USBD_ManufacturerStrDescriptor+0x20>)
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	20000b28 	.word	0x20000b28
 8004e20:	0800d5cc 	.word	0x0800d5cc

08004e24 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	6039      	str	r1, [r7, #0]
 8004e2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	221a      	movs	r2, #26
 8004e34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8004e36:	f000 f843 	bl	8004ec0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8004e3a:	4b02      	ldr	r3, [pc, #8]	; (8004e44 <USBD_SerialStrDescriptor+0x20>)
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20000054 	.word	0x20000054

08004e48 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	6039      	str	r1, [r7, #0]
 8004e52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8004e54:	79fb      	ldrb	r3, [r7, #7]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d105      	bne.n	8004e66 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	4907      	ldr	r1, [pc, #28]	; (8004e7c <USBD_ConfigStrDescriptor+0x34>)
 8004e5e:	4808      	ldr	r0, [pc, #32]	; (8004e80 <USBD_ConfigStrDescriptor+0x38>)
 8004e60:	f004 f833 	bl	8008eca <USBD_GetString>
 8004e64:	e004      	b.n	8004e70 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	4904      	ldr	r1, [pc, #16]	; (8004e7c <USBD_ConfigStrDescriptor+0x34>)
 8004e6a:	4805      	ldr	r0, [pc, #20]	; (8004e80 <USBD_ConfigStrDescriptor+0x38>)
 8004e6c:	f004 f82d 	bl	8008eca <USBD_GetString>
  }
  return USBD_StrDesc;
 8004e70:	4b02      	ldr	r3, [pc, #8]	; (8004e7c <USBD_ConfigStrDescriptor+0x34>)
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000b28 	.word	0x20000b28
 8004e80:	0800d5e0 	.word	0x0800d5e0

08004e84 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	6039      	str	r1, [r7, #0]
 8004e8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	4907      	ldr	r1, [pc, #28]	; (8004eb8 <USBD_InterfaceStrDescriptor+0x34>)
 8004e9a:	4808      	ldr	r0, [pc, #32]	; (8004ebc <USBD_InterfaceStrDescriptor+0x38>)
 8004e9c:	f004 f815 	bl	8008eca <USBD_GetString>
 8004ea0:	e004      	b.n	8004eac <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	4904      	ldr	r1, [pc, #16]	; (8004eb8 <USBD_InterfaceStrDescriptor+0x34>)
 8004ea6:	4805      	ldr	r0, [pc, #20]	; (8004ebc <USBD_InterfaceStrDescriptor+0x38>)
 8004ea8:	f004 f80f 	bl	8008eca <USBD_GetString>
  }
  return USBD_StrDesc;
 8004eac:	4b02      	ldr	r3, [pc, #8]	; (8004eb8 <USBD_InterfaceStrDescriptor+0x34>)
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000b28 	.word	0x20000b28
 8004ebc:	0800d5f0 	.word	0x0800d5f0

08004ec0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004ec6:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <Get_SerialNum+0x44>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004ecc:	4b0e      	ldr	r3, [pc, #56]	; (8004f08 <Get_SerialNum+0x48>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004ed2:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <Get_SerialNum+0x4c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4413      	add	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004ee6:	2208      	movs	r2, #8
 8004ee8:	4909      	ldr	r1, [pc, #36]	; (8004f10 <Get_SerialNum+0x50>)
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 f814 	bl	8004f18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	4908      	ldr	r1, [pc, #32]	; (8004f14 <Get_SerialNum+0x54>)
 8004ef4:	68b8      	ldr	r0, [r7, #8]
 8004ef6:	f000 f80f 	bl	8004f18 <IntToUnicode>
  }
}
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	1fff7a10 	.word	0x1fff7a10
 8004f08:	1fff7a14 	.word	0x1fff7a14
 8004f0c:	1fff7a18 	.word	0x1fff7a18
 8004f10:	20000056 	.word	0x20000056
 8004f14:	20000066 	.word	0x20000066

08004f18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	75fb      	strb	r3, [r7, #23]
 8004f2e:	e027      	b.n	8004f80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	0f1b      	lsrs	r3, r3, #28
 8004f34:	2b09      	cmp	r3, #9
 8004f36:	d80b      	bhi.n	8004f50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	0f1b      	lsrs	r3, r3, #28
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	4619      	mov	r1, r3
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	440b      	add	r3, r1
 8004f48:	3230      	adds	r2, #48	; 0x30
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]
 8004f4e:	e00a      	b.n	8004f66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	0f1b      	lsrs	r3, r3, #28
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	7dfb      	ldrb	r3, [r7, #23]
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	440b      	add	r3, r1
 8004f60:	3237      	adds	r2, #55	; 0x37
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	3301      	adds	r3, #1
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	4413      	add	r3, r2
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	75fb      	strb	r3, [r7, #23]
 8004f80:	7dfa      	ldrb	r2, [r7, #23]
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d3d3      	bcc.n	8004f30 <IntToUnicode+0x18>
  }
}
 8004f88:	bf00      	nop
 8004f8a:	bf00      	nop
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <STORAGE_Init>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init(uint8_t lun)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8004fa0:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <STORAGE_GetCapacity>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	607a      	str	r2, [r7, #4]
 8004fba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	22c8      	movs	r2, #200	; 0xc8
 8004fc0:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc8:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8004fca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <STORAGE_IsReady>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady(uint8_t lun)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8004fe2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <STORAGE_IsWriteProtected>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected(uint8_t lun)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8004ffa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <STORAGE_Read>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8005008:	b480      	push	{r7}
 800500a:	b089      	sub	sp, #36	; 0x24
 800500c:	af00      	add	r7, sp, #0
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	461a      	mov	r2, r3
 8005014:	4603      	mov	r3, r0
 8005016:	73fb      	strb	r3, [r7, #15]
 8005018:	4613      	mov	r3, r2
 800501a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

  uint32_t bytecount = blk_len*STORAGE_BLK_SIZ;
 800501c:	89bb      	ldrh	r3, [r7, #12]
 800501e:	025b      	lsls	r3, r3, #9
 8005020:	61bb      	str	r3, [r7, #24]
  uint32_t mem_address = blk_addr*STORAGE_BLK_SIZ;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	025b      	lsls	r3, r3, #9
 8005026:	617b      	str	r3, [r7, #20]

  for(uint32_t i=0; i<bytecount; i++)
 8005028:	2300      	movs	r3, #0
 800502a:	61fb      	str	r3, [r7, #28]
 800502c:	e00b      	b.n	8005046 <STORAGE_Read+0x3e>
      {
	  buf[i] = MSC_Storage[mem_address+i];
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	441a      	add	r2, r3
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	440b      	add	r3, r1
 800503a:	4908      	ldr	r1, [pc, #32]	; (800505c <STORAGE_Read+0x54>)
 800503c:	5c8a      	ldrb	r2, [r1, r2]
 800503e:	701a      	strb	r2, [r3, #0]
  for(uint32_t i=0; i<bytecount; i++)
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	3301      	adds	r3, #1
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	69fa      	ldr	r2, [r7, #28]
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	429a      	cmp	r2, r3
 800504c:	d3ef      	bcc.n	800502e <STORAGE_Read+0x26>
      }

  return (USBD_OK);
 800504e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005050:	4618      	mov	r0, r3
 8005052:	3724      	adds	r7, #36	; 0x24
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	20000d28 	.word	0x20000d28

08005060 <STORAGE_Write>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8005060:	b480      	push	{r7}
 8005062:	b089      	sub	sp, #36	; 0x24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
 800506a:	461a      	mov	r2, r3
 800506c:	4603      	mov	r3, r0
 800506e:	73fb      	strb	r3, [r7, #15]
 8005070:	4613      	mov	r3, r2
 8005072:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */

   uint32_t bytecount = blk_len*STORAGE_BLK_SIZ;
 8005074:	89bb      	ldrh	r3, [r7, #12]
 8005076:	025b      	lsls	r3, r3, #9
 8005078:	61bb      	str	r3, [r7, #24]
   uint32_t mem_address = blk_addr*STORAGE_BLK_SIZ;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	025b      	lsls	r3, r3, #9
 800507e:	617b      	str	r3, [r7, #20]

    for(uint32_t i=0; i<bytecount; i++)
 8005080:	2300      	movs	r3, #0
 8005082:	61fb      	str	r3, [r7, #28]
 8005084:	e00b      	b.n	800509e <STORAGE_Write+0x3e>
    {
	MSC_Storage[mem_address+i] = buf[i];
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	441a      	add	r2, r3
 800508c:	6979      	ldr	r1, [r7, #20]
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	440b      	add	r3, r1
 8005092:	7811      	ldrb	r1, [r2, #0]
 8005094:	4a07      	ldr	r2, [pc, #28]	; (80050b4 <STORAGE_Write+0x54>)
 8005096:	54d1      	strb	r1, [r2, r3]
    for(uint32_t i=0; i<bytecount; i++)
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	3301      	adds	r3, #1
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d3ef      	bcc.n	8005086 <STORAGE_Write+0x26>
    }

  return (USBD_OK);
 80050a6:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3724      	adds	r7, #36	; 0x24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	20000d28 	.word	0x20000d28

080050b8 <STORAGE_GetMaxLun>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80050bc:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80050be:	4618      	mov	r0, r3
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80050d8:	2300      	movs	r3, #0
 80050da:	73fb      	strb	r3, [r7, #15]
 80050dc:	e0c6      	b.n	800526c <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80050e4:	fb02 f303 	mul.w	r3, r2, r3
 80050e8:	4a65      	ldr	r2, [pc, #404]	; (8005280 <USBD_CDC_Init+0x1b8>)
 80050ea:	4413      	add	r3, r2
 80050ec:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	7c1b      	ldrb	r3, [r3, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d13d      	bne.n	8005172 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	4a62      	ldr	r2, [pc, #392]	; (8005284 <USBD_CDC_Init+0x1bc>)
 80050fa:	5cd1      	ldrb	r1, [r2, r3]
 80050fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005100:	2202      	movs	r2, #2
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f004 f92b 	bl	800935e <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	4a5e      	ldr	r2, [pc, #376]	; (8005284 <USBD_CDC_Init+0x1bc>)
 800510c:	5cd3      	ldrb	r3, [r2, r3]
 800510e:	f003 020f 	and.w	r2, r3, #15
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	3324      	adds	r3, #36	; 0x24
 8005120:	2201      	movs	r2, #1
 8005122:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	4a58      	ldr	r2, [pc, #352]	; (8005288 <USBD_CDC_Init+0x1c0>)
 8005128:	5cd1      	ldrb	r1, [r2, r3]
 800512a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800512e:	2202      	movs	r2, #2
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f004 f914 	bl	800935e <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8005136:	7bfb      	ldrb	r3, [r7, #15]
 8005138:	4a53      	ldr	r2, [pc, #332]	; (8005288 <USBD_CDC_Init+0x1c0>)
 800513a:	5cd3      	ldrb	r3, [r2, r3]
 800513c:	f003 020f 	and.w	r2, r3, #15
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005150:	2201      	movs	r2, #1
 8005152:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	4a4d      	ldr	r2, [pc, #308]	; (800528c <USBD_CDC_Init+0x1c4>)
 8005158:	5cd3      	ldrb	r3, [r2, r3]
 800515a:	f003 020f 	and.w	r2, r3, #15
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	3326      	adds	r3, #38	; 0x26
 800516c:	2210      	movs	r2, #16
 800516e:	801a      	strh	r2, [r3, #0]
 8005170:	e03a      	b.n	80051e8 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	4a43      	ldr	r2, [pc, #268]	; (8005284 <USBD_CDC_Init+0x1bc>)
 8005176:	5cd1      	ldrb	r1, [r2, r3]
 8005178:	2340      	movs	r3, #64	; 0x40
 800517a:	2202      	movs	r2, #2
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f004 f8ee 	bl	800935e <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	4a3f      	ldr	r2, [pc, #252]	; (8005284 <USBD_CDC_Init+0x1bc>)
 8005186:	5cd3      	ldrb	r3, [r2, r3]
 8005188:	f003 020f 	and.w	r2, r3, #15
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	3324      	adds	r3, #36	; 0x24
 800519a:	2201      	movs	r2, #1
 800519c:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	4a39      	ldr	r2, [pc, #228]	; (8005288 <USBD_CDC_Init+0x1c0>)
 80051a2:	5cd1      	ldrb	r1, [r2, r3]
 80051a4:	2340      	movs	r3, #64	; 0x40
 80051a6:	2202      	movs	r2, #2
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f004 f8d8 	bl	800935e <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	4a35      	ldr	r2, [pc, #212]	; (8005288 <USBD_CDC_Init+0x1c0>)
 80051b2:	5cd3      	ldrb	r3, [r2, r3]
 80051b4:	f003 020f 	and.w	r2, r3, #15
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	440b      	add	r3, r1
 80051c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051c8:	2201      	movs	r2, #1
 80051ca:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	4a2f      	ldr	r2, [pc, #188]	; (800528c <USBD_CDC_Init+0x1c4>)
 80051d0:	5cd3      	ldrb	r3, [r2, r3]
 80051d2:	f003 020f 	and.w	r2, r3, #15
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	3326      	adds	r3, #38	; 0x26
 80051e4:	2210      	movs	r2, #16
 80051e6:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	4a28      	ldr	r2, [pc, #160]	; (800528c <USBD_CDC_Init+0x1c4>)
 80051ec:	5cd1      	ldrb	r1, [r2, r3]
 80051ee:	2308      	movs	r3, #8
 80051f0:	2203      	movs	r2, #3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f004 f8b3 	bl	800935e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	4a24      	ldr	r2, [pc, #144]	; (800528c <USBD_CDC_Init+0x1c4>)
 80051fc:	5cd3      	ldrb	r3, [r2, r3]
 80051fe:	f003 020f 	and.w	r2, r3, #15
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	3324      	adds	r3, #36	; 0x24
 8005210:	2201      	movs	r2, #1
 8005212:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	7bfa      	ldrb	r2, [r7, #15]
 800521e:	4610      	mov	r0, r2
 8005220:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2200      	movs	r2, #0
 8005226:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2200      	movs	r2, #0
 800522e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7c1b      	ldrb	r3, [r3, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10b      	bne.n	8005252 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	4a12      	ldr	r2, [pc, #72]	; (8005288 <USBD_CDC_Init+0x1c0>)
 800523e:	5cd1      	ldrb	r1, [r2, r3]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f004 f995 	bl	800957a <USBD_LL_PrepareReceive>
 8005250:	e009      	b.n	8005266 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	4a0c      	ldr	r2, [pc, #48]	; (8005288 <USBD_CDC_Init+0x1c0>)
 8005256:	5cd1      	ldrb	r1, [r2, r3]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800525e:	2340      	movs	r3, #64	; 0x40
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f004 f98a 	bl	800957a <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	3301      	adds	r3, #1
 800526a:	73fb      	strb	r3, [r7, #15]
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	2b00      	cmp	r3, #0
 8005270:	f43f af35 	beq.w	80050de <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20008d40 	.word	0x20008d40
 8005284:	20008d28 	.word	0x20008d28
 8005288:	20008d2c 	.word	0x20008d2c
 800528c:	20008d30 	.word	0x20008d30

08005290 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800529c:	2300      	movs	r3, #0
 800529e:	73fb      	strb	r3, [r7, #15]
 80052a0:	e057      	b.n	8005352 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	4a2f      	ldr	r2, [pc, #188]	; (8005364 <USBD_CDC_DeInit+0xd4>)
 80052a6:	5cd3      	ldrb	r3, [r2, r3]
 80052a8:	4619      	mov	r1, r3
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f004 f87d 	bl	80093aa <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	4a2c      	ldr	r2, [pc, #176]	; (8005364 <USBD_CDC_DeInit+0xd4>)
 80052b4:	5cd3      	ldrb	r3, [r2, r3]
 80052b6:	f003 020f 	and.w	r2, r3, #15
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	3324      	adds	r3, #36	; 0x24
 80052c8:	2200      	movs	r2, #0
 80052ca:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	4a26      	ldr	r2, [pc, #152]	; (8005368 <USBD_CDC_DeInit+0xd8>)
 80052d0:	5cd3      	ldrb	r3, [r2, r3]
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f004 f868 	bl	80093aa <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	4a22      	ldr	r2, [pc, #136]	; (8005368 <USBD_CDC_DeInit+0xd8>)
 80052de:	5cd3      	ldrb	r3, [r2, r3]
 80052e0:	f003 020f 	and.w	r2, r3, #15
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80052f4:	2200      	movs	r2, #0
 80052f6:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	4a1c      	ldr	r2, [pc, #112]	; (800536c <USBD_CDC_DeInit+0xdc>)
 80052fc:	5cd3      	ldrb	r3, [r2, r3]
 80052fe:	4619      	mov	r1, r3
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f004 f852 	bl	80093aa <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	4a18      	ldr	r2, [pc, #96]	; (800536c <USBD_CDC_DeInit+0xdc>)
 800530a:	5cd3      	ldrb	r3, [r2, r3]
 800530c:	f003 020f 	and.w	r2, r3, #15
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	4613      	mov	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	440b      	add	r3, r1
 800531c:	3324      	adds	r3, #36	; 0x24
 800531e:	2200      	movs	r2, #0
 8005320:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	4a11      	ldr	r2, [pc, #68]	; (800536c <USBD_CDC_DeInit+0xdc>)
 8005326:	5cd3      	ldrb	r3, [r2, r3]
 8005328:	f003 020f 	and.w	r2, r3, #15
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	3326      	adds	r3, #38	; 0x26
 800533a:	2200      	movs	r2, #0
 800533c:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	7bfa      	ldrb	r2, [r7, #15]
 8005348:	4610      	mov	r0, r2
 800534a:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	3301      	adds	r3, #1
 8005350:	73fb      	strb	r3, [r7, #15]
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0a4      	beq.n	80052a2 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20008d28 	.word	0x20008d28
 8005368:	20008d2c 	.word	0x20008d2c
 800536c:	20008d30 	.word	0x20008d30

08005370 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005370:	b590      	push	{r4, r7, lr}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800537a:	2300      	movs	r3, #0
 800537c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800538e:	2300      	movs	r3, #0
 8005390:	757b      	strb	r3, [r7, #21]
 8005392:	e015      	b.n	80053c0 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	889b      	ldrh	r3, [r3, #4]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	7d7b      	ldrb	r3, [r7, #21]
 800539c:	496d      	ldr	r1, [pc, #436]	; (8005554 <USBD_CDC_Setup+0x1e4>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d007      	beq.n	80053b4 <USBD_CDC_Setup+0x44>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	889b      	ldrh	r3, [r3, #4]
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	7d7b      	ldrb	r3, [r7, #21]
 80053ac:	496a      	ldr	r1, [pc, #424]	; (8005558 <USBD_CDC_Setup+0x1e8>)
 80053ae:	5ccb      	ldrb	r3, [r1, r3]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d102      	bne.n	80053ba <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 80053b4:	7d7b      	ldrb	r3, [r7, #21]
 80053b6:	75bb      	strb	r3, [r7, #22]
      break;
 80053b8:	e005      	b.n	80053c6 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80053ba:	7d7b      	ldrb	r3, [r7, #21]
 80053bc:	3301      	adds	r3, #1
 80053be:	757b      	strb	r3, [r7, #21]
 80053c0:	7d7b      	ldrb	r3, [r7, #21]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0e6      	beq.n	8005394 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 80053c6:	7dbb      	ldrb	r3, [r7, #22]
 80053c8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80053cc:	fb02 f303 	mul.w	r3, r2, r3
 80053d0:	4a62      	ldr	r2, [pc, #392]	; (800555c <USBD_CDC_Setup+0x1ec>)
 80053d2:	4413      	add	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d04a      	beq.n	8005478 <USBD_CDC_Setup+0x108>
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	f040 80aa 	bne.w	800553c <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	88db      	ldrh	r3, [r3, #6]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d038      	beq.n	8005462 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	b25b      	sxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	da1d      	bge.n	8005436 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005400:	689c      	ldr	r4, [r3, #8]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	7859      	ldrb	r1, [r3, #1]
 8005406:	7dbb      	ldrb	r3, [r7, #22]
 8005408:	025b      	lsls	r3, r3, #9
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	441a      	add	r2, r3
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	88db      	ldrh	r3, [r3, #6]
 8005412:	7db8      	ldrb	r0, [r7, #22]
 8005414:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	88db      	ldrh	r3, [r3, #6]
 800541a:	2b07      	cmp	r3, #7
 800541c:	bf28      	it	cs
 800541e:	2307      	movcs	r3, #7
 8005420:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 8005422:	7dbb      	ldrb	r3, [r7, #22]
 8005424:	025b      	lsls	r3, r3, #9
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4413      	add	r3, r2
 800542a:	89fa      	ldrh	r2, [r7, #14]
 800542c:	4619      	mov	r1, r3
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f003 fdab 	bl	8008f8a <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8005434:	e089      	b.n	800554a <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	785a      	ldrb	r2, [r3, #1]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	88db      	ldrh	r3, [r3, #6]
 8005444:	b2da      	uxtb	r2, r3
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800544c:	7dbb      	ldrb	r3, [r7, #22]
 800544e:	025b      	lsls	r3, r3, #9
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	18d1      	adds	r1, r2, r3
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	88db      	ldrh	r3, [r3, #6]
 8005458:	461a      	mov	r2, r3
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f003 fdc1 	bl	8008fe2 <USBD_CtlPrepareRx>
    break;
 8005460:	e073      	b.n	800554a <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005468:	689c      	ldr	r4, [r3, #8]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	7859      	ldrb	r1, [r3, #1]
 800546e:	7db8      	ldrb	r0, [r7, #22]
 8005470:	2300      	movs	r3, #0
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	47a0      	blx	r4
    break;
 8005476:	e068      	b.n	800554a <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	785b      	ldrb	r3, [r3, #1]
 800547c:	2b0b      	cmp	r3, #11
 800547e:	d852      	bhi.n	8005526 <USBD_CDC_Setup+0x1b6>
 8005480:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <USBD_CDC_Setup+0x118>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	080054b9 	.word	0x080054b9
 800548c:	08005535 	.word	0x08005535
 8005490:	08005527 	.word	0x08005527
 8005494:	08005527 	.word	0x08005527
 8005498:	08005527 	.word	0x08005527
 800549c:	08005527 	.word	0x08005527
 80054a0:	08005527 	.word	0x08005527
 80054a4:	08005527 	.word	0x08005527
 80054a8:	08005527 	.word	0x08005527
 80054ac:	08005527 	.word	0x08005527
 80054b0:	080054e3 	.word	0x080054e3
 80054b4:	0800550d 	.word	0x0800550d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d107      	bne.n	80054d4 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80054c4:	f107 030a 	add.w	r3, r7, #10
 80054c8:	2202      	movs	r2, #2
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f003 fd5c 	bl	8008f8a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80054d2:	e032      	b.n	800553a <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80054d4:	6839      	ldr	r1, [r7, #0]
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f003 fce6 	bl	8008ea8 <USBD_CtlError>
        ret = USBD_FAIL;
 80054dc:	2303      	movs	r3, #3
 80054de:	75fb      	strb	r3, [r7, #23]
      break;
 80054e0:	e02b      	b.n	800553a <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d107      	bne.n	80054fe <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80054ee:	f107 030d 	add.w	r3, r7, #13
 80054f2:	2201      	movs	r2, #1
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f003 fd47 	bl	8008f8a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80054fc:	e01d      	b.n	800553a <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80054fe:	6839      	ldr	r1, [r7, #0]
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f003 fcd1 	bl	8008ea8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005506:	2303      	movs	r3, #3
 8005508:	75fb      	strb	r3, [r7, #23]
      break;
 800550a:	e016      	b.n	800553a <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b03      	cmp	r3, #3
 8005516:	d00f      	beq.n	8005538 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f003 fcc4 	bl	8008ea8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005520:	2303      	movs	r3, #3
 8005522:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005524:	e008      	b.n	8005538 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005526:	6839      	ldr	r1, [r7, #0]
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f003 fcbd 	bl	8008ea8 <USBD_CtlError>
      ret = USBD_FAIL;
 800552e:	2303      	movs	r3, #3
 8005530:	75fb      	strb	r3, [r7, #23]
      break;
 8005532:	e002      	b.n	800553a <USBD_CDC_Setup+0x1ca>
      break;
 8005534:	bf00      	nop
 8005536:	e008      	b.n	800554a <USBD_CDC_Setup+0x1da>
      break;
 8005538:	bf00      	nop
    }
    break;
 800553a:	e006      	b.n	800554a <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f003 fcb2 	bl	8008ea8 <USBD_CtlError>
    ret = USBD_FAIL;
 8005544:	2303      	movs	r3, #3
 8005546:	75fb      	strb	r3, [r7, #23]
    break;
 8005548:	bf00      	nop
  }

  return (uint8_t)ret;
 800554a:	7dfb      	ldrb	r3, [r7, #23]
}
 800554c:	4618      	mov	r0, r3
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	bd90      	pop	{r4, r7, pc}
 8005554:	20008d34 	.word	0x20008d34
 8005558:	20008d38 	.word	0x20008d38
 800555c:	20008d40 	.word	0x20008d40

08005560 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005560:	b590      	push	{r4, r7, lr}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800556c:	2300      	movs	r3, #0
 800556e:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8005576:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800557c:	2300      	movs	r3, #0
 800557e:	75bb      	strb	r3, [r7, #22]
 8005580:	e00d      	b.n	800559e <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 8005582:	78fa      	ldrb	r2, [r7, #3]
 8005584:	7dbb      	ldrb	r3, [r7, #22]
 8005586:	4934      	ldr	r1, [pc, #208]	; (8005658 <USBD_CDC_DataIn+0xf8>)
 8005588:	5ccb      	ldrb	r3, [r1, r3]
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	429a      	cmp	r2, r3
 8005590:	d102      	bne.n	8005598 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8005592:	7dbb      	ldrb	r3, [r7, #22]
 8005594:	75fb      	strb	r3, [r7, #23]
      break;
 8005596:	e005      	b.n	80055a4 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005598:	7dbb      	ldrb	r3, [r7, #22]
 800559a:	3301      	adds	r3, #1
 800559c:	75bb      	strb	r3, [r7, #22]
 800559e:	7dbb      	ldrb	r3, [r7, #22]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0ee      	beq.n	8005582 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
 80055a6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80055aa:	fb02 f303 	mul.w	r3, r2, r3
 80055ae:	4a2b      	ldr	r2, [pc, #172]	; (800565c <USBD_CDC_DataIn+0xfc>)
 80055b0:	4413      	add	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80055b4:	78fa      	ldrb	r2, [r7, #3]
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	3318      	adds	r3, #24
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d029      	beq.n	800561e <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80055ca:	78fa      	ldrb	r2, [r7, #3]
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	3318      	adds	r3, #24
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	78f9      	ldrb	r1, [r7, #3]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	460b      	mov	r3, r1
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	1a5b      	subs	r3, r3, r1
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4403      	add	r3, r0
 80055ea:	3344      	adds	r3, #68	; 0x44
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	fbb2 f1f3 	udiv	r1, r2, r3
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d110      	bne.n	800561e <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80055fc:	78fa      	ldrb	r2, [r7, #3]
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	4613      	mov	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	3318      	adds	r3, #24
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005610:	78f9      	ldrb	r1, [r7, #3]
 8005612:	2300      	movs	r3, #0
 8005614:	2200      	movs	r2, #0
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f003 ff8e 	bl	8009538 <USBD_LL_Transmit>
 800561c:	e016      	b.n	800564c <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2200      	movs	r2, #0
 8005622:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00c      	beq.n	800564c <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005638:	691c      	ldr	r4, [r3, #16]
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8005646:	78fb      	ldrb	r3, [r7, #3]
 8005648:	7df8      	ldrb	r0, [r7, #23]
 800564a:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	bd90      	pop	{r4, r7, pc}
 8005656:	bf00      	nop
 8005658:	20008d28 	.word	0x20008d28
 800565c:	20008d40 	.word	0x20008d40

08005660 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800566c:	2300      	movs	r3, #0
 800566e:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005674:	2300      	movs	r3, #0
 8005676:	73bb      	strb	r3, [r7, #14]
 8005678:	e00b      	b.n	8005692 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 800567a:	7bbb      	ldrb	r3, [r7, #14]
 800567c:	4a17      	ldr	r2, [pc, #92]	; (80056dc <USBD_CDC_DataOut+0x7c>)
 800567e:	5cd3      	ldrb	r3, [r2, r3]
 8005680:	78fa      	ldrb	r2, [r7, #3]
 8005682:	429a      	cmp	r2, r3
 8005684:	d102      	bne.n	800568c <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8005686:	7bbb      	ldrb	r3, [r7, #14]
 8005688:	73fb      	strb	r3, [r7, #15]
      break;
 800568a:	e005      	b.n	8005698 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800568c:	7bbb      	ldrb	r3, [r7, #14]
 800568e:	3301      	adds	r3, #1
 8005690:	73bb      	strb	r3, [r7, #14]
 8005692:	7bbb      	ldrb	r3, [r7, #14]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0f0      	beq.n	800567a <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800569e:	fb02 f303 	mul.w	r3, r2, r3
 80056a2:	4a0f      	ldr	r2, [pc, #60]	; (80056e0 <USBD_CDC_DataOut+0x80>)
 80056a4:	4413      	add	r3, r2
 80056a6:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f003 ff85 	bl	80095bc <USBD_LL_GetRxDataSize>
 80056b2:	4602      	mov	r2, r0
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80056ce:	7bf8      	ldrb	r0, [r7, #15]
 80056d0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20008d2c 	.word	0x20008d2c
 80056e0:	20008d40 	.word	0x20008d40

080056e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80056e4:	b590      	push	{r4, r7, lr}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60bb      	str	r3, [r7, #8]

  if (hcdc == NULL)
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <USBD_CDC_EP0_RxReady+0x16>
  {
    return (uint8_t)USBD_FAIL;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e030      	b.n	800575c <USBD_CDC_EP0_RxReady+0x78>
  }

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80056fa:	2300      	movs	r3, #0
 80056fc:	73fb      	strb	r3, [r7, #15]
 80056fe:	e029      	b.n	8005754 <USBD_CDC_EP0_RxReady+0x70>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005706:	fb02 f303 	mul.w	r3, r2, r3
 800570a:	4a16      	ldr	r2, [pc, #88]	; (8005764 <USBD_CDC_EP0_RxReady+0x80>)
 800570c:	4413      	add	r3, r2
 800570e:	60bb      	str	r3, [r7, #8]

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005716:	2b00      	cmp	r3, #0
 8005718:	d019      	beq.n	800574e <USBD_CDC_EP0_RxReady+0x6a>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005720:	2bff      	cmp	r3, #255	; 0xff
 8005722:	d014      	beq.n	800574e <USBD_CDC_EP0_RxReady+0x6a>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800572a:	689c      	ldr	r4, [r3, #8]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	025b      	lsls	r3, r3, #9
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	441a      	add	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005740:	b29b      	uxth	r3, r3
 8005742:	7bf8      	ldrb	r0, [r7, #15]
 8005744:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	22ff      	movs	r2, #255	; 0xff
 800574a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	3301      	adds	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0d2      	beq.n	8005700 <USBD_CDC_EP0_RxReady+0x1c>
    }
  }

  return (uint8_t)USBD_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	bd90      	pop	{r4, r7, pc}
 8005764:	20008d40 	.word	0x20008d40

08005768 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	224b      	movs	r2, #75	; 0x4b
 8005774:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005776:	4b03      	ldr	r3, [pc, #12]	; (8005784 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005778:	4618      	mov	r0, r3
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	20000124 	.word	0x20000124

08005788 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	224b      	movs	r2, #75	; 0x4b
 8005794:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005796:	4b03      	ldr	r3, [pc, #12]	; (80057a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005798:	4618      	mov	r0, r3
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	200000d8 	.word	0x200000d8

080057a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	224b      	movs	r2, #75	; 0x4b
 80057b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80057b6:	4b03      	ldr	r3, [pc, #12]	; (80057c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	20000124 	.word	0x20000124

080057c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	220a      	movs	r2, #10
 80057d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80057d6:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80057d8:	4618      	mov	r0, r3
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	20000090 	.word	0x20000090

080057e8 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e004      	b.n	8005806 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
 800581e:	603b      	str	r3, [r7, #0]
 8005820:	4603      	mov	r3, r0
 8005822:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800582e:	fb02 f303 	mul.w	r3, r2, r3
 8005832:	4a09      	ldr	r2, [pc, #36]	; (8005858 <USBD_CDC_SetTxBuffer+0x44>)
 8005834:	4413      	add	r3, r2
 8005836:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	20008d40 	.word	0x20008d40

0800585c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	4603      	mov	r3, r0
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005874:	fb02 f303 	mul.w	r3, r2, r3
 8005878:	4a06      	ldr	r2, [pc, #24]	; (8005894 <USBD_CDC_SetRxBuffer+0x38>)
 800587a:	4413      	add	r3, r2
 800587c:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	20008d40 	.word	0x20008d40

08005898 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	6039      	str	r1, [r7, #0]
 80058a2:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80058a8:	2301      	movs	r3, #1
 80058aa:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80058b2:	fb02 f303 	mul.w	r3, r2, r3
 80058b6:	4a17      	ldr	r2, [pc, #92]	; (8005914 <USBD_CDC_TransmitPacket+0x7c>)
 80058b8:	4413      	add	r3, r2
 80058ba:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d121      	bne.n	800590a <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	4a11      	ldr	r2, [pc, #68]	; (8005918 <USBD_CDC_TransmitPacket+0x80>)
 80058d2:	5cd3      	ldrb	r3, [r2, r3]
 80058d4:	f003 020f 	and.w	r2, r3, #15
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80058de:	6838      	ldr	r0, [r7, #0]
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4403      	add	r3, r0
 80058ea:	3318      	adds	r3, #24
 80058ec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	4a09      	ldr	r2, [pc, #36]	; (8005918 <USBD_CDC_TransmitPacket+0x80>)
 80058f2:	5cd1      	ldrb	r1, [r2, r3]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005900:	6838      	ldr	r0, [r7, #0]
 8005902:	f003 fe19 	bl	8009538 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800590a:	7bfb      	ldrb	r3, [r7, #15]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20008d40 	.word	0x20008d40
 8005918:	20008d28 	.word	0x20008d28

0800591c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	6039      	str	r1, [r7, #0]
 8005926:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005932:	fb02 f303 	mul.w	r3, r2, r3
 8005936:	4a11      	ldr	r2, [pc, #68]	; (800597c <USBD_CDC_ReceivePacket+0x60>)
 8005938:	4413      	add	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	7c1b      	ldrb	r3, [r3, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10b      	bne.n	800595c <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	4a0e      	ldr	r2, [pc, #56]	; (8005980 <USBD_CDC_ReceivePacket+0x64>)
 8005948:	5cd1      	ldrb	r1, [r2, r3]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005950:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005954:	6838      	ldr	r0, [r7, #0]
 8005956:	f003 fe10 	bl	800957a <USBD_LL_PrepareReceive>
 800595a:	e009      	b.n	8005970 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800595c:	79fb      	ldrb	r3, [r7, #7]
 800595e:	4a08      	ldr	r2, [pc, #32]	; (8005980 <USBD_CDC_ReceivePacket+0x64>)
 8005960:	5cd1      	ldrb	r1, [r2, r3]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005968:	2340      	movs	r3, #64	; 0x40
 800596a:	6838      	ldr	r0, [r7, #0]
 800596c:	f003 fe05 	bl	800957a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20008d40 	.word	0x20008d40
 8005980:	20008d2c 	.word	0x20008d2c

08005984 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	4608      	mov	r0, r1
 800598e:	4611      	mov	r1, r2
 8005990:	461a      	mov	r2, r3
 8005992:	4603      	mov	r3, r0
 8005994:	70fb      	strb	r3, [r7, #3]
 8005996:	460b      	mov	r3, r1
 8005998:	70bb      	strb	r3, [r7, #2]
 800599a:	4613      	mov	r3, r2
 800599c:	707b      	strb	r3, [r7, #1]
  desc += 9;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3309      	adds	r3, #9
 80059a2:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80059a4:	2300      	movs	r3, #0
 80059a6:	73fb      	strb	r3, [r7, #15]
 80059a8:	e05b      	b.n	8005a62 <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3302      	adds	r3, #2
 80059ae:	78fa      	ldrb	r2, [r7, #3]
 80059b0:	701a      	strb	r2, [r3, #0]
    desc[7] = str_idx;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3307      	adds	r3, #7
 80059b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80059ba:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	330a      	adds	r3, #10
 80059c0:	78fa      	ldrb	r2, [r7, #3]
 80059c2:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	331a      	adds	r3, #26
 80059c8:	78ba      	ldrb	r2, [r7, #2]
 80059ca:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3322      	adds	r3, #34	; 0x22
 80059d0:	78fa      	ldrb	r2, [r7, #3]
 80059d2:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3323      	adds	r3, #35	; 0x23
 80059d8:	78ba      	ldrb	r2, [r7, #2]
 80059da:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3326      	adds	r3, #38	; 0x26
 80059e0:	7e3a      	ldrb	r2, [r7, #24]
 80059e2:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	332d      	adds	r3, #45	; 0x2d
 80059e8:	78ba      	ldrb	r2, [r7, #2]
 80059ea:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3336      	adds	r3, #54	; 0x36
 80059f0:	7f3a      	ldrb	r2, [r7, #28]
 80059f2:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	333d      	adds	r3, #61	; 0x3d
 80059f8:	787a      	ldrb	r2, [r7, #1]
 80059fa:	701a      	strb	r2, [r3, #0]

    desc += 66;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3342      	adds	r3, #66	; 0x42
 8005a00:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	491c      	ldr	r1, [pc, #112]	; (8005a78 <USBD_Update_CDC_ACM_DESC+0xf4>)
 8005a06:	787a      	ldrb	r2, [r7, #1]
 8005a08:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	491b      	ldr	r1, [pc, #108]	; (8005a7c <USBD_Update_CDC_ACM_DESC+0xf8>)
 8005a0e:	7f3a      	ldrb	r2, [r7, #28]
 8005a10:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	491a      	ldr	r1, [pc, #104]	; (8005a80 <USBD_Update_CDC_ACM_DESC+0xfc>)
 8005a16:	7e3a      	ldrb	r2, [r7, #24]
 8005a18:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	4919      	ldr	r1, [pc, #100]	; (8005a84 <USBD_Update_CDC_ACM_DESC+0x100>)
 8005a1e:	78fa      	ldrb	r2, [r7, #3]
 8005a20:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	4918      	ldr	r1, [pc, #96]	; (8005a88 <USBD_Update_CDC_ACM_DESC+0x104>)
 8005a26:	78ba      	ldrb	r2, [r7, #2]
 8005a28:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	4917      	ldr	r1, [pc, #92]	; (8005a8c <USBD_Update_CDC_ACM_DESC+0x108>)
 8005a2e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005a32:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8005a34:	787b      	ldrb	r3, [r7, #1]
 8005a36:	3302      	adds	r3, #2
 8005a38:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 8005a3a:	787b      	ldrb	r3, [r7, #1]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8005a40:	7f3b      	ldrb	r3, [r7, #28]
 8005a42:	3301      	adds	r3, #1
 8005a44:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8005a46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	3302      	adds	r3, #2
 8005a54:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	73fb      	strb	r3, [r7, #15]
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0a0      	beq.n	80059aa <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	20008d28 	.word	0x20008d28
 8005a7c:	20008d2c 	.word	0x20008d2c
 8005a80:	20008d30 	.word	0x20008d30
 8005a84:	20008d34 	.word	0x20008d34
 8005a88:	20008d38 	.word	0x20008d38
 8005a8c:	20008d3c 	.word	0x20008d3c

08005a90 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8005a9c:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <USBD_COMPOSITE_Init+0x30>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	78fa      	ldrb	r2, [r7, #3]
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	4798      	blx	r3
#endif
#if (USBD_USE_UVC == 1)
  USBD_VIDEO.Init(pdev, cfgidx);
#endif
#if (USBD_USE_MSC == 1)
  USBD_MSC.Init(pdev, cfgidx);
 8005aa8:	4b06      	ldr	r3, [pc, #24]	; (8005ac4 <USBD_COMPOSITE_Init+0x34>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	78fa      	ldrb	r2, [r7, #3]
 8005aae:	4611      	mov	r1, r2
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	2000009c 	.word	0x2000009c
 8005ac4:	200001bc 	.word	0x200001bc

08005ac8 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8005ad4:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <USBD_COMPOSITE_DeInit+0x30>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	78fa      	ldrb	r2, [r7, #3]
 8005ada:	4611      	mov	r1, r2
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	4798      	blx	r3
#endif
#if (USBD_USE_UVC == 1)
  USBD_VIDEO.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_MSC == 1)
  USBD_MSC.DeInit(pdev, cfgidx);
 8005ae0:	4b06      	ldr	r3, [pc, #24]	; (8005afc <USBD_COMPOSITE_DeInit+0x34>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	78fa      	ldrb	r2, [r7, #3]
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	2000009c 	.word	0x2000009c
 8005afc:	200001bc 	.word	0x200001bc

08005b00 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	73fb      	strb	r3, [r7, #15]
 8005b0e:	e019      	b.n	8005b44 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	889b      	ldrh	r3, [r3, #4]
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	4915      	ldr	r1, [pc, #84]	; (8005b70 <USBD_COMPOSITE_Setup+0x70>)
 8005b1a:	5ccb      	ldrb	r3, [r1, r3]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d007      	beq.n	8005b30 <USBD_COMPOSITE_Setup+0x30>
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	889b      	ldrh	r3, [r3, #4]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	4912      	ldr	r1, [pc, #72]	; (8005b74 <USBD_COMPOSITE_Setup+0x74>)
 8005b2a:	5ccb      	ldrb	r3, [r1, r3]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d106      	bne.n	8005b3e <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8005b30:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <USBD_COMPOSITE_Setup+0x78>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	4798      	blx	r3
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	e014      	b.n	8005b68 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
 8005b40:	3301      	adds	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0e2      	beq.n	8005b10 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_VIDEO.Setup(pdev, req);
  }
#endif
#if (USBD_USE_MSC == 1)
  if (LOBYTE(req->wIndex) == MSC_ITF_NBR)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	889b      	ldrh	r3, [r3, #4]
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <USBD_COMPOSITE_Setup+0x7c>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d106      	bne.n	8005b66 <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_MSC.Setup(pdev, req);
 8005b58:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <USBD_COMPOSITE_Setup+0x80>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	4798      	blx	r3
 8005b62:	4603      	mov	r3, r0
 8005b64:	e000      	b.n	8005b68 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 8005b66:	2303      	movs	r3, #3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20008d34 	.word	0x20008d34
 8005b74:	20008d38 	.word	0x20008d38
 8005b78:	2000009c 	.word	0x2000009c
 8005b7c:	20009064 	.word	0x20009064
 8005b80:	200001bc 	.word	0x200001bc

08005b84 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005b90:	2300      	movs	r3, #0
 8005b92:	73fb      	strb	r3, [r7, #15]
 8005b94:	e01a      	b.n	8005bcc <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8005b96:	78fa      	ldrb	r2, [r7, #3]
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	4918      	ldr	r1, [pc, #96]	; (8005bfc <USBD_COMPOSITE_DataIn+0x78>)
 8005b9c:	5ccb      	ldrb	r3, [r1, r3]
 8005b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d007      	beq.n	8005bb6 <USBD_COMPOSITE_DataIn+0x32>
 8005ba6:	78fa      	ldrb	r2, [r7, #3]
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	4915      	ldr	r1, [pc, #84]	; (8005c00 <USBD_COMPOSITE_DataIn+0x7c>)
 8005bac:	5ccb      	ldrb	r3, [r1, r3]
 8005bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d107      	bne.n	8005bc6 <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8005bb6:	4b13      	ldr	r3, [pc, #76]	; (8005c04 <USBD_COMPOSITE_DataIn+0x80>)
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	78fa      	ldrb	r2, [r7, #3]
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	4798      	blx	r3
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	e015      	b.n	8005bf2 <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	73fb      	strb	r3, [r7, #15]
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0e1      	beq.n	8005b96 <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_VIDEO.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_MSC == 1)
  if (epnum == (MSC_IN_EP & 0x7F))
 8005bd2:	78fa      	ldrb	r2, [r7, #3]
 8005bd4:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <USBD_COMPOSITE_DataIn+0x84>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d107      	bne.n	8005bf0 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_MSC.DataIn(pdev, epnum);
 8005be0:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <USBD_COMPOSITE_DataIn+0x88>)
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	78fa      	ldrb	r2, [r7, #3]
 8005be6:	4611      	mov	r1, r2
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	4798      	blx	r3
 8005bec:	4603      	mov	r3, r0
 8005bee:	e000      	b.n	8005bf2 <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8005bf0:	2303      	movs	r3, #3
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20008d28 	.word	0x20008d28
 8005c00:	20008d30 	.word	0x20008d30
 8005c04:	2000009c 	.word	0x2000009c
 8005c08:	200001ba 	.word	0x200001ba
 8005c0c:	200001bc 	.word	0x200001bc

08005c10 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8005c18:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	2000009c 	.word	0x2000009c

08005c30 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	73fb      	strb	r3, [r7, #15]
 8005ca0:	e010      	b.n	8005cc4 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
 8005ca4:	4a12      	ldr	r2, [pc, #72]	; (8005cf0 <USBD_COMPOSITE_DataOut+0x60>)
 8005ca6:	5cd3      	ldrb	r3, [r2, r3]
 8005ca8:	78fa      	ldrb	r2, [r7, #3]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d107      	bne.n	8005cbe <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8005cae:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <USBD_COMPOSITE_DataOut+0x64>)
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	78fa      	ldrb	r2, [r7, #3]
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	4798      	blx	r3
 8005cba:	4603      	mov	r3, r0
 8005cbc:	e013      	b.n	8005ce6 <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	73fb      	strb	r3, [r7, #15]
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0eb      	beq.n	8005ca2 <USBD_COMPOSITE_DataOut+0x12>
  }
#endif
#if (USBD_USE_UVC == 1)
#endif
#if (USBD_USE_MSC == 1)
  if (epnum == MSC_OUT_EP)
 8005cca:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <USBD_COMPOSITE_DataOut+0x68>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	78fa      	ldrb	r2, [r7, #3]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d107      	bne.n	8005ce4 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_MSC.DataOut(pdev, epnum);
 8005cd4:	4b09      	ldr	r3, [pc, #36]	; (8005cfc <USBD_COMPOSITE_DataOut+0x6c>)
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	78fa      	ldrb	r2, [r7, #3]
 8005cda:	4611      	mov	r1, r2
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	4798      	blx	r3
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	e000      	b.n	8005ce6 <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8005ce4:	2303      	movs	r3, #3
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20008d2c 	.word	0x20008d2c
 8005cf4:	2000009c 	.word	0x2000009c
 8005cf8:	200001bb 	.word	0x200001bb
 8005cfc:	200001bc 	.word	0x200001bc

08005d00 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2262      	movs	r2, #98	; 0x62
 8005d0c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8005d0e:	4b03      	ldr	r3, [pc, #12]	; (8005d1c <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	20008fc0 	.word	0x20008fc0

08005d20 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2262      	movs	r2, #98	; 0x62
 8005d2c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 8005d2e:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	20008f5c 	.word	0x20008f5c

08005d40 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2262      	movs	r2, #98	; 0x62
 8005d4c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8005d4e:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	20008fc0 	.word	0x20008fc0

08005d60 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	220a      	movs	r2, #10
 8005d6c:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8005d6e:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	200001b0 	.word	0x200001b0

08005d80 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08a      	sub	sp, #40	; 0x28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8005d8e:	4b20      	ldr	r3, [pc, #128]	; (8005e10 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	7afa      	ldrb	r2, [r7, #11]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d836      	bhi.n	8005e06 <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 8005d98:	2300      	movs	r3, #0
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	f107 0318 	add.w	r3, r7, #24
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005da8:	2300      	movs	r3, #0
 8005daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005dae:	e01a      	b.n	8005de6 <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8005db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005db4:	4a17      	ldr	r2, [pc, #92]	; (8005e14 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 8005db6:	5cd3      	ldrb	r3, [r2, r3]
 8005db8:	7afa      	ldrb	r2, [r7, #11]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d10e      	bne.n	8005ddc <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8005dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dc2:	f107 0014 	add.w	r0, r7, #20
 8005dc6:	4a14      	ldr	r2, [pc, #80]	; (8005e18 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 8005dc8:	2110      	movs	r1, #16
 8005dca:	f006 fafb 	bl	800c3c4 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8005dce:	f107 0314 	add.w	r3, r7, #20
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	4911      	ldr	r1, [pc, #68]	; (8005e1c <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f003 f877 	bl	8008eca <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005de0:	3301      	adds	r3, #1
 8005de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0e0      	beq.n	8005db0 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)UVC_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_MSC == 1)
    if (index == MSC_BOT_STR_DESC_IDX)
 8005dee:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	7afa      	ldrb	r2, [r7, #11]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d104      	bne.n	8005e02 <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)MSC_BOT_STR_DESC, USBD_StrDesc, length);
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	4908      	ldr	r1, [pc, #32]	; (8005e1c <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8005dfc:	4809      	ldr	r0, [pc, #36]	; (8005e24 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 8005dfe:	f003 f864 	bl	8008eca <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8005e04:	e000      	b.n	8005e08 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8005e06:	2300      	movs	r3, #0
  }
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3728      	adds	r7, #40	; 0x28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	200001ac 	.word	0x200001ac
 8005e14:	20008d3c 	.word	0x20008d3c
 8005e18:	0800d604 	.word	0x0800d604
 8005e1c:	20009024 	.word	0x20009024
 8005e20:	20009065 	.word	0x20009065
 8005e24:	0800d614 	.word	0x0800d614

08005e28 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8005e28:	b590      	push	{r4, r7, lr}
 8005e2a:	b089      	sub	sp, #36	; 0x24
 8005e2c:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 8005e36:	2381      	movs	r3, #129	; 0x81
 8005e38:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	727b      	strb	r3, [r7, #9]

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8005e42:	4b74      	ldr	r3, [pc, #464]	; (8006014 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	1d3a      	adds	r2, r7, #4
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4798      	blx	r3
 8005e4c:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8005e4e:	7a7b      	ldrb	r3, [r7, #9]
 8005e50:	3301      	adds	r3, #1
 8005e52:	b2d8      	uxtb	r0, r3
 8005e54:	7afb      	ldrb	r3, [r7, #11]
 8005e56:	3301      	adds	r3, #1
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	4a6f      	ldr	r2, [pc, #444]	; (8006018 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005e5c:	7812      	ldrb	r2, [r2, #0]
 8005e5e:	7afc      	ldrb	r4, [r7, #11]
 8005e60:	7a79      	ldrb	r1, [r7, #9]
 8005e62:	9202      	str	r2, [sp, #8]
 8005e64:	7aba      	ldrb	r2, [r7, #10]
 8005e66:	9201      	str	r2, [sp, #4]
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	4623      	mov	r3, r4
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f7ff fd88 	bl	8005984 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3309      	adds	r3, #9
 8005e78:	88ba      	ldrh	r2, [r7, #4]
 8005e7a:	3a09      	subs	r2, #9
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4867      	ldr	r0, [pc, #412]	; (800601c <USBD_COMPOSITE_Mount_Class+0x1f4>)
 8005e80:	f006 fbe9 	bl	800c656 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8005e84:	4b63      	ldr	r3, [pc, #396]	; (8006014 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8005e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e88:	1d3a      	adds	r2, r7, #4
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4798      	blx	r3
 8005e8e:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8005e90:	7a7b      	ldrb	r3, [r7, #9]
 8005e92:	3301      	adds	r3, #1
 8005e94:	b2d8      	uxtb	r0, r3
 8005e96:	7afb      	ldrb	r3, [r7, #11]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	4a5e      	ldr	r2, [pc, #376]	; (8006018 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005e9e:	7812      	ldrb	r2, [r2, #0]
 8005ea0:	7afc      	ldrb	r4, [r7, #11]
 8005ea2:	7a79      	ldrb	r1, [r7, #9]
 8005ea4:	9202      	str	r2, [sp, #8]
 8005ea6:	7aba      	ldrb	r2, [r7, #10]
 8005ea8:	9201      	str	r2, [sp, #4]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	4623      	mov	r3, r4
 8005eae:	4602      	mov	r2, r0
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7ff fd67 	bl	8005984 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3309      	adds	r3, #9
 8005eba:	88ba      	ldrh	r2, [r7, #4]
 8005ebc:	3a09      	subs	r2, #9
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	4857      	ldr	r0, [pc, #348]	; (8006020 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 8005ec2:	f006 fbc8 	bl	800c656 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 8005ec6:	7afb      	ldrb	r3, [r7, #11]
 8005ec8:	3302      	adds	r3, #2
 8005eca:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 8005ecc:	7abb      	ldrb	r3, [r7, #10]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 8005ed2:	7a7b      	ldrb	r3, [r7, #9]
 8005ed4:	3302      	adds	r3, #2
 8005ed6:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 8005ed8:	4b4f      	ldr	r3, [pc, #316]	; (8006018 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	4b4d      	ldr	r3, [pc, #308]	; (8006018 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005ee2:	701a      	strb	r2, [r3, #0]
  in_ep_track += 1;
  interface_no_track += 2;
  USBD_Track_String_Index += 1;
#endif
#if (USBD_USE_MSC == 1)
  ptr = USBD_MSC.GetFSConfigDescriptor(&len);
 8005ee4:	4b4f      	ldr	r3, [pc, #316]	; (8006024 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	1d3a      	adds	r2, r7, #4
 8005eea:	4610      	mov	r0, r2
 8005eec:	4798      	blx	r3
 8005eee:	60f8      	str	r0, [r7, #12]
  USBD_Update_MSC_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005ef0:	4b49      	ldr	r3, [pc, #292]	; (8006018 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	7ab8      	ldrb	r0, [r7, #10]
 8005ef6:	7afa      	ldrb	r2, [r7, #11]
 8005ef8:	7a79      	ldrb	r1, [r7, #9]
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	4603      	mov	r3, r0
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 fac0 	bl	8006484 <USBD_Update_MSC_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_MSC_DESC, ptr + 0x09, len - 0x09);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3309      	adds	r3, #9
 8005f08:	88ba      	ldrh	r2, [r7, #4]
 8005f0a:	3a09      	subs	r2, #9
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4846      	ldr	r0, [pc, #280]	; (8006028 <USBD_COMPOSITE_Mount_Class+0x200>)
 8005f10:	f006 fba1 	bl	800c656 <memcpy>

  ptr = USBD_MSC.GetHSConfigDescriptor(&len);
 8005f14:	4b43      	ldr	r3, [pc, #268]	; (8006024 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 8005f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f18:	1d3a      	adds	r2, r7, #4
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	4798      	blx	r3
 8005f1e:	60f8      	str	r0, [r7, #12]
  USBD_Update_MSC_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005f20:	4b3d      	ldr	r3, [pc, #244]	; (8006018 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	7ab8      	ldrb	r0, [r7, #10]
 8005f26:	7afa      	ldrb	r2, [r7, #11]
 8005f28:	7a79      	ldrb	r1, [r7, #9]
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 faa8 	bl	8006484 <USBD_Update_MSC_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_MSC_DESC, ptr + 0x09, len - 0x09);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	3309      	adds	r3, #9
 8005f38:	88ba      	ldrh	r2, [r7, #4]
 8005f3a:	3a09      	subs	r2, #9
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	483b      	ldr	r0, [pc, #236]	; (800602c <USBD_COMPOSITE_Mount_Class+0x204>)
 8005f40:	f006 fb89 	bl	800c656 <memcpy>
  in_ep_track += 1;
 8005f44:	7afb      	ldrb	r3, [r7, #11]
 8005f46:	3301      	adds	r3, #1
 8005f48:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 8005f4a:	7abb      	ldrb	r3, [r7, #10]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 8005f50:	7a7b      	ldrb	r3, [r7, #9]
 8005f52:	3301      	adds	r3, #1
 8005f54:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8005f56:	4b30      	ldr	r3, [pc, #192]	; (8006018 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	4b2e      	ldr	r3, [pc, #184]	; (8006018 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005f60:	701a      	strb	r2, [r3, #0]
  out_ep_track += 1;
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 8005f62:	2362      	movs	r3, #98	; 0x62
 8005f64:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 8005f66:	4b32      	ldr	r3, [pc, #200]	; (8006030 <USBD_COMPOSITE_Mount_Class+0x208>)
 8005f68:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2209      	movs	r2, #9
 8005f6e:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	2202      	movs	r2, #2
 8005f76:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	88fa      	ldrh	r2, [r7, #6]
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8005f82:	88fb      	ldrh	r3, [r7, #6]
 8005f84:	0a1b      	lsrs	r3, r3, #8
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3303      	adds	r3, #3
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3304      	adds	r3, #4
 8005f94:	7a7a      	ldrb	r2, [r7, #9]
 8005f96:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3305      	adds	r3, #5
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3306      	adds	r3, #6
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3307      	adds	r3, #7
 8005fac:	22c0      	movs	r2, #192	; 0xc0
 8005fae:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	2232      	movs	r2, #50	; 0x32
 8005fb6:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 8005fb8:	4b1e      	ldr	r3, [pc, #120]	; (8006034 <USBD_COMPOSITE_Mount_Class+0x20c>)
 8005fba:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2209      	movs	r2, #9
 8005fc0:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3302      	adds	r3, #2
 8005fce:	88fa      	ldrh	r2, [r7, #6]
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8005fd4:	88fb      	ldrh	r3, [r7, #6]
 8005fd6:	0a1b      	lsrs	r3, r3, #8
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3303      	adds	r3, #3
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	7a7a      	ldrb	r2, [r7, #9]
 8005fe8:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3305      	adds	r3, #5
 8005fee:	2201      	movs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3306      	adds	r3, #6
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3307      	adds	r3, #7
 8005ffe:	22c0      	movs	r2, #192	; 0xc0
 8006000:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3308      	adds	r3, #8
 8006006:	2232      	movs	r2, #50	; 0x32
 8006008:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800600a:	bf00      	nop
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	bd90      	pop	{r4, r7, pc}
 8006012:	bf00      	nop
 8006014:	2000009c 	.word	0x2000009c
 8006018:	200001ac 	.word	0x200001ac
 800601c:	20008f65 	.word	0x20008f65
 8006020:	20008fc9 	.word	0x20008fc9
 8006024:	200001bc 	.word	0x200001bc
 8006028:	20008fa7 	.word	0x20008fa7
 800602c:	2000900b 	.word	0x2000900b
 8006030:	20008fc0 	.word	0x20008fc0
 8006034:	20008f5c 	.word	0x20008f5c

08006038 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = &USBD_MSC_Instance;
 8006044:	4b37      	ldr	r3, [pc, #220]	; (8006124 <USBD_MSC_Init+0xec>)
 8006046:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d105      	bne.n	800605a <USBD_MSC_Init+0x22>
  {
    pdev->pClassData_MSC = NULL;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
    return (uint8_t)USBD_EMEM;
 8006056:	2302      	movs	r3, #2
 8006058:	e060      	b.n	800611c <USBD_MSC_Init+0xe4>
  }

  pdev->pClassData_MSC = (void *)hmsc;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	7c1b      	ldrb	r3, [r3, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d12b      	bne.n	80060c2 <USBD_MSC_Init+0x8a>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800606a:	4b2f      	ldr	r3, [pc, #188]	; (8006128 <USBD_MSC_Init+0xf0>)
 800606c:	7819      	ldrb	r1, [r3, #0]
 800606e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006072:	2202      	movs	r2, #2
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f003 f972 	bl	800935e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 800607a:	4b2b      	ldr	r3, [pc, #172]	; (8006128 <USBD_MSC_Init+0xf0>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	f003 020f 	and.w	r2, r3, #15
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006092:	2201      	movs	r2, #1
 8006094:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006096:	4b25      	ldr	r3, [pc, #148]	; (800612c <USBD_MSC_Init+0xf4>)
 8006098:	7819      	ldrb	r1, [r3, #0]
 800609a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800609e:	2202      	movs	r2, #2
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f003 f95c 	bl	800935e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 80060a6:	4b21      	ldr	r3, [pc, #132]	; (800612c <USBD_MSC_Init+0xf4>)
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	f003 020f 	and.w	r2, r3, #15
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	440b      	add	r3, r1
 80060ba:	3324      	adds	r3, #36	; 0x24
 80060bc:	2201      	movs	r2, #1
 80060be:	801a      	strh	r2, [r3, #0]
 80060c0:	e028      	b.n	8006114 <USBD_MSC_Init+0xdc>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80060c2:	4b19      	ldr	r3, [pc, #100]	; (8006128 <USBD_MSC_Init+0xf0>)
 80060c4:	7819      	ldrb	r1, [r3, #0]
 80060c6:	2340      	movs	r3, #64	; 0x40
 80060c8:	2202      	movs	r2, #2
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f003 f947 	bl	800935e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 80060d0:	4b15      	ldr	r3, [pc, #84]	; (8006128 <USBD_MSC_Init+0xf0>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	f003 020f 	and.w	r2, r3, #15
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060e8:	2201      	movs	r2, #1
 80060ea:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80060ec:	4b0f      	ldr	r3, [pc, #60]	; (800612c <USBD_MSC_Init+0xf4>)
 80060ee:	7819      	ldrb	r1, [r3, #0]
 80060f0:	2340      	movs	r3, #64	; 0x40
 80060f2:	2202      	movs	r2, #2
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f003 f932 	bl	800935e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 80060fa:	4b0c      	ldr	r3, [pc, #48]	; (800612c <USBD_MSC_Init+0xf4>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	f003 020f 	and.w	r2, r3, #15
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	3324      	adds	r3, #36	; 0x24
 8006110:	2201      	movs	r2, #1
 8006112:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f9ed 	bl	80064f4 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	20009068 	.word	0x20009068
 8006128:	200001bb 	.word	0x200001bb
 800612c:	200001ba 	.word	0x200001ba

08006130 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_OUT_EP);
 800613c:	4b1b      	ldr	r3, [pc, #108]	; (80061ac <USBD_MSC_DeInit+0x7c>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f003 f931 	bl	80093aa <USBD_LL_CloseEP>
  pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 0U;
 8006148:	4b18      	ldr	r3, [pc, #96]	; (80061ac <USBD_MSC_DeInit+0x7c>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	f003 020f 	and.w	r2, r3, #15
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	440b      	add	r3, r1
 800615c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006160:	2200      	movs	r2, #0
 8006162:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_IN_EP);
 8006164:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <USBD_MSC_DeInit+0x80>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f003 f91d 	bl	80093aa <USBD_LL_CloseEP>
  pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 0U;
 8006170:	4b0f      	ldr	r3, [pc, #60]	; (80061b0 <USBD_MSC_DeInit+0x80>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	f003 020f 	and.w	r2, r3, #15
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	440b      	add	r3, r1
 8006184:	3324      	adds	r3, #36	; 0x24
 8006186:	2200      	movs	r2, #0
 8006188:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassData_MSC != NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006190:	2b00      	cmp	r3, #0
 8006192:	d006      	beq.n	80061a2 <USBD_MSC_DeInit+0x72>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fa1f 	bl	80065d8 <MSC_BOT_DeInit>
#if (0)
    (void)USBD_free(pdev->pClassData_MSC);
#endif
    pdev->pClassData_MSC = NULL;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
  }

  return (uint8_t)USBD_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	200001bb 	.word	0x200001bb
 80061b0:	200001ba 	.word	0x200001ba

080061b4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80061c4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e0db      	b.n	8006390 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d04e      	beq.n	8006282 <USBD_MSC_Setup+0xce>
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	f040 80cb 	bne.w	8006380 <USBD_MSC_Setup+0x1cc>
  {
  /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	785b      	ldrb	r3, [r3, #1]
 80061ee:	2bfe      	cmp	r3, #254	; 0xfe
 80061f0:	d002      	beq.n	80061f8 <USBD_MSC_Setup+0x44>
 80061f2:	2bff      	cmp	r3, #255	; 0xff
 80061f4:	d025      	beq.n	8006242 <USBD_MSC_Setup+0x8e>
 80061f6:	e03c      	b.n	8006272 <USBD_MSC_Setup+0xbe>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue == 0U) && (req->wLength == 1U) &&
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	885b      	ldrh	r3, [r3, #2]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d119      	bne.n	8006234 <USBD_MSC_Setup+0x80>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	88db      	ldrh	r3, [r3, #6]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d115      	bne.n	8006234 <USBD_MSC_Setup+0x80>
          ((req->bmRequest & 0x80U) == 0x80U))
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	b25b      	sxtb	r3, r3
      if ((req->wValue == 0U) && (req->wLength == 1U) &&
 800620e:	2b00      	cmp	r3, #0
 8006210:	da10      	bge.n	8006234 <USBD_MSC_Setup+0x80>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetMaxLun();
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	4798      	blx	r3
 800621c:	4603      	mov	r3, r0
 800621e:	461a      	mov	r2, r3
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	2201      	movs	r2, #1
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f002 fead 	bl	8008f8a <USBD_CtlSendData>
 8006230:	bf00      	nop
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006232:	e025      	b.n	8006280 <USBD_MSC_Setup+0xcc>
        USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f002 fe36 	bl	8008ea8 <USBD_CtlError>
        ret = USBD_FAIL;
 800623c:	2303      	movs	r3, #3
 800623e:	75fb      	strb	r3, [r7, #23]
      break;
 8006240:	e01e      	b.n	8006280 <USBD_MSC_Setup+0xcc>

    case BOT_RESET:
      if ((req->wValue == 0U) && (req->wLength == 0U) &&
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	885b      	ldrh	r3, [r3, #2]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10c      	bne.n	8006264 <USBD_MSC_Setup+0xb0>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	88db      	ldrh	r3, [r3, #6]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d108      	bne.n	8006264 <USBD_MSC_Setup+0xb0>
          ((req->bmRequest & 0x80U) != 0x80U))
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	b25b      	sxtb	r3, r3
      if ((req->wValue == 0U) && (req->wLength == 0U) &&
 8006258:	2b00      	cmp	r3, #0
 800625a:	db03      	blt.n	8006264 <USBD_MSC_Setup+0xb0>
      {
        MSC_BOT_Reset(pdev);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f98b 	bl	8006578 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006262:	e00d      	b.n	8006280 <USBD_MSC_Setup+0xcc>
        USBD_CtlError(pdev, req);
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f002 fe1e 	bl	8008ea8 <USBD_CtlError>
        ret = USBD_FAIL;
 800626c:	2303      	movs	r3, #3
 800626e:	75fb      	strb	r3, [r7, #23]
      break;
 8006270:	e006      	b.n	8006280 <USBD_MSC_Setup+0xcc>

    default:
      USBD_CtlError(pdev, req);
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f002 fe17 	bl	8008ea8 <USBD_CtlError>
      ret = USBD_FAIL;
 800627a:	2303      	movs	r3, #3
 800627c:	75fb      	strb	r3, [r7, #23]
      break;
 800627e:	bf00      	nop
    }
    break;
 8006280:	e085      	b.n	800638e <USBD_MSC_Setup+0x1da>
  /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	2b0b      	cmp	r3, #11
 8006288:	d871      	bhi.n	800636e <USBD_MSC_Setup+0x1ba>
 800628a:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <USBD_MSC_Setup+0xdc>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	080062c1 	.word	0x080062c1
 8006294:	0800633d 	.word	0x0800633d
 8006298:	0800636f 	.word	0x0800636f
 800629c:	0800636f 	.word	0x0800636f
 80062a0:	0800636f 	.word	0x0800636f
 80062a4:	0800636f 	.word	0x0800636f
 80062a8:	0800636f 	.word	0x0800636f
 80062ac:	0800636f 	.word	0x0800636f
 80062b0:	0800636f 	.word	0x0800636f
 80062b4:	0800636f 	.word	0x0800636f
 80062b8:	080062eb 	.word	0x080062eb
 80062bc:	08006315 	.word	0x08006315
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b03      	cmp	r3, #3
 80062ca:	d107      	bne.n	80062dc <USBD_MSC_Setup+0x128>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062cc:	f107 030e 	add.w	r3, r7, #14
 80062d0:	2202      	movs	r2, #2
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f002 fe58 	bl	8008f8a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80062da:	e050      	b.n	800637e <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80062dc:	6839      	ldr	r1, [r7, #0]
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f002 fde2 	bl	8008ea8 <USBD_CtlError>
        ret = USBD_FAIL;
 80062e4:	2303      	movs	r3, #3
 80062e6:	75fb      	strb	r3, [r7, #23]
      break;
 80062e8:	e049      	b.n	800637e <USBD_MSC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d107      	bne.n	8006306 <USBD_MSC_Setup+0x152>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	3304      	adds	r3, #4
 80062fa:	2201      	movs	r2, #1
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f002 fe43 	bl	8008f8a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006304:	e03b      	b.n	800637e <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f002 fdcd 	bl	8008ea8 <USBD_CtlError>
        ret = USBD_FAIL;
 800630e:	2303      	movs	r3, #3
 8006310:	75fb      	strb	r3, [r7, #23]
      break;
 8006312:	e034      	b.n	800637e <USBD_MSC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b03      	cmp	r3, #3
 800631e:	d106      	bne.n	800632e <USBD_MSC_Setup+0x17a>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	885b      	ldrh	r3, [r3, #2]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	461a      	mov	r2, r3
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800632c:	e027      	b.n	800637e <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f002 fdb9 	bl	8008ea8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006336:	2303      	movs	r3, #3
 8006338:	75fb      	strb	r3, [r7, #23]
      break;
 800633a:	e020      	b.n	800637e <USBD_MSC_Setup+0x1ca>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b03      	cmp	r3, #3
 8006346:	d119      	bne.n	800637c <USBD_MSC_Setup+0x1c8>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	885b      	ldrh	r3, [r3, #2]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d115      	bne.n	800637c <USBD_MSC_Setup+0x1c8>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	889b      	ldrh	r3, [r3, #4]
 8006354:	b2db      	uxtb	r3, r3
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f003 f845 	bl	80093e8 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	889b      	ldrh	r3, [r3, #4]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	4619      	mov	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fae6 	bl	8006938 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800636c:	e006      	b.n	800637c <USBD_MSC_Setup+0x1c8>

    default:
      USBD_CtlError(pdev, req);
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f002 fd99 	bl	8008ea8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006376:	2303      	movs	r3, #3
 8006378:	75fb      	strb	r3, [r7, #23]
      break;
 800637a:	e000      	b.n	800637e <USBD_MSC_Setup+0x1ca>
      break;
 800637c:	bf00      	nop
    }
    break;
 800637e:	e006      	b.n	800638e <USBD_MSC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f002 fd90 	bl	8008ea8 <USBD_CtlError>
    ret = USBD_FAIL;
 8006388:	2303      	movs	r3, #3
 800638a:	75fb      	strb	r3, [r7, #23]
    break;
 800638c:	bf00      	nop
  }

  return (uint8_t)ret;
 800638e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80063a4:	78fb      	ldrb	r3, [r7, #3]
 80063a6:	4619      	mov	r1, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f929 	bl	8006600 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f94f 	bl	800666c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80063e6:	4b03      	ldr	r3, [pc, #12]	; (80063f4 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	200001f8 	.word	0x200001f8

080063f8 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2220      	movs	r2, #32
 8006404:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006406:	4b03      	ldr	r3, [pc, #12]	; (8006414 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	20000218 	.word	0x20000218

08006418 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2220      	movs	r2, #32
 8006424:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006426:	4b03      	ldr	r3, [pc, #12]	; (8006434 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	20000238 	.word	0x20000238

08006438 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	220a      	movs	r2, #10
 8006444:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006446:	4b03      	ldr	r3, [pc, #12]	; (8006454 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	20000258 	.word	0x20000258

08006458 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006468:	2303      	movs	r3, #3
 800646a:	e004      	b.n	8006476 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData_MSC = fops;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

  return (uint8_t)USBD_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <USBD_Update_MSC_DESC>:

void USBD_Update_MSC_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	4608      	mov	r0, r1
 800648e:	4611      	mov	r1, r2
 8006490:	461a      	mov	r2, r3
 8006492:	4603      	mov	r3, r0
 8006494:	70fb      	strb	r3, [r7, #3]
 8006496:	460b      	mov	r3, r1
 8006498:	70bb      	strb	r3, [r7, #2]
 800649a:	4613      	mov	r3, r2
 800649c:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	330b      	adds	r3, #11
 80064a2:	78fa      	ldrb	r2, [r7, #3]
 80064a4:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3311      	adds	r3, #17
 80064aa:	7c3a      	ldrb	r2, [r7, #16]
 80064ac:	701a      	strb	r2, [r3, #0]
  desc[20] = in_ep;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	3314      	adds	r3, #20
 80064b2:	78ba      	ldrb	r2, [r7, #2]
 80064b4:	701a      	strb	r2, [r3, #0]
  desc[27] = out_ep;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	331b      	adds	r3, #27
 80064ba:	787a      	ldrb	r2, [r7, #1]
 80064bc:	701a      	strb	r2, [r3, #0]

  MSC_IN_EP = in_ep;
 80064be:	4a09      	ldr	r2, [pc, #36]	; (80064e4 <USBD_Update_MSC_DESC+0x60>)
 80064c0:	78bb      	ldrb	r3, [r7, #2]
 80064c2:	7013      	strb	r3, [r2, #0]
  MSC_OUT_EP = out_ep;
 80064c4:	4a08      	ldr	r2, [pc, #32]	; (80064e8 <USBD_Update_MSC_DESC+0x64>)
 80064c6:	787b      	ldrb	r3, [r7, #1]
 80064c8:	7013      	strb	r3, [r2, #0]
  MSC_ITF_NBR = itf_no;
 80064ca:	4a08      	ldr	r2, [pc, #32]	; (80064ec <USBD_Update_MSC_DESC+0x68>)
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	7013      	strb	r3, [r2, #0]
  MSC_BOT_STR_DESC_IDX = str_idx;
 80064d0:	4a07      	ldr	r2, [pc, #28]	; (80064f0 <USBD_Update_MSC_DESC+0x6c>)
 80064d2:	7c3b      	ldrb	r3, [r7, #16]
 80064d4:	7013      	strb	r3, [r2, #0]
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	200001ba 	.word	0x200001ba
 80064e8:	200001bb 	.word	0x200001bb
 80064ec:	20009064 	.word	0x20009064
 80064f0:	20009065 	.word	0x20009065

080064f4 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006502:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d02d      	beq.n	8006566 <MSC_BOT_Init+0x72>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Init(0U);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2000      	movs	r0, #0
 8006538:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_OUT_EP);
 800653a:	4b0d      	ldr	r3, [pc, #52]	; (8006570 <MSC_BOT_Init+0x7c>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f002 ff51 	bl	80093e8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_IN_EP);
 8006546:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <MSC_BOT_Init+0x80>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f002 ff4b 	bl	80093e8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 8006552:	4b07      	ldr	r3, [pc, #28]	; (8006570 <MSC_BOT_Init+0x7c>)
 8006554:	7819      	ldrb	r1, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800655c:	231f      	movs	r3, #31
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f003 f80b 	bl	800957a <USBD_LL_PrepareReceive>
 8006564:	e000      	b.n	8006568 <MSC_BOT_Init+0x74>
    return;
 8006566:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	200001bb 	.word	0x200001bb
 8006574:	200001ba 	.word	0x200001ba

08006578 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006586:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d01b      	beq.n	80065c6 <MSC_BOT_Reset+0x4e>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2201      	movs	r2, #1
 8006598:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_IN_EP);
 800659a:	4b0d      	ldr	r3, [pc, #52]	; (80065d0 <MSC_BOT_Reset+0x58>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f002 ff5f 	bl	8009464 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_OUT_EP);
 80065a6:	4b0b      	ldr	r3, [pc, #44]	; (80065d4 <MSC_BOT_Reset+0x5c>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f002 ff59 	bl	8009464 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 80065b2:	4b08      	ldr	r3, [pc, #32]	; (80065d4 <MSC_BOT_Reset+0x5c>)
 80065b4:	7819      	ldrb	r1, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80065bc:	231f      	movs	r3, #31
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f002 ffdb 	bl	800957a <USBD_LL_PrepareReceive>
 80065c4:	e000      	b.n	80065c8 <MSC_BOT_Reset+0x50>
    return;
 80065c6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	200001ba 	.word	0x200001ba
 80065d4:	200001bb 	.word	0x200001bb

080065d8 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80065e6:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	721a      	strb	r2, [r3, #8]
  }
}
 80065f4:	bf00      	nop
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006612:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d020      	beq.n	800665c <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	7a1b      	ldrb	r3, [r3, #8]
 800661e:	2b02      	cmp	r3, #2
 8006620:	d005      	beq.n	800662e <MSC_BOT_DataIn+0x2e>
 8006622:	2b02      	cmp	r3, #2
 8006624:	db1c      	blt.n	8006660 <MSC_BOT_DataIn+0x60>
 8006626:	3b03      	subs	r3, #3
 8006628:	2b01      	cmp	r3, #1
 800662a:	d819      	bhi.n	8006660 <MSC_BOT_DataIn+0x60>
 800662c:	e011      	b.n	8006652 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800663a:	461a      	mov	r2, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f9b1 	bl	80069a4 <SCSI_ProcessCmd>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	da0d      	bge.n	8006664 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006648:	2101      	movs	r1, #1
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f900 	bl	8006850 <MSC_BOT_SendCSW>
      }
      break;
 8006650:	e008      	b.n	8006664 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006652:	2100      	movs	r1, #0
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f8fb 	bl	8006850 <MSC_BOT_SendCSW>
      break;
 800665a:	e004      	b.n	8006666 <MSC_BOT_DataIn+0x66>
    return;
 800665c:	bf00      	nop
 800665e:	e002      	b.n	8006666 <MSC_BOT_DataIn+0x66>

    default:
      break;
 8006660:	bf00      	nop
 8006662:	e000      	b.n	8006666 <MSC_BOT_DataIn+0x66>
      break;
 8006664:	bf00      	nop
  }
}
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800667e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d01c      	beq.n	80066c0 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	7a1b      	ldrb	r3, [r3, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <MSC_BOT_DataOut+0x28>
 800668e:	2b01      	cmp	r3, #1
 8006690:	d004      	beq.n	800669c <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006692:	e018      	b.n	80066c6 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f819 	bl	80066cc <MSC_BOT_CBW_Decode>
      break;
 800669a:	e014      	b.n	80066c6 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80066a8:	461a      	mov	r2, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f97a 	bl	80069a4 <SCSI_ProcessCmd>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	da06      	bge.n	80066c4 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80066b6:	2101      	movs	r1, #1
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f8c9 	bl	8006850 <MSC_BOT_SendCSW>
      break;
 80066be:	e001      	b.n	80066c4 <MSC_BOT_DataOut+0x58>
    return;
 80066c0:	bf00      	nop
 80066c2:	e000      	b.n	80066c6 <MSC_BOT_DataOut+0x5a>
      break;
 80066c4:	bf00      	nop
  }
}
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80066da:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d079      	beq.n	80067d6 <MSC_BOT_CBW_Decode+0x10a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 80066fa:	4b3a      	ldr	r3, [pc, #232]	; (80067e4 <MSC_BOT_CBW_Decode+0x118>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f002 ff5b 	bl	80095bc <USBD_LL_GetRxDataSize>
 8006706:	4603      	mov	r3, r0
 8006708:	2b1f      	cmp	r3, #31
 800670a:	d114      	bne.n	8006736 <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 8006712:	4a35      	ldr	r2, [pc, #212]	; (80067e8 <MSC_BOT_CBW_Decode+0x11c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d10e      	bne.n	8006736 <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800671e:	2b01      	cmp	r3, #1
 8006720:	d809      	bhi.n	8006736 <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8006728:	2b00      	cmp	r3, #0
 800672a:	d004      	beq.n	8006736 <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bCBLength > 16U))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006732:	2b10      	cmp	r3, #16
 8006734:	d90e      	bls.n	8006754 <MSC_BOT_CBW_Decode+0x88>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800673c:	2320      	movs	r3, #32
 800673e:	2205      	movs	r2, #5
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fdda 	bl	80072fa <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2202      	movs	r2, #2
 800674a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f8b5 	bl	80068bc <MSC_BOT_Abort>
 8006752:	e043      	b.n	80067dc <MSC_BOT_CBW_Decode+0x110>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006760:	461a      	mov	r2, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f91e 	bl	80069a4 <SCSI_ProcessCmd>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	da0c      	bge.n	8006788 <MSC_BOT_CBW_Decode+0xbc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	7a1b      	ldrb	r3, [r3, #8]
 8006772:	2b05      	cmp	r3, #5
 8006774:	d104      	bne.n	8006780 <MSC_BOT_CBW_Decode+0xb4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006776:	2101      	movs	r1, #1
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f869 	bl	8006850 <MSC_BOT_SendCSW>
 800677e:	e02d      	b.n	80067dc <MSC_BOT_CBW_Decode+0x110>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f89b 	bl	80068bc <MSC_BOT_Abort>
 8006786:	e029      	b.n	80067dc <MSC_BOT_CBW_Decode+0x110>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	7a1b      	ldrb	r3, [r3, #8]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d024      	beq.n	80067da <MSC_BOT_CBW_Decode+0x10e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006794:	2b01      	cmp	r3, #1
 8006796:	d020      	beq.n	80067da <MSC_BOT_CBW_Decode+0x10e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800679c:	2b03      	cmp	r3, #3
 800679e:	d01c      	beq.n	80067da <MSC_BOT_CBW_Decode+0x10e>
    {
      if (hmsc->bot_data_length > 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d009      	beq.n	80067bc <MSC_BOT_CBW_Decode+0xf0>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f103 0110 	add.w	r1, r3, #16
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	461a      	mov	r2, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f819 	bl	80067ec <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80067ba:	e00f      	b.n	80067dc <MSC_BOT_CBW_Decode+0x110>
      }
      else if (hmsc->bot_data_length == 0U)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d104      	bne.n	80067ce <MSC_BOT_CBW_Decode+0x102>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80067c4:	2100      	movs	r1, #0
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f842 	bl	8006850 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80067cc:	e006      	b.n	80067dc <MSC_BOT_CBW_Decode+0x110>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f874 	bl	80068bc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80067d4:	e002      	b.n	80067dc <MSC_BOT_CBW_Decode+0x110>
    return;
 80067d6:	bf00      	nop
 80067d8:	e000      	b.n	80067dc <MSC_BOT_CBW_Decode+0x110>
      }
    }
    else
    {
      return;
 80067da:	bf00      	nop
    }
  }
}
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	200001bb 	.word	0x200001bb
 80067e8:	43425355 	.word	0x43425355

080067ec <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80067fe:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	4293      	cmp	r3, r2
 800680a:	bf28      	it	cs
 800680c:	4613      	movcs	r3, r2
 800680e:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d016      	beq.n	8006844 <MSC_BOT_SendData+0x58>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	1ad2      	subs	r2, r2, r3
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2204      	movs	r2, #4
 8006832:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, pbuf, length);
 8006834:	4b05      	ldr	r3, [pc, #20]	; (800684c <MSC_BOT_SendData+0x60>)
 8006836:	7819      	ldrb	r1, [r3, #0]
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f002 fe7b 	bl	8009538 <USBD_LL_Transmit>
 8006842:	e000      	b.n	8006846 <MSC_BOT_SendData+0x5a>
    return;
 8006844:	bf00      	nop
}
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	200001ba 	.word	0x200001ba

08006850 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006862:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01d      	beq.n	80068a6 <MSC_BOT_SendCSW+0x56>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4a10      	ldr	r2, [pc, #64]	; (80068b0 <MSC_BOT_SendCSW+0x60>)
 800686e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	78fa      	ldrb	r2, [r7, #3]
 8006876:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, (uint8_t *)&hmsc->csw,
 8006880:	4b0c      	ldr	r3, [pc, #48]	; (80068b4 <MSC_BOT_SendCSW+0x64>)
 8006882:	7819      	ldrb	r1, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800688a:	230d      	movs	r3, #13
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f002 fe53 	bl	8009538 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <MSC_BOT_SendCSW+0x68>)
 8006894:	7819      	ldrb	r1, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800689c:	231f      	movs	r3, #31
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f002 fe6b 	bl	800957a <USBD_LL_PrepareReceive>
 80068a4:	e000      	b.n	80068a8 <MSC_BOT_SendCSW+0x58>
    return;
 80068a6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	53425355 	.word	0x53425355
 80068b4:	200001ba 	.word	0x200001ba
 80068b8:	200001bb 	.word	0x200001bb

080068bc <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80068ca:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d02a      	beq.n	8006928 <MSC_BOT_Abort+0x6c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10e      	bne.n	80068fa <MSC_BOT_Abort+0x3e>
      (hmsc->cbw.dDataLength != 0U) &&
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d009      	beq.n	80068fa <MSC_BOT_Abort+0x3e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d105      	bne.n	80068fa <MSC_BOT_Abort+0x3e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 80068ee:	4b10      	ldr	r3, [pc, #64]	; (8006930 <MSC_BOT_Abort+0x74>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f002 fd96 	bl	8009426 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 80068fa:	4b0e      	ldr	r3, [pc, #56]	; (8006934 <MSC_BOT_Abort+0x78>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f002 fd90 	bl	8009426 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	7a5b      	ldrb	r3, [r3, #9]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d10d      	bne.n	800692a <MSC_BOT_Abort+0x6e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 800690e:	4b09      	ldr	r3, [pc, #36]	; (8006934 <MSC_BOT_Abort+0x78>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f002 fd86 	bl	8009426 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 800691a:	4b05      	ldr	r3, [pc, #20]	; (8006930 <MSC_BOT_Abort+0x74>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f002 fd80 	bl	8009426 <USBD_LL_StallEP>
 8006926:	e000      	b.n	800692a <MSC_BOT_Abort+0x6e>
    return;
 8006928:	bf00      	nop
  }
}
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	200001bb 	.word	0x200001bb
 8006934:	200001ba 	.word	0x200001ba

08006938 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800694a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01d      	beq.n	800698e <MSC_BOT_CplClrFeature+0x56>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	7a5b      	ldrb	r3, [r3, #9]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d10c      	bne.n	8006974 <MSC_BOT_CplClrFeature+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 800695a:	4b10      	ldr	r3, [pc, #64]	; (800699c <MSC_BOT_CplClrFeature+0x64>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f002 fd60 	bl	8009426 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 8006966:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <MSC_BOT_CplClrFeature+0x68>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f002 fd5a 	bl	8009426 <USBD_LL_StallEP>
 8006972:	e00f      	b.n	8006994 <MSC_BOT_CplClrFeature+0x5c>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006978:	2b00      	cmp	r3, #0
 800697a:	da0a      	bge.n	8006992 <MSC_BOT_CplClrFeature+0x5a>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	7a5b      	ldrb	r3, [r3, #9]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d006      	beq.n	8006992 <MSC_BOT_CplClrFeature+0x5a>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006984:	2101      	movs	r1, #1
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7ff ff62 	bl	8006850 <MSC_BOT_SendCSW>
 800698c:	e002      	b.n	8006994 <MSC_BOT_CplClrFeature+0x5c>
    return;
 800698e:	bf00      	nop
 8006990:	e000      	b.n	8006994 <MSC_BOT_CplClrFeature+0x5c>
  }
  else
  {
    return;
 8006992:	bf00      	nop
  }
}
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	200001ba 	.word	0x200001ba
 80069a0:	200001bb 	.word	0x200001bb

080069a4 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	460b      	mov	r3, r1
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80069b8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d102      	bne.n	80069c6 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 80069c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069c4:	e168      	b.n	8006c98 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2baa      	cmp	r3, #170	; 0xaa
 80069cc:	f000 8144 	beq.w	8006c58 <SCSI_ProcessCmd+0x2b4>
 80069d0:	2baa      	cmp	r3, #170	; 0xaa
 80069d2:	f300 8153 	bgt.w	8006c7c <SCSI_ProcessCmd+0x2d8>
 80069d6:	2ba8      	cmp	r3, #168	; 0xa8
 80069d8:	f000 812c 	beq.w	8006c34 <SCSI_ProcessCmd+0x290>
 80069dc:	2ba8      	cmp	r3, #168	; 0xa8
 80069de:	f300 814d 	bgt.w	8006c7c <SCSI_ProcessCmd+0x2d8>
 80069e2:	2b5a      	cmp	r3, #90	; 0x5a
 80069e4:	f300 80c0 	bgt.w	8006b68 <SCSI_ProcessCmd+0x1c4>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f2c0 8147 	blt.w	8006c7c <SCSI_ProcessCmd+0x2d8>
 80069ee:	2b5a      	cmp	r3, #90	; 0x5a
 80069f0:	f200 8144 	bhi.w	8006c7c <SCSI_ProcessCmd+0x2d8>
 80069f4:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <SCSI_ProcessCmd+0x58>)
 80069f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fa:	bf00      	nop
 80069fc:	08006b6f 	.word	0x08006b6f
 8006a00:	08006c7d 	.word	0x08006c7d
 8006a04:	08006c7d 	.word	0x08006c7d
 8006a08:	08006b81 	.word	0x08006b81
 8006a0c:	08006c7d 	.word	0x08006c7d
 8006a10:	08006c7d 	.word	0x08006c7d
 8006a14:	08006c7d 	.word	0x08006c7d
 8006a18:	08006c7d 	.word	0x08006c7d
 8006a1c:	08006c7d 	.word	0x08006c7d
 8006a20:	08006c7d 	.word	0x08006c7d
 8006a24:	08006c7d 	.word	0x08006c7d
 8006a28:	08006c7d 	.word	0x08006c7d
 8006a2c:	08006c7d 	.word	0x08006c7d
 8006a30:	08006c7d 	.word	0x08006c7d
 8006a34:	08006c7d 	.word	0x08006c7d
 8006a38:	08006c7d 	.word	0x08006c7d
 8006a3c:	08006c7d 	.word	0x08006c7d
 8006a40:	08006c7d 	.word	0x08006c7d
 8006a44:	08006b93 	.word	0x08006b93
 8006a48:	08006c7d 	.word	0x08006c7d
 8006a4c:	08006c7d 	.word	0x08006c7d
 8006a50:	08006c7d 	.word	0x08006c7d
 8006a54:	08006c7d 	.word	0x08006c7d
 8006a58:	08006c7d 	.word	0x08006c7d
 8006a5c:	08006c7d 	.word	0x08006c7d
 8006a60:	08006c7d 	.word	0x08006c7d
 8006a64:	08006bc9 	.word	0x08006bc9
 8006a68:	08006ba5 	.word	0x08006ba5
 8006a6c:	08006c7d 	.word	0x08006c7d
 8006a70:	08006c7d 	.word	0x08006c7d
 8006a74:	08006bb7 	.word	0x08006bb7
 8006a78:	08006c7d 	.word	0x08006c7d
 8006a7c:	08006c7d 	.word	0x08006c7d
 8006a80:	08006c7d 	.word	0x08006c7d
 8006a84:	08006c7d 	.word	0x08006c7d
 8006a88:	08006bed 	.word	0x08006bed
 8006a8c:	08006c7d 	.word	0x08006c7d
 8006a90:	08006bff 	.word	0x08006bff
 8006a94:	08006c7d 	.word	0x08006c7d
 8006a98:	08006c7d 	.word	0x08006c7d
 8006a9c:	08006c23 	.word	0x08006c23
 8006aa0:	08006c7d 	.word	0x08006c7d
 8006aa4:	08006c47 	.word	0x08006c47
 8006aa8:	08006c7d 	.word	0x08006c7d
 8006aac:	08006c7d 	.word	0x08006c7d
 8006ab0:	08006c7d 	.word	0x08006c7d
 8006ab4:	08006c7d 	.word	0x08006c7d
 8006ab8:	08006c6b 	.word	0x08006c6b
 8006abc:	08006c7d 	.word	0x08006c7d
 8006ac0:	08006c7d 	.word	0x08006c7d
 8006ac4:	08006c7d 	.word	0x08006c7d
 8006ac8:	08006c7d 	.word	0x08006c7d
 8006acc:	08006c7d 	.word	0x08006c7d
 8006ad0:	08006c7d 	.word	0x08006c7d
 8006ad4:	08006c7d 	.word	0x08006c7d
 8006ad8:	08006c7d 	.word	0x08006c7d
 8006adc:	08006c7d 	.word	0x08006c7d
 8006ae0:	08006c7d 	.word	0x08006c7d
 8006ae4:	08006c7d 	.word	0x08006c7d
 8006ae8:	08006c7d 	.word	0x08006c7d
 8006aec:	08006c7d 	.word	0x08006c7d
 8006af0:	08006c7d 	.word	0x08006c7d
 8006af4:	08006c7d 	.word	0x08006c7d
 8006af8:	08006c7d 	.word	0x08006c7d
 8006afc:	08006c7d 	.word	0x08006c7d
 8006b00:	08006c7d 	.word	0x08006c7d
 8006b04:	08006c7d 	.word	0x08006c7d
 8006b08:	08006c7d 	.word	0x08006c7d
 8006b0c:	08006c7d 	.word	0x08006c7d
 8006b10:	08006c7d 	.word	0x08006c7d
 8006b14:	08006c7d 	.word	0x08006c7d
 8006b18:	08006c7d 	.word	0x08006c7d
 8006b1c:	08006c7d 	.word	0x08006c7d
 8006b20:	08006c7d 	.word	0x08006c7d
 8006b24:	08006c7d 	.word	0x08006c7d
 8006b28:	08006c7d 	.word	0x08006c7d
 8006b2c:	08006c7d 	.word	0x08006c7d
 8006b30:	08006c7d 	.word	0x08006c7d
 8006b34:	08006c7d 	.word	0x08006c7d
 8006b38:	08006c7d 	.word	0x08006c7d
 8006b3c:	08006c7d 	.word	0x08006c7d
 8006b40:	08006c7d 	.word	0x08006c7d
 8006b44:	08006c7d 	.word	0x08006c7d
 8006b48:	08006c7d 	.word	0x08006c7d
 8006b4c:	08006c7d 	.word	0x08006c7d
 8006b50:	08006c7d 	.word	0x08006c7d
 8006b54:	08006c7d 	.word	0x08006c7d
 8006b58:	08006c7d 	.word	0x08006c7d
 8006b5c:	08006c7d 	.word	0x08006c7d
 8006b60:	08006c7d 	.word	0x08006c7d
 8006b64:	08006bdb 	.word	0x08006bdb
 8006b68:	2b9e      	cmp	r3, #158	; 0x9e
 8006b6a:	d051      	beq.n	8006c10 <SCSI_ProcessCmd+0x26c>
 8006b6c:	e086      	b.n	8006c7c <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8006b6e:	7afb      	ldrb	r3, [r7, #11]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	4619      	mov	r1, r3
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 f893 	bl	8006ca0 <SCSI_TestUnitReady>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b7e:	e089      	b.n	8006c94 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8006b80:	7afb      	ldrb	r3, [r7, #11]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	4619      	mov	r1, r3
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 fb38 	bl	80071fc <SCSI_RequestSense>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b90:	e080      	b.n	8006c94 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8006b92:	7afb      	ldrb	r3, [r7, #11]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	4619      	mov	r1, r3
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f8d1 	bl	8006d40 <SCSI_Inquiry>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba2:	e077      	b.n	8006c94 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 fbec 	bl	8007388 <SCSI_StartStopUnit>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb4:	e06e      	b.n	8006c94 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8006bb6:	7afb      	ldrb	r3, [r7, #11]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fc34 	bl	800742a <SCSI_AllowPreventRemovable>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc6:	e065      	b.n	8006c94 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 fabc 	bl	800714c <SCSI_ModeSense6>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd8:	e05c      	b.n	8006c94 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8006bda:	7afb      	ldrb	r3, [r7, #11]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	4619      	mov	r1, r3
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fadf 	bl	80071a4 <SCSI_ModeSense10>
 8006be6:	4603      	mov	r3, r0
 8006be8:	75fb      	strb	r3, [r7, #23]
      break;
 8006bea:	e053      	b.n	8006c94 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8006bec:	7afb      	ldrb	r3, [r7, #11]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 fa37 	bl	8007066 <SCSI_ReadFormatCapacity>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006bfc:	e04a      	b.n	8006c94 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8006bfe:	7afb      	ldrb	r3, [r7, #11]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	4619      	mov	r1, r3
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f90f 	bl	8006e28 <SCSI_ReadCapacity10>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c0e:	e041      	b.n	8006c94 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8006c10:	7afb      	ldrb	r3, [r7, #11]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	4619      	mov	r1, r3
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 f97b 	bl	8006f12 <SCSI_ReadCapacity16>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c20:	e038      	b.n	8006c94 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8006c22:	7afb      	ldrb	r3, [r7, #11]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	4619      	mov	r1, r3
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 fc27 	bl	800747c <SCSI_Read10>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	75fb      	strb	r3, [r7, #23]
      break;
 8006c32:	e02f      	b.n	8006c94 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8006c34:	7afb      	ldrb	r3, [r7, #11]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 fcbe 	bl	80075bc <SCSI_Read12>
 8006c40:	4603      	mov	r3, r0
 8006c42:	75fb      	strb	r3, [r7, #23]
      break;
 8006c44:	e026      	b.n	8006c94 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8006c46:	7afb      	ldrb	r3, [r7, #11]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fd61 	bl	8007714 <SCSI_Write10>
 8006c52:	4603      	mov	r3, r0
 8006c54:	75fb      	strb	r3, [r7, #23]
      break;
 8006c56:	e01d      	b.n	8006c94 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8006c58:	7afb      	ldrb	r3, [r7, #11]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 fe20 	bl	80078a4 <SCSI_Write12>
 8006c64:	4603      	mov	r3, r0
 8006c66:	75fb      	strb	r3, [r7, #23]
      break;
 8006c68:	e014      	b.n	8006c94 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8006c6a:	7afb      	ldrb	r3, [r7, #11]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 feef 	bl	8007a54 <SCSI_Verify10>
 8006c76:	4603      	mov	r3, r0
 8006c78:	75fb      	strb	r3, [r7, #23]
      break;
 8006c7a:	e00b      	b.n	8006c94 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006c7c:	7af9      	ldrb	r1, [r7, #11]
 8006c7e:	2320      	movs	r3, #32
 8006c80:	2205      	movs	r2, #5
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 fb39 	bl	80072fa <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8006c8e:	23ff      	movs	r3, #255	; 0xff
 8006c90:	75fb      	strb	r3, [r7, #23]
      break;
 8006c92:	bf00      	nop
  }

  return ret;
 8006c94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006cb4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8006cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cc0:	e03a      	b.n	8006d38 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006cd2:	2320      	movs	r3, #32
 8006cd4:	2205      	movs	r2, #5
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 fb0f 	bl	80072fa <SCSI_SenseCode>

    return -1;
 8006cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ce0:	e02a      	b.n	8006d38 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d10b      	bne.n	8006d04 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006cec:	7af9      	ldrb	r1, [r7, #11]
 8006cee:	233a      	movs	r3, #58	; 0x3a
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 fb01 	bl	80072fa <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2205      	movs	r2, #5
 8006cfc:	721a      	strb	r2, [r3, #8]
    return -1;
 8006cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d02:	e019      	b.n	8006d38 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	7afa      	ldrb	r2, [r7, #11]
 8006d0e:	4610      	mov	r0, r2
 8006d10:	4798      	blx	r3
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006d18:	7af9      	ldrb	r1, [r7, #11]
 8006d1a:	233a      	movs	r3, #58	; 0x3a
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f000 faeb 	bl	80072fa <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	2205      	movs	r2, #5
 8006d28:	721a      	strb	r2, [r3, #8]

    return -1;
 8006d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d2e:	e003      	b.n	8006d38 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2200      	movs	r2, #0
 8006d34:	60da      	str	r2, [r3, #12]

  return 0;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	607a      	str	r2, [r7, #4]
 8006d4c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006d54:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d102      	bne.n	8006d62 <SCSI_Inquiry+0x22>
  {
    return -1;
 8006d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d60:	e05a      	b.n	8006e18 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006d72:	2320      	movs	r3, #32
 8006d74:	2205      	movs	r2, #5
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 fabf 	bl	80072fa <SCSI_SenseCode>
    return -1;
 8006d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d80:	e04a      	b.n	8006e18 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3301      	adds	r3, #1
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d020      	beq.n	8006dd2 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3302      	adds	r3, #2
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d105      	bne.n	8006da6 <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8006d9a:	2206      	movs	r2, #6
 8006d9c:	4920      	ldr	r1, [pc, #128]	; (8006e20 <SCSI_Inquiry+0xe0>)
 8006d9e:	69b8      	ldr	r0, [r7, #24]
 8006da0:	f000 ffc2 	bl	8007d28 <SCSI_UpdateBotData>
 8006da4:	e037      	b.n	8006e16 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3302      	adds	r3, #2
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b80      	cmp	r3, #128	; 0x80
 8006dae:	d105      	bne.n	8006dbc <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8006db0:	2208      	movs	r2, #8
 8006db2:	491c      	ldr	r1, [pc, #112]	; (8006e24 <SCSI_Inquiry+0xe4>)
 8006db4:	69b8      	ldr	r0, [r7, #24]
 8006db6:	f000 ffb7 	bl	8007d28 <SCSI_UpdateBotData>
 8006dba:	e02c      	b.n	8006e16 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006dc2:	2324      	movs	r3, #36	; 0x24
 8006dc4:	2205      	movs	r2, #5
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 fa97 	bl	80072fa <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8006dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dd0:	e022      	b.n	8006e18 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData_MSC)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006dd8:	69d9      	ldr	r1, [r3, #28]
 8006dda:	7afa      	ldrb	r2, [r7, #11]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	440b      	add	r3, r1
 8006de6:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	3304      	adds	r3, #4
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	3305      	adds	r3, #5
 8006df2:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	8bfa      	ldrh	r2, [r7, #30]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d303      	bcc.n	8006e0a <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3304      	adds	r3, #4
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8006e0a:	8bfb      	ldrh	r3, [r7, #30]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6979      	ldr	r1, [r7, #20]
 8006e10:	69b8      	ldr	r0, [r7, #24]
 8006e12:	f000 ff89 	bl	8007d28 <SCSI_UpdateBotData>
  }

  return 0;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3720      	adds	r7, #32
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	20000264 	.word	0x20000264
 8006e24:	2000026c 	.word	0x2000026c

08006e28 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	460b      	mov	r3, r1
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006e3c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d102      	bne.n	8006e4a <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8006e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e48:	e05f      	b.n	8006f0a <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8006e5e:	7af8      	ldrb	r0, [r7, #11]
 8006e60:	4798      	blx	r3
 8006e62:	4603      	mov	r3, r0
 8006e64:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006e66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d104      	bne.n	8006e78 <SCSI_ReadCapacity10+0x50>
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d108      	bne.n	8006e8a <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006e78:	7af9      	ldrb	r1, [r7, #11]
 8006e7a:	233a      	movs	r3, #58	; 0x3a
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 fa3b 	bl	80072fa <SCSI_SenseCode>
    return -1;
 8006e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e88:	e03f      	b.n	8006f0a <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e90:	3b01      	subs	r3, #1
 8006e92:	0e1b      	lsrs	r3, r3, #24
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	0c1b      	lsrs	r3, r3, #16
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	0a1b      	lsrs	r3, r3, #8
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006ed0:	161b      	asrs	r3, r3, #24
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006ede:	141b      	asrs	r3, r3, #16
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006eec:	0a1b      	lsrs	r3, r3, #8
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2208      	movs	r2, #8
 8006f06:	60da      	str	r2, [r3, #12]

  return 0;
 8006f08:	2300      	movs	r3, #0

}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b088      	sub	sp, #32
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	607a      	str	r2, [r7, #4]
 8006f1e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006f26:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8006f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f32:	e094      	b.n	800705e <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8006f48:	7af8      	ldrb	r0, [r7, #11]
 8006f4a:	4798      	blx	r3
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d104      	bne.n	8006f62 <SCSI_ReadCapacity16+0x50>
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d108      	bne.n	8006f74 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006f62:	7af9      	ldrb	r1, [r7, #11]
 8006f64:	233a      	movs	r3, #58	; 0x3a
 8006f66:	2202      	movs	r2, #2
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 f9c6 	bl	80072fa <SCSI_SenseCode>
    return -1;
 8006f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f72:	e074      	b.n	800705e <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	330a      	adds	r3, #10
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	330b      	adds	r3, #11
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006f84:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	330c      	adds	r3, #12
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8006f8e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	320d      	adds	r2, #13
 8006f94:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8006f96:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	77fb      	strb	r3, [r7, #31]
 8006fa0:	e007      	b.n	8006fb2 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8006fa2:	7ffb      	ldrb	r3, [r7, #31]
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	2200      	movs	r2, #0
 8006faa:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006fac:	7ffb      	ldrb	r3, [r7, #31]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	77fb      	strb	r3, [r7, #31]
 8006fb2:	7ffa      	ldrb	r2, [r7, #31]
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d3f2      	bcc.n	8006fa2 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	0e1b      	lsrs	r3, r3, #24
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	0c1b      	lsrs	r3, r3, #16
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	0a1b      	lsrs	r3, r3, #8
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007002:	161b      	asrs	r3, r3, #24
 8007004:	b2da      	uxtb	r2, r3
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007010:	141b      	asrs	r3, r3, #16
 8007012:	b2da      	uxtb	r2, r3
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800701e:	0a1b      	lsrs	r3, r3, #8
 8007020:	b29b      	uxth	r3, r3
 8007022:	b2da      	uxtb	r2, r3
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800702e:	b2da      	uxtb	r2, r3
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	330a      	adds	r3, #10
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	330b      	adds	r3, #11
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007044:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	330c      	adds	r3, #12
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800704e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	320d      	adds	r2, #13
 8007054:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007056:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	60da      	str	r2, [r3, #12]

  return 0;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3720      	adds	r7, #32
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b088      	sub	sp, #32
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	460b      	mov	r3, r1
 8007070:	607a      	str	r2, [r7, #4]
 8007072:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800707a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d102      	bne.n	8007088 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8007082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007086:	e05c      	b.n	8007142 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &blk_nbr, &blk_size);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f107 0214 	add.w	r2, r7, #20
 8007094:	f107 0110 	add.w	r1, r7, #16
 8007098:	7af8      	ldrb	r0, [r7, #11]
 800709a:	4798      	blx	r3
 800709c:	4603      	mov	r3, r0
 800709e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80070a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d104      	bne.n	80070b2 <SCSI_ReadFormatCapacity+0x4c>
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d108      	bne.n	80070c4 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80070b2:	7af9      	ldrb	r1, [r7, #11]
 80070b4:	233a      	movs	r3, #58	; 0x3a
 80070b6:	2202      	movs	r2, #2
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 f91e 	bl	80072fa <SCSI_SenseCode>
    return -1;
 80070be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070c2:	e03e      	b.n	8007142 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 80070c4:	2300      	movs	r3, #0
 80070c6:	83fb      	strh	r3, [r7, #30]
 80070c8:	e007      	b.n	80070da <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 80070ca:	8bfb      	ldrh	r3, [r7, #30]
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	4413      	add	r3, r2
 80070d0:	2200      	movs	r2, #0
 80070d2:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80070d4:	8bfb      	ldrh	r3, [r7, #30]
 80070d6:	3301      	adds	r3, #1
 80070d8:	83fb      	strh	r3, [r7, #30]
 80070da:	8bfb      	ldrh	r3, [r7, #30]
 80070dc:	2b0b      	cmp	r3, #11
 80070de:	d9f4      	bls.n	80070ca <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	2208      	movs	r2, #8
 80070e4:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	0e1b      	lsrs	r3, r3, #24
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	0c1b      	lsrs	r3, r3, #16
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	3b01      	subs	r3, #1
 8007102:	0a1b      	lsrs	r3, r3, #8
 8007104:	b2da      	uxtb	r2, r3
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	b2da      	uxtb	r2, r3
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2202      	movs	r2, #2
 800711a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800711c:	8abb      	ldrh	r3, [r7, #20]
 800711e:	141b      	asrs	r3, r3, #16
 8007120:	b2da      	uxtb	r2, r3
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007126:	8abb      	ldrh	r3, [r7, #20]
 8007128:	0a1b      	lsrs	r3, r3, #8
 800712a:	b29b      	uxth	r3, r3
 800712c:	b2da      	uxtb	r2, r3
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007132:	8abb      	ldrh	r3, [r7, #20]
 8007134:	b2da      	uxtb	r2, r3
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	220c      	movs	r2, #12
 800713e:	60da      	str	r2, [r3, #12]

  return 0;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3720      	adds	r7, #32
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	460b      	mov	r3, r1
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007160:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8007162:	2317      	movs	r3, #23
 8007164:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d102      	bne.n	8007172 <SCSI_ModeSense6+0x26>
  {
    return -1;
 800716c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007170:	e011      	b.n	8007196 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3304      	adds	r3, #4
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	8afa      	ldrh	r2, [r7, #22]
 800717c:	429a      	cmp	r2, r3
 800717e:	d303      	bcc.n	8007188 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3304      	adds	r3, #4
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8007188:	8afb      	ldrh	r3, [r7, #22]
 800718a:	461a      	mov	r2, r3
 800718c:	4904      	ldr	r1, [pc, #16]	; (80071a0 <SCSI_ModeSense6+0x54>)
 800718e:	6938      	ldr	r0, [r7, #16]
 8007190:	f000 fdca 	bl	8007d28 <SCSI_UpdateBotData>

  return 0;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20000274 	.word	0x20000274

080071a4 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	460b      	mov	r3, r1
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80071b8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80071ba:	231b      	movs	r3, #27
 80071bc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d102      	bne.n	80071ca <SCSI_ModeSense10+0x26>
  {
    return -1;
 80071c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071c8:	e011      	b.n	80071ee <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3308      	adds	r3, #8
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	8afa      	ldrh	r2, [r7, #22]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d303      	bcc.n	80071e0 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	3308      	adds	r3, #8
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80071e0:	8afb      	ldrh	r3, [r7, #22]
 80071e2:	461a      	mov	r2, r3
 80071e4:	4904      	ldr	r1, [pc, #16]	; (80071f8 <SCSI_ModeSense10+0x54>)
 80071e6:	6938      	ldr	r0, [r7, #16]
 80071e8:	f000 fd9e 	bl	8007d28 <SCSI_UpdateBotData>

  return 0;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	2000028c 	.word	0x2000028c

080071fc <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	460b      	mov	r3, r1
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007210:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <SCSI_RequestSense+0x22>
  {
    return -1;
 8007218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800721c:	e069      	b.n	80072f2 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800722e:	2320      	movs	r3, #32
 8007230:	2205      	movs	r2, #5
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 f861 	bl	80072fa <SCSI_SenseCode>
    return -1;
 8007238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800723c:	e059      	b.n	80072f2 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800723e:	2300      	movs	r3, #0
 8007240:	75fb      	strb	r3, [r7, #23]
 8007242:	e007      	b.n	8007254 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8007244:	7dfb      	ldrb	r3, [r7, #23]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	4413      	add	r3, r2
 800724a:	2200      	movs	r2, #0
 800724c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800724e:	7dfb      	ldrb	r3, [r7, #23]
 8007250:	3301      	adds	r3, #1
 8007252:	75fb      	strb	r3, [r7, #23]
 8007254:	7dfb      	ldrb	r3, [r7, #23]
 8007256:	2b11      	cmp	r3, #17
 8007258:	d9f4      	bls.n	8007244 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2270      	movs	r2, #112	; 0x70
 800725e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	220c      	movs	r2, #12
 8007264:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007272:	429a      	cmp	r2, r3
 8007274:	d02e      	beq.n	80072d4 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800727c:	461a      	mov	r2, r3
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	3248      	adds	r2, #72	; 0x48
 8007282:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	3348      	adds	r3, #72	; 0x48
 8007294:	00db      	lsls	r3, r3, #3
 8007296:	4413      	add	r3, r2
 8007298:	791a      	ldrb	r2, [r3, #4]
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	3348      	adds	r3, #72	; 0x48
 80072a8:	00db      	lsls	r3, r3, #3
 80072aa:	4413      	add	r3, r2
 80072ac:	795a      	ldrb	r2, [r3, #5]
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80072b8:	3301      	adds	r3, #1
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80072c8:	2b04      	cmp	r3, #4
 80072ca:	d103      	bne.n	80072d4 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2212      	movs	r2, #18
 80072d8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3304      	adds	r3, #4
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b12      	cmp	r3, #18
 80072e2:	d805      	bhi.n	80072f0 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3304      	adds	r3, #4
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b085      	sub	sp, #20
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	4608      	mov	r0, r1
 8007304:	4611      	mov	r1, r2
 8007306:	461a      	mov	r2, r3
 8007308:	4603      	mov	r3, r0
 800730a:	70fb      	strb	r3, [r7, #3]
 800730c:	460b      	mov	r3, r1
 800730e:	70bb      	strb	r3, [r7, #2]
 8007310:	4613      	mov	r3, r2
 8007312:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800731a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d02c      	beq.n	800737c <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007328:	461a      	mov	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3248      	adds	r2, #72	; 0x48
 800732e:	78b9      	ldrb	r1, [r7, #2]
 8007330:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	3348      	adds	r3, #72	; 0x48
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	4413      	add	r3, r2
 8007342:	787a      	ldrb	r2, [r7, #1]
 8007344:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	3348      	adds	r3, #72	; 0x48
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	4413      	add	r3, r2
 8007354:	2200      	movs	r2, #0
 8007356:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800735e:	3301      	adds	r3, #1
 8007360:	b2da      	uxtb	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800736e:	2b04      	cmp	r3, #4
 8007370:	d105      	bne.n	800737e <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800737a:	e000      	b.n	800737e <SCSI_SenseCode+0x84>
    return;
 800737c:	bf00      	nop
  }
}
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	460b      	mov	r3, r1
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800739c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d102      	bne.n	80073aa <SCSI_StartStopUnit+0x22>
  {
    return -1;
 80073a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073a8:	e03b      	b.n	8007422 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d10f      	bne.n	80073d4 <SCSI_StartStopUnit+0x4c>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3304      	adds	r3, #4
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d108      	bne.n	80073d4 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80073c2:	7af9      	ldrb	r1, [r7, #11]
 80073c4:	2324      	movs	r3, #36	; 0x24
 80073c6:	2205      	movs	r2, #5
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f7ff ff96 	bl	80072fa <SCSI_SenseCode>

    return -1;
 80073ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073d2:	e026      	b.n	8007422 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3304      	adds	r3, #4
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d104      	bne.n	80073ec <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80073ea:	e016      	b.n	800741a <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3304      	adds	r3, #4
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d104      	bne.n	8007404 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2202      	movs	r2, #2
 80073fe:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007402:	e00a      	b.n	800741a <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	3304      	adds	r3, #4
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	2b03      	cmp	r3, #3
 8007410:	d103      	bne.n	800741a <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2200      	movs	r2, #0
 800741e:	60da      	str	r2, [r3, #12]

  return 0;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800742a:	b480      	push	{r7}
 800742c:	b087      	sub	sp, #28
 800742e:	af00      	add	r7, sp, #0
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	460b      	mov	r3, r1
 8007434:	607a      	str	r2, [r7, #4]
 8007436:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800743e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d102      	bne.n	800744c <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 8007446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800744a:	e011      	b.n	8007470 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3304      	adds	r3, #4
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d104      	bne.n	8007460 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800745e:	e003      	b.n	8007468 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2200      	movs	r2, #0
 800746c:	60da      	str	r2, [r3, #12]

  return 0;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	371c      	adds	r7, #28
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	460b      	mov	r3, r1
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007490:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d102      	bne.n	800749e <SCSI_Read10+0x22>
  {
    return -1;
 8007498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800749c:	e08a      	b.n	80075b4 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	7a1b      	ldrb	r3, [r3, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d17c      	bne.n	80075a0 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80074ac:	b25b      	sxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	db0a      	blt.n	80074c8 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80074b8:	2320      	movs	r3, #32
 80074ba:	2205      	movs	r2, #5
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f7ff ff1c 	bl	80072fa <SCSI_SenseCode>
      return -1;
 80074c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074c6:	e075      	b.n	80075b4 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d108      	bne.n	80074e4 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80074d2:	7af9      	ldrb	r1, [r7, #11]
 80074d4:	233a      	movs	r3, #58	; 0x3a
 80074d6:	2202      	movs	r2, #2
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f7ff ff0e 	bl	80072fa <SCSI_SenseCode>

      return -1;
 80074de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074e2:	e067      	b.n	80075b4 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	7afa      	ldrb	r2, [r7, #11]
 80074ee:	4610      	mov	r0, r2
 80074f0:	4798      	blx	r3
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d008      	beq.n	800750a <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80074f8:	7af9      	ldrb	r1, [r7, #11]
 80074fa:	233a      	movs	r3, #58	; 0x3a
 80074fc:	2202      	movs	r2, #2
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f7ff fefb 	bl	80072fa <SCSI_SenseCode>
      return -1;
 8007504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007508:	e054      	b.n	80075b4 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3302      	adds	r3, #2
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3303      	adds	r3, #3
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800751a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3304      	adds	r3, #4
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007524:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	3205      	adds	r2, #5
 800752a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800752c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3307      	adds	r3, #7
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	021b      	lsls	r3, r3, #8
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	3208      	adds	r2, #8
 8007540:	7812      	ldrb	r2, [r2, #0]
 8007542:	431a      	orrs	r2, r3
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007556:	7af9      	ldrb	r1, [r7, #11]
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 fab4 	bl	8007ac6 <SCSI_CheckAddressRange>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	da02      	bge.n	800756a <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007568:	e024      	b.n	80075b4 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007576:	6979      	ldr	r1, [r7, #20]
 8007578:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800757c:	fb01 f303 	mul.w	r3, r1, r3
 8007580:	429a      	cmp	r2, r3
 8007582:	d00a      	beq.n	800759a <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800758a:	2320      	movs	r3, #32
 800758c:	2205      	movs	r2, #5
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f7ff feb3 	bl	80072fa <SCSI_SenseCode>
      return -1;
 8007594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007598:	e00c      	b.n	80075b4 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2202      	movs	r2, #2
 800759e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075a6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80075a8:	7afb      	ldrb	r3, [r7, #11]
 80075aa:	4619      	mov	r1, r3
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 fab3 	bl	8007b18 <SCSI_ProcessRead>
 80075b2:	4603      	mov	r3, r0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	460b      	mov	r3, r1
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80075d0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <SCSI_Read12+0x22>
  {
    return -1;
 80075d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075dc:	e095      	b.n	800770a <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	7a1b      	ldrb	r3, [r3, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f040 8087 	bne.w	80076f6 <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80075ee:	b25b      	sxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	db0a      	blt.n	800760a <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80075fa:	2320      	movs	r3, #32
 80075fc:	2205      	movs	r2, #5
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7ff fe7b 	bl	80072fa <SCSI_SenseCode>
      return -1;
 8007604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007608:	e07f      	b.n	800770a <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007610:	2b02      	cmp	r3, #2
 8007612:	d108      	bne.n	8007626 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007614:	7af9      	ldrb	r1, [r7, #11]
 8007616:	233a      	movs	r3, #58	; 0x3a
 8007618:	2202      	movs	r2, #2
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f7ff fe6d 	bl	80072fa <SCSI_SenseCode>
      return -1;
 8007620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007624:	e071      	b.n	800770a <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	7afa      	ldrb	r2, [r7, #11]
 8007630:	4610      	mov	r0, r2
 8007632:	4798      	blx	r3
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d008      	beq.n	800764c <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800763a:	7af9      	ldrb	r1, [r7, #11]
 800763c:	233a      	movs	r3, #58	; 0x3a
 800763e:	2202      	movs	r2, #2
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7ff fe5a 	bl	80072fa <SCSI_SenseCode>
      return -1;
 8007646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800764a:	e05e      	b.n	800770a <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3302      	adds	r3, #2
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3303      	adds	r3, #3
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800765c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3304      	adds	r3, #4
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007666:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	3205      	adds	r2, #5
 800766c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800766e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	3306      	adds	r3, #6
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3307      	adds	r3, #7
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007686:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3308      	adds	r3, #8
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007690:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	3209      	adds	r2, #9
 8007696:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007698:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80076ac:	7af9      	ldrb	r1, [r7, #11]
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 fa09 	bl	8007ac6 <SCSI_CheckAddressRange>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	da02      	bge.n	80076c0 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80076ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076be:	e024      	b.n	800770a <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80076cc:	6979      	ldr	r1, [r7, #20]
 80076ce:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80076d2:	fb01 f303 	mul.w	r3, r1, r3
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d00a      	beq.n	80076f0 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80076e0:	2320      	movs	r3, #32
 80076e2:	2205      	movs	r2, #5
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f7ff fe08 	bl	80072fa <SCSI_SenseCode>
      return -1;
 80076ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076ee:	e00c      	b.n	800770a <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2202      	movs	r2, #2
 80076f4:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076fc:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80076fe:	7afb      	ldrb	r3, [r7, #11]
 8007700:	4619      	mov	r1, r3
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 fa08 	bl	8007b18 <SCSI_ProcessRead>
 8007708:	4603      	mov	r3, r0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
	...

08007714 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	460b      	mov	r3, r1
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007728:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d102      	bne.n	8007736 <SCSI_Write10+0x22>
  {
    return -1;
 8007730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007734:	e0b0      	b.n	8007898 <SCSI_Write10+0x184>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	7a1b      	ldrb	r3, [r3, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	f040 80a6 	bne.w	800788c <SCSI_Write10+0x178>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007750:	2320      	movs	r3, #32
 8007752:	2205      	movs	r2, #5
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f7ff fdd0 	bl	80072fa <SCSI_SenseCode>
      return -1;
 800775a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800775e:	e09b      	b.n	8007898 <SCSI_Write10+0x184>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007766:	b25b      	sxtb	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	da0a      	bge.n	8007782 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007772:	2320      	movs	r3, #32
 8007774:	2205      	movs	r2, #5
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f7ff fdbf 	bl	80072fa <SCSI_SenseCode>
      return -1;
 800777c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007780:	e08a      	b.n	8007898 <SCSI_Write10+0x184>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	7afa      	ldrb	r2, [r7, #11]
 800778c:	4610      	mov	r0, r2
 800778e:	4798      	blx	r3
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d008      	beq.n	80077a8 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007796:	7af9      	ldrb	r1, [r7, #11]
 8007798:	233a      	movs	r3, #58	; 0x3a
 800779a:	2202      	movs	r2, #2
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f7ff fdac 	bl	80072fa <SCSI_SenseCode>
      return -1;
 80077a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077a6:	e077      	b.n	8007898 <SCSI_Write10+0x184>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsWriteProtected(lun) != 0)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	7afa      	ldrb	r2, [r7, #11]
 80077b2:	4610      	mov	r0, r2
 80077b4:	4798      	blx	r3
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d008      	beq.n	80077ce <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80077bc:	7af9      	ldrb	r1, [r7, #11]
 80077be:	2327      	movs	r3, #39	; 0x27
 80077c0:	2202      	movs	r2, #2
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f7ff fd99 	bl	80072fa <SCSI_SenseCode>
      return -1;
 80077c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077cc:	e064      	b.n	8007898 <SCSI_Write10+0x184>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3302      	adds	r3, #2
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3303      	adds	r3, #3
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80077de:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3304      	adds	r3, #4
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80077e8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	3205      	adds	r2, #5
 80077ee:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80077f0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3307      	adds	r3, #7
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	3208      	adds	r2, #8
 8007804:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007806:	431a      	orrs	r2, r3
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800781a:	7af9      	ldrb	r1, [r7, #11]
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 f952 	bl	8007ac6 <SCSI_CheckAddressRange>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	da02      	bge.n	800782e <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800782c:	e034      	b.n	8007898 <SCSI_Write10+0x184>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800783a:	fb02 f303 	mul.w	r3, r2, r3
 800783e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	429a      	cmp	r2, r3
 800784a:	d00a      	beq.n	8007862 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007852:	2320      	movs	r3, #32
 8007854:	2205      	movs	r2, #5
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f7ff fd4f 	bl	80072fa <SCSI_SenseCode>
      return -1;
 800785c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007860:	e01a      	b.n	8007898 <SCSI_Write10+0x184>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007868:	bf28      	it	cs
 800786a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800786e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	2201      	movs	r2, #1
 8007874:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 8007876:	4b0a      	ldr	r3, [pc, #40]	; (80078a0 <SCSI_Write10+0x18c>)
 8007878:	7819      	ldrb	r1, [r3, #0]
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f103 0210 	add.w	r2, r3, #16
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f001 fe79 	bl	800957a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007888:	2300      	movs	r3, #0
 800788a:	e005      	b.n	8007898 <SCSI_Write10+0x184>
    return SCSI_ProcessWrite(pdev, lun);
 800788c:	7afb      	ldrb	r3, [r7, #11]
 800788e:	4619      	mov	r1, r3
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f9bd 	bl	8007c10 <SCSI_ProcessWrite>
 8007896:	4603      	mov	r3, r0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3718      	adds	r7, #24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	200001bb 	.word	0x200001bb

080078a4 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	460b      	mov	r3, r1
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80078b8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d102      	bne.n	80078c6 <SCSI_Write12+0x22>
  {
    return -1;
 80078c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078c4:	e0c0      	b.n	8007a48 <SCSI_Write12+0x1a4>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	7a1b      	ldrb	r3, [r3, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f040 80b6 	bne.w	8007a3c <SCSI_Write12+0x198>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10a      	bne.n	80078f0 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80078e0:	2320      	movs	r3, #32
 80078e2:	2205      	movs	r2, #5
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f7ff fd08 	bl	80072fa <SCSI_SenseCode>
      return -1;
 80078ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078ee:	e0ab      	b.n	8007a48 <SCSI_Write12+0x1a4>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80078f6:	b25b      	sxtb	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	da0a      	bge.n	8007912 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007902:	2320      	movs	r3, #32
 8007904:	2205      	movs	r2, #5
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f7ff fcf7 	bl	80072fa <SCSI_SenseCode>
      return -1;
 800790c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007910:	e09a      	b.n	8007a48 <SCSI_Write12+0x1a4>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	7afa      	ldrb	r2, [r7, #11]
 800791c:	4610      	mov	r0, r2
 800791e:	4798      	blx	r3
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00b      	beq.n	800793e <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007926:	7af9      	ldrb	r1, [r7, #11]
 8007928:	233a      	movs	r3, #58	; 0x3a
 800792a:	2202      	movs	r2, #2
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f7ff fce4 	bl	80072fa <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	2205      	movs	r2, #5
 8007936:	721a      	strb	r2, [r3, #8]
      return -1;
 8007938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800793c:	e084      	b.n	8007a48 <SCSI_Write12+0x1a4>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsWriteProtected(lun) != 0)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	7afa      	ldrb	r2, [r7, #11]
 8007948:	4610      	mov	r0, r2
 800794a:	4798      	blx	r3
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00b      	beq.n	800796a <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007952:	7af9      	ldrb	r1, [r7, #11]
 8007954:	2327      	movs	r3, #39	; 0x27
 8007956:	2202      	movs	r2, #2
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f7ff fcce 	bl	80072fa <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2205      	movs	r2, #5
 8007962:	721a      	strb	r2, [r3, #8]
      return -1;
 8007964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007968:	e06e      	b.n	8007a48 <SCSI_Write12+0x1a4>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	3302      	adds	r3, #2
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3303      	adds	r3, #3
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800797a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3304      	adds	r3, #4
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007984:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	3205      	adds	r2, #5
 800798a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800798c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3306      	adds	r3, #6
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3307      	adds	r3, #7
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80079a4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	3308      	adds	r3, #8
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80079ae:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	3209      	adds	r2, #9
 80079b4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80079b6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80079ca:	7af9      	ldrb	r1, [r7, #11]
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f87a 	bl	8007ac6 <SCSI_CheckAddressRange>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	da02      	bge.n	80079de <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80079d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079dc:	e034      	b.n	8007a48 <SCSI_Write12+0x1a4>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80079ea:	fb02 f303 	mul.w	r3, r2, r3
 80079ee:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d00a      	beq.n	8007a12 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007a02:	2320      	movs	r3, #32
 8007a04:	2205      	movs	r2, #5
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f7ff fc77 	bl	80072fa <SCSI_SenseCode>
      return -1;
 8007a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a10:	e01a      	b.n	8007a48 <SCSI_Write12+0x1a4>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a18:	bf28      	it	cs
 8007a1a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007a1e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	2201      	movs	r2, #1
 8007a24:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 8007a26:	4b0a      	ldr	r3, [pc, #40]	; (8007a50 <SCSI_Write12+0x1ac>)
 8007a28:	7819      	ldrb	r1, [r3, #0]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f103 0210 	add.w	r2, r3, #16
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f001 fda1 	bl	800957a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	e005      	b.n	8007a48 <SCSI_Write12+0x1a4>
    return SCSI_ProcessWrite(pdev, lun);
 8007a3c:	7afb      	ldrb	r3, [r7, #11]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f000 f8e5 	bl	8007c10 <SCSI_ProcessWrite>
 8007a46:	4603      	mov	r3, r0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3718      	adds	r7, #24
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	200001bb 	.word	0x200001bb

08007a54 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007a68:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d102      	bne.n	8007a76 <SCSI_Verify10+0x22>
  {
    return -1;
 8007a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a74:	e023      	b.n	8007abe <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d008      	beq.n	8007a96 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007a84:	7af9      	ldrb	r1, [r7, #11]
 8007a86:	2324      	movs	r3, #36	; 0x24
 8007a88:	2205      	movs	r2, #5
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f7ff fc35 	bl	80072fa <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a94:	e013      	b.n	8007abe <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007aa2:	7af9      	ldrb	r1, [r7, #11]
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 f80e 	bl	8007ac6 <SCSI_CheckAddressRange>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	da02      	bge.n	8007ab6 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8007ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ab4:	e003      	b.n	8007abe <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	60da      	str	r2, [r3, #12]

  return 0;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b086      	sub	sp, #24
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	607a      	str	r2, [r7, #4]
 8007ad0:	603b      	str	r3, [r7, #0]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007adc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d102      	bne.n	8007aea <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8007ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ae8:	e011      	b.n	8007b0e <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	441a      	add	r2, r3
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d908      	bls.n	8007b0c <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007afa:	7af9      	ldrb	r1, [r7, #11]
 8007afc:	2321      	movs	r3, #33	; 0x21
 8007afe:	2205      	movs	r2, #5
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f7ff fbfa 	bl	80072fa <SCSI_SenseCode>
    return -1;
 8007b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b0a:	e000      	b.n	8007b0e <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007b18:	b590      	push	{r4, r7, lr}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007b2a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007b38:	fb02 f303 	mul.w	r3, r2, r3
 8007b3c:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d102      	bne.n	8007b4a <SCSI_ProcessRead+0x32>
  {
    return -1;
 8007b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b48:	e05c      	b.n	8007c04 <SCSI_ProcessRead+0xec>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b50:	bf28      	it	cs
 8007b52:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007b56:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Read(lun, hmsc->bot_data,
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007b5e:	691c      	ldr	r4, [r3, #16]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f103 0110 	add.w	r1, r3, #16
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007b72:	4618      	mov	r0, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Read(lun, hmsc->bot_data,
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	78f8      	ldrb	r0, [r7, #3]
 8007b7e:	47a0      	blx	r4
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	da08      	bge.n	8007b98 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007b86:	78f9      	ldrb	r1, [r7, #3]
 8007b88:	2311      	movs	r3, #17
 8007b8a:	2204      	movs	r2, #4
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff fbb4 	bl	80072fa <SCSI_SenseCode>
    return -1;
 8007b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b96:	e035      	b.n	8007c04 <SCSI_ProcessRead+0xec>
  }

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, hmsc->bot_data, len);
 8007b98:	4b1c      	ldr	r3, [pc, #112]	; (8007c0c <SCSI_ProcessRead+0xf4>)
 8007b9a:	7819      	ldrb	r1, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f103 0210 	add.w	r2, r3, #16
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 fcc7 	bl	8009538 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bbe:	441a      	add	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bda:	1ad2      	subs	r2, r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	1ad2      	subs	r2, r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d102      	bne.n	8007c02 <SCSI_ProcessRead+0xea>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2203      	movs	r2, #3
 8007c00:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd90      	pop	{r4, r7, pc}
 8007c0c:	200001ba 	.word	0x200001ba

08007c10 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007c10:	b590      	push	{r4, r7, lr}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007c22:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007c30:	fb02 f303 	mul.w	r3, r2, r3
 8007c34:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d102      	bne.n	8007c42 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8007c3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c40:	e06c      	b.n	8007d1c <SCSI_ProcessWrite+0x10c>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c48:	bf28      	it	cs
 8007c4a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007c4e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Write(lun, hmsc->bot_data,
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007c56:	695c      	ldr	r4, [r3, #20]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f103 0110 	add.w	r1, r3, #16
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Write(lun, hmsc->bot_data,
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	78f8      	ldrb	r0, [r7, #3]
 8007c76:	47a0      	blx	r4
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	da08      	bge.n	8007c90 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007c7e:	78f9      	ldrb	r1, [r7, #3]
 8007c80:	2303      	movs	r3, #3
 8007c82:	2204      	movs	r2, #4
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff fb38 	bl	80072fa <SCSI_SenseCode>
    return -1;
 8007c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c8e:	e045      	b.n	8007d1c <SCSI_ProcessWrite+0x10c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ca4:	441a      	add	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007cb8:	4619      	mov	r1, r3
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cc0:	1ad2      	subs	r2, r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	1ad2      	subs	r2, r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d104      	bne.n	8007cec <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7fe fdb3 	bl	8006850 <MSC_BOT_SendCSW>
 8007cea:	e016      	b.n	8007d1a <SCSI_ProcessWrite+0x10a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007cf8:	fb02 f303 	mul.w	r3, r2, r3
 8007cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d00:	bf28      	it	cs
 8007d02:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007d06:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 8007d08:	4b06      	ldr	r3, [pc, #24]	; (8007d24 <SCSI_ProcessWrite+0x114>)
 8007d0a:	7819      	ldrb	r1, [r3, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f103 0210 	add.w	r2, r3, #16
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 fc30 	bl	800957a <USBD_LL_PrepareReceive>
  }

  return 0;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd90      	pop	{r4, r7, pc}
 8007d24:	200001bb 	.word	0x200001bb

08007d28 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b087      	sub	sp, #28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	4613      	mov	r3, r2
 8007d34:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8007d36:	88fb      	ldrh	r3, [r7, #6]
 8007d38:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d102      	bne.n	8007d46 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8007d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d44:	e013      	b.n	8007d6e <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8007d46:	8afa      	ldrh	r2, [r7, #22]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8007d4c:	e00b      	b.n	8007d66 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8007d4e:	8afb      	ldrh	r3, [r7, #22]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8007d54:	8afb      	ldrh	r3, [r7, #22]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	441a      	add	r2, r3
 8007d5a:	8afb      	ldrh	r3, [r7, #22]
 8007d5c:	7811      	ldrb	r1, [r2, #0]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	4413      	add	r3, r2
 8007d62:	460a      	mov	r2, r1
 8007d64:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8007d66:	8afb      	ldrh	r3, [r7, #22]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1f0      	bne.n	8007d4e <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	371c      	adds	r7, #28
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b086      	sub	sp, #24
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	4613      	mov	r3, r2
 8007d86:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e01b      	b.n	8007dca <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pConfDesc = NULL;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	79fa      	ldrb	r2, [r7, #7]
 8007dbc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f001 fa54 	bl	800926c <USBD_LL_Init>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e02d      	b.n	8007e46 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	7c1b      	ldrb	r3, [r3, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d112      	bne.n	8007e20 <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d01e      	beq.n	8007e44 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0e:	f107 020e 	add.w	r2, r7, #14
 8007e12:	4610      	mov	r0, r2
 8007e14:	4798      	blx	r3
 8007e16:	4602      	mov	r2, r0
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 8007e1e:	e011      	b.n	8007e44 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00b      	beq.n	8007e44 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e34:	f107 020e 	add.w	r2, r7, #14
 8007e38:	4610      	mov	r0, r2
 8007e3a:	4798      	blx	r3
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
  }

  return USBD_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b082      	sub	sp, #8
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f001 fa66 	bl	8009328 <USBD_LL_Start>
 8007e5c:	4603      	mov	r3, r0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	460b      	mov	r3, r1
 8007e86:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d009      	beq.n	8007eaa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	78fa      	ldrb	r2, [r7, #3]
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	4798      	blx	r3
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d007      	beq.n	8007eda <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	78fa      	ldrb	r2, [r7, #3]
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	4798      	blx	r3
  }

  return USBD_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 ff9c 	bl	8008e34 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f18:	f003 031f 	and.w	r3, r3, #31
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d01a      	beq.n	8007f56 <USBD_LL_SetupStage+0x72>
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d822      	bhi.n	8007f6a <USBD_LL_SetupStage+0x86>
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d002      	beq.n	8007f2e <USBD_LL_SetupStage+0x4a>
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d00a      	beq.n	8007f42 <USBD_LL_SetupStage+0x5e>
 8007f2c:	e01d      	b.n	8007f6a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa5c 	bl	80083f4 <USBD_StdDevReq>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f40:	e020      	b.n	8007f84 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fac0 	bl	80084d0 <USBD_StdItfReq>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]
      break;
 8007f54:	e016      	b.n	8007f84 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 faff 	bl	8008562 <USBD_StdEPReq>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73fb      	strb	r3, [r7, #15]
      break;
 8007f68:	e00c      	b.n	8007f84 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	4619      	mov	r1, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f001 fa54 	bl	8009426 <USBD_LL_StallEP>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	73fb      	strb	r3, [r7, #15]
      break;
 8007f82:	bf00      	nop
  }

  return ret;
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b086      	sub	sp, #24
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	60f8      	str	r0, [r7, #12]
 8007f96:	460b      	mov	r3, r1
 8007f98:	607a      	str	r2, [r7, #4]
 8007f9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007f9c:	7afb      	ldrb	r3, [r7, #11]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d138      	bne.n	8008014 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007fa8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d14a      	bne.n	800804a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	689a      	ldr	r2, [r3, #8]
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d913      	bls.n	8007fe8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	1ad2      	subs	r2, r2, r3
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	bf28      	it	cs
 8007fda:	4613      	movcs	r3, r2
 8007fdc:	461a      	mov	r2, r3
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f001 f81b 	bl	800901c <USBD_CtlContinueRx>
 8007fe6:	e030      	b.n	800804a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b03      	cmp	r3, #3
 8007ff2:	d10b      	bne.n	800800c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d005      	beq.n	800800c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f001 f816 	bl	800903e <USBD_CtlSendStatus>
 8008012:	e01a      	b.n	800804a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b03      	cmp	r3, #3
 800801e:	d114      	bne.n	800804a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00e      	beq.n	800804a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	7afa      	ldrb	r2, [r7, #11]
 8008036:	4611      	mov	r1, r2
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	4798      	blx	r3
 800803c:	4603      	mov	r3, r0
 800803e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008040:	7dfb      	ldrb	r3, [r7, #23]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	e000      	b.n	800804c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	460b      	mov	r3, r1
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008062:	7afb      	ldrb	r3, [r7, #11]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d16b      	bne.n	8008140 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3314      	adds	r3, #20
 800806c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008074:	2b02      	cmp	r3, #2
 8008076:	d156      	bne.n	8008126 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	429a      	cmp	r2, r3
 8008082:	d914      	bls.n	80080ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	689a      	ldr	r2, [r3, #8]
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	1ad2      	subs	r2, r2, r3
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	461a      	mov	r2, r3
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 ff90 	bl	8008fc0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080a0:	2300      	movs	r3, #0
 80080a2:	2200      	movs	r2, #0
 80080a4:	2100      	movs	r1, #0
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f001 fa67 	bl	800957a <USBD_LL_PrepareReceive>
 80080ac:	e03b      	b.n	8008126 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	68da      	ldr	r2, [r3, #12]
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d11c      	bne.n	80080f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d316      	bcc.n	80080f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d20f      	bcs.n	80080f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080d4:	2200      	movs	r2, #0
 80080d6:	2100      	movs	r1, #0
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 ff71 	bl	8008fc0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080e6:	2300      	movs	r3, #0
 80080e8:	2200      	movs	r2, #0
 80080ea:	2100      	movs	r1, #0
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f001 fa44 	bl	800957a <USBD_LL_PrepareReceive>
 80080f2:	e018      	b.n	8008126 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d10b      	bne.n	8008118 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d005      	beq.n	8008118 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008118:	2180      	movs	r1, #128	; 0x80
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f001 f983 	bl	8009426 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 ff9f 	bl	8009064 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800812c:	2b01      	cmp	r3, #1
 800812e:	d122      	bne.n	8008176 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f7ff fe98 	bl	8007e66 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800813e:	e01a      	b.n	8008176 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b03      	cmp	r3, #3
 800814a:	d114      	bne.n	8008176 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00e      	beq.n	8008176 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	7afa      	ldrb	r2, [r7, #11]
 8008162:	4611      	mov	r1, r2
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	4798      	blx	r3
 8008168:	4603      	mov	r3, r0
 800816a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800816c:	7dfb      	ldrb	r3, [r7, #23]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008172:	7dfb      	ldrb	r3, [r7, #23]
 8008174:	e000      	b.n	8008178 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e02a      	b.n	800820a <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d009      	beq.n	80081d4 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	6852      	ldr	r2, [r2, #4]
 80081cc:	b2d2      	uxtb	r2, r2
 80081ce:	4611      	mov	r1, r2
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081d4:	2340      	movs	r3, #64	; 0x40
 80081d6:	2200      	movs	r2, #0
 80081d8:	2100      	movs	r1, #0
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 f8bf 	bl	800935e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2240      	movs	r2, #64	; 0x40
 80081ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081f0:	2340      	movs	r3, #64	; 0x40
 80081f2:	2200      	movs	r2, #0
 80081f4:	2180      	movs	r1, #128	; 0x80
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f001 f8b1 	bl	800935e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2240      	movs	r2, #64	; 0x40
 8008206:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	460b      	mov	r3, r1
 800821c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	78fa      	ldrb	r2, [r7, #3]
 8008222:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008232:	b480      	push	{r7}
 8008234:	b083      	sub	sp, #12
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008240:	b2da      	uxtb	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2204      	movs	r2, #4
 800824c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800825e:	b480      	push	{r7}
 8008260:	b083      	sub	sp, #12
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b04      	cmp	r3, #4
 8008270:	d106      	bne.n	8008280 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008278:	b2da      	uxtb	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b082      	sub	sp, #8
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800829c:	2b00      	cmp	r3, #0
 800829e:	d101      	bne.n	80082a4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e012      	b.n	80082ca <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	d10b      	bne.n	80082c8 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d005      	beq.n	80082c8 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b082      	sub	sp, #8
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	460b      	mov	r3, r1
 80082dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e014      	b.n	8008316 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d10d      	bne.n	8008314 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d007      	beq.n	8008314 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	78fa      	ldrb	r2, [r7, #3]
 800830e:	4611      	mov	r1, r2
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b082      	sub	sp, #8
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	460b      	mov	r3, r1
 8008328:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008330:	2b00      	cmp	r3, #0
 8008332:	d101      	bne.n	8008338 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008334:	2303      	movs	r3, #3
 8008336:	e014      	b.n	8008362 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b03      	cmp	r3, #3
 8008342:	d10d      	bne.n	8008360 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	78fa      	ldrb	r2, [r7, #3]
 800835a:	4611      	mov	r1, r2
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008396:	2b00      	cmp	r3, #0
 8008398:	d009      	beq.n	80083ae <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	6852      	ldr	r2, [r2, #4]
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	4611      	mov	r1, r2
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	4798      	blx	r3
  }

  return USBD_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	3301      	adds	r3, #1
 80083ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083d6:	8a3b      	ldrh	r3, [r7, #16]
 80083d8:	021b      	lsls	r3, r3, #8
 80083da:	b21a      	sxth	r2, r3
 80083dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	b21b      	sxth	r3, r3
 80083e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083e6:	89fb      	ldrh	r3, [r7, #14]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	371c      	adds	r7, #28
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083fe:	2300      	movs	r3, #0
 8008400:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800840a:	2b40      	cmp	r3, #64	; 0x40
 800840c:	d005      	beq.n	800841a <USBD_StdDevReq+0x26>
 800840e:	2b40      	cmp	r3, #64	; 0x40
 8008410:	d853      	bhi.n	80084ba <USBD_StdDevReq+0xc6>
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00b      	beq.n	800842e <USBD_StdDevReq+0x3a>
 8008416:	2b20      	cmp	r3, #32
 8008418:	d14f      	bne.n	80084ba <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	4798      	blx	r3
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]
      break;
 800842c:	e04a      	b.n	80084c4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	785b      	ldrb	r3, [r3, #1]
 8008432:	2b09      	cmp	r3, #9
 8008434:	d83b      	bhi.n	80084ae <USBD_StdDevReq+0xba>
 8008436:	a201      	add	r2, pc, #4	; (adr r2, 800843c <USBD_StdDevReq+0x48>)
 8008438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843c:	08008491 	.word	0x08008491
 8008440:	080084a5 	.word	0x080084a5
 8008444:	080084af 	.word	0x080084af
 8008448:	0800849b 	.word	0x0800849b
 800844c:	080084af 	.word	0x080084af
 8008450:	0800846f 	.word	0x0800846f
 8008454:	08008465 	.word	0x08008465
 8008458:	080084af 	.word	0x080084af
 800845c:	08008487 	.word	0x08008487
 8008460:	08008479 	.word	0x08008479
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f9de 	bl	8008828 <USBD_GetDescriptor>
          break;
 800846c:	e024      	b.n	80084b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fb55 	bl	8008b20 <USBD_SetAddress>
          break;
 8008476:	e01f      	b.n	80084b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fb94 	bl	8008ba8 <USBD_SetConfig>
 8008480:	4603      	mov	r3, r0
 8008482:	73fb      	strb	r3, [r7, #15]
          break;
 8008484:	e018      	b.n	80084b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fc33 	bl	8008cf4 <USBD_GetConfig>
          break;
 800848e:	e013      	b.n	80084b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fc64 	bl	8008d60 <USBD_GetStatus>
          break;
 8008498:	e00e      	b.n	80084b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fc93 	bl	8008dc8 <USBD_SetFeature>
          break;
 80084a2:	e009      	b.n	80084b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fca2 	bl	8008df0 <USBD_ClrFeature>
          break;
 80084ac:	e004      	b.n	80084b8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fcf9 	bl	8008ea8 <USBD_CtlError>
          break;
 80084b6:	bf00      	nop
      }
      break;
 80084b8:	e004      	b.n	80084c4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fcf3 	bl	8008ea8 <USBD_CtlError>
      break;
 80084c2:	bf00      	nop
  }

  return ret;
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop

080084d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084e6:	2b40      	cmp	r3, #64	; 0x40
 80084e8:	d005      	beq.n	80084f6 <USBD_StdItfReq+0x26>
 80084ea:	2b40      	cmp	r3, #64	; 0x40
 80084ec:	d82f      	bhi.n	800854e <USBD_StdItfReq+0x7e>
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <USBD_StdItfReq+0x26>
 80084f2:	2b20      	cmp	r3, #32
 80084f4:	d12b      	bne.n	800854e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	3b01      	subs	r3, #1
 8008500:	2b02      	cmp	r3, #2
 8008502:	d81d      	bhi.n	8008540 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	889b      	ldrh	r3, [r3, #4]
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b0f      	cmp	r3, #15
 800850c:	d813      	bhi.n	8008536 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	4798      	blx	r3
 800851c:	4603      	mov	r3, r0
 800851e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	88db      	ldrh	r3, [r3, #6]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d110      	bne.n	800854a <USBD_StdItfReq+0x7a>
 8008528:	7bfb      	ldrb	r3, [r7, #15]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10d      	bne.n	800854a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fd85 	bl	800903e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008534:	e009      	b.n	800854a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fcb5 	bl	8008ea8 <USBD_CtlError>
          break;
 800853e:	e004      	b.n	800854a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fcb0 	bl	8008ea8 <USBD_CtlError>
          break;
 8008548:	e000      	b.n	800854c <USBD_StdItfReq+0x7c>
          break;
 800854a:	bf00      	nop
      }
      break;
 800854c:	e004      	b.n	8008558 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fca9 	bl	8008ea8 <USBD_CtlError>
      break;
 8008556:	bf00      	nop
  }

  return ret;
 8008558:	7bfb      	ldrb	r3, [r7, #15]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b084      	sub	sp, #16
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	889b      	ldrh	r3, [r3, #4]
 8008574:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800857e:	2b40      	cmp	r3, #64	; 0x40
 8008580:	d007      	beq.n	8008592 <USBD_StdEPReq+0x30>
 8008582:	2b40      	cmp	r3, #64	; 0x40
 8008584:	f200 8145 	bhi.w	8008812 <USBD_StdEPReq+0x2b0>
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00c      	beq.n	80085a6 <USBD_StdEPReq+0x44>
 800858c:	2b20      	cmp	r3, #32
 800858e:	f040 8140 	bne.w	8008812 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	4798      	blx	r3
 80085a0:	4603      	mov	r3, r0
 80085a2:	73fb      	strb	r3, [r7, #15]
      break;
 80085a4:	e13a      	b.n	800881c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	785b      	ldrb	r3, [r3, #1]
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d007      	beq.n	80085be <USBD_StdEPReq+0x5c>
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	f300 8129 	bgt.w	8008806 <USBD_StdEPReq+0x2a4>
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d07f      	beq.n	80086b8 <USBD_StdEPReq+0x156>
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d03c      	beq.n	8008636 <USBD_StdEPReq+0xd4>
 80085bc:	e123      	b.n	8008806 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d002      	beq.n	80085d0 <USBD_StdEPReq+0x6e>
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d016      	beq.n	80085fc <USBD_StdEPReq+0x9a>
 80085ce:	e02c      	b.n	800862a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00d      	beq.n	80085f2 <USBD_StdEPReq+0x90>
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	2b80      	cmp	r3, #128	; 0x80
 80085da:	d00a      	beq.n	80085f2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 ff20 	bl	8009426 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085e6:	2180      	movs	r1, #128	; 0x80
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 ff1c 	bl	8009426 <USBD_LL_StallEP>
 80085ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085f0:	e020      	b.n	8008634 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fc57 	bl	8008ea8 <USBD_CtlError>
              break;
 80085fa:	e01b      	b.n	8008634 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	885b      	ldrh	r3, [r3, #2]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10e      	bne.n	8008622 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00b      	beq.n	8008622 <USBD_StdEPReq+0xc0>
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	2b80      	cmp	r3, #128	; 0x80
 800860e:	d008      	beq.n	8008622 <USBD_StdEPReq+0xc0>
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	88db      	ldrh	r3, [r3, #6]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d104      	bne.n	8008622 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 ff02 	bl	8009426 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fd0b 	bl	800903e <USBD_CtlSendStatus>

              break;
 8008628:	e004      	b.n	8008634 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fc3b 	bl	8008ea8 <USBD_CtlError>
              break;
 8008632:	bf00      	nop
          }
          break;
 8008634:	e0ec      	b.n	8008810 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b02      	cmp	r3, #2
 8008640:	d002      	beq.n	8008648 <USBD_StdEPReq+0xe6>
 8008642:	2b03      	cmp	r3, #3
 8008644:	d016      	beq.n	8008674 <USBD_StdEPReq+0x112>
 8008646:	e030      	b.n	80086aa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00d      	beq.n	800866a <USBD_StdEPReq+0x108>
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	2b80      	cmp	r3, #128	; 0x80
 8008652:	d00a      	beq.n	800866a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fee4 	bl	8009426 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800865e:	2180      	movs	r1, #128	; 0x80
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fee0 	bl	8009426 <USBD_LL_StallEP>
 8008666:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008668:	e025      	b.n	80086b6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fc1b 	bl	8008ea8 <USBD_CtlError>
              break;
 8008672:	e020      	b.n	80086b6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	885b      	ldrh	r3, [r3, #2]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d11b      	bne.n	80086b4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800867c:	7bbb      	ldrb	r3, [r7, #14]
 800867e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008682:	2b00      	cmp	r3, #0
 8008684:	d004      	beq.n	8008690 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 feea 	bl	8009464 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fcd4 	bl	800903e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	4798      	blx	r3
 80086a4:	4603      	mov	r3, r0
 80086a6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80086a8:	e004      	b.n	80086b4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fbfb 	bl	8008ea8 <USBD_CtlError>
              break;
 80086b2:	e000      	b.n	80086b6 <USBD_StdEPReq+0x154>
              break;
 80086b4:	bf00      	nop
          }
          break;
 80086b6:	e0ab      	b.n	8008810 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d002      	beq.n	80086ca <USBD_StdEPReq+0x168>
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	d032      	beq.n	800872e <USBD_StdEPReq+0x1cc>
 80086c8:	e097      	b.n	80087fa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d007      	beq.n	80086e0 <USBD_StdEPReq+0x17e>
 80086d0:	7bbb      	ldrb	r3, [r7, #14]
 80086d2:	2b80      	cmp	r3, #128	; 0x80
 80086d4:	d004      	beq.n	80086e0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fbe5 	bl	8008ea8 <USBD_CtlError>
                break;
 80086de:	e091      	b.n	8008804 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	da0b      	bge.n	8008700 <USBD_StdEPReq+0x19e>
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086ee:	4613      	mov	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	3310      	adds	r3, #16
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	4413      	add	r3, r2
 80086fc:	3304      	adds	r3, #4
 80086fe:	e00b      	b.n	8008718 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	4413      	add	r3, r2
 8008716:	3304      	adds	r3, #4
 8008718:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2202      	movs	r2, #2
 8008724:	4619      	mov	r1, r3
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fc2f 	bl	8008f8a <USBD_CtlSendData>
              break;
 800872c:	e06a      	b.n	8008804 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800872e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008732:	2b00      	cmp	r3, #0
 8008734:	da11      	bge.n	800875a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	f003 020f 	and.w	r2, r3, #15
 800873c:	6879      	ldr	r1, [r7, #4]
 800873e:	4613      	mov	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	440b      	add	r3, r1
 8008748:	3324      	adds	r3, #36	; 0x24
 800874a:	881b      	ldrh	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d117      	bne.n	8008780 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fba8 	bl	8008ea8 <USBD_CtlError>
                  break;
 8008758:	e054      	b.n	8008804 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	f003 020f 	and.w	r2, r3, #15
 8008760:	6879      	ldr	r1, [r7, #4]
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	440b      	add	r3, r1
 800876c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008770:	881b      	ldrh	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d104      	bne.n	8008780 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fb95 	bl	8008ea8 <USBD_CtlError>
                  break;
 800877e:	e041      	b.n	8008804 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008780:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008784:	2b00      	cmp	r3, #0
 8008786:	da0b      	bge.n	80087a0 <USBD_StdEPReq+0x23e>
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800878e:	4613      	mov	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	3310      	adds	r3, #16
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	4413      	add	r3, r2
 800879c:	3304      	adds	r3, #4
 800879e:	e00b      	b.n	80087b8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
 80087a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087a6:	4613      	mov	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	4413      	add	r3, r2
 80087b6:	3304      	adds	r3, #4
 80087b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <USBD_StdEPReq+0x264>
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	2b80      	cmp	r3, #128	; 0x80
 80087c4:	d103      	bne.n	80087ce <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	2200      	movs	r2, #0
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	e00e      	b.n	80087ec <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	4619      	mov	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fe65 	bl	80094a2 <USBD_LL_IsStallEP>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d003      	beq.n	80087e6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	2201      	movs	r2, #1
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	e002      	b.n	80087ec <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	2202      	movs	r2, #2
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fbc9 	bl	8008f8a <USBD_CtlSendData>
              break;
 80087f8:	e004      	b.n	8008804 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fb53 	bl	8008ea8 <USBD_CtlError>
              break;
 8008802:	bf00      	nop
          }
          break;
 8008804:	e004      	b.n	8008810 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fb4d 	bl	8008ea8 <USBD_CtlError>
          break;
 800880e:	bf00      	nop
      }
      break;
 8008810:	e004      	b.n	800881c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fb47 	bl	8008ea8 <USBD_CtlError>
      break;
 800881a:	bf00      	nop
  }

  return ret;
 800881c:	7bfb      	ldrb	r3, [r7, #15]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	885b      	ldrh	r3, [r3, #2]
 8008842:	0a1b      	lsrs	r3, r3, #8
 8008844:	b29b      	uxth	r3, r3
 8008846:	3b01      	subs	r3, #1
 8008848:	2b06      	cmp	r3, #6
 800884a:	f200 813b 	bhi.w	8008ac4 <USBD_GetDescriptor+0x29c>
 800884e:	a201      	add	r2, pc, #4	; (adr r2, 8008854 <USBD_GetDescriptor+0x2c>)
 8008850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008854:	08008871 	.word	0x08008871
 8008858:	08008889 	.word	0x08008889
 800885c:	080088c9 	.word	0x080088c9
 8008860:	08008ac5 	.word	0x08008ac5
 8008864:	08008ac5 	.word	0x08008ac5
 8008868:	08008a65 	.word	0x08008a65
 800886c:	08008a91 	.word	0x08008a91
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	7c12      	ldrb	r2, [r2, #16]
 800887c:	f107 0108 	add.w	r1, r7, #8
 8008880:	4610      	mov	r0, r2
 8008882:	4798      	blx	r3
 8008884:	60f8      	str	r0, [r7, #12]
      break;
 8008886:	e125      	b.n	8008ad4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	7c1b      	ldrb	r3, [r3, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10d      	bne.n	80088ac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008898:	f107 0208 	add.w	r2, r7, #8
 800889c:	4610      	mov	r0, r2
 800889e:	4798      	blx	r3
 80088a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3301      	adds	r3, #1
 80088a6:	2202      	movs	r2, #2
 80088a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088aa:	e113      	b.n	8008ad4 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b4:	f107 0208 	add.w	r2, r7, #8
 80088b8:	4610      	mov	r0, r2
 80088ba:	4798      	blx	r3
 80088bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	3301      	adds	r3, #1
 80088c2:	2202      	movs	r2, #2
 80088c4:	701a      	strb	r2, [r3, #0]
      break;
 80088c6:	e105      	b.n	8008ad4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	885b      	ldrh	r3, [r3, #2]
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b05      	cmp	r3, #5
 80088d0:	f200 80ac 	bhi.w	8008a2c <USBD_GetDescriptor+0x204>
 80088d4:	a201      	add	r2, pc, #4	; (adr r2, 80088dc <USBD_GetDescriptor+0xb4>)
 80088d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088da:	bf00      	nop
 80088dc:	080088f5 	.word	0x080088f5
 80088e0:	08008929 	.word	0x08008929
 80088e4:	0800895d 	.word	0x0800895d
 80088e8:	08008991 	.word	0x08008991
 80088ec:	080089c5 	.word	0x080089c5
 80088f0:	080089f9 	.word	0x080089f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00b      	beq.n	8008918 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	7c12      	ldrb	r2, [r2, #16]
 800890c:	f107 0108 	add.w	r1, r7, #8
 8008910:	4610      	mov	r0, r2
 8008912:	4798      	blx	r3
 8008914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008916:	e0a4      	b.n	8008a62 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fac4 	bl	8008ea8 <USBD_CtlError>
            err++;
 8008920:	7afb      	ldrb	r3, [r7, #11]
 8008922:	3301      	adds	r3, #1
 8008924:	72fb      	strb	r3, [r7, #11]
          break;
 8008926:	e09c      	b.n	8008a62 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00b      	beq.n	800894c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	7c12      	ldrb	r2, [r2, #16]
 8008940:	f107 0108 	add.w	r1, r7, #8
 8008944:	4610      	mov	r0, r2
 8008946:	4798      	blx	r3
 8008948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800894a:	e08a      	b.n	8008a62 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 faaa 	bl	8008ea8 <USBD_CtlError>
            err++;
 8008954:	7afb      	ldrb	r3, [r7, #11]
 8008956:	3301      	adds	r3, #1
 8008958:	72fb      	strb	r3, [r7, #11]
          break;
 800895a:	e082      	b.n	8008a62 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00b      	beq.n	8008980 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	7c12      	ldrb	r2, [r2, #16]
 8008974:	f107 0108 	add.w	r1, r7, #8
 8008978:	4610      	mov	r0, r2
 800897a:	4798      	blx	r3
 800897c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800897e:	e070      	b.n	8008a62 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fa90 	bl	8008ea8 <USBD_CtlError>
            err++;
 8008988:	7afb      	ldrb	r3, [r7, #11]
 800898a:	3301      	adds	r3, #1
 800898c:	72fb      	strb	r3, [r7, #11]
          break;
 800898e:	e068      	b.n	8008a62 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	7c12      	ldrb	r2, [r2, #16]
 80089a8:	f107 0108 	add.w	r1, r7, #8
 80089ac:	4610      	mov	r0, r2
 80089ae:	4798      	blx	r3
 80089b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089b2:	e056      	b.n	8008a62 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fa76 	bl	8008ea8 <USBD_CtlError>
            err++;
 80089bc:	7afb      	ldrb	r3, [r7, #11]
 80089be:	3301      	adds	r3, #1
 80089c0:	72fb      	strb	r3, [r7, #11]
          break;
 80089c2:	e04e      	b.n	8008a62 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00b      	beq.n	80089e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	7c12      	ldrb	r2, [r2, #16]
 80089dc:	f107 0108 	add.w	r1, r7, #8
 80089e0:	4610      	mov	r0, r2
 80089e2:	4798      	blx	r3
 80089e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089e6:	e03c      	b.n	8008a62 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fa5c 	bl	8008ea8 <USBD_CtlError>
            err++;
 80089f0:	7afb      	ldrb	r3, [r7, #11]
 80089f2:	3301      	adds	r3, #1
 80089f4:	72fb      	strb	r3, [r7, #11]
          break;
 80089f6:	e034      	b.n	8008a62 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	7c12      	ldrb	r2, [r2, #16]
 8008a10:	f107 0108 	add.w	r1, r7, #8
 8008a14:	4610      	mov	r0, r2
 8008a16:	4798      	blx	r3
 8008a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a1a:	e022      	b.n	8008a62 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fa42 	bl	8008ea8 <USBD_CtlError>
            err++;
 8008a24:	7afb      	ldrb	r3, [r7, #11]
 8008a26:	3301      	adds	r3, #1
 8008a28:	72fb      	strb	r3, [r7, #11]
          break;
 8008a2a:	e01a      	b.n	8008a62 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00c      	beq.n	8008a52 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	8852      	ldrh	r2, [r2, #2]
 8008a44:	b2d1      	uxtb	r1, r2
 8008a46:	f107 0208 	add.w	r2, r7, #8
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	4798      	blx	r3
 8008a4e:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8008a50:	e006      	b.n	8008a60 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fa27 	bl	8008ea8 <USBD_CtlError>
            err++;
 8008a5a:	7afb      	ldrb	r3, [r7, #11]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	72fb      	strb	r3, [r7, #11]
          break;
 8008a60:	bf00      	nop
      }
      break;
 8008a62:	e037      	b.n	8008ad4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	7c1b      	ldrb	r3, [r3, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d109      	bne.n	8008a80 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a74:	f107 0208 	add.w	r2, r7, #8
 8008a78:	4610      	mov	r0, r2
 8008a7a:	4798      	blx	r3
 8008a7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a7e:	e029      	b.n	8008ad4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fa10 	bl	8008ea8 <USBD_CtlError>
        err++;
 8008a88:	7afb      	ldrb	r3, [r7, #11]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a8e:	e021      	b.n	8008ad4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	7c1b      	ldrb	r3, [r3, #16]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10d      	bne.n	8008ab4 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa0:	f107 0208 	add.w	r2, r7, #8
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	4798      	blx	r3
 8008aa8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	3301      	adds	r3, #1
 8008aae:	2207      	movs	r2, #7
 8008ab0:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ab2:	e00f      	b.n	8008ad4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f9f6 	bl	8008ea8 <USBD_CtlError>
        err++;
 8008abc:	7afb      	ldrb	r3, [r7, #11]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ac2:	e007      	b.n	8008ad4 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f9ee 	bl	8008ea8 <USBD_CtlError>
      err++;
 8008acc:	7afb      	ldrb	r3, [r7, #11]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ad2:	bf00      	nop
  }

  if (err != 0U)
 8008ad4:	7afb      	ldrb	r3, [r7, #11]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d11e      	bne.n	8008b18 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	88db      	ldrh	r3, [r3, #6]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d016      	beq.n	8008b10 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 8008ae2:	893b      	ldrh	r3, [r7, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00e      	beq.n	8008b06 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	88da      	ldrh	r2, [r3, #6]
 8008aec:	893b      	ldrh	r3, [r7, #8]
 8008aee:	4293      	cmp	r3, r2
 8008af0:	bf28      	it	cs
 8008af2:	4613      	movcs	r3, r2
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008af8:	893b      	ldrh	r3, [r7, #8]
 8008afa:	461a      	mov	r2, r3
 8008afc:	68f9      	ldr	r1, [r7, #12]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fa43 	bl	8008f8a <USBD_CtlSendData>
 8008b04:	e009      	b.n	8008b1a <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f9cd 	bl	8008ea8 <USBD_CtlError>
 8008b0e:	e004      	b.n	8008b1a <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fa94 	bl	800903e <USBD_CtlSendStatus>
 8008b16:	e000      	b.n	8008b1a <USBD_GetDescriptor+0x2f2>
    return;
 8008b18:	bf00      	nop
  }
}
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	889b      	ldrh	r3, [r3, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d131      	bne.n	8008b96 <USBD_SetAddress+0x76>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	88db      	ldrh	r3, [r3, #6]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d12d      	bne.n	8008b96 <USBD_SetAddress+0x76>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	885b      	ldrh	r3, [r3, #2]
 8008b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8008b40:	d829      	bhi.n	8008b96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	885b      	ldrh	r3, [r3, #2]
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d104      	bne.n	8008b64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f9a3 	bl	8008ea8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b62:	e01d      	b.n	8008ba0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	7bfa      	ldrb	r2, [r7, #15]
 8008b68:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	4619      	mov	r1, r3
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fcc2 	bl	80094fa <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa61 	bl	800903e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d004      	beq.n	8008b8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2202      	movs	r2, #2
 8008b86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8a:	e009      	b.n	8008ba0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b94:	e004      	b.n	8008ba0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f985 	bl	8008ea8 <USBD_CtlError>
  }
}
 8008b9e:	bf00      	nop
 8008ba0:	bf00      	nop
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	885b      	ldrh	r3, [r3, #2]
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	4b4c      	ldr	r3, [pc, #304]	; (8008cf0 <USBD_SetConfig+0x148>)
 8008bbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bc0:	4b4b      	ldr	r3, [pc, #300]	; (8008cf0 <USBD_SetConfig+0x148>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d905      	bls.n	8008bd4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f96c 	bl	8008ea8 <USBD_CtlError>
    return USBD_FAIL;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e088      	b.n	8008ce6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d002      	beq.n	8008be6 <USBD_SetConfig+0x3e>
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d025      	beq.n	8008c30 <USBD_SetConfig+0x88>
 8008be4:	e071      	b.n	8008cca <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008be6:	4b42      	ldr	r3, [pc, #264]	; (8008cf0 <USBD_SetConfig+0x148>)
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d01c      	beq.n	8008c28 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008bee:	4b40      	ldr	r3, [pc, #256]	; (8008cf0 <USBD_SetConfig+0x148>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bf8:	4b3d      	ldr	r3, [pc, #244]	; (8008cf0 <USBD_SetConfig+0x148>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7ff f93c 	bl	8007e7c <USBD_SetClassConfig>
 8008c04:	4603      	mov	r3, r0
 8008c06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d004      	beq.n	8008c18 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f949 	bl	8008ea8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c16:	e065      	b.n	8008ce4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fa10 	bl	800903e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2203      	movs	r2, #3
 8008c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c26:	e05d      	b.n	8008ce4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fa08 	bl	800903e <USBD_CtlSendStatus>
      break;
 8008c2e:	e059      	b.n	8008ce4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c30:	4b2f      	ldr	r3, [pc, #188]	; (8008cf0 <USBD_SetConfig+0x148>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d112      	bne.n	8008c5e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c40:	4b2b      	ldr	r3, [pc, #172]	; (8008cf0 <USBD_SetConfig+0x148>)
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	461a      	mov	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c4a:	4b29      	ldr	r3, [pc, #164]	; (8008cf0 <USBD_SetConfig+0x148>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff f92f 	bl	8007eb4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f9f1 	bl	800903e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c5c:	e042      	b.n	8008ce4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008c5e:	4b24      	ldr	r3, [pc, #144]	; (8008cf0 <USBD_SetConfig+0x148>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	461a      	mov	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d02a      	beq.n	8008cc2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff f91d 	bl	8007eb4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c7a:	4b1d      	ldr	r3, [pc, #116]	; (8008cf0 <USBD_SetConfig+0x148>)
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c84:	4b1a      	ldr	r3, [pc, #104]	; (8008cf0 <USBD_SetConfig+0x148>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7ff f8f6 	bl	8007e7c <USBD_SetClassConfig>
 8008c90:	4603      	mov	r3, r0
 8008c92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00f      	beq.n	8008cba <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f903 	bl	8008ea8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7ff f902 	bl	8007eb4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008cb8:	e014      	b.n	8008ce4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f9bf 	bl	800903e <USBD_CtlSendStatus>
      break;
 8008cc0:	e010      	b.n	8008ce4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f9bb 	bl	800903e <USBD_CtlSendStatus>
      break;
 8008cc8:	e00c      	b.n	8008ce4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f8eb 	bl	8008ea8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cd2:	4b07      	ldr	r3, [pc, #28]	; (8008cf0 <USBD_SetConfig+0x148>)
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff f8eb 	bl	8007eb4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ce2:	bf00      	nop
  }

  return ret;
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	200092dc 	.word	0x200092dc

08008cf4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	88db      	ldrh	r3, [r3, #6]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d004      	beq.n	8008d10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f8cd 	bl	8008ea8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d0e:	e023      	b.n	8008d58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	dc02      	bgt.n	8008d22 <USBD_GetConfig+0x2e>
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	dc03      	bgt.n	8008d28 <USBD_GetConfig+0x34>
 8008d20:	e015      	b.n	8008d4e <USBD_GetConfig+0x5a>
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d00b      	beq.n	8008d3e <USBD_GetConfig+0x4a>
 8008d26:	e012      	b.n	8008d4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	3308      	adds	r3, #8
 8008d32:	2201      	movs	r2, #1
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f927 	bl	8008f8a <USBD_CtlSendData>
        break;
 8008d3c:	e00c      	b.n	8008d58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	3304      	adds	r3, #4
 8008d42:	2201      	movs	r2, #1
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f91f 	bl	8008f8a <USBD_CtlSendData>
        break;
 8008d4c:	e004      	b.n	8008d58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f8a9 	bl	8008ea8 <USBD_CtlError>
        break;
 8008d56:	bf00      	nop
}
 8008d58:	bf00      	nop
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	3b01      	subs	r3, #1
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d81e      	bhi.n	8008db6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	88db      	ldrh	r3, [r3, #6]
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d004      	beq.n	8008d8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f890 	bl	8008ea8 <USBD_CtlError>
        break;
 8008d88:	e01a      	b.n	8008dc0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d005      	beq.n	8008da6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	f043 0202 	orr.w	r2, r3, #2
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	330c      	adds	r3, #12
 8008daa:	2202      	movs	r2, #2
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f8eb 	bl	8008f8a <USBD_CtlSendData>
      break;
 8008db4:	e004      	b.n	8008dc0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f875 	bl	8008ea8 <USBD_CtlError>
      break;
 8008dbe:	bf00      	nop
  }
}
 8008dc0:	bf00      	nop
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	885b      	ldrh	r3, [r3, #2]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d106      	bne.n	8008de8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f92b 	bl	800903e <USBD_CtlSendStatus>
  }
}
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	3b01      	subs	r3, #1
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d80b      	bhi.n	8008e20 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	885b      	ldrh	r3, [r3, #2]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d10c      	bne.n	8008e2a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f910 	bl	800903e <USBD_CtlSendStatus>
      }
      break;
 8008e1e:	e004      	b.n	8008e2a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f840 	bl	8008ea8 <USBD_CtlError>
      break;
 8008e28:	e000      	b.n	8008e2c <USBD_ClrFeature+0x3c>
      break;
 8008e2a:	bf00      	nop
  }
}
 8008e2c:	bf00      	nop
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	781a      	ldrb	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f7ff faaa 	bl	80083b8 <SWAPBYTE>
 8008e64:	4603      	mov	r3, r0
 8008e66:	461a      	mov	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3301      	adds	r3, #1
 8008e76:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f7ff fa9d 	bl	80083b8 <SWAPBYTE>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	461a      	mov	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f7ff fa90 	bl	80083b8 <SWAPBYTE>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	80da      	strh	r2, [r3, #6]
}
 8008ea0:	bf00      	nop
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eb2:	2180      	movs	r1, #128	; 0x80
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fab6 	bl	8009426 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008eba:	2100      	movs	r1, #0
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 fab2 	bl	8009426 <USBD_LL_StallEP>
}
 8008ec2:	bf00      	nop
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b086      	sub	sp, #24
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d036      	beq.n	8008f4e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ee4:	6938      	ldr	r0, [r7, #16]
 8008ee6:	f000 f836 	bl	8008f56 <USBD_GetLen>
 8008eea:	4603      	mov	r3, r0
 8008eec:	3301      	adds	r3, #1
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	005b      	lsls	r3, r3, #1
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	4413      	add	r3, r2
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	7812      	ldrb	r2, [r2, #0]
 8008f02:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f04:	7dfb      	ldrb	r3, [r7, #23]
 8008f06:	3301      	adds	r3, #1
 8008f08:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	4413      	add	r3, r2
 8008f10:	2203      	movs	r2, #3
 8008f12:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
 8008f16:	3301      	adds	r3, #1
 8008f18:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f1a:	e013      	b.n	8008f44 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	4413      	add	r3, r2
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	7812      	ldrb	r2, [r2, #0]
 8008f26:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	613b      	str	r3, [r7, #16]
    idx++;
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	3301      	adds	r3, #1
 8008f32:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	4413      	add	r3, r2
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f3e:	7dfb      	ldrb	r3, [r7, #23]
 8008f40:	3301      	adds	r3, #1
 8008f42:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1e7      	bne.n	8008f1c <USBD_GetString+0x52>
 8008f4c:	e000      	b.n	8008f50 <USBD_GetString+0x86>
    return;
 8008f4e:	bf00      	nop
  }
}
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b085      	sub	sp, #20
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f66:	e005      	b.n	8008f74 <USBD_GetLen+0x1e>
  {
    len++;
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	3301      	adds	r3, #1
 8008f72:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1f5      	bne.n	8008f68 <USBD_GetLen+0x12>
  }

  return len;
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2202      	movs	r2, #2
 8008f9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	2100      	movs	r1, #0
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 fac1 	bl	8009538 <USBD_LL_Transmit>

  return USBD_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f000 fab0 	bl	8009538 <USBD_LL_Transmit>

  return USBD_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b084      	sub	sp, #16
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	60f8      	str	r0, [r7, #12]
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2203      	movs	r2, #3
 8008ff2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	2100      	movs	r1, #0
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 fab4 	bl	800957a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	2100      	movs	r1, #0
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f000 faa3 	bl	800957a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b082      	sub	sp, #8
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2204      	movs	r2, #4
 800904a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800904e:	2300      	movs	r3, #0
 8009050:	2200      	movs	r2, #0
 8009052:	2100      	movs	r1, #0
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fa6f 	bl	8009538 <USBD_LL_Transmit>

  return USBD_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2205      	movs	r2, #5
 8009070:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009074:	2300      	movs	r3, #0
 8009076:	2200      	movs	r2, #0
 8009078:	2100      	movs	r1, #0
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fa7d 	bl	800957a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b082      	sub	sp, #8
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800909e:	4619      	mov	r1, r3
 80090a0:	4610      	mov	r0, r2
 80090a2:	f7fe ff1f 	bl	8007ee4 <USBD_LL_SetupStage>
}
 80090a6:	bf00      	nop
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b082      	sub	sp, #8
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	460b      	mov	r3, r1
 80090b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80090c0:	78fa      	ldrb	r2, [r7, #3]
 80090c2:	6879      	ldr	r1, [r7, #4]
 80090c4:	4613      	mov	r3, r2
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	1a9b      	subs	r3, r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	440b      	add	r3, r1
 80090ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	78fb      	ldrb	r3, [r7, #3]
 80090d6:	4619      	mov	r1, r3
 80090d8:	f7fe ff59 	bl	8007f8e <USBD_LL_DataOutStage>
}
 80090dc:	bf00      	nop
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	460b      	mov	r3, r1
 80090ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80090f6:	78fa      	ldrb	r2, [r7, #3]
 80090f8:	6879      	ldr	r1, [r7, #4]
 80090fa:	4613      	mov	r3, r2
 80090fc:	00db      	lsls	r3, r3, #3
 80090fe:	1a9b      	subs	r3, r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	440b      	add	r3, r1
 8009104:	3348      	adds	r3, #72	; 0x48
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	78fb      	ldrb	r3, [r7, #3]
 800910a:	4619      	mov	r1, r3
 800910c:	f7fe ffa2 	bl	8008054 <USBD_LL_DataInStage>
}
 8009110:	bf00      	nop
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009126:	4618      	mov	r0, r3
 8009128:	f7ff f8b1 	bl	800828e <USBD_LL_SOF>
}
 800912c:	bf00      	nop
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800913c:	2301      	movs	r3, #1
 800913e:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	2b02      	cmp	r3, #2
 8009146:	d102      	bne.n	800914e <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 8009148:	2301      	movs	r3, #1
 800914a:	73fb      	strb	r3, [r7, #15]
 800914c:	e008      	b.n	8009160 <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d102      	bne.n	800915c <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 8009156:	2300      	movs	r3, #0
 8009158:	73fb      	strb	r3, [r7, #15]
 800915a:	e001      	b.n	8009160 <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800915c:	f7f7 fb5a 	bl	8000814 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009166:	7bfa      	ldrb	r2, [r7, #15]
 8009168:	4611      	mov	r1, r2
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff f851 	bl	8008212 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009176:	4618      	mov	r0, r3
 8009178:	f7ff f802 	bl	8008180 <USBD_LL_Reset>
}
 800917c:	bf00      	nop
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009192:	4618      	mov	r0, r3
 8009194:	f7ff f84d 	bl	8008232 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	6812      	ldr	r2, [r2, #0]
 80091a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091aa:	f043 0301 	orr.w	r3, r3, #1
 80091ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a1b      	ldr	r3, [r3, #32]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d005      	beq.n	80091c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091b8:	4b04      	ldr	r3, [pc, #16]	; (80091cc <HAL_PCD_SuspendCallback+0x48>)
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	4a03      	ldr	r2, [pc, #12]	; (80091cc <HAL_PCD_SuspendCallback+0x48>)
 80091be:	f043 0306 	orr.w	r3, r3, #6
 80091c2:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 80091c4:	bf00      	nop
 80091c6:	3708      	adds	r7, #8
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	e000ed00 	.word	0xe000ed00

080091d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091de:	4618      	mov	r0, r3
 80091e0:	f7ff f83d 	bl	800825e <USBD_LL_Resume>
}
 80091e4:	bf00      	nop
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091fe:	78fa      	ldrb	r2, [r7, #3]
 8009200:	4611      	mov	r1, r2
 8009202:	4618      	mov	r0, r3
 8009204:	f7ff f88b 	bl	800831e <USBD_LL_IsoOUTIncomplete>
}
 8009208:	bf00      	nop
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009222:	78fa      	ldrb	r2, [r7, #3]
 8009224:	4611      	mov	r1, r2
 8009226:	4618      	mov	r0, r3
 8009228:	f7ff f853 	bl	80082d2 <USBD_LL_IsoINIncomplete>
}
 800922c:	bf00      	nop
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009242:	4618      	mov	r0, r3
 8009244:	f7ff f891 	bl	800836a <USBD_LL_DevConnected>
}
 8009248:	bf00      	nop
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800925e:	4618      	mov	r0, r3
 8009260:	f7ff f88e 	bl	8008380 <USBD_LL_DevDisconnected>
}
 8009264:	bf00      	nop
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 8009274:	4b27      	ldr	r3, [pc, #156]	; (8009314 <USBD_LL_Init+0xa8>)
 8009276:	4a28      	ldr	r2, [pc, #160]	; (8009318 <USBD_LL_Init+0xac>)
 8009278:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d142      	bne.n	8009308 <USBD_LL_Init+0x9c>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 8009282:	4b24      	ldr	r3, [pc, #144]	; (8009314 <USBD_LL_Init+0xa8>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    pdev->pData = hpcd_USB_OTG_PTR;
 800928c:	4b21      	ldr	r3, [pc, #132]	; (8009314 <USBD_LL_Init+0xa8>)
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
    pma_track += 128;
#endif

#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFo(hpcd_USB_OTG_PTR, 128); // ALL OUT EP Buffer
 8009296:	4b1f      	ldr	r3, [pc, #124]	; (8009314 <USBD_LL_Init+0xa8>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2180      	movs	r1, #128	; 0x80
 800929c:	4618      	mov	r0, r3
 800929e:	f7f9 f946 	bl	800252e <HAL_PCDEx_SetRxFiFo>

    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, 0, 16); // EP0 IN
 80092a2:	4b1c      	ldr	r3, [pc, #112]	; (8009314 <USBD_LL_Init+0xa8>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2210      	movs	r2, #16
 80092a8:	2100      	movs	r1, #0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7f9 f8f8 	bl	80024a0 <HAL_PCDEx_SetTxFiFo>

#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80092b0:	2300      	movs	r3, #0
 80092b2:	73fb      	strb	r3, [r7, #15]
 80092b4:	e01a      	b.n	80092ec <USBD_LL_Init+0x80>
    {
      HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 32);
 80092b6:	4b17      	ldr	r3, [pc, #92]	; (8009314 <USBD_LL_Init+0xa8>)
 80092b8:	6818      	ldr	r0, [r3, #0]
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	4a17      	ldr	r2, [pc, #92]	; (800931c <USBD_LL_Init+0xb0>)
 80092be:	5cd3      	ldrb	r3, [r2, r3]
 80092c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2220      	movs	r2, #32
 80092c8:	4619      	mov	r1, r3
 80092ca:	f7f9 f8e9 	bl	80024a0 <HAL_PCDEx_SetTxFiFo>
      HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 16);
 80092ce:	4b11      	ldr	r3, [pc, #68]	; (8009314 <USBD_LL_Init+0xa8>)
 80092d0:	6818      	ldr	r0, [r3, #0]
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
 80092d4:	4a12      	ldr	r2, [pc, #72]	; (8009320 <USBD_LL_Init+0xb4>)
 80092d6:	5cd3      	ldrb	r3, [r2, r3]
 80092d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2210      	movs	r2, #16
 80092e0:	4619      	mov	r1, r3
 80092e2:	f7f9 f8dd 	bl	80024a0 <HAL_PCDEx_SetTxFiFo>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	3301      	adds	r3, #1
 80092ea:	73fb      	strb	r3, [r7, #15]
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0e1      	beq.n	80092b6 <USBD_LL_Init+0x4a>
#endif
#if (USBD_USE_UVC == 1)
    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (UVC_IN_EP & 0x7F), 512);
#endif
#if (USBD_USE_MSC == 1)
    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (MSC_IN_EP & 0x7F), 32);
 80092f2:	4b08      	ldr	r3, [pc, #32]	; (8009314 <USBD_LL_Init+0xa8>)
 80092f4:	6818      	ldr	r0, [r3, #0]
 80092f6:	4b0b      	ldr	r3, [pc, #44]	; (8009324 <USBD_LL_Init+0xb8>)
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	2220      	movs	r2, #32
 8009302:	4619      	mov	r1, r3
 8009304:	f7f9 f8cc 	bl	80024a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	200092e0 	.word	0x200092e0
 8009318:	20000378 	.word	0x20000378
 800931c:	20008d28 	.word	0x20008d28
 8009320:	20008d30 	.word	0x20008d30
 8009324:	200001ba 	.word	0x200001ba

08009328 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800933e:	4618      	mov	r0, r3
 8009340:	f7f8 f87e 	bl	8001440 <HAL_PCD_Start>
 8009344:	4603      	mov	r3, r0
 8009346:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009348:	7bfb      	ldrb	r3, [r7, #15]
 800934a:	4618      	mov	r0, r3
 800934c:	f000 f94a 	bl	80095e4 <USBD_Get_USB_Status>
 8009350:	4603      	mov	r3, r0
 8009352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009354:	7bbb      	ldrb	r3, [r7, #14]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	4608      	mov	r0, r1
 8009368:	4611      	mov	r1, r2
 800936a:	461a      	mov	r2, r3
 800936c:	4603      	mov	r3, r0
 800936e:	70fb      	strb	r3, [r7, #3]
 8009370:	460b      	mov	r3, r1
 8009372:	70bb      	strb	r3, [r7, #2]
 8009374:	4613      	mov	r3, r2
 8009376:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8009386:	78bb      	ldrb	r3, [r7, #2]
 8009388:	883a      	ldrh	r2, [r7, #0]
 800938a:	78f9      	ldrb	r1, [r7, #3]
 800938c:	f7f8 fc62 	bl	8001c54 <HAL_PCD_EP_Open>
 8009390:	4603      	mov	r3, r0
 8009392:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009394:	7bfb      	ldrb	r3, [r7, #15]
 8009396:	4618      	mov	r0, r3
 8009398:	f000 f924 	bl	80095e4 <USBD_Get_USB_Status>
 800939c:	4603      	mov	r3, r0
 800939e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b084      	sub	sp, #16
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	460b      	mov	r3, r1
 80093b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80093c4:	78fa      	ldrb	r2, [r7, #3]
 80093c6:	4611      	mov	r1, r2
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7f8 fcab 	bl	8001d24 <HAL_PCD_EP_Close>
 80093ce:	4603      	mov	r3, r0
 80093d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 f905 	bl	80095e4 <USBD_Get_USB_Status>
 80093da:	4603      	mov	r3, r0
 80093dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093de:	7bbb      	ldrb	r3, [r7, #14]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	460b      	mov	r3, r1
 80093f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8009402:	78fa      	ldrb	r2, [r7, #3]
 8009404:	4611      	mov	r1, r2
 8009406:	4618      	mov	r0, r3
 8009408:	f7f8 fe3d 	bl	8002086 <HAL_PCD_EP_Flush>
 800940c:	4603      	mov	r3, r0
 800940e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009410:	7bfb      	ldrb	r3, [r7, #15]
 8009412:	4618      	mov	r0, r3
 8009414:	f000 f8e6 	bl	80095e4 <USBD_Get_USB_Status>
 8009418:	4603      	mov	r3, r0
 800941a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800941c:	7bbb      	ldrb	r3, [r7, #14]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b084      	sub	sp, #16
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	460b      	mov	r3, r1
 8009430:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8009440:	78fa      	ldrb	r2, [r7, #3]
 8009442:	4611      	mov	r1, r2
 8009444:	4618      	mov	r0, r3
 8009446:	f7f8 fd64 	bl	8001f12 <HAL_PCD_EP_SetStall>
 800944a:	4603      	mov	r3, r0
 800944c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800944e:	7bfb      	ldrb	r3, [r7, #15]
 8009450:	4618      	mov	r0, r3
 8009452:	f000 f8c7 	bl	80095e4 <USBD_Get_USB_Status>
 8009456:	4603      	mov	r3, r0
 8009458:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800945a:	7bbb      	ldrb	r3, [r7, #14]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800947e:	78fa      	ldrb	r2, [r7, #3]
 8009480:	4611      	mov	r1, r2
 8009482:	4618      	mov	r0, r3
 8009484:	f7f8 fda9 	bl	8001fda <HAL_PCD_EP_ClrStall>
 8009488:	4603      	mov	r3, r0
 800948a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800948c:	7bfb      	ldrb	r3, [r7, #15]
 800948e:	4618      	mov	r0, r3
 8009490:	f000 f8a8 	bl	80095e4 <USBD_Get_USB_Status>
 8009494:	4603      	mov	r3, r0
 8009496:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009498:	7bbb      	ldrb	r3, [r7, #14]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b085      	sub	sp, #20
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	460b      	mov	r3, r1
 80094ac:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80094b4:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 80094b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	da0b      	bge.n	80094d6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094be:	78fb      	ldrb	r3, [r7, #3]
 80094c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094c4:	68f9      	ldr	r1, [r7, #12]
 80094c6:	4613      	mov	r3, r2
 80094c8:	00db      	lsls	r3, r3, #3
 80094ca:	1a9b      	subs	r3, r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	440b      	add	r3, r1
 80094d0:	333e      	adds	r3, #62	; 0x3e
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	e00b      	b.n	80094ee <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094d6:	78fb      	ldrb	r3, [r7, #3]
 80094d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094dc:	68f9      	ldr	r1, [r7, #12]
 80094de:	4613      	mov	r3, r2
 80094e0:	00db      	lsls	r3, r3, #3
 80094e2:	1a9b      	subs	r3, r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	440b      	add	r3, r1
 80094e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094ec:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	460b      	mov	r3, r1
 8009504:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8009514:	78fa      	ldrb	r2, [r7, #3]
 8009516:	4611      	mov	r1, r2
 8009518:	4618      	mov	r0, r3
 800951a:	f7f8 fb76 	bl	8001c0a <HAL_PCD_SetAddress>
 800951e:	4603      	mov	r3, r0
 8009520:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009522:	7bfb      	ldrb	r3, [r7, #15]
 8009524:	4618      	mov	r0, r3
 8009526:	f000 f85d 	bl	80095e4 <USBD_Get_USB_Status>
 800952a:	4603      	mov	r3, r0
 800952c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800952e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	607a      	str	r2, [r7, #4]
 8009542:	603b      	str	r3, [r7, #0]
 8009544:	460b      	mov	r3, r1
 8009546:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800954c:	2300      	movs	r3, #0
 800954e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8009556:	7af9      	ldrb	r1, [r7, #11]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	f7f8 fc8f 	bl	8001e7e <HAL_PCD_EP_Transmit>
 8009560:	4603      	mov	r3, r0
 8009562:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009564:	7dfb      	ldrb	r3, [r7, #23]
 8009566:	4618      	mov	r0, r3
 8009568:	f000 f83c 	bl	80095e4 <USBD_Get_USB_Status>
 800956c:	4603      	mov	r3, r0
 800956e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009570:	7dbb      	ldrb	r3, [r7, #22]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3718      	adds	r7, #24
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b086      	sub	sp, #24
 800957e:	af00      	add	r7, sp, #0
 8009580:	60f8      	str	r0, [r7, #12]
 8009582:	607a      	str	r2, [r7, #4]
 8009584:	603b      	str	r3, [r7, #0]
 8009586:	460b      	mov	r3, r1
 8009588:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8009598:	7af9      	ldrb	r1, [r7, #11]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	f7f8 fc0b 	bl	8001db8 <HAL_PCD_EP_Receive>
 80095a2:	4603      	mov	r3, r0
 80095a4:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 80095a6:	7dfb      	ldrb	r3, [r7, #23]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f000 f81b 	bl	80095e4 <USBD_Get_USB_Status>
 80095ae:	4603      	mov	r3, r0
 80095b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3718      	adds	r7, #24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	460b      	mov	r3, r1
 80095c6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80095ce:	78fa      	ldrb	r2, [r7, #3]
 80095d0:	4611      	mov	r1, r2
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7f8 fc3b 	bl	8001e4e <HAL_PCD_EP_GetRxCount>
 80095d8:	4603      	mov	r3, r0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
	...

080095e4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	4603      	mov	r3, r0
 80095ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095f2:	79fb      	ldrb	r3, [r7, #7]
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d817      	bhi.n	8009628 <USBD_Get_USB_Status+0x44>
 80095f8:	a201      	add	r2, pc, #4	; (adr r2, 8009600 <USBD_Get_USB_Status+0x1c>)
 80095fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fe:	bf00      	nop
 8009600:	08009611 	.word	0x08009611
 8009604:	08009617 	.word	0x08009617
 8009608:	0800961d 	.word	0x0800961d
 800960c:	08009623 	.word	0x08009623
  {
  case HAL_OK:
    usb_status = USBD_OK;
 8009610:	2300      	movs	r3, #0
 8009612:	73fb      	strb	r3, [r7, #15]
    break;
 8009614:	e00b      	b.n	800962e <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 8009616:	2303      	movs	r3, #3
 8009618:	73fb      	strb	r3, [r7, #15]
    break;
 800961a:	e008      	b.n	800962e <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800961c:	2301      	movs	r3, #1
 800961e:	73fb      	strb	r3, [r7, #15]
    break;
 8009620:	e005      	b.n	800962e <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 8009622:	2303      	movs	r3, #3
 8009624:	73fb      	strb	r3, [r7, #15]
    break;
 8009626:	e002      	b.n	800962e <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 8009628:	2303      	movs	r3, #3
 800962a:	73fb      	strb	r3, [r7, #15]
    break;
 800962c:	bf00      	nop
  }
  return usb_status;
 800962e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3714      	adds	r7, #20
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <__NVIC_SetPriority>:
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	6039      	str	r1, [r7, #0]
 8009646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800964c:	2b00      	cmp	r3, #0
 800964e:	db0a      	blt.n	8009666 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	b2da      	uxtb	r2, r3
 8009654:	490c      	ldr	r1, [pc, #48]	; (8009688 <__NVIC_SetPriority+0x4c>)
 8009656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800965a:	0112      	lsls	r2, r2, #4
 800965c:	b2d2      	uxtb	r2, r2
 800965e:	440b      	add	r3, r1
 8009660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009664:	e00a      	b.n	800967c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	b2da      	uxtb	r2, r3
 800966a:	4908      	ldr	r1, [pc, #32]	; (800968c <__NVIC_SetPriority+0x50>)
 800966c:	79fb      	ldrb	r3, [r7, #7]
 800966e:	f003 030f 	and.w	r3, r3, #15
 8009672:	3b04      	subs	r3, #4
 8009674:	0112      	lsls	r2, r2, #4
 8009676:	b2d2      	uxtb	r2, r2
 8009678:	440b      	add	r3, r1
 800967a:	761a      	strb	r2, [r3, #24]
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	e000e100 	.word	0xe000e100
 800968c:	e000ed00 	.word	0xe000ed00

08009690 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009690:	b580      	push	{r7, lr}
 8009692:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009694:	4b05      	ldr	r3, [pc, #20]	; (80096ac <SysTick_Handler+0x1c>)
 8009696:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009698:	f001 fd4e 	bl	800b138 <xTaskGetSchedulerState>
 800969c:	4603      	mov	r3, r0
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d001      	beq.n	80096a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80096a2:	f002 fb39 	bl	800bd18 <xPortSysTickHandler>
  }
}
 80096a6:	bf00      	nop
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	e000e010 	.word	0xe000e010

080096b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80096b0:	b580      	push	{r7, lr}
 80096b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80096b4:	2100      	movs	r1, #0
 80096b6:	f06f 0004 	mvn.w	r0, #4
 80096ba:	f7ff ffbf 	bl	800963c <__NVIC_SetPriority>
#endif
}
 80096be:	bf00      	nop
 80096c0:	bd80      	pop	{r7, pc}
	...

080096c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096ca:	f3ef 8305 	mrs	r3, IPSR
 80096ce:	603b      	str	r3, [r7, #0]
  return(result);
 80096d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d003      	beq.n	80096de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80096d6:	f06f 0305 	mvn.w	r3, #5
 80096da:	607b      	str	r3, [r7, #4]
 80096dc:	e00c      	b.n	80096f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80096de:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <osKernelInitialize+0x44>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d105      	bne.n	80096f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80096e6:	4b08      	ldr	r3, [pc, #32]	; (8009708 <osKernelInitialize+0x44>)
 80096e8:	2201      	movs	r2, #1
 80096ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	607b      	str	r3, [r7, #4]
 80096f0:	e002      	b.n	80096f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80096f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80096f8:	687b      	ldr	r3, [r7, #4]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	200092e4 	.word	0x200092e4

0800970c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009712:	f3ef 8305 	mrs	r3, IPSR
 8009716:	603b      	str	r3, [r7, #0]
  return(result);
 8009718:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800971a:	2b00      	cmp	r3, #0
 800971c:	d003      	beq.n	8009726 <osKernelStart+0x1a>
    stat = osErrorISR;
 800971e:	f06f 0305 	mvn.w	r3, #5
 8009722:	607b      	str	r3, [r7, #4]
 8009724:	e010      	b.n	8009748 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009726:	4b0b      	ldr	r3, [pc, #44]	; (8009754 <osKernelStart+0x48>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d109      	bne.n	8009742 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800972e:	f7ff ffbf 	bl	80096b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009732:	4b08      	ldr	r3, [pc, #32]	; (8009754 <osKernelStart+0x48>)
 8009734:	2202      	movs	r2, #2
 8009736:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009738:	f001 f890 	bl	800a85c <vTaskStartScheduler>
      stat = osOK;
 800973c:	2300      	movs	r3, #0
 800973e:	607b      	str	r3, [r7, #4]
 8009740:	e002      	b.n	8009748 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009746:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009748:	687b      	ldr	r3, [r7, #4]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	200092e4 	.word	0x200092e4

08009758 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800975e:	f3ef 8305 	mrs	r3, IPSR
 8009762:	603b      	str	r3, [r7, #0]
  return(result);
 8009764:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800976a:	f001 f9a3 	bl	800aab4 <xTaskGetTickCountFromISR>
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	e002      	b.n	8009778 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009772:	f001 f98f 	bl	800aa94 <xTaskGetTickCount>
 8009776:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009778:	687b      	ldr	r3, [r7, #4]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009782:	b580      	push	{r7, lr}
 8009784:	b08e      	sub	sp, #56	; 0x38
 8009786:	af04      	add	r7, sp, #16
 8009788:	60f8      	str	r0, [r7, #12]
 800978a:	60b9      	str	r1, [r7, #8]
 800978c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800978e:	2300      	movs	r3, #0
 8009790:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009792:	f3ef 8305 	mrs	r3, IPSR
 8009796:	617b      	str	r3, [r7, #20]
  return(result);
 8009798:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800979a:	2b00      	cmp	r3, #0
 800979c:	d17e      	bne.n	800989c <osThreadNew+0x11a>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d07b      	beq.n	800989c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80097a4:	2380      	movs	r3, #128	; 0x80
 80097a6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80097a8:	2318      	movs	r3, #24
 80097aa:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80097ac:	2300      	movs	r3, #0
 80097ae:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80097b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097b4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d045      	beq.n	8009848 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d002      	beq.n	80097ca <osThreadNew+0x48>
        name = attr->name;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d002      	beq.n	80097d8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d008      	beq.n	80097f0 <osThreadNew+0x6e>
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	2b38      	cmp	r3, #56	; 0x38
 80097e2:	d805      	bhi.n	80097f0 <osThreadNew+0x6e>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	f003 0301 	and.w	r3, r3, #1
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <osThreadNew+0x72>
        return (NULL);
 80097f0:	2300      	movs	r3, #0
 80097f2:	e054      	b.n	800989e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	695b      	ldr	r3, [r3, #20]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d003      	beq.n	8009804 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	089b      	lsrs	r3, r3, #2
 8009802:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00e      	beq.n	800982a <osThreadNew+0xa8>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	2ba7      	cmp	r3, #167	; 0xa7
 8009812:	d90a      	bls.n	800982a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009818:	2b00      	cmp	r3, #0
 800981a:	d006      	beq.n	800982a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d002      	beq.n	800982a <osThreadNew+0xa8>
        mem = 1;
 8009824:	2301      	movs	r3, #1
 8009826:	61bb      	str	r3, [r7, #24]
 8009828:	e010      	b.n	800984c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10c      	bne.n	800984c <osThreadNew+0xca>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d108      	bne.n	800984c <osThreadNew+0xca>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d104      	bne.n	800984c <osThreadNew+0xca>
          mem = 0;
 8009842:	2300      	movs	r3, #0
 8009844:	61bb      	str	r3, [r7, #24]
 8009846:	e001      	b.n	800984c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009848:	2300      	movs	r3, #0
 800984a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	2b01      	cmp	r3, #1
 8009850:	d110      	bne.n	8009874 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800985a:	9202      	str	r2, [sp, #8]
 800985c:	9301      	str	r3, [sp, #4]
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	6a3a      	ldr	r2, [r7, #32]
 8009866:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 fe0b 	bl	800a484 <xTaskCreateStatic>
 800986e:	4603      	mov	r3, r0
 8009870:	613b      	str	r3, [r7, #16]
 8009872:	e013      	b.n	800989c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d110      	bne.n	800989c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	b29a      	uxth	r2, r3
 800987e:	f107 0310 	add.w	r3, r7, #16
 8009882:	9301      	str	r3, [sp, #4]
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f000 fe56 	bl	800a53e <xTaskCreate>
 8009892:	4603      	mov	r3, r0
 8009894:	2b01      	cmp	r3, #1
 8009896:	d001      	beq.n	800989c <osThreadNew+0x11a>
            hTask = NULL;
 8009898:	2300      	movs	r3, #0
 800989a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800989c:	693b      	ldr	r3, [r7, #16]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3728      	adds	r7, #40	; 0x28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b084      	sub	sp, #16
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098ae:	f3ef 8305 	mrs	r3, IPSR
 80098b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80098b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <osDelay+0x1c>
    stat = osErrorISR;
 80098ba:	f06f 0305 	mvn.w	r3, #5
 80098be:	60fb      	str	r3, [r7, #12]
 80098c0:	e007      	b.n	80098d2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <osDelay+0x2c>
      vTaskDelay(ticks);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 ff91 	bl	800a7f4 <vTaskDelay>
    }
  }

  return (stat);
 80098d2:	68fb      	ldr	r3, [r7, #12]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4a07      	ldr	r2, [pc, #28]	; (8009908 <vApplicationGetIdleTaskMemory+0x2c>)
 80098ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	4a06      	ldr	r2, [pc, #24]	; (800990c <vApplicationGetIdleTaskMemory+0x30>)
 80098f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2280      	movs	r2, #128	; 0x80
 80098f8:	601a      	str	r2, [r3, #0]
}
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	200092e8 	.word	0x200092e8
 800990c:	20009390 	.word	0x20009390

08009910 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4a07      	ldr	r2, [pc, #28]	; (800993c <vApplicationGetTimerTaskMemory+0x2c>)
 8009920:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	4a06      	ldr	r2, [pc, #24]	; (8009940 <vApplicationGetTimerTaskMemory+0x30>)
 8009926:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800992e:	601a      	str	r2, [r3, #0]
}
 8009930:	bf00      	nop
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	20009590 	.word	0x20009590
 8009940:	20009638 	.word	0x20009638

08009944 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f103 0208 	add.w	r2, r3, #8
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800995c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f103 0208 	add.w	r2, r3, #8
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f103 0208 	add.w	r2, r3, #8
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009992:	bf00      	nop
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800999e:	b480      	push	{r7}
 80099a0:	b085      	sub	sp, #20
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	689a      	ldr	r2, [r3, #8]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	1c5a      	adds	r2, r3, #1
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	601a      	str	r2, [r3, #0]
}
 80099da:	bf00      	nop
 80099dc:	3714      	adds	r7, #20
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099e6:	b480      	push	{r7}
 80099e8:	b085      	sub	sp, #20
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099fc:	d103      	bne.n	8009a06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	60fb      	str	r3, [r7, #12]
 8009a04:	e00c      	b.n	8009a20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	3308      	adds	r3, #8
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	e002      	b.n	8009a14 <vListInsert+0x2e>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d2f6      	bcs.n	8009a0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	1c5a      	adds	r2, r3, #1
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	601a      	str	r2, [r3, #0]
}
 8009a4c:	bf00      	nop
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	6892      	ldr	r2, [r2, #8]
 8009a6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	6852      	ldr	r2, [r2, #4]
 8009a78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d103      	bne.n	8009a8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	689a      	ldr	r2, [r3, #8]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	1e5a      	subs	r2, r3, #1
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d10a      	bne.n	8009ad6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ad2:	bf00      	nop
 8009ad4:	e7fe      	b.n	8009ad4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ad6:	f002 f88d 	bl	800bbf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ae2:	68f9      	ldr	r1, [r7, #12]
 8009ae4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ae6:	fb01 f303 	mul.w	r3, r1, r3
 8009aea:	441a      	add	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b06:	3b01      	subs	r3, #1
 8009b08:	68f9      	ldr	r1, [r7, #12]
 8009b0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009b0c:	fb01 f303 	mul.w	r3, r1, r3
 8009b10:	441a      	add	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	22ff      	movs	r2, #255	; 0xff
 8009b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	22ff      	movs	r2, #255	; 0xff
 8009b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d114      	bne.n	8009b56 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d01a      	beq.n	8009b6a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3310      	adds	r3, #16
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f001 f93b 	bl	800adb4 <xTaskRemoveFromEventList>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d012      	beq.n	8009b6a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b44:	4b0c      	ldr	r3, [pc, #48]	; (8009b78 <xQueueGenericReset+0xcc>)
 8009b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	e009      	b.n	8009b6a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3310      	adds	r3, #16
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7ff fef2 	bl	8009944 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	3324      	adds	r3, #36	; 0x24
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7ff feed 	bl	8009944 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b6a:	f002 f873 	bl	800bc54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b6e:	2301      	movs	r3, #1
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	e000ed04 	.word	0xe000ed04

08009b7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b08e      	sub	sp, #56	; 0x38
 8009b80:	af02      	add	r7, sp, #8
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
 8009b88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10a      	bne.n	8009ba6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ba2:	bf00      	nop
 8009ba4:	e7fe      	b.n	8009ba4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d10a      	bne.n	8009bc2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb0:	f383 8811 	msr	BASEPRI, r3
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009bbe:	bf00      	nop
 8009bc0:	e7fe      	b.n	8009bc0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <xQueueGenericCreateStatic+0x52>
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <xQueueGenericCreateStatic+0x56>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e000      	b.n	8009bd4 <xQueueGenericCreateStatic+0x58>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10a      	bne.n	8009bee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bdc:	f383 8811 	msr	BASEPRI, r3
 8009be0:	f3bf 8f6f 	isb	sy
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	623b      	str	r3, [r7, #32]
}
 8009bea:	bf00      	nop
 8009bec:	e7fe      	b.n	8009bec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d102      	bne.n	8009bfa <xQueueGenericCreateStatic+0x7e>
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <xQueueGenericCreateStatic+0x82>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e000      	b.n	8009c00 <xQueueGenericCreateStatic+0x84>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10a      	bne.n	8009c1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	61fb      	str	r3, [r7, #28]
}
 8009c16:	bf00      	nop
 8009c18:	e7fe      	b.n	8009c18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009c1a:	2350      	movs	r3, #80	; 0x50
 8009c1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	2b50      	cmp	r3, #80	; 0x50
 8009c22:	d00a      	beq.n	8009c3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	61bb      	str	r3, [r7, #24]
}
 8009c36:	bf00      	nop
 8009c38:	e7fe      	b.n	8009c38 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00d      	beq.n	8009c62 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	4613      	mov	r3, r2
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	68b9      	ldr	r1, [r7, #8]
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f000 f805 	bl	8009c6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3730      	adds	r7, #48	; 0x30
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d103      	bne.n	8009c88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	69ba      	ldr	r2, [r7, #24]
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	e002      	b.n	8009c8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	69b8      	ldr	r0, [r7, #24]
 8009c9e:	f7ff ff05 	bl	8009aac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	78fa      	ldrb	r2, [r7, #3]
 8009ca6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009caa:	bf00      	nop
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b08e      	sub	sp, #56	; 0x38
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
 8009cc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10a      	bne.n	8009ce6 <xQueueGenericSend+0x32>
	__asm volatile
 8009cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ce2:	bf00      	nop
 8009ce4:	e7fe      	b.n	8009ce4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d103      	bne.n	8009cf4 <xQueueGenericSend+0x40>
 8009cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d101      	bne.n	8009cf8 <xQueueGenericSend+0x44>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e000      	b.n	8009cfa <xQueueGenericSend+0x46>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10a      	bne.n	8009d14 <xQueueGenericSend+0x60>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d10:	bf00      	nop
 8009d12:	e7fe      	b.n	8009d12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d103      	bne.n	8009d22 <xQueueGenericSend+0x6e>
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d101      	bne.n	8009d26 <xQueueGenericSend+0x72>
 8009d22:	2301      	movs	r3, #1
 8009d24:	e000      	b.n	8009d28 <xQueueGenericSend+0x74>
 8009d26:	2300      	movs	r3, #0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10a      	bne.n	8009d42 <xQueueGenericSend+0x8e>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	623b      	str	r3, [r7, #32]
}
 8009d3e:	bf00      	nop
 8009d40:	e7fe      	b.n	8009d40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d42:	f001 f9f9 	bl	800b138 <xTaskGetSchedulerState>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d102      	bne.n	8009d52 <xQueueGenericSend+0x9e>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <xQueueGenericSend+0xa2>
 8009d52:	2301      	movs	r3, #1
 8009d54:	e000      	b.n	8009d58 <xQueueGenericSend+0xa4>
 8009d56:	2300      	movs	r3, #0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10a      	bne.n	8009d72 <xQueueGenericSend+0xbe>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	61fb      	str	r3, [r7, #28]
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d72:	f001 ff3f 	bl	800bbf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d302      	bcc.n	8009d88 <xQueueGenericSend+0xd4>
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d129      	bne.n	8009ddc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	68b9      	ldr	r1, [r7, #8]
 8009d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d8e:	f000 fa0b 	bl	800a1a8 <prvCopyDataToQueue>
 8009d92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d010      	beq.n	8009dbe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	3324      	adds	r3, #36	; 0x24
 8009da0:	4618      	mov	r0, r3
 8009da2:	f001 f807 	bl	800adb4 <xTaskRemoveFromEventList>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d013      	beq.n	8009dd4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009dac:	4b3f      	ldr	r3, [pc, #252]	; (8009eac <xQueueGenericSend+0x1f8>)
 8009dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	e00a      	b.n	8009dd4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d007      	beq.n	8009dd4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009dc4:	4b39      	ldr	r3, [pc, #228]	; (8009eac <xQueueGenericSend+0x1f8>)
 8009dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dca:	601a      	str	r2, [r3, #0]
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009dd4:	f001 ff3e 	bl	800bc54 <vPortExitCritical>
				return pdPASS;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e063      	b.n	8009ea4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d103      	bne.n	8009dea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009de2:	f001 ff37 	bl	800bc54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009de6:	2300      	movs	r3, #0
 8009de8:	e05c      	b.n	8009ea4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d106      	bne.n	8009dfe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009df0:	f107 0314 	add.w	r3, r7, #20
 8009df4:	4618      	mov	r0, r3
 8009df6:	f001 f841 	bl	800ae7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dfe:	f001 ff29 	bl	800bc54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e02:	f000 fd9b 	bl	800a93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e06:	f001 fef5 	bl	800bbf4 <vPortEnterCritical>
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e10:	b25b      	sxtb	r3, r3
 8009e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e16:	d103      	bne.n	8009e20 <xQueueGenericSend+0x16c>
 8009e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e26:	b25b      	sxtb	r3, r3
 8009e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e2c:	d103      	bne.n	8009e36 <xQueueGenericSend+0x182>
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e36:	f001 ff0d 	bl	800bc54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e3a:	1d3a      	adds	r2, r7, #4
 8009e3c:	f107 0314 	add.w	r3, r7, #20
 8009e40:	4611      	mov	r1, r2
 8009e42:	4618      	mov	r0, r3
 8009e44:	f001 f830 	bl	800aea8 <xTaskCheckForTimeOut>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d124      	bne.n	8009e98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e50:	f000 faa2 	bl	800a398 <prvIsQueueFull>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d018      	beq.n	8009e8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	3310      	adds	r3, #16
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	4611      	mov	r1, r2
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 ff56 	bl	800ad14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e6a:	f000 fa2d 	bl	800a2c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e6e:	f000 fd73 	bl	800a958 <xTaskResumeAll>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f47f af7c 	bne.w	8009d72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e7a:	4b0c      	ldr	r3, [pc, #48]	; (8009eac <xQueueGenericSend+0x1f8>)
 8009e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	e772      	b.n	8009d72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e8e:	f000 fa1b 	bl	800a2c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e92:	f000 fd61 	bl	800a958 <xTaskResumeAll>
 8009e96:	e76c      	b.n	8009d72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e9a:	f000 fa15 	bl	800a2c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e9e:	f000 fd5b 	bl	800a958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009ea2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3738      	adds	r7, #56	; 0x38
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	e000ed04 	.word	0xe000ed04

08009eb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b090      	sub	sp, #64	; 0x40
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10a      	bne.n	8009ede <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009eda:	bf00      	nop
 8009edc:	e7fe      	b.n	8009edc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d103      	bne.n	8009eec <xQueueGenericSendFromISR+0x3c>
 8009ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <xQueueGenericSendFromISR+0x40>
 8009eec:	2301      	movs	r3, #1
 8009eee:	e000      	b.n	8009ef2 <xQueueGenericSendFromISR+0x42>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10a      	bne.n	8009f0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f08:	bf00      	nop
 8009f0a:	e7fe      	b.n	8009f0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d103      	bne.n	8009f1a <xQueueGenericSendFromISR+0x6a>
 8009f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d101      	bne.n	8009f1e <xQueueGenericSendFromISR+0x6e>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e000      	b.n	8009f20 <xQueueGenericSendFromISR+0x70>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10a      	bne.n	8009f3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	623b      	str	r3, [r7, #32]
}
 8009f36:	bf00      	nop
 8009f38:	e7fe      	b.n	8009f38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f3a:	f001 ff3d 	bl	800bdb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009f3e:	f3ef 8211 	mrs	r2, BASEPRI
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	61fa      	str	r2, [r7, #28]
 8009f54:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f56:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f58:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d302      	bcc.n	8009f6c <xQueueGenericSendFromISR+0xbc>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d12f      	bne.n	8009fcc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f7c:	683a      	ldr	r2, [r7, #0]
 8009f7e:	68b9      	ldr	r1, [r7, #8]
 8009f80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f82:	f000 f911 	bl	800a1a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f8e:	d112      	bne.n	8009fb6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d016      	beq.n	8009fc6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9a:	3324      	adds	r3, #36	; 0x24
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 ff09 	bl	800adb4 <xTaskRemoveFromEventList>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00e      	beq.n	8009fc6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00b      	beq.n	8009fc6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	e007      	b.n	8009fc6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009fb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fba:	3301      	adds	r3, #1
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	b25a      	sxtb	r2, r3
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009fca:	e001      	b.n	8009fd0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009fda:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3740      	adds	r7, #64	; 0x40
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
	...

08009fe8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b08c      	sub	sp, #48	; 0x30
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10a      	bne.n	800a018 <xQueueReceive+0x30>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	623b      	str	r3, [r7, #32]
}
 800a014:	bf00      	nop
 800a016:	e7fe      	b.n	800a016 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d103      	bne.n	800a026 <xQueueReceive+0x3e>
 800a01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a022:	2b00      	cmp	r3, #0
 800a024:	d101      	bne.n	800a02a <xQueueReceive+0x42>
 800a026:	2301      	movs	r3, #1
 800a028:	e000      	b.n	800a02c <xQueueReceive+0x44>
 800a02a:	2300      	movs	r3, #0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10a      	bne.n	800a046 <xQueueReceive+0x5e>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	61fb      	str	r3, [r7, #28]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a046:	f001 f877 	bl	800b138 <xTaskGetSchedulerState>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d102      	bne.n	800a056 <xQueueReceive+0x6e>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d101      	bne.n	800a05a <xQueueReceive+0x72>
 800a056:	2301      	movs	r3, #1
 800a058:	e000      	b.n	800a05c <xQueueReceive+0x74>
 800a05a:	2300      	movs	r3, #0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10a      	bne.n	800a076 <xQueueReceive+0x8e>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	61bb      	str	r3, [r7, #24]
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a076:	f001 fdbd 	bl	800bbf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	2b00      	cmp	r3, #0
 800a084:	d01f      	beq.n	800a0c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a08a:	f000 f8f7 	bl	800a27c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	1e5a      	subs	r2, r3, #1
 800a092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a094:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00f      	beq.n	800a0be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a0:	3310      	adds	r3, #16
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 fe86 	bl	800adb4 <xTaskRemoveFromEventList>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d007      	beq.n	800a0be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0ae:	4b3d      	ldr	r3, [pc, #244]	; (800a1a4 <xQueueReceive+0x1bc>)
 800a0b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0be:	f001 fdc9 	bl	800bc54 <vPortExitCritical>
				return pdPASS;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e069      	b.n	800a19a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d103      	bne.n	800a0d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0cc:	f001 fdc2 	bl	800bc54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	e062      	b.n	800a19a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d106      	bne.n	800a0e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0da:	f107 0310 	add.w	r3, r7, #16
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 fecc 	bl	800ae7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0e8:	f001 fdb4 	bl	800bc54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0ec:	f000 fc26 	bl	800a93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0f0:	f001 fd80 	bl	800bbf4 <vPortEnterCritical>
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0fa:	b25b      	sxtb	r3, r3
 800a0fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a100:	d103      	bne.n	800a10a <xQueueReceive+0x122>
 800a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a110:	b25b      	sxtb	r3, r3
 800a112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a116:	d103      	bne.n	800a120 <xQueueReceive+0x138>
 800a118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a120:	f001 fd98 	bl	800bc54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a124:	1d3a      	adds	r2, r7, #4
 800a126:	f107 0310 	add.w	r3, r7, #16
 800a12a:	4611      	mov	r1, r2
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 febb 	bl	800aea8 <xTaskCheckForTimeOut>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d123      	bne.n	800a180 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a13a:	f000 f917 	bl	800a36c <prvIsQueueEmpty>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d017      	beq.n	800a174 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a146:	3324      	adds	r3, #36	; 0x24
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	4611      	mov	r1, r2
 800a14c:	4618      	mov	r0, r3
 800a14e:	f000 fde1 	bl	800ad14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a154:	f000 f8b8 	bl	800a2c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a158:	f000 fbfe 	bl	800a958 <xTaskResumeAll>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d189      	bne.n	800a076 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a162:	4b10      	ldr	r3, [pc, #64]	; (800a1a4 <xQueueReceive+0x1bc>)
 800a164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a168:	601a      	str	r2, [r3, #0]
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	e780      	b.n	800a076 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a176:	f000 f8a7 	bl	800a2c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a17a:	f000 fbed 	bl	800a958 <xTaskResumeAll>
 800a17e:	e77a      	b.n	800a076 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a182:	f000 f8a1 	bl	800a2c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a186:	f000 fbe7 	bl	800a958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a18a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a18c:	f000 f8ee 	bl	800a36c <prvIsQueueEmpty>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	f43f af6f 	beq.w	800a076 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a198:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3730      	adds	r7, #48	; 0x30
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	e000ed04 	.word	0xe000ed04

0800a1a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10d      	bne.n	800a1e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d14d      	bne.n	800a26a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 ffce 	bl	800b174 <xTaskPriorityDisinherit>
 800a1d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	609a      	str	r2, [r3, #8]
 800a1e0:	e043      	b.n	800a26a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d119      	bne.n	800a21c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6858      	ldr	r0, [r3, #4]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	68b9      	ldr	r1, [r7, #8]
 800a1f4:	f002 fa2f 	bl	800c656 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a200:	441a      	add	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	685a      	ldr	r2, [r3, #4]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d32b      	bcc.n	800a26a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	605a      	str	r2, [r3, #4]
 800a21a:	e026      	b.n	800a26a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	68d8      	ldr	r0, [r3, #12]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a224:	461a      	mov	r2, r3
 800a226:	68b9      	ldr	r1, [r7, #8]
 800a228:	f002 fa15 	bl	800c656 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	68da      	ldr	r2, [r3, #12]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a234:	425b      	negs	r3, r3
 800a236:	441a      	add	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	68da      	ldr	r2, [r3, #12]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	429a      	cmp	r2, r3
 800a246:	d207      	bcs.n	800a258 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	689a      	ldr	r2, [r3, #8]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a250:	425b      	negs	r3, r3
 800a252:	441a      	add	r2, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d105      	bne.n	800a26a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	3b01      	subs	r3, #1
 800a268:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	1c5a      	adds	r2, r3, #1
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a272:	697b      	ldr	r3, [r7, #20]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d018      	beq.n	800a2c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68da      	ldr	r2, [r3, #12]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a296:	441a      	add	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	68da      	ldr	r2, [r3, #12]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d303      	bcc.n	800a2b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	68d9      	ldr	r1, [r3, #12]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	6838      	ldr	r0, [r7, #0]
 800a2bc:	f002 f9cb 	bl	800c656 <memcpy>
	}
}
 800a2c0:	bf00      	nop
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a2d0:	f001 fc90 	bl	800bbf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2dc:	e011      	b.n	800a302 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d012      	beq.n	800a30c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	3324      	adds	r3, #36	; 0x24
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f000 fd62 	bl	800adb4 <xTaskRemoveFromEventList>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a2f6:	f000 fe39 	bl	800af6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a306:	2b00      	cmp	r3, #0
 800a308:	dce9      	bgt.n	800a2de <prvUnlockQueue+0x16>
 800a30a:	e000      	b.n	800a30e <prvUnlockQueue+0x46>
					break;
 800a30c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	22ff      	movs	r2, #255	; 0xff
 800a312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a316:	f001 fc9d 	bl	800bc54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a31a:	f001 fc6b 	bl	800bbf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a324:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a326:	e011      	b.n	800a34c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d012      	beq.n	800a356 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3310      	adds	r3, #16
 800a334:	4618      	mov	r0, r3
 800a336:	f000 fd3d 	bl	800adb4 <xTaskRemoveFromEventList>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a340:	f000 fe14 	bl	800af6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a344:	7bbb      	ldrb	r3, [r7, #14]
 800a346:	3b01      	subs	r3, #1
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a34c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a350:	2b00      	cmp	r3, #0
 800a352:	dce9      	bgt.n	800a328 <prvUnlockQueue+0x60>
 800a354:	e000      	b.n	800a358 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a356:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	22ff      	movs	r2, #255	; 0xff
 800a35c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a360:	f001 fc78 	bl	800bc54 <vPortExitCritical>
}
 800a364:	bf00      	nop
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a374:	f001 fc3e 	bl	800bbf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d102      	bne.n	800a386 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a380:	2301      	movs	r3, #1
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	e001      	b.n	800a38a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a386:	2300      	movs	r3, #0
 800a388:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a38a:	f001 fc63 	bl	800bc54 <vPortExitCritical>

	return xReturn;
 800a38e:	68fb      	ldr	r3, [r7, #12]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a3a0:	f001 fc28 	bl	800bbf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d102      	bne.n	800a3b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	60fb      	str	r3, [r7, #12]
 800a3b4:	e001      	b.n	800a3ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a3ba:	f001 fc4b 	bl	800bc54 <vPortExitCritical>

	return xReturn;
 800a3be:	68fb      	ldr	r3, [r7, #12]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	60fb      	str	r3, [r7, #12]
 800a3d6:	e014      	b.n	800a402 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a3d8:	4a0f      	ldr	r2, [pc, #60]	; (800a418 <vQueueAddToRegistry+0x50>)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10b      	bne.n	800a3fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a3e4:	490c      	ldr	r1, [pc, #48]	; (800a418 <vQueueAddToRegistry+0x50>)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a3ee:	4a0a      	ldr	r2, [pc, #40]	; (800a418 <vQueueAddToRegistry+0x50>)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	00db      	lsls	r3, r3, #3
 800a3f4:	4413      	add	r3, r2
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a3fa:	e006      	b.n	800a40a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	3301      	adds	r3, #1
 800a400:	60fb      	str	r3, [r7, #12]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2b07      	cmp	r3, #7
 800a406:	d9e7      	bls.n	800a3d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	20009a38 	.word	0x20009a38

0800a41c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a42c:	f001 fbe2 	bl	800bbf4 <vPortEnterCritical>
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a436:	b25b      	sxtb	r3, r3
 800a438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a43c:	d103      	bne.n	800a446 <vQueueWaitForMessageRestricted+0x2a>
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a44c:	b25b      	sxtb	r3, r3
 800a44e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a452:	d103      	bne.n	800a45c <vQueueWaitForMessageRestricted+0x40>
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a45c:	f001 fbfa 	bl	800bc54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a464:	2b00      	cmp	r3, #0
 800a466:	d106      	bne.n	800a476 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	3324      	adds	r3, #36	; 0x24
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	68b9      	ldr	r1, [r7, #8]
 800a470:	4618      	mov	r0, r3
 800a472:	f000 fc73 	bl	800ad5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a476:	6978      	ldr	r0, [r7, #20]
 800a478:	f7ff ff26 	bl	800a2c8 <prvUnlockQueue>
	}
 800a47c:	bf00      	nop
 800a47e:	3718      	adds	r7, #24
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a484:	b580      	push	{r7, lr}
 800a486:	b08e      	sub	sp, #56	; 0x38
 800a488:	af04      	add	r7, sp, #16
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10a      	bne.n	800a4ae <xTaskCreateStatic+0x2a>
	__asm volatile
 800a498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49c:	f383 8811 	msr	BASEPRI, r3
 800a4a0:	f3bf 8f6f 	isb	sy
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	623b      	str	r3, [r7, #32]
}
 800a4aa:	bf00      	nop
 800a4ac:	e7fe      	b.n	800a4ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10a      	bne.n	800a4ca <xTaskCreateStatic+0x46>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	61fb      	str	r3, [r7, #28]
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a4ca:	23a8      	movs	r3, #168	; 0xa8
 800a4cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	2ba8      	cmp	r3, #168	; 0xa8
 800a4d2:	d00a      	beq.n	800a4ea <xTaskCreateStatic+0x66>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	61bb      	str	r3, [r7, #24]
}
 800a4e6:	bf00      	nop
 800a4e8:	e7fe      	b.n	800a4e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a4ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d01e      	beq.n	800a530 <xTaskCreateStatic+0xac>
 800a4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d01b      	beq.n	800a530 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a500:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a504:	2202      	movs	r2, #2
 800a506:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a50a:	2300      	movs	r3, #0
 800a50c:	9303      	str	r3, [sp, #12]
 800a50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a510:	9302      	str	r3, [sp, #8]
 800a512:	f107 0314 	add.w	r3, r7, #20
 800a516:	9301      	str	r3, [sp, #4]
 800a518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	68b9      	ldr	r1, [r7, #8]
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f000 f850 	bl	800a5c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a52a:	f000 f8f3 	bl	800a714 <prvAddNewTaskToReadyList>
 800a52e:	e001      	b.n	800a534 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a530:	2300      	movs	r3, #0
 800a532:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a534:	697b      	ldr	r3, [r7, #20]
	}
 800a536:	4618      	mov	r0, r3
 800a538:	3728      	adds	r7, #40	; 0x28
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b08c      	sub	sp, #48	; 0x30
 800a542:	af04      	add	r7, sp, #16
 800a544:	60f8      	str	r0, [r7, #12]
 800a546:	60b9      	str	r1, [r7, #8]
 800a548:	603b      	str	r3, [r7, #0]
 800a54a:	4613      	mov	r3, r2
 800a54c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a54e:	88fb      	ldrh	r3, [r7, #6]
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4618      	mov	r0, r3
 800a554:	f001 fc70 	bl	800be38 <pvPortMalloc>
 800a558:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00e      	beq.n	800a57e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a560:	20a8      	movs	r0, #168	; 0xa8
 800a562:	f001 fc69 	bl	800be38 <pvPortMalloc>
 800a566:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d003      	beq.n	800a576 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	697a      	ldr	r2, [r7, #20]
 800a572:	631a      	str	r2, [r3, #48]	; 0x30
 800a574:	e005      	b.n	800a582 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a576:	6978      	ldr	r0, [r7, #20]
 800a578:	f001 fd2a 	bl	800bfd0 <vPortFree>
 800a57c:	e001      	b.n	800a582 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a57e:	2300      	movs	r3, #0
 800a580:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d017      	beq.n	800a5b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a590:	88fa      	ldrh	r2, [r7, #6]
 800a592:	2300      	movs	r3, #0
 800a594:	9303      	str	r3, [sp, #12]
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	9302      	str	r3, [sp, #8]
 800a59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	68b9      	ldr	r1, [r7, #8]
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f000 f80e 	bl	800a5c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5ac:	69f8      	ldr	r0, [r7, #28]
 800a5ae:	f000 f8b1 	bl	800a714 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	61bb      	str	r3, [r7, #24]
 800a5b6:	e002      	b.n	800a5be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a5b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a5be:	69bb      	ldr	r3, [r7, #24]
	}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3720      	adds	r7, #32
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b088      	sub	sp, #32
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	461a      	mov	r2, r3
 800a5e0:	21a5      	movs	r1, #165	; 0xa5
 800a5e2:	f001 ff66 	bl	800c4b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	f023 0307 	bic.w	r3, r3, #7
 800a5fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	f003 0307 	and.w	r3, r3, #7
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00a      	beq.n	800a620 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60e:	f383 8811 	msr	BASEPRI, r3
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	617b      	str	r3, [r7, #20]
}
 800a61c:	bf00      	nop
 800a61e:	e7fe      	b.n	800a61e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d01f      	beq.n	800a666 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a626:	2300      	movs	r3, #0
 800a628:	61fb      	str	r3, [r7, #28]
 800a62a:	e012      	b.n	800a652 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	4413      	add	r3, r2
 800a632:	7819      	ldrb	r1, [r3, #0]
 800a634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	4413      	add	r3, r2
 800a63a:	3334      	adds	r3, #52	; 0x34
 800a63c:	460a      	mov	r2, r1
 800a63e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	4413      	add	r3, r2
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d006      	beq.n	800a65a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	3301      	adds	r3, #1
 800a650:	61fb      	str	r3, [r7, #28]
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	2b0f      	cmp	r3, #15
 800a656:	d9e9      	bls.n	800a62c <prvInitialiseNewTask+0x64>
 800a658:	e000      	b.n	800a65c <prvInitialiseNewTask+0x94>
			{
				break;
 800a65a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a664:	e003      	b.n	800a66e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a670:	2b37      	cmp	r3, #55	; 0x37
 800a672:	d901      	bls.n	800a678 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a674:	2337      	movs	r3, #55	; 0x37
 800a676:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a67c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a682:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	2200      	movs	r2, #0
 800a688:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	3304      	adds	r3, #4
 800a68e:	4618      	mov	r0, r3
 800a690:	f7ff f978 	bl	8009984 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	3318      	adds	r3, #24
 800a698:	4618      	mov	r0, r3
 800a69a:	f7ff f973 	bl	8009984 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c6:	3354      	adds	r3, #84	; 0x54
 800a6c8:	224c      	movs	r2, #76	; 0x4c
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f001 fef0 	bl	800c4b2 <memset>
 800a6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d4:	4a0c      	ldr	r2, [pc, #48]	; (800a708 <prvInitialiseNewTask+0x140>)
 800a6d6:	659a      	str	r2, [r3, #88]	; 0x58
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6da:	4a0c      	ldr	r2, [pc, #48]	; (800a70c <prvInitialiseNewTask+0x144>)
 800a6dc:	65da      	str	r2, [r3, #92]	; 0x5c
 800a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e0:	4a0b      	ldr	r2, [pc, #44]	; (800a710 <prvInitialiseNewTask+0x148>)
 800a6e2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	68f9      	ldr	r1, [r7, #12]
 800a6e8:	69b8      	ldr	r0, [r7, #24]
 800a6ea:	f001 f953 	bl	800b994 <pxPortInitialiseStack>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d002      	beq.n	800a700 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a700:	bf00      	nop
 800a702:	3720      	adds	r7, #32
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	2000dccc 	.word	0x2000dccc
 800a70c:	2000dd34 	.word	0x2000dd34
 800a710:	2000dd9c 	.word	0x2000dd9c

0800a714 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a71c:	f001 fa6a 	bl	800bbf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a720:	4b2d      	ldr	r3, [pc, #180]	; (800a7d8 <prvAddNewTaskToReadyList+0xc4>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3301      	adds	r3, #1
 800a726:	4a2c      	ldr	r2, [pc, #176]	; (800a7d8 <prvAddNewTaskToReadyList+0xc4>)
 800a728:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a72a:	4b2c      	ldr	r3, [pc, #176]	; (800a7dc <prvAddNewTaskToReadyList+0xc8>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d109      	bne.n	800a746 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a732:	4a2a      	ldr	r2, [pc, #168]	; (800a7dc <prvAddNewTaskToReadyList+0xc8>)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a738:	4b27      	ldr	r3, [pc, #156]	; (800a7d8 <prvAddNewTaskToReadyList+0xc4>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d110      	bne.n	800a762 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a740:	f000 fc38 	bl	800afb4 <prvInitialiseTaskLists>
 800a744:	e00d      	b.n	800a762 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a746:	4b26      	ldr	r3, [pc, #152]	; (800a7e0 <prvAddNewTaskToReadyList+0xcc>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d109      	bne.n	800a762 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a74e:	4b23      	ldr	r3, [pc, #140]	; (800a7dc <prvAddNewTaskToReadyList+0xc8>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a758:	429a      	cmp	r2, r3
 800a75a:	d802      	bhi.n	800a762 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a75c:	4a1f      	ldr	r2, [pc, #124]	; (800a7dc <prvAddNewTaskToReadyList+0xc8>)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a762:	4b20      	ldr	r3, [pc, #128]	; (800a7e4 <prvAddNewTaskToReadyList+0xd0>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3301      	adds	r3, #1
 800a768:	4a1e      	ldr	r2, [pc, #120]	; (800a7e4 <prvAddNewTaskToReadyList+0xd0>)
 800a76a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a76c:	4b1d      	ldr	r3, [pc, #116]	; (800a7e4 <prvAddNewTaskToReadyList+0xd0>)
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a778:	4b1b      	ldr	r3, [pc, #108]	; (800a7e8 <prvAddNewTaskToReadyList+0xd4>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d903      	bls.n	800a788 <prvAddNewTaskToReadyList+0x74>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	4a18      	ldr	r2, [pc, #96]	; (800a7e8 <prvAddNewTaskToReadyList+0xd4>)
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a78c:	4613      	mov	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4a15      	ldr	r2, [pc, #84]	; (800a7ec <prvAddNewTaskToReadyList+0xd8>)
 800a796:	441a      	add	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3304      	adds	r3, #4
 800a79c:	4619      	mov	r1, r3
 800a79e:	4610      	mov	r0, r2
 800a7a0:	f7ff f8fd 	bl	800999e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a7a4:	f001 fa56 	bl	800bc54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a7a8:	4b0d      	ldr	r3, [pc, #52]	; (800a7e0 <prvAddNewTaskToReadyList+0xcc>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00e      	beq.n	800a7ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a7b0:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <prvAddNewTaskToReadyList+0xc8>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d207      	bcs.n	800a7ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a7be:	4b0c      	ldr	r3, [pc, #48]	; (800a7f0 <prvAddNewTaskToReadyList+0xdc>)
 800a7c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7c4:	601a      	str	r2, [r3, #0]
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7ce:	bf00      	nop
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20009f4c 	.word	0x20009f4c
 800a7dc:	20009a78 	.word	0x20009a78
 800a7e0:	20009f58 	.word	0x20009f58
 800a7e4:	20009f68 	.word	0x20009f68
 800a7e8:	20009f54 	.word	0x20009f54
 800a7ec:	20009a7c 	.word	0x20009a7c
 800a7f0:	e000ed04 	.word	0xe000ed04

0800a7f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d017      	beq.n	800a836 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a806:	4b13      	ldr	r3, [pc, #76]	; (800a854 <vTaskDelay+0x60>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00a      	beq.n	800a824 <vTaskDelay+0x30>
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	60bb      	str	r3, [r7, #8]
}
 800a820:	bf00      	nop
 800a822:	e7fe      	b.n	800a822 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a824:	f000 f88a 	bl	800a93c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a828:	2100      	movs	r1, #0
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fd10 	bl	800b250 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a830:	f000 f892 	bl	800a958 <xTaskResumeAll>
 800a834:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d107      	bne.n	800a84c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a83c:	4b06      	ldr	r3, [pc, #24]	; (800a858 <vTaskDelay+0x64>)
 800a83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a842:	601a      	str	r2, [r3, #0]
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a84c:	bf00      	nop
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	20009f74 	.word	0x20009f74
 800a858:	e000ed04 	.word	0xe000ed04

0800a85c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08a      	sub	sp, #40	; 0x28
 800a860:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a862:	2300      	movs	r3, #0
 800a864:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a866:	2300      	movs	r3, #0
 800a868:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a86a:	463a      	mov	r2, r7
 800a86c:	1d39      	adds	r1, r7, #4
 800a86e:	f107 0308 	add.w	r3, r7, #8
 800a872:	4618      	mov	r0, r3
 800a874:	f7ff f832 	bl	80098dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	9202      	str	r2, [sp, #8]
 800a880:	9301      	str	r3, [sp, #4]
 800a882:	2300      	movs	r3, #0
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	2300      	movs	r3, #0
 800a888:	460a      	mov	r2, r1
 800a88a:	4924      	ldr	r1, [pc, #144]	; (800a91c <vTaskStartScheduler+0xc0>)
 800a88c:	4824      	ldr	r0, [pc, #144]	; (800a920 <vTaskStartScheduler+0xc4>)
 800a88e:	f7ff fdf9 	bl	800a484 <xTaskCreateStatic>
 800a892:	4603      	mov	r3, r0
 800a894:	4a23      	ldr	r2, [pc, #140]	; (800a924 <vTaskStartScheduler+0xc8>)
 800a896:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a898:	4b22      	ldr	r3, [pc, #136]	; (800a924 <vTaskStartScheduler+0xc8>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	e001      	b.n	800a8aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d102      	bne.n	800a8b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a8b0:	f000 fd22 	bl	800b2f8 <xTimerCreateTimerTask>
 800a8b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d11b      	bne.n	800a8f4 <vTaskStartScheduler+0x98>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	613b      	str	r3, [r7, #16]
}
 800a8ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8d0:	4b15      	ldr	r3, [pc, #84]	; (800a928 <vTaskStartScheduler+0xcc>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3354      	adds	r3, #84	; 0x54
 800a8d6:	4a15      	ldr	r2, [pc, #84]	; (800a92c <vTaskStartScheduler+0xd0>)
 800a8d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a8da:	4b15      	ldr	r3, [pc, #84]	; (800a930 <vTaskStartScheduler+0xd4>)
 800a8dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a8e2:	4b14      	ldr	r3, [pc, #80]	; (800a934 <vTaskStartScheduler+0xd8>)
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a8e8:	4b13      	ldr	r3, [pc, #76]	; (800a938 <vTaskStartScheduler+0xdc>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a8ee:	f001 f8df 	bl	800bab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a8f2:	e00e      	b.n	800a912 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8fa:	d10a      	bne.n	800a912 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a900:	f383 8811 	msr	BASEPRI, r3
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	60fb      	str	r3, [r7, #12]
}
 800a90e:	bf00      	nop
 800a910:	e7fe      	b.n	800a910 <vTaskStartScheduler+0xb4>
}
 800a912:	bf00      	nop
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	0800d628 	.word	0x0800d628
 800a920:	0800af85 	.word	0x0800af85
 800a924:	20009f70 	.word	0x20009f70
 800a928:	20009a78 	.word	0x20009a78
 800a92c:	20000304 	.word	0x20000304
 800a930:	20009f6c 	.word	0x20009f6c
 800a934:	20009f58 	.word	0x20009f58
 800a938:	20009f50 	.word	0x20009f50

0800a93c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a940:	4b04      	ldr	r3, [pc, #16]	; (800a954 <vTaskSuspendAll+0x18>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3301      	adds	r3, #1
 800a946:	4a03      	ldr	r2, [pc, #12]	; (800a954 <vTaskSuspendAll+0x18>)
 800a948:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a94a:	bf00      	nop
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	20009f74 	.word	0x20009f74

0800a958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a95e:	2300      	movs	r3, #0
 800a960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a962:	2300      	movs	r3, #0
 800a964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a966:	4b42      	ldr	r3, [pc, #264]	; (800aa70 <xTaskResumeAll+0x118>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10a      	bne.n	800a984 <xTaskResumeAll+0x2c>
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	603b      	str	r3, [r7, #0]
}
 800a980:	bf00      	nop
 800a982:	e7fe      	b.n	800a982 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a984:	f001 f936 	bl	800bbf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a988:	4b39      	ldr	r3, [pc, #228]	; (800aa70 <xTaskResumeAll+0x118>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3b01      	subs	r3, #1
 800a98e:	4a38      	ldr	r2, [pc, #224]	; (800aa70 <xTaskResumeAll+0x118>)
 800a990:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a992:	4b37      	ldr	r3, [pc, #220]	; (800aa70 <xTaskResumeAll+0x118>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d162      	bne.n	800aa60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a99a:	4b36      	ldr	r3, [pc, #216]	; (800aa74 <xTaskResumeAll+0x11c>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d05e      	beq.n	800aa60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9a2:	e02f      	b.n	800aa04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9a4:	4b34      	ldr	r3, [pc, #208]	; (800aa78 <xTaskResumeAll+0x120>)
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	3318      	adds	r3, #24
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7ff f851 	bl	8009a58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7ff f84c 	bl	8009a58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c4:	4b2d      	ldr	r3, [pc, #180]	; (800aa7c <xTaskResumeAll+0x124>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d903      	bls.n	800a9d4 <xTaskResumeAll+0x7c>
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d0:	4a2a      	ldr	r2, [pc, #168]	; (800aa7c <xTaskResumeAll+0x124>)
 800a9d2:	6013      	str	r3, [r2, #0]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d8:	4613      	mov	r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4413      	add	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4a27      	ldr	r2, [pc, #156]	; (800aa80 <xTaskResumeAll+0x128>)
 800a9e2:	441a      	add	r2, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	f7fe ffd7 	bl	800999e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f4:	4b23      	ldr	r3, [pc, #140]	; (800aa84 <xTaskResumeAll+0x12c>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d302      	bcc.n	800aa04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a9fe:	4b22      	ldr	r3, [pc, #136]	; (800aa88 <xTaskResumeAll+0x130>)
 800aa00:	2201      	movs	r2, #1
 800aa02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa04:	4b1c      	ldr	r3, [pc, #112]	; (800aa78 <xTaskResumeAll+0x120>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1cb      	bne.n	800a9a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa12:	f000 fb71 	bl	800b0f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aa16:	4b1d      	ldr	r3, [pc, #116]	; (800aa8c <xTaskResumeAll+0x134>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d010      	beq.n	800aa44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa22:	f000 f859 	bl	800aad8 <xTaskIncrementTick>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d002      	beq.n	800aa32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aa2c:	4b16      	ldr	r3, [pc, #88]	; (800aa88 <xTaskResumeAll+0x130>)
 800aa2e:	2201      	movs	r2, #1
 800aa30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	3b01      	subs	r3, #1
 800aa36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1f1      	bne.n	800aa22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aa3e:	4b13      	ldr	r3, [pc, #76]	; (800aa8c <xTaskResumeAll+0x134>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa44:	4b10      	ldr	r3, [pc, #64]	; (800aa88 <xTaskResumeAll+0x130>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d009      	beq.n	800aa60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa50:	4b0f      	ldr	r3, [pc, #60]	; (800aa90 <xTaskResumeAll+0x138>)
 800aa52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa56:	601a      	str	r2, [r3, #0]
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa60:	f001 f8f8 	bl	800bc54 <vPortExitCritical>

	return xAlreadyYielded;
 800aa64:	68bb      	ldr	r3, [r7, #8]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	20009f74 	.word	0x20009f74
 800aa74:	20009f4c 	.word	0x20009f4c
 800aa78:	20009f0c 	.word	0x20009f0c
 800aa7c:	20009f54 	.word	0x20009f54
 800aa80:	20009a7c 	.word	0x20009a7c
 800aa84:	20009a78 	.word	0x20009a78
 800aa88:	20009f60 	.word	0x20009f60
 800aa8c:	20009f5c 	.word	0x20009f5c
 800aa90:	e000ed04 	.word	0xe000ed04

0800aa94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa9a:	4b05      	ldr	r3, [pc, #20]	; (800aab0 <xTaskGetTickCount+0x1c>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aaa0:	687b      	ldr	r3, [r7, #4]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	370c      	adds	r7, #12
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	20009f50 	.word	0x20009f50

0800aab4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aaba:	f001 f97d 	bl	800bdb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800aabe:	2300      	movs	r3, #0
 800aac0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800aac2:	4b04      	ldr	r3, [pc, #16]	; (800aad4 <xTaskGetTickCountFromISR+0x20>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aac8:	683b      	ldr	r3, [r7, #0]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	20009f50 	.word	0x20009f50

0800aad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aade:	2300      	movs	r3, #0
 800aae0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aae2:	4b4f      	ldr	r3, [pc, #316]	; (800ac20 <xTaskIncrementTick+0x148>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f040 808f 	bne.w	800ac0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aaec:	4b4d      	ldr	r3, [pc, #308]	; (800ac24 <xTaskIncrementTick+0x14c>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aaf4:	4a4b      	ldr	r2, [pc, #300]	; (800ac24 <xTaskIncrementTick+0x14c>)
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d120      	bne.n	800ab42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab00:	4b49      	ldr	r3, [pc, #292]	; (800ac28 <xTaskIncrementTick+0x150>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00a      	beq.n	800ab20 <xTaskIncrementTick+0x48>
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	603b      	str	r3, [r7, #0]
}
 800ab1c:	bf00      	nop
 800ab1e:	e7fe      	b.n	800ab1e <xTaskIncrementTick+0x46>
 800ab20:	4b41      	ldr	r3, [pc, #260]	; (800ac28 <xTaskIncrementTick+0x150>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	60fb      	str	r3, [r7, #12]
 800ab26:	4b41      	ldr	r3, [pc, #260]	; (800ac2c <xTaskIncrementTick+0x154>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a3f      	ldr	r2, [pc, #252]	; (800ac28 <xTaskIncrementTick+0x150>)
 800ab2c:	6013      	str	r3, [r2, #0]
 800ab2e:	4a3f      	ldr	r2, [pc, #252]	; (800ac2c <xTaskIncrementTick+0x154>)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6013      	str	r3, [r2, #0]
 800ab34:	4b3e      	ldr	r3, [pc, #248]	; (800ac30 <xTaskIncrementTick+0x158>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	4a3d      	ldr	r2, [pc, #244]	; (800ac30 <xTaskIncrementTick+0x158>)
 800ab3c:	6013      	str	r3, [r2, #0]
 800ab3e:	f000 fadb 	bl	800b0f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab42:	4b3c      	ldr	r3, [pc, #240]	; (800ac34 <xTaskIncrementTick+0x15c>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	693a      	ldr	r2, [r7, #16]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d349      	bcc.n	800abe0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab4c:	4b36      	ldr	r3, [pc, #216]	; (800ac28 <xTaskIncrementTick+0x150>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d104      	bne.n	800ab60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab56:	4b37      	ldr	r3, [pc, #220]	; (800ac34 <xTaskIncrementTick+0x15c>)
 800ab58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab5c:	601a      	str	r2, [r3, #0]
					break;
 800ab5e:	e03f      	b.n	800abe0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab60:	4b31      	ldr	r3, [pc, #196]	; (800ac28 <xTaskIncrementTick+0x150>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab70:	693a      	ldr	r2, [r7, #16]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d203      	bcs.n	800ab80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab78:	4a2e      	ldr	r2, [pc, #184]	; (800ac34 <xTaskIncrementTick+0x15c>)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab7e:	e02f      	b.n	800abe0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	3304      	adds	r3, #4
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7fe ff67 	bl	8009a58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d004      	beq.n	800ab9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	3318      	adds	r3, #24
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fe ff5e 	bl	8009a58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba0:	4b25      	ldr	r3, [pc, #148]	; (800ac38 <xTaskIncrementTick+0x160>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d903      	bls.n	800abb0 <xTaskIncrementTick+0xd8>
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abac:	4a22      	ldr	r2, [pc, #136]	; (800ac38 <xTaskIncrementTick+0x160>)
 800abae:	6013      	str	r3, [r2, #0]
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb4:	4613      	mov	r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4413      	add	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4a1f      	ldr	r2, [pc, #124]	; (800ac3c <xTaskIncrementTick+0x164>)
 800abbe:	441a      	add	r2, r3
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	3304      	adds	r3, #4
 800abc4:	4619      	mov	r1, r3
 800abc6:	4610      	mov	r0, r2
 800abc8:	f7fe fee9 	bl	800999e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd0:	4b1b      	ldr	r3, [pc, #108]	; (800ac40 <xTaskIncrementTick+0x168>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d3b8      	bcc.n	800ab4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800abda:	2301      	movs	r3, #1
 800abdc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abde:	e7b5      	b.n	800ab4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800abe0:	4b17      	ldr	r3, [pc, #92]	; (800ac40 <xTaskIncrementTick+0x168>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe6:	4915      	ldr	r1, [pc, #84]	; (800ac3c <xTaskIncrementTick+0x164>)
 800abe8:	4613      	mov	r3, r2
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	4413      	add	r3, r2
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	440b      	add	r3, r1
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d901      	bls.n	800abfc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800abf8:	2301      	movs	r3, #1
 800abfa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800abfc:	4b11      	ldr	r3, [pc, #68]	; (800ac44 <xTaskIncrementTick+0x16c>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d007      	beq.n	800ac14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ac04:	2301      	movs	r3, #1
 800ac06:	617b      	str	r3, [r7, #20]
 800ac08:	e004      	b.n	800ac14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ac0a:	4b0f      	ldr	r3, [pc, #60]	; (800ac48 <xTaskIncrementTick+0x170>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	4a0d      	ldr	r2, [pc, #52]	; (800ac48 <xTaskIncrementTick+0x170>)
 800ac12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ac14:	697b      	ldr	r3, [r7, #20]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	20009f74 	.word	0x20009f74
 800ac24:	20009f50 	.word	0x20009f50
 800ac28:	20009f04 	.word	0x20009f04
 800ac2c:	20009f08 	.word	0x20009f08
 800ac30:	20009f64 	.word	0x20009f64
 800ac34:	20009f6c 	.word	0x20009f6c
 800ac38:	20009f54 	.word	0x20009f54
 800ac3c:	20009a7c 	.word	0x20009a7c
 800ac40:	20009a78 	.word	0x20009a78
 800ac44:	20009f60 	.word	0x20009f60
 800ac48:	20009f5c 	.word	0x20009f5c

0800ac4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac52:	4b2a      	ldr	r3, [pc, #168]	; (800acfc <vTaskSwitchContext+0xb0>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac5a:	4b29      	ldr	r3, [pc, #164]	; (800ad00 <vTaskSwitchContext+0xb4>)
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac60:	e046      	b.n	800acf0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ac62:	4b27      	ldr	r3, [pc, #156]	; (800ad00 <vTaskSwitchContext+0xb4>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac68:	4b26      	ldr	r3, [pc, #152]	; (800ad04 <vTaskSwitchContext+0xb8>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	60fb      	str	r3, [r7, #12]
 800ac6e:	e010      	b.n	800ac92 <vTaskSwitchContext+0x46>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10a      	bne.n	800ac8c <vTaskSwitchContext+0x40>
	__asm volatile
 800ac76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7a:	f383 8811 	msr	BASEPRI, r3
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f3bf 8f4f 	dsb	sy
 800ac86:	607b      	str	r3, [r7, #4]
}
 800ac88:	bf00      	nop
 800ac8a:	e7fe      	b.n	800ac8a <vTaskSwitchContext+0x3e>
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	60fb      	str	r3, [r7, #12]
 800ac92:	491d      	ldr	r1, [pc, #116]	; (800ad08 <vTaskSwitchContext+0xbc>)
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	4613      	mov	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4413      	add	r3, r2
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	440b      	add	r3, r1
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d0e4      	beq.n	800ac70 <vTaskSwitchContext+0x24>
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	4613      	mov	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4413      	add	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4a15      	ldr	r2, [pc, #84]	; (800ad08 <vTaskSwitchContext+0xbc>)
 800acb2:	4413      	add	r3, r2
 800acb4:	60bb      	str	r3, [r7, #8]
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	605a      	str	r2, [r3, #4]
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	685a      	ldr	r2, [r3, #4]
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	3308      	adds	r3, #8
 800acc8:	429a      	cmp	r2, r3
 800acca:	d104      	bne.n	800acd6 <vTaskSwitchContext+0x8a>
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	685a      	ldr	r2, [r3, #4]
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	605a      	str	r2, [r3, #4]
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	4a0b      	ldr	r2, [pc, #44]	; (800ad0c <vTaskSwitchContext+0xc0>)
 800acde:	6013      	str	r3, [r2, #0]
 800ace0:	4a08      	ldr	r2, [pc, #32]	; (800ad04 <vTaskSwitchContext+0xb8>)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ace6:	4b09      	ldr	r3, [pc, #36]	; (800ad0c <vTaskSwitchContext+0xc0>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3354      	adds	r3, #84	; 0x54
 800acec:	4a08      	ldr	r2, [pc, #32]	; (800ad10 <vTaskSwitchContext+0xc4>)
 800acee:	6013      	str	r3, [r2, #0]
}
 800acf0:	bf00      	nop
 800acf2:	3714      	adds	r7, #20
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr
 800acfc:	20009f74 	.word	0x20009f74
 800ad00:	20009f60 	.word	0x20009f60
 800ad04:	20009f54 	.word	0x20009f54
 800ad08:	20009a7c 	.word	0x20009a7c
 800ad0c:	20009a78 	.word	0x20009a78
 800ad10:	20000304 	.word	0x20000304

0800ad14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10a      	bne.n	800ad3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ad24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad28:	f383 8811 	msr	BASEPRI, r3
 800ad2c:	f3bf 8f6f 	isb	sy
 800ad30:	f3bf 8f4f 	dsb	sy
 800ad34:	60fb      	str	r3, [r7, #12]
}
 800ad36:	bf00      	nop
 800ad38:	e7fe      	b.n	800ad38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad3a:	4b07      	ldr	r3, [pc, #28]	; (800ad58 <vTaskPlaceOnEventList+0x44>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3318      	adds	r3, #24
 800ad40:	4619      	mov	r1, r3
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7fe fe4f 	bl	80099e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad48:	2101      	movs	r1, #1
 800ad4a:	6838      	ldr	r0, [r7, #0]
 800ad4c:	f000 fa80 	bl	800b250 <prvAddCurrentTaskToDelayedList>
}
 800ad50:	bf00      	nop
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	20009a78 	.word	0x20009a78

0800ad5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10a      	bne.n	800ad84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	617b      	str	r3, [r7, #20]
}
 800ad80:	bf00      	nop
 800ad82:	e7fe      	b.n	800ad82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad84:	4b0a      	ldr	r3, [pc, #40]	; (800adb0 <vTaskPlaceOnEventListRestricted+0x54>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	3318      	adds	r3, #24
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	68f8      	ldr	r0, [r7, #12]
 800ad8e:	f7fe fe06 	bl	800999e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ad98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad9e:	6879      	ldr	r1, [r7, #4]
 800ada0:	68b8      	ldr	r0, [r7, #8]
 800ada2:	f000 fa55 	bl	800b250 <prvAddCurrentTaskToDelayedList>
	}
 800ada6:	bf00      	nop
 800ada8:	3718      	adds	r7, #24
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	20009a78 	.word	0x20009a78

0800adb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10a      	bne.n	800ade0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	60fb      	str	r3, [r7, #12]
}
 800addc:	bf00      	nop
 800adde:	e7fe      	b.n	800adde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	3318      	adds	r3, #24
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7fe fe37 	bl	8009a58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adea:	4b1e      	ldr	r3, [pc, #120]	; (800ae64 <xTaskRemoveFromEventList+0xb0>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d11d      	bne.n	800ae2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	3304      	adds	r3, #4
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fe fe2e 	bl	8009a58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae00:	4b19      	ldr	r3, [pc, #100]	; (800ae68 <xTaskRemoveFromEventList+0xb4>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d903      	bls.n	800ae10 <xTaskRemoveFromEventList+0x5c>
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0c:	4a16      	ldr	r2, [pc, #88]	; (800ae68 <xTaskRemoveFromEventList+0xb4>)
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae14:	4613      	mov	r3, r2
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4413      	add	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4a13      	ldr	r2, [pc, #76]	; (800ae6c <xTaskRemoveFromEventList+0xb8>)
 800ae1e:	441a      	add	r2, r3
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	3304      	adds	r3, #4
 800ae24:	4619      	mov	r1, r3
 800ae26:	4610      	mov	r0, r2
 800ae28:	f7fe fdb9 	bl	800999e <vListInsertEnd>
 800ae2c:	e005      	b.n	800ae3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	3318      	adds	r3, #24
 800ae32:	4619      	mov	r1, r3
 800ae34:	480e      	ldr	r0, [pc, #56]	; (800ae70 <xTaskRemoveFromEventList+0xbc>)
 800ae36:	f7fe fdb2 	bl	800999e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3e:	4b0d      	ldr	r3, [pc, #52]	; (800ae74 <xTaskRemoveFromEventList+0xc0>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d905      	bls.n	800ae54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae4c:	4b0a      	ldr	r3, [pc, #40]	; (800ae78 <xTaskRemoveFromEventList+0xc4>)
 800ae4e:	2201      	movs	r2, #1
 800ae50:	601a      	str	r2, [r3, #0]
 800ae52:	e001      	b.n	800ae58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ae54:	2300      	movs	r3, #0
 800ae56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae58:	697b      	ldr	r3, [r7, #20]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3718      	adds	r7, #24
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	20009f74 	.word	0x20009f74
 800ae68:	20009f54 	.word	0x20009f54
 800ae6c:	20009a7c 	.word	0x20009a7c
 800ae70:	20009f0c 	.word	0x20009f0c
 800ae74:	20009a78 	.word	0x20009a78
 800ae78:	20009f60 	.word	0x20009f60

0800ae7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae84:	4b06      	ldr	r3, [pc, #24]	; (800aea0 <vTaskInternalSetTimeOutState+0x24>)
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae8c:	4b05      	ldr	r3, [pc, #20]	; (800aea4 <vTaskInternalSetTimeOutState+0x28>)
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	605a      	str	r2, [r3, #4]
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	20009f64 	.word	0x20009f64
 800aea4:	20009f50 	.word	0x20009f50

0800aea8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b088      	sub	sp, #32
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10a      	bne.n	800aece <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	613b      	str	r3, [r7, #16]
}
 800aeca:	bf00      	nop
 800aecc:	e7fe      	b.n	800aecc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d10a      	bne.n	800aeea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	60fb      	str	r3, [r7, #12]
}
 800aee6:	bf00      	nop
 800aee8:	e7fe      	b.n	800aee8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aeea:	f000 fe83 	bl	800bbf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aeee:	4b1d      	ldr	r3, [pc, #116]	; (800af64 <xTaskCheckForTimeOut+0xbc>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	69ba      	ldr	r2, [r7, #24]
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af06:	d102      	bne.n	800af0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800af08:	2300      	movs	r3, #0
 800af0a:	61fb      	str	r3, [r7, #28]
 800af0c:	e023      	b.n	800af56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	4b15      	ldr	r3, [pc, #84]	; (800af68 <xTaskCheckForTimeOut+0xc0>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	429a      	cmp	r2, r3
 800af18:	d007      	beq.n	800af2a <xTaskCheckForTimeOut+0x82>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	69ba      	ldr	r2, [r7, #24]
 800af20:	429a      	cmp	r2, r3
 800af22:	d302      	bcc.n	800af2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af24:	2301      	movs	r3, #1
 800af26:	61fb      	str	r3, [r7, #28]
 800af28:	e015      	b.n	800af56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	697a      	ldr	r2, [r7, #20]
 800af30:	429a      	cmp	r2, r3
 800af32:	d20b      	bcs.n	800af4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	1ad2      	subs	r2, r2, r3
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f7ff ff9b 	bl	800ae7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af46:	2300      	movs	r3, #0
 800af48:	61fb      	str	r3, [r7, #28]
 800af4a:	e004      	b.n	800af56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	2200      	movs	r2, #0
 800af50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af52:	2301      	movs	r3, #1
 800af54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af56:	f000 fe7d 	bl	800bc54 <vPortExitCritical>

	return xReturn;
 800af5a:	69fb      	ldr	r3, [r7, #28]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3720      	adds	r7, #32
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	20009f50 	.word	0x20009f50
 800af68:	20009f64 	.word	0x20009f64

0800af6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af6c:	b480      	push	{r7}
 800af6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af70:	4b03      	ldr	r3, [pc, #12]	; (800af80 <vTaskMissedYield+0x14>)
 800af72:	2201      	movs	r2, #1
 800af74:	601a      	str	r2, [r3, #0]
}
 800af76:	bf00      	nop
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	20009f60 	.word	0x20009f60

0800af84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af8c:	f000 f852 	bl	800b034 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af90:	4b06      	ldr	r3, [pc, #24]	; (800afac <prvIdleTask+0x28>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d9f9      	bls.n	800af8c <prvIdleTask+0x8>
			{
				taskYIELD();
 800af98:	4b05      	ldr	r3, [pc, #20]	; (800afb0 <prvIdleTask+0x2c>)
 800af9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af9e:	601a      	str	r2, [r3, #0]
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800afa8:	e7f0      	b.n	800af8c <prvIdleTask+0x8>
 800afaa:	bf00      	nop
 800afac:	20009a7c 	.word	0x20009a7c
 800afb0:	e000ed04 	.word	0xe000ed04

0800afb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afba:	2300      	movs	r3, #0
 800afbc:	607b      	str	r3, [r7, #4]
 800afbe:	e00c      	b.n	800afda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	4613      	mov	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	4413      	add	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4a12      	ldr	r2, [pc, #72]	; (800b014 <prvInitialiseTaskLists+0x60>)
 800afcc:	4413      	add	r3, r2
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fe fcb8 	bl	8009944 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3301      	adds	r3, #1
 800afd8:	607b      	str	r3, [r7, #4]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2b37      	cmp	r3, #55	; 0x37
 800afde:	d9ef      	bls.n	800afc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afe0:	480d      	ldr	r0, [pc, #52]	; (800b018 <prvInitialiseTaskLists+0x64>)
 800afe2:	f7fe fcaf 	bl	8009944 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afe6:	480d      	ldr	r0, [pc, #52]	; (800b01c <prvInitialiseTaskLists+0x68>)
 800afe8:	f7fe fcac 	bl	8009944 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800afec:	480c      	ldr	r0, [pc, #48]	; (800b020 <prvInitialiseTaskLists+0x6c>)
 800afee:	f7fe fca9 	bl	8009944 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aff2:	480c      	ldr	r0, [pc, #48]	; (800b024 <prvInitialiseTaskLists+0x70>)
 800aff4:	f7fe fca6 	bl	8009944 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aff8:	480b      	ldr	r0, [pc, #44]	; (800b028 <prvInitialiseTaskLists+0x74>)
 800affa:	f7fe fca3 	bl	8009944 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800affe:	4b0b      	ldr	r3, [pc, #44]	; (800b02c <prvInitialiseTaskLists+0x78>)
 800b000:	4a05      	ldr	r2, [pc, #20]	; (800b018 <prvInitialiseTaskLists+0x64>)
 800b002:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b004:	4b0a      	ldr	r3, [pc, #40]	; (800b030 <prvInitialiseTaskLists+0x7c>)
 800b006:	4a05      	ldr	r2, [pc, #20]	; (800b01c <prvInitialiseTaskLists+0x68>)
 800b008:	601a      	str	r2, [r3, #0]
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	20009a7c 	.word	0x20009a7c
 800b018:	20009edc 	.word	0x20009edc
 800b01c:	20009ef0 	.word	0x20009ef0
 800b020:	20009f0c 	.word	0x20009f0c
 800b024:	20009f20 	.word	0x20009f20
 800b028:	20009f38 	.word	0x20009f38
 800b02c:	20009f04 	.word	0x20009f04
 800b030:	20009f08 	.word	0x20009f08

0800b034 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b03a:	e019      	b.n	800b070 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b03c:	f000 fdda 	bl	800bbf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b040:	4b10      	ldr	r3, [pc, #64]	; (800b084 <prvCheckTasksWaitingTermination+0x50>)
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	3304      	adds	r3, #4
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fe fd03 	bl	8009a58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b052:	4b0d      	ldr	r3, [pc, #52]	; (800b088 <prvCheckTasksWaitingTermination+0x54>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	3b01      	subs	r3, #1
 800b058:	4a0b      	ldr	r2, [pc, #44]	; (800b088 <prvCheckTasksWaitingTermination+0x54>)
 800b05a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b05c:	4b0b      	ldr	r3, [pc, #44]	; (800b08c <prvCheckTasksWaitingTermination+0x58>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	3b01      	subs	r3, #1
 800b062:	4a0a      	ldr	r2, [pc, #40]	; (800b08c <prvCheckTasksWaitingTermination+0x58>)
 800b064:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b066:	f000 fdf5 	bl	800bc54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f810 	bl	800b090 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b070:	4b06      	ldr	r3, [pc, #24]	; (800b08c <prvCheckTasksWaitingTermination+0x58>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1e1      	bne.n	800b03c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b078:	bf00      	nop
 800b07a:	bf00      	nop
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	20009f20 	.word	0x20009f20
 800b088:	20009f4c 	.word	0x20009f4c
 800b08c:	20009f34 	.word	0x20009f34

0800b090 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	3354      	adds	r3, #84	; 0x54
 800b09c:	4618      	mov	r0, r3
 800b09e:	f001 fa21 	bl	800c4e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d108      	bne.n	800b0be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 ff8d 	bl	800bfd0 <vPortFree>
				vPortFree( pxTCB );
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 ff8a 	bl	800bfd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b0bc:	e018      	b.n	800b0f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d103      	bne.n	800b0d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 ff81 	bl	800bfd0 <vPortFree>
	}
 800b0ce:	e00f      	b.n	800b0f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d00a      	beq.n	800b0f0 <prvDeleteTCB+0x60>
	__asm volatile
 800b0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0de:	f383 8811 	msr	BASEPRI, r3
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	60fb      	str	r3, [r7, #12]
}
 800b0ec:	bf00      	nop
 800b0ee:	e7fe      	b.n	800b0ee <prvDeleteTCB+0x5e>
	}
 800b0f0:	bf00      	nop
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0fe:	4b0c      	ldr	r3, [pc, #48]	; (800b130 <prvResetNextTaskUnblockTime+0x38>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d104      	bne.n	800b112 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b108:	4b0a      	ldr	r3, [pc, #40]	; (800b134 <prvResetNextTaskUnblockTime+0x3c>)
 800b10a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b10e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b110:	e008      	b.n	800b124 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b112:	4b07      	ldr	r3, [pc, #28]	; (800b130 <prvResetNextTaskUnblockTime+0x38>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	4a04      	ldr	r2, [pc, #16]	; (800b134 <prvResetNextTaskUnblockTime+0x3c>)
 800b122:	6013      	str	r3, [r2, #0]
}
 800b124:	bf00      	nop
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	20009f04 	.word	0x20009f04
 800b134:	20009f6c 	.word	0x20009f6c

0800b138 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b13e:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <xTaskGetSchedulerState+0x34>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d102      	bne.n	800b14c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b146:	2301      	movs	r3, #1
 800b148:	607b      	str	r3, [r7, #4]
 800b14a:	e008      	b.n	800b15e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b14c:	4b08      	ldr	r3, [pc, #32]	; (800b170 <xTaskGetSchedulerState+0x38>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d102      	bne.n	800b15a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b154:	2302      	movs	r3, #2
 800b156:	607b      	str	r3, [r7, #4]
 800b158:	e001      	b.n	800b15e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b15a:	2300      	movs	r3, #0
 800b15c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b15e:	687b      	ldr	r3, [r7, #4]
	}
 800b160:	4618      	mov	r0, r3
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	20009f58 	.word	0x20009f58
 800b170:	20009f74 	.word	0x20009f74

0800b174 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b174:	b580      	push	{r7, lr}
 800b176:	b086      	sub	sp, #24
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b180:	2300      	movs	r3, #0
 800b182:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d056      	beq.n	800b238 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b18a:	4b2e      	ldr	r3, [pc, #184]	; (800b244 <xTaskPriorityDisinherit+0xd0>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	693a      	ldr	r2, [r7, #16]
 800b190:	429a      	cmp	r2, r3
 800b192:	d00a      	beq.n	800b1aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b198:	f383 8811 	msr	BASEPRI, r3
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	60fb      	str	r3, [r7, #12]
}
 800b1a6:	bf00      	nop
 800b1a8:	e7fe      	b.n	800b1a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d10a      	bne.n	800b1c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	60bb      	str	r3, [r7, #8]
}
 800b1c4:	bf00      	nop
 800b1c6:	e7fe      	b.n	800b1c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1cc:	1e5a      	subs	r2, r3, #1
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d02c      	beq.n	800b238 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d128      	bne.n	800b238 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe fc34 	bl	8009a58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b208:	4b0f      	ldr	r3, [pc, #60]	; (800b248 <xTaskPriorityDisinherit+0xd4>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d903      	bls.n	800b218 <xTaskPriorityDisinherit+0xa4>
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b214:	4a0c      	ldr	r2, [pc, #48]	; (800b248 <xTaskPriorityDisinherit+0xd4>)
 800b216:	6013      	str	r3, [r2, #0]
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b21c:	4613      	mov	r3, r2
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	4413      	add	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	4a09      	ldr	r2, [pc, #36]	; (800b24c <xTaskPriorityDisinherit+0xd8>)
 800b226:	441a      	add	r2, r3
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	3304      	adds	r3, #4
 800b22c:	4619      	mov	r1, r3
 800b22e:	4610      	mov	r0, r2
 800b230:	f7fe fbb5 	bl	800999e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b234:	2301      	movs	r3, #1
 800b236:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b238:	697b      	ldr	r3, [r7, #20]
	}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3718      	adds	r7, #24
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	20009a78 	.word	0x20009a78
 800b248:	20009f54 	.word	0x20009f54
 800b24c:	20009a7c 	.word	0x20009a7c

0800b250 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b25a:	4b21      	ldr	r3, [pc, #132]	; (800b2e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b260:	4b20      	ldr	r3, [pc, #128]	; (800b2e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	3304      	adds	r3, #4
 800b266:	4618      	mov	r0, r3
 800b268:	f7fe fbf6 	bl	8009a58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b272:	d10a      	bne.n	800b28a <prvAddCurrentTaskToDelayedList+0x3a>
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d007      	beq.n	800b28a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b27a:	4b1a      	ldr	r3, [pc, #104]	; (800b2e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	3304      	adds	r3, #4
 800b280:	4619      	mov	r1, r3
 800b282:	4819      	ldr	r0, [pc, #100]	; (800b2e8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b284:	f7fe fb8b 	bl	800999e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b288:	e026      	b.n	800b2d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4413      	add	r3, r2
 800b290:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b292:	4b14      	ldr	r3, [pc, #80]	; (800b2e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68ba      	ldr	r2, [r7, #8]
 800b298:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d209      	bcs.n	800b2b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2a2:	4b12      	ldr	r3, [pc, #72]	; (800b2ec <prvAddCurrentTaskToDelayedList+0x9c>)
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	4b0f      	ldr	r3, [pc, #60]	; (800b2e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	3304      	adds	r3, #4
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	4610      	mov	r0, r2
 800b2b0:	f7fe fb99 	bl	80099e6 <vListInsert>
}
 800b2b4:	e010      	b.n	800b2d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2b6:	4b0e      	ldr	r3, [pc, #56]	; (800b2f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	4b0a      	ldr	r3, [pc, #40]	; (800b2e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	3304      	adds	r3, #4
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	f7fe fb8f 	bl	80099e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2c8:	4b0a      	ldr	r3, [pc, #40]	; (800b2f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d202      	bcs.n	800b2d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b2d2:	4a08      	ldr	r2, [pc, #32]	; (800b2f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	6013      	str	r3, [r2, #0]
}
 800b2d8:	bf00      	nop
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	20009f50 	.word	0x20009f50
 800b2e4:	20009a78 	.word	0x20009a78
 800b2e8:	20009f38 	.word	0x20009f38
 800b2ec:	20009f08 	.word	0x20009f08
 800b2f0:	20009f04 	.word	0x20009f04
 800b2f4:	20009f6c 	.word	0x20009f6c

0800b2f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b08a      	sub	sp, #40	; 0x28
 800b2fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b302:	f000 fb07 	bl	800b914 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b306:	4b1c      	ldr	r3, [pc, #112]	; (800b378 <xTimerCreateTimerTask+0x80>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d021      	beq.n	800b352 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b30e:	2300      	movs	r3, #0
 800b310:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b312:	2300      	movs	r3, #0
 800b314:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b316:	1d3a      	adds	r2, r7, #4
 800b318:	f107 0108 	add.w	r1, r7, #8
 800b31c:	f107 030c 	add.w	r3, r7, #12
 800b320:	4618      	mov	r0, r3
 800b322:	f7fe faf5 	bl	8009910 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b326:	6879      	ldr	r1, [r7, #4]
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	9202      	str	r2, [sp, #8]
 800b32e:	9301      	str	r3, [sp, #4]
 800b330:	2302      	movs	r3, #2
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	2300      	movs	r3, #0
 800b336:	460a      	mov	r2, r1
 800b338:	4910      	ldr	r1, [pc, #64]	; (800b37c <xTimerCreateTimerTask+0x84>)
 800b33a:	4811      	ldr	r0, [pc, #68]	; (800b380 <xTimerCreateTimerTask+0x88>)
 800b33c:	f7ff f8a2 	bl	800a484 <xTaskCreateStatic>
 800b340:	4603      	mov	r3, r0
 800b342:	4a10      	ldr	r2, [pc, #64]	; (800b384 <xTimerCreateTimerTask+0x8c>)
 800b344:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b346:	4b0f      	ldr	r3, [pc, #60]	; (800b384 <xTimerCreateTimerTask+0x8c>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b34e:	2301      	movs	r3, #1
 800b350:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10a      	bne.n	800b36e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35c:	f383 8811 	msr	BASEPRI, r3
 800b360:	f3bf 8f6f 	isb	sy
 800b364:	f3bf 8f4f 	dsb	sy
 800b368:	613b      	str	r3, [r7, #16]
}
 800b36a:	bf00      	nop
 800b36c:	e7fe      	b.n	800b36c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b36e:	697b      	ldr	r3, [r7, #20]
}
 800b370:	4618      	mov	r0, r3
 800b372:	3718      	adds	r7, #24
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	20009fa8 	.word	0x20009fa8
 800b37c:	0800d630 	.word	0x0800d630
 800b380:	0800b4bd 	.word	0x0800b4bd
 800b384:	20009fac 	.word	0x20009fac

0800b388 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b08a      	sub	sp, #40	; 0x28
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
 800b394:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b396:	2300      	movs	r3, #0
 800b398:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10a      	bne.n	800b3b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a4:	f383 8811 	msr	BASEPRI, r3
 800b3a8:	f3bf 8f6f 	isb	sy
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	623b      	str	r3, [r7, #32]
}
 800b3b2:	bf00      	nop
 800b3b4:	e7fe      	b.n	800b3b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b3b6:	4b1a      	ldr	r3, [pc, #104]	; (800b420 <xTimerGenericCommand+0x98>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d02a      	beq.n	800b414 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	2b05      	cmp	r3, #5
 800b3ce:	dc18      	bgt.n	800b402 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b3d0:	f7ff feb2 	bl	800b138 <xTaskGetSchedulerState>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	d109      	bne.n	800b3ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b3da:	4b11      	ldr	r3, [pc, #68]	; (800b420 <xTimerGenericCommand+0x98>)
 800b3dc:	6818      	ldr	r0, [r3, #0]
 800b3de:	f107 0110 	add.w	r1, r7, #16
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3e6:	f7fe fc65 	bl	8009cb4 <xQueueGenericSend>
 800b3ea:	6278      	str	r0, [r7, #36]	; 0x24
 800b3ec:	e012      	b.n	800b414 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b3ee:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <xTimerGenericCommand+0x98>)
 800b3f0:	6818      	ldr	r0, [r3, #0]
 800b3f2:	f107 0110 	add.w	r1, r7, #16
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f7fe fc5b 	bl	8009cb4 <xQueueGenericSend>
 800b3fe:	6278      	str	r0, [r7, #36]	; 0x24
 800b400:	e008      	b.n	800b414 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b402:	4b07      	ldr	r3, [pc, #28]	; (800b420 <xTimerGenericCommand+0x98>)
 800b404:	6818      	ldr	r0, [r3, #0]
 800b406:	f107 0110 	add.w	r1, r7, #16
 800b40a:	2300      	movs	r3, #0
 800b40c:	683a      	ldr	r2, [r7, #0]
 800b40e:	f7fe fd4f 	bl	8009eb0 <xQueueGenericSendFromISR>
 800b412:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b416:	4618      	mov	r0, r3
 800b418:	3728      	adds	r7, #40	; 0x28
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	20009fa8 	.word	0x20009fa8

0800b424 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b088      	sub	sp, #32
 800b428:	af02      	add	r7, sp, #8
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b42e:	4b22      	ldr	r3, [pc, #136]	; (800b4b8 <prvProcessExpiredTimer+0x94>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	3304      	adds	r3, #4
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fe fb0b 	bl	8009a58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d022      	beq.n	800b496 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	699a      	ldr	r2, [r3, #24]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	18d1      	adds	r1, r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	683a      	ldr	r2, [r7, #0]
 800b45c:	6978      	ldr	r0, [r7, #20]
 800b45e:	f000 f8d1 	bl	800b604 <prvInsertTimerInActiveList>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d01f      	beq.n	800b4a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b468:	2300      	movs	r3, #0
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	2300      	movs	r3, #0
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	2100      	movs	r1, #0
 800b472:	6978      	ldr	r0, [r7, #20]
 800b474:	f7ff ff88 	bl	800b388 <xTimerGenericCommand>
 800b478:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d113      	bne.n	800b4a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	60fb      	str	r3, [r7, #12]
}
 800b492:	bf00      	nop
 800b494:	e7fe      	b.n	800b494 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b49c:	f023 0301 	bic.w	r3, r3, #1
 800b4a0:	b2da      	uxtb	r2, r3
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	6a1b      	ldr	r3, [r3, #32]
 800b4ac:	6978      	ldr	r0, [r7, #20]
 800b4ae:	4798      	blx	r3
}
 800b4b0:	bf00      	nop
 800b4b2:	3718      	adds	r7, #24
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	20009fa0 	.word	0x20009fa0

0800b4bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4c4:	f107 0308 	add.w	r3, r7, #8
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f000 f857 	bl	800b57c <prvGetNextExpireTime>
 800b4ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f000 f803 	bl	800b4e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b4da:	f000 f8d5 	bl	800b688 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4de:	e7f1      	b.n	800b4c4 <prvTimerTask+0x8>

0800b4e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b4ea:	f7ff fa27 	bl	800a93c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4ee:	f107 0308 	add.w	r3, r7, #8
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f000 f866 	bl	800b5c4 <prvSampleTimeNow>
 800b4f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d130      	bne.n	800b562 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d10a      	bne.n	800b51c <prvProcessTimerOrBlockTask+0x3c>
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d806      	bhi.n	800b51c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b50e:	f7ff fa23 	bl	800a958 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b512:	68f9      	ldr	r1, [r7, #12]
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7ff ff85 	bl	800b424 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b51a:	e024      	b.n	800b566 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d008      	beq.n	800b534 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b522:	4b13      	ldr	r3, [pc, #76]	; (800b570 <prvProcessTimerOrBlockTask+0x90>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d101      	bne.n	800b530 <prvProcessTimerOrBlockTask+0x50>
 800b52c:	2301      	movs	r3, #1
 800b52e:	e000      	b.n	800b532 <prvProcessTimerOrBlockTask+0x52>
 800b530:	2300      	movs	r3, #0
 800b532:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b534:	4b0f      	ldr	r3, [pc, #60]	; (800b574 <prvProcessTimerOrBlockTask+0x94>)
 800b536:	6818      	ldr	r0, [r3, #0]
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	683a      	ldr	r2, [r7, #0]
 800b540:	4619      	mov	r1, r3
 800b542:	f7fe ff6b 	bl	800a41c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b546:	f7ff fa07 	bl	800a958 <xTaskResumeAll>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d10a      	bne.n	800b566 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b550:	4b09      	ldr	r3, [pc, #36]	; (800b578 <prvProcessTimerOrBlockTask+0x98>)
 800b552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b556:	601a      	str	r2, [r3, #0]
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	f3bf 8f6f 	isb	sy
}
 800b560:	e001      	b.n	800b566 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b562:	f7ff f9f9 	bl	800a958 <xTaskResumeAll>
}
 800b566:	bf00      	nop
 800b568:	3710      	adds	r7, #16
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	20009fa4 	.word	0x20009fa4
 800b574:	20009fa8 	.word	0x20009fa8
 800b578:	e000ed04 	.word	0xe000ed04

0800b57c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b584:	4b0e      	ldr	r3, [pc, #56]	; (800b5c0 <prvGetNextExpireTime+0x44>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d101      	bne.n	800b592 <prvGetNextExpireTime+0x16>
 800b58e:	2201      	movs	r2, #1
 800b590:	e000      	b.n	800b594 <prvGetNextExpireTime+0x18>
 800b592:	2200      	movs	r2, #0
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d105      	bne.n	800b5ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5a0:	4b07      	ldr	r3, [pc, #28]	; (800b5c0 <prvGetNextExpireTime+0x44>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	60fb      	str	r3, [r7, #12]
 800b5aa:	e001      	b.n	800b5b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3714      	adds	r7, #20
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	20009fa0 	.word	0x20009fa0

0800b5c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b5cc:	f7ff fa62 	bl	800aa94 <xTaskGetTickCount>
 800b5d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b5d2:	4b0b      	ldr	r3, [pc, #44]	; (800b600 <prvSampleTimeNow+0x3c>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d205      	bcs.n	800b5e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b5dc:	f000 f936 	bl	800b84c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	e002      	b.n	800b5ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b5ee:	4a04      	ldr	r2, [pc, #16]	; (800b600 <prvSampleTimeNow+0x3c>)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	20009fb0 	.word	0x20009fb0

0800b604 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b086      	sub	sp, #24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	607a      	str	r2, [r7, #4]
 800b610:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b612:	2300      	movs	r3, #0
 800b614:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	68ba      	ldr	r2, [r7, #8]
 800b61a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	429a      	cmp	r2, r3
 800b628:	d812      	bhi.n	800b650 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	1ad2      	subs	r2, r2, r3
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	699b      	ldr	r3, [r3, #24]
 800b634:	429a      	cmp	r2, r3
 800b636:	d302      	bcc.n	800b63e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b638:	2301      	movs	r3, #1
 800b63a:	617b      	str	r3, [r7, #20]
 800b63c:	e01b      	b.n	800b676 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b63e:	4b10      	ldr	r3, [pc, #64]	; (800b680 <prvInsertTimerInActiveList+0x7c>)
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	3304      	adds	r3, #4
 800b646:	4619      	mov	r1, r3
 800b648:	4610      	mov	r0, r2
 800b64a:	f7fe f9cc 	bl	80099e6 <vListInsert>
 800b64e:	e012      	b.n	800b676 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	429a      	cmp	r2, r3
 800b656:	d206      	bcs.n	800b666 <prvInsertTimerInActiveList+0x62>
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d302      	bcc.n	800b666 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b660:	2301      	movs	r3, #1
 800b662:	617b      	str	r3, [r7, #20]
 800b664:	e007      	b.n	800b676 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b666:	4b07      	ldr	r3, [pc, #28]	; (800b684 <prvInsertTimerInActiveList+0x80>)
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	3304      	adds	r3, #4
 800b66e:	4619      	mov	r1, r3
 800b670:	4610      	mov	r0, r2
 800b672:	f7fe f9b8 	bl	80099e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b676:	697b      	ldr	r3, [r7, #20]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3718      	adds	r7, #24
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	20009fa4 	.word	0x20009fa4
 800b684:	20009fa0 	.word	0x20009fa0

0800b688 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b08e      	sub	sp, #56	; 0x38
 800b68c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b68e:	e0ca      	b.n	800b826 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	da18      	bge.n	800b6c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b696:	1d3b      	adds	r3, r7, #4
 800b698:	3304      	adds	r3, #4
 800b69a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d10a      	bne.n	800b6b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a6:	f383 8811 	msr	BASEPRI, r3
 800b6aa:	f3bf 8f6f 	isb	sy
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	61fb      	str	r3, [r7, #28]
}
 800b6b4:	bf00      	nop
 800b6b6:	e7fe      	b.n	800b6b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6be:	6850      	ldr	r0, [r2, #4]
 800b6c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6c2:	6892      	ldr	r2, [r2, #8]
 800b6c4:	4611      	mov	r1, r2
 800b6c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f2c0 80ab 	blt.w	800b826 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d6:	695b      	ldr	r3, [r3, #20]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d004      	beq.n	800b6e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6de:	3304      	adds	r3, #4
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7fe f9b9 	bl	8009a58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6e6:	463b      	mov	r3, r7
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7ff ff6b 	bl	800b5c4 <prvSampleTimeNow>
 800b6ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b09      	cmp	r3, #9
 800b6f4:	f200 8096 	bhi.w	800b824 <prvProcessReceivedCommands+0x19c>
 800b6f8:	a201      	add	r2, pc, #4	; (adr r2, 800b700 <prvProcessReceivedCommands+0x78>)
 800b6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6fe:	bf00      	nop
 800b700:	0800b729 	.word	0x0800b729
 800b704:	0800b729 	.word	0x0800b729
 800b708:	0800b729 	.word	0x0800b729
 800b70c:	0800b79d 	.word	0x0800b79d
 800b710:	0800b7b1 	.word	0x0800b7b1
 800b714:	0800b7fb 	.word	0x0800b7fb
 800b718:	0800b729 	.word	0x0800b729
 800b71c:	0800b729 	.word	0x0800b729
 800b720:	0800b79d 	.word	0x0800b79d
 800b724:	0800b7b1 	.word	0x0800b7b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b72e:	f043 0301 	orr.w	r3, r3, #1
 800b732:	b2da      	uxtb	r2, r3
 800b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	18d1      	adds	r1, r2, r3
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b748:	f7ff ff5c 	bl	800b604 <prvInsertTimerInActiveList>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d069      	beq.n	800b826 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b758:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b760:	f003 0304 	and.w	r3, r3, #4
 800b764:	2b00      	cmp	r3, #0
 800b766:	d05e      	beq.n	800b826 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76c:	699b      	ldr	r3, [r3, #24]
 800b76e:	441a      	add	r2, r3
 800b770:	2300      	movs	r3, #0
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	2300      	movs	r3, #0
 800b776:	2100      	movs	r1, #0
 800b778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b77a:	f7ff fe05 	bl	800b388 <xTimerGenericCommand>
 800b77e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d14f      	bne.n	800b826 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	61bb      	str	r3, [r7, #24]
}
 800b798:	bf00      	nop
 800b79a:	e7fe      	b.n	800b79a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7a2:	f023 0301 	bic.w	r3, r3, #1
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b7ae:	e03a      	b.n	800b826 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7b6:	f043 0301 	orr.w	r3, r3, #1
 800b7ba:	b2da      	uxtb	r2, r3
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b7c2:	68ba      	ldr	r2, [r7, #8]
 800b7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10a      	bne.n	800b7e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	617b      	str	r3, [r7, #20]
}
 800b7e2:	bf00      	nop
 800b7e4:	e7fe      	b.n	800b7e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e8:	699a      	ldr	r2, [r3, #24]
 800b7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ec:	18d1      	adds	r1, r2, r3
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7f4:	f7ff ff06 	bl	800b604 <prvInsertTimerInActiveList>
					break;
 800b7f8:	e015      	b.n	800b826 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b800:	f003 0302 	and.w	r3, r3, #2
 800b804:	2b00      	cmp	r3, #0
 800b806:	d103      	bne.n	800b810 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b80a:	f000 fbe1 	bl	800bfd0 <vPortFree>
 800b80e:	e00a      	b.n	800b826 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b812:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b816:	f023 0301 	bic.w	r3, r3, #1
 800b81a:	b2da      	uxtb	r2, r3
 800b81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b822:	e000      	b.n	800b826 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b824:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b826:	4b08      	ldr	r3, [pc, #32]	; (800b848 <prvProcessReceivedCommands+0x1c0>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	1d39      	adds	r1, r7, #4
 800b82c:	2200      	movs	r2, #0
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fe fbda 	bl	8009fe8 <xQueueReceive>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	f47f af2a 	bne.w	800b690 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b83c:	bf00      	nop
 800b83e:	bf00      	nop
 800b840:	3730      	adds	r7, #48	; 0x30
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	20009fa8 	.word	0x20009fa8

0800b84c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b088      	sub	sp, #32
 800b850:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b852:	e048      	b.n	800b8e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b854:	4b2d      	ldr	r3, [pc, #180]	; (800b90c <prvSwitchTimerLists+0xc0>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b85e:	4b2b      	ldr	r3, [pc, #172]	; (800b90c <prvSwitchTimerLists+0xc0>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	3304      	adds	r3, #4
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fe f8f3 	bl	8009a58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6a1b      	ldr	r3, [r3, #32]
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b880:	f003 0304 	and.w	r3, r3, #4
 800b884:	2b00      	cmp	r3, #0
 800b886:	d02e      	beq.n	800b8e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	699b      	ldr	r3, [r3, #24]
 800b88c:	693a      	ldr	r2, [r7, #16]
 800b88e:	4413      	add	r3, r2
 800b890:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	429a      	cmp	r2, r3
 800b898:	d90e      	bls.n	800b8b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8a6:	4b19      	ldr	r3, [pc, #100]	; (800b90c <prvSwitchTimerLists+0xc0>)
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	f7fe f898 	bl	80099e6 <vListInsert>
 800b8b6:	e016      	b.n	800b8e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	9300      	str	r3, [sp, #0]
 800b8bc:	2300      	movs	r3, #0
 800b8be:	693a      	ldr	r2, [r7, #16]
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f7ff fd60 	bl	800b388 <xTimerGenericCommand>
 800b8c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d10a      	bne.n	800b8e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	603b      	str	r3, [r7, #0]
}
 800b8e2:	bf00      	nop
 800b8e4:	e7fe      	b.n	800b8e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8e6:	4b09      	ldr	r3, [pc, #36]	; (800b90c <prvSwitchTimerLists+0xc0>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d1b1      	bne.n	800b854 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b8f0:	4b06      	ldr	r3, [pc, #24]	; (800b90c <prvSwitchTimerLists+0xc0>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b8f6:	4b06      	ldr	r3, [pc, #24]	; (800b910 <prvSwitchTimerLists+0xc4>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a04      	ldr	r2, [pc, #16]	; (800b90c <prvSwitchTimerLists+0xc0>)
 800b8fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b8fe:	4a04      	ldr	r2, [pc, #16]	; (800b910 <prvSwitchTimerLists+0xc4>)
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	6013      	str	r3, [r2, #0]
}
 800b904:	bf00      	nop
 800b906:	3718      	adds	r7, #24
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	20009fa0 	.word	0x20009fa0
 800b910:	20009fa4 	.word	0x20009fa4

0800b914 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b91a:	f000 f96b 	bl	800bbf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b91e:	4b15      	ldr	r3, [pc, #84]	; (800b974 <prvCheckForValidListAndQueue+0x60>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d120      	bne.n	800b968 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b926:	4814      	ldr	r0, [pc, #80]	; (800b978 <prvCheckForValidListAndQueue+0x64>)
 800b928:	f7fe f80c 	bl	8009944 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b92c:	4813      	ldr	r0, [pc, #76]	; (800b97c <prvCheckForValidListAndQueue+0x68>)
 800b92e:	f7fe f809 	bl	8009944 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b932:	4b13      	ldr	r3, [pc, #76]	; (800b980 <prvCheckForValidListAndQueue+0x6c>)
 800b934:	4a10      	ldr	r2, [pc, #64]	; (800b978 <prvCheckForValidListAndQueue+0x64>)
 800b936:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b938:	4b12      	ldr	r3, [pc, #72]	; (800b984 <prvCheckForValidListAndQueue+0x70>)
 800b93a:	4a10      	ldr	r2, [pc, #64]	; (800b97c <prvCheckForValidListAndQueue+0x68>)
 800b93c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b93e:	2300      	movs	r3, #0
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	4b11      	ldr	r3, [pc, #68]	; (800b988 <prvCheckForValidListAndQueue+0x74>)
 800b944:	4a11      	ldr	r2, [pc, #68]	; (800b98c <prvCheckForValidListAndQueue+0x78>)
 800b946:	2110      	movs	r1, #16
 800b948:	200a      	movs	r0, #10
 800b94a:	f7fe f917 	bl	8009b7c <xQueueGenericCreateStatic>
 800b94e:	4603      	mov	r3, r0
 800b950:	4a08      	ldr	r2, [pc, #32]	; (800b974 <prvCheckForValidListAndQueue+0x60>)
 800b952:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b954:	4b07      	ldr	r3, [pc, #28]	; (800b974 <prvCheckForValidListAndQueue+0x60>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d005      	beq.n	800b968 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b95c:	4b05      	ldr	r3, [pc, #20]	; (800b974 <prvCheckForValidListAndQueue+0x60>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	490b      	ldr	r1, [pc, #44]	; (800b990 <prvCheckForValidListAndQueue+0x7c>)
 800b962:	4618      	mov	r0, r3
 800b964:	f7fe fd30 	bl	800a3c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b968:	f000 f974 	bl	800bc54 <vPortExitCritical>
}
 800b96c:	bf00      	nop
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	20009fa8 	.word	0x20009fa8
 800b978:	20009f78 	.word	0x20009f78
 800b97c:	20009f8c 	.word	0x20009f8c
 800b980:	20009fa0 	.word	0x20009fa0
 800b984:	20009fa4 	.word	0x20009fa4
 800b988:	2000a054 	.word	0x2000a054
 800b98c:	20009fb4 	.word	0x20009fb4
 800b990:	0800d638 	.word	0x0800d638

0800b994 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3b04      	subs	r3, #4
 800b9a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b9ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	3b04      	subs	r3, #4
 800b9b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	f023 0201 	bic.w	r2, r3, #1
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3b04      	subs	r3, #4
 800b9c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9c4:	4a0c      	ldr	r2, [pc, #48]	; (800b9f8 <pxPortInitialiseStack+0x64>)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	3b14      	subs	r3, #20
 800b9ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	3b04      	subs	r3, #4
 800b9da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f06f 0202 	mvn.w	r2, #2
 800b9e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	3b20      	subs	r3, #32
 800b9e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr
 800b9f8:	0800b9fd 	.word	0x0800b9fd

0800b9fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba02:	2300      	movs	r3, #0
 800ba04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba06:	4b12      	ldr	r3, [pc, #72]	; (800ba50 <prvTaskExitError+0x54>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba0e:	d00a      	beq.n	800ba26 <prvTaskExitError+0x2a>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	60fb      	str	r3, [r7, #12]
}
 800ba22:	bf00      	nop
 800ba24:	e7fe      	b.n	800ba24 <prvTaskExitError+0x28>
	__asm volatile
 800ba26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	60bb      	str	r3, [r7, #8]
}
 800ba38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba3a:	bf00      	nop
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d0fc      	beq.n	800ba3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba42:	bf00      	nop
 800ba44:	bf00      	nop
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	200002a8 	.word	0x200002a8
	...

0800ba60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba60:	4b07      	ldr	r3, [pc, #28]	; (800ba80 <pxCurrentTCBConst2>)
 800ba62:	6819      	ldr	r1, [r3, #0]
 800ba64:	6808      	ldr	r0, [r1, #0]
 800ba66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6a:	f380 8809 	msr	PSP, r0
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f04f 0000 	mov.w	r0, #0
 800ba76:	f380 8811 	msr	BASEPRI, r0
 800ba7a:	4770      	bx	lr
 800ba7c:	f3af 8000 	nop.w

0800ba80 <pxCurrentTCBConst2>:
 800ba80:	20009a78 	.word	0x20009a78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba84:	bf00      	nop
 800ba86:	bf00      	nop

0800ba88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba88:	4808      	ldr	r0, [pc, #32]	; (800baac <prvPortStartFirstTask+0x24>)
 800ba8a:	6800      	ldr	r0, [r0, #0]
 800ba8c:	6800      	ldr	r0, [r0, #0]
 800ba8e:	f380 8808 	msr	MSP, r0
 800ba92:	f04f 0000 	mov.w	r0, #0
 800ba96:	f380 8814 	msr	CONTROL, r0
 800ba9a:	b662      	cpsie	i
 800ba9c:	b661      	cpsie	f
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	df00      	svc	0
 800baa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800baaa:	bf00      	nop
 800baac:	e000ed08 	.word	0xe000ed08

0800bab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bab6:	4b46      	ldr	r3, [pc, #280]	; (800bbd0 <xPortStartScheduler+0x120>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a46      	ldr	r2, [pc, #280]	; (800bbd4 <xPortStartScheduler+0x124>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d10a      	bne.n	800bad6 <xPortStartScheduler+0x26>
	__asm volatile
 800bac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac4:	f383 8811 	msr	BASEPRI, r3
 800bac8:	f3bf 8f6f 	isb	sy
 800bacc:	f3bf 8f4f 	dsb	sy
 800bad0:	613b      	str	r3, [r7, #16]
}
 800bad2:	bf00      	nop
 800bad4:	e7fe      	b.n	800bad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bad6:	4b3e      	ldr	r3, [pc, #248]	; (800bbd0 <xPortStartScheduler+0x120>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a3f      	ldr	r2, [pc, #252]	; (800bbd8 <xPortStartScheduler+0x128>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d10a      	bne.n	800baf6 <xPortStartScheduler+0x46>
	__asm volatile
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	60fb      	str	r3, [r7, #12]
}
 800baf2:	bf00      	nop
 800baf4:	e7fe      	b.n	800baf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800baf6:	4b39      	ldr	r3, [pc, #228]	; (800bbdc <xPortStartScheduler+0x12c>)
 800baf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	22ff      	movs	r2, #255	; 0xff
 800bb06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb10:	78fb      	ldrb	r3, [r7, #3]
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	4b31      	ldr	r3, [pc, #196]	; (800bbe0 <xPortStartScheduler+0x130>)
 800bb1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb1e:	4b31      	ldr	r3, [pc, #196]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb20:	2207      	movs	r2, #7
 800bb22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb24:	e009      	b.n	800bb3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bb26:	4b2f      	ldr	r3, [pc, #188]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	4a2d      	ldr	r2, [pc, #180]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb30:	78fb      	ldrb	r3, [r7, #3]
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	005b      	lsls	r3, r3, #1
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb3a:	78fb      	ldrb	r3, [r7, #3]
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb42:	2b80      	cmp	r3, #128	; 0x80
 800bb44:	d0ef      	beq.n	800bb26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb46:	4b27      	ldr	r3, [pc, #156]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f1c3 0307 	rsb	r3, r3, #7
 800bb4e:	2b04      	cmp	r3, #4
 800bb50:	d00a      	beq.n	800bb68 <xPortStartScheduler+0xb8>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	60bb      	str	r3, [r7, #8]
}
 800bb64:	bf00      	nop
 800bb66:	e7fe      	b.n	800bb66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb68:	4b1e      	ldr	r3, [pc, #120]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	021b      	lsls	r3, r3, #8
 800bb6e:	4a1d      	ldr	r2, [pc, #116]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb72:	4b1c      	ldr	r3, [pc, #112]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb7a:	4a1a      	ldr	r2, [pc, #104]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb86:	4b18      	ldr	r3, [pc, #96]	; (800bbe8 <xPortStartScheduler+0x138>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a17      	ldr	r2, [pc, #92]	; (800bbe8 <xPortStartScheduler+0x138>)
 800bb8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb92:	4b15      	ldr	r3, [pc, #84]	; (800bbe8 <xPortStartScheduler+0x138>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a14      	ldr	r2, [pc, #80]	; (800bbe8 <xPortStartScheduler+0x138>)
 800bb98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb9e:	f000 f8dd 	bl	800bd5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bba2:	4b12      	ldr	r3, [pc, #72]	; (800bbec <xPortStartScheduler+0x13c>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bba8:	f000 f8fc 	bl	800bda4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bbac:	4b10      	ldr	r3, [pc, #64]	; (800bbf0 <xPortStartScheduler+0x140>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a0f      	ldr	r2, [pc, #60]	; (800bbf0 <xPortStartScheduler+0x140>)
 800bbb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bbb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bbb8:	f7ff ff66 	bl	800ba88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bbbc:	f7ff f846 	bl	800ac4c <vTaskSwitchContext>
	prvTaskExitError();
 800bbc0:	f7ff ff1c 	bl	800b9fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3718      	adds	r7, #24
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	e000ed00 	.word	0xe000ed00
 800bbd4:	410fc271 	.word	0x410fc271
 800bbd8:	410fc270 	.word	0x410fc270
 800bbdc:	e000e400 	.word	0xe000e400
 800bbe0:	2000a0a4 	.word	0x2000a0a4
 800bbe4:	2000a0a8 	.word	0x2000a0a8
 800bbe8:	e000ed20 	.word	0xe000ed20
 800bbec:	200002a8 	.word	0x200002a8
 800bbf0:	e000ef34 	.word	0xe000ef34

0800bbf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
	__asm volatile
 800bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfe:	f383 8811 	msr	BASEPRI, r3
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	607b      	str	r3, [r7, #4]
}
 800bc0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc0e:	4b0f      	ldr	r3, [pc, #60]	; (800bc4c <vPortEnterCritical+0x58>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3301      	adds	r3, #1
 800bc14:	4a0d      	ldr	r2, [pc, #52]	; (800bc4c <vPortEnterCritical+0x58>)
 800bc16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc18:	4b0c      	ldr	r3, [pc, #48]	; (800bc4c <vPortEnterCritical+0x58>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d10f      	bne.n	800bc40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc20:	4b0b      	ldr	r3, [pc, #44]	; (800bc50 <vPortEnterCritical+0x5c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00a      	beq.n	800bc40 <vPortEnterCritical+0x4c>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	603b      	str	r3, [r7, #0]
}
 800bc3c:	bf00      	nop
 800bc3e:	e7fe      	b.n	800bc3e <vPortEnterCritical+0x4a>
	}
}
 800bc40:	bf00      	nop
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	200002a8 	.word	0x200002a8
 800bc50:	e000ed04 	.word	0xe000ed04

0800bc54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc5a:	4b12      	ldr	r3, [pc, #72]	; (800bca4 <vPortExitCritical+0x50>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10a      	bne.n	800bc78 <vPortExitCritical+0x24>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	607b      	str	r3, [r7, #4]
}
 800bc74:	bf00      	nop
 800bc76:	e7fe      	b.n	800bc76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bc78:	4b0a      	ldr	r3, [pc, #40]	; (800bca4 <vPortExitCritical+0x50>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	4a09      	ldr	r2, [pc, #36]	; (800bca4 <vPortExitCritical+0x50>)
 800bc80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc82:	4b08      	ldr	r3, [pc, #32]	; (800bca4 <vPortExitCritical+0x50>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d105      	bne.n	800bc96 <vPortExitCritical+0x42>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	f383 8811 	msr	BASEPRI, r3
}
 800bc94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc96:	bf00      	nop
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	200002a8 	.word	0x200002a8
	...

0800bcb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bcb0:	f3ef 8009 	mrs	r0, PSP
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	4b15      	ldr	r3, [pc, #84]	; (800bd10 <pxCurrentTCBConst>)
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	f01e 0f10 	tst.w	lr, #16
 800bcc0:	bf08      	it	eq
 800bcc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bcc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcca:	6010      	str	r0, [r2, #0]
 800bccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bcd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bcd4:	f380 8811 	msr	BASEPRI, r0
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f7fe ffb4 	bl	800ac4c <vTaskSwitchContext>
 800bce4:	f04f 0000 	mov.w	r0, #0
 800bce8:	f380 8811 	msr	BASEPRI, r0
 800bcec:	bc09      	pop	{r0, r3}
 800bcee:	6819      	ldr	r1, [r3, #0]
 800bcf0:	6808      	ldr	r0, [r1, #0]
 800bcf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf6:	f01e 0f10 	tst.w	lr, #16
 800bcfa:	bf08      	it	eq
 800bcfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd00:	f380 8809 	msr	PSP, r0
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	f3af 8000 	nop.w

0800bd10 <pxCurrentTCBConst>:
 800bd10:	20009a78 	.word	0x20009a78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd14:	bf00      	nop
 800bd16:	bf00      	nop

0800bd18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	607b      	str	r3, [r7, #4]
}
 800bd30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd32:	f7fe fed1 	bl	800aad8 <xTaskIncrementTick>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d003      	beq.n	800bd44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd3c:	4b06      	ldr	r3, [pc, #24]	; (800bd58 <xPortSysTickHandler+0x40>)
 800bd3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	2300      	movs	r3, #0
 800bd46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	f383 8811 	msr	BASEPRI, r3
}
 800bd4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd50:	bf00      	nop
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	e000ed04 	.word	0xe000ed04

0800bd5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd60:	4b0b      	ldr	r3, [pc, #44]	; (800bd90 <vPortSetupTimerInterrupt+0x34>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd66:	4b0b      	ldr	r3, [pc, #44]	; (800bd94 <vPortSetupTimerInterrupt+0x38>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd6c:	4b0a      	ldr	r3, [pc, #40]	; (800bd98 <vPortSetupTimerInterrupt+0x3c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a0a      	ldr	r2, [pc, #40]	; (800bd9c <vPortSetupTimerInterrupt+0x40>)
 800bd72:	fba2 2303 	umull	r2, r3, r2, r3
 800bd76:	099b      	lsrs	r3, r3, #6
 800bd78:	4a09      	ldr	r2, [pc, #36]	; (800bda0 <vPortSetupTimerInterrupt+0x44>)
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd7e:	4b04      	ldr	r3, [pc, #16]	; (800bd90 <vPortSetupTimerInterrupt+0x34>)
 800bd80:	2207      	movs	r2, #7
 800bd82:	601a      	str	r2, [r3, #0]
}
 800bd84:	bf00      	nop
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	e000e010 	.word	0xe000e010
 800bd94:	e000e018 	.word	0xe000e018
 800bd98:	20000000 	.word	0x20000000
 800bd9c:	10624dd3 	.word	0x10624dd3
 800bda0:	e000e014 	.word	0xe000e014

0800bda4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bda4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bdb4 <vPortEnableVFP+0x10>
 800bda8:	6801      	ldr	r1, [r0, #0]
 800bdaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bdae:	6001      	str	r1, [r0, #0]
 800bdb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bdb2:	bf00      	nop
 800bdb4:	e000ed88 	.word	0xe000ed88

0800bdb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdbe:	f3ef 8305 	mrs	r3, IPSR
 800bdc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2b0f      	cmp	r3, #15
 800bdc8:	d914      	bls.n	800bdf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdca:	4a17      	ldr	r2, [pc, #92]	; (800be28 <vPortValidateInterruptPriority+0x70>)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	4413      	add	r3, r2
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bdd4:	4b15      	ldr	r3, [pc, #84]	; (800be2c <vPortValidateInterruptPriority+0x74>)
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	7afa      	ldrb	r2, [r7, #11]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d20a      	bcs.n	800bdf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde2:	f383 8811 	msr	BASEPRI, r3
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	f3bf 8f4f 	dsb	sy
 800bdee:	607b      	str	r3, [r7, #4]
}
 800bdf0:	bf00      	nop
 800bdf2:	e7fe      	b.n	800bdf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bdf4:	4b0e      	ldr	r3, [pc, #56]	; (800be30 <vPortValidateInterruptPriority+0x78>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bdfc:	4b0d      	ldr	r3, [pc, #52]	; (800be34 <vPortValidateInterruptPriority+0x7c>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	429a      	cmp	r2, r3
 800be02:	d90a      	bls.n	800be1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	603b      	str	r3, [r7, #0]
}
 800be16:	bf00      	nop
 800be18:	e7fe      	b.n	800be18 <vPortValidateInterruptPriority+0x60>
	}
 800be1a:	bf00      	nop
 800be1c:	3714      	adds	r7, #20
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	e000e3f0 	.word	0xe000e3f0
 800be2c:	2000a0a4 	.word	0x2000a0a4
 800be30:	e000ed0c 	.word	0xe000ed0c
 800be34:	2000a0a8 	.word	0x2000a0a8

0800be38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b08a      	sub	sp, #40	; 0x28
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be40:	2300      	movs	r3, #0
 800be42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be44:	f7fe fd7a 	bl	800a93c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be48:	4b5b      	ldr	r3, [pc, #364]	; (800bfb8 <pvPortMalloc+0x180>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d101      	bne.n	800be54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be50:	f000 f920 	bl	800c094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be54:	4b59      	ldr	r3, [pc, #356]	; (800bfbc <pvPortMalloc+0x184>)
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4013      	ands	r3, r2
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f040 8093 	bne.w	800bf88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d01d      	beq.n	800bea4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800be68:	2208      	movs	r2, #8
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4413      	add	r3, r2
 800be6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f003 0307 	and.w	r3, r3, #7
 800be76:	2b00      	cmp	r3, #0
 800be78:	d014      	beq.n	800bea4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f023 0307 	bic.w	r3, r3, #7
 800be80:	3308      	adds	r3, #8
 800be82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f003 0307 	and.w	r3, r3, #7
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00a      	beq.n	800bea4 <pvPortMalloc+0x6c>
	__asm volatile
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	617b      	str	r3, [r7, #20]
}
 800bea0:	bf00      	nop
 800bea2:	e7fe      	b.n	800bea2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d06e      	beq.n	800bf88 <pvPortMalloc+0x150>
 800beaa:	4b45      	ldr	r3, [pc, #276]	; (800bfc0 <pvPortMalloc+0x188>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d869      	bhi.n	800bf88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800beb4:	4b43      	ldr	r3, [pc, #268]	; (800bfc4 <pvPortMalloc+0x18c>)
 800beb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800beb8:	4b42      	ldr	r3, [pc, #264]	; (800bfc4 <pvPortMalloc+0x18c>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bebe:	e004      	b.n	800beca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d903      	bls.n	800bedc <pvPortMalloc+0xa4>
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1f1      	bne.n	800bec0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bedc:	4b36      	ldr	r3, [pc, #216]	; (800bfb8 <pvPortMalloc+0x180>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d050      	beq.n	800bf88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bee6:	6a3b      	ldr	r3, [r7, #32]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2208      	movs	r2, #8
 800beec:	4413      	add	r3, r2
 800beee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	6a3b      	ldr	r3, [r7, #32]
 800bef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befa:	685a      	ldr	r2, [r3, #4]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	1ad2      	subs	r2, r2, r3
 800bf00:	2308      	movs	r3, #8
 800bf02:	005b      	lsls	r3, r3, #1
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d91f      	bls.n	800bf48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	f003 0307 	and.w	r3, r3, #7
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00a      	beq.n	800bf30 <pvPortMalloc+0xf8>
	__asm volatile
 800bf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1e:	f383 8811 	msr	BASEPRI, r3
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	613b      	str	r3, [r7, #16]
}
 800bf2c:	bf00      	nop
 800bf2e:	e7fe      	b.n	800bf2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf32:	685a      	ldr	r2, [r3, #4]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	1ad2      	subs	r2, r2, r3
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf42:	69b8      	ldr	r0, [r7, #24]
 800bf44:	f000 f908 	bl	800c158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf48:	4b1d      	ldr	r3, [pc, #116]	; (800bfc0 <pvPortMalloc+0x188>)
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	4a1b      	ldr	r2, [pc, #108]	; (800bfc0 <pvPortMalloc+0x188>)
 800bf54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf56:	4b1a      	ldr	r3, [pc, #104]	; (800bfc0 <pvPortMalloc+0x188>)
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	4b1b      	ldr	r3, [pc, #108]	; (800bfc8 <pvPortMalloc+0x190>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d203      	bcs.n	800bf6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf62:	4b17      	ldr	r3, [pc, #92]	; (800bfc0 <pvPortMalloc+0x188>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a18      	ldr	r2, [pc, #96]	; (800bfc8 <pvPortMalloc+0x190>)
 800bf68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6c:	685a      	ldr	r2, [r3, #4]
 800bf6e:	4b13      	ldr	r3, [pc, #76]	; (800bfbc <pvPortMalloc+0x184>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	431a      	orrs	r2, r3
 800bf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bf7e:	4b13      	ldr	r3, [pc, #76]	; (800bfcc <pvPortMalloc+0x194>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	3301      	adds	r3, #1
 800bf84:	4a11      	ldr	r2, [pc, #68]	; (800bfcc <pvPortMalloc+0x194>)
 800bf86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf88:	f7fe fce6 	bl	800a958 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	f003 0307 	and.w	r3, r3, #7
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00a      	beq.n	800bfac <pvPortMalloc+0x174>
	__asm volatile
 800bf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9a:	f383 8811 	msr	BASEPRI, r3
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	60fb      	str	r3, [r7, #12]
}
 800bfa8:	bf00      	nop
 800bfaa:	e7fe      	b.n	800bfaa <pvPortMalloc+0x172>
	return pvReturn;
 800bfac:	69fb      	ldr	r3, [r7, #28]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3728      	adds	r7, #40	; 0x28
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	2000dcb4 	.word	0x2000dcb4
 800bfbc:	2000dcc8 	.word	0x2000dcc8
 800bfc0:	2000dcb8 	.word	0x2000dcb8
 800bfc4:	2000dcac 	.word	0x2000dcac
 800bfc8:	2000dcbc 	.word	0x2000dcbc
 800bfcc:	2000dcc0 	.word	0x2000dcc0

0800bfd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d04d      	beq.n	800c07e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bfe2:	2308      	movs	r3, #8
 800bfe4:	425b      	negs	r3, r3
 800bfe6:	697a      	ldr	r2, [r7, #20]
 800bfe8:	4413      	add	r3, r2
 800bfea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	685a      	ldr	r2, [r3, #4]
 800bff4:	4b24      	ldr	r3, [pc, #144]	; (800c088 <vPortFree+0xb8>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4013      	ands	r3, r2
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d10a      	bne.n	800c014 <vPortFree+0x44>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	60fb      	str	r3, [r7, #12]
}
 800c010:	bf00      	nop
 800c012:	e7fe      	b.n	800c012 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00a      	beq.n	800c032 <vPortFree+0x62>
	__asm volatile
 800c01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	60bb      	str	r3, [r7, #8]
}
 800c02e:	bf00      	nop
 800c030:	e7fe      	b.n	800c030 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	685a      	ldr	r2, [r3, #4]
 800c036:	4b14      	ldr	r3, [pc, #80]	; (800c088 <vPortFree+0xb8>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4013      	ands	r3, r2
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d01e      	beq.n	800c07e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d11a      	bne.n	800c07e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	685a      	ldr	r2, [r3, #4]
 800c04c:	4b0e      	ldr	r3, [pc, #56]	; (800c088 <vPortFree+0xb8>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	43db      	mvns	r3, r3
 800c052:	401a      	ands	r2, r3
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c058:	f7fe fc70 	bl	800a93c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	685a      	ldr	r2, [r3, #4]
 800c060:	4b0a      	ldr	r3, [pc, #40]	; (800c08c <vPortFree+0xbc>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4413      	add	r3, r2
 800c066:	4a09      	ldr	r2, [pc, #36]	; (800c08c <vPortFree+0xbc>)
 800c068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c06a:	6938      	ldr	r0, [r7, #16]
 800c06c:	f000 f874 	bl	800c158 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c070:	4b07      	ldr	r3, [pc, #28]	; (800c090 <vPortFree+0xc0>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	3301      	adds	r3, #1
 800c076:	4a06      	ldr	r2, [pc, #24]	; (800c090 <vPortFree+0xc0>)
 800c078:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c07a:	f7fe fc6d 	bl	800a958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c07e:	bf00      	nop
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	2000dcc8 	.word	0x2000dcc8
 800c08c:	2000dcb8 	.word	0x2000dcb8
 800c090:	2000dcc4 	.word	0x2000dcc4

0800c094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c09a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c09e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c0a0:	4b27      	ldr	r3, [pc, #156]	; (800c140 <prvHeapInit+0xac>)
 800c0a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f003 0307 	and.w	r3, r3, #7
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00c      	beq.n	800c0c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	3307      	adds	r3, #7
 800c0b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f023 0307 	bic.w	r3, r3, #7
 800c0ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	4a1f      	ldr	r2, [pc, #124]	; (800c140 <prvHeapInit+0xac>)
 800c0c4:	4413      	add	r3, r2
 800c0c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0cc:	4a1d      	ldr	r2, [pc, #116]	; (800c144 <prvHeapInit+0xb0>)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c0d2:	4b1c      	ldr	r3, [pc, #112]	; (800c144 <prvHeapInit+0xb0>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	68ba      	ldr	r2, [r7, #8]
 800c0dc:	4413      	add	r3, r2
 800c0de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c0e0:	2208      	movs	r2, #8
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	1a9b      	subs	r3, r3, r2
 800c0e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f023 0307 	bic.w	r3, r3, #7
 800c0ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	4a15      	ldr	r2, [pc, #84]	; (800c148 <prvHeapInit+0xb4>)
 800c0f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c0f6:	4b14      	ldr	r3, [pc, #80]	; (800c148 <prvHeapInit+0xb4>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c0fe:	4b12      	ldr	r3, [pc, #72]	; (800c148 <prvHeapInit+0xb4>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2200      	movs	r2, #0
 800c104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	1ad2      	subs	r2, r2, r3
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c114:	4b0c      	ldr	r3, [pc, #48]	; (800c148 <prvHeapInit+0xb4>)
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	4a0a      	ldr	r2, [pc, #40]	; (800c14c <prvHeapInit+0xb8>)
 800c122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	4a09      	ldr	r2, [pc, #36]	; (800c150 <prvHeapInit+0xbc>)
 800c12a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c12c:	4b09      	ldr	r3, [pc, #36]	; (800c154 <prvHeapInit+0xc0>)
 800c12e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c132:	601a      	str	r2, [r3, #0]
}
 800c134:	bf00      	nop
 800c136:	3714      	adds	r7, #20
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	2000a0ac 	.word	0x2000a0ac
 800c144:	2000dcac 	.word	0x2000dcac
 800c148:	2000dcb4 	.word	0x2000dcb4
 800c14c:	2000dcbc 	.word	0x2000dcbc
 800c150:	2000dcb8 	.word	0x2000dcb8
 800c154:	2000dcc8 	.word	0x2000dcc8

0800c158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c160:	4b28      	ldr	r3, [pc, #160]	; (800c204 <prvInsertBlockIntoFreeList+0xac>)
 800c162:	60fb      	str	r3, [r7, #12]
 800c164:	e002      	b.n	800c16c <prvInsertBlockIntoFreeList+0x14>
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	60fb      	str	r3, [r7, #12]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	429a      	cmp	r2, r3
 800c174:	d8f7      	bhi.n	800c166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	68ba      	ldr	r2, [r7, #8]
 800c180:	4413      	add	r3, r2
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	429a      	cmp	r2, r3
 800c186:	d108      	bne.n	800c19a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	441a      	add	r2, r3
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	441a      	add	r2, r3
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d118      	bne.n	800c1e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	4b15      	ldr	r3, [pc, #84]	; (800c208 <prvInsertBlockIntoFreeList+0xb0>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d00d      	beq.n	800c1d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	685a      	ldr	r2, [r3, #4]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	441a      	add	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	e008      	b.n	800c1e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c1d6:	4b0c      	ldr	r3, [pc, #48]	; (800c208 <prvInsertBlockIntoFreeList+0xb0>)
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	601a      	str	r2, [r3, #0]
 800c1de:	e003      	b.n	800c1e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d002      	beq.n	800c1f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1f6:	bf00      	nop
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	2000dcac 	.word	0x2000dcac
 800c208:	2000dcb4 	.word	0x2000dcb4

0800c20c <std>:
 800c20c:	2300      	movs	r3, #0
 800c20e:	b510      	push	{r4, lr}
 800c210:	4604      	mov	r4, r0
 800c212:	e9c0 3300 	strd	r3, r3, [r0]
 800c216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c21a:	6083      	str	r3, [r0, #8]
 800c21c:	8181      	strh	r1, [r0, #12]
 800c21e:	6643      	str	r3, [r0, #100]	; 0x64
 800c220:	81c2      	strh	r2, [r0, #14]
 800c222:	6183      	str	r3, [r0, #24]
 800c224:	4619      	mov	r1, r3
 800c226:	2208      	movs	r2, #8
 800c228:	305c      	adds	r0, #92	; 0x5c
 800c22a:	f000 f942 	bl	800c4b2 <memset>
 800c22e:	4b0d      	ldr	r3, [pc, #52]	; (800c264 <std+0x58>)
 800c230:	6263      	str	r3, [r4, #36]	; 0x24
 800c232:	4b0d      	ldr	r3, [pc, #52]	; (800c268 <std+0x5c>)
 800c234:	62a3      	str	r3, [r4, #40]	; 0x28
 800c236:	4b0d      	ldr	r3, [pc, #52]	; (800c26c <std+0x60>)
 800c238:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c23a:	4b0d      	ldr	r3, [pc, #52]	; (800c270 <std+0x64>)
 800c23c:	6323      	str	r3, [r4, #48]	; 0x30
 800c23e:	4b0d      	ldr	r3, [pc, #52]	; (800c274 <std+0x68>)
 800c240:	6224      	str	r4, [r4, #32]
 800c242:	429c      	cmp	r4, r3
 800c244:	d006      	beq.n	800c254 <std+0x48>
 800c246:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c24a:	4294      	cmp	r4, r2
 800c24c:	d002      	beq.n	800c254 <std+0x48>
 800c24e:	33d0      	adds	r3, #208	; 0xd0
 800c250:	429c      	cmp	r4, r3
 800c252:	d105      	bne.n	800c260 <std+0x54>
 800c254:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c25c:	f000 b9f8 	b.w	800c650 <__retarget_lock_init_recursive>
 800c260:	bd10      	pop	{r4, pc}
 800c262:	bf00      	nop
 800c264:	0800c42d 	.word	0x0800c42d
 800c268:	0800c44f 	.word	0x0800c44f
 800c26c:	0800c487 	.word	0x0800c487
 800c270:	0800c4ab 	.word	0x0800c4ab
 800c274:	2000dccc 	.word	0x2000dccc

0800c278 <stdio_exit_handler>:
 800c278:	4a02      	ldr	r2, [pc, #8]	; (800c284 <stdio_exit_handler+0xc>)
 800c27a:	4903      	ldr	r1, [pc, #12]	; (800c288 <stdio_exit_handler+0x10>)
 800c27c:	4803      	ldr	r0, [pc, #12]	; (800c28c <stdio_exit_handler+0x14>)
 800c27e:	f000 b869 	b.w	800c354 <_fwalk_sglue>
 800c282:	bf00      	nop
 800c284:	200002ac 	.word	0x200002ac
 800c288:	0800d1c9 	.word	0x0800d1c9
 800c28c:	200002b8 	.word	0x200002b8

0800c290 <cleanup_stdio>:
 800c290:	6841      	ldr	r1, [r0, #4]
 800c292:	4b0c      	ldr	r3, [pc, #48]	; (800c2c4 <cleanup_stdio+0x34>)
 800c294:	4299      	cmp	r1, r3
 800c296:	b510      	push	{r4, lr}
 800c298:	4604      	mov	r4, r0
 800c29a:	d001      	beq.n	800c2a0 <cleanup_stdio+0x10>
 800c29c:	f000 ff94 	bl	800d1c8 <_fflush_r>
 800c2a0:	68a1      	ldr	r1, [r4, #8]
 800c2a2:	4b09      	ldr	r3, [pc, #36]	; (800c2c8 <cleanup_stdio+0x38>)
 800c2a4:	4299      	cmp	r1, r3
 800c2a6:	d002      	beq.n	800c2ae <cleanup_stdio+0x1e>
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f000 ff8d 	bl	800d1c8 <_fflush_r>
 800c2ae:	68e1      	ldr	r1, [r4, #12]
 800c2b0:	4b06      	ldr	r3, [pc, #24]	; (800c2cc <cleanup_stdio+0x3c>)
 800c2b2:	4299      	cmp	r1, r3
 800c2b4:	d004      	beq.n	800c2c0 <cleanup_stdio+0x30>
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2bc:	f000 bf84 	b.w	800d1c8 <_fflush_r>
 800c2c0:	bd10      	pop	{r4, pc}
 800c2c2:	bf00      	nop
 800c2c4:	2000dccc 	.word	0x2000dccc
 800c2c8:	2000dd34 	.word	0x2000dd34
 800c2cc:	2000dd9c 	.word	0x2000dd9c

0800c2d0 <global_stdio_init.part.0>:
 800c2d0:	b510      	push	{r4, lr}
 800c2d2:	4b0b      	ldr	r3, [pc, #44]	; (800c300 <global_stdio_init.part.0+0x30>)
 800c2d4:	4c0b      	ldr	r4, [pc, #44]	; (800c304 <global_stdio_init.part.0+0x34>)
 800c2d6:	4a0c      	ldr	r2, [pc, #48]	; (800c308 <global_stdio_init.part.0+0x38>)
 800c2d8:	601a      	str	r2, [r3, #0]
 800c2da:	4620      	mov	r0, r4
 800c2dc:	2200      	movs	r2, #0
 800c2de:	2104      	movs	r1, #4
 800c2e0:	f7ff ff94 	bl	800c20c <std>
 800c2e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	2109      	movs	r1, #9
 800c2ec:	f7ff ff8e 	bl	800c20c <std>
 800c2f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c2f4:	2202      	movs	r2, #2
 800c2f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2fa:	2112      	movs	r1, #18
 800c2fc:	f7ff bf86 	b.w	800c20c <std>
 800c300:	2000de04 	.word	0x2000de04
 800c304:	2000dccc 	.word	0x2000dccc
 800c308:	0800c279 	.word	0x0800c279

0800c30c <__sfp_lock_acquire>:
 800c30c:	4801      	ldr	r0, [pc, #4]	; (800c314 <__sfp_lock_acquire+0x8>)
 800c30e:	f000 b9a0 	b.w	800c652 <__retarget_lock_acquire_recursive>
 800c312:	bf00      	nop
 800c314:	2000de0d 	.word	0x2000de0d

0800c318 <__sfp_lock_release>:
 800c318:	4801      	ldr	r0, [pc, #4]	; (800c320 <__sfp_lock_release+0x8>)
 800c31a:	f000 b99b 	b.w	800c654 <__retarget_lock_release_recursive>
 800c31e:	bf00      	nop
 800c320:	2000de0d 	.word	0x2000de0d

0800c324 <__sinit>:
 800c324:	b510      	push	{r4, lr}
 800c326:	4604      	mov	r4, r0
 800c328:	f7ff fff0 	bl	800c30c <__sfp_lock_acquire>
 800c32c:	6a23      	ldr	r3, [r4, #32]
 800c32e:	b11b      	cbz	r3, 800c338 <__sinit+0x14>
 800c330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c334:	f7ff bff0 	b.w	800c318 <__sfp_lock_release>
 800c338:	4b04      	ldr	r3, [pc, #16]	; (800c34c <__sinit+0x28>)
 800c33a:	6223      	str	r3, [r4, #32]
 800c33c:	4b04      	ldr	r3, [pc, #16]	; (800c350 <__sinit+0x2c>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1f5      	bne.n	800c330 <__sinit+0xc>
 800c344:	f7ff ffc4 	bl	800c2d0 <global_stdio_init.part.0>
 800c348:	e7f2      	b.n	800c330 <__sinit+0xc>
 800c34a:	bf00      	nop
 800c34c:	0800c291 	.word	0x0800c291
 800c350:	2000de04 	.word	0x2000de04

0800c354 <_fwalk_sglue>:
 800c354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c358:	4607      	mov	r7, r0
 800c35a:	4688      	mov	r8, r1
 800c35c:	4614      	mov	r4, r2
 800c35e:	2600      	movs	r6, #0
 800c360:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c364:	f1b9 0901 	subs.w	r9, r9, #1
 800c368:	d505      	bpl.n	800c376 <_fwalk_sglue+0x22>
 800c36a:	6824      	ldr	r4, [r4, #0]
 800c36c:	2c00      	cmp	r4, #0
 800c36e:	d1f7      	bne.n	800c360 <_fwalk_sglue+0xc>
 800c370:	4630      	mov	r0, r6
 800c372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c376:	89ab      	ldrh	r3, [r5, #12]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d907      	bls.n	800c38c <_fwalk_sglue+0x38>
 800c37c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c380:	3301      	adds	r3, #1
 800c382:	d003      	beq.n	800c38c <_fwalk_sglue+0x38>
 800c384:	4629      	mov	r1, r5
 800c386:	4638      	mov	r0, r7
 800c388:	47c0      	blx	r8
 800c38a:	4306      	orrs	r6, r0
 800c38c:	3568      	adds	r5, #104	; 0x68
 800c38e:	e7e9      	b.n	800c364 <_fwalk_sglue+0x10>

0800c390 <iprintf>:
 800c390:	b40f      	push	{r0, r1, r2, r3}
 800c392:	b507      	push	{r0, r1, r2, lr}
 800c394:	4906      	ldr	r1, [pc, #24]	; (800c3b0 <iprintf+0x20>)
 800c396:	ab04      	add	r3, sp, #16
 800c398:	6808      	ldr	r0, [r1, #0]
 800c39a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c39e:	6881      	ldr	r1, [r0, #8]
 800c3a0:	9301      	str	r3, [sp, #4]
 800c3a2:	f000 fbe1 	bl	800cb68 <_vfiprintf_r>
 800c3a6:	b003      	add	sp, #12
 800c3a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3ac:	b004      	add	sp, #16
 800c3ae:	4770      	bx	lr
 800c3b0:	20000304 	.word	0x20000304

0800c3b4 <putchar>:
 800c3b4:	4b02      	ldr	r3, [pc, #8]	; (800c3c0 <putchar+0xc>)
 800c3b6:	4601      	mov	r1, r0
 800c3b8:	6818      	ldr	r0, [r3, #0]
 800c3ba:	6882      	ldr	r2, [r0, #8]
 800c3bc:	f000 bf2c 	b.w	800d218 <_putc_r>
 800c3c0:	20000304 	.word	0x20000304

0800c3c4 <sniprintf>:
 800c3c4:	b40c      	push	{r2, r3}
 800c3c6:	b530      	push	{r4, r5, lr}
 800c3c8:	4b17      	ldr	r3, [pc, #92]	; (800c428 <sniprintf+0x64>)
 800c3ca:	1e0c      	subs	r4, r1, #0
 800c3cc:	681d      	ldr	r5, [r3, #0]
 800c3ce:	b09d      	sub	sp, #116	; 0x74
 800c3d0:	da08      	bge.n	800c3e4 <sniprintf+0x20>
 800c3d2:	238b      	movs	r3, #139	; 0x8b
 800c3d4:	602b      	str	r3, [r5, #0]
 800c3d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3da:	b01d      	add	sp, #116	; 0x74
 800c3dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3e0:	b002      	add	sp, #8
 800c3e2:	4770      	bx	lr
 800c3e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c3e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c3ec:	bf14      	ite	ne
 800c3ee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c3f2:	4623      	moveq	r3, r4
 800c3f4:	9304      	str	r3, [sp, #16]
 800c3f6:	9307      	str	r3, [sp, #28]
 800c3f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3fc:	9002      	str	r0, [sp, #8]
 800c3fe:	9006      	str	r0, [sp, #24]
 800c400:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c404:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c406:	ab21      	add	r3, sp, #132	; 0x84
 800c408:	a902      	add	r1, sp, #8
 800c40a:	4628      	mov	r0, r5
 800c40c:	9301      	str	r3, [sp, #4]
 800c40e:	f000 fa83 	bl	800c918 <_svfiprintf_r>
 800c412:	1c43      	adds	r3, r0, #1
 800c414:	bfbc      	itt	lt
 800c416:	238b      	movlt	r3, #139	; 0x8b
 800c418:	602b      	strlt	r3, [r5, #0]
 800c41a:	2c00      	cmp	r4, #0
 800c41c:	d0dd      	beq.n	800c3da <sniprintf+0x16>
 800c41e:	9b02      	ldr	r3, [sp, #8]
 800c420:	2200      	movs	r2, #0
 800c422:	701a      	strb	r2, [r3, #0]
 800c424:	e7d9      	b.n	800c3da <sniprintf+0x16>
 800c426:	bf00      	nop
 800c428:	20000304 	.word	0x20000304

0800c42c <__sread>:
 800c42c:	b510      	push	{r4, lr}
 800c42e:	460c      	mov	r4, r1
 800c430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c434:	f000 f8be 	bl	800c5b4 <_read_r>
 800c438:	2800      	cmp	r0, #0
 800c43a:	bfab      	itete	ge
 800c43c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c43e:	89a3      	ldrhlt	r3, [r4, #12]
 800c440:	181b      	addge	r3, r3, r0
 800c442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c446:	bfac      	ite	ge
 800c448:	6563      	strge	r3, [r4, #84]	; 0x54
 800c44a:	81a3      	strhlt	r3, [r4, #12]
 800c44c:	bd10      	pop	{r4, pc}

0800c44e <__swrite>:
 800c44e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c452:	461f      	mov	r7, r3
 800c454:	898b      	ldrh	r3, [r1, #12]
 800c456:	05db      	lsls	r3, r3, #23
 800c458:	4605      	mov	r5, r0
 800c45a:	460c      	mov	r4, r1
 800c45c:	4616      	mov	r6, r2
 800c45e:	d505      	bpl.n	800c46c <__swrite+0x1e>
 800c460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c464:	2302      	movs	r3, #2
 800c466:	2200      	movs	r2, #0
 800c468:	f000 f892 	bl	800c590 <_lseek_r>
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c476:	81a3      	strh	r3, [r4, #12]
 800c478:	4632      	mov	r2, r6
 800c47a:	463b      	mov	r3, r7
 800c47c:	4628      	mov	r0, r5
 800c47e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c482:	f000 b8a9 	b.w	800c5d8 <_write_r>

0800c486 <__sseek>:
 800c486:	b510      	push	{r4, lr}
 800c488:	460c      	mov	r4, r1
 800c48a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c48e:	f000 f87f 	bl	800c590 <_lseek_r>
 800c492:	1c43      	adds	r3, r0, #1
 800c494:	89a3      	ldrh	r3, [r4, #12]
 800c496:	bf15      	itete	ne
 800c498:	6560      	strne	r0, [r4, #84]	; 0x54
 800c49a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c49e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4a2:	81a3      	strheq	r3, [r4, #12]
 800c4a4:	bf18      	it	ne
 800c4a6:	81a3      	strhne	r3, [r4, #12]
 800c4a8:	bd10      	pop	{r4, pc}

0800c4aa <__sclose>:
 800c4aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4ae:	f000 b809 	b.w	800c4c4 <_close_r>

0800c4b2 <memset>:
 800c4b2:	4402      	add	r2, r0
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d100      	bne.n	800c4bc <memset+0xa>
 800c4ba:	4770      	bx	lr
 800c4bc:	f803 1b01 	strb.w	r1, [r3], #1
 800c4c0:	e7f9      	b.n	800c4b6 <memset+0x4>
	...

0800c4c4 <_close_r>:
 800c4c4:	b538      	push	{r3, r4, r5, lr}
 800c4c6:	4d06      	ldr	r5, [pc, #24]	; (800c4e0 <_close_r+0x1c>)
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	4608      	mov	r0, r1
 800c4ce:	602b      	str	r3, [r5, #0]
 800c4d0:	f7f4 fa71 	bl	80009b6 <_close>
 800c4d4:	1c43      	adds	r3, r0, #1
 800c4d6:	d102      	bne.n	800c4de <_close_r+0x1a>
 800c4d8:	682b      	ldr	r3, [r5, #0]
 800c4da:	b103      	cbz	r3, 800c4de <_close_r+0x1a>
 800c4dc:	6023      	str	r3, [r4, #0]
 800c4de:	bd38      	pop	{r3, r4, r5, pc}
 800c4e0:	2000de08 	.word	0x2000de08

0800c4e4 <_reclaim_reent>:
 800c4e4:	4b29      	ldr	r3, [pc, #164]	; (800c58c <_reclaim_reent+0xa8>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4283      	cmp	r3, r0
 800c4ea:	b570      	push	{r4, r5, r6, lr}
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	d04b      	beq.n	800c588 <_reclaim_reent+0xa4>
 800c4f0:	69c3      	ldr	r3, [r0, #28]
 800c4f2:	b143      	cbz	r3, 800c506 <_reclaim_reent+0x22>
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d144      	bne.n	800c584 <_reclaim_reent+0xa0>
 800c4fa:	69e3      	ldr	r3, [r4, #28]
 800c4fc:	6819      	ldr	r1, [r3, #0]
 800c4fe:	b111      	cbz	r1, 800c506 <_reclaim_reent+0x22>
 800c500:	4620      	mov	r0, r4
 800c502:	f000 f8b7 	bl	800c674 <_free_r>
 800c506:	6961      	ldr	r1, [r4, #20]
 800c508:	b111      	cbz	r1, 800c510 <_reclaim_reent+0x2c>
 800c50a:	4620      	mov	r0, r4
 800c50c:	f000 f8b2 	bl	800c674 <_free_r>
 800c510:	69e1      	ldr	r1, [r4, #28]
 800c512:	b111      	cbz	r1, 800c51a <_reclaim_reent+0x36>
 800c514:	4620      	mov	r0, r4
 800c516:	f000 f8ad 	bl	800c674 <_free_r>
 800c51a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c51c:	b111      	cbz	r1, 800c524 <_reclaim_reent+0x40>
 800c51e:	4620      	mov	r0, r4
 800c520:	f000 f8a8 	bl	800c674 <_free_r>
 800c524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c526:	b111      	cbz	r1, 800c52e <_reclaim_reent+0x4a>
 800c528:	4620      	mov	r0, r4
 800c52a:	f000 f8a3 	bl	800c674 <_free_r>
 800c52e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c530:	b111      	cbz	r1, 800c538 <_reclaim_reent+0x54>
 800c532:	4620      	mov	r0, r4
 800c534:	f000 f89e 	bl	800c674 <_free_r>
 800c538:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c53a:	b111      	cbz	r1, 800c542 <_reclaim_reent+0x5e>
 800c53c:	4620      	mov	r0, r4
 800c53e:	f000 f899 	bl	800c674 <_free_r>
 800c542:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c544:	b111      	cbz	r1, 800c54c <_reclaim_reent+0x68>
 800c546:	4620      	mov	r0, r4
 800c548:	f000 f894 	bl	800c674 <_free_r>
 800c54c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c54e:	b111      	cbz	r1, 800c556 <_reclaim_reent+0x72>
 800c550:	4620      	mov	r0, r4
 800c552:	f000 f88f 	bl	800c674 <_free_r>
 800c556:	6a23      	ldr	r3, [r4, #32]
 800c558:	b1b3      	cbz	r3, 800c588 <_reclaim_reent+0xa4>
 800c55a:	4620      	mov	r0, r4
 800c55c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c560:	4718      	bx	r3
 800c562:	5949      	ldr	r1, [r1, r5]
 800c564:	b941      	cbnz	r1, 800c578 <_reclaim_reent+0x94>
 800c566:	3504      	adds	r5, #4
 800c568:	69e3      	ldr	r3, [r4, #28]
 800c56a:	2d80      	cmp	r5, #128	; 0x80
 800c56c:	68d9      	ldr	r1, [r3, #12]
 800c56e:	d1f8      	bne.n	800c562 <_reclaim_reent+0x7e>
 800c570:	4620      	mov	r0, r4
 800c572:	f000 f87f 	bl	800c674 <_free_r>
 800c576:	e7c0      	b.n	800c4fa <_reclaim_reent+0x16>
 800c578:	680e      	ldr	r6, [r1, #0]
 800c57a:	4620      	mov	r0, r4
 800c57c:	f000 f87a 	bl	800c674 <_free_r>
 800c580:	4631      	mov	r1, r6
 800c582:	e7ef      	b.n	800c564 <_reclaim_reent+0x80>
 800c584:	2500      	movs	r5, #0
 800c586:	e7ef      	b.n	800c568 <_reclaim_reent+0x84>
 800c588:	bd70      	pop	{r4, r5, r6, pc}
 800c58a:	bf00      	nop
 800c58c:	20000304 	.word	0x20000304

0800c590 <_lseek_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	4d07      	ldr	r5, [pc, #28]	; (800c5b0 <_lseek_r+0x20>)
 800c594:	4604      	mov	r4, r0
 800c596:	4608      	mov	r0, r1
 800c598:	4611      	mov	r1, r2
 800c59a:	2200      	movs	r2, #0
 800c59c:	602a      	str	r2, [r5, #0]
 800c59e:	461a      	mov	r2, r3
 800c5a0:	f7f4 fa30 	bl	8000a04 <_lseek>
 800c5a4:	1c43      	adds	r3, r0, #1
 800c5a6:	d102      	bne.n	800c5ae <_lseek_r+0x1e>
 800c5a8:	682b      	ldr	r3, [r5, #0]
 800c5aa:	b103      	cbz	r3, 800c5ae <_lseek_r+0x1e>
 800c5ac:	6023      	str	r3, [r4, #0]
 800c5ae:	bd38      	pop	{r3, r4, r5, pc}
 800c5b0:	2000de08 	.word	0x2000de08

0800c5b4 <_read_r>:
 800c5b4:	b538      	push	{r3, r4, r5, lr}
 800c5b6:	4d07      	ldr	r5, [pc, #28]	; (800c5d4 <_read_r+0x20>)
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	4608      	mov	r0, r1
 800c5bc:	4611      	mov	r1, r2
 800c5be:	2200      	movs	r2, #0
 800c5c0:	602a      	str	r2, [r5, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	f7f4 f9da 	bl	800097c <_read>
 800c5c8:	1c43      	adds	r3, r0, #1
 800c5ca:	d102      	bne.n	800c5d2 <_read_r+0x1e>
 800c5cc:	682b      	ldr	r3, [r5, #0]
 800c5ce:	b103      	cbz	r3, 800c5d2 <_read_r+0x1e>
 800c5d0:	6023      	str	r3, [r4, #0]
 800c5d2:	bd38      	pop	{r3, r4, r5, pc}
 800c5d4:	2000de08 	.word	0x2000de08

0800c5d8 <_write_r>:
 800c5d8:	b538      	push	{r3, r4, r5, lr}
 800c5da:	4d07      	ldr	r5, [pc, #28]	; (800c5f8 <_write_r+0x20>)
 800c5dc:	4604      	mov	r4, r0
 800c5de:	4608      	mov	r0, r1
 800c5e0:	4611      	mov	r1, r2
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	602a      	str	r2, [r5, #0]
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	f7f4 f85e 	bl	80006a8 <_write>
 800c5ec:	1c43      	adds	r3, r0, #1
 800c5ee:	d102      	bne.n	800c5f6 <_write_r+0x1e>
 800c5f0:	682b      	ldr	r3, [r5, #0]
 800c5f2:	b103      	cbz	r3, 800c5f6 <_write_r+0x1e>
 800c5f4:	6023      	str	r3, [r4, #0]
 800c5f6:	bd38      	pop	{r3, r4, r5, pc}
 800c5f8:	2000de08 	.word	0x2000de08

0800c5fc <__errno>:
 800c5fc:	4b01      	ldr	r3, [pc, #4]	; (800c604 <__errno+0x8>)
 800c5fe:	6818      	ldr	r0, [r3, #0]
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	20000304 	.word	0x20000304

0800c608 <__libc_init_array>:
 800c608:	b570      	push	{r4, r5, r6, lr}
 800c60a:	4d0d      	ldr	r5, [pc, #52]	; (800c640 <__libc_init_array+0x38>)
 800c60c:	4c0d      	ldr	r4, [pc, #52]	; (800c644 <__libc_init_array+0x3c>)
 800c60e:	1b64      	subs	r4, r4, r5
 800c610:	10a4      	asrs	r4, r4, #2
 800c612:	2600      	movs	r6, #0
 800c614:	42a6      	cmp	r6, r4
 800c616:	d109      	bne.n	800c62c <__libc_init_array+0x24>
 800c618:	4d0b      	ldr	r5, [pc, #44]	; (800c648 <__libc_init_array+0x40>)
 800c61a:	4c0c      	ldr	r4, [pc, #48]	; (800c64c <__libc_init_array+0x44>)
 800c61c:	f000 ffac 	bl	800d578 <_init>
 800c620:	1b64      	subs	r4, r4, r5
 800c622:	10a4      	asrs	r4, r4, #2
 800c624:	2600      	movs	r6, #0
 800c626:	42a6      	cmp	r6, r4
 800c628:	d105      	bne.n	800c636 <__libc_init_array+0x2e>
 800c62a:	bd70      	pop	{r4, r5, r6, pc}
 800c62c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c630:	4798      	blx	r3
 800c632:	3601      	adds	r6, #1
 800c634:	e7ee      	b.n	800c614 <__libc_init_array+0xc>
 800c636:	f855 3b04 	ldr.w	r3, [r5], #4
 800c63a:	4798      	blx	r3
 800c63c:	3601      	adds	r6, #1
 800c63e:	e7f2      	b.n	800c626 <__libc_init_array+0x1e>
 800c640:	0800d700 	.word	0x0800d700
 800c644:	0800d700 	.word	0x0800d700
 800c648:	0800d700 	.word	0x0800d700
 800c64c:	0800d704 	.word	0x0800d704

0800c650 <__retarget_lock_init_recursive>:
 800c650:	4770      	bx	lr

0800c652 <__retarget_lock_acquire_recursive>:
 800c652:	4770      	bx	lr

0800c654 <__retarget_lock_release_recursive>:
 800c654:	4770      	bx	lr

0800c656 <memcpy>:
 800c656:	440a      	add	r2, r1
 800c658:	4291      	cmp	r1, r2
 800c65a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c65e:	d100      	bne.n	800c662 <memcpy+0xc>
 800c660:	4770      	bx	lr
 800c662:	b510      	push	{r4, lr}
 800c664:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c668:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c66c:	4291      	cmp	r1, r2
 800c66e:	d1f9      	bne.n	800c664 <memcpy+0xe>
 800c670:	bd10      	pop	{r4, pc}
	...

0800c674 <_free_r>:
 800c674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c676:	2900      	cmp	r1, #0
 800c678:	d044      	beq.n	800c704 <_free_r+0x90>
 800c67a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c67e:	9001      	str	r0, [sp, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	f1a1 0404 	sub.w	r4, r1, #4
 800c686:	bfb8      	it	lt
 800c688:	18e4      	addlt	r4, r4, r3
 800c68a:	f000 f8df 	bl	800c84c <__malloc_lock>
 800c68e:	4a1e      	ldr	r2, [pc, #120]	; (800c708 <_free_r+0x94>)
 800c690:	9801      	ldr	r0, [sp, #4]
 800c692:	6813      	ldr	r3, [r2, #0]
 800c694:	b933      	cbnz	r3, 800c6a4 <_free_r+0x30>
 800c696:	6063      	str	r3, [r4, #4]
 800c698:	6014      	str	r4, [r2, #0]
 800c69a:	b003      	add	sp, #12
 800c69c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6a0:	f000 b8da 	b.w	800c858 <__malloc_unlock>
 800c6a4:	42a3      	cmp	r3, r4
 800c6a6:	d908      	bls.n	800c6ba <_free_r+0x46>
 800c6a8:	6825      	ldr	r5, [r4, #0]
 800c6aa:	1961      	adds	r1, r4, r5
 800c6ac:	428b      	cmp	r3, r1
 800c6ae:	bf01      	itttt	eq
 800c6b0:	6819      	ldreq	r1, [r3, #0]
 800c6b2:	685b      	ldreq	r3, [r3, #4]
 800c6b4:	1949      	addeq	r1, r1, r5
 800c6b6:	6021      	streq	r1, [r4, #0]
 800c6b8:	e7ed      	b.n	800c696 <_free_r+0x22>
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	b10b      	cbz	r3, 800c6c4 <_free_r+0x50>
 800c6c0:	42a3      	cmp	r3, r4
 800c6c2:	d9fa      	bls.n	800c6ba <_free_r+0x46>
 800c6c4:	6811      	ldr	r1, [r2, #0]
 800c6c6:	1855      	adds	r5, r2, r1
 800c6c8:	42a5      	cmp	r5, r4
 800c6ca:	d10b      	bne.n	800c6e4 <_free_r+0x70>
 800c6cc:	6824      	ldr	r4, [r4, #0]
 800c6ce:	4421      	add	r1, r4
 800c6d0:	1854      	adds	r4, r2, r1
 800c6d2:	42a3      	cmp	r3, r4
 800c6d4:	6011      	str	r1, [r2, #0]
 800c6d6:	d1e0      	bne.n	800c69a <_free_r+0x26>
 800c6d8:	681c      	ldr	r4, [r3, #0]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	6053      	str	r3, [r2, #4]
 800c6de:	440c      	add	r4, r1
 800c6e0:	6014      	str	r4, [r2, #0]
 800c6e2:	e7da      	b.n	800c69a <_free_r+0x26>
 800c6e4:	d902      	bls.n	800c6ec <_free_r+0x78>
 800c6e6:	230c      	movs	r3, #12
 800c6e8:	6003      	str	r3, [r0, #0]
 800c6ea:	e7d6      	b.n	800c69a <_free_r+0x26>
 800c6ec:	6825      	ldr	r5, [r4, #0]
 800c6ee:	1961      	adds	r1, r4, r5
 800c6f0:	428b      	cmp	r3, r1
 800c6f2:	bf04      	itt	eq
 800c6f4:	6819      	ldreq	r1, [r3, #0]
 800c6f6:	685b      	ldreq	r3, [r3, #4]
 800c6f8:	6063      	str	r3, [r4, #4]
 800c6fa:	bf04      	itt	eq
 800c6fc:	1949      	addeq	r1, r1, r5
 800c6fe:	6021      	streq	r1, [r4, #0]
 800c700:	6054      	str	r4, [r2, #4]
 800c702:	e7ca      	b.n	800c69a <_free_r+0x26>
 800c704:	b003      	add	sp, #12
 800c706:	bd30      	pop	{r4, r5, pc}
 800c708:	2000de10 	.word	0x2000de10

0800c70c <sbrk_aligned>:
 800c70c:	b570      	push	{r4, r5, r6, lr}
 800c70e:	4e0e      	ldr	r6, [pc, #56]	; (800c748 <sbrk_aligned+0x3c>)
 800c710:	460c      	mov	r4, r1
 800c712:	6831      	ldr	r1, [r6, #0]
 800c714:	4605      	mov	r5, r0
 800c716:	b911      	cbnz	r1, 800c71e <sbrk_aligned+0x12>
 800c718:	f000 fe62 	bl	800d3e0 <_sbrk_r>
 800c71c:	6030      	str	r0, [r6, #0]
 800c71e:	4621      	mov	r1, r4
 800c720:	4628      	mov	r0, r5
 800c722:	f000 fe5d 	bl	800d3e0 <_sbrk_r>
 800c726:	1c43      	adds	r3, r0, #1
 800c728:	d00a      	beq.n	800c740 <sbrk_aligned+0x34>
 800c72a:	1cc4      	adds	r4, r0, #3
 800c72c:	f024 0403 	bic.w	r4, r4, #3
 800c730:	42a0      	cmp	r0, r4
 800c732:	d007      	beq.n	800c744 <sbrk_aligned+0x38>
 800c734:	1a21      	subs	r1, r4, r0
 800c736:	4628      	mov	r0, r5
 800c738:	f000 fe52 	bl	800d3e0 <_sbrk_r>
 800c73c:	3001      	adds	r0, #1
 800c73e:	d101      	bne.n	800c744 <sbrk_aligned+0x38>
 800c740:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c744:	4620      	mov	r0, r4
 800c746:	bd70      	pop	{r4, r5, r6, pc}
 800c748:	2000de14 	.word	0x2000de14

0800c74c <_malloc_r>:
 800c74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c750:	1ccd      	adds	r5, r1, #3
 800c752:	f025 0503 	bic.w	r5, r5, #3
 800c756:	3508      	adds	r5, #8
 800c758:	2d0c      	cmp	r5, #12
 800c75a:	bf38      	it	cc
 800c75c:	250c      	movcc	r5, #12
 800c75e:	2d00      	cmp	r5, #0
 800c760:	4607      	mov	r7, r0
 800c762:	db01      	blt.n	800c768 <_malloc_r+0x1c>
 800c764:	42a9      	cmp	r1, r5
 800c766:	d905      	bls.n	800c774 <_malloc_r+0x28>
 800c768:	230c      	movs	r3, #12
 800c76a:	603b      	str	r3, [r7, #0]
 800c76c:	2600      	movs	r6, #0
 800c76e:	4630      	mov	r0, r6
 800c770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c774:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c848 <_malloc_r+0xfc>
 800c778:	f000 f868 	bl	800c84c <__malloc_lock>
 800c77c:	f8d8 3000 	ldr.w	r3, [r8]
 800c780:	461c      	mov	r4, r3
 800c782:	bb5c      	cbnz	r4, 800c7dc <_malloc_r+0x90>
 800c784:	4629      	mov	r1, r5
 800c786:	4638      	mov	r0, r7
 800c788:	f7ff ffc0 	bl	800c70c <sbrk_aligned>
 800c78c:	1c43      	adds	r3, r0, #1
 800c78e:	4604      	mov	r4, r0
 800c790:	d155      	bne.n	800c83e <_malloc_r+0xf2>
 800c792:	f8d8 4000 	ldr.w	r4, [r8]
 800c796:	4626      	mov	r6, r4
 800c798:	2e00      	cmp	r6, #0
 800c79a:	d145      	bne.n	800c828 <_malloc_r+0xdc>
 800c79c:	2c00      	cmp	r4, #0
 800c79e:	d048      	beq.n	800c832 <_malloc_r+0xe6>
 800c7a0:	6823      	ldr	r3, [r4, #0]
 800c7a2:	4631      	mov	r1, r6
 800c7a4:	4638      	mov	r0, r7
 800c7a6:	eb04 0903 	add.w	r9, r4, r3
 800c7aa:	f000 fe19 	bl	800d3e0 <_sbrk_r>
 800c7ae:	4581      	cmp	r9, r0
 800c7b0:	d13f      	bne.n	800c832 <_malloc_r+0xe6>
 800c7b2:	6821      	ldr	r1, [r4, #0]
 800c7b4:	1a6d      	subs	r5, r5, r1
 800c7b6:	4629      	mov	r1, r5
 800c7b8:	4638      	mov	r0, r7
 800c7ba:	f7ff ffa7 	bl	800c70c <sbrk_aligned>
 800c7be:	3001      	adds	r0, #1
 800c7c0:	d037      	beq.n	800c832 <_malloc_r+0xe6>
 800c7c2:	6823      	ldr	r3, [r4, #0]
 800c7c4:	442b      	add	r3, r5
 800c7c6:	6023      	str	r3, [r4, #0]
 800c7c8:	f8d8 3000 	ldr.w	r3, [r8]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d038      	beq.n	800c842 <_malloc_r+0xf6>
 800c7d0:	685a      	ldr	r2, [r3, #4]
 800c7d2:	42a2      	cmp	r2, r4
 800c7d4:	d12b      	bne.n	800c82e <_malloc_r+0xe2>
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	605a      	str	r2, [r3, #4]
 800c7da:	e00f      	b.n	800c7fc <_malloc_r+0xb0>
 800c7dc:	6822      	ldr	r2, [r4, #0]
 800c7de:	1b52      	subs	r2, r2, r5
 800c7e0:	d41f      	bmi.n	800c822 <_malloc_r+0xd6>
 800c7e2:	2a0b      	cmp	r2, #11
 800c7e4:	d917      	bls.n	800c816 <_malloc_r+0xca>
 800c7e6:	1961      	adds	r1, r4, r5
 800c7e8:	42a3      	cmp	r3, r4
 800c7ea:	6025      	str	r5, [r4, #0]
 800c7ec:	bf18      	it	ne
 800c7ee:	6059      	strne	r1, [r3, #4]
 800c7f0:	6863      	ldr	r3, [r4, #4]
 800c7f2:	bf08      	it	eq
 800c7f4:	f8c8 1000 	streq.w	r1, [r8]
 800c7f8:	5162      	str	r2, [r4, r5]
 800c7fa:	604b      	str	r3, [r1, #4]
 800c7fc:	4638      	mov	r0, r7
 800c7fe:	f104 060b 	add.w	r6, r4, #11
 800c802:	f000 f829 	bl	800c858 <__malloc_unlock>
 800c806:	f026 0607 	bic.w	r6, r6, #7
 800c80a:	1d23      	adds	r3, r4, #4
 800c80c:	1af2      	subs	r2, r6, r3
 800c80e:	d0ae      	beq.n	800c76e <_malloc_r+0x22>
 800c810:	1b9b      	subs	r3, r3, r6
 800c812:	50a3      	str	r3, [r4, r2]
 800c814:	e7ab      	b.n	800c76e <_malloc_r+0x22>
 800c816:	42a3      	cmp	r3, r4
 800c818:	6862      	ldr	r2, [r4, #4]
 800c81a:	d1dd      	bne.n	800c7d8 <_malloc_r+0x8c>
 800c81c:	f8c8 2000 	str.w	r2, [r8]
 800c820:	e7ec      	b.n	800c7fc <_malloc_r+0xb0>
 800c822:	4623      	mov	r3, r4
 800c824:	6864      	ldr	r4, [r4, #4]
 800c826:	e7ac      	b.n	800c782 <_malloc_r+0x36>
 800c828:	4634      	mov	r4, r6
 800c82a:	6876      	ldr	r6, [r6, #4]
 800c82c:	e7b4      	b.n	800c798 <_malloc_r+0x4c>
 800c82e:	4613      	mov	r3, r2
 800c830:	e7cc      	b.n	800c7cc <_malloc_r+0x80>
 800c832:	230c      	movs	r3, #12
 800c834:	603b      	str	r3, [r7, #0]
 800c836:	4638      	mov	r0, r7
 800c838:	f000 f80e 	bl	800c858 <__malloc_unlock>
 800c83c:	e797      	b.n	800c76e <_malloc_r+0x22>
 800c83e:	6025      	str	r5, [r4, #0]
 800c840:	e7dc      	b.n	800c7fc <_malloc_r+0xb0>
 800c842:	605b      	str	r3, [r3, #4]
 800c844:	deff      	udf	#255	; 0xff
 800c846:	bf00      	nop
 800c848:	2000de10 	.word	0x2000de10

0800c84c <__malloc_lock>:
 800c84c:	4801      	ldr	r0, [pc, #4]	; (800c854 <__malloc_lock+0x8>)
 800c84e:	f7ff bf00 	b.w	800c652 <__retarget_lock_acquire_recursive>
 800c852:	bf00      	nop
 800c854:	2000de0c 	.word	0x2000de0c

0800c858 <__malloc_unlock>:
 800c858:	4801      	ldr	r0, [pc, #4]	; (800c860 <__malloc_unlock+0x8>)
 800c85a:	f7ff befb 	b.w	800c654 <__retarget_lock_release_recursive>
 800c85e:	bf00      	nop
 800c860:	2000de0c 	.word	0x2000de0c

0800c864 <__ssputs_r>:
 800c864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c868:	688e      	ldr	r6, [r1, #8]
 800c86a:	461f      	mov	r7, r3
 800c86c:	42be      	cmp	r6, r7
 800c86e:	680b      	ldr	r3, [r1, #0]
 800c870:	4682      	mov	sl, r0
 800c872:	460c      	mov	r4, r1
 800c874:	4690      	mov	r8, r2
 800c876:	d82c      	bhi.n	800c8d2 <__ssputs_r+0x6e>
 800c878:	898a      	ldrh	r2, [r1, #12]
 800c87a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c87e:	d026      	beq.n	800c8ce <__ssputs_r+0x6a>
 800c880:	6965      	ldr	r5, [r4, #20]
 800c882:	6909      	ldr	r1, [r1, #16]
 800c884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c888:	eba3 0901 	sub.w	r9, r3, r1
 800c88c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c890:	1c7b      	adds	r3, r7, #1
 800c892:	444b      	add	r3, r9
 800c894:	106d      	asrs	r5, r5, #1
 800c896:	429d      	cmp	r5, r3
 800c898:	bf38      	it	cc
 800c89a:	461d      	movcc	r5, r3
 800c89c:	0553      	lsls	r3, r2, #21
 800c89e:	d527      	bpl.n	800c8f0 <__ssputs_r+0x8c>
 800c8a0:	4629      	mov	r1, r5
 800c8a2:	f7ff ff53 	bl	800c74c <_malloc_r>
 800c8a6:	4606      	mov	r6, r0
 800c8a8:	b360      	cbz	r0, 800c904 <__ssputs_r+0xa0>
 800c8aa:	6921      	ldr	r1, [r4, #16]
 800c8ac:	464a      	mov	r2, r9
 800c8ae:	f7ff fed2 	bl	800c656 <memcpy>
 800c8b2:	89a3      	ldrh	r3, [r4, #12]
 800c8b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c8b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8bc:	81a3      	strh	r3, [r4, #12]
 800c8be:	6126      	str	r6, [r4, #16]
 800c8c0:	6165      	str	r5, [r4, #20]
 800c8c2:	444e      	add	r6, r9
 800c8c4:	eba5 0509 	sub.w	r5, r5, r9
 800c8c8:	6026      	str	r6, [r4, #0]
 800c8ca:	60a5      	str	r5, [r4, #8]
 800c8cc:	463e      	mov	r6, r7
 800c8ce:	42be      	cmp	r6, r7
 800c8d0:	d900      	bls.n	800c8d4 <__ssputs_r+0x70>
 800c8d2:	463e      	mov	r6, r7
 800c8d4:	6820      	ldr	r0, [r4, #0]
 800c8d6:	4632      	mov	r2, r6
 800c8d8:	4641      	mov	r1, r8
 800c8da:	f000 fd67 	bl	800d3ac <memmove>
 800c8de:	68a3      	ldr	r3, [r4, #8]
 800c8e0:	1b9b      	subs	r3, r3, r6
 800c8e2:	60a3      	str	r3, [r4, #8]
 800c8e4:	6823      	ldr	r3, [r4, #0]
 800c8e6:	4433      	add	r3, r6
 800c8e8:	6023      	str	r3, [r4, #0]
 800c8ea:	2000      	movs	r0, #0
 800c8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8f0:	462a      	mov	r2, r5
 800c8f2:	f000 fd85 	bl	800d400 <_realloc_r>
 800c8f6:	4606      	mov	r6, r0
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	d1e0      	bne.n	800c8be <__ssputs_r+0x5a>
 800c8fc:	6921      	ldr	r1, [r4, #16]
 800c8fe:	4650      	mov	r0, sl
 800c900:	f7ff feb8 	bl	800c674 <_free_r>
 800c904:	230c      	movs	r3, #12
 800c906:	f8ca 3000 	str.w	r3, [sl]
 800c90a:	89a3      	ldrh	r3, [r4, #12]
 800c90c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c910:	81a3      	strh	r3, [r4, #12]
 800c912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c916:	e7e9      	b.n	800c8ec <__ssputs_r+0x88>

0800c918 <_svfiprintf_r>:
 800c918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c91c:	4698      	mov	r8, r3
 800c91e:	898b      	ldrh	r3, [r1, #12]
 800c920:	061b      	lsls	r3, r3, #24
 800c922:	b09d      	sub	sp, #116	; 0x74
 800c924:	4607      	mov	r7, r0
 800c926:	460d      	mov	r5, r1
 800c928:	4614      	mov	r4, r2
 800c92a:	d50e      	bpl.n	800c94a <_svfiprintf_r+0x32>
 800c92c:	690b      	ldr	r3, [r1, #16]
 800c92e:	b963      	cbnz	r3, 800c94a <_svfiprintf_r+0x32>
 800c930:	2140      	movs	r1, #64	; 0x40
 800c932:	f7ff ff0b 	bl	800c74c <_malloc_r>
 800c936:	6028      	str	r0, [r5, #0]
 800c938:	6128      	str	r0, [r5, #16]
 800c93a:	b920      	cbnz	r0, 800c946 <_svfiprintf_r+0x2e>
 800c93c:	230c      	movs	r3, #12
 800c93e:	603b      	str	r3, [r7, #0]
 800c940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c944:	e0d0      	b.n	800cae8 <_svfiprintf_r+0x1d0>
 800c946:	2340      	movs	r3, #64	; 0x40
 800c948:	616b      	str	r3, [r5, #20]
 800c94a:	2300      	movs	r3, #0
 800c94c:	9309      	str	r3, [sp, #36]	; 0x24
 800c94e:	2320      	movs	r3, #32
 800c950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c954:	f8cd 800c 	str.w	r8, [sp, #12]
 800c958:	2330      	movs	r3, #48	; 0x30
 800c95a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cb00 <_svfiprintf_r+0x1e8>
 800c95e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c962:	f04f 0901 	mov.w	r9, #1
 800c966:	4623      	mov	r3, r4
 800c968:	469a      	mov	sl, r3
 800c96a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c96e:	b10a      	cbz	r2, 800c974 <_svfiprintf_r+0x5c>
 800c970:	2a25      	cmp	r2, #37	; 0x25
 800c972:	d1f9      	bne.n	800c968 <_svfiprintf_r+0x50>
 800c974:	ebba 0b04 	subs.w	fp, sl, r4
 800c978:	d00b      	beq.n	800c992 <_svfiprintf_r+0x7a>
 800c97a:	465b      	mov	r3, fp
 800c97c:	4622      	mov	r2, r4
 800c97e:	4629      	mov	r1, r5
 800c980:	4638      	mov	r0, r7
 800c982:	f7ff ff6f 	bl	800c864 <__ssputs_r>
 800c986:	3001      	adds	r0, #1
 800c988:	f000 80a9 	beq.w	800cade <_svfiprintf_r+0x1c6>
 800c98c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c98e:	445a      	add	r2, fp
 800c990:	9209      	str	r2, [sp, #36]	; 0x24
 800c992:	f89a 3000 	ldrb.w	r3, [sl]
 800c996:	2b00      	cmp	r3, #0
 800c998:	f000 80a1 	beq.w	800cade <_svfiprintf_r+0x1c6>
 800c99c:	2300      	movs	r3, #0
 800c99e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9a6:	f10a 0a01 	add.w	sl, sl, #1
 800c9aa:	9304      	str	r3, [sp, #16]
 800c9ac:	9307      	str	r3, [sp, #28]
 800c9ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9b2:	931a      	str	r3, [sp, #104]	; 0x68
 800c9b4:	4654      	mov	r4, sl
 800c9b6:	2205      	movs	r2, #5
 800c9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9bc:	4850      	ldr	r0, [pc, #320]	; (800cb00 <_svfiprintf_r+0x1e8>)
 800c9be:	f7f3 fc0f 	bl	80001e0 <memchr>
 800c9c2:	9a04      	ldr	r2, [sp, #16]
 800c9c4:	b9d8      	cbnz	r0, 800c9fe <_svfiprintf_r+0xe6>
 800c9c6:	06d0      	lsls	r0, r2, #27
 800c9c8:	bf44      	itt	mi
 800c9ca:	2320      	movmi	r3, #32
 800c9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9d0:	0711      	lsls	r1, r2, #28
 800c9d2:	bf44      	itt	mi
 800c9d4:	232b      	movmi	r3, #43	; 0x2b
 800c9d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9da:	f89a 3000 	ldrb.w	r3, [sl]
 800c9de:	2b2a      	cmp	r3, #42	; 0x2a
 800c9e0:	d015      	beq.n	800ca0e <_svfiprintf_r+0xf6>
 800c9e2:	9a07      	ldr	r2, [sp, #28]
 800c9e4:	4654      	mov	r4, sl
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	f04f 0c0a 	mov.w	ip, #10
 800c9ec:	4621      	mov	r1, r4
 800c9ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9f2:	3b30      	subs	r3, #48	; 0x30
 800c9f4:	2b09      	cmp	r3, #9
 800c9f6:	d94d      	bls.n	800ca94 <_svfiprintf_r+0x17c>
 800c9f8:	b1b0      	cbz	r0, 800ca28 <_svfiprintf_r+0x110>
 800c9fa:	9207      	str	r2, [sp, #28]
 800c9fc:	e014      	b.n	800ca28 <_svfiprintf_r+0x110>
 800c9fe:	eba0 0308 	sub.w	r3, r0, r8
 800ca02:	fa09 f303 	lsl.w	r3, r9, r3
 800ca06:	4313      	orrs	r3, r2
 800ca08:	9304      	str	r3, [sp, #16]
 800ca0a:	46a2      	mov	sl, r4
 800ca0c:	e7d2      	b.n	800c9b4 <_svfiprintf_r+0x9c>
 800ca0e:	9b03      	ldr	r3, [sp, #12]
 800ca10:	1d19      	adds	r1, r3, #4
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	9103      	str	r1, [sp, #12]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	bfbb      	ittet	lt
 800ca1a:	425b      	neglt	r3, r3
 800ca1c:	f042 0202 	orrlt.w	r2, r2, #2
 800ca20:	9307      	strge	r3, [sp, #28]
 800ca22:	9307      	strlt	r3, [sp, #28]
 800ca24:	bfb8      	it	lt
 800ca26:	9204      	strlt	r2, [sp, #16]
 800ca28:	7823      	ldrb	r3, [r4, #0]
 800ca2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ca2c:	d10c      	bne.n	800ca48 <_svfiprintf_r+0x130>
 800ca2e:	7863      	ldrb	r3, [r4, #1]
 800ca30:	2b2a      	cmp	r3, #42	; 0x2a
 800ca32:	d134      	bne.n	800ca9e <_svfiprintf_r+0x186>
 800ca34:	9b03      	ldr	r3, [sp, #12]
 800ca36:	1d1a      	adds	r2, r3, #4
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	9203      	str	r2, [sp, #12]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	bfb8      	it	lt
 800ca40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ca44:	3402      	adds	r4, #2
 800ca46:	9305      	str	r3, [sp, #20]
 800ca48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cb10 <_svfiprintf_r+0x1f8>
 800ca4c:	7821      	ldrb	r1, [r4, #0]
 800ca4e:	2203      	movs	r2, #3
 800ca50:	4650      	mov	r0, sl
 800ca52:	f7f3 fbc5 	bl	80001e0 <memchr>
 800ca56:	b138      	cbz	r0, 800ca68 <_svfiprintf_r+0x150>
 800ca58:	9b04      	ldr	r3, [sp, #16]
 800ca5a:	eba0 000a 	sub.w	r0, r0, sl
 800ca5e:	2240      	movs	r2, #64	; 0x40
 800ca60:	4082      	lsls	r2, r0
 800ca62:	4313      	orrs	r3, r2
 800ca64:	3401      	adds	r4, #1
 800ca66:	9304      	str	r3, [sp, #16]
 800ca68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca6c:	4825      	ldr	r0, [pc, #148]	; (800cb04 <_svfiprintf_r+0x1ec>)
 800ca6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca72:	2206      	movs	r2, #6
 800ca74:	f7f3 fbb4 	bl	80001e0 <memchr>
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d038      	beq.n	800caee <_svfiprintf_r+0x1d6>
 800ca7c:	4b22      	ldr	r3, [pc, #136]	; (800cb08 <_svfiprintf_r+0x1f0>)
 800ca7e:	bb1b      	cbnz	r3, 800cac8 <_svfiprintf_r+0x1b0>
 800ca80:	9b03      	ldr	r3, [sp, #12]
 800ca82:	3307      	adds	r3, #7
 800ca84:	f023 0307 	bic.w	r3, r3, #7
 800ca88:	3308      	adds	r3, #8
 800ca8a:	9303      	str	r3, [sp, #12]
 800ca8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca8e:	4433      	add	r3, r6
 800ca90:	9309      	str	r3, [sp, #36]	; 0x24
 800ca92:	e768      	b.n	800c966 <_svfiprintf_r+0x4e>
 800ca94:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca98:	460c      	mov	r4, r1
 800ca9a:	2001      	movs	r0, #1
 800ca9c:	e7a6      	b.n	800c9ec <_svfiprintf_r+0xd4>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	3401      	adds	r4, #1
 800caa2:	9305      	str	r3, [sp, #20]
 800caa4:	4619      	mov	r1, r3
 800caa6:	f04f 0c0a 	mov.w	ip, #10
 800caaa:	4620      	mov	r0, r4
 800caac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cab0:	3a30      	subs	r2, #48	; 0x30
 800cab2:	2a09      	cmp	r2, #9
 800cab4:	d903      	bls.n	800cabe <_svfiprintf_r+0x1a6>
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d0c6      	beq.n	800ca48 <_svfiprintf_r+0x130>
 800caba:	9105      	str	r1, [sp, #20]
 800cabc:	e7c4      	b.n	800ca48 <_svfiprintf_r+0x130>
 800cabe:	fb0c 2101 	mla	r1, ip, r1, r2
 800cac2:	4604      	mov	r4, r0
 800cac4:	2301      	movs	r3, #1
 800cac6:	e7f0      	b.n	800caaa <_svfiprintf_r+0x192>
 800cac8:	ab03      	add	r3, sp, #12
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	462a      	mov	r2, r5
 800cace:	4b0f      	ldr	r3, [pc, #60]	; (800cb0c <_svfiprintf_r+0x1f4>)
 800cad0:	a904      	add	r1, sp, #16
 800cad2:	4638      	mov	r0, r7
 800cad4:	f3af 8000 	nop.w
 800cad8:	1c42      	adds	r2, r0, #1
 800cada:	4606      	mov	r6, r0
 800cadc:	d1d6      	bne.n	800ca8c <_svfiprintf_r+0x174>
 800cade:	89ab      	ldrh	r3, [r5, #12]
 800cae0:	065b      	lsls	r3, r3, #25
 800cae2:	f53f af2d 	bmi.w	800c940 <_svfiprintf_r+0x28>
 800cae6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cae8:	b01d      	add	sp, #116	; 0x74
 800caea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caee:	ab03      	add	r3, sp, #12
 800caf0:	9300      	str	r3, [sp, #0]
 800caf2:	462a      	mov	r2, r5
 800caf4:	4b05      	ldr	r3, [pc, #20]	; (800cb0c <_svfiprintf_r+0x1f4>)
 800caf6:	a904      	add	r1, sp, #16
 800caf8:	4638      	mov	r0, r7
 800cafa:	f000 f9bd 	bl	800ce78 <_printf_i>
 800cafe:	e7eb      	b.n	800cad8 <_svfiprintf_r+0x1c0>
 800cb00:	0800d6c4 	.word	0x0800d6c4
 800cb04:	0800d6ce 	.word	0x0800d6ce
 800cb08:	00000000 	.word	0x00000000
 800cb0c:	0800c865 	.word	0x0800c865
 800cb10:	0800d6ca 	.word	0x0800d6ca

0800cb14 <__sfputc_r>:
 800cb14:	6893      	ldr	r3, [r2, #8]
 800cb16:	3b01      	subs	r3, #1
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	b410      	push	{r4}
 800cb1c:	6093      	str	r3, [r2, #8]
 800cb1e:	da08      	bge.n	800cb32 <__sfputc_r+0x1e>
 800cb20:	6994      	ldr	r4, [r2, #24]
 800cb22:	42a3      	cmp	r3, r4
 800cb24:	db01      	blt.n	800cb2a <__sfputc_r+0x16>
 800cb26:	290a      	cmp	r1, #10
 800cb28:	d103      	bne.n	800cb32 <__sfputc_r+0x1e>
 800cb2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb2e:	f000 bba7 	b.w	800d280 <__swbuf_r>
 800cb32:	6813      	ldr	r3, [r2, #0]
 800cb34:	1c58      	adds	r0, r3, #1
 800cb36:	6010      	str	r0, [r2, #0]
 800cb38:	7019      	strb	r1, [r3, #0]
 800cb3a:	4608      	mov	r0, r1
 800cb3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb40:	4770      	bx	lr

0800cb42 <__sfputs_r>:
 800cb42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb44:	4606      	mov	r6, r0
 800cb46:	460f      	mov	r7, r1
 800cb48:	4614      	mov	r4, r2
 800cb4a:	18d5      	adds	r5, r2, r3
 800cb4c:	42ac      	cmp	r4, r5
 800cb4e:	d101      	bne.n	800cb54 <__sfputs_r+0x12>
 800cb50:	2000      	movs	r0, #0
 800cb52:	e007      	b.n	800cb64 <__sfputs_r+0x22>
 800cb54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb58:	463a      	mov	r2, r7
 800cb5a:	4630      	mov	r0, r6
 800cb5c:	f7ff ffda 	bl	800cb14 <__sfputc_r>
 800cb60:	1c43      	adds	r3, r0, #1
 800cb62:	d1f3      	bne.n	800cb4c <__sfputs_r+0xa>
 800cb64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cb68 <_vfiprintf_r>:
 800cb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb6c:	460d      	mov	r5, r1
 800cb6e:	b09d      	sub	sp, #116	; 0x74
 800cb70:	4614      	mov	r4, r2
 800cb72:	4698      	mov	r8, r3
 800cb74:	4606      	mov	r6, r0
 800cb76:	b118      	cbz	r0, 800cb80 <_vfiprintf_r+0x18>
 800cb78:	6a03      	ldr	r3, [r0, #32]
 800cb7a:	b90b      	cbnz	r3, 800cb80 <_vfiprintf_r+0x18>
 800cb7c:	f7ff fbd2 	bl	800c324 <__sinit>
 800cb80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb82:	07d9      	lsls	r1, r3, #31
 800cb84:	d405      	bmi.n	800cb92 <_vfiprintf_r+0x2a>
 800cb86:	89ab      	ldrh	r3, [r5, #12]
 800cb88:	059a      	lsls	r2, r3, #22
 800cb8a:	d402      	bmi.n	800cb92 <_vfiprintf_r+0x2a>
 800cb8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb8e:	f7ff fd60 	bl	800c652 <__retarget_lock_acquire_recursive>
 800cb92:	89ab      	ldrh	r3, [r5, #12]
 800cb94:	071b      	lsls	r3, r3, #28
 800cb96:	d501      	bpl.n	800cb9c <_vfiprintf_r+0x34>
 800cb98:	692b      	ldr	r3, [r5, #16]
 800cb9a:	b99b      	cbnz	r3, 800cbc4 <_vfiprintf_r+0x5c>
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	4630      	mov	r0, r6
 800cba0:	f000 fbac 	bl	800d2fc <__swsetup_r>
 800cba4:	b170      	cbz	r0, 800cbc4 <_vfiprintf_r+0x5c>
 800cba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cba8:	07dc      	lsls	r4, r3, #31
 800cbaa:	d504      	bpl.n	800cbb6 <_vfiprintf_r+0x4e>
 800cbac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbb0:	b01d      	add	sp, #116	; 0x74
 800cbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbb6:	89ab      	ldrh	r3, [r5, #12]
 800cbb8:	0598      	lsls	r0, r3, #22
 800cbba:	d4f7      	bmi.n	800cbac <_vfiprintf_r+0x44>
 800cbbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbbe:	f7ff fd49 	bl	800c654 <__retarget_lock_release_recursive>
 800cbc2:	e7f3      	b.n	800cbac <_vfiprintf_r+0x44>
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	9309      	str	r3, [sp, #36]	; 0x24
 800cbc8:	2320      	movs	r3, #32
 800cbca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbce:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbd2:	2330      	movs	r3, #48	; 0x30
 800cbd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cd88 <_vfiprintf_r+0x220>
 800cbd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbdc:	f04f 0901 	mov.w	r9, #1
 800cbe0:	4623      	mov	r3, r4
 800cbe2:	469a      	mov	sl, r3
 800cbe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbe8:	b10a      	cbz	r2, 800cbee <_vfiprintf_r+0x86>
 800cbea:	2a25      	cmp	r2, #37	; 0x25
 800cbec:	d1f9      	bne.n	800cbe2 <_vfiprintf_r+0x7a>
 800cbee:	ebba 0b04 	subs.w	fp, sl, r4
 800cbf2:	d00b      	beq.n	800cc0c <_vfiprintf_r+0xa4>
 800cbf4:	465b      	mov	r3, fp
 800cbf6:	4622      	mov	r2, r4
 800cbf8:	4629      	mov	r1, r5
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	f7ff ffa1 	bl	800cb42 <__sfputs_r>
 800cc00:	3001      	adds	r0, #1
 800cc02:	f000 80a9 	beq.w	800cd58 <_vfiprintf_r+0x1f0>
 800cc06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc08:	445a      	add	r2, fp
 800cc0a:	9209      	str	r2, [sp, #36]	; 0x24
 800cc0c:	f89a 3000 	ldrb.w	r3, [sl]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f000 80a1 	beq.w	800cd58 <_vfiprintf_r+0x1f0>
 800cc16:	2300      	movs	r3, #0
 800cc18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc20:	f10a 0a01 	add.w	sl, sl, #1
 800cc24:	9304      	str	r3, [sp, #16]
 800cc26:	9307      	str	r3, [sp, #28]
 800cc28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc2c:	931a      	str	r3, [sp, #104]	; 0x68
 800cc2e:	4654      	mov	r4, sl
 800cc30:	2205      	movs	r2, #5
 800cc32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc36:	4854      	ldr	r0, [pc, #336]	; (800cd88 <_vfiprintf_r+0x220>)
 800cc38:	f7f3 fad2 	bl	80001e0 <memchr>
 800cc3c:	9a04      	ldr	r2, [sp, #16]
 800cc3e:	b9d8      	cbnz	r0, 800cc78 <_vfiprintf_r+0x110>
 800cc40:	06d1      	lsls	r1, r2, #27
 800cc42:	bf44      	itt	mi
 800cc44:	2320      	movmi	r3, #32
 800cc46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc4a:	0713      	lsls	r3, r2, #28
 800cc4c:	bf44      	itt	mi
 800cc4e:	232b      	movmi	r3, #43	; 0x2b
 800cc50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc54:	f89a 3000 	ldrb.w	r3, [sl]
 800cc58:	2b2a      	cmp	r3, #42	; 0x2a
 800cc5a:	d015      	beq.n	800cc88 <_vfiprintf_r+0x120>
 800cc5c:	9a07      	ldr	r2, [sp, #28]
 800cc5e:	4654      	mov	r4, sl
 800cc60:	2000      	movs	r0, #0
 800cc62:	f04f 0c0a 	mov.w	ip, #10
 800cc66:	4621      	mov	r1, r4
 800cc68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc6c:	3b30      	subs	r3, #48	; 0x30
 800cc6e:	2b09      	cmp	r3, #9
 800cc70:	d94d      	bls.n	800cd0e <_vfiprintf_r+0x1a6>
 800cc72:	b1b0      	cbz	r0, 800cca2 <_vfiprintf_r+0x13a>
 800cc74:	9207      	str	r2, [sp, #28]
 800cc76:	e014      	b.n	800cca2 <_vfiprintf_r+0x13a>
 800cc78:	eba0 0308 	sub.w	r3, r0, r8
 800cc7c:	fa09 f303 	lsl.w	r3, r9, r3
 800cc80:	4313      	orrs	r3, r2
 800cc82:	9304      	str	r3, [sp, #16]
 800cc84:	46a2      	mov	sl, r4
 800cc86:	e7d2      	b.n	800cc2e <_vfiprintf_r+0xc6>
 800cc88:	9b03      	ldr	r3, [sp, #12]
 800cc8a:	1d19      	adds	r1, r3, #4
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	9103      	str	r1, [sp, #12]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	bfbb      	ittet	lt
 800cc94:	425b      	neglt	r3, r3
 800cc96:	f042 0202 	orrlt.w	r2, r2, #2
 800cc9a:	9307      	strge	r3, [sp, #28]
 800cc9c:	9307      	strlt	r3, [sp, #28]
 800cc9e:	bfb8      	it	lt
 800cca0:	9204      	strlt	r2, [sp, #16]
 800cca2:	7823      	ldrb	r3, [r4, #0]
 800cca4:	2b2e      	cmp	r3, #46	; 0x2e
 800cca6:	d10c      	bne.n	800ccc2 <_vfiprintf_r+0x15a>
 800cca8:	7863      	ldrb	r3, [r4, #1]
 800ccaa:	2b2a      	cmp	r3, #42	; 0x2a
 800ccac:	d134      	bne.n	800cd18 <_vfiprintf_r+0x1b0>
 800ccae:	9b03      	ldr	r3, [sp, #12]
 800ccb0:	1d1a      	adds	r2, r3, #4
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	9203      	str	r2, [sp, #12]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	bfb8      	it	lt
 800ccba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ccbe:	3402      	adds	r4, #2
 800ccc0:	9305      	str	r3, [sp, #20]
 800ccc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cd98 <_vfiprintf_r+0x230>
 800ccc6:	7821      	ldrb	r1, [r4, #0]
 800ccc8:	2203      	movs	r2, #3
 800ccca:	4650      	mov	r0, sl
 800cccc:	f7f3 fa88 	bl	80001e0 <memchr>
 800ccd0:	b138      	cbz	r0, 800cce2 <_vfiprintf_r+0x17a>
 800ccd2:	9b04      	ldr	r3, [sp, #16]
 800ccd4:	eba0 000a 	sub.w	r0, r0, sl
 800ccd8:	2240      	movs	r2, #64	; 0x40
 800ccda:	4082      	lsls	r2, r0
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	3401      	adds	r4, #1
 800cce0:	9304      	str	r3, [sp, #16]
 800cce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cce6:	4829      	ldr	r0, [pc, #164]	; (800cd8c <_vfiprintf_r+0x224>)
 800cce8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ccec:	2206      	movs	r2, #6
 800ccee:	f7f3 fa77 	bl	80001e0 <memchr>
 800ccf2:	2800      	cmp	r0, #0
 800ccf4:	d03f      	beq.n	800cd76 <_vfiprintf_r+0x20e>
 800ccf6:	4b26      	ldr	r3, [pc, #152]	; (800cd90 <_vfiprintf_r+0x228>)
 800ccf8:	bb1b      	cbnz	r3, 800cd42 <_vfiprintf_r+0x1da>
 800ccfa:	9b03      	ldr	r3, [sp, #12]
 800ccfc:	3307      	adds	r3, #7
 800ccfe:	f023 0307 	bic.w	r3, r3, #7
 800cd02:	3308      	adds	r3, #8
 800cd04:	9303      	str	r3, [sp, #12]
 800cd06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd08:	443b      	add	r3, r7
 800cd0a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd0c:	e768      	b.n	800cbe0 <_vfiprintf_r+0x78>
 800cd0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd12:	460c      	mov	r4, r1
 800cd14:	2001      	movs	r0, #1
 800cd16:	e7a6      	b.n	800cc66 <_vfiprintf_r+0xfe>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	3401      	adds	r4, #1
 800cd1c:	9305      	str	r3, [sp, #20]
 800cd1e:	4619      	mov	r1, r3
 800cd20:	f04f 0c0a 	mov.w	ip, #10
 800cd24:	4620      	mov	r0, r4
 800cd26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd2a:	3a30      	subs	r2, #48	; 0x30
 800cd2c:	2a09      	cmp	r2, #9
 800cd2e:	d903      	bls.n	800cd38 <_vfiprintf_r+0x1d0>
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d0c6      	beq.n	800ccc2 <_vfiprintf_r+0x15a>
 800cd34:	9105      	str	r1, [sp, #20]
 800cd36:	e7c4      	b.n	800ccc2 <_vfiprintf_r+0x15a>
 800cd38:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e7f0      	b.n	800cd24 <_vfiprintf_r+0x1bc>
 800cd42:	ab03      	add	r3, sp, #12
 800cd44:	9300      	str	r3, [sp, #0]
 800cd46:	462a      	mov	r2, r5
 800cd48:	4b12      	ldr	r3, [pc, #72]	; (800cd94 <_vfiprintf_r+0x22c>)
 800cd4a:	a904      	add	r1, sp, #16
 800cd4c:	4630      	mov	r0, r6
 800cd4e:	f3af 8000 	nop.w
 800cd52:	4607      	mov	r7, r0
 800cd54:	1c78      	adds	r0, r7, #1
 800cd56:	d1d6      	bne.n	800cd06 <_vfiprintf_r+0x19e>
 800cd58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd5a:	07d9      	lsls	r1, r3, #31
 800cd5c:	d405      	bmi.n	800cd6a <_vfiprintf_r+0x202>
 800cd5e:	89ab      	ldrh	r3, [r5, #12]
 800cd60:	059a      	lsls	r2, r3, #22
 800cd62:	d402      	bmi.n	800cd6a <_vfiprintf_r+0x202>
 800cd64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd66:	f7ff fc75 	bl	800c654 <__retarget_lock_release_recursive>
 800cd6a:	89ab      	ldrh	r3, [r5, #12]
 800cd6c:	065b      	lsls	r3, r3, #25
 800cd6e:	f53f af1d 	bmi.w	800cbac <_vfiprintf_r+0x44>
 800cd72:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd74:	e71c      	b.n	800cbb0 <_vfiprintf_r+0x48>
 800cd76:	ab03      	add	r3, sp, #12
 800cd78:	9300      	str	r3, [sp, #0]
 800cd7a:	462a      	mov	r2, r5
 800cd7c:	4b05      	ldr	r3, [pc, #20]	; (800cd94 <_vfiprintf_r+0x22c>)
 800cd7e:	a904      	add	r1, sp, #16
 800cd80:	4630      	mov	r0, r6
 800cd82:	f000 f879 	bl	800ce78 <_printf_i>
 800cd86:	e7e4      	b.n	800cd52 <_vfiprintf_r+0x1ea>
 800cd88:	0800d6c4 	.word	0x0800d6c4
 800cd8c:	0800d6ce 	.word	0x0800d6ce
 800cd90:	00000000 	.word	0x00000000
 800cd94:	0800cb43 	.word	0x0800cb43
 800cd98:	0800d6ca 	.word	0x0800d6ca

0800cd9c <_printf_common>:
 800cd9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cda0:	4616      	mov	r6, r2
 800cda2:	4699      	mov	r9, r3
 800cda4:	688a      	ldr	r2, [r1, #8]
 800cda6:	690b      	ldr	r3, [r1, #16]
 800cda8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cdac:	4293      	cmp	r3, r2
 800cdae:	bfb8      	it	lt
 800cdb0:	4613      	movlt	r3, r2
 800cdb2:	6033      	str	r3, [r6, #0]
 800cdb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cdb8:	4607      	mov	r7, r0
 800cdba:	460c      	mov	r4, r1
 800cdbc:	b10a      	cbz	r2, 800cdc2 <_printf_common+0x26>
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	6033      	str	r3, [r6, #0]
 800cdc2:	6823      	ldr	r3, [r4, #0]
 800cdc4:	0699      	lsls	r1, r3, #26
 800cdc6:	bf42      	ittt	mi
 800cdc8:	6833      	ldrmi	r3, [r6, #0]
 800cdca:	3302      	addmi	r3, #2
 800cdcc:	6033      	strmi	r3, [r6, #0]
 800cdce:	6825      	ldr	r5, [r4, #0]
 800cdd0:	f015 0506 	ands.w	r5, r5, #6
 800cdd4:	d106      	bne.n	800cde4 <_printf_common+0x48>
 800cdd6:	f104 0a19 	add.w	sl, r4, #25
 800cdda:	68e3      	ldr	r3, [r4, #12]
 800cddc:	6832      	ldr	r2, [r6, #0]
 800cdde:	1a9b      	subs	r3, r3, r2
 800cde0:	42ab      	cmp	r3, r5
 800cde2:	dc26      	bgt.n	800ce32 <_printf_common+0x96>
 800cde4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cde8:	1e13      	subs	r3, r2, #0
 800cdea:	6822      	ldr	r2, [r4, #0]
 800cdec:	bf18      	it	ne
 800cdee:	2301      	movne	r3, #1
 800cdf0:	0692      	lsls	r2, r2, #26
 800cdf2:	d42b      	bmi.n	800ce4c <_printf_common+0xb0>
 800cdf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cdf8:	4649      	mov	r1, r9
 800cdfa:	4638      	mov	r0, r7
 800cdfc:	47c0      	blx	r8
 800cdfe:	3001      	adds	r0, #1
 800ce00:	d01e      	beq.n	800ce40 <_printf_common+0xa4>
 800ce02:	6823      	ldr	r3, [r4, #0]
 800ce04:	6922      	ldr	r2, [r4, #16]
 800ce06:	f003 0306 	and.w	r3, r3, #6
 800ce0a:	2b04      	cmp	r3, #4
 800ce0c:	bf02      	ittt	eq
 800ce0e:	68e5      	ldreq	r5, [r4, #12]
 800ce10:	6833      	ldreq	r3, [r6, #0]
 800ce12:	1aed      	subeq	r5, r5, r3
 800ce14:	68a3      	ldr	r3, [r4, #8]
 800ce16:	bf0c      	ite	eq
 800ce18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce1c:	2500      	movne	r5, #0
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	bfc4      	itt	gt
 800ce22:	1a9b      	subgt	r3, r3, r2
 800ce24:	18ed      	addgt	r5, r5, r3
 800ce26:	2600      	movs	r6, #0
 800ce28:	341a      	adds	r4, #26
 800ce2a:	42b5      	cmp	r5, r6
 800ce2c:	d11a      	bne.n	800ce64 <_printf_common+0xc8>
 800ce2e:	2000      	movs	r0, #0
 800ce30:	e008      	b.n	800ce44 <_printf_common+0xa8>
 800ce32:	2301      	movs	r3, #1
 800ce34:	4652      	mov	r2, sl
 800ce36:	4649      	mov	r1, r9
 800ce38:	4638      	mov	r0, r7
 800ce3a:	47c0      	blx	r8
 800ce3c:	3001      	adds	r0, #1
 800ce3e:	d103      	bne.n	800ce48 <_printf_common+0xac>
 800ce40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce48:	3501      	adds	r5, #1
 800ce4a:	e7c6      	b.n	800cdda <_printf_common+0x3e>
 800ce4c:	18e1      	adds	r1, r4, r3
 800ce4e:	1c5a      	adds	r2, r3, #1
 800ce50:	2030      	movs	r0, #48	; 0x30
 800ce52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce56:	4422      	add	r2, r4
 800ce58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce60:	3302      	adds	r3, #2
 800ce62:	e7c7      	b.n	800cdf4 <_printf_common+0x58>
 800ce64:	2301      	movs	r3, #1
 800ce66:	4622      	mov	r2, r4
 800ce68:	4649      	mov	r1, r9
 800ce6a:	4638      	mov	r0, r7
 800ce6c:	47c0      	blx	r8
 800ce6e:	3001      	adds	r0, #1
 800ce70:	d0e6      	beq.n	800ce40 <_printf_common+0xa4>
 800ce72:	3601      	adds	r6, #1
 800ce74:	e7d9      	b.n	800ce2a <_printf_common+0x8e>
	...

0800ce78 <_printf_i>:
 800ce78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce7c:	7e0f      	ldrb	r7, [r1, #24]
 800ce7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce80:	2f78      	cmp	r7, #120	; 0x78
 800ce82:	4691      	mov	r9, r2
 800ce84:	4680      	mov	r8, r0
 800ce86:	460c      	mov	r4, r1
 800ce88:	469a      	mov	sl, r3
 800ce8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce8e:	d807      	bhi.n	800cea0 <_printf_i+0x28>
 800ce90:	2f62      	cmp	r7, #98	; 0x62
 800ce92:	d80a      	bhi.n	800ceaa <_printf_i+0x32>
 800ce94:	2f00      	cmp	r7, #0
 800ce96:	f000 80d4 	beq.w	800d042 <_printf_i+0x1ca>
 800ce9a:	2f58      	cmp	r7, #88	; 0x58
 800ce9c:	f000 80c0 	beq.w	800d020 <_printf_i+0x1a8>
 800cea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cea8:	e03a      	b.n	800cf20 <_printf_i+0xa8>
 800ceaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ceae:	2b15      	cmp	r3, #21
 800ceb0:	d8f6      	bhi.n	800cea0 <_printf_i+0x28>
 800ceb2:	a101      	add	r1, pc, #4	; (adr r1, 800ceb8 <_printf_i+0x40>)
 800ceb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ceb8:	0800cf11 	.word	0x0800cf11
 800cebc:	0800cf25 	.word	0x0800cf25
 800cec0:	0800cea1 	.word	0x0800cea1
 800cec4:	0800cea1 	.word	0x0800cea1
 800cec8:	0800cea1 	.word	0x0800cea1
 800cecc:	0800cea1 	.word	0x0800cea1
 800ced0:	0800cf25 	.word	0x0800cf25
 800ced4:	0800cea1 	.word	0x0800cea1
 800ced8:	0800cea1 	.word	0x0800cea1
 800cedc:	0800cea1 	.word	0x0800cea1
 800cee0:	0800cea1 	.word	0x0800cea1
 800cee4:	0800d029 	.word	0x0800d029
 800cee8:	0800cf51 	.word	0x0800cf51
 800ceec:	0800cfe3 	.word	0x0800cfe3
 800cef0:	0800cea1 	.word	0x0800cea1
 800cef4:	0800cea1 	.word	0x0800cea1
 800cef8:	0800d04b 	.word	0x0800d04b
 800cefc:	0800cea1 	.word	0x0800cea1
 800cf00:	0800cf51 	.word	0x0800cf51
 800cf04:	0800cea1 	.word	0x0800cea1
 800cf08:	0800cea1 	.word	0x0800cea1
 800cf0c:	0800cfeb 	.word	0x0800cfeb
 800cf10:	682b      	ldr	r3, [r5, #0]
 800cf12:	1d1a      	adds	r2, r3, #4
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	602a      	str	r2, [r5, #0]
 800cf18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf20:	2301      	movs	r3, #1
 800cf22:	e09f      	b.n	800d064 <_printf_i+0x1ec>
 800cf24:	6820      	ldr	r0, [r4, #0]
 800cf26:	682b      	ldr	r3, [r5, #0]
 800cf28:	0607      	lsls	r7, r0, #24
 800cf2a:	f103 0104 	add.w	r1, r3, #4
 800cf2e:	6029      	str	r1, [r5, #0]
 800cf30:	d501      	bpl.n	800cf36 <_printf_i+0xbe>
 800cf32:	681e      	ldr	r6, [r3, #0]
 800cf34:	e003      	b.n	800cf3e <_printf_i+0xc6>
 800cf36:	0646      	lsls	r6, r0, #25
 800cf38:	d5fb      	bpl.n	800cf32 <_printf_i+0xba>
 800cf3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cf3e:	2e00      	cmp	r6, #0
 800cf40:	da03      	bge.n	800cf4a <_printf_i+0xd2>
 800cf42:	232d      	movs	r3, #45	; 0x2d
 800cf44:	4276      	negs	r6, r6
 800cf46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf4a:	485a      	ldr	r0, [pc, #360]	; (800d0b4 <_printf_i+0x23c>)
 800cf4c:	230a      	movs	r3, #10
 800cf4e:	e012      	b.n	800cf76 <_printf_i+0xfe>
 800cf50:	682b      	ldr	r3, [r5, #0]
 800cf52:	6820      	ldr	r0, [r4, #0]
 800cf54:	1d19      	adds	r1, r3, #4
 800cf56:	6029      	str	r1, [r5, #0]
 800cf58:	0605      	lsls	r5, r0, #24
 800cf5a:	d501      	bpl.n	800cf60 <_printf_i+0xe8>
 800cf5c:	681e      	ldr	r6, [r3, #0]
 800cf5e:	e002      	b.n	800cf66 <_printf_i+0xee>
 800cf60:	0641      	lsls	r1, r0, #25
 800cf62:	d5fb      	bpl.n	800cf5c <_printf_i+0xe4>
 800cf64:	881e      	ldrh	r6, [r3, #0]
 800cf66:	4853      	ldr	r0, [pc, #332]	; (800d0b4 <_printf_i+0x23c>)
 800cf68:	2f6f      	cmp	r7, #111	; 0x6f
 800cf6a:	bf0c      	ite	eq
 800cf6c:	2308      	moveq	r3, #8
 800cf6e:	230a      	movne	r3, #10
 800cf70:	2100      	movs	r1, #0
 800cf72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf76:	6865      	ldr	r5, [r4, #4]
 800cf78:	60a5      	str	r5, [r4, #8]
 800cf7a:	2d00      	cmp	r5, #0
 800cf7c:	bfa2      	ittt	ge
 800cf7e:	6821      	ldrge	r1, [r4, #0]
 800cf80:	f021 0104 	bicge.w	r1, r1, #4
 800cf84:	6021      	strge	r1, [r4, #0]
 800cf86:	b90e      	cbnz	r6, 800cf8c <_printf_i+0x114>
 800cf88:	2d00      	cmp	r5, #0
 800cf8a:	d04b      	beq.n	800d024 <_printf_i+0x1ac>
 800cf8c:	4615      	mov	r5, r2
 800cf8e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf92:	fb03 6711 	mls	r7, r3, r1, r6
 800cf96:	5dc7      	ldrb	r7, [r0, r7]
 800cf98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf9c:	4637      	mov	r7, r6
 800cf9e:	42bb      	cmp	r3, r7
 800cfa0:	460e      	mov	r6, r1
 800cfa2:	d9f4      	bls.n	800cf8e <_printf_i+0x116>
 800cfa4:	2b08      	cmp	r3, #8
 800cfa6:	d10b      	bne.n	800cfc0 <_printf_i+0x148>
 800cfa8:	6823      	ldr	r3, [r4, #0]
 800cfaa:	07de      	lsls	r6, r3, #31
 800cfac:	d508      	bpl.n	800cfc0 <_printf_i+0x148>
 800cfae:	6923      	ldr	r3, [r4, #16]
 800cfb0:	6861      	ldr	r1, [r4, #4]
 800cfb2:	4299      	cmp	r1, r3
 800cfb4:	bfde      	ittt	le
 800cfb6:	2330      	movle	r3, #48	; 0x30
 800cfb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cfbc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cfc0:	1b52      	subs	r2, r2, r5
 800cfc2:	6122      	str	r2, [r4, #16]
 800cfc4:	f8cd a000 	str.w	sl, [sp]
 800cfc8:	464b      	mov	r3, r9
 800cfca:	aa03      	add	r2, sp, #12
 800cfcc:	4621      	mov	r1, r4
 800cfce:	4640      	mov	r0, r8
 800cfd0:	f7ff fee4 	bl	800cd9c <_printf_common>
 800cfd4:	3001      	adds	r0, #1
 800cfd6:	d14a      	bne.n	800d06e <_printf_i+0x1f6>
 800cfd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfdc:	b004      	add	sp, #16
 800cfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe2:	6823      	ldr	r3, [r4, #0]
 800cfe4:	f043 0320 	orr.w	r3, r3, #32
 800cfe8:	6023      	str	r3, [r4, #0]
 800cfea:	4833      	ldr	r0, [pc, #204]	; (800d0b8 <_printf_i+0x240>)
 800cfec:	2778      	movs	r7, #120	; 0x78
 800cfee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cff2:	6823      	ldr	r3, [r4, #0]
 800cff4:	6829      	ldr	r1, [r5, #0]
 800cff6:	061f      	lsls	r7, r3, #24
 800cff8:	f851 6b04 	ldr.w	r6, [r1], #4
 800cffc:	d402      	bmi.n	800d004 <_printf_i+0x18c>
 800cffe:	065f      	lsls	r7, r3, #25
 800d000:	bf48      	it	mi
 800d002:	b2b6      	uxthmi	r6, r6
 800d004:	07df      	lsls	r7, r3, #31
 800d006:	bf48      	it	mi
 800d008:	f043 0320 	orrmi.w	r3, r3, #32
 800d00c:	6029      	str	r1, [r5, #0]
 800d00e:	bf48      	it	mi
 800d010:	6023      	strmi	r3, [r4, #0]
 800d012:	b91e      	cbnz	r6, 800d01c <_printf_i+0x1a4>
 800d014:	6823      	ldr	r3, [r4, #0]
 800d016:	f023 0320 	bic.w	r3, r3, #32
 800d01a:	6023      	str	r3, [r4, #0]
 800d01c:	2310      	movs	r3, #16
 800d01e:	e7a7      	b.n	800cf70 <_printf_i+0xf8>
 800d020:	4824      	ldr	r0, [pc, #144]	; (800d0b4 <_printf_i+0x23c>)
 800d022:	e7e4      	b.n	800cfee <_printf_i+0x176>
 800d024:	4615      	mov	r5, r2
 800d026:	e7bd      	b.n	800cfa4 <_printf_i+0x12c>
 800d028:	682b      	ldr	r3, [r5, #0]
 800d02a:	6826      	ldr	r6, [r4, #0]
 800d02c:	6961      	ldr	r1, [r4, #20]
 800d02e:	1d18      	adds	r0, r3, #4
 800d030:	6028      	str	r0, [r5, #0]
 800d032:	0635      	lsls	r5, r6, #24
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	d501      	bpl.n	800d03c <_printf_i+0x1c4>
 800d038:	6019      	str	r1, [r3, #0]
 800d03a:	e002      	b.n	800d042 <_printf_i+0x1ca>
 800d03c:	0670      	lsls	r0, r6, #25
 800d03e:	d5fb      	bpl.n	800d038 <_printf_i+0x1c0>
 800d040:	8019      	strh	r1, [r3, #0]
 800d042:	2300      	movs	r3, #0
 800d044:	6123      	str	r3, [r4, #16]
 800d046:	4615      	mov	r5, r2
 800d048:	e7bc      	b.n	800cfc4 <_printf_i+0x14c>
 800d04a:	682b      	ldr	r3, [r5, #0]
 800d04c:	1d1a      	adds	r2, r3, #4
 800d04e:	602a      	str	r2, [r5, #0]
 800d050:	681d      	ldr	r5, [r3, #0]
 800d052:	6862      	ldr	r2, [r4, #4]
 800d054:	2100      	movs	r1, #0
 800d056:	4628      	mov	r0, r5
 800d058:	f7f3 f8c2 	bl	80001e0 <memchr>
 800d05c:	b108      	cbz	r0, 800d062 <_printf_i+0x1ea>
 800d05e:	1b40      	subs	r0, r0, r5
 800d060:	6060      	str	r0, [r4, #4]
 800d062:	6863      	ldr	r3, [r4, #4]
 800d064:	6123      	str	r3, [r4, #16]
 800d066:	2300      	movs	r3, #0
 800d068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d06c:	e7aa      	b.n	800cfc4 <_printf_i+0x14c>
 800d06e:	6923      	ldr	r3, [r4, #16]
 800d070:	462a      	mov	r2, r5
 800d072:	4649      	mov	r1, r9
 800d074:	4640      	mov	r0, r8
 800d076:	47d0      	blx	sl
 800d078:	3001      	adds	r0, #1
 800d07a:	d0ad      	beq.n	800cfd8 <_printf_i+0x160>
 800d07c:	6823      	ldr	r3, [r4, #0]
 800d07e:	079b      	lsls	r3, r3, #30
 800d080:	d413      	bmi.n	800d0aa <_printf_i+0x232>
 800d082:	68e0      	ldr	r0, [r4, #12]
 800d084:	9b03      	ldr	r3, [sp, #12]
 800d086:	4298      	cmp	r0, r3
 800d088:	bfb8      	it	lt
 800d08a:	4618      	movlt	r0, r3
 800d08c:	e7a6      	b.n	800cfdc <_printf_i+0x164>
 800d08e:	2301      	movs	r3, #1
 800d090:	4632      	mov	r2, r6
 800d092:	4649      	mov	r1, r9
 800d094:	4640      	mov	r0, r8
 800d096:	47d0      	blx	sl
 800d098:	3001      	adds	r0, #1
 800d09a:	d09d      	beq.n	800cfd8 <_printf_i+0x160>
 800d09c:	3501      	adds	r5, #1
 800d09e:	68e3      	ldr	r3, [r4, #12]
 800d0a0:	9903      	ldr	r1, [sp, #12]
 800d0a2:	1a5b      	subs	r3, r3, r1
 800d0a4:	42ab      	cmp	r3, r5
 800d0a6:	dcf2      	bgt.n	800d08e <_printf_i+0x216>
 800d0a8:	e7eb      	b.n	800d082 <_printf_i+0x20a>
 800d0aa:	2500      	movs	r5, #0
 800d0ac:	f104 0619 	add.w	r6, r4, #25
 800d0b0:	e7f5      	b.n	800d09e <_printf_i+0x226>
 800d0b2:	bf00      	nop
 800d0b4:	0800d6d5 	.word	0x0800d6d5
 800d0b8:	0800d6e6 	.word	0x0800d6e6

0800d0bc <__sflush_r>:
 800d0bc:	898a      	ldrh	r2, [r1, #12]
 800d0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c2:	4605      	mov	r5, r0
 800d0c4:	0710      	lsls	r0, r2, #28
 800d0c6:	460c      	mov	r4, r1
 800d0c8:	d458      	bmi.n	800d17c <__sflush_r+0xc0>
 800d0ca:	684b      	ldr	r3, [r1, #4]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	dc05      	bgt.n	800d0dc <__sflush_r+0x20>
 800d0d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	dc02      	bgt.n	800d0dc <__sflush_r+0x20>
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0de:	2e00      	cmp	r6, #0
 800d0e0:	d0f9      	beq.n	800d0d6 <__sflush_r+0x1a>
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0e8:	682f      	ldr	r7, [r5, #0]
 800d0ea:	6a21      	ldr	r1, [r4, #32]
 800d0ec:	602b      	str	r3, [r5, #0]
 800d0ee:	d032      	beq.n	800d156 <__sflush_r+0x9a>
 800d0f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0f2:	89a3      	ldrh	r3, [r4, #12]
 800d0f4:	075a      	lsls	r2, r3, #29
 800d0f6:	d505      	bpl.n	800d104 <__sflush_r+0x48>
 800d0f8:	6863      	ldr	r3, [r4, #4]
 800d0fa:	1ac0      	subs	r0, r0, r3
 800d0fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0fe:	b10b      	cbz	r3, 800d104 <__sflush_r+0x48>
 800d100:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d102:	1ac0      	subs	r0, r0, r3
 800d104:	2300      	movs	r3, #0
 800d106:	4602      	mov	r2, r0
 800d108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d10a:	6a21      	ldr	r1, [r4, #32]
 800d10c:	4628      	mov	r0, r5
 800d10e:	47b0      	blx	r6
 800d110:	1c43      	adds	r3, r0, #1
 800d112:	89a3      	ldrh	r3, [r4, #12]
 800d114:	d106      	bne.n	800d124 <__sflush_r+0x68>
 800d116:	6829      	ldr	r1, [r5, #0]
 800d118:	291d      	cmp	r1, #29
 800d11a:	d82b      	bhi.n	800d174 <__sflush_r+0xb8>
 800d11c:	4a29      	ldr	r2, [pc, #164]	; (800d1c4 <__sflush_r+0x108>)
 800d11e:	410a      	asrs	r2, r1
 800d120:	07d6      	lsls	r6, r2, #31
 800d122:	d427      	bmi.n	800d174 <__sflush_r+0xb8>
 800d124:	2200      	movs	r2, #0
 800d126:	6062      	str	r2, [r4, #4]
 800d128:	04d9      	lsls	r1, r3, #19
 800d12a:	6922      	ldr	r2, [r4, #16]
 800d12c:	6022      	str	r2, [r4, #0]
 800d12e:	d504      	bpl.n	800d13a <__sflush_r+0x7e>
 800d130:	1c42      	adds	r2, r0, #1
 800d132:	d101      	bne.n	800d138 <__sflush_r+0x7c>
 800d134:	682b      	ldr	r3, [r5, #0]
 800d136:	b903      	cbnz	r3, 800d13a <__sflush_r+0x7e>
 800d138:	6560      	str	r0, [r4, #84]	; 0x54
 800d13a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d13c:	602f      	str	r7, [r5, #0]
 800d13e:	2900      	cmp	r1, #0
 800d140:	d0c9      	beq.n	800d0d6 <__sflush_r+0x1a>
 800d142:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d146:	4299      	cmp	r1, r3
 800d148:	d002      	beq.n	800d150 <__sflush_r+0x94>
 800d14a:	4628      	mov	r0, r5
 800d14c:	f7ff fa92 	bl	800c674 <_free_r>
 800d150:	2000      	movs	r0, #0
 800d152:	6360      	str	r0, [r4, #52]	; 0x34
 800d154:	e7c0      	b.n	800d0d8 <__sflush_r+0x1c>
 800d156:	2301      	movs	r3, #1
 800d158:	4628      	mov	r0, r5
 800d15a:	47b0      	blx	r6
 800d15c:	1c41      	adds	r1, r0, #1
 800d15e:	d1c8      	bne.n	800d0f2 <__sflush_r+0x36>
 800d160:	682b      	ldr	r3, [r5, #0]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d0c5      	beq.n	800d0f2 <__sflush_r+0x36>
 800d166:	2b1d      	cmp	r3, #29
 800d168:	d001      	beq.n	800d16e <__sflush_r+0xb2>
 800d16a:	2b16      	cmp	r3, #22
 800d16c:	d101      	bne.n	800d172 <__sflush_r+0xb6>
 800d16e:	602f      	str	r7, [r5, #0]
 800d170:	e7b1      	b.n	800d0d6 <__sflush_r+0x1a>
 800d172:	89a3      	ldrh	r3, [r4, #12]
 800d174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d178:	81a3      	strh	r3, [r4, #12]
 800d17a:	e7ad      	b.n	800d0d8 <__sflush_r+0x1c>
 800d17c:	690f      	ldr	r7, [r1, #16]
 800d17e:	2f00      	cmp	r7, #0
 800d180:	d0a9      	beq.n	800d0d6 <__sflush_r+0x1a>
 800d182:	0793      	lsls	r3, r2, #30
 800d184:	680e      	ldr	r6, [r1, #0]
 800d186:	bf08      	it	eq
 800d188:	694b      	ldreq	r3, [r1, #20]
 800d18a:	600f      	str	r7, [r1, #0]
 800d18c:	bf18      	it	ne
 800d18e:	2300      	movne	r3, #0
 800d190:	eba6 0807 	sub.w	r8, r6, r7
 800d194:	608b      	str	r3, [r1, #8]
 800d196:	f1b8 0f00 	cmp.w	r8, #0
 800d19a:	dd9c      	ble.n	800d0d6 <__sflush_r+0x1a>
 800d19c:	6a21      	ldr	r1, [r4, #32]
 800d19e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d1a0:	4643      	mov	r3, r8
 800d1a2:	463a      	mov	r2, r7
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	47b0      	blx	r6
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	dc06      	bgt.n	800d1ba <__sflush_r+0xfe>
 800d1ac:	89a3      	ldrh	r3, [r4, #12]
 800d1ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1b2:	81a3      	strh	r3, [r4, #12]
 800d1b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1b8:	e78e      	b.n	800d0d8 <__sflush_r+0x1c>
 800d1ba:	4407      	add	r7, r0
 800d1bc:	eba8 0800 	sub.w	r8, r8, r0
 800d1c0:	e7e9      	b.n	800d196 <__sflush_r+0xda>
 800d1c2:	bf00      	nop
 800d1c4:	dfbffffe 	.word	0xdfbffffe

0800d1c8 <_fflush_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	690b      	ldr	r3, [r1, #16]
 800d1cc:	4605      	mov	r5, r0
 800d1ce:	460c      	mov	r4, r1
 800d1d0:	b913      	cbnz	r3, 800d1d8 <_fflush_r+0x10>
 800d1d2:	2500      	movs	r5, #0
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	bd38      	pop	{r3, r4, r5, pc}
 800d1d8:	b118      	cbz	r0, 800d1e2 <_fflush_r+0x1a>
 800d1da:	6a03      	ldr	r3, [r0, #32]
 800d1dc:	b90b      	cbnz	r3, 800d1e2 <_fflush_r+0x1a>
 800d1de:	f7ff f8a1 	bl	800c324 <__sinit>
 800d1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d0f3      	beq.n	800d1d2 <_fflush_r+0xa>
 800d1ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1ec:	07d0      	lsls	r0, r2, #31
 800d1ee:	d404      	bmi.n	800d1fa <_fflush_r+0x32>
 800d1f0:	0599      	lsls	r1, r3, #22
 800d1f2:	d402      	bmi.n	800d1fa <_fflush_r+0x32>
 800d1f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1f6:	f7ff fa2c 	bl	800c652 <__retarget_lock_acquire_recursive>
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	4621      	mov	r1, r4
 800d1fe:	f7ff ff5d 	bl	800d0bc <__sflush_r>
 800d202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d204:	07da      	lsls	r2, r3, #31
 800d206:	4605      	mov	r5, r0
 800d208:	d4e4      	bmi.n	800d1d4 <_fflush_r+0xc>
 800d20a:	89a3      	ldrh	r3, [r4, #12]
 800d20c:	059b      	lsls	r3, r3, #22
 800d20e:	d4e1      	bmi.n	800d1d4 <_fflush_r+0xc>
 800d210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d212:	f7ff fa1f 	bl	800c654 <__retarget_lock_release_recursive>
 800d216:	e7dd      	b.n	800d1d4 <_fflush_r+0xc>

0800d218 <_putc_r>:
 800d218:	b570      	push	{r4, r5, r6, lr}
 800d21a:	460d      	mov	r5, r1
 800d21c:	4614      	mov	r4, r2
 800d21e:	4606      	mov	r6, r0
 800d220:	b118      	cbz	r0, 800d22a <_putc_r+0x12>
 800d222:	6a03      	ldr	r3, [r0, #32]
 800d224:	b90b      	cbnz	r3, 800d22a <_putc_r+0x12>
 800d226:	f7ff f87d 	bl	800c324 <__sinit>
 800d22a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d22c:	07d8      	lsls	r0, r3, #31
 800d22e:	d405      	bmi.n	800d23c <_putc_r+0x24>
 800d230:	89a3      	ldrh	r3, [r4, #12]
 800d232:	0599      	lsls	r1, r3, #22
 800d234:	d402      	bmi.n	800d23c <_putc_r+0x24>
 800d236:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d238:	f7ff fa0b 	bl	800c652 <__retarget_lock_acquire_recursive>
 800d23c:	68a3      	ldr	r3, [r4, #8]
 800d23e:	3b01      	subs	r3, #1
 800d240:	2b00      	cmp	r3, #0
 800d242:	60a3      	str	r3, [r4, #8]
 800d244:	da05      	bge.n	800d252 <_putc_r+0x3a>
 800d246:	69a2      	ldr	r2, [r4, #24]
 800d248:	4293      	cmp	r3, r2
 800d24a:	db12      	blt.n	800d272 <_putc_r+0x5a>
 800d24c:	b2eb      	uxtb	r3, r5
 800d24e:	2b0a      	cmp	r3, #10
 800d250:	d00f      	beq.n	800d272 <_putc_r+0x5a>
 800d252:	6823      	ldr	r3, [r4, #0]
 800d254:	1c5a      	adds	r2, r3, #1
 800d256:	6022      	str	r2, [r4, #0]
 800d258:	701d      	strb	r5, [r3, #0]
 800d25a:	b2ed      	uxtb	r5, r5
 800d25c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d25e:	07da      	lsls	r2, r3, #31
 800d260:	d405      	bmi.n	800d26e <_putc_r+0x56>
 800d262:	89a3      	ldrh	r3, [r4, #12]
 800d264:	059b      	lsls	r3, r3, #22
 800d266:	d402      	bmi.n	800d26e <_putc_r+0x56>
 800d268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d26a:	f7ff f9f3 	bl	800c654 <__retarget_lock_release_recursive>
 800d26e:	4628      	mov	r0, r5
 800d270:	bd70      	pop	{r4, r5, r6, pc}
 800d272:	4629      	mov	r1, r5
 800d274:	4622      	mov	r2, r4
 800d276:	4630      	mov	r0, r6
 800d278:	f000 f802 	bl	800d280 <__swbuf_r>
 800d27c:	4605      	mov	r5, r0
 800d27e:	e7ed      	b.n	800d25c <_putc_r+0x44>

0800d280 <__swbuf_r>:
 800d280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d282:	460e      	mov	r6, r1
 800d284:	4614      	mov	r4, r2
 800d286:	4605      	mov	r5, r0
 800d288:	b118      	cbz	r0, 800d292 <__swbuf_r+0x12>
 800d28a:	6a03      	ldr	r3, [r0, #32]
 800d28c:	b90b      	cbnz	r3, 800d292 <__swbuf_r+0x12>
 800d28e:	f7ff f849 	bl	800c324 <__sinit>
 800d292:	69a3      	ldr	r3, [r4, #24]
 800d294:	60a3      	str	r3, [r4, #8]
 800d296:	89a3      	ldrh	r3, [r4, #12]
 800d298:	071a      	lsls	r2, r3, #28
 800d29a:	d525      	bpl.n	800d2e8 <__swbuf_r+0x68>
 800d29c:	6923      	ldr	r3, [r4, #16]
 800d29e:	b31b      	cbz	r3, 800d2e8 <__swbuf_r+0x68>
 800d2a0:	6823      	ldr	r3, [r4, #0]
 800d2a2:	6922      	ldr	r2, [r4, #16]
 800d2a4:	1a98      	subs	r0, r3, r2
 800d2a6:	6963      	ldr	r3, [r4, #20]
 800d2a8:	b2f6      	uxtb	r6, r6
 800d2aa:	4283      	cmp	r3, r0
 800d2ac:	4637      	mov	r7, r6
 800d2ae:	dc04      	bgt.n	800d2ba <__swbuf_r+0x3a>
 800d2b0:	4621      	mov	r1, r4
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	f7ff ff88 	bl	800d1c8 <_fflush_r>
 800d2b8:	b9e0      	cbnz	r0, 800d2f4 <__swbuf_r+0x74>
 800d2ba:	68a3      	ldr	r3, [r4, #8]
 800d2bc:	3b01      	subs	r3, #1
 800d2be:	60a3      	str	r3, [r4, #8]
 800d2c0:	6823      	ldr	r3, [r4, #0]
 800d2c2:	1c5a      	adds	r2, r3, #1
 800d2c4:	6022      	str	r2, [r4, #0]
 800d2c6:	701e      	strb	r6, [r3, #0]
 800d2c8:	6962      	ldr	r2, [r4, #20]
 800d2ca:	1c43      	adds	r3, r0, #1
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d004      	beq.n	800d2da <__swbuf_r+0x5a>
 800d2d0:	89a3      	ldrh	r3, [r4, #12]
 800d2d2:	07db      	lsls	r3, r3, #31
 800d2d4:	d506      	bpl.n	800d2e4 <__swbuf_r+0x64>
 800d2d6:	2e0a      	cmp	r6, #10
 800d2d8:	d104      	bne.n	800d2e4 <__swbuf_r+0x64>
 800d2da:	4621      	mov	r1, r4
 800d2dc:	4628      	mov	r0, r5
 800d2de:	f7ff ff73 	bl	800d1c8 <_fflush_r>
 800d2e2:	b938      	cbnz	r0, 800d2f4 <__swbuf_r+0x74>
 800d2e4:	4638      	mov	r0, r7
 800d2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	f000 f806 	bl	800d2fc <__swsetup_r>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d0d5      	beq.n	800d2a0 <__swbuf_r+0x20>
 800d2f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d2f8:	e7f4      	b.n	800d2e4 <__swbuf_r+0x64>
	...

0800d2fc <__swsetup_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	4b2a      	ldr	r3, [pc, #168]	; (800d3a8 <__swsetup_r+0xac>)
 800d300:	4605      	mov	r5, r0
 800d302:	6818      	ldr	r0, [r3, #0]
 800d304:	460c      	mov	r4, r1
 800d306:	b118      	cbz	r0, 800d310 <__swsetup_r+0x14>
 800d308:	6a03      	ldr	r3, [r0, #32]
 800d30a:	b90b      	cbnz	r3, 800d310 <__swsetup_r+0x14>
 800d30c:	f7ff f80a 	bl	800c324 <__sinit>
 800d310:	89a3      	ldrh	r3, [r4, #12]
 800d312:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d316:	0718      	lsls	r0, r3, #28
 800d318:	d422      	bmi.n	800d360 <__swsetup_r+0x64>
 800d31a:	06d9      	lsls	r1, r3, #27
 800d31c:	d407      	bmi.n	800d32e <__swsetup_r+0x32>
 800d31e:	2309      	movs	r3, #9
 800d320:	602b      	str	r3, [r5, #0]
 800d322:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d326:	81a3      	strh	r3, [r4, #12]
 800d328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d32c:	e034      	b.n	800d398 <__swsetup_r+0x9c>
 800d32e:	0758      	lsls	r0, r3, #29
 800d330:	d512      	bpl.n	800d358 <__swsetup_r+0x5c>
 800d332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d334:	b141      	cbz	r1, 800d348 <__swsetup_r+0x4c>
 800d336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d33a:	4299      	cmp	r1, r3
 800d33c:	d002      	beq.n	800d344 <__swsetup_r+0x48>
 800d33e:	4628      	mov	r0, r5
 800d340:	f7ff f998 	bl	800c674 <_free_r>
 800d344:	2300      	movs	r3, #0
 800d346:	6363      	str	r3, [r4, #52]	; 0x34
 800d348:	89a3      	ldrh	r3, [r4, #12]
 800d34a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d34e:	81a3      	strh	r3, [r4, #12]
 800d350:	2300      	movs	r3, #0
 800d352:	6063      	str	r3, [r4, #4]
 800d354:	6923      	ldr	r3, [r4, #16]
 800d356:	6023      	str	r3, [r4, #0]
 800d358:	89a3      	ldrh	r3, [r4, #12]
 800d35a:	f043 0308 	orr.w	r3, r3, #8
 800d35e:	81a3      	strh	r3, [r4, #12]
 800d360:	6923      	ldr	r3, [r4, #16]
 800d362:	b94b      	cbnz	r3, 800d378 <__swsetup_r+0x7c>
 800d364:	89a3      	ldrh	r3, [r4, #12]
 800d366:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d36a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d36e:	d003      	beq.n	800d378 <__swsetup_r+0x7c>
 800d370:	4621      	mov	r1, r4
 800d372:	4628      	mov	r0, r5
 800d374:	f000 f899 	bl	800d4aa <__smakebuf_r>
 800d378:	89a0      	ldrh	r0, [r4, #12]
 800d37a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d37e:	f010 0301 	ands.w	r3, r0, #1
 800d382:	d00a      	beq.n	800d39a <__swsetup_r+0x9e>
 800d384:	2300      	movs	r3, #0
 800d386:	60a3      	str	r3, [r4, #8]
 800d388:	6963      	ldr	r3, [r4, #20]
 800d38a:	425b      	negs	r3, r3
 800d38c:	61a3      	str	r3, [r4, #24]
 800d38e:	6923      	ldr	r3, [r4, #16]
 800d390:	b943      	cbnz	r3, 800d3a4 <__swsetup_r+0xa8>
 800d392:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d396:	d1c4      	bne.n	800d322 <__swsetup_r+0x26>
 800d398:	bd38      	pop	{r3, r4, r5, pc}
 800d39a:	0781      	lsls	r1, r0, #30
 800d39c:	bf58      	it	pl
 800d39e:	6963      	ldrpl	r3, [r4, #20]
 800d3a0:	60a3      	str	r3, [r4, #8]
 800d3a2:	e7f4      	b.n	800d38e <__swsetup_r+0x92>
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	e7f7      	b.n	800d398 <__swsetup_r+0x9c>
 800d3a8:	20000304 	.word	0x20000304

0800d3ac <memmove>:
 800d3ac:	4288      	cmp	r0, r1
 800d3ae:	b510      	push	{r4, lr}
 800d3b0:	eb01 0402 	add.w	r4, r1, r2
 800d3b4:	d902      	bls.n	800d3bc <memmove+0x10>
 800d3b6:	4284      	cmp	r4, r0
 800d3b8:	4623      	mov	r3, r4
 800d3ba:	d807      	bhi.n	800d3cc <memmove+0x20>
 800d3bc:	1e43      	subs	r3, r0, #1
 800d3be:	42a1      	cmp	r1, r4
 800d3c0:	d008      	beq.n	800d3d4 <memmove+0x28>
 800d3c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3ca:	e7f8      	b.n	800d3be <memmove+0x12>
 800d3cc:	4402      	add	r2, r0
 800d3ce:	4601      	mov	r1, r0
 800d3d0:	428a      	cmp	r2, r1
 800d3d2:	d100      	bne.n	800d3d6 <memmove+0x2a>
 800d3d4:	bd10      	pop	{r4, pc}
 800d3d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3de:	e7f7      	b.n	800d3d0 <memmove+0x24>

0800d3e0 <_sbrk_r>:
 800d3e0:	b538      	push	{r3, r4, r5, lr}
 800d3e2:	4d06      	ldr	r5, [pc, #24]	; (800d3fc <_sbrk_r+0x1c>)
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	4608      	mov	r0, r1
 800d3ea:	602b      	str	r3, [r5, #0]
 800d3ec:	f7f3 fb18 	bl	8000a20 <_sbrk>
 800d3f0:	1c43      	adds	r3, r0, #1
 800d3f2:	d102      	bne.n	800d3fa <_sbrk_r+0x1a>
 800d3f4:	682b      	ldr	r3, [r5, #0]
 800d3f6:	b103      	cbz	r3, 800d3fa <_sbrk_r+0x1a>
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	bd38      	pop	{r3, r4, r5, pc}
 800d3fc:	2000de08 	.word	0x2000de08

0800d400 <_realloc_r>:
 800d400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d404:	4680      	mov	r8, r0
 800d406:	4614      	mov	r4, r2
 800d408:	460e      	mov	r6, r1
 800d40a:	b921      	cbnz	r1, 800d416 <_realloc_r+0x16>
 800d40c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d410:	4611      	mov	r1, r2
 800d412:	f7ff b99b 	b.w	800c74c <_malloc_r>
 800d416:	b92a      	cbnz	r2, 800d424 <_realloc_r+0x24>
 800d418:	f7ff f92c 	bl	800c674 <_free_r>
 800d41c:	4625      	mov	r5, r4
 800d41e:	4628      	mov	r0, r5
 800d420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d424:	f000 f8a0 	bl	800d568 <_malloc_usable_size_r>
 800d428:	4284      	cmp	r4, r0
 800d42a:	4607      	mov	r7, r0
 800d42c:	d802      	bhi.n	800d434 <_realloc_r+0x34>
 800d42e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d432:	d812      	bhi.n	800d45a <_realloc_r+0x5a>
 800d434:	4621      	mov	r1, r4
 800d436:	4640      	mov	r0, r8
 800d438:	f7ff f988 	bl	800c74c <_malloc_r>
 800d43c:	4605      	mov	r5, r0
 800d43e:	2800      	cmp	r0, #0
 800d440:	d0ed      	beq.n	800d41e <_realloc_r+0x1e>
 800d442:	42bc      	cmp	r4, r7
 800d444:	4622      	mov	r2, r4
 800d446:	4631      	mov	r1, r6
 800d448:	bf28      	it	cs
 800d44a:	463a      	movcs	r2, r7
 800d44c:	f7ff f903 	bl	800c656 <memcpy>
 800d450:	4631      	mov	r1, r6
 800d452:	4640      	mov	r0, r8
 800d454:	f7ff f90e 	bl	800c674 <_free_r>
 800d458:	e7e1      	b.n	800d41e <_realloc_r+0x1e>
 800d45a:	4635      	mov	r5, r6
 800d45c:	e7df      	b.n	800d41e <_realloc_r+0x1e>

0800d45e <__swhatbuf_r>:
 800d45e:	b570      	push	{r4, r5, r6, lr}
 800d460:	460c      	mov	r4, r1
 800d462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d466:	2900      	cmp	r1, #0
 800d468:	b096      	sub	sp, #88	; 0x58
 800d46a:	4615      	mov	r5, r2
 800d46c:	461e      	mov	r6, r3
 800d46e:	da0d      	bge.n	800d48c <__swhatbuf_r+0x2e>
 800d470:	89a3      	ldrh	r3, [r4, #12]
 800d472:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d476:	f04f 0100 	mov.w	r1, #0
 800d47a:	bf0c      	ite	eq
 800d47c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d480:	2340      	movne	r3, #64	; 0x40
 800d482:	2000      	movs	r0, #0
 800d484:	6031      	str	r1, [r6, #0]
 800d486:	602b      	str	r3, [r5, #0]
 800d488:	b016      	add	sp, #88	; 0x58
 800d48a:	bd70      	pop	{r4, r5, r6, pc}
 800d48c:	466a      	mov	r2, sp
 800d48e:	f000 f849 	bl	800d524 <_fstat_r>
 800d492:	2800      	cmp	r0, #0
 800d494:	dbec      	blt.n	800d470 <__swhatbuf_r+0x12>
 800d496:	9901      	ldr	r1, [sp, #4]
 800d498:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d49c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d4a0:	4259      	negs	r1, r3
 800d4a2:	4159      	adcs	r1, r3
 800d4a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4a8:	e7eb      	b.n	800d482 <__swhatbuf_r+0x24>

0800d4aa <__smakebuf_r>:
 800d4aa:	898b      	ldrh	r3, [r1, #12]
 800d4ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4ae:	079d      	lsls	r5, r3, #30
 800d4b0:	4606      	mov	r6, r0
 800d4b2:	460c      	mov	r4, r1
 800d4b4:	d507      	bpl.n	800d4c6 <__smakebuf_r+0x1c>
 800d4b6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d4ba:	6023      	str	r3, [r4, #0]
 800d4bc:	6123      	str	r3, [r4, #16]
 800d4be:	2301      	movs	r3, #1
 800d4c0:	6163      	str	r3, [r4, #20]
 800d4c2:	b002      	add	sp, #8
 800d4c4:	bd70      	pop	{r4, r5, r6, pc}
 800d4c6:	ab01      	add	r3, sp, #4
 800d4c8:	466a      	mov	r2, sp
 800d4ca:	f7ff ffc8 	bl	800d45e <__swhatbuf_r>
 800d4ce:	9900      	ldr	r1, [sp, #0]
 800d4d0:	4605      	mov	r5, r0
 800d4d2:	4630      	mov	r0, r6
 800d4d4:	f7ff f93a 	bl	800c74c <_malloc_r>
 800d4d8:	b948      	cbnz	r0, 800d4ee <__smakebuf_r+0x44>
 800d4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4de:	059a      	lsls	r2, r3, #22
 800d4e0:	d4ef      	bmi.n	800d4c2 <__smakebuf_r+0x18>
 800d4e2:	f023 0303 	bic.w	r3, r3, #3
 800d4e6:	f043 0302 	orr.w	r3, r3, #2
 800d4ea:	81a3      	strh	r3, [r4, #12]
 800d4ec:	e7e3      	b.n	800d4b6 <__smakebuf_r+0xc>
 800d4ee:	89a3      	ldrh	r3, [r4, #12]
 800d4f0:	6020      	str	r0, [r4, #0]
 800d4f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4f6:	81a3      	strh	r3, [r4, #12]
 800d4f8:	9b00      	ldr	r3, [sp, #0]
 800d4fa:	6163      	str	r3, [r4, #20]
 800d4fc:	9b01      	ldr	r3, [sp, #4]
 800d4fe:	6120      	str	r0, [r4, #16]
 800d500:	b15b      	cbz	r3, 800d51a <__smakebuf_r+0x70>
 800d502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d506:	4630      	mov	r0, r6
 800d508:	f000 f81e 	bl	800d548 <_isatty_r>
 800d50c:	b128      	cbz	r0, 800d51a <__smakebuf_r+0x70>
 800d50e:	89a3      	ldrh	r3, [r4, #12]
 800d510:	f023 0303 	bic.w	r3, r3, #3
 800d514:	f043 0301 	orr.w	r3, r3, #1
 800d518:	81a3      	strh	r3, [r4, #12]
 800d51a:	89a3      	ldrh	r3, [r4, #12]
 800d51c:	431d      	orrs	r5, r3
 800d51e:	81a5      	strh	r5, [r4, #12]
 800d520:	e7cf      	b.n	800d4c2 <__smakebuf_r+0x18>
	...

0800d524 <_fstat_r>:
 800d524:	b538      	push	{r3, r4, r5, lr}
 800d526:	4d07      	ldr	r5, [pc, #28]	; (800d544 <_fstat_r+0x20>)
 800d528:	2300      	movs	r3, #0
 800d52a:	4604      	mov	r4, r0
 800d52c:	4608      	mov	r0, r1
 800d52e:	4611      	mov	r1, r2
 800d530:	602b      	str	r3, [r5, #0]
 800d532:	f7f3 fa4c 	bl	80009ce <_fstat>
 800d536:	1c43      	adds	r3, r0, #1
 800d538:	d102      	bne.n	800d540 <_fstat_r+0x1c>
 800d53a:	682b      	ldr	r3, [r5, #0]
 800d53c:	b103      	cbz	r3, 800d540 <_fstat_r+0x1c>
 800d53e:	6023      	str	r3, [r4, #0]
 800d540:	bd38      	pop	{r3, r4, r5, pc}
 800d542:	bf00      	nop
 800d544:	2000de08 	.word	0x2000de08

0800d548 <_isatty_r>:
 800d548:	b538      	push	{r3, r4, r5, lr}
 800d54a:	4d06      	ldr	r5, [pc, #24]	; (800d564 <_isatty_r+0x1c>)
 800d54c:	2300      	movs	r3, #0
 800d54e:	4604      	mov	r4, r0
 800d550:	4608      	mov	r0, r1
 800d552:	602b      	str	r3, [r5, #0]
 800d554:	f7f3 fa4b 	bl	80009ee <_isatty>
 800d558:	1c43      	adds	r3, r0, #1
 800d55a:	d102      	bne.n	800d562 <_isatty_r+0x1a>
 800d55c:	682b      	ldr	r3, [r5, #0]
 800d55e:	b103      	cbz	r3, 800d562 <_isatty_r+0x1a>
 800d560:	6023      	str	r3, [r4, #0]
 800d562:	bd38      	pop	{r3, r4, r5, pc}
 800d564:	2000de08 	.word	0x2000de08

0800d568 <_malloc_usable_size_r>:
 800d568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d56c:	1f18      	subs	r0, r3, #4
 800d56e:	2b00      	cmp	r3, #0
 800d570:	bfbc      	itt	lt
 800d572:	580b      	ldrlt	r3, [r1, r0]
 800d574:	18c0      	addlt	r0, r0, r3
 800d576:	4770      	bx	lr

0800d578 <_init>:
 800d578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57a:	bf00      	nop
 800d57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d57e:	bc08      	pop	{r3}
 800d580:	469e      	mov	lr, r3
 800d582:	4770      	bx	lr

0800d584 <_fini>:
 800d584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d586:	bf00      	nop
 800d588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d58a:	bc08      	pop	{r3}
 800d58c:	469e      	mov	lr, r3
 800d58e:	4770      	bx	lr
