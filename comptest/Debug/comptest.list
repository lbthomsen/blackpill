
comptest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d578  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800d718  0800d718  0001d718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8e4  0800d8e4  00020310  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8e4  0800d8e4  0001d8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8ec  0800d8ec  00020310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8ec  0800d8ec  0001d8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8f0  0800d8f0  0001d8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000310  20000000  0800d8f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d9fc  20000310  0800dc04  00020310  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000dd0c  0800dc04  0002dd0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024ad8  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a82  00000000  00000000  00044e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c50  00000000  00000000  0004a8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019c0  00000000  00000000  0004c4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e833  00000000  00000000  0004deb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000240ce  00000000  00000000  0006c6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d11c  00000000  00000000  000907b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d8cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e08  00000000  00000000  0012d920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000310 	.word	0x20000310
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d700 	.word	0x0800d700

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000314 	.word	0x20000314
 80001dc:	0800d700 	.word	0x0800d700

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(startMainTask, NULL, &mainTask_attributes);
 8000588:	4a08      	ldr	r2, [pc, #32]	; (80005ac <MX_FREERTOS_Init+0x28>)
 800058a:	2100      	movs	r1, #0
 800058c:	4808      	ldr	r0, [pc, #32]	; (80005b0 <MX_FREERTOS_Init+0x2c>)
 800058e:	f009 f8fc 	bl	800978a <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <MX_FREERTOS_Init+0x30>)
 8000596:	6013      	str	r3, [r2, #0]

  /* creation of tickTask */
  tickTaskHandle = osThreadNew(startTickTask, NULL, &tickTask_attributes);
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <MX_FREERTOS_Init+0x34>)
 800059a:	2100      	movs	r1, #0
 800059c:	4807      	ldr	r0, [pc, #28]	; (80005bc <MX_FREERTOS_Init+0x38>)
 800059e:	f009 f8f4 	bl	800978a <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <MX_FREERTOS_Init+0x3c>)
 80005a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	0800d7c8 	.word	0x0800d7c8
 80005b0:	080005c5 	.word	0x080005c5
 80005b4:	2000032c 	.word	0x2000032c
 80005b8:	0800d7ec 	.word	0x0800d7ec
 80005bc:	080005d5 	.word	0x080005d5
 80005c0:	20000330 	.word	0x20000330

080005c4 <startMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startMainTask */
void startMainTask(void *argument)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMainTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f009 f96e 	bl	80098ae <osDelay>
 80005d2:	e7fb      	b.n	80005cc <startMainTask+0x8>

080005d4 <startTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTickTask */
void startTickTask(void *argument)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTickTask */
  /* Infinite loop */
  for(;;)
  {
	DBG("Tick %lu", osKernelGetTickCount() / 1000);
 80005dc:	f009 f8c0 	bl	8009760 <osKernelGetTickCount>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a08      	ldr	r2, [pc, #32]	; (8000604 <startTickTask+0x30>)
 80005e4:	fba2 2303 	umull	r2, r3, r2, r3
 80005e8:	099b      	lsrs	r3, r3, #6
 80005ea:	4619      	mov	r1, r3
 80005ec:	4806      	ldr	r0, [pc, #24]	; (8000608 <startTickTask+0x34>)
 80005ee:	f00b ffdb 	bl	800c5a8 <iprintf>
 80005f2:	200a      	movs	r0, #10
 80005f4:	f00b fff0 	bl	800c5d8 <putchar>
    osDelay(1000);
 80005f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fc:	f009 f957 	bl	80098ae <osDelay>
  {
 8000600:	e7ec      	b.n	80005dc <startTickTask+0x8>
 8000602:	bf00      	nop
 8000604:	10624dd3 	.word	0x10624dd3
 8000608:	0800d730 	.word	0x0800d730

0800060c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <MX_GPIO_Init+0x9c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <MX_GPIO_Init+0x9c>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <MX_GPIO_Init+0x9c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_GPIO_Init+0x9c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a18      	ldr	r2, [pc, #96]	; (80006a8 <MX_GPIO_Init+0x9c>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_GPIO_Init+0x9c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_GPIO_Init+0x9c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a11      	ldr	r2, [pc, #68]	; (80006a8 <MX_GPIO_Init+0x9c>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_GPIO_Init+0x9c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <MX_GPIO_Init+0xa0>)
 800067e:	f000 fd93 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000688:	2311      	movs	r3, #17
 800068a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	4619      	mov	r1, r3
 800069a:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_GPIO_Init+0xa0>)
 800069c:	f000 fc00 	bl	8000ea0 <HAL_GPIO_Init>

}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020800 	.word	0x40020800

080006b0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
    CDC_Transmit(0, (uint8_t *)ptr, len);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	461a      	mov	r2, r3
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	2000      	movs	r0, #0
 80006c6:	f004 fb29 	bl	8004d1c <CDC_Transmit>
    return len;
 80006ca:	687b      	ldr	r3, [r7, #4]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fa99 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f823 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f7ff ff93 	bl	800060c <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006e6:	f000 f9e7 	bl	8000ab8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80006ea:	f004 f9b1 	bl	8004a50 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80006ee:	f008 ffed 	bl	80096cc <osKernelInitialize>
  MX_FREERTOS_Init();
 80006f2:	f7ff ff47 	bl	8000584 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80006f6:	f009 f80d 	bl	8009714 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0, last_blink = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]

  while (1)
  {

	  now = HAL_GetTick();
 8000702:	f000 fabb 	bl	8000c7c <HAL_GetTick>
 8000706:	6038      	str	r0, [r7, #0]

	  if (now - last_blink >= 500) {
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000712:	d3f6      	bcc.n	8000702 <main+0x2e>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000718:	4802      	ldr	r0, [pc, #8]	; (8000724 <main+0x50>)
 800071a:	f000 fd5e 	bl	80011da <HAL_GPIO_TogglePin>

		  last_blink = now;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	607b      	str	r3, [r7, #4]
	  now = HAL_GetTick();
 8000722:	e7ee      	b.n	8000702 <main+0x2e>
 8000724:	40020800 	.word	0x40020800

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	; 0x50
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	2230      	movs	r2, #48	; 0x30
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f00b fe99 	bl	800c46e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <SystemClock_Config+0xc8>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a26      	ldr	r2, [pc, #152]	; (80007f0 <SystemClock_Config+0xc8>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <SystemClock_Config+0xc8>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <SystemClock_Config+0xcc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a20      	ldr	r2, [pc, #128]	; (80007f4 <SystemClock_Config+0xcc>)
 8000772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <SystemClock_Config+0xcc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000784:	2301      	movs	r3, #1
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000798:	2319      	movs	r3, #25
 800079a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800079c:	23c0      	movs	r3, #192	; 0xc0
 800079e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 fedf 	bl	8002570 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b8:	f000 f830 	bl	800081c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2302      	movs	r3, #2
 80007c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2103      	movs	r1, #3
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 f941 	bl	8002a60 <HAL_RCC_ClockConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007e4:	f000 f81a 	bl	800081c <Error_Handler>
  }
}
 80007e8:	bf00      	nop
 80007ea:	3750      	adds	r7, #80	; 0x50
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d101      	bne.n	800080e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800080a:	f000 fa23 	bl	8000c54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40014800 	.word	0x40014800

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_MspInit+0x54>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	4a11      	ldr	r2, [pc, #68]	; (800087c <HAL_MspInit+0x54>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083c:	6453      	str	r3, [r2, #68]	; 0x44
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_MspInit+0x54>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_MspInit+0x54>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <HAL_MspInit+0x54>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_MspInit+0x54>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	210f      	movs	r1, #15
 800086a:	f06f 0001 	mvn.w	r0, #1
 800086e:	f000 faed 	bl	8000e4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	; 0x30
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000890:	2200      	movs	r2, #0
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	201a      	movs	r0, #26
 8000896:	f000 fad9 	bl	8000e4c <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800089a:	201a      	movs	r0, #26
 800089c:	f000 faf2 	bl	8000e84 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <HAL_InitTick+0xa0>)
 80008a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a8:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <HAL_InitTick+0xa0>)
 80008aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ae:	6453      	str	r3, [r2, #68]	; 0x44
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <HAL_InitTick+0xa0>)
 80008b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008bc:	f107 0210 	add.w	r2, r7, #16
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 fa96 	bl	8002df8 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008cc:	f002 fa80 	bl	8002dd0 <HAL_RCC_GetPCLK2Freq>
 80008d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d4:	4a13      	ldr	r2, [pc, #76]	; (8000924 <HAL_InitTick+0xa4>)
 80008d6:	fba2 2303 	umull	r2, r3, r2, r3
 80008da:	0c9b      	lsrs	r3, r3, #18
 80008dc:	3b01      	subs	r3, #1
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <HAL_InitTick+0xa8>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <HAL_InitTick+0xac>)
 80008e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <HAL_InitTick+0xa8>)
 80008e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008ec:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_InitTick+0xa8>)
 80008f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f2:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_InitTick+0xa8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_InitTick+0xa8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <HAL_InitTick+0xa8>)
 8000902:	f002 faab 	bl	8002e5c <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d104      	bne.n	8000916 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 800090c:	4806      	ldr	r0, [pc, #24]	; (8000928 <HAL_InitTick+0xa8>)
 800090e:	f002 faff 	bl	8002f10 <HAL_TIM_Base_Start_IT>
 8000912:	4603      	mov	r3, r0
 8000914:	e000      	b.n	8000918 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3730      	adds	r7, #48	; 0x30
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	431bde83 	.word	0x431bde83
 8000928:	20000334 	.word	0x20000334
 800092c:	40014800 	.word	0x40014800

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000962:	f002 fb37 	bl	8002fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000334 	.word	0x20000334

08000970 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <OTG_FS_IRQHandler+0x10>)
 8000976:	f000 fd9a 	bl	80014ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000380 	.word	0x20000380

08000984 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	e00a      	b.n	80009ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000996:	f3af 8000 	nop.w
 800099a:	4601      	mov	r1, r0
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	60ba      	str	r2, [r7, #8]
 80009a2:	b2ca      	uxtb	r2, r1
 80009a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	3301      	adds	r3, #1
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697a      	ldr	r2, [r7, #20]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	dbf0      	blt.n	8000996 <_read+0x12>
	}

return len;
 80009b4:	687b      	ldr	r3, [r7, #4]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <_close>:
	}
	return len;
}

int _close(int file)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	return -1;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e6:	605a      	str	r2, [r3, #4]
	return 0;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <_isatty>:

int _isatty(int file)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
	return 1;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	return 0;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a30:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <_sbrk+0x5c>)
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <_sbrk+0x60>)
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d102      	bne.n	8000a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <_sbrk+0x64>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <_sbrk+0x68>)
 8000a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d207      	bcs.n	8000a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a58:	f00b fbd8 	bl	800c20c <__errno>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	220c      	movs	r2, #12
 8000a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a66:	e009      	b.n	8000a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <_sbrk+0x64>)
 8000a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20020000 	.word	0x20020000
 8000a88:	00000400 	.word	0x00000400
 8000a8c:	2000037c 	.word	0x2000037c
 8000a90:	2000dd10 	.word	0x2000dd10

08000a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <SystemInit+0x20>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <SystemInit+0x20>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ac2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000acc:	2202      	movs	r2, #2
 8000ace:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad8:	2202      	movs	r2, #2
 8000ada:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afc:	f000 fb87 	bl	800120e <HAL_PCD_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b06:	f7ff fe89 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000380 	.word	0x20000380

08000b14 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b34:	d13a      	bne.n	8000bac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <HAL_PCD_MspInit+0xa0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <HAL_PCD_MspInit+0xa0>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <HAL_PCD_MspInit+0xa0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b64:	230a      	movs	r3, #10
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4812      	ldr	r0, [pc, #72]	; (8000bb8 <HAL_PCD_MspInit+0xa4>)
 8000b70:	f000 f996 	bl	8000ea0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_PCD_MspInit+0xa0>)
 8000b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b78:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_PCD_MspInit+0xa0>)
 8000b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7e:	6353      	str	r3, [r2, #52]	; 0x34
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_PCD_MspInit+0xa0>)
 8000b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_PCD_MspInit+0xa0>)
 8000b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_PCD_MspInit+0xa0>)
 8000b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2105      	movs	r1, #5
 8000ba0:	2043      	movs	r0, #67	; 0x43
 8000ba2:	f000 f953 	bl	8000e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000ba6:	2043      	movs	r0, #67	; 0x43
 8000ba8:	f000 f96c 	bl	8000e84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc2:	490e      	ldr	r1, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd8:	4c0b      	ldr	r4, [pc, #44]	; (8000c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000be6:	f7ff ff55 	bl	8000a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f00b fc0b 	bl	800c404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fd71 	bl	80006d4 <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 8000c00:	0800d8f4 	.word	0x0800d8f4
  ldr r2, =_sbss
 8000c04:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 8000c08:	2000dd0c 	.word	0x2000dd0c

08000c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <HAL_Init+0x40>)
 8000c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_Init+0x40>)
 8000c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_Init+0x40>)
 8000c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 f8fc 	bl	8000e36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	200f      	movs	r0, #15
 8000c40:	f7ff fe1e 	bl	8000880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff fdf0 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023c00 	.word	0x40023c00

08000c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x20>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_IncTick+0x24>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000788 	.word	0x20000788

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000788 	.word	0x20000788

08000c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff ffee 	bl	8000c7c <HAL_GetTick>
 8000ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cac:	d005      	beq.n	8000cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_Delay+0x44>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cba:	bf00      	nop
 8000cbc:	f7ff ffde 	bl	8000c7c <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d8f7      	bhi.n	8000cbc <HAL_Delay+0x28>
  {
  }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	db0b      	blt.n	8000d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f003 021f 	and.w	r2, r3, #31
 8000d58:	4907      	ldr	r1, [pc, #28]	; (8000d78 <__NVIC_EnableIRQ+0x38>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	; (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ff4c 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5e:	f7ff ff61 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000e62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	68b9      	ldr	r1, [r7, #8]
 8000e68:	6978      	ldr	r0, [r7, #20]
 8000e6a:	f7ff ffb1 	bl	8000dd0 <NVIC_EncodePriority>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff80 	bl	8000d7c <__NVIC_SetPriority>
}
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff54 	bl	8000d40 <__NVIC_EnableIRQ>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
 8000eba:	e159      	b.n	8001170 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	f040 8148 	bne.w	800116a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d005      	beq.n	8000ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d130      	bne.n	8000f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	091b      	lsrs	r3, r3, #4
 8000f3e:	f003 0201 	and.w	r2, r3, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d017      	beq.n	8000f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d123      	bne.n	8000fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	08da      	lsrs	r2, r3, #3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3208      	adds	r2, #8
 8000fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	691a      	ldr	r2, [r3, #16]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	08da      	lsrs	r2, r3, #3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3208      	adds	r2, #8
 8000fde:	69b9      	ldr	r1, [r7, #24]
 8000fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0203 	and.w	r2, r3, #3
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 80a2 	beq.w	800116a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b57      	ldr	r3, [pc, #348]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a56      	ldr	r2, [pc, #344]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b54      	ldr	r3, [pc, #336]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001042:	4a52      	ldr	r2, [pc, #328]	; (800118c <HAL_GPIO_Init+0x2ec>)
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	3302      	adds	r3, #2
 800104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	220f      	movs	r2, #15
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a49      	ldr	r2, [pc, #292]	; (8001190 <HAL_GPIO_Init+0x2f0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d019      	beq.n	80010a2 <HAL_GPIO_Init+0x202>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a48      	ldr	r2, [pc, #288]	; (8001194 <HAL_GPIO_Init+0x2f4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d013      	beq.n	800109e <HAL_GPIO_Init+0x1fe>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a47      	ldr	r2, [pc, #284]	; (8001198 <HAL_GPIO_Init+0x2f8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00d      	beq.n	800109a <HAL_GPIO_Init+0x1fa>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a46      	ldr	r2, [pc, #280]	; (800119c <HAL_GPIO_Init+0x2fc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d007      	beq.n	8001096 <HAL_GPIO_Init+0x1f6>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a45      	ldr	r2, [pc, #276]	; (80011a0 <HAL_GPIO_Init+0x300>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_GPIO_Init+0x1f2>
 800108e:	2304      	movs	r3, #4
 8001090:	e008      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 8001092:	2307      	movs	r3, #7
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 8001096:	2303      	movs	r3, #3
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 80010a2:	2300      	movs	r3, #0
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	f002 0203 	and.w	r2, r2, #3
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b4:	4935      	ldr	r1, [pc, #212]	; (800118c <HAL_GPIO_Init+0x2ec>)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c2:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <HAL_GPIO_Init+0x304>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010e6:	4a2f      	ldr	r2, [pc, #188]	; (80011a4 <HAL_GPIO_Init+0x304>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <HAL_GPIO_Init+0x304>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001110:	4a24      	ldr	r2, [pc, #144]	; (80011a4 <HAL_GPIO_Init+0x304>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <HAL_GPIO_Init+0x304>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800113a:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <HAL_GPIO_Init+0x304>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_GPIO_Init+0x304>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001164:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <HAL_GPIO_Init+0x304>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3301      	adds	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	2b0f      	cmp	r3, #15
 8001174:	f67f aea2 	bls.w	8000ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40013800 	.word	0x40013800
 8001190:	40020000 	.word	0x40020000
 8001194:	40020400 	.word	0x40020400
 8001198:	40020800 	.word	0x40020800
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40013c00 	.word	0x40013c00

080011a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
 80011b4:	4613      	mov	r3, r2
 80011b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b8:	787b      	ldrb	r3, [r7, #1]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c4:	e003      	b.n	80011ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	041a      	lsls	r2, r3, #16
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	619a      	str	r2, [r3, #24]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011da:	b480      	push	{r7}
 80011dc:	b085      	sub	sp, #20
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	460b      	mov	r3, r1
 80011e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ec:	887a      	ldrh	r2, [r7, #2]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4013      	ands	r3, r2
 80011f2:	041a      	lsls	r2, r3, #16
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	887b      	ldrh	r3, [r7, #2]
 80011fa:	400b      	ands	r3, r1
 80011fc:	431a      	orrs	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	619a      	str	r2, [r3, #24]
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800120e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001210:	b08f      	sub	sp, #60	; 0x3c
 8001212:	af0a      	add	r7, sp, #40	; 0x28
 8001214:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e10f      	b.n	8001440 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d106      	bne.n	8001240 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fc6a 	bl	8000b14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2203      	movs	r2, #3
 8001244:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f002 f991 	bl	8003586 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	687e      	ldr	r6, [r7, #4]
 800126c:	466d      	mov	r5, sp
 800126e:	f106 0410 	add.w	r4, r6, #16
 8001272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800127a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800127e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001282:	1d33      	adds	r3, r6, #4
 8001284:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001286:	6838      	ldr	r0, [r7, #0]
 8001288:	f002 f868 	bl	800335c <USB_CoreInit>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2202      	movs	r2, #2
 8001296:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e0d0      	b.n	8001440 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 f97f 	bl	80035a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]
 80012ae:	e04a      	b.n	8001346 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	1a9b      	subs	r3, r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	333d      	adds	r3, #61	; 0x3d
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	1a9b      	subs	r3, r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	333c      	adds	r3, #60	; 0x3c
 80012d4:	7bfa      	ldrb	r2, [r7, #15]
 80012d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	b298      	uxth	r0, r3
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	1a9b      	subs	r3, r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	3342      	adds	r3, #66	; 0x42
 80012ec:	4602      	mov	r2, r0
 80012ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012f0:	7bfa      	ldrb	r2, [r7, #15]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	1a9b      	subs	r3, r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	333f      	adds	r3, #63	; 0x3f
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	3344      	adds	r3, #68	; 0x44
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	1a9b      	subs	r3, r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	3348      	adds	r3, #72	; 0x48
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	1a9b      	subs	r3, r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	3350      	adds	r3, #80	; 0x50
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	3301      	adds	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	d3af      	bcc.n	80012b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e044      	b.n	80013e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	1a9b      	subs	r3, r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	440b      	add	r3, r1
 8001364:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	1a9b      	subs	r3, r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800137e:	7bfa      	ldrb	r2, [r7, #15]
 8001380:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001382:	7bfa      	ldrb	r2, [r7, #15]
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	1a9b      	subs	r3, r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	1a9b      	subs	r3, r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	1a9b      	subs	r3, r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	3301      	adds	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d3b5      	bcc.n	8001356 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	687e      	ldr	r6, [r7, #4]
 80013f2:	466d      	mov	r5, sp
 80013f4:	f106 0410 	add.w	r4, r6, #16
 80013f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001400:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001404:	e885 0003 	stmia.w	r5, {r0, r1}
 8001408:	1d33      	adds	r3, r6, #4
 800140a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800140c:	6838      	ldr	r0, [r7, #0]
 800140e:	f002 f917 	bl	8003640 <USB_DevInit>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e00d      	b.n	8001440 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f003 f993 	bl	8004764 <USB_DevDisconnect>

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001448 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_PCD_Start+0x1c>
 8001460:	2302      	movs	r3, #2
 8001462:	e020      	b.n	80014a6 <HAL_PCD_Start+0x5e>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	2b01      	cmp	r3, #1
 8001472:	d109      	bne.n	8001488 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001478:	2b01      	cmp	r3, #1
 800147a:	d005      	beq.n	8001488 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001480:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f002 f869 	bl	8003564 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f003 f943 	bl	8004722 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014ae:	b590      	push	{r4, r7, lr}
 80014b0:	b08d      	sub	sp, #52	; 0x34
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 fa01 	bl	80048cc <USB_GetMode>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f040 839d 	bne.w	8001c0c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 f965 	bl	80047a6 <USB_ReadInterrupts>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8393 	beq.w	8001c0a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 f95c 	bl	80047a6 <USB_ReadInterrupts>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d107      	bne.n	8001508 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f002 0202 	and.w	r2, r2, #2
 8001506:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f003 f94a 	bl	80047a6 <USB_ReadInterrupts>
 8001512:	4603      	mov	r3, r0
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	2b10      	cmp	r3, #16
 800151a:	d161      	bne.n	80015e0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699a      	ldr	r2, [r3, #24]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0210 	bic.w	r2, r2, #16
 800152a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	f003 020f 	and.w	r2, r3, #15
 8001538:	4613      	mov	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	1a9b      	subs	r3, r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	3304      	adds	r3, #4
 800154a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	0c5b      	lsrs	r3, r3, #17
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	2b02      	cmp	r3, #2
 8001556:	d124      	bne.n	80015a2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800155e:	4013      	ands	r3, r2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d035      	beq.n	80015d0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800156e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001572:	b29b      	uxth	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	6a38      	ldr	r0, [r7, #32]
 8001578:	f002 ff81 	bl	800447e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	091b      	lsrs	r3, r3, #4
 8001584:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001588:	441a      	add	r2, r3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	699a      	ldr	r2, [r3, #24]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800159a:	441a      	add	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	619a      	str	r2, [r3, #24]
 80015a0:	e016      	b.n	80015d0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	0c5b      	lsrs	r3, r3, #17
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	2b06      	cmp	r3, #6
 80015ac:	d110      	bne.n	80015d0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80015b4:	2208      	movs	r2, #8
 80015b6:	4619      	mov	r1, r3
 80015b8:	6a38      	ldr	r0, [r7, #32]
 80015ba:	f002 ff60 	bl	800447e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ca:	441a      	add	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	699a      	ldr	r2, [r3, #24]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0210 	orr.w	r2, r2, #16
 80015de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 f8de 	bl	80047a6 <USB_ReadInterrupts>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015f4:	d16e      	bne.n	80016d4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 f8e4 	bl	80047cc <USB_ReadDevAllOutEpInterrupt>
 8001604:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001606:	e062      	b.n	80016ce <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d057      	beq.n	80016c2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f003 f909 	bl	8004834 <USB_ReadDevOutEPInterrupt>
 8001622:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00c      	beq.n	8001648 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	015a      	lsls	r2, r3, #5
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	4413      	add	r3, r2
 8001636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800163a:	461a      	mov	r2, r3
 800163c:	2301      	movs	r3, #1
 800163e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fdde 	bl	8002204 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00c      	beq.n	800166c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	015a      	lsls	r2, r3, #5
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	4413      	add	r3, r2
 800165a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800165e:	461a      	mov	r2, r3
 8001660:	2308      	movs	r3, #8
 8001662:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 fed8 	bl	800241c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	2b00      	cmp	r3, #0
 8001674:	d008      	beq.n	8001688 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	015a      	lsls	r2, r3, #5
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	4413      	add	r3, r2
 800167e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001682:	461a      	mov	r2, r3
 8001684:	2310      	movs	r3, #16
 8001686:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	2b00      	cmp	r3, #0
 8001690:	d008      	beq.n	80016a4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	015a      	lsls	r2, r3, #5
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	4413      	add	r3, r2
 800169a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800169e:	461a      	mov	r2, r3
 80016a0:	2320      	movs	r3, #32
 80016a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d009      	beq.n	80016c2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	015a      	lsls	r2, r3, #5
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ba:	461a      	mov	r2, r3
 80016bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	3301      	adds	r3, #1
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ca:	085b      	lsrs	r3, r3, #1
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d199      	bne.n	8001608 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f003 f864 	bl	80047a6 <USB_ReadInterrupts>
 80016de:	4603      	mov	r3, r0
 80016e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016e8:	f040 80c0 	bne.w	800186c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 f885 	bl	8004800 <USB_ReadDevAllInEpInterrupt>
 80016f6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80016fc:	e0b2      	b.n	8001864 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80a7 	beq.w	8001858 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f003 f8ab 	bl	8004870 <USB_ReadDevInEPInterrupt>
 800171a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d057      	beq.n	80017d6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	2201      	movs	r2, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800173a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	43db      	mvns	r3, r3
 8001740:	69f9      	ldr	r1, [r7, #28]
 8001742:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001746:	4013      	ands	r3, r2
 8001748:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	015a      	lsls	r2, r3, #5
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	4413      	add	r3, r2
 8001752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001756:	461a      	mov	r2, r3
 8001758:	2301      	movs	r3, #1
 800175a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d132      	bne.n	80017ca <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001768:	4613      	mov	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	1a9b      	subs	r3, r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	3348      	adds	r3, #72	; 0x48
 8001774:	6819      	ldr	r1, [r3, #0]
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4403      	add	r3, r0
 8001784:	3344      	adds	r3, #68	; 0x44
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4419      	add	r1, r3
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800178e:	4613      	mov	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4403      	add	r3, r0
 8001798:	3348      	adds	r3, #72	; 0x48
 800179a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d113      	bne.n	80017ca <HAL_PCD_IRQHandler+0x31c>
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a6:	4613      	mov	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	3350      	adds	r3, #80	; 0x50
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d108      	bne.n	80017ca <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80017c2:	461a      	mov	r2, r3
 80017c4:	2101      	movs	r1, #1
 80017c6:	f003 f8b3 	bl	8004930 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f007 fc8b 	bl	80090ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d008      	beq.n	80017f2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	015a      	lsls	r2, r3, #5
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	4413      	add	r3, r2
 80017e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ec:	461a      	mov	r2, r3
 80017ee:	2308      	movs	r3, #8
 80017f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	015a      	lsls	r2, r3, #5
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	4413      	add	r3, r2
 8001804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001808:	461a      	mov	r2, r3
 800180a:	2310      	movs	r3, #16
 800180c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	015a      	lsls	r2, r3, #5
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	4413      	add	r3, r2
 8001820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001824:	461a      	mov	r2, r3
 8001826:	2340      	movs	r3, #64	; 0x40
 8001828:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d008      	beq.n	8001846 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	015a      	lsls	r2, r3, #5
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	4413      	add	r3, r2
 800183c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001840:	461a      	mov	r2, r3
 8001842:	2302      	movs	r3, #2
 8001844:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 fc48 	bl	80020e8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	3301      	adds	r3, #1
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800185e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001860:	085b      	lsrs	r3, r3, #1
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001866:	2b00      	cmp	r3, #0
 8001868:	f47f af49 	bne.w	80016fe <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f002 ff98 	bl	80047a6 <USB_ReadInterrupts>
 8001876:	4603      	mov	r3, r0
 8001878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800187c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001880:	d122      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800189c:	2b01      	cmp	r3, #1
 800189e:	d108      	bne.n	80018b2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018a8:	2100      	movs	r1, #0
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 fe54 	bl	8002558 <HAL_PCDEx_LPM_Callback>
 80018b0:	e002      	b.n	80018b8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f007 fc90 	bl	80091d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80018c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 ff6a 	bl	80047a6 <USB_ReadInterrupts>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018dc:	d112      	bne.n	8001904 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d102      	bne.n	80018f4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f007 fc4c 	bl	800918c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001902:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f002 ff4c 	bl	80047a6 <USB_ReadInterrupts>
 800190e:	4603      	mov	r3, r0
 8001910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001918:	f040 80c7 	bne.w	8001aaa <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2110      	movs	r1, #16
 8001936:	4618      	mov	r0, r3
 8001938:	f001 ffe6 	bl	8003908 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001940:	e056      	b.n	80019f0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001944:	015a      	lsls	r2, r3, #5
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	4413      	add	r3, r2
 800194a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800194e:	461a      	mov	r2, r3
 8001950:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001954:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001958:	015a      	lsls	r2, r3, #5
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	4413      	add	r3, r2
 800195e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001966:	0151      	lsls	r1, r2, #5
 8001968:	69fa      	ldr	r2, [r7, #28]
 800196a:	440a      	add	r2, r1
 800196c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001970:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001974:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001978:	015a      	lsls	r2, r3, #5
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	4413      	add	r3, r2
 800197e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001986:	0151      	lsls	r1, r2, #5
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	440a      	add	r2, r1
 800198c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001990:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001994:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001998:	015a      	lsls	r2, r3, #5
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	4413      	add	r3, r2
 800199e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019a2:	461a      	mov	r2, r3
 80019a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ba:	0151      	lsls	r1, r2, #5
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	440a      	add	r2, r1
 80019c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019da:	0151      	lsls	r1, r2, #5
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	440a      	add	r2, r1
 80019e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ec:	3301      	adds	r3, #1
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d3a3      	bcc.n	8001942 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a08:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d016      	beq.n	8001a44 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a26:	f043 030b 	orr.w	r3, r3, #11
 8001a2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a3c:	f043 030b 	orr.w	r3, r3, #11
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	e015      	b.n	8001a70 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	69fa      	ldr	r2, [r7, #28]
 8001a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a56:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a5a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a6a:	f043 030b 	orr.w	r3, r3, #11
 8001a6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a94:	461a      	mov	r2, r3
 8001a96:	f002 ff4b 	bl	8004930 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695a      	ldr	r2, [r3, #20]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 fe79 	bl	80047a6 <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001abe:	d124      	bne.n	8001b0a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 ff0f 	bl	80048e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f001 ff77 	bl	80039c2 <USB_GetDevSpeed>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681c      	ldr	r4, [r3, #0]
 8001ae0:	f001 f96a 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8001ae4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	4620      	mov	r0, r4
 8001af0:	f001 fc96 	bl	8003420 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f007 fb21 	bl	800913c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 fe49 	bl	80047a6 <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d10a      	bne.n	8001b34 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f007 fafe 	bl	8009120 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695a      	ldr	r2, [r3, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f002 0208 	and.w	r2, r2, #8
 8001b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f002 fe34 	bl	80047a6 <USB_ReadInterrupts>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b48:	d10f      	bne.n	8001b6a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	4619      	mov	r1, r3
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f007 fb5f 	bl	8009218 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f002 fe19 	bl	80047a6 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b7e:	d10f      	bne.n	8001ba0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	4619      	mov	r1, r3
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f007 fb32 	bl	80091f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f002 fdfe 	bl	80047a6 <USB_ReadInterrupts>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb4:	d10a      	bne.n	8001bcc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f007 fb40 	bl	800923c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f002 fde8 	bl	80047a6 <USB_ReadInterrupts>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d115      	bne.n	8001c0c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f007 fb30 	bl	8009258 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6859      	ldr	r1, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	e000      	b.n	8001c0c <HAL_PCD_IRQHandler+0x75e>
      return;
 8001c0a:	bf00      	nop
    }
  }
}
 8001c0c:	3734      	adds	r7, #52	; 0x34
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd90      	pop	{r4, r7, pc}

08001c12 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_PCD_SetAddress+0x1a>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e013      	b.n	8001c54 <HAL_PCD_SetAddress+0x42>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	78fa      	ldrb	r2, [r7, #3]
 8001c38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 fd46 	bl	80046d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	70fb      	strb	r3, [r7, #3]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	803b      	strh	r3, [r7, #0]
 8001c72:	4613      	mov	r3, r2
 8001c74:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	da0f      	bge.n	8001ca2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	f003 020f 	and.w	r2, r3, #15
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	3338      	adds	r3, #56	; 0x38
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	3304      	adds	r3, #4
 8001c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	705a      	strb	r2, [r3, #1]
 8001ca0:	e00f      	b.n	8001cc2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	f003 020f 	and.w	r2, r3, #15
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cce:	883a      	ldrh	r2, [r7, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	78ba      	ldrb	r2, [r7, #2]
 8001cd8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	785b      	ldrb	r3, [r3, #1]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d004      	beq.n	8001cec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cec:	78bb      	ldrb	r3, [r7, #2]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d102      	bne.n	8001cf8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_PCD_EP_Open+0xaa>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e00e      	b.n	8001d24 <HAL_PCD_EP_Open+0xc8>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68f9      	ldr	r1, [r7, #12]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f001 fe79 	bl	8003a0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001d22:	7afb      	ldrb	r3, [r7, #11]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	da0f      	bge.n	8001d60 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	f003 020f 	and.w	r2, r3, #15
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	3338      	adds	r3, #56	; 0x38
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	3304      	adds	r3, #4
 8001d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	705a      	strb	r2, [r3, #1]
 8001d5e:	e00f      	b.n	8001d80 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	f003 020f 	and.w	r2, r3, #15
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	3304      	adds	r3, #4
 8001d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_PCD_EP_Close+0x6e>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e00e      	b.n	8001db8 <HAL_PCD_EP_Close+0x8c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68f9      	ldr	r1, [r7, #12]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f001 feb7 	bl	8003b1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dd0:	7afb      	ldrb	r3, [r7, #11]
 8001dd2:	f003 020f 	and.w	r2, r3, #15
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4413      	add	r3, r2
 8001de6:	3304      	adds	r3, #4
 8001de8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d102      	bne.n	8001e1c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e1c:	7afb      	ldrb	r3, [r7, #11]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	6979      	ldr	r1, [r7, #20]
 8001e34:	f002 f992 	bl	800415c <USB_EP0StartXfer>
 8001e38:	e008      	b.n	8001e4c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	6979      	ldr	r1, [r7, #20]
 8001e48:	f001 ff44 	bl	8003cd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	f003 020f 	and.w	r2, r3, #15
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e78:	681b      	ldr	r3, [r3, #0]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	460b      	mov	r3, r1
 8001e94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e96:	7afb      	ldrb	r3, [r7, #11]
 8001e98:	f003 020f 	and.w	r2, r3, #15
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	3338      	adds	r3, #56	; 0x38
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3304      	adds	r3, #4
 8001eac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec6:	7afb      	ldrb	r3, [r7, #11]
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d102      	bne.n	8001ee0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ee0:	7afb      	ldrb	r3, [r7, #11]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d109      	bne.n	8001efe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	6979      	ldr	r1, [r7, #20]
 8001ef8:	f002 f930 	bl	800415c <USB_EP0StartXfer>
 8001efc:	e008      	b.n	8001f10 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	6979      	ldr	r1, [r7, #20]
 8001f0c:	f001 fee2 	bl	8003cd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 020f 	and.w	r2, r3, #15
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d901      	bls.n	8001f38 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e050      	b.n	8001fda <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	da0f      	bge.n	8001f60 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	f003 020f 	and.w	r2, r3, #15
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	3338      	adds	r3, #56	; 0x38
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	3304      	adds	r3, #4
 8001f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	705a      	strb	r2, [r3, #1]
 8001f5e:	e00d      	b.n	8001f7c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f60:	78fa      	ldrb	r2, [r7, #3]
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	3304      	adds	r3, #4
 8001f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_PCD_EP_SetStall+0x82>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e01e      	b.n	8001fda <HAL_PCD_EP_SetStall+0xc0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68f9      	ldr	r1, [r7, #12]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f002 fabf 	bl	800452e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10a      	bne.n	8001fd0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	b2d9      	uxtb	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f002 fcb0 	bl	8004930 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	f003 020f 	and.w	r2, r3, #15
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d901      	bls.n	8002000 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e042      	b.n	8002086 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002000:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002004:	2b00      	cmp	r3, #0
 8002006:	da0f      	bge.n	8002028 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	f003 020f 	and.w	r2, r3, #15
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	3338      	adds	r3, #56	; 0x38
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	4413      	add	r3, r2
 800201c:	3304      	adds	r3, #4
 800201e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	705a      	strb	r2, [r3, #1]
 8002026:	e00f      	b.n	8002048 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	f003 020f 	and.w	r2, r3, #15
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	3304      	adds	r3, #4
 8002040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	b2da      	uxtb	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_PCD_EP_ClrStall+0x86>
 8002064:	2302      	movs	r3, #2
 8002066:	e00e      	b.n	8002086 <HAL_PCD_EP_ClrStall+0xa4>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68f9      	ldr	r1, [r7, #12]
 8002076:	4618      	mov	r0, r3
 8002078:	f002 fac7 	bl	800460a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	460b      	mov	r3, r1
 8002098:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_PCD_EP_Flush+0x1a>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e01b      	b.n	80020e0 <HAL_PCD_EP_Flush+0x52>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80020b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	da09      	bge.n	80020cc <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	4619      	mov	r1, r3
 80020c4:	4610      	mov	r0, r2
 80020c6:	f001 fc1f 	bl	8003908 <USB_FlushTxFifo>
 80020ca:	e004      	b.n	80020d6 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 fc3d 	bl	8003950 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	; 0x28
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	3338      	adds	r3, #56	; 0x38
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4413      	add	r3, r2
 800210c:	3304      	adds	r3, #4
 800210e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	699a      	ldr	r2, [r3, #24]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	429a      	cmp	r2, r3
 800211a:	d901      	bls.n	8002120 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e06c      	b.n	80021fa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	429a      	cmp	r2, r3
 8002134:	d902      	bls.n	800213c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	3303      	adds	r3, #3
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002144:	e02b      	b.n	800219e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	429a      	cmp	r2, r3
 800215a:	d902      	bls.n	8002162 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3303      	adds	r3, #3
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	68d9      	ldr	r1, [r3, #12]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800217a:	b2db      	uxtb	r3, r3
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	4603      	mov	r3, r0
 8002180:	6978      	ldr	r0, [r7, #20]
 8002182:	f002 f93e 	bl	8004402 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	441a      	add	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	441a      	add	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d809      	bhi.n	80021c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021bc:	429a      	cmp	r2, r3
 80021be:	d203      	bcs.n	80021c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1be      	bne.n	8002146 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d811      	bhi.n	80021f8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	2201      	movs	r2, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	6939      	ldr	r1, [r7, #16]
 80021f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021f4:	4013      	ands	r3, r2
 80021f6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3720      	adds	r7, #32
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	333c      	adds	r3, #60	; 0x3c
 800221c:	3304      	adds	r3, #4
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b01      	cmp	r3, #1
 8002238:	f040 80a0 	bne.w	800237c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d015      	beq.n	8002272 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4a72      	ldr	r2, [pc, #456]	; (8002414 <PCD_EP_OutXfrComplete_int+0x210>)
 800224a:	4293      	cmp	r3, r2
 800224c:	f240 80dd 	bls.w	800240a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 80d7 	beq.w	800240a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002268:	461a      	mov	r2, r3
 800226a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800226e:	6093      	str	r3, [r2, #8]
 8002270:	e0cb      	b.n	800240a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d009      	beq.n	8002290 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4413      	add	r3, r2
 8002284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002288:	461a      	mov	r2, r3
 800228a:	2320      	movs	r3, #32
 800228c:	6093      	str	r3, [r2, #8]
 800228e:	e0bc      	b.n	800240a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 80b7 	bne.w	800240a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4a5d      	ldr	r2, [pc, #372]	; (8002414 <PCD_EP_OutXfrComplete_int+0x210>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d90f      	bls.n	80022c4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ba:	461a      	mov	r2, r3
 80022bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022c0:	6093      	str	r3, [r2, #8]
 80022c2:	e0a2      	b.n	800240a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022d6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	0159      	lsls	r1, r3, #5
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	440b      	add	r3, r1
 80022e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80022ea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4403      	add	r3, r0
 80022fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80022fe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4403      	add	r3, r0
 8002322:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4419      	add	r1, r3
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	4613      	mov	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4403      	add	r3, r0
 8002338:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800233c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d114      	bne.n	800236e <PCD_EP_OutXfrComplete_int+0x16a>
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d108      	bne.n	800236e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002366:	461a      	mov	r2, r3
 8002368:	2101      	movs	r1, #1
 800236a:	f002 fae1 	bl	8004930 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4619      	mov	r1, r3
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f006 fe9e 	bl	80090b6 <HAL_PCD_DataOutStageCallback>
 800237a:	e046      	b.n	800240a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4a26      	ldr	r2, [pc, #152]	; (8002418 <PCD_EP_OutXfrComplete_int+0x214>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d124      	bne.n	80023ce <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4413      	add	r3, r2
 8002396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239a:	461a      	mov	r2, r3
 800239c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023a0:	6093      	str	r3, [r2, #8]
 80023a2:	e032      	b.n	800240a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ba:	461a      	mov	r2, r3
 80023bc:	2320      	movs	r3, #32
 80023be:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	4619      	mov	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f006 fe75 	bl	80090b6 <HAL_PCD_DataOutStageCallback>
 80023cc:	e01d      	b.n	800240a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d114      	bne.n	80023fe <PCD_EP_OutXfrComplete_int+0x1fa>
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d108      	bne.n	80023fe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023f6:	461a      	mov	r2, r3
 80023f8:	2100      	movs	r1, #0
 80023fa:	f002 fa99 	bl	8004930 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	4619      	mov	r1, r3
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f006 fe56 	bl	80090b6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	4f54300a 	.word	0x4f54300a
 8002418:	4f54310a 	.word	0x4f54310a

0800241c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	333c      	adds	r3, #60	; 0x3c
 8002434:	3304      	adds	r3, #4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4413      	add	r3, r2
 8002442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d90e      	bls.n	8002470 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002458:	2b00      	cmp	r3, #0
 800245a:	d009      	beq.n	8002470 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4413      	add	r3, r2
 8002464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002468:	461a      	mov	r2, r3
 800246a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800246e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f006 fe0e 	bl	8009092 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d90c      	bls.n	8002498 <PCD_EP_OutSetupPacket_int+0x7c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d108      	bne.n	8002498 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002490:	461a      	mov	r2, r3
 8002492:	2101      	movs	r1, #1
 8002494:	f002 fa4c 	bl	8004930 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	4f54300a 	.word	0x4f54300a

080024a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70fb      	strb	r3, [r7, #3]
 80024b4:	4613      	mov	r3, r2
 80024b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d107      	bne.n	80024d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024c6:	883b      	ldrh	r3, [r7, #0]
 80024c8:	0419      	lsls	r1, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
 80024d4:	e028      	b.n	8002528 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	4413      	add	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	e00d      	b.n	8002506 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	3340      	adds	r3, #64	; 0x40
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	4413      	add	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	3301      	adds	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	3b01      	subs	r3, #1
 800250c:	429a      	cmp	r2, r3
 800250e:	d3ec      	bcc.n	80024ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002510:	883b      	ldrh	r3, [r7, #0]
 8002512:	0418      	lsls	r0, r3, #16
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6819      	ldr	r1, [r3, #0]
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	3b01      	subs	r3, #1
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	4302      	orrs	r2, r0
 8002520:	3340      	adds	r3, #64	; 0x40
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e267      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d075      	beq.n	800267a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800258e:	4b88      	ldr	r3, [pc, #544]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b04      	cmp	r3, #4
 8002598:	d00c      	beq.n	80025b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259a:	4b85      	ldr	r3, [pc, #532]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d112      	bne.n	80025cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a6:	4b82      	ldr	r3, [pc, #520]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025b2:	d10b      	bne.n	80025cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b4:	4b7e      	ldr	r3, [pc, #504]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d05b      	beq.n	8002678 <HAL_RCC_OscConfig+0x108>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d157      	bne.n	8002678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e242      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d4:	d106      	bne.n	80025e4 <HAL_RCC_OscConfig+0x74>
 80025d6:	4b76      	ldr	r3, [pc, #472]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a75      	ldr	r2, [pc, #468]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e01d      	b.n	8002620 <HAL_RCC_OscConfig+0xb0>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x98>
 80025ee:	4b70      	ldr	r3, [pc, #448]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a6f      	ldr	r2, [pc, #444]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b6d      	ldr	r3, [pc, #436]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a6c      	ldr	r2, [pc, #432]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0xb0>
 8002608:	4b69      	ldr	r3, [pc, #420]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a68      	ldr	r2, [pc, #416]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 800260e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b66      	ldr	r3, [pc, #408]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a65      	ldr	r2, [pc, #404]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 800261a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800261e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d013      	beq.n	8002650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe fb28 	bl	8000c7c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002630:	f7fe fb24 	bl	8000c7c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e207      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	4b5b      	ldr	r3, [pc, #364]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0xc0>
 800264e:	e014      	b.n	800267a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe fb14 	bl	8000c7c <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002658:	f7fe fb10 	bl	8000c7c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	; 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e1f3      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266a:	4b51      	ldr	r3, [pc, #324]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0xe8>
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d063      	beq.n	800274e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002686:	4b4a      	ldr	r3, [pc, #296]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002692:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800269a:	2b08      	cmp	r3, #8
 800269c:	d11c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800269e:	4b44      	ldr	r3, [pc, #272]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d116      	bne.n	80026d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_RCC_OscConfig+0x152>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d001      	beq.n	80026c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e1c7      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4937      	ldr	r1, [pc, #220]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	e03a      	b.n	800274e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e0:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <HAL_RCC_OscConfig+0x244>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7fe fac9 	bl	8000c7c <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ee:	f7fe fac5 	bl	8000c7c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e1a8      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270c:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4925      	ldr	r1, [pc, #148]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]
 8002720:	e015      	b.n	800274e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002722:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <HAL_RCC_OscConfig+0x244>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe faa8 	bl	8000c7c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002730:	f7fe faa4 	bl	8000c7c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e187      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d036      	beq.n	80027c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <HAL_RCC_OscConfig+0x248>)
 8002764:	2201      	movs	r2, #1
 8002766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7fe fa88 	bl	8000c7c <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002770:	f7fe fa84 	bl	8000c7c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e167      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x200>
 800278e:	e01b      	b.n	80027c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_RCC_OscConfig+0x248>)
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7fe fa71 	bl	8000c7c <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279c:	e00e      	b.n	80027bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279e:	f7fe fa6d 	bl	8000c7c <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d907      	bls.n	80027bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e150      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
 80027b0:	40023800 	.word	0x40023800
 80027b4:	42470000 	.word	0x42470000
 80027b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	4b88      	ldr	r3, [pc, #544]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1ea      	bne.n	800279e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8097 	beq.w	8002904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027da:	4b81      	ldr	r3, [pc, #516]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10f      	bne.n	8002806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	4b7d      	ldr	r3, [pc, #500]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a7c      	ldr	r2, [pc, #496]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	4b7a      	ldr	r3, [pc, #488]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002802:	2301      	movs	r3, #1
 8002804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002806:	4b77      	ldr	r3, [pc, #476]	; (80029e4 <HAL_RCC_OscConfig+0x474>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d118      	bne.n	8002844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002812:	4b74      	ldr	r3, [pc, #464]	; (80029e4 <HAL_RCC_OscConfig+0x474>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a73      	ldr	r2, [pc, #460]	; (80029e4 <HAL_RCC_OscConfig+0x474>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281e:	f7fe fa2d 	bl	8000c7c <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002826:	f7fe fa29 	bl	8000c7c <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e10c      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	4b6a      	ldr	r3, [pc, #424]	; (80029e4 <HAL_RCC_OscConfig+0x474>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d106      	bne.n	800285a <HAL_RCC_OscConfig+0x2ea>
 800284c:	4b64      	ldr	r3, [pc, #400]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	4a63      	ldr	r2, [pc, #396]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6713      	str	r3, [r2, #112]	; 0x70
 8002858:	e01c      	b.n	8002894 <HAL_RCC_OscConfig+0x324>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b05      	cmp	r3, #5
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x30c>
 8002862:	4b5f      	ldr	r3, [pc, #380]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002866:	4a5e      	ldr	r2, [pc, #376]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002868:	f043 0304 	orr.w	r3, r3, #4
 800286c:	6713      	str	r3, [r2, #112]	; 0x70
 800286e:	4b5c      	ldr	r3, [pc, #368]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002872:	4a5b      	ldr	r2, [pc, #364]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6713      	str	r3, [r2, #112]	; 0x70
 800287a:	e00b      	b.n	8002894 <HAL_RCC_OscConfig+0x324>
 800287c:	4b58      	ldr	r3, [pc, #352]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	4a57      	ldr	r2, [pc, #348]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	6713      	str	r3, [r2, #112]	; 0x70
 8002888:	4b55      	ldr	r3, [pc, #340]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288c:	4a54      	ldr	r2, [pc, #336]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 800288e:	f023 0304 	bic.w	r3, r3, #4
 8002892:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d015      	beq.n	80028c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289c:	f7fe f9ee 	bl	8000c7c <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a4:	f7fe f9ea 	bl	8000c7c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e0cb      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ba:	4b49      	ldr	r3, [pc, #292]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0ee      	beq.n	80028a4 <HAL_RCC_OscConfig+0x334>
 80028c6:	e014      	b.n	80028f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c8:	f7fe f9d8 	bl	8000c7c <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7fe f9d4 	bl	8000c7c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0b5      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e6:	4b3e      	ldr	r3, [pc, #248]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1ee      	bne.n	80028d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d105      	bne.n	8002904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f8:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	4a38      	ldr	r2, [pc, #224]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80028fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002902:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80a1 	beq.w	8002a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800290e:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b08      	cmp	r3, #8
 8002918:	d05c      	beq.n	80029d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d141      	bne.n	80029a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002922:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <HAL_RCC_OscConfig+0x478>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7fe f9a8 	bl	8000c7c <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002930:	f7fe f9a4 	bl	8000c7c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e087      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002942:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69da      	ldr	r2, [r3, #28]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	019b      	lsls	r3, r3, #6
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	085b      	lsrs	r3, r3, #1
 8002966:	3b01      	subs	r3, #1
 8002968:	041b      	lsls	r3, r3, #16
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	491b      	ldr	r1, [pc, #108]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_RCC_OscConfig+0x478>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297e:	f7fe f97d 	bl	8000c7c <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002986:	f7fe f979 	bl	8000c7c <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e05c      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002998:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x416>
 80029a4:	e054      	b.n	8002a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_RCC_OscConfig+0x478>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe f966 	bl	8000c7c <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b4:	f7fe f962 	bl	8000c7c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e045      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x444>
 80029d2:	e03d      	b.n	8002a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d107      	bne.n	80029ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e038      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40007000 	.word	0x40007000
 80029e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_RCC_OscConfig+0x4ec>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d028      	beq.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d121      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d11a      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d111      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	085b      	lsrs	r3, r3, #1
 8002a34:	3b01      	subs	r3, #1
 8002a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800

08002a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0cc      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b68      	ldr	r3, [pc, #416]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d90c      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b65      	ldr	r3, [pc, #404]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b63      	ldr	r3, [pc, #396]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0b8      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d020      	beq.n	8002aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab4:	4b59      	ldr	r3, [pc, #356]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a58      	ldr	r2, [pc, #352]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002acc:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a52      	ldr	r2, [pc, #328]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad8:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	494d      	ldr	r1, [pc, #308]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d044      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d107      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d119      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e07f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	4b3f      	ldr	r3, [pc, #252]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e06f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2e:	4b3b      	ldr	r3, [pc, #236]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e067      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3e:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4934      	ldr	r1, [pc, #208]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b50:	f7fe f894 	bl	8000c7c <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b58:	f7fe f890 	bl	8000c7c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e04f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 020c 	and.w	r2, r3, #12
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d1eb      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b80:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d20c      	bcs.n	8002ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e032      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb4:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4916      	ldr	r1, [pc, #88]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	490e      	ldr	r1, [pc, #56]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002be6:	f000 f821 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002bea:	4602      	mov	r2, r0
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	490a      	ldr	r1, [pc, #40]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf8:	5ccb      	ldrb	r3, [r1, r3]
 8002bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfe:	4a09      	ldr	r2, [pc, #36]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd fe3a 	bl	8000880 <HAL_InitTick>

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023c00 	.word	0x40023c00
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	0800d810 	.word	0x0800d810
 8002c24:	20000000 	.word	0x20000000
 8002c28:	20000004 	.word	0x20000004

08002c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c30:	b090      	sub	sp, #64	; 0x40
 8002c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	637b      	str	r3, [r7, #52]	; 0x34
 8002c38:	2300      	movs	r3, #0
 8002c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c44:	4b59      	ldr	r3, [pc, #356]	; (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d00d      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x40>
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	f200 80a1 	bhi.w	8002d98 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x34>
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c5e:	e09b      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4b53      	ldr	r3, [pc, #332]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c64:	e09b      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c66:	4b53      	ldr	r3, [pc, #332]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c6a:	e098      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c6c:	4b4f      	ldr	r3, [pc, #316]	; (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c76:	4b4d      	ldr	r3, [pc, #308]	; (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d028      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c82:	4b4a      	ldr	r3, [pc, #296]	; (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	099b      	lsrs	r3, r3, #6
 8002c88:	2200      	movs	r2, #0
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	627a      	str	r2, [r7, #36]	; 0x24
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c94:	2100      	movs	r1, #0
 8002c96:	4b47      	ldr	r3, [pc, #284]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c98:	fb03 f201 	mul.w	r2, r3, r1
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	4a43      	ldr	r2, [pc, #268]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ca6:	fba0 1202 	umull	r1, r2, r0, r2
 8002caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cac:	460a      	mov	r2, r1
 8002cae:	62ba      	str	r2, [r7, #40]	; 0x28
 8002cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb2:	4413      	add	r3, r2
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb8:	2200      	movs	r2, #0
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	61fa      	str	r2, [r7, #28]
 8002cbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cc6:	f7fd fadb 	bl	8000280 <__aeabi_uldivmod>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4613      	mov	r3, r2
 8002cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd2:	e053      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd4:	4b35      	ldr	r3, [pc, #212]	; (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	2200      	movs	r2, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	617a      	str	r2, [r7, #20]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ce6:	f04f 0b00 	mov.w	fp, #0
 8002cea:	4652      	mov	r2, sl
 8002cec:	465b      	mov	r3, fp
 8002cee:	f04f 0000 	mov.w	r0, #0
 8002cf2:	f04f 0100 	mov.w	r1, #0
 8002cf6:	0159      	lsls	r1, r3, #5
 8002cf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cfc:	0150      	lsls	r0, r2, #5
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	ebb2 080a 	subs.w	r8, r2, sl
 8002d06:	eb63 090b 	sbc.w	r9, r3, fp
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d1e:	ebb2 0408 	subs.w	r4, r2, r8
 8002d22:	eb63 0509 	sbc.w	r5, r3, r9
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	00eb      	lsls	r3, r5, #3
 8002d30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d34:	00e2      	lsls	r2, r4, #3
 8002d36:	4614      	mov	r4, r2
 8002d38:	461d      	mov	r5, r3
 8002d3a:	eb14 030a 	adds.w	r3, r4, sl
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	eb45 030b 	adc.w	r3, r5, fp
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d52:	4629      	mov	r1, r5
 8002d54:	028b      	lsls	r3, r1, #10
 8002d56:	4621      	mov	r1, r4
 8002d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	028a      	lsls	r2, r1, #10
 8002d60:	4610      	mov	r0, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d66:	2200      	movs	r2, #0
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	60fa      	str	r2, [r7, #12]
 8002d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d70:	f7fd fa86 	bl	8000280 <__aeabi_uldivmod>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4613      	mov	r3, r2
 8002d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	3301      	adds	r3, #1
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d96:	e002      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3740      	adds	r7, #64	; 0x40
 8002da4:	46bd      	mov	sp, r7
 8002da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800
 8002db0:	00f42400 	.word	0x00f42400
 8002db4:	017d7840 	.word	0x017d7840

08002db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000000 	.word	0x20000000

08002dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dd4:	f7ff fff0 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	0b5b      	lsrs	r3, r3, #13
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4903      	ldr	r1, [pc, #12]	; (8002df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40023800 	.word	0x40023800
 8002df4:	0800d820 	.word	0x0800d820

08002df8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	220f      	movs	r2, #15
 8002e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e08:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <HAL_RCC_GetClockConfig+0x5c>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0203 	and.w	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e14:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <HAL_RCC_GetClockConfig+0x5c>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <HAL_RCC_GetClockConfig+0x5c>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCC_GetClockConfig+0x5c>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	08db      	lsrs	r3, r3, #3
 8002e32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <HAL_RCC_GetClockConfig+0x60>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0207 	and.w	r2, r3, #7
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	601a      	str	r2, [r3, #0]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40023c00 	.word	0x40023c00

08002e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e041      	b.n	8002ef2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f839 	bl	8002efa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3304      	adds	r3, #4
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	f000 f9ca 	bl	8003234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d001      	beq.n	8002f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e044      	b.n	8002fb2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d018      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x6c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f52:	d013      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x6c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1a      	ldr	r2, [pc, #104]	; (8002fc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00e      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x6c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a19      	ldr	r2, [pc, #100]	; (8002fc8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d009      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x6c>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a17      	ldr	r2, [pc, #92]	; (8002fcc <HAL_TIM_Base_Start_IT+0xbc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d004      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x6c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a16      	ldr	r2, [pc, #88]	; (8002fd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d111      	bne.n	8002fa0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b06      	cmp	r3, #6
 8002f8c:	d010      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9e:	e007      	b.n	8002fb0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40010000 	.word	0x40010000
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40000800 	.word	0x40000800
 8002fcc:	40000c00 	.word	0x40000c00
 8002fd0:	40014000 	.word	0x40014000

08002fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d122      	bne.n	8003030 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d11b      	bne.n	8003030 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0202 	mvn.w	r2, #2
 8003000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f8ee 	bl	80031f8 <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f8e0 	bl	80031e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f8f1 	bl	800320c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b04      	cmp	r3, #4
 800303c:	d122      	bne.n	8003084 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b04      	cmp	r3, #4
 800304a:	d11b      	bne.n	8003084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0204 	mvn.w	r2, #4
 8003054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2202      	movs	r2, #2
 800305a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8c4 	bl	80031f8 <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f8b6 	bl	80031e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f8c7 	bl	800320c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b08      	cmp	r3, #8
 8003090:	d122      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b08      	cmp	r3, #8
 800309e:	d11b      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0208 	mvn.w	r2, #8
 80030a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2204      	movs	r2, #4
 80030ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f89a 	bl	80031f8 <HAL_TIM_IC_CaptureCallback>
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f88c 	bl	80031e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f89d 	bl	800320c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b10      	cmp	r3, #16
 80030e4:	d122      	bne.n	800312c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d11b      	bne.n	800312c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0210 	mvn.w	r2, #16
 80030fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2208      	movs	r2, #8
 8003102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f870 	bl	80031f8 <HAL_TIM_IC_CaptureCallback>
 8003118:	e005      	b.n	8003126 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f862 	bl	80031e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f873 	bl	800320c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b01      	cmp	r3, #1
 8003138:	d10e      	bne.n	8003158 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b01      	cmp	r3, #1
 8003146:	d107      	bne.n	8003158 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0201 	mvn.w	r2, #1
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd fb50 	bl	80007f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003162:	2b80      	cmp	r3, #128	; 0x80
 8003164:	d10e      	bne.n	8003184 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d107      	bne.n	8003184 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800317c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f8e2 	bl	8003348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d10e      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d107      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f838 	bl	8003220 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d10e      	bne.n	80031dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d107      	bne.n	80031dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0220 	mvn.w	r2, #32
 80031d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f8ac 	bl	8003334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a34      	ldr	r2, [pc, #208]	; (8003318 <TIM_Base_SetConfig+0xe4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00f      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003252:	d00b      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a31      	ldr	r2, [pc, #196]	; (800331c <TIM_Base_SetConfig+0xe8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d007      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a30      	ldr	r2, [pc, #192]	; (8003320 <TIM_Base_SetConfig+0xec>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a2f      	ldr	r2, [pc, #188]	; (8003324 <TIM_Base_SetConfig+0xf0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d108      	bne.n	800327e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a25      	ldr	r2, [pc, #148]	; (8003318 <TIM_Base_SetConfig+0xe4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01b      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328c:	d017      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a22      	ldr	r2, [pc, #136]	; (800331c <TIM_Base_SetConfig+0xe8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d013      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a21      	ldr	r2, [pc, #132]	; (8003320 <TIM_Base_SetConfig+0xec>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00f      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a20      	ldr	r2, [pc, #128]	; (8003324 <TIM_Base_SetConfig+0xf0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00b      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <TIM_Base_SetConfig+0xf4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d007      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1e      	ldr	r2, [pc, #120]	; (800332c <TIM_Base_SetConfig+0xf8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d003      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <TIM_Base_SetConfig+0xfc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d108      	bne.n	80032d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a08      	ldr	r2, [pc, #32]	; (8003318 <TIM_Base_SetConfig+0xe4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d103      	bne.n	8003304 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	615a      	str	r2, [r3, #20]
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40010000 	.word	0x40010000
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800
 8003324:	40000c00 	.word	0x40000c00
 8003328:	40014000 	.word	0x40014000
 800332c:	40014400 	.word	0x40014400
 8003330:	40014800 	.word	0x40014800

08003334 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800335c:	b084      	sub	sp, #16
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	f107 001c 	add.w	r0, r7, #28
 800336a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	2b01      	cmp	r3, #1
 8003372:	d122      	bne.n	80033ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800339c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d105      	bne.n	80033ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f001 fb1c 	bl	80049ec <USB_CoreReset>
 80033b4:	4603      	mov	r3, r0
 80033b6:	73fb      	strb	r3, [r7, #15]
 80033b8:	e01a      	b.n	80033f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f001 fb10 	bl	80049ec <USB_CoreReset>
 80033cc:	4603      	mov	r3, r0
 80033ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80033d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	639a      	str	r2, [r3, #56]	; 0x38
 80033e2:	e005      	b.n	80033f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d10b      	bne.n	800340e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f043 0206 	orr.w	r2, r3, #6
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f043 0220 	orr.w	r2, r3, #32
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800341a:	b004      	add	sp, #16
 800341c:	4770      	bx	lr
	...

08003420 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	4613      	mov	r3, r2
 800342c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d165      	bne.n	8003500 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4a41      	ldr	r2, [pc, #260]	; (800353c <USB_SetTurnaroundTime+0x11c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d906      	bls.n	800344a <USB_SetTurnaroundTime+0x2a>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4a40      	ldr	r2, [pc, #256]	; (8003540 <USB_SetTurnaroundTime+0x120>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d202      	bcs.n	800344a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003444:	230f      	movs	r3, #15
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	e062      	b.n	8003510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4a3c      	ldr	r2, [pc, #240]	; (8003540 <USB_SetTurnaroundTime+0x120>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d306      	bcc.n	8003460 <USB_SetTurnaroundTime+0x40>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	4a3b      	ldr	r2, [pc, #236]	; (8003544 <USB_SetTurnaroundTime+0x124>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d202      	bcs.n	8003460 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800345a:	230e      	movs	r3, #14
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	e057      	b.n	8003510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4a38      	ldr	r2, [pc, #224]	; (8003544 <USB_SetTurnaroundTime+0x124>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d306      	bcc.n	8003476 <USB_SetTurnaroundTime+0x56>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4a37      	ldr	r2, [pc, #220]	; (8003548 <USB_SetTurnaroundTime+0x128>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d202      	bcs.n	8003476 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003470:	230d      	movs	r3, #13
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	e04c      	b.n	8003510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4a33      	ldr	r2, [pc, #204]	; (8003548 <USB_SetTurnaroundTime+0x128>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d306      	bcc.n	800348c <USB_SetTurnaroundTime+0x6c>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4a32      	ldr	r2, [pc, #200]	; (800354c <USB_SetTurnaroundTime+0x12c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d802      	bhi.n	800348c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003486:	230c      	movs	r3, #12
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e041      	b.n	8003510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4a2f      	ldr	r2, [pc, #188]	; (800354c <USB_SetTurnaroundTime+0x12c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d906      	bls.n	80034a2 <USB_SetTurnaroundTime+0x82>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4a2e      	ldr	r2, [pc, #184]	; (8003550 <USB_SetTurnaroundTime+0x130>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d802      	bhi.n	80034a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800349c:	230b      	movs	r3, #11
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e036      	b.n	8003510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4a2a      	ldr	r2, [pc, #168]	; (8003550 <USB_SetTurnaroundTime+0x130>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d906      	bls.n	80034b8 <USB_SetTurnaroundTime+0x98>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4a29      	ldr	r2, [pc, #164]	; (8003554 <USB_SetTurnaroundTime+0x134>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d802      	bhi.n	80034b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80034b2:	230a      	movs	r3, #10
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	e02b      	b.n	8003510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4a26      	ldr	r2, [pc, #152]	; (8003554 <USB_SetTurnaroundTime+0x134>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d906      	bls.n	80034ce <USB_SetTurnaroundTime+0xae>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4a25      	ldr	r2, [pc, #148]	; (8003558 <USB_SetTurnaroundTime+0x138>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d202      	bcs.n	80034ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80034c8:	2309      	movs	r3, #9
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	e020      	b.n	8003510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4a21      	ldr	r2, [pc, #132]	; (8003558 <USB_SetTurnaroundTime+0x138>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d306      	bcc.n	80034e4 <USB_SetTurnaroundTime+0xc4>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4a20      	ldr	r2, [pc, #128]	; (800355c <USB_SetTurnaroundTime+0x13c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d802      	bhi.n	80034e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80034de:	2308      	movs	r3, #8
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	e015      	b.n	8003510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4a1d      	ldr	r2, [pc, #116]	; (800355c <USB_SetTurnaroundTime+0x13c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d906      	bls.n	80034fa <USB_SetTurnaroundTime+0xda>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4a1c      	ldr	r2, [pc, #112]	; (8003560 <USB_SetTurnaroundTime+0x140>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d202      	bcs.n	80034fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80034f4:	2307      	movs	r3, #7
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	e00a      	b.n	8003510 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80034fa:	2306      	movs	r3, #6
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	e007      	b.n	8003510 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003506:	2309      	movs	r3, #9
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	e001      	b.n	8003510 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800350c:	2309      	movs	r3, #9
 800350e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	029b      	lsls	r3, r3, #10
 8003524:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003528:	431a      	orrs	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	00d8acbf 	.word	0x00d8acbf
 8003540:	00e4e1c0 	.word	0x00e4e1c0
 8003544:	00f42400 	.word	0x00f42400
 8003548:	01067380 	.word	0x01067380
 800354c:	011a499f 	.word	0x011a499f
 8003550:	01312cff 	.word	0x01312cff
 8003554:	014ca43f 	.word	0x014ca43f
 8003558:	016e3600 	.word	0x016e3600
 800355c:	01a6ab1f 	.word	0x01a6ab1f
 8003560:	01e84800 	.word	0x01e84800

08003564 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 0201 	bic.w	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d115      	bne.n	80035f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035d6:	2001      	movs	r0, #1
 80035d8:	f7fd fb5c 	bl	8000c94 <HAL_Delay>
      ms++;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3301      	adds	r3, #1
 80035e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f001 f972 	bl	80048cc <USB_GetMode>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d01e      	beq.n	800362c <USB_SetCurrentMode+0x84>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b31      	cmp	r3, #49	; 0x31
 80035f2:	d9f0      	bls.n	80035d6 <USB_SetCurrentMode+0x2e>
 80035f4:	e01a      	b.n	800362c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d115      	bne.n	8003628 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003608:	2001      	movs	r0, #1
 800360a:	f7fd fb43 	bl	8000c94 <HAL_Delay>
      ms++;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3301      	adds	r3, #1
 8003612:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f001 f959 	bl	80048cc <USB_GetMode>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <USB_SetCurrentMode+0x84>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b31      	cmp	r3, #49	; 0x31
 8003624:	d9f0      	bls.n	8003608 <USB_SetCurrentMode+0x60>
 8003626:	e001      	b.n	800362c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e005      	b.n	8003638 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b32      	cmp	r3, #50	; 0x32
 8003630:	d101      	bne.n	8003636 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003640:	b084      	sub	sp, #16
 8003642:	b580      	push	{r7, lr}
 8003644:	b086      	sub	sp, #24
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800364e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800365a:	2300      	movs	r3, #0
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	e009      	b.n	8003674 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	3340      	adds	r3, #64	; 0x40
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	2200      	movs	r2, #0
 800366c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	3301      	adds	r3, #1
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b0e      	cmp	r3, #14
 8003678:	d9f2      	bls.n	8003660 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800367a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d11c      	bne.n	80036ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368e:	f043 0302 	orr.w	r3, r3, #2
 8003692:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	639a      	str	r2, [r3, #56]	; 0x38
 80036b8:	e00b      	b.n	80036d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036d8:	461a      	mov	r2, r3
 80036da:	2300      	movs	r3, #0
 80036dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e4:	4619      	mov	r1, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ec:	461a      	mov	r2, r3
 80036ee:	680b      	ldr	r3, [r1, #0]
 80036f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d10c      	bne.n	8003712 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d104      	bne.n	8003708 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036fe:	2100      	movs	r1, #0
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f945 	bl	8003990 <USB_SetDevSpeed>
 8003706:	e008      	b.n	800371a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003708:	2101      	movs	r1, #1
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f940 	bl	8003990 <USB_SetDevSpeed>
 8003710:	e003      	b.n	800371a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003712:	2103      	movs	r1, #3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f93b 	bl	8003990 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800371a:	2110      	movs	r1, #16
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f8f3 	bl	8003908 <USB_FlushTxFifo>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f90f 	bl	8003950 <USB_FlushRxFifo>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003742:	461a      	mov	r2, r3
 8003744:	2300      	movs	r3, #0
 8003746:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374e:	461a      	mov	r2, r3
 8003750:	2300      	movs	r3, #0
 8003752:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375a:	461a      	mov	r2, r3
 800375c:	2300      	movs	r3, #0
 800375e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	e043      	b.n	80037ee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800377c:	d118      	bne.n	80037b0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003790:	461a      	mov	r2, r3
 8003792:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	e013      	b.n	80037c2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a6:	461a      	mov	r2, r3
 80037a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e008      	b.n	80037c2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037bc:	461a      	mov	r2, r3
 80037be:	2300      	movs	r3, #0
 80037c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ce:	461a      	mov	r2, r3
 80037d0:	2300      	movs	r3, #0
 80037d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e0:	461a      	mov	r2, r3
 80037e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	3301      	adds	r3, #1
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d3b7      	bcc.n	8003766 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	e043      	b.n	8003884 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800380e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003812:	d118      	bne.n	8003846 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003826:	461a      	mov	r2, r3
 8003828:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e013      	b.n	8003858 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383c:	461a      	mov	r2, r3
 800383e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	e008      	b.n	8003858 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003852:	461a      	mov	r2, r3
 8003854:	2300      	movs	r3, #0
 8003856:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003864:	461a      	mov	r2, r3
 8003866:	2300      	movs	r3, #0
 8003868:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003876:	461a      	mov	r2, r3
 8003878:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800387c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	3301      	adds	r3, #1
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	429a      	cmp	r2, r3
 800388a:	d3b7      	bcc.n	80037fc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800389a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800389e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d105      	bne.n	80038c0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	f043 0210 	orr.w	r2, r3, #16
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699a      	ldr	r2, [r3, #24]
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <USB_DevInit+0x2c4>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f043 0208 	orr.w	r2, r3, #8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d107      	bne.n	80038f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038ec:	f043 0304 	orr.w	r3, r3, #4
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80038f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003900:	b004      	add	sp, #16
 8003902:	4770      	bx	lr
 8003904:	803c3800 	.word	0x803c3800

08003908 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	019b      	lsls	r3, r3, #6
 800391a:	f043 0220 	orr.w	r2, r3, #32
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3301      	adds	r3, #1
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	4a08      	ldr	r2, [pc, #32]	; (800394c <USB_FlushTxFifo+0x44>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e006      	b.n	8003940 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b20      	cmp	r3, #32
 800393c:	d0f1      	beq.n	8003922 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	00030d40 	.word	0x00030d40

08003950 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2210      	movs	r2, #16
 8003960:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3301      	adds	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	4a08      	ldr	r2, [pc, #32]	; (800398c <USB_FlushRxFifo+0x3c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e006      	b.n	8003980 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b10      	cmp	r3, #16
 800397c:	d0f1      	beq.n	8003962 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	00030d40 	.word	0x00030d40

08003990 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	68f9      	ldr	r1, [r7, #12]
 80039ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b087      	sub	sp, #28
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0306 	and.w	r3, r3, #6
 80039da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80039e2:	2300      	movs	r3, #0
 80039e4:	75fb      	strb	r3, [r7, #23]
 80039e6:	e00a      	b.n	80039fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d002      	beq.n	80039f4 <USB_GetDevSpeed+0x32>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b06      	cmp	r3, #6
 80039f2:	d102      	bne.n	80039fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80039f4:	2302      	movs	r3, #2
 80039f6:	75fb      	strb	r3, [r7, #23]
 80039f8:	e001      	b.n	80039fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80039fa:	230f      	movs	r3, #15
 80039fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	371c      	adds	r7, #28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	785b      	ldrb	r3, [r3, #1]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d13a      	bne.n	8003a9e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2e:	69da      	ldr	r2, [r3, #28]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	2101      	movs	r1, #1
 8003a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	68f9      	ldr	r1, [r7, #12]
 8003a42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d155      	bne.n	8003b0c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	78db      	ldrb	r3, [r3, #3]
 8003a7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	059b      	lsls	r3, r3, #22
 8003a82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a84:	4313      	orrs	r3, r2
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	0151      	lsls	r1, r2, #5
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	440a      	add	r2, r1
 8003a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	e036      	b.n	8003b0c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	2101      	movs	r1, #1
 8003ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab4:	041b      	lsls	r3, r3, #16
 8003ab6:	68f9      	ldr	r1, [r7, #12]
 8003ab8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003abc:	4313      	orrs	r3, r2
 8003abe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d11a      	bne.n	8003b0c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	78db      	ldrb	r3, [r3, #3]
 8003af0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003af2:	430b      	orrs	r3, r1
 8003af4:	4313      	orrs	r3, r2
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	0151      	lsls	r1, r2, #5
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	440a      	add	r2, r1
 8003afe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b0a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	785b      	ldrb	r3, [r3, #1]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d161      	bne.n	8003bfc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b4e:	d11f      	bne.n	8003b90 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	0151      	lsls	r1, r2, #5
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	440a      	add	r2, r1
 8003b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b6e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	0151      	lsls	r1, r2, #5
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	440a      	add	r2, r1
 8003b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	68f9      	ldr	r1, [r7, #12]
 8003bac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	68f9      	ldr	r1, [r7, #12]
 8003bd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	0159      	lsls	r1, r3, #5
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	440b      	add	r3, r1
 8003bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4b35      	ldr	r3, [pc, #212]	; (8003ccc <USB_DeactivateEndpoint+0x1b0>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	600b      	str	r3, [r1, #0]
 8003bfa:	e060      	b.n	8003cbe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c12:	d11f      	bne.n	8003c54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	0151      	lsls	r1, r2, #5
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	440a      	add	r2, r1
 8003c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	0151      	lsls	r1, r2, #5
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	440a      	add	r2, r1
 8003c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	2101      	movs	r1, #1
 8003c66:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6a:	041b      	lsls	r3, r3, #16
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	68f9      	ldr	r1, [r7, #12]
 8003c70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c74:	4013      	ands	r3, r2
 8003c76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	2101      	movs	r1, #1
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	041b      	lsls	r3, r3, #16
 8003c90:	43db      	mvns	r3, r3
 8003c92:	68f9      	ldr	r1, [r7, #12]
 8003c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	0159      	lsls	r1, r3, #5
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	440b      	add	r3, r1
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <USB_DeactivateEndpoint+0x1b4>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	ec337800 	.word	0xec337800
 8003cd0:	eff37800 	.word	0xeff37800

08003cd4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	; 0x28
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	785b      	ldrb	r3, [r3, #1]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	f040 815c 	bne.w	8003fae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d132      	bne.n	8003d64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	0151      	lsls	r1, r2, #5
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	440a      	add	r2, r1
 8003d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	0151      	lsls	r1, r2, #5
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	440a      	add	r2, r1
 8003d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	0151      	lsls	r1, r2, #5
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	440a      	add	r2, r1
 8003d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5c:	0cdb      	lsrs	r3, r3, #19
 8003d5e:	04db      	lsls	r3, r3, #19
 8003d60:	6113      	str	r3, [r2, #16]
 8003d62:	e074      	b.n	8003e4e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	0151      	lsls	r1, r2, #5
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	440a      	add	r2, r1
 8003d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d7e:	0cdb      	lsrs	r3, r3, #19
 8003d80:	04db      	lsls	r3, r3, #19
 8003d82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	0151      	lsls	r1, r2, #5
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	440a      	add	r2, r1
 8003d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003da2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003da6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	6959      	ldr	r1, [r3, #20]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	440b      	add	r3, r1
 8003dc0:	1e59      	subs	r1, r3, #1
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003dcc:	4b9d      	ldr	r3, [pc, #628]	; (8004044 <USB_EPStartXfer+0x370>)
 8003dce:	400b      	ands	r3, r1
 8003dd0:	69b9      	ldr	r1, [r7, #24]
 8003dd2:	0148      	lsls	r0, r1, #5
 8003dd4:	69f9      	ldr	r1, [r7, #28]
 8003dd6:	4401      	add	r1, r0
 8003dd8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df6:	69b9      	ldr	r1, [r7, #24]
 8003df8:	0148      	lsls	r0, r1, #5
 8003dfa:	69f9      	ldr	r1, [r7, #28]
 8003dfc:	4401      	add	r1, r0
 8003dfe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e02:	4313      	orrs	r3, r2
 8003e04:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	78db      	ldrb	r3, [r3, #3]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d11f      	bne.n	8003e4e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	0151      	lsls	r1, r2, #5
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	440a      	add	r2, r1
 8003e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e28:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e2c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	0151      	lsls	r1, r2, #5
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	440a      	add	r2, r1
 8003e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e4c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d14b      	bne.n	8003eec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d009      	beq.n	8003e70 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	78db      	ldrb	r3, [r3, #3]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d128      	bne.n	8003eca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d110      	bne.n	8003eaa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	0151      	lsls	r1, r2, #5
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	440a      	add	r2, r1
 8003e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	e00f      	b.n	8003eca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	0151      	lsls	r1, r2, #5
 8003ebc:	69fa      	ldr	r2, [r7, #28]
 8003ebe:	440a      	add	r2, r1
 8003ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e12f      	b.n	800414c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	0151      	lsls	r1, r2, #5
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	440a      	add	r2, r1
 8003f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f0a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	78db      	ldrb	r3, [r3, #3]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d015      	beq.n	8003f40 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 8117 	beq.w	800414c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	2101      	movs	r1, #1
 8003f30:	fa01 f303 	lsl.w	r3, r1, r3
 8003f34:	69f9      	ldr	r1, [r7, #28]
 8003f36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	634b      	str	r3, [r1, #52]	; 0x34
 8003f3e:	e105      	b.n	800414c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d110      	bne.n	8003f72 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	0151      	lsls	r1, r2, #5
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	440a      	add	r2, r1
 8003f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	e00f      	b.n	8003f92 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	0151      	lsls	r1, r2, #5
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	440a      	add	r2, r1
 8003f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f90:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	68d9      	ldr	r1, [r3, #12]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	781a      	ldrb	r2, [r3, #0]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	b298      	uxth	r0, r3
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fa2b 	bl	8004402 <USB_WritePacket>
 8003fac:	e0ce      	b.n	800414c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc8:	0cdb      	lsrs	r3, r3, #19
 8003fca:	04db      	lsls	r3, r3, #19
 8003fcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	0151      	lsls	r1, r2, #5
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ff0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d126      	bne.n	8004048 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004010:	69b9      	ldr	r1, [r7, #24]
 8004012:	0148      	lsls	r0, r1, #5
 8004014:	69f9      	ldr	r1, [r7, #28]
 8004016:	4401      	add	r1, r0
 8004018:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800401c:	4313      	orrs	r3, r2
 800401e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	0151      	lsls	r1, r2, #5
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	440a      	add	r2, r1
 8004036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800403a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800403e:	6113      	str	r3, [r2, #16]
 8004040:	e036      	b.n	80040b0 <USB_EPStartXfer+0x3dc>
 8004042:	bf00      	nop
 8004044:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	4413      	add	r3, r2
 8004052:	1e5a      	subs	r2, r3, #1
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	8afb      	ldrh	r3, [r7, #22]
 800406e:	04d9      	lsls	r1, r3, #19
 8004070:	4b39      	ldr	r3, [pc, #228]	; (8004158 <USB_EPStartXfer+0x484>)
 8004072:	400b      	ands	r3, r1
 8004074:	69b9      	ldr	r1, [r7, #24]
 8004076:	0148      	lsls	r0, r1, #5
 8004078:	69f9      	ldr	r1, [r7, #28]
 800407a:	4401      	add	r1, r0
 800407c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004080:	4313      	orrs	r3, r2
 8004082:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	8af9      	ldrh	r1, [r7, #22]
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a0:	69b9      	ldr	r1, [r7, #24]
 80040a2:	0148      	lsls	r0, r1, #5
 80040a4:	69f9      	ldr	r1, [r7, #28]
 80040a6:	4401      	add	r1, r0
 80040a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040ac:	4313      	orrs	r3, r2
 80040ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d10d      	bne.n	80040d2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	68d9      	ldr	r1, [r3, #12]
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ce:	460a      	mov	r2, r1
 80040d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	78db      	ldrb	r3, [r3, #3]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d128      	bne.n	800412c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d110      	bne.n	800410c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	0151      	lsls	r1, r2, #5
 80040fc:	69fa      	ldr	r2, [r7, #28]
 80040fe:	440a      	add	r2, r1
 8004100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004104:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	e00f      	b.n	800412c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	0151      	lsls	r1, r2, #5
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	440a      	add	r2, r1
 8004122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	0151      	lsls	r1, r2, #5
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	440a      	add	r2, r1
 8004142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004146:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800414a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	1ff80000 	.word	0x1ff80000

0800415c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	4613      	mov	r3, r2
 8004168:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	785b      	ldrb	r3, [r3, #1]
 8004178:	2b01      	cmp	r3, #1
 800417a:	f040 80cd 	bne.w	8004318 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d132      	bne.n	80041ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	0151      	lsls	r1, r2, #5
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	440a      	add	r2, r1
 800419c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	0151      	lsls	r1, r2, #5
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	440a      	add	r2, r1
 80041c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	0151      	lsls	r1, r2, #5
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	440a      	add	r2, r1
 80041e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e4:	0cdb      	lsrs	r3, r3, #19
 80041e6:	04db      	lsls	r3, r3, #19
 80041e8:	6113      	str	r3, [r2, #16]
 80041ea:	e04e      	b.n	800428a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	0151      	lsls	r1, r2, #5
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	440a      	add	r2, r1
 8004202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004206:	0cdb      	lsrs	r3, r3, #19
 8004208:	04db      	lsls	r3, r3, #19
 800420a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	0151      	lsls	r1, r2, #5
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	440a      	add	r2, r1
 8004222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004226:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800422a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800422e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	429a      	cmp	r2, r3
 800423a:	d903      	bls.n	8004244 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	0151      	lsls	r1, r2, #5
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	440a      	add	r2, r1
 800425a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800425e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004262:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800427a:	6939      	ldr	r1, [r7, #16]
 800427c:	0148      	lsls	r0, r1, #5
 800427e:	6979      	ldr	r1, [r7, #20]
 8004280:	4401      	add	r1, r0
 8004282:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004286:	4313      	orrs	r3, r2
 8004288:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d11e      	bne.n	80042ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d009      	beq.n	80042ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a4:	461a      	mov	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	0151      	lsls	r1, r2, #5
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	440a      	add	r2, r1
 80042c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	e092      	b.n	80043f4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	0151      	lsls	r1, r2, #5
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	440a      	add	r2, r1
 80042e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d07e      	beq.n	80043f4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	2101      	movs	r1, #1
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	6979      	ldr	r1, [r7, #20]
 800430e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004312:	4313      	orrs	r3, r2
 8004314:	634b      	str	r3, [r1, #52]	; 0x34
 8004316:	e06d      	b.n	80043f4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	0151      	lsls	r1, r2, #5
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	440a      	add	r2, r1
 800432e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004332:	0cdb      	lsrs	r3, r3, #19
 8004334:	04db      	lsls	r3, r3, #19
 8004336:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	0151      	lsls	r1, r2, #5
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	440a      	add	r2, r1
 800434e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004352:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004356:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800435a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	0151      	lsls	r1, r2, #5
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	440a      	add	r2, r1
 8004382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004386:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800438a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004398:	691a      	ldr	r2, [r3, #16]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a2:	6939      	ldr	r1, [r7, #16]
 80043a4:	0148      	lsls	r0, r1, #5
 80043a6:	6979      	ldr	r1, [r7, #20]
 80043a8:	4401      	add	r1, r0
 80043aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043ae:	4313      	orrs	r3, r2
 80043b0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d10d      	bne.n	80043d4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d009      	beq.n	80043d4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	68d9      	ldr	r1, [r3, #12]
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d0:	460a      	mov	r2, r1
 80043d2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	0151      	lsls	r1, r2, #5
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	440a      	add	r2, r1
 80043ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004402:	b480      	push	{r7}
 8004404:	b089      	sub	sp, #36	; 0x24
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	4611      	mov	r1, r2
 800440e:	461a      	mov	r2, r3
 8004410:	460b      	mov	r3, r1
 8004412:	71fb      	strb	r3, [r7, #7]
 8004414:	4613      	mov	r3, r2
 8004416:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004420:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004424:	2b00      	cmp	r3, #0
 8004426:	d123      	bne.n	8004470 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004428:	88bb      	ldrh	r3, [r7, #4]
 800442a:	3303      	adds	r3, #3
 800442c:	089b      	lsrs	r3, r3, #2
 800442e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004430:	2300      	movs	r3, #0
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	e018      	b.n	8004468 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004436:	79fb      	ldrb	r3, [r7, #7]
 8004438:	031a      	lsls	r2, r3, #12
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	4413      	add	r3, r2
 800443e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004442:	461a      	mov	r2, r3
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6013      	str	r3, [r2, #0]
      pSrc++;
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3301      	adds	r3, #1
 800444e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	3301      	adds	r3, #1
 8004454:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	3301      	adds	r3, #1
 800445a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	3301      	adds	r3, #1
 8004460:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	3301      	adds	r3, #1
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	429a      	cmp	r2, r3
 800446e:	d3e2      	bcc.n	8004436 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3724      	adds	r7, #36	; 0x24
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800447e:	b480      	push	{r7}
 8004480:	b08b      	sub	sp, #44	; 0x2c
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	4613      	mov	r3, r2
 800448a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	089b      	lsrs	r3, r3, #2
 8004498:	b29b      	uxth	r3, r3
 800449a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80044a4:	2300      	movs	r3, #0
 80044a6:	623b      	str	r3, [r7, #32]
 80044a8:	e014      	b.n	80044d4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	601a      	str	r2, [r3, #0]
    pDest++;
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	3301      	adds	r3, #1
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	3301      	adds	r3, #1
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	3301      	adds	r3, #1
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	3301      	adds	r3, #1
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	3301      	adds	r3, #1
 80044d2:	623b      	str	r3, [r7, #32]
 80044d4:	6a3a      	ldr	r2, [r7, #32]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d3e6      	bcc.n	80044aa <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80044dc:	8bfb      	ldrh	r3, [r7, #30]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d01e      	beq.n	8004520 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ec:	461a      	mov	r2, r3
 80044ee:	f107 0310 	add.w	r3, r7, #16
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004502:	b2da      	uxtb	r2, r3
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	701a      	strb	r2, [r3, #0]
      i++;
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	3301      	adds	r3, #1
 800450c:	623b      	str	r3, [r7, #32]
      pDest++;
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	3301      	adds	r3, #1
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004514:	8bfb      	ldrh	r3, [r7, #30]
 8004516:	3b01      	subs	r3, #1
 8004518:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800451a:	8bfb      	ldrh	r3, [r7, #30]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1ea      	bne.n	80044f6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004522:	4618      	mov	r0, r3
 8004524:	372c      	adds	r7, #44	; 0x2c
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800452e:	b480      	push	{r7}
 8004530:	b085      	sub	sp, #20
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	785b      	ldrb	r3, [r3, #1]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d12c      	bne.n	80045a4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	db12      	blt.n	8004582 <USB_EPSetStall+0x54>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00f      	beq.n	8004582 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	0151      	lsls	r1, r2, #5
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	440a      	add	r2, r1
 8004578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800457c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004580:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	0151      	lsls	r1, r2, #5
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	440a      	add	r2, r1
 8004598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e02b      	b.n	80045fc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	db12      	blt.n	80045dc <USB_EPSetStall+0xae>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00f      	beq.n	80045dc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	0151      	lsls	r1, r2, #5
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	440a      	add	r2, r1
 80045d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045da:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	0151      	lsls	r1, r2, #5
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	440a      	add	r2, r1
 80045f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800460a:	b480      	push	{r7}
 800460c:	b085      	sub	sp, #20
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	785b      	ldrb	r3, [r3, #1]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d128      	bne.n	8004678 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	440a      	add	r2, r1
 800463c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004640:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004644:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	78db      	ldrb	r3, [r3, #3]
 800464a:	2b03      	cmp	r3, #3
 800464c:	d003      	beq.n	8004656 <USB_EPClearStall+0x4c>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	78db      	ldrb	r3, [r3, #3]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d138      	bne.n	80046c8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	0151      	lsls	r1, r2, #5
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	440a      	add	r2, r1
 800466c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	e027      	b.n	80046c8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	0151      	lsls	r1, r2, #5
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	440a      	add	r2, r1
 800468e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004692:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004696:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	78db      	ldrb	r3, [r3, #3]
 800469c:	2b03      	cmp	r3, #3
 800469e:	d003      	beq.n	80046a8 <USB_EPClearStall+0x9e>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	78db      	ldrb	r3, [r3, #3]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d10f      	bne.n	80046c8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b085      	sub	sp, #20
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	460b      	mov	r3, r1
 80046e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80046f8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	78fb      	ldrb	r3, [r7, #3]
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800470a:	68f9      	ldr	r1, [r7, #12]
 800470c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004710:	4313      	orrs	r3, r2
 8004712:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004722:	b480      	push	{r7}
 8004724:	b085      	sub	sp, #20
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800473c:	f023 0303 	bic.w	r3, r3, #3
 8004740:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004750:	f023 0302 	bic.w	r3, r3, #2
 8004754:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004792:	f043 0302 	orr.w	r3, r3, #2
 8004796:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b085      	sub	sp, #20
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4013      	ands	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047be:	68fb      	ldr	r3, [r7, #12]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	4013      	ands	r3, r2
 80047ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	0c1b      	lsrs	r3, r3, #16
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	4013      	ands	r3, r2
 8004822:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	b29b      	uxth	r3, r3
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	4013      	ands	r3, r2
 8004860:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004862:	68bb      	ldr	r3, [r7, #8]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004892:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
 80048a0:	01db      	lsls	r3, r3, #7
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4013      	ands	r3, r2
 80048bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048be:	68bb      	ldr	r3, [r7, #8]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f003 0301 	and.w	r3, r3, #1
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004902:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004906:	f023 0307 	bic.w	r3, r3, #7
 800490a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800491a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
	...

08004930 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	460b      	mov	r3, r1
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	333c      	adds	r3, #60	; 0x3c
 8004946:	3304      	adds	r3, #4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4a26      	ldr	r2, [pc, #152]	; (80049e8 <USB_EP0_OutStart+0xb8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d90a      	bls.n	800496a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004964:	d101      	bne.n	800496a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	e037      	b.n	80049da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004970:	461a      	mov	r2, r3
 8004972:	2300      	movs	r3, #0
 8004974:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004984:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004988:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004998:	f043 0318 	orr.w	r3, r3, #24
 800499c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80049b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80049b2:	7afb      	ldrb	r3, [r7, #11]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d10f      	bne.n	80049d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049be:	461a      	mov	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80049d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	4f54300a 	.word	0x4f54300a

080049ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3301      	adds	r3, #1
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	4a13      	ldr	r2, [pc, #76]	; (8004a4c <USB_CoreReset+0x60>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d901      	bls.n	8004a08 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e01a      	b.n	8004a3e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	daf3      	bge.n	80049f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f043 0201 	orr.w	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	3301      	adds	r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	4a09      	ldr	r2, [pc, #36]	; (8004a4c <USB_CoreReset+0x60>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d901      	bls.n	8004a30 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e006      	b.n	8004a3e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d0f1      	beq.n	8004a20 <USB_CoreReset+0x34>

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	00030d40 	.word	0x00030d40

08004a50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8004a54:	f001 f9ec 	bl	8005e30 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	4917      	ldr	r1, [pc, #92]	; (8004ab8 <MX_USB_DEVICE_Init+0x68>)
 8004a5c:	4817      	ldr	r0, [pc, #92]	; (8004abc <MX_USB_DEVICE_Init+0x6c>)
 8004a5e:	f003 f990 	bl	8007d82 <USBD_Init>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8004a68:	f7fb fed8 	bl	800081c <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8004a6c:	4914      	ldr	r1, [pc, #80]	; (8004ac0 <MX_USB_DEVICE_Init+0x70>)
 8004a6e:	4813      	ldr	r0, [pc, #76]	; (8004abc <MX_USB_DEVICE_Init+0x6c>)
 8004a70:	f003 f9b3 	bl	8007dda <USBD_RegisterClass>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8004a7a:	f7fb fecf 	bl	800081c <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8004a7e:	4911      	ldr	r1, [pc, #68]	; (8004ac4 <MX_USB_DEVICE_Init+0x74>)
 8004a80:	480e      	ldr	r0, [pc, #56]	; (8004abc <MX_USB_DEVICE_Init+0x6c>)
 8004a82:	f000 feb5 	bl	80057f0 <USBD_CDC_ACM_RegisterInterface>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8004a8c:	f7fb fec6 	bl	800081c <Error_Handler>
  {
    Error_Handler();
  }
#endif
#if (USBD_USE_MSC == 1)
  if (USBD_MSC_RegisterStorage(&hUsbDevice, &USBD_Storage_Interface_fops) != USBD_OK)
 8004a90:	490d      	ldr	r1, [pc, #52]	; (8004ac8 <MX_USB_DEVICE_Init+0x78>)
 8004a92:	480a      	ldr	r0, [pc, #40]	; (8004abc <MX_USB_DEVICE_Init+0x6c>)
 8004a94:	f001 fce4 	bl	8006460 <USBD_MSC_RegisterStorage>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8004a9e:	f7fb febd 	bl	800081c <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8004aa2:	4806      	ldr	r0, [pc, #24]	; (8004abc <MX_USB_DEVICE_Init+0x6c>)
 8004aa4:	f003 f9d7 	bl	8007e56 <USBD_Start>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 8004aae:	f7fb feb5 	bl	800081c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000020 	.word	0x20000020
 8004abc:	2000078c 	.word	0x2000078c
 8004ac0:	20000170 	.word	0x20000170
 8004ac4:	2000000c 	.word	0x2000000c
 8004ac8:	20000070 	.word	0x20000070

08004acc <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	01db      	lsls	r3, r3, #7
 8004ada:	4a06      	ldr	r2, [pc, #24]	; (8004af4 <CDC_Init+0x28>)
 8004adc:	441a      	add	r2, r3
 8004ade:	79fb      	ldrb	r3, [r7, #7]
 8004ae0:	4905      	ldr	r1, [pc, #20]	; (8004af8 <CDC_Init+0x2c>)
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 febe 	bl	8005864 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 8004ae8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000aa8 	.word	0x20000aa8
 8004af8:	2000078c 	.word	0x2000078c

08004afc <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 8004b06:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	603a      	str	r2, [r7, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4603      	mov	r3, r0
 8004b20:	71fb      	strb	r3, [r7, #7]
 8004b22:	460b      	mov	r3, r1
 8004b24:	71bb      	strb	r3, [r7, #6]
 8004b26:	4613      	mov	r3, r2
 8004b28:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8004b2a:	79bb      	ldrb	r3, [r7, #6]
 8004b2c:	2b23      	cmp	r3, #35	; 0x23
 8004b2e:	f200 80b6 	bhi.w	8004c9e <CDC_Control+0x18a>
 8004b32:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <CDC_Control+0x24>)
 8004b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b38:	08004c9f 	.word	0x08004c9f
 8004b3c:	08004c9f 	.word	0x08004c9f
 8004b40:	08004c9f 	.word	0x08004c9f
 8004b44:	08004c9f 	.word	0x08004c9f
 8004b48:	08004c9f 	.word	0x08004c9f
 8004b4c:	08004c9f 	.word	0x08004c9f
 8004b50:	08004c9f 	.word	0x08004c9f
 8004b54:	08004c9f 	.word	0x08004c9f
 8004b58:	08004c9f 	.word	0x08004c9f
 8004b5c:	08004c9f 	.word	0x08004c9f
 8004b60:	08004c9f 	.word	0x08004c9f
 8004b64:	08004c9f 	.word	0x08004c9f
 8004b68:	08004c9f 	.word	0x08004c9f
 8004b6c:	08004c9f 	.word	0x08004c9f
 8004b70:	08004c9f 	.word	0x08004c9f
 8004b74:	08004c9f 	.word	0x08004c9f
 8004b78:	08004c9f 	.word	0x08004c9f
 8004b7c:	08004c9f 	.word	0x08004c9f
 8004b80:	08004c9f 	.word	0x08004c9f
 8004b84:	08004c9f 	.word	0x08004c9f
 8004b88:	08004c9f 	.word	0x08004c9f
 8004b8c:	08004c9f 	.word	0x08004c9f
 8004b90:	08004c9f 	.word	0x08004c9f
 8004b94:	08004c9f 	.word	0x08004c9f
 8004b98:	08004c9f 	.word	0x08004c9f
 8004b9c:	08004c9f 	.word	0x08004c9f
 8004ba0:	08004c9f 	.word	0x08004c9f
 8004ba4:	08004c9f 	.word	0x08004c9f
 8004ba8:	08004c9f 	.word	0x08004c9f
 8004bac:	08004c9f 	.word	0x08004c9f
 8004bb0:	08004c9f 	.word	0x08004c9f
 8004bb4:	08004c9f 	.word	0x08004c9f
 8004bb8:	08004bc9 	.word	0x08004bc9
 8004bbc:	08004c29 	.word	0x08004c29
 8004bc0:	08004c9f 	.word	0x08004c9f
 8004bc4:	08004c9f 	.word	0x08004c9f
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	3302      	adds	r3, #2
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004be0:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	3303      	adds	r3, #3
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	061b      	lsls	r3, r3, #24
 8004bea:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	4611      	mov	r1, r2
 8004bf0:	4a2f      	ldr	r2, [pc, #188]	; (8004cb0 <CDC_Control+0x19c>)
 8004bf2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	7911      	ldrb	r1, [r2, #4]
 8004bfc:	4a2c      	ldr	r2, [pc, #176]	; (8004cb0 <CDC_Control+0x19c>)
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4413      	add	r3, r2
 8004c02:	460a      	mov	r2, r1
 8004c04:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	7951      	ldrb	r1, [r2, #5]
 8004c0c:	4a28      	ldr	r2, [pc, #160]	; (8004cb0 <CDC_Control+0x19c>)
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	460a      	mov	r2, r1
 8004c14:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	7991      	ldrb	r1, [r2, #6]
 8004c1c:	4a24      	ldr	r2, [pc, #144]	; (8004cb0 <CDC_Control+0x19c>)
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	460a      	mov	r2, r1
 8004c24:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 8004c26:	e03b      	b.n	8004ca0 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	4a21      	ldr	r2, [pc, #132]	; (8004cb0 <CDC_Control+0x19c>)
 8004c2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	4a1d      	ldr	r2, [pc, #116]	; (8004cb0 <CDC_Control+0x19c>)
 8004c3a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c3e:	0a1a      	lsrs	r2, r3, #8
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	3301      	adds	r3, #1
 8004c44:	b2d2      	uxtb	r2, r2
 8004c46:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	4a19      	ldr	r2, [pc, #100]	; (8004cb0 <CDC_Control+0x19c>)
 8004c4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c50:	0c1a      	lsrs	r2, r3, #16
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	3302      	adds	r3, #2
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	4a14      	ldr	r2, [pc, #80]	; (8004cb0 <CDC_Control+0x19c>)
 8004c5e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c62:	0e1a      	lsrs	r2, r3, #24
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	3303      	adds	r3, #3
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	3204      	adds	r2, #4
 8004c72:	490f      	ldr	r1, [pc, #60]	; (8004cb0 <CDC_Control+0x19c>)
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	440b      	add	r3, r1
 8004c78:	791b      	ldrb	r3, [r3, #4]
 8004c7a:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	3205      	adds	r2, #5
 8004c82:	490b      	ldr	r1, [pc, #44]	; (8004cb0 <CDC_Control+0x19c>)
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	440b      	add	r3, r1
 8004c88:	795b      	ldrb	r3, [r3, #5]
 8004c8a:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	3206      	adds	r2, #6
 8004c92:	4907      	ldr	r1, [pc, #28]	; (8004cb0 <CDC_Control+0x19c>)
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	440b      	add	r3, r1
 8004c98:	799b      	ldrb	r3, [r3, #6]
 8004c9a:	7013      	strb	r3, [r2, #0]
    break;
 8004c9c:	e000      	b.n	8004ca0 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8004c9e:	bf00      	nop
  }

  return (USBD_OK);
 8004ca0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000b28 	.word	0x20000b28

08004cb4 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 f825 	bl	8004d1c <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	4907      	ldr	r1, [pc, #28]	; (8004cf4 <CDC_Receive+0x40>)
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fdc3 	bl	8005864 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	4904      	ldr	r1, [pc, #16]	; (8004cf4 <CDC_Receive+0x40>)
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fe1e 	bl	8005924 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8004ce8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	2000078c 	.word	0x2000078c

08004cf8 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
 8004d02:	461a      	mov	r2, r3
 8004d04:	4603      	mov	r3, r0
 8004d06:	73fb      	strb	r3, [r7, #15]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	6039      	str	r1, [r7, #0]
 8004d26:	71fb      	strb	r3, [r7, #7]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004d3a:	fb02 f303 	mul.w	r3, r2, r3
 8004d3e:	4a0e      	ldr	r2, [pc, #56]	; (8004d78 <CDC_Transmit+0x5c>)
 8004d40:	4413      	add	r3, r2
 8004d42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e00d      	b.n	8004d6e <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 8004d52:	88bb      	ldrh	r3, [r7, #4]
 8004d54:	79f8      	ldrb	r0, [r7, #7]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	4908      	ldr	r1, [pc, #32]	; (8004d7c <CDC_Transmit+0x60>)
 8004d5a:	f000 fd5f 	bl	800581c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	4906      	ldr	r1, [pc, #24]	; (8004d7c <CDC_Transmit+0x60>)
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fd9c 	bl	80058a0 <USBD_CDC_TransmitPacket>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20008d48 	.word	0x20008d48
 8004d7c:	2000078c 	.word	0x2000078c

08004d80 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	6039      	str	r1, [r7, #0]
 8004d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2212      	movs	r2, #18
 8004d90:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8004d92:	4b03      	ldr	r3, [pc, #12]	; (8004da0 <USBD_DeviceDescriptor+0x20>)
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	2000003c 	.word	0x2000003c

08004da4 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	4603      	mov	r3, r0
 8004dac:	6039      	str	r1, [r7, #0]
 8004dae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2204      	movs	r2, #4
 8004db4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004db6:	4b03      	ldr	r3, [pc, #12]	; (8004dc4 <USBD_LangIDStrDescriptor+0x20>)
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	20000050 	.word	0x20000050

08004dc8 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	6039      	str	r1, [r7, #0]
 8004dd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d105      	bne.n	8004de6 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	4907      	ldr	r1, [pc, #28]	; (8004dfc <USBD_ProductStrDescriptor+0x34>)
 8004dde:	4808      	ldr	r0, [pc, #32]	; (8004e00 <USBD_ProductStrDescriptor+0x38>)
 8004de0:	f004 f877 	bl	8008ed2 <USBD_GetString>
 8004de4:	e004      	b.n	8004df0 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	4904      	ldr	r1, [pc, #16]	; (8004dfc <USBD_ProductStrDescriptor+0x34>)
 8004dea:	4805      	ldr	r0, [pc, #20]	; (8004e00 <USBD_ProductStrDescriptor+0x38>)
 8004dec:	f004 f871 	bl	8008ed2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004df0:	4b02      	ldr	r3, [pc, #8]	; (8004dfc <USBD_ProductStrDescriptor+0x34>)
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000b30 	.word	0x20000b30
 8004e00:	0800d73c 	.word	0x0800d73c

08004e04 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	6039      	str	r1, [r7, #0]
 8004e0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	4904      	ldr	r1, [pc, #16]	; (8004e24 <USBD_ManufacturerStrDescriptor+0x20>)
 8004e14:	4804      	ldr	r0, [pc, #16]	; (8004e28 <USBD_ManufacturerStrDescriptor+0x24>)
 8004e16:	f004 f85c 	bl	8008ed2 <USBD_GetString>
  return USBD_StrDesc;
 8004e1a:	4b02      	ldr	r3, [pc, #8]	; (8004e24 <USBD_ManufacturerStrDescriptor+0x20>)
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	20000b30 	.word	0x20000b30
 8004e28:	0800d754 	.word	0x0800d754

08004e2c <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	6039      	str	r1, [r7, #0]
 8004e36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	221a      	movs	r2, #26
 8004e3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8004e3e:	f000 f843 	bl	8004ec8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8004e42:	4b02      	ldr	r3, [pc, #8]	; (8004e4c <USBD_SerialStrDescriptor+0x20>)
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	20000054 	.word	0x20000054

08004e50 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4603      	mov	r3, r0
 8004e58:	6039      	str	r1, [r7, #0]
 8004e5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d105      	bne.n	8004e6e <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	4907      	ldr	r1, [pc, #28]	; (8004e84 <USBD_ConfigStrDescriptor+0x34>)
 8004e66:	4808      	ldr	r0, [pc, #32]	; (8004e88 <USBD_ConfigStrDescriptor+0x38>)
 8004e68:	f004 f833 	bl	8008ed2 <USBD_GetString>
 8004e6c:	e004      	b.n	8004e78 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	4904      	ldr	r1, [pc, #16]	; (8004e84 <USBD_ConfigStrDescriptor+0x34>)
 8004e72:	4805      	ldr	r0, [pc, #20]	; (8004e88 <USBD_ConfigStrDescriptor+0x38>)
 8004e74:	f004 f82d 	bl	8008ed2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004e78:	4b02      	ldr	r3, [pc, #8]	; (8004e84 <USBD_ConfigStrDescriptor+0x34>)
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20000b30 	.word	0x20000b30
 8004e88:	0800d768 	.word	0x0800d768

08004e8c <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	6039      	str	r1, [r7, #0]
 8004e96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d105      	bne.n	8004eaa <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	4907      	ldr	r1, [pc, #28]	; (8004ec0 <USBD_InterfaceStrDescriptor+0x34>)
 8004ea2:	4808      	ldr	r0, [pc, #32]	; (8004ec4 <USBD_InterfaceStrDescriptor+0x38>)
 8004ea4:	f004 f815 	bl	8008ed2 <USBD_GetString>
 8004ea8:	e004      	b.n	8004eb4 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	4904      	ldr	r1, [pc, #16]	; (8004ec0 <USBD_InterfaceStrDescriptor+0x34>)
 8004eae:	4805      	ldr	r0, [pc, #20]	; (8004ec4 <USBD_InterfaceStrDescriptor+0x38>)
 8004eb0:	f004 f80f 	bl	8008ed2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004eb4:	4b02      	ldr	r3, [pc, #8]	; (8004ec0 <USBD_InterfaceStrDescriptor+0x34>)
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000b30 	.word	0x20000b30
 8004ec4:	0800d778 	.word	0x0800d778

08004ec8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004ece:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <Get_SerialNum+0x44>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004ed4:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <Get_SerialNum+0x48>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004eda:	4b0e      	ldr	r3, [pc, #56]	; (8004f14 <Get_SerialNum+0x4c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004eee:	2208      	movs	r2, #8
 8004ef0:	4909      	ldr	r1, [pc, #36]	; (8004f18 <Get_SerialNum+0x50>)
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 f814 	bl	8004f20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004ef8:	2204      	movs	r2, #4
 8004efa:	4908      	ldr	r1, [pc, #32]	; (8004f1c <Get_SerialNum+0x54>)
 8004efc:	68b8      	ldr	r0, [r7, #8]
 8004efe:	f000 f80f 	bl	8004f20 <IntToUnicode>
  }
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	1fff7a10 	.word	0x1fff7a10
 8004f10:	1fff7a14 	.word	0x1fff7a14
 8004f14:	1fff7a18 	.word	0x1fff7a18
 8004f18:	20000056 	.word	0x20000056
 8004f1c:	20000066 	.word	0x20000066

08004f20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8004f32:	2300      	movs	r3, #0
 8004f34:	75fb      	strb	r3, [r7, #23]
 8004f36:	e027      	b.n	8004f88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	0f1b      	lsrs	r3, r3, #28
 8004f3c:	2b09      	cmp	r3, #9
 8004f3e:	d80b      	bhi.n	8004f58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	0f1b      	lsrs	r3, r3, #28
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	440b      	add	r3, r1
 8004f50:	3230      	adds	r2, #48	; 0x30
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]
 8004f56:	e00a      	b.n	8004f6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	0f1b      	lsrs	r3, r3, #28
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	4619      	mov	r1, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	440b      	add	r3, r1
 8004f68:	3237      	adds	r2, #55	; 0x37
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	3301      	adds	r3, #1
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	2200      	movs	r2, #0
 8004f80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8004f82:	7dfb      	ldrb	r3, [r7, #23]
 8004f84:	3301      	adds	r3, #1
 8004f86:	75fb      	strb	r3, [r7, #23]
 8004f88:	7dfa      	ldrb	r2, [r7, #23]
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d3d3      	bcc.n	8004f38 <IntToUnicode+0x18>
  }
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <STORAGE_Init>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init(uint8_t lun)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8004fa8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <STORAGE_GetCapacity>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	22c8      	movs	r2, #200	; 0xc8
 8004fc8:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fd0:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8004fd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <STORAGE_IsReady>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady(uint8_t lun)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8004fea:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <STORAGE_IsWriteProtected>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected(uint8_t lun)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8005002:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <STORAGE_Read>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8005010:	b480      	push	{r7}
 8005012:	b089      	sub	sp, #36	; 0x24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	461a      	mov	r2, r3
 800501c:	4603      	mov	r3, r0
 800501e:	73fb      	strb	r3, [r7, #15]
 8005020:	4613      	mov	r3, r2
 8005022:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

  uint32_t bytecount = blk_len*STORAGE_BLK_SIZ;
 8005024:	89bb      	ldrh	r3, [r7, #12]
 8005026:	025b      	lsls	r3, r3, #9
 8005028:	61bb      	str	r3, [r7, #24]
  uint32_t mem_address = blk_addr*STORAGE_BLK_SIZ;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	025b      	lsls	r3, r3, #9
 800502e:	617b      	str	r3, [r7, #20]

  for(uint32_t i=0; i<bytecount; i++)
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	e00b      	b.n	800504e <STORAGE_Read+0x3e>
      {
	  buf[i] = MSC_Storage[mem_address+i];
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	441a      	add	r2, r3
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	440b      	add	r3, r1
 8005042:	4908      	ldr	r1, [pc, #32]	; (8005064 <STORAGE_Read+0x54>)
 8005044:	5c8a      	ldrb	r2, [r1, r2]
 8005046:	701a      	strb	r2, [r3, #0]
  for(uint32_t i=0; i<bytecount; i++)
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	3301      	adds	r3, #1
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	429a      	cmp	r2, r3
 8005054:	d3ef      	bcc.n	8005036 <STORAGE_Read+0x26>
      }

  return (USBD_OK);
 8005056:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005058:	4618      	mov	r0, r3
 800505a:	3724      	adds	r7, #36	; 0x24
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	20000d30 	.word	0x20000d30

08005068 <STORAGE_Write>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8005068:	b480      	push	{r7}
 800506a:	b089      	sub	sp, #36	; 0x24
 800506c:	af00      	add	r7, sp, #0
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
 8005072:	461a      	mov	r2, r3
 8005074:	4603      	mov	r3, r0
 8005076:	73fb      	strb	r3, [r7, #15]
 8005078:	4613      	mov	r3, r2
 800507a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */

   uint32_t bytecount = blk_len*STORAGE_BLK_SIZ;
 800507c:	89bb      	ldrh	r3, [r7, #12]
 800507e:	025b      	lsls	r3, r3, #9
 8005080:	61bb      	str	r3, [r7, #24]
   uint32_t mem_address = blk_addr*STORAGE_BLK_SIZ;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	025b      	lsls	r3, r3, #9
 8005086:	617b      	str	r3, [r7, #20]

    for(uint32_t i=0; i<bytecount; i++)
 8005088:	2300      	movs	r3, #0
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	e00b      	b.n	80050a6 <STORAGE_Write+0x3e>
    {
	MSC_Storage[mem_address+i] = buf[i];
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	441a      	add	r2, r3
 8005094:	6979      	ldr	r1, [r7, #20]
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	440b      	add	r3, r1
 800509a:	7811      	ldrb	r1, [r2, #0]
 800509c:	4a07      	ldr	r2, [pc, #28]	; (80050bc <STORAGE_Write+0x54>)
 800509e:	54d1      	strb	r1, [r2, r3]
    for(uint32_t i=0; i<bytecount; i++)
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	3301      	adds	r3, #1
 80050a4:	61fb      	str	r3, [r7, #28]
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d3ef      	bcc.n	800508e <STORAGE_Write+0x26>
    }

  return (USBD_OK);
 80050ae:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3724      	adds	r7, #36	; 0x24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	20000d30 	.word	0x20000d30

080050c0 <STORAGE_GetMaxLun>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80050c4:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80050e0:	2300      	movs	r3, #0
 80050e2:	73fb      	strb	r3, [r7, #15]
 80050e4:	e0c6      	b.n	8005274 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80050ec:	fb02 f303 	mul.w	r3, r2, r3
 80050f0:	4a65      	ldr	r2, [pc, #404]	; (8005288 <USBD_CDC_Init+0x1b8>)
 80050f2:	4413      	add	r3, r2
 80050f4:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	7c1b      	ldrb	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d13d      	bne.n	800517a <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	4a62      	ldr	r2, [pc, #392]	; (800528c <USBD_CDC_Init+0x1bc>)
 8005102:	5cd1      	ldrb	r1, [r2, r3]
 8005104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005108:	2202      	movs	r2, #2
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f004 f92b 	bl	8009366 <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8005110:	7bfb      	ldrb	r3, [r7, #15]
 8005112:	4a5e      	ldr	r2, [pc, #376]	; (800528c <USBD_CDC_Init+0x1bc>)
 8005114:	5cd3      	ldrb	r3, [r2, r3]
 8005116:	f003 020f 	and.w	r2, r3, #15
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	440b      	add	r3, r1
 8005126:	3324      	adds	r3, #36	; 0x24
 8005128:	2201      	movs	r2, #1
 800512a:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800512c:	7bfb      	ldrb	r3, [r7, #15]
 800512e:	4a58      	ldr	r2, [pc, #352]	; (8005290 <USBD_CDC_Init+0x1c0>)
 8005130:	5cd1      	ldrb	r1, [r2, r3]
 8005132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005136:	2202      	movs	r2, #2
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f004 f914 	bl	8009366 <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	4a53      	ldr	r2, [pc, #332]	; (8005290 <USBD_CDC_Init+0x1c0>)
 8005142:	5cd3      	ldrb	r3, [r2, r3]
 8005144:	f003 020f 	and.w	r2, r3, #15
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005158:	2201      	movs	r2, #1
 800515a:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	4a4d      	ldr	r2, [pc, #308]	; (8005294 <USBD_CDC_Init+0x1c4>)
 8005160:	5cd3      	ldrb	r3, [r2, r3]
 8005162:	f003 020f 	and.w	r2, r3, #15
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	3326      	adds	r3, #38	; 0x26
 8005174:	2210      	movs	r2, #16
 8005176:	801a      	strh	r2, [r3, #0]
 8005178:	e03a      	b.n	80051f0 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800517a:	7bfb      	ldrb	r3, [r7, #15]
 800517c:	4a43      	ldr	r2, [pc, #268]	; (800528c <USBD_CDC_Init+0x1bc>)
 800517e:	5cd1      	ldrb	r1, [r2, r3]
 8005180:	2340      	movs	r3, #64	; 0x40
 8005182:	2202      	movs	r2, #2
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f004 f8ee 	bl	8009366 <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	4a3f      	ldr	r2, [pc, #252]	; (800528c <USBD_CDC_Init+0x1bc>)
 800518e:	5cd3      	ldrb	r3, [r2, r3]
 8005190:	f003 020f 	and.w	r2, r3, #15
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	440b      	add	r3, r1
 80051a0:	3324      	adds	r3, #36	; 0x24
 80051a2:	2201      	movs	r2, #1
 80051a4:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	4a39      	ldr	r2, [pc, #228]	; (8005290 <USBD_CDC_Init+0x1c0>)
 80051aa:	5cd1      	ldrb	r1, [r2, r3]
 80051ac:	2340      	movs	r3, #64	; 0x40
 80051ae:	2202      	movs	r2, #2
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f004 f8d8 	bl	8009366 <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	4a35      	ldr	r2, [pc, #212]	; (8005290 <USBD_CDC_Init+0x1c0>)
 80051ba:	5cd3      	ldrb	r3, [r2, r3]
 80051bc:	f003 020f 	and.w	r2, r3, #15
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	440b      	add	r3, r1
 80051cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051d0:	2201      	movs	r2, #1
 80051d2:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	4a2f      	ldr	r2, [pc, #188]	; (8005294 <USBD_CDC_Init+0x1c4>)
 80051d8:	5cd3      	ldrb	r3, [r2, r3]
 80051da:	f003 020f 	and.w	r2, r3, #15
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	3326      	adds	r3, #38	; 0x26
 80051ec:	2210      	movs	r2, #16
 80051ee:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	4a28      	ldr	r2, [pc, #160]	; (8005294 <USBD_CDC_Init+0x1c4>)
 80051f4:	5cd1      	ldrb	r1, [r2, r3]
 80051f6:	2308      	movs	r3, #8
 80051f8:	2203      	movs	r2, #3
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f004 f8b3 	bl	8009366 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	4a24      	ldr	r2, [pc, #144]	; (8005294 <USBD_CDC_Init+0x1c4>)
 8005204:	5cd3      	ldrb	r3, [r2, r3]
 8005206:	f003 020f 	and.w	r2, r3, #15
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	3324      	adds	r3, #36	; 0x24
 8005218:	2201      	movs	r2, #1
 800521a:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	7bfa      	ldrb	r2, [r7, #15]
 8005226:	4610      	mov	r0, r2
 8005228:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2200      	movs	r2, #0
 800522e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2200      	movs	r2, #0
 8005236:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	7c1b      	ldrb	r3, [r3, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10b      	bne.n	800525a <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	4a12      	ldr	r2, [pc, #72]	; (8005290 <USBD_CDC_Init+0x1c0>)
 8005246:	5cd1      	ldrb	r1, [r2, r3]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800524e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f004 f995 	bl	8009582 <USBD_LL_PrepareReceive>
 8005258:	e009      	b.n	800526e <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800525a:	7bfb      	ldrb	r3, [r7, #15]
 800525c:	4a0c      	ldr	r2, [pc, #48]	; (8005290 <USBD_CDC_Init+0x1c0>)
 800525e:	5cd1      	ldrb	r1, [r2, r3]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005266:	2340      	movs	r3, #64	; 0x40
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f004 f98a 	bl	8009582 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	3301      	adds	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	2b00      	cmp	r3, #0
 8005278:	f43f af35 	beq.w	80050e6 <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20008d48 	.word	0x20008d48
 800528c:	20008d30 	.word	0x20008d30
 8005290:	20008d34 	.word	0x20008d34
 8005294:	20008d38 	.word	0x20008d38

08005298 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80052a4:	2300      	movs	r3, #0
 80052a6:	73fb      	strb	r3, [r7, #15]
 80052a8:	e057      	b.n	800535a <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	4a2f      	ldr	r2, [pc, #188]	; (800536c <USBD_CDC_DeInit+0xd4>)
 80052ae:	5cd3      	ldrb	r3, [r2, r3]
 80052b0:	4619      	mov	r1, r3
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f004 f87d 	bl	80093b2 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	4a2c      	ldr	r2, [pc, #176]	; (800536c <USBD_CDC_DeInit+0xd4>)
 80052bc:	5cd3      	ldrb	r3, [r2, r3]
 80052be:	f003 020f 	and.w	r2, r3, #15
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	3324      	adds	r3, #36	; 0x24
 80052d0:	2200      	movs	r2, #0
 80052d2:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
 80052d6:	4a26      	ldr	r2, [pc, #152]	; (8005370 <USBD_CDC_DeInit+0xd8>)
 80052d8:	5cd3      	ldrb	r3, [r2, r3]
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f004 f868 	bl	80093b2 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	4a22      	ldr	r2, [pc, #136]	; (8005370 <USBD_CDC_DeInit+0xd8>)
 80052e6:	5cd3      	ldrb	r3, [r2, r3]
 80052e8:	f003 020f 	and.w	r2, r3, #15
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	440b      	add	r3, r1
 80052f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80052fc:	2200      	movs	r2, #0
 80052fe:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	4a1c      	ldr	r2, [pc, #112]	; (8005374 <USBD_CDC_DeInit+0xdc>)
 8005304:	5cd3      	ldrb	r3, [r2, r3]
 8005306:	4619      	mov	r1, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f004 f852 	bl	80093b2 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	4a18      	ldr	r2, [pc, #96]	; (8005374 <USBD_CDC_DeInit+0xdc>)
 8005312:	5cd3      	ldrb	r3, [r2, r3]
 8005314:	f003 020f 	and.w	r2, r3, #15
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	440b      	add	r3, r1
 8005324:	3324      	adds	r3, #36	; 0x24
 8005326:	2200      	movs	r2, #0
 8005328:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	4a11      	ldr	r2, [pc, #68]	; (8005374 <USBD_CDC_DeInit+0xdc>)
 800532e:	5cd3      	ldrb	r3, [r2, r3]
 8005330:	f003 020f 	and.w	r2, r3, #15
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	3326      	adds	r3, #38	; 0x26
 8005342:	2200      	movs	r2, #0
 8005344:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	7bfa      	ldrb	r2, [r7, #15]
 8005350:	4610      	mov	r0, r2
 8005352:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	3301      	adds	r3, #1
 8005358:	73fb      	strb	r3, [r7, #15]
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0a4      	beq.n	80052aa <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20008d30 	.word	0x20008d30
 8005370:	20008d34 	.word	0x20008d34
 8005374:	20008d38 	.word	0x20008d38

08005378 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005378:	b590      	push	{r4, r7, lr}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005382:	2300      	movs	r3, #0
 8005384:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005396:	2300      	movs	r3, #0
 8005398:	757b      	strb	r3, [r7, #21]
 800539a:	e015      	b.n	80053c8 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	889b      	ldrh	r3, [r3, #4]
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	7d7b      	ldrb	r3, [r7, #21]
 80053a4:	496d      	ldr	r1, [pc, #436]	; (800555c <USBD_CDC_Setup+0x1e4>)
 80053a6:	5ccb      	ldrb	r3, [r1, r3]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d007      	beq.n	80053bc <USBD_CDC_Setup+0x44>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	889b      	ldrh	r3, [r3, #4]
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	7d7b      	ldrb	r3, [r7, #21]
 80053b4:	496a      	ldr	r1, [pc, #424]	; (8005560 <USBD_CDC_Setup+0x1e8>)
 80053b6:	5ccb      	ldrb	r3, [r1, r3]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d102      	bne.n	80053c2 <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 80053bc:	7d7b      	ldrb	r3, [r7, #21]
 80053be:	75bb      	strb	r3, [r7, #22]
      break;
 80053c0:	e005      	b.n	80053ce <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80053c2:	7d7b      	ldrb	r3, [r7, #21]
 80053c4:	3301      	adds	r3, #1
 80053c6:	757b      	strb	r3, [r7, #21]
 80053c8:	7d7b      	ldrb	r3, [r7, #21]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0e6      	beq.n	800539c <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 80053ce:	7dbb      	ldrb	r3, [r7, #22]
 80053d0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80053d4:	fb02 f303 	mul.w	r3, r2, r3
 80053d8:	4a62      	ldr	r2, [pc, #392]	; (8005564 <USBD_CDC_Setup+0x1ec>)
 80053da:	4413      	add	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d04a      	beq.n	8005480 <USBD_CDC_Setup+0x108>
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	f040 80aa 	bne.w	8005544 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	88db      	ldrh	r3, [r3, #6]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d038      	beq.n	800546a <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	b25b      	sxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	da1d      	bge.n	800543e <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005408:	689c      	ldr	r4, [r3, #8]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	7859      	ldrb	r1, [r3, #1]
 800540e:	7dbb      	ldrb	r3, [r7, #22]
 8005410:	025b      	lsls	r3, r3, #9
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	441a      	add	r2, r3
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	88db      	ldrh	r3, [r3, #6]
 800541a:	7db8      	ldrb	r0, [r7, #22]
 800541c:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	88db      	ldrh	r3, [r3, #6]
 8005422:	2b07      	cmp	r3, #7
 8005424:	bf28      	it	cs
 8005426:	2307      	movcs	r3, #7
 8005428:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 800542a:	7dbb      	ldrb	r3, [r7, #22]
 800542c:	025b      	lsls	r3, r3, #9
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4413      	add	r3, r2
 8005432:	89fa      	ldrh	r2, [r7, #14]
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f003 fdab 	bl	8008f92 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 800543c:	e089      	b.n	8005552 <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	785a      	ldrb	r2, [r3, #1]
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	88db      	ldrh	r3, [r3, #6]
 800544c:	b2da      	uxtb	r2, r3
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8005454:	7dbb      	ldrb	r3, [r7, #22]
 8005456:	025b      	lsls	r3, r3, #9
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	18d1      	adds	r1, r2, r3
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	88db      	ldrh	r3, [r3, #6]
 8005460:	461a      	mov	r2, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f003 fdc1 	bl	8008fea <USBD_CtlPrepareRx>
    break;
 8005468:	e073      	b.n	8005552 <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005470:	689c      	ldr	r4, [r3, #8]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	7859      	ldrb	r1, [r3, #1]
 8005476:	7db8      	ldrb	r0, [r7, #22]
 8005478:	2300      	movs	r3, #0
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	47a0      	blx	r4
    break;
 800547e:	e068      	b.n	8005552 <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b0b      	cmp	r3, #11
 8005486:	d852      	bhi.n	800552e <USBD_CDC_Setup+0x1b6>
 8005488:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <USBD_CDC_Setup+0x118>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054c1 	.word	0x080054c1
 8005494:	0800553d 	.word	0x0800553d
 8005498:	0800552f 	.word	0x0800552f
 800549c:	0800552f 	.word	0x0800552f
 80054a0:	0800552f 	.word	0x0800552f
 80054a4:	0800552f 	.word	0x0800552f
 80054a8:	0800552f 	.word	0x0800552f
 80054ac:	0800552f 	.word	0x0800552f
 80054b0:	0800552f 	.word	0x0800552f
 80054b4:	0800552f 	.word	0x0800552f
 80054b8:	080054eb 	.word	0x080054eb
 80054bc:	08005515 	.word	0x08005515
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d107      	bne.n	80054dc <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80054cc:	f107 030a 	add.w	r3, r7, #10
 80054d0:	2202      	movs	r2, #2
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f003 fd5c 	bl	8008f92 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80054da:	e032      	b.n	8005542 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80054dc:	6839      	ldr	r1, [r7, #0]
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f003 fce6 	bl	8008eb0 <USBD_CtlError>
        ret = USBD_FAIL;
 80054e4:	2303      	movs	r3, #3
 80054e6:	75fb      	strb	r3, [r7, #23]
      break;
 80054e8:	e02b      	b.n	8005542 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	d107      	bne.n	8005506 <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80054f6:	f107 030d 	add.w	r3, r7, #13
 80054fa:	2201      	movs	r2, #1
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f003 fd47 	bl	8008f92 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005504:	e01d      	b.n	8005542 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f003 fcd1 	bl	8008eb0 <USBD_CtlError>
        ret = USBD_FAIL;
 800550e:	2303      	movs	r3, #3
 8005510:	75fb      	strb	r3, [r7, #23]
      break;
 8005512:	e016      	b.n	8005542 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b03      	cmp	r3, #3
 800551e:	d00f      	beq.n	8005540 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f003 fcc4 	bl	8008eb0 <USBD_CtlError>
        ret = USBD_FAIL;
 8005528:	2303      	movs	r3, #3
 800552a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800552c:	e008      	b.n	8005540 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f003 fcbd 	bl	8008eb0 <USBD_CtlError>
      ret = USBD_FAIL;
 8005536:	2303      	movs	r3, #3
 8005538:	75fb      	strb	r3, [r7, #23]
      break;
 800553a:	e002      	b.n	8005542 <USBD_CDC_Setup+0x1ca>
      break;
 800553c:	bf00      	nop
 800553e:	e008      	b.n	8005552 <USBD_CDC_Setup+0x1da>
      break;
 8005540:	bf00      	nop
    }
    break;
 8005542:	e006      	b.n	8005552 <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f003 fcb2 	bl	8008eb0 <USBD_CtlError>
    ret = USBD_FAIL;
 800554c:	2303      	movs	r3, #3
 800554e:	75fb      	strb	r3, [r7, #23]
    break;
 8005550:	bf00      	nop
  }

  return (uint8_t)ret;
 8005552:	7dfb      	ldrb	r3, [r7, #23]
}
 8005554:	4618      	mov	r0, r3
 8005556:	371c      	adds	r7, #28
 8005558:	46bd      	mov	sp, r7
 800555a:	bd90      	pop	{r4, r7, pc}
 800555c:	20008d3c 	.word	0x20008d3c
 8005560:	20008d40 	.word	0x20008d40
 8005564:	20008d48 	.word	0x20008d48

08005568 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005568:	b590      	push	{r4, r7, lr}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005574:	2300      	movs	r3, #0
 8005576:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800557e:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005584:	2300      	movs	r3, #0
 8005586:	75bb      	strb	r3, [r7, #22]
 8005588:	e00d      	b.n	80055a6 <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 800558a:	78fa      	ldrb	r2, [r7, #3]
 800558c:	7dbb      	ldrb	r3, [r7, #22]
 800558e:	4934      	ldr	r1, [pc, #208]	; (8005660 <USBD_CDC_DataIn+0xf8>)
 8005590:	5ccb      	ldrb	r3, [r1, r3]
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	429a      	cmp	r2, r3
 8005598:	d102      	bne.n	80055a0 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 800559a:	7dbb      	ldrb	r3, [r7, #22]
 800559c:	75fb      	strb	r3, [r7, #23]
      break;
 800559e:	e005      	b.n	80055ac <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80055a0:	7dbb      	ldrb	r3, [r7, #22]
 80055a2:	3301      	adds	r3, #1
 80055a4:	75bb      	strb	r3, [r7, #22]
 80055a6:	7dbb      	ldrb	r3, [r7, #22]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0ee      	beq.n	800558a <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 80055ac:	7dfb      	ldrb	r3, [r7, #23]
 80055ae:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80055b2:	fb02 f303 	mul.w	r3, r2, r3
 80055b6:	4a2b      	ldr	r2, [pc, #172]	; (8005664 <USBD_CDC_DataIn+0xfc>)
 80055b8:	4413      	add	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80055bc:	78fa      	ldrb	r2, [r7, #3]
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	4613      	mov	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	3318      	adds	r3, #24
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d029      	beq.n	8005626 <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80055d2:	78fa      	ldrb	r2, [r7, #3]
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	440b      	add	r3, r1
 80055e0:	3318      	adds	r3, #24
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	78f9      	ldrb	r1, [r7, #3]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	460b      	mov	r3, r1
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	1a5b      	subs	r3, r3, r1
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4403      	add	r3, r0
 80055f2:	3344      	adds	r3, #68	; 0x44
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	fbb2 f1f3 	udiv	r1, r2, r3
 80055fa:	fb01 f303 	mul.w	r3, r1, r3
 80055fe:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005600:	2b00      	cmp	r3, #0
 8005602:	d110      	bne.n	8005626 <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005604:	78fa      	ldrb	r2, [r7, #3]
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	3318      	adds	r3, #24
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005618:	78f9      	ldrb	r1, [r7, #3]
 800561a:	2300      	movs	r3, #0
 800561c:	2200      	movs	r2, #0
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f003 ff8e 	bl	8009540 <USBD_LL_Transmit>
 8005624:	e016      	b.n	8005654 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	2200      	movs	r2, #0
 800562a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00c      	beq.n	8005654 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005640:	691c      	ldr	r4, [r3, #16]
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800564e:	78fb      	ldrb	r3, [r7, #3]
 8005650:	7df8      	ldrb	r0, [r7, #23]
 8005652:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	bd90      	pop	{r4, r7, pc}
 800565e:	bf00      	nop
 8005660:	20008d30 	.word	0x20008d30
 8005664:	20008d48 	.word	0x20008d48

08005668 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005674:	2300      	movs	r3, #0
 8005676:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800567c:	2300      	movs	r3, #0
 800567e:	73bb      	strb	r3, [r7, #14]
 8005680:	e00b      	b.n	800569a <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8005682:	7bbb      	ldrb	r3, [r7, #14]
 8005684:	4a17      	ldr	r2, [pc, #92]	; (80056e4 <USBD_CDC_DataOut+0x7c>)
 8005686:	5cd3      	ldrb	r3, [r2, r3]
 8005688:	78fa      	ldrb	r2, [r7, #3]
 800568a:	429a      	cmp	r2, r3
 800568c:	d102      	bne.n	8005694 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 800568e:	7bbb      	ldrb	r3, [r7, #14]
 8005690:	73fb      	strb	r3, [r7, #15]
      break;
 8005692:	e005      	b.n	80056a0 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005694:	7bbb      	ldrb	r3, [r7, #14]
 8005696:	3301      	adds	r3, #1
 8005698:	73bb      	strb	r3, [r7, #14]
 800569a:	7bbb      	ldrb	r3, [r7, #14]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
 80056a2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80056a6:	fb02 f303 	mul.w	r3, r2, r3
 80056aa:	4a0f      	ldr	r2, [pc, #60]	; (80056e8 <USBD_CDC_DataOut+0x80>)
 80056ac:	4413      	add	r3, r2
 80056ae:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f003 ff85 	bl	80095c4 <USBD_LL_GetRxDataSize>
 80056ba:	4602      	mov	r2, r0
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80056d6:	7bf8      	ldrb	r0, [r7, #15]
 80056d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20008d34 	.word	0x20008d34
 80056e8:	20008d48 	.word	0x20008d48

080056ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80056ec:	b590      	push	{r4, r7, lr}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	60bb      	str	r3, [r7, #8]

  if (hcdc == NULL)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <USBD_CDC_EP0_RxReady+0x16>
  {
    return (uint8_t)USBD_FAIL;
 80056fe:	2303      	movs	r3, #3
 8005700:	e030      	b.n	8005764 <USBD_CDC_EP0_RxReady+0x78>
  }

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005702:	2300      	movs	r3, #0
 8005704:	73fb      	strb	r3, [r7, #15]
 8005706:	e029      	b.n	800575c <USBD_CDC_EP0_RxReady+0x70>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800570e:	fb02 f303 	mul.w	r3, r2, r3
 8005712:	4a16      	ldr	r2, [pc, #88]	; (800576c <USBD_CDC_EP0_RxReady+0x80>)
 8005714:	4413      	add	r3, r2
 8005716:	60bb      	str	r3, [r7, #8]

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800571e:	2b00      	cmp	r3, #0
 8005720:	d019      	beq.n	8005756 <USBD_CDC_EP0_RxReady+0x6a>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005728:	2bff      	cmp	r3, #255	; 0xff
 800572a:	d014      	beq.n	8005756 <USBD_CDC_EP0_RxReady+0x6a>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005732:	689c      	ldr	r4, [r3, #8]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	025b      	lsls	r3, r3, #9
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	441a      	add	r2, r3
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005748:	b29b      	uxth	r3, r3
 800574a:	7bf8      	ldrb	r0, [r7, #15]
 800574c:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	22ff      	movs	r2, #255	; 0xff
 8005752:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	3301      	adds	r3, #1
 800575a:	73fb      	strb	r3, [r7, #15]
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0d2      	beq.n	8005708 <USBD_CDC_EP0_RxReady+0x1c>
    }
  }

  return (uint8_t)USBD_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	bd90      	pop	{r4, r7, pc}
 800576c:	20008d48 	.word	0x20008d48

08005770 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	224b      	movs	r2, #75	; 0x4b
 800577c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800577e:	4b03      	ldr	r3, [pc, #12]	; (800578c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	20000124 	.word	0x20000124

08005790 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	224b      	movs	r2, #75	; 0x4b
 800579c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800579e:	4b03      	ldr	r3, [pc, #12]	; (80057ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	200000d8 	.word	0x200000d8

080057b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	224b      	movs	r2, #75	; 0x4b
 80057bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80057be:	4b03      	ldr	r3, [pc, #12]	; (80057cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	20000124 	.word	0x20000124

080057d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	220a      	movs	r2, #10
 80057dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80057de:	4b03      	ldr	r3, [pc, #12]	; (80057ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	20000090 	.word	0x20000090

080057f0 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005800:	2303      	movs	r3, #3
 8005802:	e004      	b.n	800580e <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	4603      	mov	r3, r0
 800582a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005836:	fb02 f303 	mul.w	r3, r2, r3
 800583a:	4a09      	ldr	r2, [pc, #36]	; (8005860 <USBD_CDC_SetTxBuffer+0x44>)
 800583c:	4413      	add	r3, r2
 800583e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	20008d48 	.word	0x20008d48

08005864 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005872:	2300      	movs	r3, #0
 8005874:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800587c:	fb02 f303 	mul.w	r3, r2, r3
 8005880:	4a06      	ldr	r2, [pc, #24]	; (800589c <USBD_CDC_SetRxBuffer+0x38>)
 8005882:	4413      	add	r3, r2
 8005884:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	371c      	adds	r7, #28
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	20008d48 	.word	0x20008d48

080058a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	4603      	mov	r3, r0
 80058a8:	6039      	str	r1, [r7, #0]
 80058aa:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80058ac:	2300      	movs	r3, #0
 80058ae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80058b0:	2301      	movs	r3, #1
 80058b2:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80058ba:	fb02 f303 	mul.w	r3, r2, r3
 80058be:	4a17      	ldr	r2, [pc, #92]	; (800591c <USBD_CDC_TransmitPacket+0x7c>)
 80058c0:	4413      	add	r3, r2
 80058c2:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d121      	bne.n	8005912 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 80058d6:	79fb      	ldrb	r3, [r7, #7]
 80058d8:	4a11      	ldr	r2, [pc, #68]	; (8005920 <USBD_CDC_TransmitPacket+0x80>)
 80058da:	5cd3      	ldrb	r3, [r2, r3]
 80058dc:	f003 020f 	and.w	r2, r3, #15
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80058e6:	6838      	ldr	r0, [r7, #0]
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4403      	add	r3, r0
 80058f2:	3318      	adds	r3, #24
 80058f4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	4a09      	ldr	r2, [pc, #36]	; (8005920 <USBD_CDC_TransmitPacket+0x80>)
 80058fa:	5cd1      	ldrb	r1, [r2, r3]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005908:	6838      	ldr	r0, [r7, #0]
 800590a:	f003 fe19 	bl	8009540 <USBD_LL_Transmit>

    ret = USBD_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005912:	7bfb      	ldrb	r3, [r7, #15]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20008d48 	.word	0x20008d48
 8005920:	20008d30 	.word	0x20008d30

08005924 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	4603      	mov	r3, r0
 800592c:	6039      	str	r1, [r7, #0]
 800592e:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800593a:	fb02 f303 	mul.w	r3, r2, r3
 800593e:	4a11      	ldr	r2, [pc, #68]	; (8005984 <USBD_CDC_ReceivePacket+0x60>)
 8005940:	4413      	add	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	7c1b      	ldrb	r3, [r3, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800594c:	79fb      	ldrb	r3, [r7, #7]
 800594e:	4a0e      	ldr	r2, [pc, #56]	; (8005988 <USBD_CDC_ReceivePacket+0x64>)
 8005950:	5cd1      	ldrb	r1, [r2, r3]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800595c:	6838      	ldr	r0, [r7, #0]
 800595e:	f003 fe10 	bl	8009582 <USBD_LL_PrepareReceive>
 8005962:	e009      	b.n	8005978 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	4a08      	ldr	r2, [pc, #32]	; (8005988 <USBD_CDC_ReceivePacket+0x64>)
 8005968:	5cd1      	ldrb	r1, [r2, r3]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005970:	2340      	movs	r3, #64	; 0x40
 8005972:	6838      	ldr	r0, [r7, #0]
 8005974:	f003 fe05 	bl	8009582 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20008d48 	.word	0x20008d48
 8005988:	20008d34 	.word	0x20008d34

0800598c <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	4608      	mov	r0, r1
 8005996:	4611      	mov	r1, r2
 8005998:	461a      	mov	r2, r3
 800599a:	4603      	mov	r3, r0
 800599c:	70fb      	strb	r3, [r7, #3]
 800599e:	460b      	mov	r3, r1
 80059a0:	70bb      	strb	r3, [r7, #2]
 80059a2:	4613      	mov	r3, r2
 80059a4:	707b      	strb	r3, [r7, #1]
  desc += 9;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3309      	adds	r3, #9
 80059aa:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80059ac:	2300      	movs	r3, #0
 80059ae:	73fb      	strb	r3, [r7, #15]
 80059b0:	e05b      	b.n	8005a6a <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3302      	adds	r3, #2
 80059b6:	78fa      	ldrb	r2, [r7, #3]
 80059b8:	701a      	strb	r2, [r3, #0]
    desc[7] = str_idx;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3307      	adds	r3, #7
 80059be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80059c2:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	330a      	adds	r3, #10
 80059c8:	78fa      	ldrb	r2, [r7, #3]
 80059ca:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	331a      	adds	r3, #26
 80059d0:	78ba      	ldrb	r2, [r7, #2]
 80059d2:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3322      	adds	r3, #34	; 0x22
 80059d8:	78fa      	ldrb	r2, [r7, #3]
 80059da:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3323      	adds	r3, #35	; 0x23
 80059e0:	78ba      	ldrb	r2, [r7, #2]
 80059e2:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3326      	adds	r3, #38	; 0x26
 80059e8:	7e3a      	ldrb	r2, [r7, #24]
 80059ea:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	332d      	adds	r3, #45	; 0x2d
 80059f0:	78ba      	ldrb	r2, [r7, #2]
 80059f2:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3336      	adds	r3, #54	; 0x36
 80059f8:	7f3a      	ldrb	r2, [r7, #28]
 80059fa:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	333d      	adds	r3, #61	; 0x3d
 8005a00:	787a      	ldrb	r2, [r7, #1]
 8005a02:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3342      	adds	r3, #66	; 0x42
 8005a08:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	491c      	ldr	r1, [pc, #112]	; (8005a80 <USBD_Update_CDC_ACM_DESC+0xf4>)
 8005a0e:	787a      	ldrb	r2, [r7, #1]
 8005a10:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	491b      	ldr	r1, [pc, #108]	; (8005a84 <USBD_Update_CDC_ACM_DESC+0xf8>)
 8005a16:	7f3a      	ldrb	r2, [r7, #28]
 8005a18:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	491a      	ldr	r1, [pc, #104]	; (8005a88 <USBD_Update_CDC_ACM_DESC+0xfc>)
 8005a1e:	7e3a      	ldrb	r2, [r7, #24]
 8005a20:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	4919      	ldr	r1, [pc, #100]	; (8005a8c <USBD_Update_CDC_ACM_DESC+0x100>)
 8005a26:	78fa      	ldrb	r2, [r7, #3]
 8005a28:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	4918      	ldr	r1, [pc, #96]	; (8005a90 <USBD_Update_CDC_ACM_DESC+0x104>)
 8005a2e:	78ba      	ldrb	r2, [r7, #2]
 8005a30:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	4917      	ldr	r1, [pc, #92]	; (8005a94 <USBD_Update_CDC_ACM_DESC+0x108>)
 8005a36:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005a3a:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8005a3c:	787b      	ldrb	r3, [r7, #1]
 8005a3e:	3302      	adds	r3, #2
 8005a40:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 8005a42:	787b      	ldrb	r3, [r7, #1]
 8005a44:	3301      	adds	r3, #1
 8005a46:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8005a48:	7f3b      	ldrb	r3, [r7, #28]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8005a4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a52:	3301      	adds	r3, #1
 8005a54:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	3302      	adds	r3, #2
 8005a5c:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	3301      	adds	r3, #1
 8005a62:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	3301      	adds	r3, #1
 8005a68:	73fb      	strb	r3, [r7, #15]
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0a0      	beq.n	80059b2 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 8005a70:	bf00      	nop
 8005a72:	bf00      	nop
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20008d30 	.word	0x20008d30
 8005a84:	20008d34 	.word	0x20008d34
 8005a88:	20008d38 	.word	0x20008d38
 8005a8c:	20008d3c 	.word	0x20008d3c
 8005a90:	20008d40 	.word	0x20008d40
 8005a94:	20008d44 	.word	0x20008d44

08005a98 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8005aa4:	4b08      	ldr	r3, [pc, #32]	; (8005ac8 <USBD_COMPOSITE_Init+0x30>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	78fa      	ldrb	r2, [r7, #3]
 8005aaa:	4611      	mov	r1, r2
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	4798      	blx	r3
#endif
#if (USBD_USE_UVC == 1)
  USBD_VIDEO.Init(pdev, cfgidx);
#endif
#if (USBD_USE_MSC == 1)
  USBD_MSC.Init(pdev, cfgidx);
 8005ab0:	4b06      	ldr	r3, [pc, #24]	; (8005acc <USBD_COMPOSITE_Init+0x34>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	78fa      	ldrb	r2, [r7, #3]
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	2000009c 	.word	0x2000009c
 8005acc:	200001bc 	.word	0x200001bc

08005ad0 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8005adc:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <USBD_COMPOSITE_DeInit+0x30>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	78fa      	ldrb	r2, [r7, #3]
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	4798      	blx	r3
#endif
#if (USBD_USE_UVC == 1)
  USBD_VIDEO.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_MSC == 1)
  USBD_MSC.DeInit(pdev, cfgidx);
 8005ae8:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <USBD_COMPOSITE_DeInit+0x34>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	78fa      	ldrb	r2, [r7, #3]
 8005aee:	4611      	mov	r1, r2
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	2000009c 	.word	0x2000009c
 8005b04:	200001bc 	.word	0x200001bc

08005b08 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]
 8005b16:	e019      	b.n	8005b4c <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	889b      	ldrh	r3, [r3, #4]
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	4915      	ldr	r1, [pc, #84]	; (8005b78 <USBD_COMPOSITE_Setup+0x70>)
 8005b22:	5ccb      	ldrb	r3, [r1, r3]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d007      	beq.n	8005b38 <USBD_COMPOSITE_Setup+0x30>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	889b      	ldrh	r3, [r3, #4]
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	4912      	ldr	r1, [pc, #72]	; (8005b7c <USBD_COMPOSITE_Setup+0x74>)
 8005b32:	5ccb      	ldrb	r3, [r1, r3]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d106      	bne.n	8005b46 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8005b38:	4b11      	ldr	r3, [pc, #68]	; (8005b80 <USBD_COMPOSITE_Setup+0x78>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	e014      	b.n	8005b70 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0e2      	beq.n	8005b18 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_VIDEO.Setup(pdev, req);
  }
#endif
#if (USBD_USE_MSC == 1)
  if (LOBYTE(req->wIndex) == MSC_ITF_NBR)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	889b      	ldrh	r3, [r3, #4]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <USBD_COMPOSITE_Setup+0x7c>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d106      	bne.n	8005b6e <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_MSC.Setup(pdev, req);
 8005b60:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <USBD_COMPOSITE_Setup+0x80>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	4798      	blx	r3
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	e000      	b.n	8005b70 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 8005b6e:	2303      	movs	r3, #3
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20008d3c 	.word	0x20008d3c
 8005b7c:	20008d40 	.word	0x20008d40
 8005b80:	2000009c 	.word	0x2000009c
 8005b84:	2000906c 	.word	0x2000906c
 8005b88:	200001bc 	.word	0x200001bc

08005b8c <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	73fb      	strb	r3, [r7, #15]
 8005b9c:	e01a      	b.n	8005bd4 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8005b9e:	78fa      	ldrb	r2, [r7, #3]
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	4918      	ldr	r1, [pc, #96]	; (8005c04 <USBD_COMPOSITE_DataIn+0x78>)
 8005ba4:	5ccb      	ldrb	r3, [r1, r3]
 8005ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d007      	beq.n	8005bbe <USBD_COMPOSITE_DataIn+0x32>
 8005bae:	78fa      	ldrb	r2, [r7, #3]
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	4915      	ldr	r1, [pc, #84]	; (8005c08 <USBD_COMPOSITE_DataIn+0x7c>)
 8005bb4:	5ccb      	ldrb	r3, [r1, r3]
 8005bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d107      	bne.n	8005bce <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8005bbe:	4b13      	ldr	r3, [pc, #76]	; (8005c0c <USBD_COMPOSITE_DataIn+0x80>)
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	78fa      	ldrb	r2, [r7, #3]
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	4798      	blx	r3
 8005bca:	4603      	mov	r3, r0
 8005bcc:	e015      	b.n	8005bfa <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0e1      	beq.n	8005b9e <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_VIDEO.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_MSC == 1)
  if (epnum == (MSC_IN_EP & 0x7F))
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	4b0c      	ldr	r3, [pc, #48]	; (8005c10 <USBD_COMPOSITE_DataIn+0x84>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d107      	bne.n	8005bf8 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_MSC.DataIn(pdev, epnum);
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <USBD_COMPOSITE_DataIn+0x88>)
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	78fa      	ldrb	r2, [r7, #3]
 8005bee:	4611      	mov	r1, r2
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	4798      	blx	r3
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	e000      	b.n	8005bfa <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8005bf8:	2303      	movs	r3, #3
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20008d30 	.word	0x20008d30
 8005c08:	20008d38 	.word	0x20008d38
 8005c0c:	2000009c 	.word	0x2000009c
 8005c10:	200001ba 	.word	0x200001ba
 8005c14:	200001bc 	.word	0x200001bc

08005c18 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8005c20:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	2000009c 	.word	0x2000009c

08005c38 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	460b      	mov	r3, r1
 8005c88:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	73fb      	strb	r3, [r7, #15]
 8005ca8:	e010      	b.n	8005ccc <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	4a12      	ldr	r2, [pc, #72]	; (8005cf8 <USBD_COMPOSITE_DataOut+0x60>)
 8005cae:	5cd3      	ldrb	r3, [r2, r3]
 8005cb0:	78fa      	ldrb	r2, [r7, #3]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d107      	bne.n	8005cc6 <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8005cb6:	4b11      	ldr	r3, [pc, #68]	; (8005cfc <USBD_COMPOSITE_DataOut+0x64>)
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	4798      	blx	r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	e013      	b.n	8005cee <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	73fb      	strb	r3, [r7, #15]
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0eb      	beq.n	8005caa <USBD_COMPOSITE_DataOut+0x12>
  }
#endif
#if (USBD_USE_UVC == 1)
#endif
#if (USBD_USE_MSC == 1)
  if (epnum == MSC_OUT_EP)
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <USBD_COMPOSITE_DataOut+0x68>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	78fa      	ldrb	r2, [r7, #3]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d107      	bne.n	8005cec <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_MSC.DataOut(pdev, epnum);
 8005cdc:	4b09      	ldr	r3, [pc, #36]	; (8005d04 <USBD_COMPOSITE_DataOut+0x6c>)
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	78fa      	ldrb	r2, [r7, #3]
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	4798      	blx	r3
 8005ce8:	4603      	mov	r3, r0
 8005cea:	e000      	b.n	8005cee <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8005cec:	2303      	movs	r3, #3
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20008d34 	.word	0x20008d34
 8005cfc:	2000009c 	.word	0x2000009c
 8005d00:	200001bb 	.word	0x200001bb
 8005d04:	200001bc 	.word	0x200001bc

08005d08 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2262      	movs	r2, #98	; 0x62
 8005d14:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8005d16:	4b03      	ldr	r3, [pc, #12]	; (8005d24 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	20008fc8 	.word	0x20008fc8

08005d28 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2262      	movs	r2, #98	; 0x62
 8005d34:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 8005d36:	4b03      	ldr	r3, [pc, #12]	; (8005d44 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	20008f64 	.word	0x20008f64

08005d48 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2262      	movs	r2, #98	; 0x62
 8005d54:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8005d56:	4b03      	ldr	r3, [pc, #12]	; (8005d64 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	20008fc8 	.word	0x20008fc8

08005d68 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	220a      	movs	r2, #10
 8005d74:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8005d76:	4b03      	ldr	r3, [pc, #12]	; (8005d84 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	200001b0 	.word	0x200001b0

08005d88 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	; 0x28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	460b      	mov	r3, r1
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8005d96:	4b20      	ldr	r3, [pc, #128]	; (8005e18 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	7afa      	ldrb	r2, [r7, #11]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d836      	bhi.n	8005e0e <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	f107 0318 	add.w	r3, r7, #24
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	605a      	str	r2, [r3, #4]
 8005dae:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005db0:	2300      	movs	r3, #0
 8005db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005db6:	e01a      	b.n	8005dee <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8005db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dbc:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 8005dbe:	5cd3      	ldrb	r3, [r2, r3]
 8005dc0:	7afa      	ldrb	r2, [r7, #11]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d10e      	bne.n	8005de4 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8005dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dca:	f107 0014 	add.w	r0, r7, #20
 8005dce:	4a14      	ldr	r2, [pc, #80]	; (8005e20 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 8005dd0:	2110      	movs	r1, #16
 8005dd2:	f006 fc91 	bl	800c6f8 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8005dd6:	f107 0314 	add.w	r3, r7, #20
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	4911      	ldr	r1, [pc, #68]	; (8005e24 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8005dde:	4618      	mov	r0, r3
 8005de0:	f003 f877 	bl	8008ed2 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005de8:	3301      	adds	r3, #1
 8005dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0e0      	beq.n	8005db8 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)UVC_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_MSC == 1)
    if (index == MSC_BOT_STR_DESC_IDX)
 8005df6:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	7afa      	ldrb	r2, [r7, #11]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d104      	bne.n	8005e0a <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)MSC_BOT_STR_DESC, USBD_StrDesc, length);
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	4908      	ldr	r1, [pc, #32]	; (8005e24 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8005e04:	4809      	ldr	r0, [pc, #36]	; (8005e2c <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 8005e06:	f003 f864 	bl	8008ed2 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 8005e0a:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8005e0c:	e000      	b.n	8005e10 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8005e0e:	2300      	movs	r3, #0
  }
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3728      	adds	r7, #40	; 0x28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	200001ac 	.word	0x200001ac
 8005e1c:	20008d44 	.word	0x20008d44
 8005e20:	0800d78c 	.word	0x0800d78c
 8005e24:	2000902c 	.word	0x2000902c
 8005e28:	2000906d 	.word	0x2000906d
 8005e2c:	0800d79c 	.word	0x0800d79c

08005e30 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8005e30:	b590      	push	{r4, r7, lr}
 8005e32:	b089      	sub	sp, #36	; 0x24
 8005e34:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 8005e3e:	2381      	movs	r3, #129	; 0x81
 8005e40:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 8005e42:	2301      	movs	r3, #1
 8005e44:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 8005e46:	2300      	movs	r3, #0
 8005e48:	727b      	strb	r3, [r7, #9]

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8005e4a:	4b74      	ldr	r3, [pc, #464]	; (800601c <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	1d3a      	adds	r2, r7, #4
 8005e50:	4610      	mov	r0, r2
 8005e52:	4798      	blx	r3
 8005e54:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8005e56:	7a7b      	ldrb	r3, [r7, #9]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	b2d8      	uxtb	r0, r3
 8005e5c:	7afb      	ldrb	r3, [r7, #11]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	4a6f      	ldr	r2, [pc, #444]	; (8006020 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005e64:	7812      	ldrb	r2, [r2, #0]
 8005e66:	7afc      	ldrb	r4, [r7, #11]
 8005e68:	7a79      	ldrb	r1, [r7, #9]
 8005e6a:	9202      	str	r2, [sp, #8]
 8005e6c:	7aba      	ldrb	r2, [r7, #10]
 8005e6e:	9201      	str	r2, [sp, #4]
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	4623      	mov	r3, r4
 8005e74:	4602      	mov	r2, r0
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f7ff fd88 	bl	800598c <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	3309      	adds	r3, #9
 8005e80:	88ba      	ldrh	r2, [r7, #4]
 8005e82:	3a09      	subs	r2, #9
 8005e84:	4619      	mov	r1, r3
 8005e86:	4867      	ldr	r0, [pc, #412]	; (8006024 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 8005e88:	f006 fae3 	bl	800c452 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8005e8c:	4b63      	ldr	r3, [pc, #396]	; (800601c <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e90:	1d3a      	adds	r2, r7, #4
 8005e92:	4610      	mov	r0, r2
 8005e94:	4798      	blx	r3
 8005e96:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8005e98:	7a7b      	ldrb	r3, [r7, #9]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	b2d8      	uxtb	r0, r3
 8005e9e:	7afb      	ldrb	r3, [r7, #11]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	4a5e      	ldr	r2, [pc, #376]	; (8006020 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005ea6:	7812      	ldrb	r2, [r2, #0]
 8005ea8:	7afc      	ldrb	r4, [r7, #11]
 8005eaa:	7a79      	ldrb	r1, [r7, #9]
 8005eac:	9202      	str	r2, [sp, #8]
 8005eae:	7aba      	ldrb	r2, [r7, #10]
 8005eb0:	9201      	str	r2, [sp, #4]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	4623      	mov	r3, r4
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f7ff fd67 	bl	800598c <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3309      	adds	r3, #9
 8005ec2:	88ba      	ldrh	r2, [r7, #4]
 8005ec4:	3a09      	subs	r2, #9
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4857      	ldr	r0, [pc, #348]	; (8006028 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 8005eca:	f006 fac2 	bl	800c452 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 8005ece:	7afb      	ldrb	r3, [r7, #11]
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 8005ed4:	7abb      	ldrb	r3, [r7, #10]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 8005eda:	7a7b      	ldrb	r3, [r7, #9]
 8005edc:	3302      	adds	r3, #2
 8005ede:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 8005ee0:	4b4f      	ldr	r3, [pc, #316]	; (8006020 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	4b4d      	ldr	r3, [pc, #308]	; (8006020 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005eea:	701a      	strb	r2, [r3, #0]
  in_ep_track += 1;
  interface_no_track += 2;
  USBD_Track_String_Index += 1;
#endif
#if (USBD_USE_MSC == 1)
  ptr = USBD_MSC.GetFSConfigDescriptor(&len);
 8005eec:	4b4f      	ldr	r3, [pc, #316]	; (800602c <USBD_COMPOSITE_Mount_Class+0x1fc>)
 8005eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef0:	1d3a      	adds	r2, r7, #4
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	4798      	blx	r3
 8005ef6:	60f8      	str	r0, [r7, #12]
  USBD_Update_MSC_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005ef8:	4b49      	ldr	r3, [pc, #292]	; (8006020 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	7ab8      	ldrb	r0, [r7, #10]
 8005efe:	7afa      	ldrb	r2, [r7, #11]
 8005f00:	7a79      	ldrb	r1, [r7, #9]
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	4603      	mov	r3, r0
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fac0 	bl	800648c <USBD_Update_MSC_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_MSC_DESC, ptr + 0x09, len - 0x09);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3309      	adds	r3, #9
 8005f10:	88ba      	ldrh	r2, [r7, #4]
 8005f12:	3a09      	subs	r2, #9
 8005f14:	4619      	mov	r1, r3
 8005f16:	4846      	ldr	r0, [pc, #280]	; (8006030 <USBD_COMPOSITE_Mount_Class+0x200>)
 8005f18:	f006 fa9b 	bl	800c452 <memcpy>

  ptr = USBD_MSC.GetHSConfigDescriptor(&len);
 8005f1c:	4b43      	ldr	r3, [pc, #268]	; (800602c <USBD_COMPOSITE_Mount_Class+0x1fc>)
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f20:	1d3a      	adds	r2, r7, #4
 8005f22:	4610      	mov	r0, r2
 8005f24:	4798      	blx	r3
 8005f26:	60f8      	str	r0, [r7, #12]
  USBD_Update_MSC_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005f28:	4b3d      	ldr	r3, [pc, #244]	; (8006020 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	7ab8      	ldrb	r0, [r7, #10]
 8005f2e:	7afa      	ldrb	r2, [r7, #11]
 8005f30:	7a79      	ldrb	r1, [r7, #9]
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	4603      	mov	r3, r0
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 faa8 	bl	800648c <USBD_Update_MSC_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_MSC_DESC, ptr + 0x09, len - 0x09);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3309      	adds	r3, #9
 8005f40:	88ba      	ldrh	r2, [r7, #4]
 8005f42:	3a09      	subs	r2, #9
 8005f44:	4619      	mov	r1, r3
 8005f46:	483b      	ldr	r0, [pc, #236]	; (8006034 <USBD_COMPOSITE_Mount_Class+0x204>)
 8005f48:	f006 fa83 	bl	800c452 <memcpy>
  in_ep_track += 1;
 8005f4c:	7afb      	ldrb	r3, [r7, #11]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 8005f52:	7abb      	ldrb	r3, [r7, #10]
 8005f54:	3301      	adds	r3, #1
 8005f56:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 8005f58:	7a7b      	ldrb	r3, [r7, #9]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8005f5e:	4b30      	ldr	r3, [pc, #192]	; (8006020 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	3301      	adds	r3, #1
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	4b2e      	ldr	r3, [pc, #184]	; (8006020 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005f68:	701a      	strb	r2, [r3, #0]
  out_ep_track += 1;
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 8005f6a:	2362      	movs	r3, #98	; 0x62
 8005f6c:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 8005f6e:	4b32      	ldr	r3, [pc, #200]	; (8006038 <USBD_COMPOSITE_Mount_Class+0x208>)
 8005f70:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2209      	movs	r2, #9
 8005f76:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3302      	adds	r3, #2
 8005f84:	88fa      	ldrh	r2, [r7, #6]
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	0a1b      	lsrs	r3, r3, #8
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3303      	adds	r3, #3
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	7a7a      	ldrb	r2, [r7, #9]
 8005f9e:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3305      	adds	r3, #5
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3306      	adds	r3, #6
 8005fac:	2200      	movs	r2, #0
 8005fae:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3307      	adds	r3, #7
 8005fb4:	22c0      	movs	r2, #192	; 0xc0
 8005fb6:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3308      	adds	r3, #8
 8005fbc:	2232      	movs	r2, #50	; 0x32
 8005fbe:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 8005fc0:	4b1e      	ldr	r3, [pc, #120]	; (800603c <USBD_COMPOSITE_Mount_Class+0x20c>)
 8005fc2:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2209      	movs	r2, #9
 8005fc8:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	2202      	movs	r2, #2
 8005fd0:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3302      	adds	r3, #2
 8005fd6:	88fa      	ldrh	r2, [r7, #6]
 8005fd8:	b2d2      	uxtb	r2, r2
 8005fda:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8005fdc:	88fb      	ldrh	r3, [r7, #6]
 8005fde:	0a1b      	lsrs	r3, r3, #8
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3303      	adds	r3, #3
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3304      	adds	r3, #4
 8005fee:	7a7a      	ldrb	r2, [r7, #9]
 8005ff0:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3305      	adds	r3, #5
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3306      	adds	r3, #6
 8005ffe:	2200      	movs	r2, #0
 8006000:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3307      	adds	r3, #7
 8006006:	22c0      	movs	r2, #192	; 0xc0
 8006008:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3308      	adds	r3, #8
 800600e:	2232      	movs	r2, #50	; 0x32
 8006010:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	bd90      	pop	{r4, r7, pc}
 800601a:	bf00      	nop
 800601c:	2000009c 	.word	0x2000009c
 8006020:	200001ac 	.word	0x200001ac
 8006024:	20008f6d 	.word	0x20008f6d
 8006028:	20008fd1 	.word	0x20008fd1
 800602c:	200001bc 	.word	0x200001bc
 8006030:	20008faf 	.word	0x20008faf
 8006034:	20009013 	.word	0x20009013
 8006038:	20008fc8 	.word	0x20008fc8
 800603c:	20008f64 	.word	0x20008f64

08006040 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = &USBD_MSC_Instance;
 800604c:	4b37      	ldr	r3, [pc, #220]	; (800612c <USBD_MSC_Init+0xec>)
 800604e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d105      	bne.n	8006062 <USBD_MSC_Init+0x22>
  {
    pdev->pClassData_MSC = NULL;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
    return (uint8_t)USBD_EMEM;
 800605e:	2302      	movs	r3, #2
 8006060:	e060      	b.n	8006124 <USBD_MSC_Init+0xe4>
  }

  pdev->pClassData_MSC = (void *)hmsc;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	7c1b      	ldrb	r3, [r3, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d12b      	bne.n	80060ca <USBD_MSC_Init+0x8a>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006072:	4b2f      	ldr	r3, [pc, #188]	; (8006130 <USBD_MSC_Init+0xf0>)
 8006074:	7819      	ldrb	r1, [r3, #0]
 8006076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800607a:	2202      	movs	r2, #2
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f003 f972 	bl	8009366 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 8006082:	4b2b      	ldr	r3, [pc, #172]	; (8006130 <USBD_MSC_Init+0xf0>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	f003 020f 	and.w	r2, r3, #15
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	440b      	add	r3, r1
 8006096:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800609a:	2201      	movs	r2, #1
 800609c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800609e:	4b25      	ldr	r3, [pc, #148]	; (8006134 <USBD_MSC_Init+0xf4>)
 80060a0:	7819      	ldrb	r1, [r3, #0]
 80060a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060a6:	2202      	movs	r2, #2
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f003 f95c 	bl	8009366 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 80060ae:	4b21      	ldr	r3, [pc, #132]	; (8006134 <USBD_MSC_Init+0xf4>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	f003 020f 	and.w	r2, r3, #15
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	440b      	add	r3, r1
 80060c2:	3324      	adds	r3, #36	; 0x24
 80060c4:	2201      	movs	r2, #1
 80060c6:	801a      	strh	r2, [r3, #0]
 80060c8:	e028      	b.n	800611c <USBD_MSC_Init+0xdc>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80060ca:	4b19      	ldr	r3, [pc, #100]	; (8006130 <USBD_MSC_Init+0xf0>)
 80060cc:	7819      	ldrb	r1, [r3, #0]
 80060ce:	2340      	movs	r3, #64	; 0x40
 80060d0:	2202      	movs	r2, #2
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f003 f947 	bl	8009366 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 80060d8:	4b15      	ldr	r3, [pc, #84]	; (8006130 <USBD_MSC_Init+0xf0>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	f003 020f 	and.w	r2, r3, #15
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	440b      	add	r3, r1
 80060ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060f0:	2201      	movs	r2, #1
 80060f2:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <USBD_MSC_Init+0xf4>)
 80060f6:	7819      	ldrb	r1, [r3, #0]
 80060f8:	2340      	movs	r3, #64	; 0x40
 80060fa:	2202      	movs	r2, #2
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f003 f932 	bl	8009366 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 8006102:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <USBD_MSC_Init+0xf4>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	f003 020f 	and.w	r2, r3, #15
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	440b      	add	r3, r1
 8006116:	3324      	adds	r3, #36	; 0x24
 8006118:	2201      	movs	r2, #1
 800611a:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f9ed 	bl	80064fc <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20009070 	.word	0x20009070
 8006130:	200001bb 	.word	0x200001bb
 8006134:	200001ba 	.word	0x200001ba

08006138 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_OUT_EP);
 8006144:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <USBD_MSC_DeInit+0x7c>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f003 f931 	bl	80093b2 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 0U;
 8006150:	4b18      	ldr	r3, [pc, #96]	; (80061b4 <USBD_MSC_DeInit+0x7c>)
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	f003 020f 	and.w	r2, r3, #15
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006168:	2200      	movs	r2, #0
 800616a:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_IN_EP);
 800616c:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <USBD_MSC_DeInit+0x80>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f003 f91d 	bl	80093b2 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 0U;
 8006178:	4b0f      	ldr	r3, [pc, #60]	; (80061b8 <USBD_MSC_DeInit+0x80>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	f003 020f 	and.w	r2, r3, #15
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	3324      	adds	r3, #36	; 0x24
 800618e:	2200      	movs	r2, #0
 8006190:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassData_MSC != NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006198:	2b00      	cmp	r3, #0
 800619a:	d006      	beq.n	80061aa <USBD_MSC_DeInit+0x72>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fa1f 	bl	80065e0 <MSC_BOT_DeInit>
#if (0)
    (void)USBD_free(pdev->pClassData_MSC);
#endif
    pdev->pClassData_MSC = NULL;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
  }

  return (uint8_t)USBD_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	200001bb 	.word	0x200001bb
 80061b8:	200001ba 	.word	0x200001ba

080061bc <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80061cc:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80061dc:	2303      	movs	r3, #3
 80061de:	e0db      	b.n	8006398 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d04e      	beq.n	800628a <USBD_MSC_Setup+0xce>
 80061ec:	2b20      	cmp	r3, #32
 80061ee:	f040 80cb 	bne.w	8006388 <USBD_MSC_Setup+0x1cc>
  {
  /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	785b      	ldrb	r3, [r3, #1]
 80061f6:	2bfe      	cmp	r3, #254	; 0xfe
 80061f8:	d002      	beq.n	8006200 <USBD_MSC_Setup+0x44>
 80061fa:	2bff      	cmp	r3, #255	; 0xff
 80061fc:	d025      	beq.n	800624a <USBD_MSC_Setup+0x8e>
 80061fe:	e03c      	b.n	800627a <USBD_MSC_Setup+0xbe>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue == 0U) && (req->wLength == 1U) &&
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	885b      	ldrh	r3, [r3, #2]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d119      	bne.n	800623c <USBD_MSC_Setup+0x80>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	88db      	ldrh	r3, [r3, #6]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d115      	bne.n	800623c <USBD_MSC_Setup+0x80>
          ((req->bmRequest & 0x80U) == 0x80U))
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	b25b      	sxtb	r3, r3
      if ((req->wValue == 0U) && (req->wLength == 1U) &&
 8006216:	2b00      	cmp	r3, #0
 8006218:	da10      	bge.n	800623c <USBD_MSC_Setup+0x80>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetMaxLun();
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	4798      	blx	r3
 8006224:	4603      	mov	r3, r0
 8006226:	461a      	mov	r2, r3
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2201      	movs	r2, #1
 8006230:	4619      	mov	r1, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f002 fead 	bl	8008f92 <USBD_CtlSendData>
 8006238:	bf00      	nop
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800623a:	e025      	b.n	8006288 <USBD_MSC_Setup+0xcc>
        USBD_CtlError(pdev, req);
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f002 fe36 	bl	8008eb0 <USBD_CtlError>
        ret = USBD_FAIL;
 8006244:	2303      	movs	r3, #3
 8006246:	75fb      	strb	r3, [r7, #23]
      break;
 8006248:	e01e      	b.n	8006288 <USBD_MSC_Setup+0xcc>

    case BOT_RESET:
      if ((req->wValue == 0U) && (req->wLength == 0U) &&
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	885b      	ldrh	r3, [r3, #2]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10c      	bne.n	800626c <USBD_MSC_Setup+0xb0>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	88db      	ldrh	r3, [r3, #6]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d108      	bne.n	800626c <USBD_MSC_Setup+0xb0>
          ((req->bmRequest & 0x80U) != 0x80U))
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	b25b      	sxtb	r3, r3
      if ((req->wValue == 0U) && (req->wLength == 0U) &&
 8006260:	2b00      	cmp	r3, #0
 8006262:	db03      	blt.n	800626c <USBD_MSC_Setup+0xb0>
      {
        MSC_BOT_Reset(pdev);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f98b 	bl	8006580 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800626a:	e00d      	b.n	8006288 <USBD_MSC_Setup+0xcc>
        USBD_CtlError(pdev, req);
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f002 fe1e 	bl	8008eb0 <USBD_CtlError>
        ret = USBD_FAIL;
 8006274:	2303      	movs	r3, #3
 8006276:	75fb      	strb	r3, [r7, #23]
      break;
 8006278:	e006      	b.n	8006288 <USBD_MSC_Setup+0xcc>

    default:
      USBD_CtlError(pdev, req);
 800627a:	6839      	ldr	r1, [r7, #0]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f002 fe17 	bl	8008eb0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006282:	2303      	movs	r3, #3
 8006284:	75fb      	strb	r3, [r7, #23]
      break;
 8006286:	bf00      	nop
    }
    break;
 8006288:	e085      	b.n	8006396 <USBD_MSC_Setup+0x1da>
  /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	2b0b      	cmp	r3, #11
 8006290:	d871      	bhi.n	8006376 <USBD_MSC_Setup+0x1ba>
 8006292:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <USBD_MSC_Setup+0xdc>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062c9 	.word	0x080062c9
 800629c:	08006345 	.word	0x08006345
 80062a0:	08006377 	.word	0x08006377
 80062a4:	08006377 	.word	0x08006377
 80062a8:	08006377 	.word	0x08006377
 80062ac:	08006377 	.word	0x08006377
 80062b0:	08006377 	.word	0x08006377
 80062b4:	08006377 	.word	0x08006377
 80062b8:	08006377 	.word	0x08006377
 80062bc:	08006377 	.word	0x08006377
 80062c0:	080062f3 	.word	0x080062f3
 80062c4:	0800631d 	.word	0x0800631d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d107      	bne.n	80062e4 <USBD_MSC_Setup+0x128>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062d4:	f107 030e 	add.w	r3, r7, #14
 80062d8:	2202      	movs	r2, #2
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f002 fe58 	bl	8008f92 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80062e2:	e050      	b.n	8006386 <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f002 fde2 	bl	8008eb0 <USBD_CtlError>
        ret = USBD_FAIL;
 80062ec:	2303      	movs	r3, #3
 80062ee:	75fb      	strb	r3, [r7, #23]
      break;
 80062f0:	e049      	b.n	8006386 <USBD_MSC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d107      	bne.n	800630e <USBD_MSC_Setup+0x152>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	3304      	adds	r3, #4
 8006302:	2201      	movs	r2, #1
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f002 fe43 	bl	8008f92 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800630c:	e03b      	b.n	8006386 <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f002 fdcd 	bl	8008eb0 <USBD_CtlError>
        ret = USBD_FAIL;
 8006316:	2303      	movs	r3, #3
 8006318:	75fb      	strb	r3, [r7, #23]
      break;
 800631a:	e034      	b.n	8006386 <USBD_MSC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b03      	cmp	r3, #3
 8006326:	d106      	bne.n	8006336 <USBD_MSC_Setup+0x17a>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	885b      	ldrh	r3, [r3, #2]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	461a      	mov	r2, r3
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006334:	e027      	b.n	8006386 <USBD_MSC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f002 fdb9 	bl	8008eb0 <USBD_CtlError>
        ret = USBD_FAIL;
 800633e:	2303      	movs	r3, #3
 8006340:	75fb      	strb	r3, [r7, #23]
      break;
 8006342:	e020      	b.n	8006386 <USBD_MSC_Setup+0x1ca>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b03      	cmp	r3, #3
 800634e:	d119      	bne.n	8006384 <USBD_MSC_Setup+0x1c8>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	885b      	ldrh	r3, [r3, #2]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d115      	bne.n	8006384 <USBD_MSC_Setup+0x1c8>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	889b      	ldrh	r3, [r3, #4]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f003 f845 	bl	80093f0 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	889b      	ldrh	r3, [r3, #4]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fae6 	bl	8006940 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8006374:	e006      	b.n	8006384 <USBD_MSC_Setup+0x1c8>

    default:
      USBD_CtlError(pdev, req);
 8006376:	6839      	ldr	r1, [r7, #0]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f002 fd99 	bl	8008eb0 <USBD_CtlError>
      ret = USBD_FAIL;
 800637e:	2303      	movs	r3, #3
 8006380:	75fb      	strb	r3, [r7, #23]
      break;
 8006382:	e000      	b.n	8006386 <USBD_MSC_Setup+0x1ca>
      break;
 8006384:	bf00      	nop
    }
    break;
 8006386:	e006      	b.n	8006396 <USBD_MSC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f002 fd90 	bl	8008eb0 <USBD_CtlError>
    ret = USBD_FAIL;
 8006390:	2303      	movs	r3, #3
 8006392:	75fb      	strb	r3, [r7, #23]
    break;
 8006394:	bf00      	nop
  }

  return (uint8_t)ret;
 8006396:	7dfb      	ldrb	r3, [r7, #23]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f929 	bl	8006608 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80063cc:	78fb      	ldrb	r3, [r7, #3]
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f94f 	bl	8006674 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80063ee:	4b03      	ldr	r3, [pc, #12]	; (80063fc <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	200001f8 	.word	0x200001f8

08006400 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800640e:	4b03      	ldr	r3, [pc, #12]	; (800641c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	20000218 	.word	0x20000218

08006420 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800642e:	4b03      	ldr	r3, [pc, #12]	; (800643c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006430:	4618      	mov	r0, r3
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	20000238 	.word	0x20000238

08006440 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	220a      	movs	r2, #10
 800644c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800644e:	4b03      	ldr	r3, [pc, #12]	; (800645c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	20000258 	.word	0x20000258

08006460 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006470:	2303      	movs	r3, #3
 8006472:	e004      	b.n	800647e <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData_MSC = fops;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

  return (uint8_t)USBD_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
	...

0800648c <USBD_Update_MSC_DESC>:

void USBD_Update_MSC_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	4608      	mov	r0, r1
 8006496:	4611      	mov	r1, r2
 8006498:	461a      	mov	r2, r3
 800649a:	4603      	mov	r3, r0
 800649c:	70fb      	strb	r3, [r7, #3]
 800649e:	460b      	mov	r3, r1
 80064a0:	70bb      	strb	r3, [r7, #2]
 80064a2:	4613      	mov	r3, r2
 80064a4:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	330b      	adds	r3, #11
 80064aa:	78fa      	ldrb	r2, [r7, #3]
 80064ac:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	3311      	adds	r3, #17
 80064b2:	7c3a      	ldrb	r2, [r7, #16]
 80064b4:	701a      	strb	r2, [r3, #0]
  desc[20] = in_ep;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	3314      	adds	r3, #20
 80064ba:	78ba      	ldrb	r2, [r7, #2]
 80064bc:	701a      	strb	r2, [r3, #0]
  desc[27] = out_ep;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	331b      	adds	r3, #27
 80064c2:	787a      	ldrb	r2, [r7, #1]
 80064c4:	701a      	strb	r2, [r3, #0]

  MSC_IN_EP = in_ep;
 80064c6:	4a09      	ldr	r2, [pc, #36]	; (80064ec <USBD_Update_MSC_DESC+0x60>)
 80064c8:	78bb      	ldrb	r3, [r7, #2]
 80064ca:	7013      	strb	r3, [r2, #0]
  MSC_OUT_EP = out_ep;
 80064cc:	4a08      	ldr	r2, [pc, #32]	; (80064f0 <USBD_Update_MSC_DESC+0x64>)
 80064ce:	787b      	ldrb	r3, [r7, #1]
 80064d0:	7013      	strb	r3, [r2, #0]
  MSC_ITF_NBR = itf_no;
 80064d2:	4a08      	ldr	r2, [pc, #32]	; (80064f4 <USBD_Update_MSC_DESC+0x68>)
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	7013      	strb	r3, [r2, #0]
  MSC_BOT_STR_DESC_IDX = str_idx;
 80064d8:	4a07      	ldr	r2, [pc, #28]	; (80064f8 <USBD_Update_MSC_DESC+0x6c>)
 80064da:	7c3b      	ldrb	r3, [r7, #16]
 80064dc:	7013      	strb	r3, [r2, #0]
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	200001ba 	.word	0x200001ba
 80064f0:	200001bb 	.word	0x200001bb
 80064f4:	2000906c 	.word	0x2000906c
 80064f8:	2000906d 	.word	0x2000906d

080064fc <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800650a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d02d      	beq.n	800656e <MSC_BOT_Init+0x72>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Init(0U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2000      	movs	r0, #0
 8006540:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_OUT_EP);
 8006542:	4b0d      	ldr	r3, [pc, #52]	; (8006578 <MSC_BOT_Init+0x7c>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f002 ff51 	bl	80093f0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_IN_EP);
 800654e:	4b0b      	ldr	r3, [pc, #44]	; (800657c <MSC_BOT_Init+0x80>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f002 ff4b 	bl	80093f0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 800655a:	4b07      	ldr	r3, [pc, #28]	; (8006578 <MSC_BOT_Init+0x7c>)
 800655c:	7819      	ldrb	r1, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006564:	231f      	movs	r3, #31
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f003 f80b 	bl	8009582 <USBD_LL_PrepareReceive>
 800656c:	e000      	b.n	8006570 <MSC_BOT_Init+0x74>
    return;
 800656e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	200001bb 	.word	0x200001bb
 800657c:	200001ba 	.word	0x200001ba

08006580 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800658e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01b      	beq.n	80065ce <MSC_BOT_Reset+0x4e>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2201      	movs	r2, #1
 80065a0:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_IN_EP);
 80065a2:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <MSC_BOT_Reset+0x58>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f002 ff5f 	bl	800946c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_OUT_EP);
 80065ae:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <MSC_BOT_Reset+0x5c>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	4619      	mov	r1, r3
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f002 ff59 	bl	800946c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 80065ba:	4b08      	ldr	r3, [pc, #32]	; (80065dc <MSC_BOT_Reset+0x5c>)
 80065bc:	7819      	ldrb	r1, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80065c4:	231f      	movs	r3, #31
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f002 ffdb 	bl	8009582 <USBD_LL_PrepareReceive>
 80065cc:	e000      	b.n	80065d0 <MSC_BOT_Reset+0x50>
    return;
 80065ce:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	200001ba 	.word	0x200001ba
 80065dc:	200001bb 	.word	0x200001bb

080065e0 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80065ee:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	721a      	strb	r2, [r3, #8]
  }
}
 80065fc:	bf00      	nop
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800661a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d020      	beq.n	8006664 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	7a1b      	ldrb	r3, [r3, #8]
 8006626:	2b02      	cmp	r3, #2
 8006628:	d005      	beq.n	8006636 <MSC_BOT_DataIn+0x2e>
 800662a:	2b02      	cmp	r3, #2
 800662c:	db1c      	blt.n	8006668 <MSC_BOT_DataIn+0x60>
 800662e:	3b03      	subs	r3, #3
 8006630:	2b01      	cmp	r3, #1
 8006632:	d819      	bhi.n	8006668 <MSC_BOT_DataIn+0x60>
 8006634:	e011      	b.n	800665a <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006642:	461a      	mov	r2, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f9b1 	bl	80069ac <SCSI_ProcessCmd>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	da0d      	bge.n	800666c <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006650:	2101      	movs	r1, #1
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f900 	bl	8006858 <MSC_BOT_SendCSW>
      }
      break;
 8006658:	e008      	b.n	800666c <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800665a:	2100      	movs	r1, #0
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f8fb 	bl	8006858 <MSC_BOT_SendCSW>
      break;
 8006662:	e004      	b.n	800666e <MSC_BOT_DataIn+0x66>
    return;
 8006664:	bf00      	nop
 8006666:	e002      	b.n	800666e <MSC_BOT_DataIn+0x66>

    default:
      break;
 8006668:	bf00      	nop
 800666a:	e000      	b.n	800666e <MSC_BOT_DataIn+0x66>
      break;
 800666c:	bf00      	nop
  }
}
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006686:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01c      	beq.n	80066c8 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	7a1b      	ldrb	r3, [r3, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <MSC_BOT_DataOut+0x28>
 8006696:	2b01      	cmp	r3, #1
 8006698:	d004      	beq.n	80066a4 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800669a:	e018      	b.n	80066ce <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f819 	bl	80066d4 <MSC_BOT_CBW_Decode>
      break;
 80066a2:	e014      	b.n	80066ce <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80066b0:	461a      	mov	r2, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f97a 	bl	80069ac <SCSI_ProcessCmd>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	da06      	bge.n	80066cc <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80066be:	2101      	movs	r1, #1
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f8c9 	bl	8006858 <MSC_BOT_SendCSW>
      break;
 80066c6:	e001      	b.n	80066cc <MSC_BOT_DataOut+0x58>
    return;
 80066c8:	bf00      	nop
 80066ca:	e000      	b.n	80066ce <MSC_BOT_DataOut+0x5a>
      break;
 80066cc:	bf00      	nop
  }
}
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80066e2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d079      	beq.n	80067de <MSC_BOT_CBW_Decode+0x10a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 8006702:	4b3a      	ldr	r3, [pc, #232]	; (80067ec <MSC_BOT_CBW_Decode+0x118>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	4619      	mov	r1, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f002 ff5b 	bl	80095c4 <USBD_LL_GetRxDataSize>
 800670e:	4603      	mov	r3, r0
 8006710:	2b1f      	cmp	r3, #31
 8006712:	d114      	bne.n	800673e <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 800671a:	4a35      	ldr	r2, [pc, #212]	; (80067f0 <MSC_BOT_CBW_Decode+0x11c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d10e      	bne.n	800673e <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006726:	2b01      	cmp	r3, #1
 8006728:	d809      	bhi.n	800673e <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <MSC_BOT_CBW_Decode+0x6a>
      (hmsc->cbw.bCBLength > 16U))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800673a:	2b10      	cmp	r3, #16
 800673c:	d90e      	bls.n	800675c <MSC_BOT_CBW_Decode+0x88>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006744:	2320      	movs	r3, #32
 8006746:	2205      	movs	r2, #5
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fdda 	bl	8007302 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2202      	movs	r2, #2
 8006752:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f8b5 	bl	80068c4 <MSC_BOT_Abort>
 800675a:	e043      	b.n	80067e4 <MSC_BOT_CBW_Decode+0x110>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006768:	461a      	mov	r2, r3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f91e 	bl	80069ac <SCSI_ProcessCmd>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	da0c      	bge.n	8006790 <MSC_BOT_CBW_Decode+0xbc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	7a1b      	ldrb	r3, [r3, #8]
 800677a:	2b05      	cmp	r3, #5
 800677c:	d104      	bne.n	8006788 <MSC_BOT_CBW_Decode+0xb4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800677e:	2101      	movs	r1, #1
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f869 	bl	8006858 <MSC_BOT_SendCSW>
 8006786:	e02d      	b.n	80067e4 <MSC_BOT_CBW_Decode+0x110>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f89b 	bl	80068c4 <MSC_BOT_Abort>
 800678e:	e029      	b.n	80067e4 <MSC_BOT_CBW_Decode+0x110>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	7a1b      	ldrb	r3, [r3, #8]
 8006794:	2b02      	cmp	r3, #2
 8006796:	d024      	beq.n	80067e2 <MSC_BOT_CBW_Decode+0x10e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800679c:	2b01      	cmp	r3, #1
 800679e:	d020      	beq.n	80067e2 <MSC_BOT_CBW_Decode+0x10e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d01c      	beq.n	80067e2 <MSC_BOT_CBW_Decode+0x10e>
    {
      if (hmsc->bot_data_length > 0U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d009      	beq.n	80067c4 <MSC_BOT_CBW_Decode+0xf0>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f103 0110 	add.w	r1, r3, #16
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	461a      	mov	r2, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f819 	bl	80067f4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80067c2:	e00f      	b.n	80067e4 <MSC_BOT_CBW_Decode+0x110>
      }
      else if (hmsc->bot_data_length == 0U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d104      	bne.n	80067d6 <MSC_BOT_CBW_Decode+0x102>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80067cc:	2100      	movs	r1, #0
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f842 	bl	8006858 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80067d4:	e006      	b.n	80067e4 <MSC_BOT_CBW_Decode+0x110>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f874 	bl	80068c4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80067dc:	e002      	b.n	80067e4 <MSC_BOT_CBW_Decode+0x110>
    return;
 80067de:	bf00      	nop
 80067e0:	e000      	b.n	80067e4 <MSC_BOT_CBW_Decode+0x110>
      }
    }
    else
    {
      return;
 80067e2:	bf00      	nop
    }
  }
}
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	200001bb 	.word	0x200001bb
 80067f0:	43425355 	.word	0x43425355

080067f4 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006806:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	4293      	cmp	r3, r2
 8006812:	bf28      	it	cs
 8006814:	4613      	movcs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d016      	beq.n	800684c <MSC_BOT_SendData+0x58>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	1ad2      	subs	r2, r2, r3
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2204      	movs	r2, #4
 800683a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, pbuf, length);
 800683c:	4b05      	ldr	r3, [pc, #20]	; (8006854 <MSC_BOT_SendData+0x60>)
 800683e:	7819      	ldrb	r1, [r3, #0]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f002 fe7b 	bl	8009540 <USBD_LL_Transmit>
 800684a:	e000      	b.n	800684e <MSC_BOT_SendData+0x5a>
    return;
 800684c:	bf00      	nop
}
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	200001ba 	.word	0x200001ba

08006858 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800686a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d01d      	beq.n	80068ae <MSC_BOT_SendCSW+0x56>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4a10      	ldr	r2, [pc, #64]	; (80068b8 <MSC_BOT_SendCSW+0x60>)
 8006876:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	78fa      	ldrb	r2, [r7, #3]
 800687e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, (uint8_t *)&hmsc->csw,
 8006888:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <MSC_BOT_SendCSW+0x64>)
 800688a:	7819      	ldrb	r1, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8006892:	230d      	movs	r3, #13
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f002 fe53 	bl	8009540 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 800689a:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <MSC_BOT_SendCSW+0x68>)
 800689c:	7819      	ldrb	r1, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80068a4:	231f      	movs	r3, #31
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f002 fe6b 	bl	8009582 <USBD_LL_PrepareReceive>
 80068ac:	e000      	b.n	80068b0 <MSC_BOT_SendCSW+0x58>
    return;
 80068ae:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	53425355 	.word	0x53425355
 80068bc:	200001ba 	.word	0x200001ba
 80068c0:	200001bb 	.word	0x200001bb

080068c4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80068d2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d02a      	beq.n	8006930 <MSC_BOT_Abort+0x6c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10e      	bne.n	8006902 <MSC_BOT_Abort+0x3e>
      (hmsc->cbw.dDataLength != 0U) &&
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <MSC_BOT_Abort+0x3e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d105      	bne.n	8006902 <MSC_BOT_Abort+0x3e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 80068f6:	4b10      	ldr	r3, [pc, #64]	; (8006938 <MSC_BOT_Abort+0x74>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f002 fd96 	bl	800942e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 8006902:	4b0e      	ldr	r3, [pc, #56]	; (800693c <MSC_BOT_Abort+0x78>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f002 fd90 	bl	800942e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	7a5b      	ldrb	r3, [r3, #9]
 8006912:	2b02      	cmp	r3, #2
 8006914:	d10d      	bne.n	8006932 <MSC_BOT_Abort+0x6e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 8006916:	4b09      	ldr	r3, [pc, #36]	; (800693c <MSC_BOT_Abort+0x78>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f002 fd86 	bl	800942e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 8006922:	4b05      	ldr	r3, [pc, #20]	; (8006938 <MSC_BOT_Abort+0x74>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f002 fd80 	bl	800942e <USBD_LL_StallEP>
 800692e:	e000      	b.n	8006932 <MSC_BOT_Abort+0x6e>
    return;
 8006930:	bf00      	nop
  }
}
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	200001bb 	.word	0x200001bb
 800693c:	200001ba 	.word	0x200001ba

08006940 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006952:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d01d      	beq.n	8006996 <MSC_BOT_CplClrFeature+0x56>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	7a5b      	ldrb	r3, [r3, #9]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d10c      	bne.n	800697c <MSC_BOT_CplClrFeature+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 8006962:	4b10      	ldr	r3, [pc, #64]	; (80069a4 <MSC_BOT_CplClrFeature+0x64>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f002 fd60 	bl	800942e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 800696e:	4b0e      	ldr	r3, [pc, #56]	; (80069a8 <MSC_BOT_CplClrFeature+0x68>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f002 fd5a 	bl	800942e <USBD_LL_StallEP>
 800697a:	e00f      	b.n	800699c <MSC_BOT_CplClrFeature+0x5c>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800697c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006980:	2b00      	cmp	r3, #0
 8006982:	da0a      	bge.n	800699a <MSC_BOT_CplClrFeature+0x5a>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	7a5b      	ldrb	r3, [r3, #9]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d006      	beq.n	800699a <MSC_BOT_CplClrFeature+0x5a>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800698c:	2101      	movs	r1, #1
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff ff62 	bl	8006858 <MSC_BOT_SendCSW>
 8006994:	e002      	b.n	800699c <MSC_BOT_CplClrFeature+0x5c>
    return;
 8006996:	bf00      	nop
 8006998:	e000      	b.n	800699c <MSC_BOT_CplClrFeature+0x5c>
  }
  else
  {
    return;
 800699a:	bf00      	nop
  }
}
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	200001ba 	.word	0x200001ba
 80069a8:	200001bb 	.word	0x200001bb

080069ac <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	460b      	mov	r3, r1
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80069c0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d102      	bne.n	80069ce <SCSI_ProcessCmd+0x22>
  {
    return -1;
 80069c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069cc:	e168      	b.n	8006ca0 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2baa      	cmp	r3, #170	; 0xaa
 80069d4:	f000 8144 	beq.w	8006c60 <SCSI_ProcessCmd+0x2b4>
 80069d8:	2baa      	cmp	r3, #170	; 0xaa
 80069da:	f300 8153 	bgt.w	8006c84 <SCSI_ProcessCmd+0x2d8>
 80069de:	2ba8      	cmp	r3, #168	; 0xa8
 80069e0:	f000 812c 	beq.w	8006c3c <SCSI_ProcessCmd+0x290>
 80069e4:	2ba8      	cmp	r3, #168	; 0xa8
 80069e6:	f300 814d 	bgt.w	8006c84 <SCSI_ProcessCmd+0x2d8>
 80069ea:	2b5a      	cmp	r3, #90	; 0x5a
 80069ec:	f300 80c0 	bgt.w	8006b70 <SCSI_ProcessCmd+0x1c4>
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f2c0 8147 	blt.w	8006c84 <SCSI_ProcessCmd+0x2d8>
 80069f6:	2b5a      	cmp	r3, #90	; 0x5a
 80069f8:	f200 8144 	bhi.w	8006c84 <SCSI_ProcessCmd+0x2d8>
 80069fc:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <SCSI_ProcessCmd+0x58>)
 80069fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a02:	bf00      	nop
 8006a04:	08006b77 	.word	0x08006b77
 8006a08:	08006c85 	.word	0x08006c85
 8006a0c:	08006c85 	.word	0x08006c85
 8006a10:	08006b89 	.word	0x08006b89
 8006a14:	08006c85 	.word	0x08006c85
 8006a18:	08006c85 	.word	0x08006c85
 8006a1c:	08006c85 	.word	0x08006c85
 8006a20:	08006c85 	.word	0x08006c85
 8006a24:	08006c85 	.word	0x08006c85
 8006a28:	08006c85 	.word	0x08006c85
 8006a2c:	08006c85 	.word	0x08006c85
 8006a30:	08006c85 	.word	0x08006c85
 8006a34:	08006c85 	.word	0x08006c85
 8006a38:	08006c85 	.word	0x08006c85
 8006a3c:	08006c85 	.word	0x08006c85
 8006a40:	08006c85 	.word	0x08006c85
 8006a44:	08006c85 	.word	0x08006c85
 8006a48:	08006c85 	.word	0x08006c85
 8006a4c:	08006b9b 	.word	0x08006b9b
 8006a50:	08006c85 	.word	0x08006c85
 8006a54:	08006c85 	.word	0x08006c85
 8006a58:	08006c85 	.word	0x08006c85
 8006a5c:	08006c85 	.word	0x08006c85
 8006a60:	08006c85 	.word	0x08006c85
 8006a64:	08006c85 	.word	0x08006c85
 8006a68:	08006c85 	.word	0x08006c85
 8006a6c:	08006bd1 	.word	0x08006bd1
 8006a70:	08006bad 	.word	0x08006bad
 8006a74:	08006c85 	.word	0x08006c85
 8006a78:	08006c85 	.word	0x08006c85
 8006a7c:	08006bbf 	.word	0x08006bbf
 8006a80:	08006c85 	.word	0x08006c85
 8006a84:	08006c85 	.word	0x08006c85
 8006a88:	08006c85 	.word	0x08006c85
 8006a8c:	08006c85 	.word	0x08006c85
 8006a90:	08006bf5 	.word	0x08006bf5
 8006a94:	08006c85 	.word	0x08006c85
 8006a98:	08006c07 	.word	0x08006c07
 8006a9c:	08006c85 	.word	0x08006c85
 8006aa0:	08006c85 	.word	0x08006c85
 8006aa4:	08006c2b 	.word	0x08006c2b
 8006aa8:	08006c85 	.word	0x08006c85
 8006aac:	08006c4f 	.word	0x08006c4f
 8006ab0:	08006c85 	.word	0x08006c85
 8006ab4:	08006c85 	.word	0x08006c85
 8006ab8:	08006c85 	.word	0x08006c85
 8006abc:	08006c85 	.word	0x08006c85
 8006ac0:	08006c73 	.word	0x08006c73
 8006ac4:	08006c85 	.word	0x08006c85
 8006ac8:	08006c85 	.word	0x08006c85
 8006acc:	08006c85 	.word	0x08006c85
 8006ad0:	08006c85 	.word	0x08006c85
 8006ad4:	08006c85 	.word	0x08006c85
 8006ad8:	08006c85 	.word	0x08006c85
 8006adc:	08006c85 	.word	0x08006c85
 8006ae0:	08006c85 	.word	0x08006c85
 8006ae4:	08006c85 	.word	0x08006c85
 8006ae8:	08006c85 	.word	0x08006c85
 8006aec:	08006c85 	.word	0x08006c85
 8006af0:	08006c85 	.word	0x08006c85
 8006af4:	08006c85 	.word	0x08006c85
 8006af8:	08006c85 	.word	0x08006c85
 8006afc:	08006c85 	.word	0x08006c85
 8006b00:	08006c85 	.word	0x08006c85
 8006b04:	08006c85 	.word	0x08006c85
 8006b08:	08006c85 	.word	0x08006c85
 8006b0c:	08006c85 	.word	0x08006c85
 8006b10:	08006c85 	.word	0x08006c85
 8006b14:	08006c85 	.word	0x08006c85
 8006b18:	08006c85 	.word	0x08006c85
 8006b1c:	08006c85 	.word	0x08006c85
 8006b20:	08006c85 	.word	0x08006c85
 8006b24:	08006c85 	.word	0x08006c85
 8006b28:	08006c85 	.word	0x08006c85
 8006b2c:	08006c85 	.word	0x08006c85
 8006b30:	08006c85 	.word	0x08006c85
 8006b34:	08006c85 	.word	0x08006c85
 8006b38:	08006c85 	.word	0x08006c85
 8006b3c:	08006c85 	.word	0x08006c85
 8006b40:	08006c85 	.word	0x08006c85
 8006b44:	08006c85 	.word	0x08006c85
 8006b48:	08006c85 	.word	0x08006c85
 8006b4c:	08006c85 	.word	0x08006c85
 8006b50:	08006c85 	.word	0x08006c85
 8006b54:	08006c85 	.word	0x08006c85
 8006b58:	08006c85 	.word	0x08006c85
 8006b5c:	08006c85 	.word	0x08006c85
 8006b60:	08006c85 	.word	0x08006c85
 8006b64:	08006c85 	.word	0x08006c85
 8006b68:	08006c85 	.word	0x08006c85
 8006b6c:	08006be3 	.word	0x08006be3
 8006b70:	2b9e      	cmp	r3, #158	; 0x9e
 8006b72:	d051      	beq.n	8006c18 <SCSI_ProcessCmd+0x26c>
 8006b74:	e086      	b.n	8006c84 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8006b76:	7afb      	ldrb	r3, [r7, #11]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 f893 	bl	8006ca8 <SCSI_TestUnitReady>
 8006b82:	4603      	mov	r3, r0
 8006b84:	75fb      	strb	r3, [r7, #23]
      break;
 8006b86:	e089      	b.n	8006c9c <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8006b88:	7afb      	ldrb	r3, [r7, #11]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 fb38 	bl	8007204 <SCSI_RequestSense>
 8006b94:	4603      	mov	r3, r0
 8006b96:	75fb      	strb	r3, [r7, #23]
      break;
 8006b98:	e080      	b.n	8006c9c <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8006b9a:	7afb      	ldrb	r3, [r7, #11]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 f8d1 	bl	8006d48 <SCSI_Inquiry>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8006baa:	e077      	b.n	8006c9c <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8006bac:	7afb      	ldrb	r3, [r7, #11]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 fbec 	bl	8007390 <SCSI_StartStopUnit>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	75fb      	strb	r3, [r7, #23]
      break;
 8006bbc:	e06e      	b.n	8006c9c <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8006bbe:	7afb      	ldrb	r3, [r7, #11]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 fc34 	bl	8007432 <SCSI_AllowPreventRemovable>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bce:	e065      	b.n	8006c9c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8006bd0:	7afb      	ldrb	r3, [r7, #11]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 fabc 	bl	8007154 <SCSI_ModeSense6>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	75fb      	strb	r3, [r7, #23]
      break;
 8006be0:	e05c      	b.n	8006c9c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8006be2:	7afb      	ldrb	r3, [r7, #11]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	4619      	mov	r1, r3
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fadf 	bl	80071ac <SCSI_ModeSense10>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf2:	e053      	b.n	8006c9c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8006bf4:	7afb      	ldrb	r3, [r7, #11]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 fa37 	bl	800706e <SCSI_ReadFormatCapacity>
 8006c00:	4603      	mov	r3, r0
 8006c02:	75fb      	strb	r3, [r7, #23]
      break;
 8006c04:	e04a      	b.n	8006c9c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f90f 	bl	8006e30 <SCSI_ReadCapacity10>
 8006c12:	4603      	mov	r3, r0
 8006c14:	75fb      	strb	r3, [r7, #23]
      break;
 8006c16:	e041      	b.n	8006c9c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8006c18:	7afb      	ldrb	r3, [r7, #11]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 f97b 	bl	8006f1a <SCSI_ReadCapacity16>
 8006c24:	4603      	mov	r3, r0
 8006c26:	75fb      	strb	r3, [r7, #23]
      break;
 8006c28:	e038      	b.n	8006c9c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8006c2a:	7afb      	ldrb	r3, [r7, #11]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 fc27 	bl	8007484 <SCSI_Read10>
 8006c36:	4603      	mov	r3, r0
 8006c38:	75fb      	strb	r3, [r7, #23]
      break;
 8006c3a:	e02f      	b.n	8006c9c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8006c3c:	7afb      	ldrb	r3, [r7, #11]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	4619      	mov	r1, r3
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 fcbe 	bl	80075c4 <SCSI_Read12>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c4c:	e026      	b.n	8006c9c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8006c4e:	7afb      	ldrb	r3, [r7, #11]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	4619      	mov	r1, r3
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 fd61 	bl	800771c <SCSI_Write10>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c5e:	e01d      	b.n	8006c9c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8006c60:	7afb      	ldrb	r3, [r7, #11]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	4619      	mov	r1, r3
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 fe20 	bl	80078ac <SCSI_Write12>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c70:	e014      	b.n	8006c9c <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8006c72:	7afb      	ldrb	r3, [r7, #11]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	4619      	mov	r1, r3
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 feef 	bl	8007a5c <SCSI_Verify10>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	75fb      	strb	r3, [r7, #23]
      break;
 8006c82:	e00b      	b.n	8006c9c <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006c84:	7af9      	ldrb	r1, [r7, #11]
 8006c86:	2320      	movs	r3, #32
 8006c88:	2205      	movs	r2, #5
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 fb39 	bl	8007302 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	2202      	movs	r2, #2
 8006c94:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8006c96:	23ff      	movs	r3, #255	; 0xff
 8006c98:	75fb      	strb	r3, [r7, #23]
      break;
 8006c9a:	bf00      	nop
  }

  return ret;
 8006c9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006cbc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d102      	bne.n	8006cca <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8006cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cc8:	e03a      	b.n	8006d40 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00a      	beq.n	8006cea <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006cda:	2320      	movs	r3, #32
 8006cdc:	2205      	movs	r2, #5
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 fb0f 	bl	8007302 <SCSI_SenseCode>

    return -1;
 8006ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ce8:	e02a      	b.n	8006d40 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d10b      	bne.n	8006d0c <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006cf4:	7af9      	ldrb	r1, [r7, #11]
 8006cf6:	233a      	movs	r3, #58	; 0x3a
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 fb01 	bl	8007302 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	2205      	movs	r2, #5
 8006d04:	721a      	strb	r2, [r3, #8]
    return -1;
 8006d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d0a:	e019      	b.n	8006d40 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	7afa      	ldrb	r2, [r7, #11]
 8006d16:	4610      	mov	r0, r2
 8006d18:	4798      	blx	r3
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00b      	beq.n	8006d38 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006d20:	7af9      	ldrb	r1, [r7, #11]
 8006d22:	233a      	movs	r3, #58	; 0x3a
 8006d24:	2202      	movs	r2, #2
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 faeb 	bl	8007302 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	2205      	movs	r2, #5
 8006d30:	721a      	strb	r2, [r3, #8]

    return -1;
 8006d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d36:	e003      	b.n	8006d40 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	60da      	str	r2, [r3, #12]

  return 0;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b088      	sub	sp, #32
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	460b      	mov	r3, r1
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006d5c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d102      	bne.n	8006d6a <SCSI_Inquiry+0x22>
  {
    return -1;
 8006d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d68:	e05a      	b.n	8006e20 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006d7a:	2320      	movs	r3, #32
 8006d7c:	2205      	movs	r2, #5
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 fabf 	bl	8007302 <SCSI_SenseCode>
    return -1;
 8006d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d88:	e04a      	b.n	8006e20 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d020      	beq.n	8006dda <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3302      	adds	r3, #2
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d105      	bne.n	8006dae <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8006da2:	2206      	movs	r2, #6
 8006da4:	4920      	ldr	r1, [pc, #128]	; (8006e28 <SCSI_Inquiry+0xe0>)
 8006da6:	69b8      	ldr	r0, [r7, #24]
 8006da8:	f000 ffc2 	bl	8007d30 <SCSI_UpdateBotData>
 8006dac:	e037      	b.n	8006e1e <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3302      	adds	r3, #2
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b80      	cmp	r3, #128	; 0x80
 8006db6:	d105      	bne.n	8006dc4 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8006db8:	2208      	movs	r2, #8
 8006dba:	491c      	ldr	r1, [pc, #112]	; (8006e2c <SCSI_Inquiry+0xe4>)
 8006dbc:	69b8      	ldr	r0, [r7, #24]
 8006dbe:	f000 ffb7 	bl	8007d30 <SCSI_UpdateBotData>
 8006dc2:	e02c      	b.n	8006e1e <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006dca:	2324      	movs	r3, #36	; 0x24
 8006dcc:	2205      	movs	r2, #5
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fa97 	bl	8007302 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8006dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dd8:	e022      	b.n	8006e20 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData_MSC)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006de0:	69d9      	ldr	r1, [r3, #28]
 8006de2:	7afa      	ldrb	r2, [r7, #11]
 8006de4:	4613      	mov	r3, r2
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	3304      	adds	r3, #4
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	3305      	adds	r3, #5
 8006dfa:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3304      	adds	r3, #4
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	8bfa      	ldrh	r2, [r7, #30]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d303      	bcc.n	8006e12 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8006e12:	8bfb      	ldrh	r3, [r7, #30]
 8006e14:	461a      	mov	r2, r3
 8006e16:	6979      	ldr	r1, [r7, #20]
 8006e18:	69b8      	ldr	r0, [r7, #24]
 8006e1a:	f000 ff89 	bl	8007d30 <SCSI_UpdateBotData>
  }

  return 0;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3720      	adds	r7, #32
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	20000264 	.word	0x20000264
 8006e2c:	2000026c 	.word	0x2000026c

08006e30 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006e44:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d102      	bne.n	8006e52 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8006e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e50:	e05f      	b.n	8006f12 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8006e66:	7af8      	ldrb	r0, [r7, #11]
 8006e68:	4798      	blx	r3
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006e6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d104      	bne.n	8006e80 <SCSI_ReadCapacity10+0x50>
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d108      	bne.n	8006e92 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006e80:	7af9      	ldrb	r1, [r7, #11]
 8006e82:	233a      	movs	r3, #58	; 0x3a
 8006e84:	2202      	movs	r2, #2
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 fa3b 	bl	8007302 <SCSI_SenseCode>
    return -1;
 8006e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e90:	e03f      	b.n	8006f12 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	0e1b      	lsrs	r3, r3, #24
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	0c1b      	lsrs	r3, r3, #16
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	0a1b      	lsrs	r3, r3, #8
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006ed8:	161b      	asrs	r3, r3, #24
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006ee6:	141b      	asrs	r3, r3, #16
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006ef4:	0a1b      	lsrs	r3, r3, #8
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2208      	movs	r2, #8
 8006f0e:	60da      	str	r2, [r3, #12]

  return 0;
 8006f10:	2300      	movs	r3, #0

}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b088      	sub	sp, #32
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	60f8      	str	r0, [r7, #12]
 8006f22:	460b      	mov	r3, r1
 8006f24:	607a      	str	r2, [r7, #4]
 8006f26:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006f2e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d102      	bne.n	8006f3c <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8006f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f3a:	e094      	b.n	8007066 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8006f50:	7af8      	ldrb	r0, [r7, #11]
 8006f52:	4798      	blx	r3
 8006f54:	4603      	mov	r3, r0
 8006f56:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d104      	bne.n	8006f6a <SCSI_ReadCapacity16+0x50>
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d108      	bne.n	8006f7c <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006f6a:	7af9      	ldrb	r1, [r7, #11]
 8006f6c:	233a      	movs	r3, #58	; 0x3a
 8006f6e:	2202      	movs	r2, #2
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 f9c6 	bl	8007302 <SCSI_SenseCode>
    return -1;
 8006f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f7a:	e074      	b.n	8007066 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	330a      	adds	r3, #10
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	330b      	adds	r3, #11
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006f8c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	330c      	adds	r3, #12
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8006f96:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	320d      	adds	r2, #13
 8006f9c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8006f9e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	77fb      	strb	r3, [r7, #31]
 8006fa8:	e007      	b.n	8006fba <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8006faa:	7ffb      	ldrb	r3, [r7, #31]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	4413      	add	r3, r2
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006fb4:	7ffb      	ldrb	r3, [r7, #31]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	77fb      	strb	r3, [r7, #31]
 8006fba:	7ffa      	ldrb	r2, [r7, #31]
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d3f2      	bcc.n	8006faa <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	0e1b      	lsrs	r3, r3, #24
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	0c1b      	lsrs	r3, r3, #16
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006fea:	3b01      	subs	r3, #1
 8006fec:	0a1b      	lsrs	r3, r3, #8
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800700a:	161b      	asrs	r3, r3, #24
 800700c:	b2da      	uxtb	r2, r3
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007018:	141b      	asrs	r3, r3, #16
 800701a:	b2da      	uxtb	r2, r3
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007026:	0a1b      	lsrs	r3, r3, #8
 8007028:	b29b      	uxth	r3, r3
 800702a:	b2da      	uxtb	r2, r3
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007036:	b2da      	uxtb	r2, r3
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	330a      	adds	r3, #10
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	330b      	adds	r3, #11
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800704c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	330c      	adds	r3, #12
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007056:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	320d      	adds	r2, #13
 800705c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800705e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	60da      	str	r2, [r3, #12]

  return 0;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3720      	adds	r7, #32
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b088      	sub	sp, #32
 8007072:	af00      	add	r7, sp, #0
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	460b      	mov	r3, r1
 8007078:	607a      	str	r2, [r7, #4]
 800707a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007082:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d102      	bne.n	8007090 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 800708a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800708e:	e05c      	b.n	800714a <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData_MSC)->GetCapacity(lun, &blk_nbr, &blk_size);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f107 0214 	add.w	r2, r7, #20
 800709c:	f107 0110 	add.w	r1, r7, #16
 80070a0:	7af8      	ldrb	r0, [r7, #11]
 80070a2:	4798      	blx	r3
 80070a4:	4603      	mov	r3, r0
 80070a6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80070a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d104      	bne.n	80070ba <SCSI_ReadFormatCapacity+0x4c>
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d108      	bne.n	80070cc <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80070ba:	7af9      	ldrb	r1, [r7, #11]
 80070bc:	233a      	movs	r3, #58	; 0x3a
 80070be:	2202      	movs	r2, #2
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 f91e 	bl	8007302 <SCSI_SenseCode>
    return -1;
 80070c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070ca:	e03e      	b.n	800714a <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 80070cc:	2300      	movs	r3, #0
 80070ce:	83fb      	strh	r3, [r7, #30]
 80070d0:	e007      	b.n	80070e2 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 80070d2:	8bfb      	ldrh	r3, [r7, #30]
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	4413      	add	r3, r2
 80070d8:	2200      	movs	r2, #0
 80070da:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80070dc:	8bfb      	ldrh	r3, [r7, #30]
 80070de:	3301      	adds	r3, #1
 80070e0:	83fb      	strh	r3, [r7, #30]
 80070e2:	8bfb      	ldrh	r3, [r7, #30]
 80070e4:	2b0b      	cmp	r3, #11
 80070e6:	d9f4      	bls.n	80070d2 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	2208      	movs	r2, #8
 80070ec:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	0e1b      	lsrs	r3, r3, #24
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	0c1b      	lsrs	r3, r3, #16
 8007100:	b2da      	uxtb	r2, r3
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	3b01      	subs	r3, #1
 800710a:	0a1b      	lsrs	r3, r3, #8
 800710c:	b2da      	uxtb	r2, r3
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	b2db      	uxtb	r3, r3
 8007116:	3b01      	subs	r3, #1
 8007118:	b2da      	uxtb	r2, r3
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2202      	movs	r2, #2
 8007122:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007124:	8abb      	ldrh	r3, [r7, #20]
 8007126:	141b      	asrs	r3, r3, #16
 8007128:	b2da      	uxtb	r2, r3
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800712e:	8abb      	ldrh	r3, [r7, #20]
 8007130:	0a1b      	lsrs	r3, r3, #8
 8007132:	b29b      	uxth	r3, r3
 8007134:	b2da      	uxtb	r2, r3
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800713a:	8abb      	ldrh	r3, [r7, #20]
 800713c:	b2da      	uxtb	r2, r3
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	220c      	movs	r2, #12
 8007146:	60da      	str	r2, [r3, #12]

  return 0;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3720      	adds	r7, #32
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	460b      	mov	r3, r1
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007168:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800716a:	2317      	movs	r3, #23
 800716c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d102      	bne.n	800717a <SCSI_ModeSense6+0x26>
  {
    return -1;
 8007174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007178:	e011      	b.n	800719e <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3304      	adds	r3, #4
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	b29b      	uxth	r3, r3
 8007182:	8afa      	ldrh	r2, [r7, #22]
 8007184:	429a      	cmp	r2, r3
 8007186:	d303      	bcc.n	8007190 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3304      	adds	r3, #4
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8007190:	8afb      	ldrh	r3, [r7, #22]
 8007192:	461a      	mov	r2, r3
 8007194:	4904      	ldr	r1, [pc, #16]	; (80071a8 <SCSI_ModeSense6+0x54>)
 8007196:	6938      	ldr	r0, [r7, #16]
 8007198:	f000 fdca 	bl	8007d30 <SCSI_UpdateBotData>

  return 0;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000274 	.word	0x20000274

080071ac <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	460b      	mov	r3, r1
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80071c0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80071c2:	231b      	movs	r3, #27
 80071c4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d102      	bne.n	80071d2 <SCSI_ModeSense10+0x26>
  {
    return -1;
 80071cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071d0:	e011      	b.n	80071f6 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3308      	adds	r3, #8
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	8afa      	ldrh	r2, [r7, #22]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d303      	bcc.n	80071e8 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3308      	adds	r3, #8
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80071e8:	8afb      	ldrh	r3, [r7, #22]
 80071ea:	461a      	mov	r2, r3
 80071ec:	4904      	ldr	r1, [pc, #16]	; (8007200 <SCSI_ModeSense10+0x54>)
 80071ee:	6938      	ldr	r0, [r7, #16]
 80071f0:	f000 fd9e 	bl	8007d30 <SCSI_UpdateBotData>

  return 0;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	2000028c 	.word	0x2000028c

08007204 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	460b      	mov	r3, r1
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007218:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d102      	bne.n	8007226 <SCSI_RequestSense+0x22>
  {
    return -1;
 8007220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007224:	e069      	b.n	80072fa <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007236:	2320      	movs	r3, #32
 8007238:	2205      	movs	r2, #5
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 f861 	bl	8007302 <SCSI_SenseCode>
    return -1;
 8007240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007244:	e059      	b.n	80072fa <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007246:	2300      	movs	r3, #0
 8007248:	75fb      	strb	r3, [r7, #23]
 800724a:	e007      	b.n	800725c <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 800724c:	7dfb      	ldrb	r3, [r7, #23]
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	4413      	add	r3, r2
 8007252:	2200      	movs	r2, #0
 8007254:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	3301      	adds	r3, #1
 800725a:	75fb      	strb	r3, [r7, #23]
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	2b11      	cmp	r3, #17
 8007260:	d9f4      	bls.n	800724c <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	2270      	movs	r2, #112	; 0x70
 8007266:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	220c      	movs	r2, #12
 800726c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800727a:	429a      	cmp	r2, r3
 800727c:	d02e      	beq.n	80072dc <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007284:	461a      	mov	r2, r3
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	3248      	adds	r2, #72	; 0x48
 800728a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	3348      	adds	r3, #72	; 0x48
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	4413      	add	r3, r2
 80072a0:	791a      	ldrb	r2, [r3, #4]
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	3348      	adds	r3, #72	; 0x48
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	4413      	add	r3, r2
 80072b4:	795a      	ldrb	r2, [r3, #5]
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80072c0:	3301      	adds	r3, #1
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	d103      	bne.n	80072dc <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	2212      	movs	r2, #18
 80072e0:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3304      	adds	r3, #4
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b12      	cmp	r3, #18
 80072ea:	d805      	bhi.n	80072f8 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3304      	adds	r3, #4
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	461a      	mov	r2, r3
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	4608      	mov	r0, r1
 800730c:	4611      	mov	r1, r2
 800730e:	461a      	mov	r2, r3
 8007310:	4603      	mov	r3, r0
 8007312:	70fb      	strb	r3, [r7, #3]
 8007314:	460b      	mov	r3, r1
 8007316:	70bb      	strb	r3, [r7, #2]
 8007318:	4613      	mov	r3, r2
 800731a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007322:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d02c      	beq.n	8007384 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007330:	461a      	mov	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3248      	adds	r2, #72	; 0x48
 8007336:	78b9      	ldrb	r1, [r7, #2]
 8007338:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	3348      	adds	r3, #72	; 0x48
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	4413      	add	r3, r2
 800734a:	787a      	ldrb	r2, [r7, #1]
 800734c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	3348      	adds	r3, #72	; 0x48
 8007358:	00db      	lsls	r3, r3, #3
 800735a:	4413      	add	r3, r2
 800735c:	2200      	movs	r2, #0
 800735e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007366:	3301      	adds	r3, #1
 8007368:	b2da      	uxtb	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007376:	2b04      	cmp	r3, #4
 8007378:	d105      	bne.n	8007386 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8007382:	e000      	b.n	8007386 <SCSI_SenseCode+0x84>
    return;
 8007384:	bf00      	nop
  }
}
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	460b      	mov	r3, r1
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80073a4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d102      	bne.n	80073b2 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 80073ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073b0:	e03b      	b.n	800742a <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d10f      	bne.n	80073dc <SCSI_StartStopUnit+0x4c>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3304      	adds	r3, #4
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	f003 0303 	and.w	r3, r3, #3
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d108      	bne.n	80073dc <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80073ca:	7af9      	ldrb	r1, [r7, #11]
 80073cc:	2324      	movs	r3, #36	; 0x24
 80073ce:	2205      	movs	r2, #5
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7ff ff96 	bl	8007302 <SCSI_SenseCode>

    return -1;
 80073d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073da:	e026      	b.n	800742a <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	3304      	adds	r3, #4
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d104      	bne.n	80073f4 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80073f2:	e016      	b.n	8007422 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3304      	adds	r3, #4
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d104      	bne.n	800740c <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2202      	movs	r2, #2
 8007406:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800740a:	e00a      	b.n	8007422 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3304      	adds	r3, #4
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	2b03      	cmp	r3, #3
 8007418:	d103      	bne.n	8007422 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2200      	movs	r2, #0
 8007426:	60da      	str	r2, [r3, #12]

  return 0;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007432:	b480      	push	{r7}
 8007434:	b087      	sub	sp, #28
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	460b      	mov	r3, r1
 800743c:	607a      	str	r2, [r7, #4]
 800743e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007446:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d102      	bne.n	8007454 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 800744e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007452:	e011      	b.n	8007478 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3304      	adds	r3, #4
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d104      	bne.n	8007468 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007466:	e003      	b.n	8007470 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2200      	movs	r2, #0
 8007474:	60da      	str	r2, [r3, #12]

  return 0;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	460b      	mov	r3, r1
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007498:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d102      	bne.n	80074a6 <SCSI_Read10+0x22>
  {
    return -1;
 80074a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074a4:	e08a      	b.n	80075bc <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	7a1b      	ldrb	r3, [r3, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d17c      	bne.n	80075a8 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80074b4:	b25b      	sxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	db0a      	blt.n	80074d0 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80074c0:	2320      	movs	r3, #32
 80074c2:	2205      	movs	r2, #5
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f7ff ff1c 	bl	8007302 <SCSI_SenseCode>
      return -1;
 80074ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074ce:	e075      	b.n	80075bc <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d108      	bne.n	80074ec <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80074da:	7af9      	ldrb	r1, [r7, #11]
 80074dc:	233a      	movs	r3, #58	; 0x3a
 80074de:	2202      	movs	r2, #2
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f7ff ff0e 	bl	8007302 <SCSI_SenseCode>

      return -1;
 80074e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074ea:	e067      	b.n	80075bc <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	7afa      	ldrb	r2, [r7, #11]
 80074f6:	4610      	mov	r0, r2
 80074f8:	4798      	blx	r3
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d008      	beq.n	8007512 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007500:	7af9      	ldrb	r1, [r7, #11]
 8007502:	233a      	movs	r3, #58	; 0x3a
 8007504:	2202      	movs	r2, #2
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7ff fefb 	bl	8007302 <SCSI_SenseCode>
      return -1;
 800750c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007510:	e054      	b.n	80075bc <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3302      	adds	r3, #2
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	3303      	adds	r3, #3
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007522:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	3304      	adds	r3, #4
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800752c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	3205      	adds	r2, #5
 8007532:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007534:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3307      	adds	r3, #7
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	021b      	lsls	r3, r3, #8
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	3208      	adds	r2, #8
 8007548:	7812      	ldrb	r2, [r2, #0]
 800754a:	431a      	orrs	r2, r3
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800755e:	7af9      	ldrb	r1, [r7, #11]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 fab4 	bl	8007ace <SCSI_CheckAddressRange>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	da02      	bge.n	8007572 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800756c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007570:	e024      	b.n	80075bc <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800757e:	6979      	ldr	r1, [r7, #20]
 8007580:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8007584:	fb01 f303 	mul.w	r3, r1, r3
 8007588:	429a      	cmp	r2, r3
 800758a:	d00a      	beq.n	80075a2 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007592:	2320      	movs	r3, #32
 8007594:	2205      	movs	r2, #5
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7ff feb3 	bl	8007302 <SCSI_SenseCode>
      return -1;
 800759c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075a0:	e00c      	b.n	80075bc <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2202      	movs	r2, #2
 80075a6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075ae:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80075b0:	7afb      	ldrb	r3, [r7, #11]
 80075b2:	4619      	mov	r1, r3
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 fab3 	bl	8007b20 <SCSI_ProcessRead>
 80075ba:	4603      	mov	r3, r0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3718      	adds	r7, #24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	460b      	mov	r3, r1
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80075d8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d102      	bne.n	80075e6 <SCSI_Read12+0x22>
  {
    return -1;
 80075e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075e4:	e095      	b.n	8007712 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	7a1b      	ldrb	r3, [r3, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f040 8087 	bne.w	80076fe <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80075f6:	b25b      	sxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	db0a      	blt.n	8007612 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007602:	2320      	movs	r3, #32
 8007604:	2205      	movs	r2, #5
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f7ff fe7b 	bl	8007302 <SCSI_SenseCode>
      return -1;
 800760c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007610:	e07f      	b.n	8007712 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007618:	2b02      	cmp	r3, #2
 800761a:	d108      	bne.n	800762e <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800761c:	7af9      	ldrb	r1, [r7, #11]
 800761e:	233a      	movs	r3, #58	; 0x3a
 8007620:	2202      	movs	r2, #2
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f7ff fe6d 	bl	8007302 <SCSI_SenseCode>
      return -1;
 8007628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800762c:	e071      	b.n	8007712 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	7afa      	ldrb	r2, [r7, #11]
 8007638:	4610      	mov	r0, r2
 800763a:	4798      	blx	r3
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d008      	beq.n	8007654 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007642:	7af9      	ldrb	r1, [r7, #11]
 8007644:	233a      	movs	r3, #58	; 0x3a
 8007646:	2202      	movs	r2, #2
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f7ff fe5a 	bl	8007302 <SCSI_SenseCode>
      return -1;
 800764e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007652:	e05e      	b.n	8007712 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3302      	adds	r3, #2
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3303      	adds	r3, #3
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007664:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3304      	adds	r3, #4
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800766e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	3205      	adds	r2, #5
 8007674:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007676:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3306      	adds	r3, #6
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3307      	adds	r3, #7
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800768e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3308      	adds	r3, #8
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007698:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	3209      	adds	r2, #9
 800769e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80076a0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80076b4:	7af9      	ldrb	r1, [r7, #11]
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fa09 	bl	8007ace <SCSI_CheckAddressRange>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	da02      	bge.n	80076c8 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80076c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076c6:	e024      	b.n	8007712 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80076d4:	6979      	ldr	r1, [r7, #20]
 80076d6:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80076da:	fb01 f303 	mul.w	r3, r1, r3
 80076de:	429a      	cmp	r2, r3
 80076e0:	d00a      	beq.n	80076f8 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80076e8:	2320      	movs	r3, #32
 80076ea:	2205      	movs	r2, #5
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f7ff fe08 	bl	8007302 <SCSI_SenseCode>
      return -1;
 80076f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076f6:	e00c      	b.n	8007712 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2202      	movs	r2, #2
 80076fc:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007704:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007706:	7afb      	ldrb	r3, [r7, #11]
 8007708:	4619      	mov	r1, r3
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 fa08 	bl	8007b20 <SCSI_ProcessRead>
 8007710:	4603      	mov	r3, r0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	460b      	mov	r3, r1
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007730:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d102      	bne.n	800773e <SCSI_Write10+0x22>
  {
    return -1;
 8007738:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800773c:	e0b0      	b.n	80078a0 <SCSI_Write10+0x184>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	7a1b      	ldrb	r3, [r3, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	f040 80a6 	bne.w	8007894 <SCSI_Write10+0x178>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10a      	bne.n	8007768 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007758:	2320      	movs	r3, #32
 800775a:	2205      	movs	r2, #5
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f7ff fdd0 	bl	8007302 <SCSI_SenseCode>
      return -1;
 8007762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007766:	e09b      	b.n	80078a0 <SCSI_Write10+0x184>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800776e:	b25b      	sxtb	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	da0a      	bge.n	800778a <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800777a:	2320      	movs	r3, #32
 800777c:	2205      	movs	r2, #5
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f7ff fdbf 	bl	8007302 <SCSI_SenseCode>
      return -1;
 8007784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007788:	e08a      	b.n	80078a0 <SCSI_Write10+0x184>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	7afa      	ldrb	r2, [r7, #11]
 8007794:	4610      	mov	r0, r2
 8007796:	4798      	blx	r3
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d008      	beq.n	80077b0 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800779e:	7af9      	ldrb	r1, [r7, #11]
 80077a0:	233a      	movs	r3, #58	; 0x3a
 80077a2:	2202      	movs	r2, #2
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f7ff fdac 	bl	8007302 <SCSI_SenseCode>
      return -1;
 80077aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077ae:	e077      	b.n	80078a0 <SCSI_Write10+0x184>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsWriteProtected(lun) != 0)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	7afa      	ldrb	r2, [r7, #11]
 80077ba:	4610      	mov	r0, r2
 80077bc:	4798      	blx	r3
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d008      	beq.n	80077d6 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80077c4:	7af9      	ldrb	r1, [r7, #11]
 80077c6:	2327      	movs	r3, #39	; 0x27
 80077c8:	2202      	movs	r2, #2
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7ff fd99 	bl	8007302 <SCSI_SenseCode>
      return -1;
 80077d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077d4:	e064      	b.n	80078a0 <SCSI_Write10+0x184>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3302      	adds	r3, #2
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	3303      	adds	r3, #3
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80077e6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3304      	adds	r3, #4
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80077f0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	3205      	adds	r2, #5
 80077f6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80077f8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3307      	adds	r3, #7
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	3208      	adds	r2, #8
 800780c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800780e:	431a      	orrs	r2, r3
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007822:	7af9      	ldrb	r1, [r7, #11]
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 f952 	bl	8007ace <SCSI_CheckAddressRange>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	da02      	bge.n	8007836 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007834:	e034      	b.n	80078a0 <SCSI_Write10+0x184>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007842:	fb02 f303 	mul.w	r3, r2, r3
 8007846:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	429a      	cmp	r2, r3
 8007852:	d00a      	beq.n	800786a <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800785a:	2320      	movs	r3, #32
 800785c:	2205      	movs	r2, #5
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f7ff fd4f 	bl	8007302 <SCSI_SenseCode>
      return -1;
 8007864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007868:	e01a      	b.n	80078a0 <SCSI_Write10+0x184>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007870:	bf28      	it	cs
 8007872:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007876:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	2201      	movs	r2, #1
 800787c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 800787e:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <SCSI_Write10+0x18c>)
 8007880:	7819      	ldrb	r1, [r3, #0]
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f103 0210 	add.w	r2, r3, #16
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f001 fe79 	bl	8009582 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007890:	2300      	movs	r3, #0
 8007892:	e005      	b.n	80078a0 <SCSI_Write10+0x184>
    return SCSI_ProcessWrite(pdev, lun);
 8007894:	7afb      	ldrb	r3, [r7, #11]
 8007896:	4619      	mov	r1, r3
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 f9bd 	bl	8007c18 <SCSI_ProcessWrite>
 800789e:	4603      	mov	r3, r0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	200001bb 	.word	0x200001bb

080078ac <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	460b      	mov	r3, r1
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80078c0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d102      	bne.n	80078ce <SCSI_Write12+0x22>
  {
    return -1;
 80078c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078cc:	e0c0      	b.n	8007a50 <SCSI_Write12+0x1a4>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	7a1b      	ldrb	r3, [r3, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f040 80b6 	bne.w	8007a44 <SCSI_Write12+0x198>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80078e8:	2320      	movs	r3, #32
 80078ea:	2205      	movs	r2, #5
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f7ff fd08 	bl	8007302 <SCSI_SenseCode>
      return -1;
 80078f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078f6:	e0ab      	b.n	8007a50 <SCSI_Write12+0x1a4>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80078fe:	b25b      	sxtb	r3, r3
 8007900:	2b00      	cmp	r3, #0
 8007902:	da0a      	bge.n	800791a <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800790a:	2320      	movs	r3, #32
 800790c:	2205      	movs	r2, #5
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f7ff fcf7 	bl	8007302 <SCSI_SenseCode>
      return -1;
 8007914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007918:	e09a      	b.n	8007a50 <SCSI_Write12+0x1a4>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsReady(lun) != 0)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	7afa      	ldrb	r2, [r7, #11]
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00b      	beq.n	8007946 <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800792e:	7af9      	ldrb	r1, [r7, #11]
 8007930:	233a      	movs	r3, #58	; 0x3a
 8007932:	2202      	movs	r2, #2
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7ff fce4 	bl	8007302 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2205      	movs	r2, #5
 800793e:	721a      	strb	r2, [r3, #8]
      return -1;
 8007940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007944:	e084      	b.n	8007a50 <SCSI_Write12+0x1a4>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->IsWriteProtected(lun) != 0)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	7afa      	ldrb	r2, [r7, #11]
 8007950:	4610      	mov	r0, r2
 8007952:	4798      	blx	r3
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00b      	beq.n	8007972 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800795a:	7af9      	ldrb	r1, [r7, #11]
 800795c:	2327      	movs	r3, #39	; 0x27
 800795e:	2202      	movs	r2, #2
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f7ff fcce 	bl	8007302 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2205      	movs	r2, #5
 800796a:	721a      	strb	r2, [r3, #8]
      return -1;
 800796c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007970:	e06e      	b.n	8007a50 <SCSI_Write12+0x1a4>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3302      	adds	r3, #2
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	3303      	adds	r3, #3
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007982:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3304      	adds	r3, #4
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800798c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	3205      	adds	r2, #5
 8007992:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007994:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3306      	adds	r3, #6
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3307      	adds	r3, #7
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80079ac:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3308      	adds	r3, #8
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80079b6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	3209      	adds	r2, #9
 80079bc:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80079be:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80079d2:	7af9      	ldrb	r1, [r7, #11]
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 f87a 	bl	8007ace <SCSI_CheckAddressRange>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	da02      	bge.n	80079e6 <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80079e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079e4:	e034      	b.n	8007a50 <SCSI_Write12+0x1a4>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80079f2:	fb02 f303 	mul.w	r3, r2, r3
 80079f6:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d00a      	beq.n	8007a1a <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007a0a:	2320      	movs	r3, #32
 8007a0c:	2205      	movs	r2, #5
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f7ff fc77 	bl	8007302 <SCSI_SenseCode>
      return -1;
 8007a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a18:	e01a      	b.n	8007a50 <SCSI_Write12+0x1a4>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a20:	bf28      	it	cs
 8007a22:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007a26:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 8007a2e:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <SCSI_Write12+0x1ac>)
 8007a30:	7819      	ldrb	r1, [r3, #0]
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f103 0210 	add.w	r2, r3, #16
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f001 fda1 	bl	8009582 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007a40:	2300      	movs	r3, #0
 8007a42:	e005      	b.n	8007a50 <SCSI_Write12+0x1a4>
    return SCSI_ProcessWrite(pdev, lun);
 8007a44:	7afb      	ldrb	r3, [r7, #11]
 8007a46:	4619      	mov	r1, r3
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 f8e5 	bl	8007c18 <SCSI_ProcessWrite>
 8007a4e:	4603      	mov	r3, r0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	200001bb 	.word	0x200001bb

08007a5c <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	460b      	mov	r3, r1
 8007a66:	607a      	str	r2, [r7, #4]
 8007a68:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007a70:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d102      	bne.n	8007a7e <SCSI_Verify10+0x22>
  {
    return -1;
 8007a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a7c:	e023      	b.n	8007ac6 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3301      	adds	r3, #1
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d008      	beq.n	8007a9e <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007a8c:	7af9      	ldrb	r1, [r7, #11]
 8007a8e:	2324      	movs	r3, #36	; 0x24
 8007a90:	2205      	movs	r2, #5
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f7ff fc35 	bl	8007302 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a9c:	e013      	b.n	8007ac6 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007aaa:	7af9      	ldrb	r1, [r7, #11]
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 f80e 	bl	8007ace <SCSI_CheckAddressRange>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	da02      	bge.n	8007abe <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8007ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007abc:	e003      	b.n	8007ac6 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	60da      	str	r2, [r3, #12]

  return 0;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b086      	sub	sp, #24
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	607a      	str	r2, [r7, #4]
 8007ad8:	603b      	str	r3, [r7, #0]
 8007ada:	460b      	mov	r3, r1
 8007adc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007ae4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d102      	bne.n	8007af2 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8007aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007af0:	e011      	b.n	8007b16 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	441a      	add	r2, r3
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d908      	bls.n	8007b14 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007b02:	7af9      	ldrb	r1, [r7, #11]
 8007b04:	2321      	movs	r3, #33	; 0x21
 8007b06:	2205      	movs	r2, #5
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f7ff fbfa 	bl	8007302 <SCSI_SenseCode>
    return -1;
 8007b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b12:	e000      	b.n	8007b16 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007b20:	b590      	push	{r4, r7, lr}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007b32:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007b40:	fb02 f303 	mul.w	r3, r2, r3
 8007b44:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d102      	bne.n	8007b52 <SCSI_ProcessRead+0x32>
  {
    return -1;
 8007b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b50:	e05c      	b.n	8007c0c <SCSI_ProcessRead+0xec>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b58:	bf28      	it	cs
 8007b5a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007b5e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Read(lun, hmsc->bot_data,
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007b66:	691c      	ldr	r4, [r3, #16]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f103 0110 	add.w	r1, r3, #16
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Read(lun, hmsc->bot_data,
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	78f8      	ldrb	r0, [r7, #3]
 8007b86:	47a0      	blx	r4
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	da08      	bge.n	8007ba0 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007b8e:	78f9      	ldrb	r1, [r7, #3]
 8007b90:	2311      	movs	r3, #17
 8007b92:	2204      	movs	r2, #4
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7ff fbb4 	bl	8007302 <SCSI_SenseCode>
    return -1;
 8007b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b9e:	e035      	b.n	8007c0c <SCSI_ProcessRead+0xec>
  }

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, hmsc->bot_data, len);
 8007ba0:	4b1c      	ldr	r3, [pc, #112]	; (8007c14 <SCSI_ProcessRead+0xf4>)
 8007ba2:	7819      	ldrb	r1, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f103 0210 	add.w	r2, r3, #16
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f001 fcc7 	bl	8009540 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bc6:	441a      	add	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007bda:	4619      	mov	r1, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8007be2:	1ad2      	subs	r2, r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	1ad2      	subs	r2, r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d102      	bne.n	8007c0a <SCSI_ProcessRead+0xea>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2203      	movs	r2, #3
 8007c08:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd90      	pop	{r4, r7, pc}
 8007c14:	200001ba 	.word	0x200001ba

08007c18 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007c18:	b590      	push	{r4, r7, lr}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData_MSC;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007c2a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007c38:	fb02 f303 	mul.w	r3, r2, r3
 8007c3c:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d102      	bne.n	8007c4a <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8007c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c48:	e06c      	b.n	8007d24 <SCSI_ProcessWrite+0x10c>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c50:	bf28      	it	cs
 8007c52:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007c56:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Write(lun, hmsc->bot_data,
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007c5e:	695c      	ldr	r4, [r3, #20]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f103 0110 	add.w	r1, r3, #16
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007c72:	4618      	mov	r0, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData_MSC)->Write(lun, hmsc->bot_data,
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	78f8      	ldrb	r0, [r7, #3]
 8007c7e:	47a0      	blx	r4
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	da08      	bge.n	8007c98 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007c86:	78f9      	ldrb	r1, [r7, #3]
 8007c88:	2303      	movs	r3, #3
 8007c8a:	2204      	movs	r2, #4
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f7ff fb38 	bl	8007302 <SCSI_SenseCode>
    return -1;
 8007c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c96:	e045      	b.n	8007d24 <SCSI_ProcessWrite+0x10c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cac:	441a      	add	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cc8:	1ad2      	subs	r2, r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	1ad2      	subs	r2, r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d104      	bne.n	8007cf4 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007cea:	2100      	movs	r1, #0
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7fe fdb3 	bl	8006858 <MSC_BOT_SendCSW>
 8007cf2:	e016      	b.n	8007d22 <SCSI_ProcessWrite+0x10a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007d00:	fb02 f303 	mul.w	r3, r2, r3
 8007d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d08:	bf28      	it	cs
 8007d0a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007d0e:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 8007d10:	4b06      	ldr	r3, [pc, #24]	; (8007d2c <SCSI_ProcessWrite+0x114>)
 8007d12:	7819      	ldrb	r1, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f103 0210 	add.w	r2, r3, #16
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 fc30 	bl	8009582 <USBD_LL_PrepareReceive>
  }

  return 0;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd90      	pop	{r4, r7, pc}
 8007d2c:	200001bb 	.word	0x200001bb

08007d30 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8007d3e:	88fb      	ldrh	r3, [r7, #6]
 8007d40:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d102      	bne.n	8007d4e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8007d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d4c:	e013      	b.n	8007d76 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8007d4e:	8afa      	ldrh	r2, [r7, #22]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8007d54:	e00b      	b.n	8007d6e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8007d56:	8afb      	ldrh	r3, [r7, #22]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8007d5c:	8afb      	ldrh	r3, [r7, #22]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	441a      	add	r2, r3
 8007d62:	8afb      	ldrh	r3, [r7, #22]
 8007d64:	7811      	ldrb	r1, [r2, #0]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	4413      	add	r3, r2
 8007d6a:	460a      	mov	r2, r1
 8007d6c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8007d6e:	8afb      	ldrh	r3, [r7, #22]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1f0      	bne.n	8007d56 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	371c      	adds	r7, #28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b086      	sub	sp, #24
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	60f8      	str	r0, [r7, #12]
 8007d8a:	60b9      	str	r1, [r7, #8]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e01b      	b.n	8007dd2 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pConfDesc = NULL;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	79fa      	ldrb	r2, [r7, #7]
 8007dc4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f001 fa54 	bl	8009274 <USBD_LL_Init>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e02d      	b.n	8007e4e <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	7c1b      	ldrb	r3, [r3, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d112      	bne.n	8007e28 <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d01e      	beq.n	8007e4c <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e16:	f107 020e 	add.w	r2, r7, #14
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	4798      	blx	r3
 8007e1e:	4602      	mov	r2, r0
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 8007e26:	e011      	b.n	8007e4c <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00b      	beq.n	8007e4c <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3c:	f107 020e 	add.w	r2, r7, #14
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
 8007e44:	4602      	mov	r2, r0
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
  }

  return USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b082      	sub	sp, #8
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f001 fa66 	bl	8009330 <USBD_LL_Start>
 8007e64:	4603      	mov	r3, r0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007e90:	2303      	movs	r3, #3
 8007e92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d009      	beq.n	8007eb2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	78fa      	ldrb	r2, [r7, #3]
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	4798      	blx	r3
 8007eae:	4603      	mov	r3, r0
 8007eb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d007      	beq.n	8007ee2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	78fa      	ldrb	r2, [r7, #3]
 8007edc:	4611      	mov	r1, r2
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	4798      	blx	r3
  }

  return USBD_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 ff9c 	bl	8008e3c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007f12:	461a      	mov	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f20:	f003 031f 	and.w	r3, r3, #31
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d01a      	beq.n	8007f5e <USBD_LL_SetupStage+0x72>
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d822      	bhi.n	8007f72 <USBD_LL_SetupStage+0x86>
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <USBD_LL_SetupStage+0x4a>
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d00a      	beq.n	8007f4a <USBD_LL_SetupStage+0x5e>
 8007f34:	e01d      	b.n	8007f72 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fa5c 	bl	80083fc <USBD_StdDevReq>
 8007f44:	4603      	mov	r3, r0
 8007f46:	73fb      	strb	r3, [r7, #15]
      break;
 8007f48:	e020      	b.n	8007f8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fac0 	bl	80084d8 <USBD_StdItfReq>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f5c:	e016      	b.n	8007f8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 faff 	bl	800856a <USBD_StdEPReq>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f70:	e00c      	b.n	8007f8c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 fa54 	bl	800942e <USBD_LL_StallEP>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73fb      	strb	r3, [r7, #15]
      break;
 8007f8a:	bf00      	nop
  }

  return ret;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b086      	sub	sp, #24
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	60f8      	str	r0, [r7, #12]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	607a      	str	r2, [r7, #4]
 8007fa2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007fa4:	7afb      	ldrb	r3, [r7, #11]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d138      	bne.n	800801c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007fb0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fb8:	2b03      	cmp	r3, #3
 8007fba:	d14a      	bne.n	8008052 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d913      	bls.n	8007ff0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	1ad2      	subs	r2, r2, r3
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	68da      	ldr	r2, [r3, #12]
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	bf28      	it	cs
 8007fe2:	4613      	movcs	r3, r2
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f001 f81b 	bl	8009024 <USBD_CtlContinueRx>
 8007fee:	e030      	b.n	8008052 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d10b      	bne.n	8008014 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f001 f816 	bl	8009046 <USBD_CtlSendStatus>
 800801a:	e01a      	b.n	8008052 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b03      	cmp	r3, #3
 8008026:	d114      	bne.n	8008052 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00e      	beq.n	8008052 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	7afa      	ldrb	r2, [r7, #11]
 800803e:	4611      	mov	r1, r2
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	4798      	blx	r3
 8008044:	4603      	mov	r3, r0
 8008046:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008048:	7dfb      	ldrb	r3, [r7, #23]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	e000      	b.n	8008054 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	460b      	mov	r3, r1
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800806a:	7afb      	ldrb	r3, [r7, #11]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d16b      	bne.n	8008148 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3314      	adds	r3, #20
 8008074:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800807c:	2b02      	cmp	r3, #2
 800807e:	d156      	bne.n	800812e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	689a      	ldr	r2, [r3, #8]
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	429a      	cmp	r2, r3
 800808a:	d914      	bls.n	80080b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	1ad2      	subs	r2, r2, r3
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	461a      	mov	r2, r3
 80080a0:	6879      	ldr	r1, [r7, #4]
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f000 ff90 	bl	8008fc8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080a8:	2300      	movs	r3, #0
 80080aa:	2200      	movs	r2, #0
 80080ac:	2100      	movs	r1, #0
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f001 fa67 	bl	8009582 <USBD_LL_PrepareReceive>
 80080b4:	e03b      	b.n	800812e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	68da      	ldr	r2, [r3, #12]
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d11c      	bne.n	80080fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d316      	bcc.n	80080fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80080d8:	429a      	cmp	r2, r3
 80080da:	d20f      	bcs.n	80080fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080dc:	2200      	movs	r2, #0
 80080de:	2100      	movs	r1, #0
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 ff71 	bl	8008fc8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080ee:	2300      	movs	r3, #0
 80080f0:	2200      	movs	r2, #0
 80080f2:	2100      	movs	r1, #0
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f001 fa44 	bl	8009582 <USBD_LL_PrepareReceive>
 80080fa:	e018      	b.n	800812e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b03      	cmp	r3, #3
 8008106:	d10b      	bne.n	8008120 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d005      	beq.n	8008120 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008120:	2180      	movs	r1, #128	; 0x80
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f001 f983 	bl	800942e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 ff9f 	bl	800906c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008134:	2b01      	cmp	r3, #1
 8008136:	d122      	bne.n	800817e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f7ff fe98 	bl	8007e6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008146:	e01a      	b.n	800817e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b03      	cmp	r3, #3
 8008152:	d114      	bne.n	800817e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00e      	beq.n	800817e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	7afa      	ldrb	r2, [r7, #11]
 800816a:	4611      	mov	r1, r2
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	4798      	blx	r3
 8008170:	4603      	mov	r3, r0
 8008172:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800817a:	7dfb      	ldrb	r3, [r7, #23]
 800817c:	e000      	b.n	8008180 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3718      	adds	r7, #24
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e02a      	b.n	8008212 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d009      	beq.n	80081dc <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	6852      	ldr	r2, [r2, #4]
 80081d4:	b2d2      	uxtb	r2, r2
 80081d6:	4611      	mov	r1, r2
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081dc:	2340      	movs	r3, #64	; 0x40
 80081de:	2200      	movs	r2, #0
 80081e0:	2100      	movs	r1, #0
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f001 f8bf 	bl	8009366 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2240      	movs	r2, #64	; 0x40
 80081f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081f8:	2340      	movs	r3, #64	; 0x40
 80081fa:	2200      	movs	r2, #0
 80081fc:	2180      	movs	r1, #128	; 0x80
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f001 f8b1 	bl	8009366 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2240      	movs	r2, #64	; 0x40
 800820e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800821a:	b480      	push	{r7}
 800821c:	b083      	sub	sp, #12
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	460b      	mov	r3, r1
 8008224:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	78fa      	ldrb	r2, [r7, #3]
 800822a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008248:	b2da      	uxtb	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2204      	movs	r2, #4
 8008254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b04      	cmp	r3, #4
 8008278:	d106      	bne.n	8008288 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008280:	b2da      	uxtb	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b082      	sub	sp, #8
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e012      	b.n	80082d2 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d10b      	bne.n	80082d0 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d005      	beq.n	80082d0 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ca:	69db      	ldr	r3, [r3, #28]
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b082      	sub	sp, #8
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	460b      	mov	r3, r1
 80082e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e014      	b.n	800831e <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d10d      	bne.n	800831c <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008306:	6a1b      	ldr	r3, [r3, #32]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d007      	beq.n	800831c <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	78fa      	ldrb	r2, [r7, #3]
 8008316:	4611      	mov	r1, r2
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	460b      	mov	r3, r1
 8008330:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008338:	2b00      	cmp	r3, #0
 800833a:	d101      	bne.n	8008340 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800833c:	2303      	movs	r3, #3
 800833e:	e014      	b.n	800836a <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008346:	b2db      	uxtb	r3, r3
 8008348:	2b03      	cmp	r3, #3
 800834a:	d10d      	bne.n	8008368 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	2b00      	cmp	r3, #0
 8008356:	d007      	beq.n	8008368 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008360:	78fa      	ldrb	r2, [r7, #3]
 8008362:	4611      	mov	r1, r2
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008372:	b480      	push	{r7}
 8008374:	b083      	sub	sp, #12
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d009      	beq.n	80083b6 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	6852      	ldr	r2, [r2, #4]
 80083ae:	b2d2      	uxtb	r2, r2
 80083b0:	4611      	mov	r1, r2
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	4798      	blx	r3
  }

  return USBD_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	3301      	adds	r3, #1
 80083d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083de:	8a3b      	ldrh	r3, [r7, #16]
 80083e0:	021b      	lsls	r3, r3, #8
 80083e2:	b21a      	sxth	r2, r3
 80083e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	b21b      	sxth	r3, r3
 80083ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083ee:	89fb      	ldrh	r3, [r7, #14]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	371c      	adds	r7, #28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008412:	2b40      	cmp	r3, #64	; 0x40
 8008414:	d005      	beq.n	8008422 <USBD_StdDevReq+0x26>
 8008416:	2b40      	cmp	r3, #64	; 0x40
 8008418:	d853      	bhi.n	80084c2 <USBD_StdDevReq+0xc6>
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00b      	beq.n	8008436 <USBD_StdDevReq+0x3a>
 800841e:	2b20      	cmp	r3, #32
 8008420:	d14f      	bne.n	80084c2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	4798      	blx	r3
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]
      break;
 8008434:	e04a      	b.n	80084cc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	785b      	ldrb	r3, [r3, #1]
 800843a:	2b09      	cmp	r3, #9
 800843c:	d83b      	bhi.n	80084b6 <USBD_StdDevReq+0xba>
 800843e:	a201      	add	r2, pc, #4	; (adr r2, 8008444 <USBD_StdDevReq+0x48>)
 8008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008444:	08008499 	.word	0x08008499
 8008448:	080084ad 	.word	0x080084ad
 800844c:	080084b7 	.word	0x080084b7
 8008450:	080084a3 	.word	0x080084a3
 8008454:	080084b7 	.word	0x080084b7
 8008458:	08008477 	.word	0x08008477
 800845c:	0800846d 	.word	0x0800846d
 8008460:	080084b7 	.word	0x080084b7
 8008464:	0800848f 	.word	0x0800848f
 8008468:	08008481 	.word	0x08008481
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f9de 	bl	8008830 <USBD_GetDescriptor>
          break;
 8008474:	e024      	b.n	80084c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fb55 	bl	8008b28 <USBD_SetAddress>
          break;
 800847e:	e01f      	b.n	80084c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fb94 	bl	8008bb0 <USBD_SetConfig>
 8008488:	4603      	mov	r3, r0
 800848a:	73fb      	strb	r3, [r7, #15]
          break;
 800848c:	e018      	b.n	80084c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fc33 	bl	8008cfc <USBD_GetConfig>
          break;
 8008496:	e013      	b.n	80084c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fc64 	bl	8008d68 <USBD_GetStatus>
          break;
 80084a0:	e00e      	b.n	80084c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fc93 	bl	8008dd0 <USBD_SetFeature>
          break;
 80084aa:	e009      	b.n	80084c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fca2 	bl	8008df8 <USBD_ClrFeature>
          break;
 80084b4:	e004      	b.n	80084c0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fcf9 	bl	8008eb0 <USBD_CtlError>
          break;
 80084be:	bf00      	nop
      }
      break;
 80084c0:	e004      	b.n	80084cc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fcf3 	bl	8008eb0 <USBD_CtlError>
      break;
 80084ca:	bf00      	nop
  }

  return ret;
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop

080084d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084ee:	2b40      	cmp	r3, #64	; 0x40
 80084f0:	d005      	beq.n	80084fe <USBD_StdItfReq+0x26>
 80084f2:	2b40      	cmp	r3, #64	; 0x40
 80084f4:	d82f      	bhi.n	8008556 <USBD_StdItfReq+0x7e>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <USBD_StdItfReq+0x26>
 80084fa:	2b20      	cmp	r3, #32
 80084fc:	d12b      	bne.n	8008556 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008504:	b2db      	uxtb	r3, r3
 8008506:	3b01      	subs	r3, #1
 8008508:	2b02      	cmp	r3, #2
 800850a:	d81d      	bhi.n	8008548 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	889b      	ldrh	r3, [r3, #4]
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b0f      	cmp	r3, #15
 8008514:	d813      	bhi.n	800853e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	4798      	blx	r3
 8008524:	4603      	mov	r3, r0
 8008526:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	88db      	ldrh	r3, [r3, #6]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d110      	bne.n	8008552 <USBD_StdItfReq+0x7a>
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10d      	bne.n	8008552 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fd85 	bl	8009046 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800853c:	e009      	b.n	8008552 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fcb5 	bl	8008eb0 <USBD_CtlError>
          break;
 8008546:	e004      	b.n	8008552 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fcb0 	bl	8008eb0 <USBD_CtlError>
          break;
 8008550:	e000      	b.n	8008554 <USBD_StdItfReq+0x7c>
          break;
 8008552:	bf00      	nop
      }
      break;
 8008554:	e004      	b.n	8008560 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fca9 	bl	8008eb0 <USBD_CtlError>
      break;
 800855e:	bf00      	nop
  }

  return ret;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	889b      	ldrh	r3, [r3, #4]
 800857c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008586:	2b40      	cmp	r3, #64	; 0x40
 8008588:	d007      	beq.n	800859a <USBD_StdEPReq+0x30>
 800858a:	2b40      	cmp	r3, #64	; 0x40
 800858c:	f200 8145 	bhi.w	800881a <USBD_StdEPReq+0x2b0>
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00c      	beq.n	80085ae <USBD_StdEPReq+0x44>
 8008594:	2b20      	cmp	r3, #32
 8008596:	f040 8140 	bne.w	800881a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	4798      	blx	r3
 80085a8:	4603      	mov	r3, r0
 80085aa:	73fb      	strb	r3, [r7, #15]
      break;
 80085ac:	e13a      	b.n	8008824 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	785b      	ldrb	r3, [r3, #1]
 80085b2:	2b03      	cmp	r3, #3
 80085b4:	d007      	beq.n	80085c6 <USBD_StdEPReq+0x5c>
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	f300 8129 	bgt.w	800880e <USBD_StdEPReq+0x2a4>
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d07f      	beq.n	80086c0 <USBD_StdEPReq+0x156>
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d03c      	beq.n	800863e <USBD_StdEPReq+0xd4>
 80085c4:	e123      	b.n	800880e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d002      	beq.n	80085d8 <USBD_StdEPReq+0x6e>
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d016      	beq.n	8008604 <USBD_StdEPReq+0x9a>
 80085d6:	e02c      	b.n	8008632 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00d      	beq.n	80085fa <USBD_StdEPReq+0x90>
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	2b80      	cmp	r3, #128	; 0x80
 80085e2:	d00a      	beq.n	80085fa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 ff20 	bl	800942e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085ee:	2180      	movs	r1, #128	; 0x80
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 ff1c 	bl	800942e <USBD_LL_StallEP>
 80085f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085f8:	e020      	b.n	800863c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fc57 	bl	8008eb0 <USBD_CtlError>
              break;
 8008602:	e01b      	b.n	800863c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	885b      	ldrh	r3, [r3, #2]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10e      	bne.n	800862a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00b      	beq.n	800862a <USBD_StdEPReq+0xc0>
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	2b80      	cmp	r3, #128	; 0x80
 8008616:	d008      	beq.n	800862a <USBD_StdEPReq+0xc0>
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	88db      	ldrh	r3, [r3, #6]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d104      	bne.n	800862a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 ff02 	bl	800942e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fd0b 	bl	8009046 <USBD_CtlSendStatus>

              break;
 8008630:	e004      	b.n	800863c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fc3b 	bl	8008eb0 <USBD_CtlError>
              break;
 800863a:	bf00      	nop
          }
          break;
 800863c:	e0ec      	b.n	8008818 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b02      	cmp	r3, #2
 8008648:	d002      	beq.n	8008650 <USBD_StdEPReq+0xe6>
 800864a:	2b03      	cmp	r3, #3
 800864c:	d016      	beq.n	800867c <USBD_StdEPReq+0x112>
 800864e:	e030      	b.n	80086b2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00d      	beq.n	8008672 <USBD_StdEPReq+0x108>
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	2b80      	cmp	r3, #128	; 0x80
 800865a:	d00a      	beq.n	8008672 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fee4 	bl	800942e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008666:	2180      	movs	r1, #128	; 0x80
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fee0 	bl	800942e <USBD_LL_StallEP>
 800866e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008670:	e025      	b.n	80086be <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fc1b 	bl	8008eb0 <USBD_CtlError>
              break;
 800867a:	e020      	b.n	80086be <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	885b      	ldrh	r3, [r3, #2]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d11b      	bne.n	80086bc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800868a:	2b00      	cmp	r3, #0
 800868c:	d004      	beq.n	8008698 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 feea 	bl	800946c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fcd4 	bl	8009046 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	6839      	ldr	r1, [r7, #0]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	4798      	blx	r3
 80086ac:	4603      	mov	r3, r0
 80086ae:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80086b0:	e004      	b.n	80086bc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fbfb 	bl	8008eb0 <USBD_CtlError>
              break;
 80086ba:	e000      	b.n	80086be <USBD_StdEPReq+0x154>
              break;
 80086bc:	bf00      	nop
          }
          break;
 80086be:	e0ab      	b.n	8008818 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d002      	beq.n	80086d2 <USBD_StdEPReq+0x168>
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d032      	beq.n	8008736 <USBD_StdEPReq+0x1cc>
 80086d0:	e097      	b.n	8008802 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d007      	beq.n	80086e8 <USBD_StdEPReq+0x17e>
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	2b80      	cmp	r3, #128	; 0x80
 80086dc:	d004      	beq.n	80086e8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fbe5 	bl	8008eb0 <USBD_CtlError>
                break;
 80086e6:	e091      	b.n	800880c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	da0b      	bge.n	8008708 <USBD_StdEPReq+0x19e>
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	3310      	adds	r3, #16
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	4413      	add	r3, r2
 8008704:	3304      	adds	r3, #4
 8008706:	e00b      	b.n	8008720 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	4413      	add	r3, r2
 800871e:	3304      	adds	r3, #4
 8008720:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	2200      	movs	r2, #0
 8008726:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2202      	movs	r2, #2
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fc2f 	bl	8008f92 <USBD_CtlSendData>
              break;
 8008734:	e06a      	b.n	800880c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800873a:	2b00      	cmp	r3, #0
 800873c:	da11      	bge.n	8008762 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	f003 020f 	and.w	r2, r3, #15
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	4613      	mov	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	440b      	add	r3, r1
 8008750:	3324      	adds	r3, #36	; 0x24
 8008752:	881b      	ldrh	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d117      	bne.n	8008788 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fba8 	bl	8008eb0 <USBD_CtlError>
                  break;
 8008760:	e054      	b.n	800880c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	f003 020f 	and.w	r2, r3, #15
 8008768:	6879      	ldr	r1, [r7, #4]
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	440b      	add	r3, r1
 8008774:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d104      	bne.n	8008788 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fb95 	bl	8008eb0 <USBD_CtlError>
                  break;
 8008786:	e041      	b.n	800880c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800878c:	2b00      	cmp	r3, #0
 800878e:	da0b      	bge.n	80087a8 <USBD_StdEPReq+0x23e>
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008796:	4613      	mov	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	3310      	adds	r3, #16
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	4413      	add	r3, r2
 80087a4:	3304      	adds	r3, #4
 80087a6:	e00b      	b.n	80087c0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
 80087aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	4413      	add	r3, r2
 80087be:	3304      	adds	r3, #4
 80087c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087c2:	7bbb      	ldrb	r3, [r7, #14]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <USBD_StdEPReq+0x264>
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
 80087ca:	2b80      	cmp	r3, #128	; 0x80
 80087cc:	d103      	bne.n	80087d6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	e00e      	b.n	80087f4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fe65 	bl	80094aa <USBD_LL_IsStallEP>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2201      	movs	r2, #1
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	e002      	b.n	80087f4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2200      	movs	r2, #0
 80087f2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2202      	movs	r2, #2
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fbc9 	bl	8008f92 <USBD_CtlSendData>
              break;
 8008800:	e004      	b.n	800880c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fb53 	bl	8008eb0 <USBD_CtlError>
              break;
 800880a:	bf00      	nop
          }
          break;
 800880c:	e004      	b.n	8008818 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fb4d 	bl	8008eb0 <USBD_CtlError>
          break;
 8008816:	bf00      	nop
      }
      break;
 8008818:	e004      	b.n	8008824 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fb47 	bl	8008eb0 <USBD_CtlError>
      break;
 8008822:	bf00      	nop
  }

  return ret;
 8008824:	7bfb      	ldrb	r3, [r7, #15]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
	...

08008830 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800883e:	2300      	movs	r3, #0
 8008840:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	b29b      	uxth	r3, r3
 800884e:	3b01      	subs	r3, #1
 8008850:	2b06      	cmp	r3, #6
 8008852:	f200 813b 	bhi.w	8008acc <USBD_GetDescriptor+0x29c>
 8008856:	a201      	add	r2, pc, #4	; (adr r2, 800885c <USBD_GetDescriptor+0x2c>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	08008879 	.word	0x08008879
 8008860:	08008891 	.word	0x08008891
 8008864:	080088d1 	.word	0x080088d1
 8008868:	08008acd 	.word	0x08008acd
 800886c:	08008acd 	.word	0x08008acd
 8008870:	08008a6d 	.word	0x08008a6d
 8008874:	08008a99 	.word	0x08008a99
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	7c12      	ldrb	r2, [r2, #16]
 8008884:	f107 0108 	add.w	r1, r7, #8
 8008888:	4610      	mov	r0, r2
 800888a:	4798      	blx	r3
 800888c:	60f8      	str	r0, [r7, #12]
      break;
 800888e:	e125      	b.n	8008adc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	7c1b      	ldrb	r3, [r3, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10d      	bne.n	80088b4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a0:	f107 0208 	add.w	r2, r7, #8
 80088a4:	4610      	mov	r0, r2
 80088a6:	4798      	blx	r3
 80088a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3301      	adds	r3, #1
 80088ae:	2202      	movs	r2, #2
 80088b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088b2:	e113      	b.n	8008adc <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088bc:	f107 0208 	add.w	r2, r7, #8
 80088c0:	4610      	mov	r0, r2
 80088c2:	4798      	blx	r3
 80088c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3301      	adds	r3, #1
 80088ca:	2202      	movs	r2, #2
 80088cc:	701a      	strb	r2, [r3, #0]
      break;
 80088ce:	e105      	b.n	8008adc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	885b      	ldrh	r3, [r3, #2]
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b05      	cmp	r3, #5
 80088d8:	f200 80ac 	bhi.w	8008a34 <USBD_GetDescriptor+0x204>
 80088dc:	a201      	add	r2, pc, #4	; (adr r2, 80088e4 <USBD_GetDescriptor+0xb4>)
 80088de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e2:	bf00      	nop
 80088e4:	080088fd 	.word	0x080088fd
 80088e8:	08008931 	.word	0x08008931
 80088ec:	08008965 	.word	0x08008965
 80088f0:	08008999 	.word	0x08008999
 80088f4:	080089cd 	.word	0x080089cd
 80088f8:	08008a01 	.word	0x08008a01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00b      	beq.n	8008920 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	7c12      	ldrb	r2, [r2, #16]
 8008914:	f107 0108 	add.w	r1, r7, #8
 8008918:	4610      	mov	r0, r2
 800891a:	4798      	blx	r3
 800891c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800891e:	e0a4      	b.n	8008a6a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fac4 	bl	8008eb0 <USBD_CtlError>
            err++;
 8008928:	7afb      	ldrb	r3, [r7, #11]
 800892a:	3301      	adds	r3, #1
 800892c:	72fb      	strb	r3, [r7, #11]
          break;
 800892e:	e09c      	b.n	8008a6a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00b      	beq.n	8008954 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	7c12      	ldrb	r2, [r2, #16]
 8008948:	f107 0108 	add.w	r1, r7, #8
 800894c:	4610      	mov	r0, r2
 800894e:	4798      	blx	r3
 8008950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008952:	e08a      	b.n	8008a6a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 faaa 	bl	8008eb0 <USBD_CtlError>
            err++;
 800895c:	7afb      	ldrb	r3, [r7, #11]
 800895e:	3301      	adds	r3, #1
 8008960:	72fb      	strb	r3, [r7, #11]
          break;
 8008962:	e082      	b.n	8008a6a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00b      	beq.n	8008988 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	7c12      	ldrb	r2, [r2, #16]
 800897c:	f107 0108 	add.w	r1, r7, #8
 8008980:	4610      	mov	r0, r2
 8008982:	4798      	blx	r3
 8008984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008986:	e070      	b.n	8008a6a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa90 	bl	8008eb0 <USBD_CtlError>
            err++;
 8008990:	7afb      	ldrb	r3, [r7, #11]
 8008992:	3301      	adds	r3, #1
 8008994:	72fb      	strb	r3, [r7, #11]
          break;
 8008996:	e068      	b.n	8008a6a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	7c12      	ldrb	r2, [r2, #16]
 80089b0:	f107 0108 	add.w	r1, r7, #8
 80089b4:	4610      	mov	r0, r2
 80089b6:	4798      	blx	r3
 80089b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ba:	e056      	b.n	8008a6a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fa76 	bl	8008eb0 <USBD_CtlError>
            err++;
 80089c4:	7afb      	ldrb	r3, [r7, #11]
 80089c6:	3301      	adds	r3, #1
 80089c8:	72fb      	strb	r3, [r7, #11]
          break;
 80089ca:	e04e      	b.n	8008a6a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00b      	beq.n	80089f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089de:	695b      	ldr	r3, [r3, #20]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	7c12      	ldrb	r2, [r2, #16]
 80089e4:	f107 0108 	add.w	r1, r7, #8
 80089e8:	4610      	mov	r0, r2
 80089ea:	4798      	blx	r3
 80089ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ee:	e03c      	b.n	8008a6a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fa5c 	bl	8008eb0 <USBD_CtlError>
            err++;
 80089f8:	7afb      	ldrb	r3, [r7, #11]
 80089fa:	3301      	adds	r3, #1
 80089fc:	72fb      	strb	r3, [r7, #11]
          break;
 80089fe:	e034      	b.n	8008a6a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00b      	beq.n	8008a24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	7c12      	ldrb	r2, [r2, #16]
 8008a18:	f107 0108 	add.w	r1, r7, #8
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	4798      	blx	r3
 8008a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a22:	e022      	b.n	8008a6a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fa42 	bl	8008eb0 <USBD_CtlError>
            err++;
 8008a2c:	7afb      	ldrb	r3, [r7, #11]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	72fb      	strb	r3, [r7, #11]
          break;
 8008a32:	e01a      	b.n	8008a6a <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00c      	beq.n	8008a5a <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	8852      	ldrh	r2, [r2, #2]
 8008a4c:	b2d1      	uxtb	r1, r2
 8008a4e:	f107 0208 	add.w	r2, r7, #8
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	4798      	blx	r3
 8008a56:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8008a58:	e006      	b.n	8008a68 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fa27 	bl	8008eb0 <USBD_CtlError>
            err++;
 8008a62:	7afb      	ldrb	r3, [r7, #11]
 8008a64:	3301      	adds	r3, #1
 8008a66:	72fb      	strb	r3, [r7, #11]
          break;
 8008a68:	bf00      	nop
      }
      break;
 8008a6a:	e037      	b.n	8008adc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	7c1b      	ldrb	r3, [r3, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d109      	bne.n	8008a88 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7c:	f107 0208 	add.w	r2, r7, #8
 8008a80:	4610      	mov	r0, r2
 8008a82:	4798      	blx	r3
 8008a84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a86:	e029      	b.n	8008adc <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fa10 	bl	8008eb0 <USBD_CtlError>
        err++;
 8008a90:	7afb      	ldrb	r3, [r7, #11]
 8008a92:	3301      	adds	r3, #1
 8008a94:	72fb      	strb	r3, [r7, #11]
      break;
 8008a96:	e021      	b.n	8008adc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	7c1b      	ldrb	r3, [r3, #16]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10d      	bne.n	8008abc <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa8:	f107 0208 	add.w	r2, r7, #8
 8008aac:	4610      	mov	r0, r2
 8008aae:	4798      	blx	r3
 8008ab0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	2207      	movs	r2, #7
 8008ab8:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008aba:	e00f      	b.n	8008adc <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f9f6 	bl	8008eb0 <USBD_CtlError>
        err++;
 8008ac4:	7afb      	ldrb	r3, [r7, #11]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	72fb      	strb	r3, [r7, #11]
      break;
 8008aca:	e007      	b.n	8008adc <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f9ee 	bl	8008eb0 <USBD_CtlError>
      err++;
 8008ad4:	7afb      	ldrb	r3, [r7, #11]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	72fb      	strb	r3, [r7, #11]
      break;
 8008ada:	bf00      	nop
  }

  if (err != 0U)
 8008adc:	7afb      	ldrb	r3, [r7, #11]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d11e      	bne.n	8008b20 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	88db      	ldrh	r3, [r3, #6]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d016      	beq.n	8008b18 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 8008aea:	893b      	ldrh	r3, [r7, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00e      	beq.n	8008b0e <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	88da      	ldrh	r2, [r3, #6]
 8008af4:	893b      	ldrh	r3, [r7, #8]
 8008af6:	4293      	cmp	r3, r2
 8008af8:	bf28      	it	cs
 8008afa:	4613      	movcs	r3, r2
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b00:	893b      	ldrh	r3, [r7, #8]
 8008b02:	461a      	mov	r2, r3
 8008b04:	68f9      	ldr	r1, [r7, #12]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fa43 	bl	8008f92 <USBD_CtlSendData>
 8008b0c:	e009      	b.n	8008b22 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f9cd 	bl	8008eb0 <USBD_CtlError>
 8008b16:	e004      	b.n	8008b22 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fa94 	bl	8009046 <USBD_CtlSendStatus>
 8008b1e:	e000      	b.n	8008b22 <USBD_GetDescriptor+0x2f2>
    return;
 8008b20:	bf00      	nop
  }
}
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	889b      	ldrh	r3, [r3, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d131      	bne.n	8008b9e <USBD_SetAddress+0x76>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	88db      	ldrh	r3, [r3, #6]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d12d      	bne.n	8008b9e <USBD_SetAddress+0x76>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	885b      	ldrh	r3, [r3, #2]
 8008b46:	2b7f      	cmp	r3, #127	; 0x7f
 8008b48:	d829      	bhi.n	8008b9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	885b      	ldrh	r3, [r3, #2]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d104      	bne.n	8008b6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f9a3 	bl	8008eb0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6a:	e01d      	b.n	8008ba8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	7bfa      	ldrb	r2, [r7, #15]
 8008b70:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fcc2 	bl	8009502 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fa61 	bl	8009046 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d004      	beq.n	8008b94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2202      	movs	r2, #2
 8008b8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b92:	e009      	b.n	8008ba8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9c:	e004      	b.n	8008ba8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f985 	bl	8008eb0 <USBD_CtlError>
  }
}
 8008ba6:	bf00      	nop
 8008ba8:	bf00      	nop
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	885b      	ldrh	r3, [r3, #2]
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	4b4c      	ldr	r3, [pc, #304]	; (8008cf8 <USBD_SetConfig+0x148>)
 8008bc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bc8:	4b4b      	ldr	r3, [pc, #300]	; (8008cf8 <USBD_SetConfig+0x148>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d905      	bls.n	8008bdc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f96c 	bl	8008eb0 <USBD_CtlError>
    return USBD_FAIL;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e088      	b.n	8008cee <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d002      	beq.n	8008bee <USBD_SetConfig+0x3e>
 8008be8:	2b03      	cmp	r3, #3
 8008bea:	d025      	beq.n	8008c38 <USBD_SetConfig+0x88>
 8008bec:	e071      	b.n	8008cd2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008bee:	4b42      	ldr	r3, [pc, #264]	; (8008cf8 <USBD_SetConfig+0x148>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d01c      	beq.n	8008c30 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008bf6:	4b40      	ldr	r3, [pc, #256]	; (8008cf8 <USBD_SetConfig+0x148>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c00:	4b3d      	ldr	r3, [pc, #244]	; (8008cf8 <USBD_SetConfig+0x148>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff f93c 	bl	8007e84 <USBD_SetClassConfig>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d004      	beq.n	8008c20 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f949 	bl	8008eb0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c1e:	e065      	b.n	8008cec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fa10 	bl	8009046 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2203      	movs	r2, #3
 8008c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c2e:	e05d      	b.n	8008cec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fa08 	bl	8009046 <USBD_CtlSendStatus>
      break;
 8008c36:	e059      	b.n	8008cec <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c38:	4b2f      	ldr	r3, [pc, #188]	; (8008cf8 <USBD_SetConfig+0x148>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d112      	bne.n	8008c66 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c48:	4b2b      	ldr	r3, [pc, #172]	; (8008cf8 <USBD_SetConfig+0x148>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c52:	4b29      	ldr	r3, [pc, #164]	; (8008cf8 <USBD_SetConfig+0x148>)
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7ff f92f 	bl	8007ebc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f9f1 	bl	8009046 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c64:	e042      	b.n	8008cec <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008c66:	4b24      	ldr	r3, [pc, #144]	; (8008cf8 <USBD_SetConfig+0x148>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d02a      	beq.n	8008cca <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7ff f91d 	bl	8007ebc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c82:	4b1d      	ldr	r3, [pc, #116]	; (8008cf8 <USBD_SetConfig+0x148>)
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	461a      	mov	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c8c:	4b1a      	ldr	r3, [pc, #104]	; (8008cf8 <USBD_SetConfig+0x148>)
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	4619      	mov	r1, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff f8f6 	bl	8007e84 <USBD_SetClassConfig>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00f      	beq.n	8008cc2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f903 	bl	8008eb0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7ff f902 	bl	8007ebc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008cc0:	e014      	b.n	8008cec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f9bf 	bl	8009046 <USBD_CtlSendStatus>
      break;
 8008cc8:	e010      	b.n	8008cec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f9bb 	bl	8009046 <USBD_CtlSendStatus>
      break;
 8008cd0:	e00c      	b.n	8008cec <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f8eb 	bl	8008eb0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cda:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <USBD_SetConfig+0x148>)
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7ff f8eb 	bl	8007ebc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cea:	bf00      	nop
  }

  return ret;
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	200092e4 	.word	0x200092e4

08008cfc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	88db      	ldrh	r3, [r3, #6]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d004      	beq.n	8008d18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f8cd 	bl	8008eb0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d16:	e023      	b.n	8008d60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	dc02      	bgt.n	8008d2a <USBD_GetConfig+0x2e>
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	dc03      	bgt.n	8008d30 <USBD_GetConfig+0x34>
 8008d28:	e015      	b.n	8008d56 <USBD_GetConfig+0x5a>
 8008d2a:	2b03      	cmp	r3, #3
 8008d2c:	d00b      	beq.n	8008d46 <USBD_GetConfig+0x4a>
 8008d2e:	e012      	b.n	8008d56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3308      	adds	r3, #8
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f927 	bl	8008f92 <USBD_CtlSendData>
        break;
 8008d44:	e00c      	b.n	8008d60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f91f 	bl	8008f92 <USBD_CtlSendData>
        break;
 8008d54:	e004      	b.n	8008d60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f8a9 	bl	8008eb0 <USBD_CtlError>
        break;
 8008d5e:	bf00      	nop
}
 8008d60:	bf00      	nop
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d81e      	bhi.n	8008dbe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	88db      	ldrh	r3, [r3, #6]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d004      	beq.n	8008d92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f890 	bl	8008eb0 <USBD_CtlError>
        break;
 8008d90:	e01a      	b.n	8008dc8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d005      	beq.n	8008dae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	f043 0202 	orr.w	r2, r3, #2
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	330c      	adds	r3, #12
 8008db2:	2202      	movs	r2, #2
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f8eb 	bl	8008f92 <USBD_CtlSendData>
      break;
 8008dbc:	e004      	b.n	8008dc8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f875 	bl	8008eb0 <USBD_CtlError>
      break;
 8008dc6:	bf00      	nop
  }
}
 8008dc8:	bf00      	nop
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	885b      	ldrh	r3, [r3, #2]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d106      	bne.n	8008df0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f92b 	bl	8009046 <USBD_CtlSendStatus>
  }
}
 8008df0:	bf00      	nop
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d80b      	bhi.n	8008e28 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	885b      	ldrh	r3, [r3, #2]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d10c      	bne.n	8008e32 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f910 	bl	8009046 <USBD_CtlSendStatus>
      }
      break;
 8008e26:	e004      	b.n	8008e32 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f840 	bl	8008eb0 <USBD_CtlError>
      break;
 8008e30:	e000      	b.n	8008e34 <USBD_ClrFeature+0x3c>
      break;
 8008e32:	bf00      	nop
  }
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	781a      	ldrb	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3301      	adds	r3, #1
 8008e56:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	781a      	ldrb	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	3301      	adds	r3, #1
 8008e64:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f7ff faaa 	bl	80083c0 <SWAPBYTE>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	461a      	mov	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3301      	adds	r3, #1
 8008e78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f7ff fa9d 	bl	80083c0 <SWAPBYTE>
 8008e86:	4603      	mov	r3, r0
 8008e88:	461a      	mov	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3301      	adds	r3, #1
 8008e92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	3301      	adds	r3, #1
 8008e98:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f7ff fa90 	bl	80083c0 <SWAPBYTE>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	80da      	strh	r2, [r3, #6]
}
 8008ea8:	bf00      	nop
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eba:	2180      	movs	r1, #128	; 0x80
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 fab6 	bl	800942e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fab2 	bl	800942e <USBD_LL_StallEP>
}
 8008eca:	bf00      	nop
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b086      	sub	sp, #24
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	60f8      	str	r0, [r7, #12]
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d036      	beq.n	8008f56 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008eec:	6938      	ldr	r0, [r7, #16]
 8008eee:	f000 f836 	bl	8008f5e <USBD_GetLen>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	4413      	add	r3, r2
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	7812      	ldrb	r2, [r2, #0]
 8008f0a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f0c:	7dfb      	ldrb	r3, [r7, #23]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f12:	7dfb      	ldrb	r3, [r7, #23]
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	4413      	add	r3, r2
 8008f18:	2203      	movs	r2, #3
 8008f1a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f22:	e013      	b.n	8008f4c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f24:	7dfb      	ldrb	r3, [r7, #23]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	4413      	add	r3, r2
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	7812      	ldrb	r2, [r2, #0]
 8008f2e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	3301      	adds	r3, #1
 8008f34:	613b      	str	r3, [r7, #16]
    idx++;
 8008f36:	7dfb      	ldrb	r3, [r7, #23]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	4413      	add	r3, r2
 8008f42:	2200      	movs	r2, #0
 8008f44:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1e7      	bne.n	8008f24 <USBD_GetString+0x52>
 8008f54:	e000      	b.n	8008f58 <USBD_GetString+0x86>
    return;
 8008f56:	bf00      	nop
  }
}
 8008f58:	3718      	adds	r7, #24
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b085      	sub	sp, #20
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f6e:	e005      	b.n	8008f7c <USBD_GetLen+0x1e>
  {
    len++;
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	3301      	adds	r3, #1
 8008f74:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1f5      	bne.n	8008f70 <USBD_GetLen+0x12>
  }

  return len;
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b084      	sub	sp, #16
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	60f8      	str	r0, [r7, #12]
 8008f9a:	60b9      	str	r1, [r7, #8]
 8008f9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 fac1 	bl	8009540 <USBD_LL_Transmit>

  return USBD_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	2100      	movs	r1, #0
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f000 fab0 	bl	8009540 <USBD_LL_Transmit>

  return USBD_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b084      	sub	sp, #16
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2203      	movs	r2, #3
 8008ffa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	2100      	movs	r1, #0
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 fab4 	bl	8009582 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	2100      	movs	r1, #0
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 faa3 	bl	8009582 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b082      	sub	sp, #8
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2204      	movs	r2, #4
 8009052:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009056:	2300      	movs	r3, #0
 8009058:	2200      	movs	r2, #0
 800905a:	2100      	movs	r1, #0
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fa6f 	bl	8009540 <USBD_LL_Transmit>

  return USBD_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2205      	movs	r2, #5
 8009078:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800907c:	2300      	movs	r3, #0
 800907e:	2200      	movs	r2, #0
 8009080:	2100      	movs	r1, #0
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fa7d 	bl	8009582 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b082      	sub	sp, #8
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80090a6:	4619      	mov	r1, r3
 80090a8:	4610      	mov	r0, r2
 80090aa:	f7fe ff1f 	bl	8007eec <USBD_LL_SetupStage>
}
 80090ae:	bf00      	nop
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	460b      	mov	r3, r1
 80090c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80090c8:	78fa      	ldrb	r2, [r7, #3]
 80090ca:	6879      	ldr	r1, [r7, #4]
 80090cc:	4613      	mov	r3, r2
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	1a9b      	subs	r3, r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	440b      	add	r3, r1
 80090d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	78fb      	ldrb	r3, [r7, #3]
 80090de:	4619      	mov	r1, r3
 80090e0:	f7fe ff59 	bl	8007f96 <USBD_LL_DataOutStage>
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80090fe:	78fa      	ldrb	r2, [r7, #3]
 8009100:	6879      	ldr	r1, [r7, #4]
 8009102:	4613      	mov	r3, r2
 8009104:	00db      	lsls	r3, r3, #3
 8009106:	1a9b      	subs	r3, r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	440b      	add	r3, r1
 800910c:	3348      	adds	r3, #72	; 0x48
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	4619      	mov	r1, r3
 8009114:	f7fe ffa2 	bl	800805c <USBD_LL_DataInStage>
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800912e:	4618      	mov	r0, r3
 8009130:	f7ff f8b1 	bl	8008296 <USBD_LL_SOF>
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009144:	2301      	movs	r3, #1
 8009146:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	2b02      	cmp	r3, #2
 800914e:	d102      	bne.n	8009156 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 8009150:	2301      	movs	r3, #1
 8009152:	73fb      	strb	r3, [r7, #15]
 8009154:	e008      	b.n	8009168 <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d102      	bne.n	8009164 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]
 8009162:	e001      	b.n	8009168 <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 8009164:	f7f7 fb5a 	bl	800081c <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800916e:	7bfa      	ldrb	r2, [r7, #15]
 8009170:	4611      	mov	r1, r2
 8009172:	4618      	mov	r0, r3
 8009174:	f7ff f851 	bl	800821a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800917e:	4618      	mov	r0, r3
 8009180:	f7ff f802 	bl	8008188 <USBD_LL_Reset>
}
 8009184:	bf00      	nop
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff f84d 	bl	800823a <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	6812      	ldr	r2, [r2, #0]
 80091ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091b2:	f043 0301 	orr.w	r3, r3, #1
 80091b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d005      	beq.n	80091cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091c0:	4b04      	ldr	r3, [pc, #16]	; (80091d4 <HAL_PCD_SuspendCallback+0x48>)
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	4a03      	ldr	r2, [pc, #12]	; (80091d4 <HAL_PCD_SuspendCallback+0x48>)
 80091c6:	f043 0306 	orr.w	r3, r3, #6
 80091ca:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 80091cc:	bf00      	nop
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	e000ed00 	.word	0xe000ed00

080091d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7ff f83d 	bl	8008266 <USBD_LL_Resume>
}
 80091ec:	bf00      	nop
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	460b      	mov	r3, r1
 80091fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009206:	78fa      	ldrb	r2, [r7, #3]
 8009208:	4611      	mov	r1, r2
 800920a:	4618      	mov	r0, r3
 800920c:	f7ff f88b 	bl	8008326 <USBD_LL_IsoOUTIncomplete>
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800922a:	78fa      	ldrb	r2, [r7, #3]
 800922c:	4611      	mov	r1, r2
 800922e:	4618      	mov	r0, r3
 8009230:	f7ff f853 	bl	80082da <USBD_LL_IsoINIncomplete>
}
 8009234:	bf00      	nop
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800924a:	4618      	mov	r0, r3
 800924c:	f7ff f891 	bl	8008372 <USBD_LL_DevConnected>
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009266:	4618      	mov	r0, r3
 8009268:	f7ff f88e 	bl	8008388 <USBD_LL_DevDisconnected>
}
 800926c:	bf00      	nop
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800927c:	4b27      	ldr	r3, [pc, #156]	; (800931c <USBD_LL_Init+0xa8>)
 800927e:	4a28      	ldr	r2, [pc, #160]	; (8009320 <USBD_LL_Init+0xac>)
 8009280:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d142      	bne.n	8009310 <USBD_LL_Init+0x9c>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800928a:	4b24      	ldr	r3, [pc, #144]	; (800931c <USBD_LL_Init+0xa8>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    pdev->pData = hpcd_USB_OTG_PTR;
 8009294:	4b21      	ldr	r3, [pc, #132]	; (800931c <USBD_LL_Init+0xa8>)
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
    pma_track += 128;
#endif

#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFo(hpcd_USB_OTG_PTR, 128); // ALL OUT EP Buffer
 800929e:	4b1f      	ldr	r3, [pc, #124]	; (800931c <USBD_LL_Init+0xa8>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2180      	movs	r1, #128	; 0x80
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7f9 f946 	bl	8002536 <HAL_PCDEx_SetRxFiFo>

    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, 0, 16); // EP0 IN
 80092aa:	4b1c      	ldr	r3, [pc, #112]	; (800931c <USBD_LL_Init+0xa8>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2210      	movs	r2, #16
 80092b0:	2100      	movs	r1, #0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7f9 f8f8 	bl	80024a8 <HAL_PCDEx_SetTxFiFo>

#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80092b8:	2300      	movs	r3, #0
 80092ba:	73fb      	strb	r3, [r7, #15]
 80092bc:	e01a      	b.n	80092f4 <USBD_LL_Init+0x80>
    {
      HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 32);
 80092be:	4b17      	ldr	r3, [pc, #92]	; (800931c <USBD_LL_Init+0xa8>)
 80092c0:	6818      	ldr	r0, [r3, #0]
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	4a17      	ldr	r2, [pc, #92]	; (8009324 <USBD_LL_Init+0xb0>)
 80092c6:	5cd3      	ldrb	r3, [r2, r3]
 80092c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2220      	movs	r2, #32
 80092d0:	4619      	mov	r1, r3
 80092d2:	f7f9 f8e9 	bl	80024a8 <HAL_PCDEx_SetTxFiFo>
      HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 16);
 80092d6:	4b11      	ldr	r3, [pc, #68]	; (800931c <USBD_LL_Init+0xa8>)
 80092d8:	6818      	ldr	r0, [r3, #0]
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	4a12      	ldr	r2, [pc, #72]	; (8009328 <USBD_LL_Init+0xb4>)
 80092de:	5cd3      	ldrb	r3, [r2, r3]
 80092e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	2210      	movs	r2, #16
 80092e8:	4619      	mov	r1, r3
 80092ea:	f7f9 f8dd 	bl	80024a8 <HAL_PCDEx_SetTxFiFo>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
 80092f0:	3301      	adds	r3, #1
 80092f2:	73fb      	strb	r3, [r7, #15]
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0e1      	beq.n	80092be <USBD_LL_Init+0x4a>
#endif
#if (USBD_USE_UVC == 1)
    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (UVC_IN_EP & 0x7F), 512);
#endif
#if (USBD_USE_MSC == 1)
    HAL_PCDEx_SetTxFiFo(hpcd_USB_OTG_PTR, (MSC_IN_EP & 0x7F), 32);
 80092fa:	4b08      	ldr	r3, [pc, #32]	; (800931c <USBD_LL_Init+0xa8>)
 80092fc:	6818      	ldr	r0, [r3, #0]
 80092fe:	4b0b      	ldr	r3, [pc, #44]	; (800932c <USBD_LL_Init+0xb8>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2220      	movs	r2, #32
 800930a:	4619      	mov	r1, r3
 800930c:	f7f9 f8cc 	bl	80024a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	200092e8 	.word	0x200092e8
 8009320:	20000380 	.word	0x20000380
 8009324:	20008d30 	.word	0x20008d30
 8009328:	20008d38 	.word	0x20008d38
 800932c:	200001ba 	.word	0x200001ba

08009330 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800933c:	2300      	movs	r3, #0
 800933e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8009346:	4618      	mov	r0, r3
 8009348:	f7f8 f87e 	bl	8001448 <HAL_PCD_Start>
 800934c:	4603      	mov	r3, r0
 800934e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009350:	7bfb      	ldrb	r3, [r7, #15]
 8009352:	4618      	mov	r0, r3
 8009354:	f000 f94a 	bl	80095ec <USBD_Get_USB_Status>
 8009358:	4603      	mov	r3, r0
 800935a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800935c:	7bbb      	ldrb	r3, [r7, #14]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b084      	sub	sp, #16
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	4608      	mov	r0, r1
 8009370:	4611      	mov	r1, r2
 8009372:	461a      	mov	r2, r3
 8009374:	4603      	mov	r3, r0
 8009376:	70fb      	strb	r3, [r7, #3]
 8009378:	460b      	mov	r3, r1
 800937a:	70bb      	strb	r3, [r7, #2]
 800937c:	4613      	mov	r3, r2
 800937e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800938e:	78bb      	ldrb	r3, [r7, #2]
 8009390:	883a      	ldrh	r2, [r7, #0]
 8009392:	78f9      	ldrb	r1, [r7, #3]
 8009394:	f7f8 fc62 	bl	8001c5c <HAL_PCD_EP_Open>
 8009398:	4603      	mov	r3, r0
 800939a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 f924 	bl	80095ec <USBD_Get_USB_Status>
 80093a4:	4603      	mov	r3, r0
 80093a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	460b      	mov	r3, r1
 80093bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80093cc:	78fa      	ldrb	r2, [r7, #3]
 80093ce:	4611      	mov	r1, r2
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7f8 fcab 	bl	8001d2c <HAL_PCD_EP_Close>
 80093d6:	4603      	mov	r3, r0
 80093d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80093da:	7bfb      	ldrb	r3, [r7, #15]
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 f905 	bl	80095ec <USBD_Get_USB_Status>
 80093e2:	4603      	mov	r3, r0
 80093e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800940a:	78fa      	ldrb	r2, [r7, #3]
 800940c:	4611      	mov	r1, r2
 800940e:	4618      	mov	r0, r3
 8009410:	f7f8 fe3d 	bl	800208e <HAL_PCD_EP_Flush>
 8009414:	4603      	mov	r3, r0
 8009416:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	4618      	mov	r0, r3
 800941c:	f000 f8e6 	bl	80095ec <USBD_Get_USB_Status>
 8009420:	4603      	mov	r3, r0
 8009422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009424:	7bbb      	ldrb	r3, [r7, #14]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b084      	sub	sp, #16
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	460b      	mov	r3, r1
 8009438:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800943a:	2300      	movs	r3, #0
 800943c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800943e:	2300      	movs	r3, #0
 8009440:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8009448:	78fa      	ldrb	r2, [r7, #3]
 800944a:	4611      	mov	r1, r2
 800944c:	4618      	mov	r0, r3
 800944e:	f7f8 fd64 	bl	8001f1a <HAL_PCD_EP_SetStall>
 8009452:	4603      	mov	r3, r0
 8009454:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009456:	7bfb      	ldrb	r3, [r7, #15]
 8009458:	4618      	mov	r0, r3
 800945a:	f000 f8c7 	bl	80095ec <USBD_Get_USB_Status>
 800945e:	4603      	mov	r3, r0
 8009460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009462:	7bbb      	ldrb	r3, [r7, #14]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8009486:	78fa      	ldrb	r2, [r7, #3]
 8009488:	4611      	mov	r1, r2
 800948a:	4618      	mov	r0, r3
 800948c:	f7f8 fda9 	bl	8001fe2 <HAL_PCD_EP_ClrStall>
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 f8a8 	bl	80095ec <USBD_Get_USB_Status>
 800949c:	4603      	mov	r3, r0
 800949e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b085      	sub	sp, #20
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	460b      	mov	r3, r1
 80094b4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80094bc:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 80094be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	da0b      	bge.n	80094de <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094c6:	78fb      	ldrb	r3, [r7, #3]
 80094c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094cc:	68f9      	ldr	r1, [r7, #12]
 80094ce:	4613      	mov	r3, r2
 80094d0:	00db      	lsls	r3, r3, #3
 80094d2:	1a9b      	subs	r3, r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	440b      	add	r3, r1
 80094d8:	333e      	adds	r3, #62	; 0x3e
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	e00b      	b.n	80094f6 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094de:	78fb      	ldrb	r3, [r7, #3]
 80094e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094e4:	68f9      	ldr	r1, [r7, #12]
 80094e6:	4613      	mov	r3, r2
 80094e8:	00db      	lsls	r3, r3, #3
 80094ea:	1a9b      	subs	r3, r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	440b      	add	r3, r1
 80094f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094f4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b084      	sub	sp, #16
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	460b      	mov	r3, r1
 800950c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800951c:	78fa      	ldrb	r2, [r7, #3]
 800951e:	4611      	mov	r1, r2
 8009520:	4618      	mov	r0, r3
 8009522:	f7f8 fb76 	bl	8001c12 <HAL_PCD_SetAddress>
 8009526:	4603      	mov	r3, r0
 8009528:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800952a:	7bfb      	ldrb	r3, [r7, #15]
 800952c:	4618      	mov	r0, r3
 800952e:	f000 f85d 	bl	80095ec <USBD_Get_USB_Status>
 8009532:	4603      	mov	r3, r0
 8009534:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009536:	7bbb      	ldrb	r3, [r7, #14]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	607a      	str	r2, [r7, #4]
 800954a:	603b      	str	r3, [r7, #0]
 800954c:	460b      	mov	r3, r1
 800954e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800955e:	7af9      	ldrb	r1, [r7, #11]
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	f7f8 fc8f 	bl	8001e86 <HAL_PCD_EP_Transmit>
 8009568:	4603      	mov	r3, r0
 800956a:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800956c:	7dfb      	ldrb	r3, [r7, #23]
 800956e:	4618      	mov	r0, r3
 8009570:	f000 f83c 	bl	80095ec <USBD_Get_USB_Status>
 8009574:	4603      	mov	r3, r0
 8009576:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009578:	7dbb      	ldrb	r3, [r7, #22]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b086      	sub	sp, #24
 8009586:	af00      	add	r7, sp, #0
 8009588:	60f8      	str	r0, [r7, #12]
 800958a:	607a      	str	r2, [r7, #4]
 800958c:	603b      	str	r3, [r7, #0]
 800958e:	460b      	mov	r3, r1
 8009590:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 80095a0:	7af9      	ldrb	r1, [r7, #11]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	f7f8 fc0b 	bl	8001dc0 <HAL_PCD_EP_Receive>
 80095aa:	4603      	mov	r3, r0
 80095ac:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 80095ae:	7dfb      	ldrb	r3, [r7, #23]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 f81b 	bl	80095ec <USBD_Get_USB_Status>
 80095b6:	4603      	mov	r3, r0
 80095b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80095d6:	78fa      	ldrb	r2, [r7, #3]
 80095d8:	4611      	mov	r1, r2
 80095da:	4618      	mov	r0, r3
 80095dc:	f7f8 fc3b 	bl	8001e56 <HAL_PCD_EP_GetRxCount>
 80095e0:	4603      	mov	r3, r0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
	...

080095ec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095fa:	79fb      	ldrb	r3, [r7, #7]
 80095fc:	2b03      	cmp	r3, #3
 80095fe:	d817      	bhi.n	8009630 <USBD_Get_USB_Status+0x44>
 8009600:	a201      	add	r2, pc, #4	; (adr r2, 8009608 <USBD_Get_USB_Status+0x1c>)
 8009602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009606:	bf00      	nop
 8009608:	08009619 	.word	0x08009619
 800960c:	0800961f 	.word	0x0800961f
 8009610:	08009625 	.word	0x08009625
 8009614:	0800962b 	.word	0x0800962b
  {
  case HAL_OK:
    usb_status = USBD_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	73fb      	strb	r3, [r7, #15]
    break;
 800961c:	e00b      	b.n	8009636 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800961e:	2303      	movs	r3, #3
 8009620:	73fb      	strb	r3, [r7, #15]
    break;
 8009622:	e008      	b.n	8009636 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 8009624:	2301      	movs	r3, #1
 8009626:	73fb      	strb	r3, [r7, #15]
    break;
 8009628:	e005      	b.n	8009636 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800962a:	2303      	movs	r3, #3
 800962c:	73fb      	strb	r3, [r7, #15]
    break;
 800962e:	e002      	b.n	8009636 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 8009630:	2303      	movs	r3, #3
 8009632:	73fb      	strb	r3, [r7, #15]
    break;
 8009634:	bf00      	nop
  }
  return usb_status;
 8009636:	7bfb      	ldrb	r3, [r7, #15]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <__NVIC_SetPriority>:
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	4603      	mov	r3, r0
 800964c:	6039      	str	r1, [r7, #0]
 800964e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009654:	2b00      	cmp	r3, #0
 8009656:	db0a      	blt.n	800966e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	b2da      	uxtb	r2, r3
 800965c:	490c      	ldr	r1, [pc, #48]	; (8009690 <__NVIC_SetPriority+0x4c>)
 800965e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009662:	0112      	lsls	r2, r2, #4
 8009664:	b2d2      	uxtb	r2, r2
 8009666:	440b      	add	r3, r1
 8009668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800966c:	e00a      	b.n	8009684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	b2da      	uxtb	r2, r3
 8009672:	4908      	ldr	r1, [pc, #32]	; (8009694 <__NVIC_SetPriority+0x50>)
 8009674:	79fb      	ldrb	r3, [r7, #7]
 8009676:	f003 030f 	and.w	r3, r3, #15
 800967a:	3b04      	subs	r3, #4
 800967c:	0112      	lsls	r2, r2, #4
 800967e:	b2d2      	uxtb	r2, r2
 8009680:	440b      	add	r3, r1
 8009682:	761a      	strb	r2, [r3, #24]
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	e000e100 	.word	0xe000e100
 8009694:	e000ed00 	.word	0xe000ed00

08009698 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009698:	b580      	push	{r7, lr}
 800969a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800969c:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <SysTick_Handler+0x1c>)
 800969e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80096a0:	f001 fd4e 	bl	800b140 <xTaskGetSchedulerState>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d001      	beq.n	80096ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80096aa:	f002 fb35 	bl	800bd18 <xPortSysTickHandler>
  }
}
 80096ae:	bf00      	nop
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	e000e010 	.word	0xe000e010

080096b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80096b8:	b580      	push	{r7, lr}
 80096ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80096bc:	2100      	movs	r1, #0
 80096be:	f06f 0004 	mvn.w	r0, #4
 80096c2:	f7ff ffbf 	bl	8009644 <__NVIC_SetPriority>
#endif
}
 80096c6:	bf00      	nop
 80096c8:	bd80      	pop	{r7, pc}
	...

080096cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096d2:	f3ef 8305 	mrs	r3, IPSR
 80096d6:	603b      	str	r3, [r7, #0]
  return(result);
 80096d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d003      	beq.n	80096e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80096de:	f06f 0305 	mvn.w	r3, #5
 80096e2:	607b      	str	r3, [r7, #4]
 80096e4:	e00c      	b.n	8009700 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80096e6:	4b0a      	ldr	r3, [pc, #40]	; (8009710 <osKernelInitialize+0x44>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d105      	bne.n	80096fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80096ee:	4b08      	ldr	r3, [pc, #32]	; (8009710 <osKernelInitialize+0x44>)
 80096f0:	2201      	movs	r2, #1
 80096f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	607b      	str	r3, [r7, #4]
 80096f8:	e002      	b.n	8009700 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80096fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009700:	687b      	ldr	r3, [r7, #4]
}
 8009702:	4618      	mov	r0, r3
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	200092ec 	.word	0x200092ec

08009714 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800971a:	f3ef 8305 	mrs	r3, IPSR
 800971e:	603b      	str	r3, [r7, #0]
  return(result);
 8009720:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009722:	2b00      	cmp	r3, #0
 8009724:	d003      	beq.n	800972e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009726:	f06f 0305 	mvn.w	r3, #5
 800972a:	607b      	str	r3, [r7, #4]
 800972c:	e010      	b.n	8009750 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800972e:	4b0b      	ldr	r3, [pc, #44]	; (800975c <osKernelStart+0x48>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d109      	bne.n	800974a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009736:	f7ff ffbf 	bl	80096b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800973a:	4b08      	ldr	r3, [pc, #32]	; (800975c <osKernelStart+0x48>)
 800973c:	2202      	movs	r2, #2
 800973e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009740:	f001 f890 	bl	800a864 <vTaskStartScheduler>
      stat = osOK;
 8009744:	2300      	movs	r3, #0
 8009746:	607b      	str	r3, [r7, #4]
 8009748:	e002      	b.n	8009750 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800974a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800974e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009750:	687b      	ldr	r3, [r7, #4]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	200092ec 	.word	0x200092ec

08009760 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009766:	f3ef 8305 	mrs	r3, IPSR
 800976a:	603b      	str	r3, [r7, #0]
  return(result);
 800976c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800976e:	2b00      	cmp	r3, #0
 8009770:	d003      	beq.n	800977a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009772:	f001 f9a3 	bl	800aabc <xTaskGetTickCountFromISR>
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	e002      	b.n	8009780 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800977a:	f001 f98f 	bl	800aa9c <xTaskGetTickCount>
 800977e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009780:	687b      	ldr	r3, [r7, #4]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800978a:	b580      	push	{r7, lr}
 800978c:	b08e      	sub	sp, #56	; 0x38
 800978e:	af04      	add	r7, sp, #16
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	60b9      	str	r1, [r7, #8]
 8009794:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009796:	2300      	movs	r3, #0
 8009798:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800979a:	f3ef 8305 	mrs	r3, IPSR
 800979e:	617b      	str	r3, [r7, #20]
  return(result);
 80097a0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d17e      	bne.n	80098a4 <osThreadNew+0x11a>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d07b      	beq.n	80098a4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80097ac:	2380      	movs	r3, #128	; 0x80
 80097ae:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80097b0:	2318      	movs	r3, #24
 80097b2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80097b4:	2300      	movs	r3, #0
 80097b6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80097b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097bc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d045      	beq.n	8009850 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <osThreadNew+0x48>
        name = attr->name;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d002      	beq.n	80097e0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d008      	beq.n	80097f8 <osThreadNew+0x6e>
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	2b38      	cmp	r3, #56	; 0x38
 80097ea:	d805      	bhi.n	80097f8 <osThreadNew+0x6e>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	f003 0301 	and.w	r3, r3, #1
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d001      	beq.n	80097fc <osThreadNew+0x72>
        return (NULL);
 80097f8:	2300      	movs	r3, #0
 80097fa:	e054      	b.n	80098a6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d003      	beq.n	800980c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	089b      	lsrs	r3, r3, #2
 800980a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00e      	beq.n	8009832 <osThreadNew+0xa8>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	2bbb      	cmp	r3, #187	; 0xbb
 800981a:	d90a      	bls.n	8009832 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009820:	2b00      	cmp	r3, #0
 8009822:	d006      	beq.n	8009832 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d002      	beq.n	8009832 <osThreadNew+0xa8>
        mem = 1;
 800982c:	2301      	movs	r3, #1
 800982e:	61bb      	str	r3, [r7, #24]
 8009830:	e010      	b.n	8009854 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10c      	bne.n	8009854 <osThreadNew+0xca>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d108      	bne.n	8009854 <osThreadNew+0xca>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d104      	bne.n	8009854 <osThreadNew+0xca>
          mem = 0;
 800984a:	2300      	movs	r3, #0
 800984c:	61bb      	str	r3, [r7, #24]
 800984e:	e001      	b.n	8009854 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009850:	2300      	movs	r3, #0
 8009852:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d110      	bne.n	800987c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009862:	9202      	str	r2, [sp, #8]
 8009864:	9301      	str	r3, [sp, #4]
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	6a3a      	ldr	r2, [r7, #32]
 800986e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f000 fe0b 	bl	800a48c <xTaskCreateStatic>
 8009876:	4603      	mov	r3, r0
 8009878:	613b      	str	r3, [r7, #16]
 800987a:	e013      	b.n	80098a4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d110      	bne.n	80098a4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009882:	6a3b      	ldr	r3, [r7, #32]
 8009884:	b29a      	uxth	r2, r3
 8009886:	f107 0310 	add.w	r3, r7, #16
 800988a:	9301      	str	r3, [sp, #4]
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	f000 fe56 	bl	800a546 <xTaskCreate>
 800989a:	4603      	mov	r3, r0
 800989c:	2b01      	cmp	r3, #1
 800989e:	d001      	beq.n	80098a4 <osThreadNew+0x11a>
            hTask = NULL;
 80098a0:	2300      	movs	r3, #0
 80098a2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80098a4:	693b      	ldr	r3, [r7, #16]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3728      	adds	r7, #40	; 0x28
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b084      	sub	sp, #16
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098b6:	f3ef 8305 	mrs	r3, IPSR
 80098ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80098bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <osDelay+0x1c>
    stat = osErrorISR;
 80098c2:	f06f 0305 	mvn.w	r3, #5
 80098c6:	60fb      	str	r3, [r7, #12]
 80098c8:	e007      	b.n	80098da <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d002      	beq.n	80098da <osDelay+0x2c>
      vTaskDelay(ticks);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 ff91 	bl	800a7fc <vTaskDelay>
    }
  }

  return (stat);
 80098da:	68fb      	ldr	r3, [r7, #12]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	4a07      	ldr	r2, [pc, #28]	; (8009910 <vApplicationGetIdleTaskMemory+0x2c>)
 80098f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	4a06      	ldr	r2, [pc, #24]	; (8009914 <vApplicationGetIdleTaskMemory+0x30>)
 80098fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2280      	movs	r2, #128	; 0x80
 8009900:	601a      	str	r2, [r3, #0]
}
 8009902:	bf00      	nop
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	200092f0 	.word	0x200092f0
 8009914:	200093ac 	.word	0x200093ac

08009918 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	4a07      	ldr	r2, [pc, #28]	; (8009944 <vApplicationGetTimerTaskMemory+0x2c>)
 8009928:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	4a06      	ldr	r2, [pc, #24]	; (8009948 <vApplicationGetTimerTaskMemory+0x30>)
 800992e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009936:	601a      	str	r2, [r3, #0]
}
 8009938:	bf00      	nop
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	200095ac 	.word	0x200095ac
 8009948:	20009668 	.word	0x20009668

0800994c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f103 0208 	add.w	r2, r3, #8
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009964:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f103 0208 	add.w	r2, r3, #8
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f103 0208 	add.w	r2, r3, #8
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800999a:	bf00      	nop
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099a6:	b480      	push	{r7}
 80099a8:	b085      	sub	sp, #20
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
 80099ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	689a      	ldr	r2, [r3, #8]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	1c5a      	adds	r2, r3, #1
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	601a      	str	r2, [r3, #0]
}
 80099e2:	bf00      	nop
 80099e4:	3714      	adds	r7, #20
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099ee:	b480      	push	{r7}
 80099f0:	b085      	sub	sp, #20
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a04:	d103      	bne.n	8009a0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	e00c      	b.n	8009a28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	3308      	adds	r3, #8
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	e002      	b.n	8009a1c <vListInsert+0x2e>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68ba      	ldr	r2, [r7, #8]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d2f6      	bcs.n	8009a16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	68fa      	ldr	r2, [r7, #12]
 8009a3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	1c5a      	adds	r2, r3, #1
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	601a      	str	r2, [r3, #0]
}
 8009a54:	bf00      	nop
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	6892      	ldr	r2, [r2, #8]
 8009a76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	6852      	ldr	r2, [r2, #4]
 8009a80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d103      	bne.n	8009a94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	689a      	ldr	r2, [r3, #8]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	1e5a      	subs	r2, r3, #1
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3714      	adds	r7, #20
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10a      	bne.n	8009ade <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009acc:	f383 8811 	msr	BASEPRI, r3
 8009ad0:	f3bf 8f6f 	isb	sy
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ada:	bf00      	nop
 8009adc:	e7fe      	b.n	8009adc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ade:	f002 f889 	bl	800bbf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aea:	68f9      	ldr	r1, [r7, #12]
 8009aec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009aee:	fb01 f303 	mul.w	r3, r1, r3
 8009af2:	441a      	add	r2, r3
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2200      	movs	r2, #0
 8009afc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	68f9      	ldr	r1, [r7, #12]
 8009b12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009b14:	fb01 f303 	mul.w	r3, r1, r3
 8009b18:	441a      	add	r2, r3
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	22ff      	movs	r2, #255	; 0xff
 8009b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	22ff      	movs	r2, #255	; 0xff
 8009b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d114      	bne.n	8009b5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01a      	beq.n	8009b72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	3310      	adds	r3, #16
 8009b40:	4618      	mov	r0, r3
 8009b42:	f001 f93b 	bl	800adbc <xTaskRemoveFromEventList>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d012      	beq.n	8009b72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b4c:	4b0c      	ldr	r3, [pc, #48]	; (8009b80 <xQueueGenericReset+0xcc>)
 8009b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	e009      	b.n	8009b72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3310      	adds	r3, #16
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7ff fef2 	bl	800994c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	3324      	adds	r3, #36	; 0x24
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7ff feed 	bl	800994c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b72:	f002 f86f 	bl	800bc54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b76:	2301      	movs	r3, #1
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	e000ed04 	.word	0xe000ed04

08009b84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08e      	sub	sp, #56	; 0x38
 8009b88:	af02      	add	r7, sp, #8
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
 8009b90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10a      	bne.n	8009bae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009baa:	bf00      	nop
 8009bac:	e7fe      	b.n	8009bac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10a      	bne.n	8009bca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009bc6:	bf00      	nop
 8009bc8:	e7fe      	b.n	8009bc8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <xQueueGenericCreateStatic+0x52>
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <xQueueGenericCreateStatic+0x56>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e000      	b.n	8009bdc <xQueueGenericCreateStatic+0x58>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10a      	bne.n	8009bf6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	623b      	str	r3, [r7, #32]
}
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d102      	bne.n	8009c02 <xQueueGenericCreateStatic+0x7e>
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <xQueueGenericCreateStatic+0x82>
 8009c02:	2301      	movs	r3, #1
 8009c04:	e000      	b.n	8009c08 <xQueueGenericCreateStatic+0x84>
 8009c06:	2300      	movs	r3, #0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10a      	bne.n	8009c22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	61fb      	str	r3, [r7, #28]
}
 8009c1e:	bf00      	nop
 8009c20:	e7fe      	b.n	8009c20 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009c22:	2350      	movs	r3, #80	; 0x50
 8009c24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	2b50      	cmp	r3, #80	; 0x50
 8009c2a:	d00a      	beq.n	8009c42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c30:	f383 8811 	msr	BASEPRI, r3
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	61bb      	str	r3, [r7, #24]
}
 8009c3e:	bf00      	nop
 8009c40:	e7fe      	b.n	8009c40 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00d      	beq.n	8009c6a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c50:	2201      	movs	r2, #1
 8009c52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	68b9      	ldr	r1, [r7, #8]
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f000 f805 	bl	8009c74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3730      	adds	r7, #48	; 0x30
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
 8009c80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d103      	bne.n	8009c90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	69ba      	ldr	r2, [r7, #24]
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	e002      	b.n	8009c96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	69b8      	ldr	r0, [r7, #24]
 8009ca6:	f7ff ff05 	bl	8009ab4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	78fa      	ldrb	r2, [r7, #3]
 8009cae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009cb2:	bf00      	nop
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
	...

08009cbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b08e      	sub	sp, #56	; 0x38
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
 8009cc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10a      	bne.n	8009cee <xQueueGenericSend+0x32>
	__asm volatile
 8009cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cdc:	f383 8811 	msr	BASEPRI, r3
 8009ce0:	f3bf 8f6f 	isb	sy
 8009ce4:	f3bf 8f4f 	dsb	sy
 8009ce8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009cea:	bf00      	nop
 8009cec:	e7fe      	b.n	8009cec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d103      	bne.n	8009cfc <xQueueGenericSend+0x40>
 8009cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d101      	bne.n	8009d00 <xQueueGenericSend+0x44>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e000      	b.n	8009d02 <xQueueGenericSend+0x46>
 8009d00:	2300      	movs	r3, #0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10a      	bne.n	8009d1c <xQueueGenericSend+0x60>
	__asm volatile
 8009d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d18:	bf00      	nop
 8009d1a:	e7fe      	b.n	8009d1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d103      	bne.n	8009d2a <xQueueGenericSend+0x6e>
 8009d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d101      	bne.n	8009d2e <xQueueGenericSend+0x72>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e000      	b.n	8009d30 <xQueueGenericSend+0x74>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10a      	bne.n	8009d4a <xQueueGenericSend+0x8e>
	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	623b      	str	r3, [r7, #32]
}
 8009d46:	bf00      	nop
 8009d48:	e7fe      	b.n	8009d48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d4a:	f001 f9f9 	bl	800b140 <xTaskGetSchedulerState>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d102      	bne.n	8009d5a <xQueueGenericSend+0x9e>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d101      	bne.n	8009d5e <xQueueGenericSend+0xa2>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e000      	b.n	8009d60 <xQueueGenericSend+0xa4>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10a      	bne.n	8009d7a <xQueueGenericSend+0xbe>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	61fb      	str	r3, [r7, #28]
}
 8009d76:	bf00      	nop
 8009d78:	e7fe      	b.n	8009d78 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d7a:	f001 ff3b 	bl	800bbf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d302      	bcc.n	8009d90 <xQueueGenericSend+0xd4>
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d129      	bne.n	8009de4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	68b9      	ldr	r1, [r7, #8]
 8009d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d96:	f000 fa0b 	bl	800a1b0 <prvCopyDataToQueue>
 8009d9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d010      	beq.n	8009dc6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da6:	3324      	adds	r3, #36	; 0x24
 8009da8:	4618      	mov	r0, r3
 8009daa:	f001 f807 	bl	800adbc <xTaskRemoveFromEventList>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d013      	beq.n	8009ddc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009db4:	4b3f      	ldr	r3, [pc, #252]	; (8009eb4 <xQueueGenericSend+0x1f8>)
 8009db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dba:	601a      	str	r2, [r3, #0]
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	e00a      	b.n	8009ddc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d007      	beq.n	8009ddc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009dcc:	4b39      	ldr	r3, [pc, #228]	; (8009eb4 <xQueueGenericSend+0x1f8>)
 8009dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ddc:	f001 ff3a 	bl	800bc54 <vPortExitCritical>
				return pdPASS;
 8009de0:	2301      	movs	r3, #1
 8009de2:	e063      	b.n	8009eac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d103      	bne.n	8009df2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009dea:	f001 ff33 	bl	800bc54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009dee:	2300      	movs	r3, #0
 8009df0:	e05c      	b.n	8009eac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d106      	bne.n	8009e06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009df8:	f107 0314 	add.w	r3, r7, #20
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f001 f841 	bl	800ae84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e02:	2301      	movs	r3, #1
 8009e04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e06:	f001 ff25 	bl	800bc54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e0a:	f000 fd9b 	bl	800a944 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e0e:	f001 fef1 	bl	800bbf4 <vPortEnterCritical>
 8009e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e18:	b25b      	sxtb	r3, r3
 8009e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e1e:	d103      	bne.n	8009e28 <xQueueGenericSend+0x16c>
 8009e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e2e:	b25b      	sxtb	r3, r3
 8009e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e34:	d103      	bne.n	8009e3e <xQueueGenericSend+0x182>
 8009e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e3e:	f001 ff09 	bl	800bc54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e42:	1d3a      	adds	r2, r7, #4
 8009e44:	f107 0314 	add.w	r3, r7, #20
 8009e48:	4611      	mov	r1, r2
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f001 f830 	bl	800aeb0 <xTaskCheckForTimeOut>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d124      	bne.n	8009ea0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e58:	f000 faa2 	bl	800a3a0 <prvIsQueueFull>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d018      	beq.n	8009e94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e64:	3310      	adds	r3, #16
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	4611      	mov	r1, r2
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 ff56 	bl	800ad1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e72:	f000 fa2d 	bl	800a2d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e76:	f000 fd73 	bl	800a960 <xTaskResumeAll>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f47f af7c 	bne.w	8009d7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e82:	4b0c      	ldr	r3, [pc, #48]	; (8009eb4 <xQueueGenericSend+0x1f8>)
 8009e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e88:	601a      	str	r2, [r3, #0]
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	e772      	b.n	8009d7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e96:	f000 fa1b 	bl	800a2d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e9a:	f000 fd61 	bl	800a960 <xTaskResumeAll>
 8009e9e:	e76c      	b.n	8009d7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ea2:	f000 fa15 	bl	800a2d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ea6:	f000 fd5b 	bl	800a960 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009eaa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3738      	adds	r7, #56	; 0x38
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	e000ed04 	.word	0xe000ed04

08009eb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b090      	sub	sp, #64	; 0x40
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
 8009ec4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d10a      	bne.n	8009ee6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ee2:	bf00      	nop
 8009ee4:	e7fe      	b.n	8009ee4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d103      	bne.n	8009ef4 <xQueueGenericSendFromISR+0x3c>
 8009eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <xQueueGenericSendFromISR+0x40>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e000      	b.n	8009efa <xQueueGenericSendFromISR+0x42>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10a      	bne.n	8009f14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f10:	bf00      	nop
 8009f12:	e7fe      	b.n	8009f12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d103      	bne.n	8009f22 <xQueueGenericSendFromISR+0x6a>
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d101      	bne.n	8009f26 <xQueueGenericSendFromISR+0x6e>
 8009f22:	2301      	movs	r3, #1
 8009f24:	e000      	b.n	8009f28 <xQueueGenericSendFromISR+0x70>
 8009f26:	2300      	movs	r3, #0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10a      	bne.n	8009f42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	623b      	str	r3, [r7, #32]
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f42:	f001 ff39 	bl	800bdb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009f46:	f3ef 8211 	mrs	r2, BASEPRI
 8009f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	61fa      	str	r2, [r7, #28]
 8009f5c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f5e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f60:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d302      	bcc.n	8009f74 <xQueueGenericSendFromISR+0xbc>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	d12f      	bne.n	8009fd4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f82:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	68b9      	ldr	r1, [r7, #8]
 8009f88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f8a:	f000 f911 	bl	800a1b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f96:	d112      	bne.n	8009fbe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d016      	beq.n	8009fce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa2:	3324      	adds	r3, #36	; 0x24
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 ff09 	bl	800adbc <xTaskRemoveFromEventList>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00e      	beq.n	8009fce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00b      	beq.n	8009fce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	601a      	str	r2, [r3, #0]
 8009fbc:	e007      	b.n	8009fce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009fbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	b25a      	sxtb	r2, r3
 8009fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009fd2:	e001      	b.n	8009fd8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fda:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009fe2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3740      	adds	r7, #64	; 0x40
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
	...

08009ff0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08c      	sub	sp, #48	; 0x30
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10a      	bne.n	800a020 <xQueueReceive+0x30>
	__asm volatile
 800a00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	623b      	str	r3, [r7, #32]
}
 800a01c:	bf00      	nop
 800a01e:	e7fe      	b.n	800a01e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d103      	bne.n	800a02e <xQueueReceive+0x3e>
 800a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d101      	bne.n	800a032 <xQueueReceive+0x42>
 800a02e:	2301      	movs	r3, #1
 800a030:	e000      	b.n	800a034 <xQueueReceive+0x44>
 800a032:	2300      	movs	r3, #0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10a      	bne.n	800a04e <xQueueReceive+0x5e>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	61fb      	str	r3, [r7, #28]
}
 800a04a:	bf00      	nop
 800a04c:	e7fe      	b.n	800a04c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a04e:	f001 f877 	bl	800b140 <xTaskGetSchedulerState>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d102      	bne.n	800a05e <xQueueReceive+0x6e>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <xQueueReceive+0x72>
 800a05e:	2301      	movs	r3, #1
 800a060:	e000      	b.n	800a064 <xQueueReceive+0x74>
 800a062:	2300      	movs	r3, #0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10a      	bne.n	800a07e <xQueueReceive+0x8e>
	__asm volatile
 800a068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	61bb      	str	r3, [r7, #24]
}
 800a07a:	bf00      	nop
 800a07c:	e7fe      	b.n	800a07c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a07e:	f001 fdb9 	bl	800bbf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a086:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d01f      	beq.n	800a0ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a08e:	68b9      	ldr	r1, [r7, #8]
 800a090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a092:	f000 f8f7 	bl	800a284 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a098:	1e5a      	subs	r2, r3, #1
 800a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00f      	beq.n	800a0c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a8:	3310      	adds	r3, #16
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 fe86 	bl	800adbc <xTaskRemoveFromEventList>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d007      	beq.n	800a0c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0b6:	4b3d      	ldr	r3, [pc, #244]	; (800a1ac <xQueueReceive+0x1bc>)
 800a0b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0bc:	601a      	str	r2, [r3, #0]
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0c6:	f001 fdc5 	bl	800bc54 <vPortExitCritical>
				return pdPASS;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e069      	b.n	800a1a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d103      	bne.n	800a0dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0d4:	f001 fdbe 	bl	800bc54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	e062      	b.n	800a1a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d106      	bne.n	800a0f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0e2:	f107 0310 	add.w	r3, r7, #16
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 fecc 	bl	800ae84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0f0:	f001 fdb0 	bl	800bc54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0f4:	f000 fc26 	bl	800a944 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0f8:	f001 fd7c 	bl	800bbf4 <vPortEnterCritical>
 800a0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a102:	b25b      	sxtb	r3, r3
 800a104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a108:	d103      	bne.n	800a112 <xQueueReceive+0x122>
 800a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a118:	b25b      	sxtb	r3, r3
 800a11a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a11e:	d103      	bne.n	800a128 <xQueueReceive+0x138>
 800a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a122:	2200      	movs	r2, #0
 800a124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a128:	f001 fd94 	bl	800bc54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a12c:	1d3a      	adds	r2, r7, #4
 800a12e:	f107 0310 	add.w	r3, r7, #16
 800a132:	4611      	mov	r1, r2
 800a134:	4618      	mov	r0, r3
 800a136:	f000 febb 	bl	800aeb0 <xTaskCheckForTimeOut>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d123      	bne.n	800a188 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a142:	f000 f917 	bl	800a374 <prvIsQueueEmpty>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d017      	beq.n	800a17c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14e:	3324      	adds	r3, #36	; 0x24
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	4611      	mov	r1, r2
 800a154:	4618      	mov	r0, r3
 800a156:	f000 fde1 	bl	800ad1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a15a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a15c:	f000 f8b8 	bl	800a2d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a160:	f000 fbfe 	bl	800a960 <xTaskResumeAll>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d189      	bne.n	800a07e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a16a:	4b10      	ldr	r3, [pc, #64]	; (800a1ac <xQueueReceive+0x1bc>)
 800a16c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a170:	601a      	str	r2, [r3, #0]
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	e780      	b.n	800a07e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a17c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a17e:	f000 f8a7 	bl	800a2d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a182:	f000 fbed 	bl	800a960 <xTaskResumeAll>
 800a186:	e77a      	b.n	800a07e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a18a:	f000 f8a1 	bl	800a2d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a18e:	f000 fbe7 	bl	800a960 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a194:	f000 f8ee 	bl	800a374 <prvIsQueueEmpty>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f43f af6f 	beq.w	800a07e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3730      	adds	r7, #48	; 0x30
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	e000ed04 	.word	0xe000ed04

0800a1b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10d      	bne.n	800a1ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d14d      	bne.n	800a272 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f000 ffce 	bl	800b17c <xTaskPriorityDisinherit>
 800a1e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	609a      	str	r2, [r3, #8]
 800a1e8:	e043      	b.n	800a272 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d119      	bne.n	800a224 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6858      	ldr	r0, [r3, #4]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	68b9      	ldr	r1, [r7, #8]
 800a1fc:	f002 f929 	bl	800c452 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a208:	441a      	add	r2, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	429a      	cmp	r2, r3
 800a218:	d32b      	bcc.n	800a272 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	605a      	str	r2, [r3, #4]
 800a222:	e026      	b.n	800a272 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	68d8      	ldr	r0, [r3, #12]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22c:	461a      	mov	r2, r3
 800a22e:	68b9      	ldr	r1, [r7, #8]
 800a230:	f002 f90f 	bl	800c452 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	68da      	ldr	r2, [r3, #12]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23c:	425b      	negs	r3, r3
 800a23e:	441a      	add	r2, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	68da      	ldr	r2, [r3, #12]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d207      	bcs.n	800a260 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	689a      	ldr	r2, [r3, #8]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a258:	425b      	negs	r3, r3
 800a25a:	441a      	add	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2b02      	cmp	r3, #2
 800a264:	d105      	bne.n	800a272 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d002      	beq.n	800a272 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	3b01      	subs	r3, #1
 800a270:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	1c5a      	adds	r2, r3, #1
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a27a:	697b      	ldr	r3, [r7, #20]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a292:	2b00      	cmp	r3, #0
 800a294:	d018      	beq.n	800a2c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68da      	ldr	r2, [r3, #12]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29e:	441a      	add	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	68da      	ldr	r2, [r3, #12]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d303      	bcc.n	800a2b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	68d9      	ldr	r1, [r3, #12]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	6838      	ldr	r0, [r7, #0]
 800a2c4:	f002 f8c5 	bl	800c452 <memcpy>
	}
}
 800a2c8:	bf00      	nop
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a2d8:	f001 fc8c 	bl	800bbf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2e4:	e011      	b.n	800a30a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d012      	beq.n	800a314 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	3324      	adds	r3, #36	; 0x24
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f000 fd62 	bl	800adbc <xTaskRemoveFromEventList>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a2fe:	f000 fe39 	bl	800af74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a302:	7bfb      	ldrb	r3, [r7, #15]
 800a304:	3b01      	subs	r3, #1
 800a306:	b2db      	uxtb	r3, r3
 800a308:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a30a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	dce9      	bgt.n	800a2e6 <prvUnlockQueue+0x16>
 800a312:	e000      	b.n	800a316 <prvUnlockQueue+0x46>
					break;
 800a314:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	22ff      	movs	r2, #255	; 0xff
 800a31a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a31e:	f001 fc99 	bl	800bc54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a322:	f001 fc67 	bl	800bbf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a32c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a32e:	e011      	b.n	800a354 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d012      	beq.n	800a35e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	3310      	adds	r3, #16
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 fd3d 	bl	800adbc <xTaskRemoveFromEventList>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a348:	f000 fe14 	bl	800af74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a34c:	7bbb      	ldrb	r3, [r7, #14]
 800a34e:	3b01      	subs	r3, #1
 800a350:	b2db      	uxtb	r3, r3
 800a352:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	dce9      	bgt.n	800a330 <prvUnlockQueue+0x60>
 800a35c:	e000      	b.n	800a360 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a35e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	22ff      	movs	r2, #255	; 0xff
 800a364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a368:	f001 fc74 	bl	800bc54 <vPortExitCritical>
}
 800a36c:	bf00      	nop
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a37c:	f001 fc3a 	bl	800bbf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a384:	2b00      	cmp	r3, #0
 800a386:	d102      	bne.n	800a38e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a388:	2301      	movs	r3, #1
 800a38a:	60fb      	str	r3, [r7, #12]
 800a38c:	e001      	b.n	800a392 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a38e:	2300      	movs	r3, #0
 800a390:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a392:	f001 fc5f 	bl	800bc54 <vPortExitCritical>

	return xReturn;
 800a396:	68fb      	ldr	r3, [r7, #12]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a3a8:	f001 fc24 	bl	800bbf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d102      	bne.n	800a3be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	e001      	b.n	800a3c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a3c2:	f001 fc47 	bl	800bc54 <vPortExitCritical>

	return xReturn;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60fb      	str	r3, [r7, #12]
 800a3de:	e014      	b.n	800a40a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a3e0:	4a0f      	ldr	r2, [pc, #60]	; (800a420 <vQueueAddToRegistry+0x50>)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10b      	bne.n	800a404 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a3ec:	490c      	ldr	r1, [pc, #48]	; (800a420 <vQueueAddToRegistry+0x50>)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a3f6:	4a0a      	ldr	r2, [pc, #40]	; (800a420 <vQueueAddToRegistry+0x50>)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	00db      	lsls	r3, r3, #3
 800a3fc:	4413      	add	r3, r2
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a402:	e006      	b.n	800a412 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	3301      	adds	r3, #1
 800a408:	60fb      	str	r3, [r7, #12]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2b07      	cmp	r3, #7
 800a40e:	d9e7      	bls.n	800a3e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a410:	bf00      	nop
 800a412:	bf00      	nop
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	20009a68 	.word	0x20009a68

0800a424 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a434:	f001 fbde 	bl	800bbf4 <vPortEnterCritical>
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a43e:	b25b      	sxtb	r3, r3
 800a440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a444:	d103      	bne.n	800a44e <vQueueWaitForMessageRestricted+0x2a>
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a454:	b25b      	sxtb	r3, r3
 800a456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a45a:	d103      	bne.n	800a464 <vQueueWaitForMessageRestricted+0x40>
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a464:	f001 fbf6 	bl	800bc54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d106      	bne.n	800a47e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	3324      	adds	r3, #36	; 0x24
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	68b9      	ldr	r1, [r7, #8]
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 fc73 	bl	800ad64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a47e:	6978      	ldr	r0, [r7, #20]
 800a480:	f7ff ff26 	bl	800a2d0 <prvUnlockQueue>
	}
 800a484:	bf00      	nop
 800a486:	3718      	adds	r7, #24
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b08e      	sub	sp, #56	; 0x38
 800a490:	af04      	add	r7, sp, #16
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]
 800a498:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10a      	bne.n	800a4b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	623b      	str	r3, [r7, #32]
}
 800a4b2:	bf00      	nop
 800a4b4:	e7fe      	b.n	800a4b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10a      	bne.n	800a4d2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	61fb      	str	r3, [r7, #28]
}
 800a4ce:	bf00      	nop
 800a4d0:	e7fe      	b.n	800a4d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a4d2:	23bc      	movs	r3, #188	; 0xbc
 800a4d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	2bbc      	cmp	r3, #188	; 0xbc
 800a4da:	d00a      	beq.n	800a4f2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	61bb      	str	r3, [r7, #24]
}
 800a4ee:	bf00      	nop
 800a4f0:	e7fe      	b.n	800a4f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a4f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d01e      	beq.n	800a538 <xTaskCreateStatic+0xac>
 800a4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d01b      	beq.n	800a538 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a502:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a508:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50c:	2202      	movs	r2, #2
 800a50e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a512:	2300      	movs	r3, #0
 800a514:	9303      	str	r3, [sp, #12]
 800a516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a518:	9302      	str	r3, [sp, #8]
 800a51a:	f107 0314 	add.w	r3, r7, #20
 800a51e:	9301      	str	r3, [sp, #4]
 800a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	68b9      	ldr	r1, [r7, #8]
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f000 f850 	bl	800a5d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a532:	f000 f8f3 	bl	800a71c <prvAddNewTaskToReadyList>
 800a536:	e001      	b.n	800a53c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a538:	2300      	movs	r3, #0
 800a53a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a53c:	697b      	ldr	r3, [r7, #20]
	}
 800a53e:	4618      	mov	r0, r3
 800a540:	3728      	adds	r7, #40	; 0x28
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a546:	b580      	push	{r7, lr}
 800a548:	b08c      	sub	sp, #48	; 0x30
 800a54a:	af04      	add	r7, sp, #16
 800a54c:	60f8      	str	r0, [r7, #12]
 800a54e:	60b9      	str	r1, [r7, #8]
 800a550:	603b      	str	r3, [r7, #0]
 800a552:	4613      	mov	r3, r2
 800a554:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a556:	88fb      	ldrh	r3, [r7, #6]
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	4618      	mov	r0, r3
 800a55c:	f001 fc6c 	bl	800be38 <pvPortMalloc>
 800a560:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d00e      	beq.n	800a586 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a568:	20bc      	movs	r0, #188	; 0xbc
 800a56a:	f001 fc65 	bl	800be38 <pvPortMalloc>
 800a56e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d003      	beq.n	800a57e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	631a      	str	r2, [r3, #48]	; 0x30
 800a57c:	e005      	b.n	800a58a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a57e:	6978      	ldr	r0, [r7, #20]
 800a580:	f001 fd26 	bl	800bfd0 <vPortFree>
 800a584:	e001      	b.n	800a58a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a586:	2300      	movs	r3, #0
 800a588:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d017      	beq.n	800a5c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a598:	88fa      	ldrh	r2, [r7, #6]
 800a59a:	2300      	movs	r3, #0
 800a59c:	9303      	str	r3, [sp, #12]
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	9302      	str	r3, [sp, #8]
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	9301      	str	r3, [sp, #4]
 800a5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	68b9      	ldr	r1, [r7, #8]
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f000 f80e 	bl	800a5d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5b4:	69f8      	ldr	r0, [r7, #28]
 800a5b6:	f000 f8b1 	bl	800a71c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	61bb      	str	r3, [r7, #24]
 800a5be:	e002      	b.n	800a5c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a5c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a5c6:	69bb      	ldr	r3, [r7, #24]
	}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3720      	adds	r7, #32
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b088      	sub	sp, #32
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
 800a5dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	21a5      	movs	r1, #165	; 0xa5
 800a5ea:	f001 ff40 	bl	800c46e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4413      	add	r3, r2
 800a5fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	f023 0307 	bic.w	r3, r3, #7
 800a606:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	f003 0307 	and.w	r3, r3, #7
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00a      	beq.n	800a628 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	617b      	str	r3, [r7, #20]
}
 800a624:	bf00      	nop
 800a626:	e7fe      	b.n	800a626 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d01f      	beq.n	800a66e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a62e:	2300      	movs	r3, #0
 800a630:	61fb      	str	r3, [r7, #28]
 800a632:	e012      	b.n	800a65a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	4413      	add	r3, r2
 800a63a:	7819      	ldrb	r1, [r3, #0]
 800a63c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	4413      	add	r3, r2
 800a642:	3334      	adds	r3, #52	; 0x34
 800a644:	460a      	mov	r2, r1
 800a646:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	4413      	add	r3, r2
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d006      	beq.n	800a662 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	3301      	adds	r3, #1
 800a658:	61fb      	str	r3, [r7, #28]
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	2b0f      	cmp	r3, #15
 800a65e:	d9e9      	bls.n	800a634 <prvInitialiseNewTask+0x64>
 800a660:	e000      	b.n	800a664 <prvInitialiseNewTask+0x94>
			{
				break;
 800a662:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a666:	2200      	movs	r2, #0
 800a668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a66c:	e003      	b.n	800a676 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a678:	2b37      	cmp	r3, #55	; 0x37
 800a67a:	d901      	bls.n	800a680 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a67c:	2337      	movs	r3, #55	; 0x37
 800a67e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a684:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a68a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68e:	2200      	movs	r2, #0
 800a690:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	3304      	adds	r3, #4
 800a696:	4618      	mov	r0, r3
 800a698:	f7ff f978 	bl	800998c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69e:	3318      	adds	r3, #24
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff f973 	bl	800998c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ce:	3354      	adds	r3, #84	; 0x54
 800a6d0:	2260      	movs	r2, #96	; 0x60
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f001 feca 	bl	800c46e <memset>
 800a6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6dc:	4a0c      	ldr	r2, [pc, #48]	; (800a710 <prvInitialiseNewTask+0x140>)
 800a6de:	659a      	str	r2, [r3, #88]	; 0x58
 800a6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e2:	4a0c      	ldr	r2, [pc, #48]	; (800a714 <prvInitialiseNewTask+0x144>)
 800a6e4:	65da      	str	r2, [r3, #92]	; 0x5c
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e8:	4a0b      	ldr	r2, [pc, #44]	; (800a718 <prvInitialiseNewTask+0x148>)
 800a6ea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6ec:	683a      	ldr	r2, [r7, #0]
 800a6ee:	68f9      	ldr	r1, [r7, #12]
 800a6f0:	69b8      	ldr	r0, [r7, #24]
 800a6f2:	f001 f953 	bl	800b99c <pxPortInitialiseStack>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d002      	beq.n	800a708 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a706:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a708:	bf00      	nop
 800a70a:	3720      	adds	r7, #32
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	0800d86c 	.word	0x0800d86c
 800a714:	0800d88c 	.word	0x0800d88c
 800a718:	0800d84c 	.word	0x0800d84c

0800a71c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a724:	f001 fa66 	bl	800bbf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a728:	4b2d      	ldr	r3, [pc, #180]	; (800a7e0 <prvAddNewTaskToReadyList+0xc4>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	3301      	adds	r3, #1
 800a72e:	4a2c      	ldr	r2, [pc, #176]	; (800a7e0 <prvAddNewTaskToReadyList+0xc4>)
 800a730:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a732:	4b2c      	ldr	r3, [pc, #176]	; (800a7e4 <prvAddNewTaskToReadyList+0xc8>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d109      	bne.n	800a74e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a73a:	4a2a      	ldr	r2, [pc, #168]	; (800a7e4 <prvAddNewTaskToReadyList+0xc8>)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a740:	4b27      	ldr	r3, [pc, #156]	; (800a7e0 <prvAddNewTaskToReadyList+0xc4>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d110      	bne.n	800a76a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a748:	f000 fc38 	bl	800afbc <prvInitialiseTaskLists>
 800a74c:	e00d      	b.n	800a76a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a74e:	4b26      	ldr	r3, [pc, #152]	; (800a7e8 <prvAddNewTaskToReadyList+0xcc>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d109      	bne.n	800a76a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a756:	4b23      	ldr	r3, [pc, #140]	; (800a7e4 <prvAddNewTaskToReadyList+0xc8>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a760:	429a      	cmp	r2, r3
 800a762:	d802      	bhi.n	800a76a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a764:	4a1f      	ldr	r2, [pc, #124]	; (800a7e4 <prvAddNewTaskToReadyList+0xc8>)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a76a:	4b20      	ldr	r3, [pc, #128]	; (800a7ec <prvAddNewTaskToReadyList+0xd0>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	3301      	adds	r3, #1
 800a770:	4a1e      	ldr	r2, [pc, #120]	; (800a7ec <prvAddNewTaskToReadyList+0xd0>)
 800a772:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a774:	4b1d      	ldr	r3, [pc, #116]	; (800a7ec <prvAddNewTaskToReadyList+0xd0>)
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a780:	4b1b      	ldr	r3, [pc, #108]	; (800a7f0 <prvAddNewTaskToReadyList+0xd4>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	429a      	cmp	r2, r3
 800a786:	d903      	bls.n	800a790 <prvAddNewTaskToReadyList+0x74>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78c:	4a18      	ldr	r2, [pc, #96]	; (800a7f0 <prvAddNewTaskToReadyList+0xd4>)
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a794:	4613      	mov	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4413      	add	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4a15      	ldr	r2, [pc, #84]	; (800a7f4 <prvAddNewTaskToReadyList+0xd8>)
 800a79e:	441a      	add	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	f7ff f8fd 	bl	80099a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a7ac:	f001 fa52 	bl	800bc54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a7b0:	4b0d      	ldr	r3, [pc, #52]	; (800a7e8 <prvAddNewTaskToReadyList+0xcc>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00e      	beq.n	800a7d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a7b8:	4b0a      	ldr	r3, [pc, #40]	; (800a7e4 <prvAddNewTaskToReadyList+0xc8>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d207      	bcs.n	800a7d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a7c6:	4b0c      	ldr	r3, [pc, #48]	; (800a7f8 <prvAddNewTaskToReadyList+0xdc>)
 800a7c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7cc:	601a      	str	r2, [r3, #0]
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7d6:	bf00      	nop
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	20009f7c 	.word	0x20009f7c
 800a7e4:	20009aa8 	.word	0x20009aa8
 800a7e8:	20009f88 	.word	0x20009f88
 800a7ec:	20009f98 	.word	0x20009f98
 800a7f0:	20009f84 	.word	0x20009f84
 800a7f4:	20009aac 	.word	0x20009aac
 800a7f8:	e000ed04 	.word	0xe000ed04

0800a7fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a804:	2300      	movs	r3, #0
 800a806:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d017      	beq.n	800a83e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a80e:	4b13      	ldr	r3, [pc, #76]	; (800a85c <vTaskDelay+0x60>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00a      	beq.n	800a82c <vTaskDelay+0x30>
	__asm volatile
 800a816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	60bb      	str	r3, [r7, #8]
}
 800a828:	bf00      	nop
 800a82a:	e7fe      	b.n	800a82a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a82c:	f000 f88a 	bl	800a944 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a830:	2100      	movs	r1, #0
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 fd10 	bl	800b258 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a838:	f000 f892 	bl	800a960 <xTaskResumeAll>
 800a83c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d107      	bne.n	800a854 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a844:	4b06      	ldr	r3, [pc, #24]	; (800a860 <vTaskDelay+0x64>)
 800a846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a854:	bf00      	nop
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	20009fa4 	.word	0x20009fa4
 800a860:	e000ed04 	.word	0xe000ed04

0800a864 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b08a      	sub	sp, #40	; 0x28
 800a868:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a86a:	2300      	movs	r3, #0
 800a86c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a86e:	2300      	movs	r3, #0
 800a870:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a872:	463a      	mov	r2, r7
 800a874:	1d39      	adds	r1, r7, #4
 800a876:	f107 0308 	add.w	r3, r7, #8
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7ff f832 	bl	80098e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a880:	6839      	ldr	r1, [r7, #0]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	9202      	str	r2, [sp, #8]
 800a888:	9301      	str	r3, [sp, #4]
 800a88a:	2300      	movs	r3, #0
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	2300      	movs	r3, #0
 800a890:	460a      	mov	r2, r1
 800a892:	4924      	ldr	r1, [pc, #144]	; (800a924 <vTaskStartScheduler+0xc0>)
 800a894:	4824      	ldr	r0, [pc, #144]	; (800a928 <vTaskStartScheduler+0xc4>)
 800a896:	f7ff fdf9 	bl	800a48c <xTaskCreateStatic>
 800a89a:	4603      	mov	r3, r0
 800a89c:	4a23      	ldr	r2, [pc, #140]	; (800a92c <vTaskStartScheduler+0xc8>)
 800a89e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a8a0:	4b22      	ldr	r3, [pc, #136]	; (800a92c <vTaskStartScheduler+0xc8>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	617b      	str	r3, [r7, #20]
 800a8ac:	e001      	b.n	800a8b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d102      	bne.n	800a8be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a8b8:	f000 fd22 	bl	800b300 <xTimerCreateTimerTask>
 800a8bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d11b      	bne.n	800a8fc <vTaskStartScheduler+0x98>
	__asm volatile
 800a8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	613b      	str	r3, [r7, #16]
}
 800a8d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8d8:	4b15      	ldr	r3, [pc, #84]	; (800a930 <vTaskStartScheduler+0xcc>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	3354      	adds	r3, #84	; 0x54
 800a8de:	4a15      	ldr	r2, [pc, #84]	; (800a934 <vTaskStartScheduler+0xd0>)
 800a8e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a8e2:	4b15      	ldr	r3, [pc, #84]	; (800a938 <vTaskStartScheduler+0xd4>)
 800a8e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a8ea:	4b14      	ldr	r3, [pc, #80]	; (800a93c <vTaskStartScheduler+0xd8>)
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a8f0:	4b13      	ldr	r3, [pc, #76]	; (800a940 <vTaskStartScheduler+0xdc>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a8f6:	f001 f8db 	bl	800bab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a8fa:	e00e      	b.n	800a91a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a902:	d10a      	bne.n	800a91a <vTaskStartScheduler+0xb6>
	__asm volatile
 800a904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	60fb      	str	r3, [r7, #12]
}
 800a916:	bf00      	nop
 800a918:	e7fe      	b.n	800a918 <vTaskStartScheduler+0xb4>
}
 800a91a:	bf00      	nop
 800a91c:	3718      	adds	r7, #24
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	0800d7b0 	.word	0x0800d7b0
 800a928:	0800af8d 	.word	0x0800af8d
 800a92c:	20009fa0 	.word	0x20009fa0
 800a930:	20009aa8 	.word	0x20009aa8
 800a934:	200002ac 	.word	0x200002ac
 800a938:	20009f9c 	.word	0x20009f9c
 800a93c:	20009f88 	.word	0x20009f88
 800a940:	20009f80 	.word	0x20009f80

0800a944 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a944:	b480      	push	{r7}
 800a946:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a948:	4b04      	ldr	r3, [pc, #16]	; (800a95c <vTaskSuspendAll+0x18>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	3301      	adds	r3, #1
 800a94e:	4a03      	ldr	r2, [pc, #12]	; (800a95c <vTaskSuspendAll+0x18>)
 800a950:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a952:	bf00      	nop
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	20009fa4 	.word	0x20009fa4

0800a960 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a966:	2300      	movs	r3, #0
 800a968:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a96a:	2300      	movs	r3, #0
 800a96c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a96e:	4b42      	ldr	r3, [pc, #264]	; (800aa78 <xTaskResumeAll+0x118>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d10a      	bne.n	800a98c <xTaskResumeAll+0x2c>
	__asm volatile
 800a976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97a:	f383 8811 	msr	BASEPRI, r3
 800a97e:	f3bf 8f6f 	isb	sy
 800a982:	f3bf 8f4f 	dsb	sy
 800a986:	603b      	str	r3, [r7, #0]
}
 800a988:	bf00      	nop
 800a98a:	e7fe      	b.n	800a98a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a98c:	f001 f932 	bl	800bbf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a990:	4b39      	ldr	r3, [pc, #228]	; (800aa78 <xTaskResumeAll+0x118>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3b01      	subs	r3, #1
 800a996:	4a38      	ldr	r2, [pc, #224]	; (800aa78 <xTaskResumeAll+0x118>)
 800a998:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a99a:	4b37      	ldr	r3, [pc, #220]	; (800aa78 <xTaskResumeAll+0x118>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d162      	bne.n	800aa68 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a9a2:	4b36      	ldr	r3, [pc, #216]	; (800aa7c <xTaskResumeAll+0x11c>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d05e      	beq.n	800aa68 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9aa:	e02f      	b.n	800aa0c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9ac:	4b34      	ldr	r3, [pc, #208]	; (800aa80 <xTaskResumeAll+0x120>)
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	3318      	adds	r3, #24
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7ff f851 	bl	8009a60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7ff f84c 	bl	8009a60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9cc:	4b2d      	ldr	r3, [pc, #180]	; (800aa84 <xTaskResumeAll+0x124>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d903      	bls.n	800a9dc <xTaskResumeAll+0x7c>
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d8:	4a2a      	ldr	r2, [pc, #168]	; (800aa84 <xTaskResumeAll+0x124>)
 800a9da:	6013      	str	r3, [r2, #0]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	4413      	add	r3, r2
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4a27      	ldr	r2, [pc, #156]	; (800aa88 <xTaskResumeAll+0x128>)
 800a9ea:	441a      	add	r2, r3
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	3304      	adds	r3, #4
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4610      	mov	r0, r2
 800a9f4:	f7fe ffd7 	bl	80099a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9fc:	4b23      	ldr	r3, [pc, #140]	; (800aa8c <xTaskResumeAll+0x12c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d302      	bcc.n	800aa0c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aa06:	4b22      	ldr	r3, [pc, #136]	; (800aa90 <xTaskResumeAll+0x130>)
 800aa08:	2201      	movs	r2, #1
 800aa0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa0c:	4b1c      	ldr	r3, [pc, #112]	; (800aa80 <xTaskResumeAll+0x120>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1cb      	bne.n	800a9ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa1a:	f000 fb71 	bl	800b100 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aa1e:	4b1d      	ldr	r3, [pc, #116]	; (800aa94 <xTaskResumeAll+0x134>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d010      	beq.n	800aa4c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa2a:	f000 f859 	bl	800aae0 <xTaskIncrementTick>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d002      	beq.n	800aa3a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aa34:	4b16      	ldr	r3, [pc, #88]	; (800aa90 <xTaskResumeAll+0x130>)
 800aa36:	2201      	movs	r2, #1
 800aa38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d1f1      	bne.n	800aa2a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aa46:	4b13      	ldr	r3, [pc, #76]	; (800aa94 <xTaskResumeAll+0x134>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa4c:	4b10      	ldr	r3, [pc, #64]	; (800aa90 <xTaskResumeAll+0x130>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d009      	beq.n	800aa68 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa54:	2301      	movs	r3, #1
 800aa56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa58:	4b0f      	ldr	r3, [pc, #60]	; (800aa98 <xTaskResumeAll+0x138>)
 800aa5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa68:	f001 f8f4 	bl	800bc54 <vPortExitCritical>

	return xAlreadyYielded;
 800aa6c:	68bb      	ldr	r3, [r7, #8]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	20009fa4 	.word	0x20009fa4
 800aa7c:	20009f7c 	.word	0x20009f7c
 800aa80:	20009f3c 	.word	0x20009f3c
 800aa84:	20009f84 	.word	0x20009f84
 800aa88:	20009aac 	.word	0x20009aac
 800aa8c:	20009aa8 	.word	0x20009aa8
 800aa90:	20009f90 	.word	0x20009f90
 800aa94:	20009f8c 	.word	0x20009f8c
 800aa98:	e000ed04 	.word	0xe000ed04

0800aa9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aaa2:	4b05      	ldr	r3, [pc, #20]	; (800aab8 <xTaskGetTickCount+0x1c>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aaa8:	687b      	ldr	r3, [r7, #4]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	20009f80 	.word	0x20009f80

0800aabc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aac2:	f001 f979 	bl	800bdb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800aac6:	2300      	movs	r3, #0
 800aac8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800aaca:	4b04      	ldr	r3, [pc, #16]	; (800aadc <xTaskGetTickCountFromISR+0x20>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aad0:	683b      	ldr	r3, [r7, #0]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	20009f80 	.word	0x20009f80

0800aae0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aae6:	2300      	movs	r3, #0
 800aae8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaea:	4b4f      	ldr	r3, [pc, #316]	; (800ac28 <xTaskIncrementTick+0x148>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f040 808f 	bne.w	800ac12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aaf4:	4b4d      	ldr	r3, [pc, #308]	; (800ac2c <xTaskIncrementTick+0x14c>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aafc:	4a4b      	ldr	r2, [pc, #300]	; (800ac2c <xTaskIncrementTick+0x14c>)
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d120      	bne.n	800ab4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab08:	4b49      	ldr	r3, [pc, #292]	; (800ac30 <xTaskIncrementTick+0x150>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00a      	beq.n	800ab28 <xTaskIncrementTick+0x48>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	603b      	str	r3, [r7, #0]
}
 800ab24:	bf00      	nop
 800ab26:	e7fe      	b.n	800ab26 <xTaskIncrementTick+0x46>
 800ab28:	4b41      	ldr	r3, [pc, #260]	; (800ac30 <xTaskIncrementTick+0x150>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	60fb      	str	r3, [r7, #12]
 800ab2e:	4b41      	ldr	r3, [pc, #260]	; (800ac34 <xTaskIncrementTick+0x154>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a3f      	ldr	r2, [pc, #252]	; (800ac30 <xTaskIncrementTick+0x150>)
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	4a3f      	ldr	r2, [pc, #252]	; (800ac34 <xTaskIncrementTick+0x154>)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6013      	str	r3, [r2, #0]
 800ab3c:	4b3e      	ldr	r3, [pc, #248]	; (800ac38 <xTaskIncrementTick+0x158>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	3301      	adds	r3, #1
 800ab42:	4a3d      	ldr	r2, [pc, #244]	; (800ac38 <xTaskIncrementTick+0x158>)
 800ab44:	6013      	str	r3, [r2, #0]
 800ab46:	f000 fadb 	bl	800b100 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab4a:	4b3c      	ldr	r3, [pc, #240]	; (800ac3c <xTaskIncrementTick+0x15c>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d349      	bcc.n	800abe8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab54:	4b36      	ldr	r3, [pc, #216]	; (800ac30 <xTaskIncrementTick+0x150>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d104      	bne.n	800ab68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab5e:	4b37      	ldr	r3, [pc, #220]	; (800ac3c <xTaskIncrementTick+0x15c>)
 800ab60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab64:	601a      	str	r2, [r3, #0]
					break;
 800ab66:	e03f      	b.n	800abe8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab68:	4b31      	ldr	r3, [pc, #196]	; (800ac30 <xTaskIncrementTick+0x150>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d203      	bcs.n	800ab88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab80:	4a2e      	ldr	r2, [pc, #184]	; (800ac3c <xTaskIncrementTick+0x15c>)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab86:	e02f      	b.n	800abe8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fe ff67 	bl	8009a60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d004      	beq.n	800aba4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	3318      	adds	r3, #24
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fe ff5e 	bl	8009a60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba8:	4b25      	ldr	r3, [pc, #148]	; (800ac40 <xTaskIncrementTick+0x160>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	429a      	cmp	r2, r3
 800abae:	d903      	bls.n	800abb8 <xTaskIncrementTick+0xd8>
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb4:	4a22      	ldr	r2, [pc, #136]	; (800ac40 <xTaskIncrementTick+0x160>)
 800abb6:	6013      	str	r3, [r2, #0]
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abbc:	4613      	mov	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	4413      	add	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4a1f      	ldr	r2, [pc, #124]	; (800ac44 <xTaskIncrementTick+0x164>)
 800abc6:	441a      	add	r2, r3
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	3304      	adds	r3, #4
 800abcc:	4619      	mov	r1, r3
 800abce:	4610      	mov	r0, r2
 800abd0:	f7fe fee9 	bl	80099a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd8:	4b1b      	ldr	r3, [pc, #108]	; (800ac48 <xTaskIncrementTick+0x168>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abde:	429a      	cmp	r2, r3
 800abe0:	d3b8      	bcc.n	800ab54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800abe2:	2301      	movs	r3, #1
 800abe4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abe6:	e7b5      	b.n	800ab54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800abe8:	4b17      	ldr	r3, [pc, #92]	; (800ac48 <xTaskIncrementTick+0x168>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abee:	4915      	ldr	r1, [pc, #84]	; (800ac44 <xTaskIncrementTick+0x164>)
 800abf0:	4613      	mov	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	440b      	add	r3, r1
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d901      	bls.n	800ac04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ac00:	2301      	movs	r3, #1
 800ac02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ac04:	4b11      	ldr	r3, [pc, #68]	; (800ac4c <xTaskIncrementTick+0x16c>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d007      	beq.n	800ac1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	617b      	str	r3, [r7, #20]
 800ac10:	e004      	b.n	800ac1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ac12:	4b0f      	ldr	r3, [pc, #60]	; (800ac50 <xTaskIncrementTick+0x170>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	3301      	adds	r3, #1
 800ac18:	4a0d      	ldr	r2, [pc, #52]	; (800ac50 <xTaskIncrementTick+0x170>)
 800ac1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ac1c:	697b      	ldr	r3, [r7, #20]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3718      	adds	r7, #24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	20009fa4 	.word	0x20009fa4
 800ac2c:	20009f80 	.word	0x20009f80
 800ac30:	20009f34 	.word	0x20009f34
 800ac34:	20009f38 	.word	0x20009f38
 800ac38:	20009f94 	.word	0x20009f94
 800ac3c:	20009f9c 	.word	0x20009f9c
 800ac40:	20009f84 	.word	0x20009f84
 800ac44:	20009aac 	.word	0x20009aac
 800ac48:	20009aa8 	.word	0x20009aa8
 800ac4c:	20009f90 	.word	0x20009f90
 800ac50:	20009f8c 	.word	0x20009f8c

0800ac54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac5a:	4b2a      	ldr	r3, [pc, #168]	; (800ad04 <vTaskSwitchContext+0xb0>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d003      	beq.n	800ac6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac62:	4b29      	ldr	r3, [pc, #164]	; (800ad08 <vTaskSwitchContext+0xb4>)
 800ac64:	2201      	movs	r2, #1
 800ac66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac68:	e046      	b.n	800acf8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ac6a:	4b27      	ldr	r3, [pc, #156]	; (800ad08 <vTaskSwitchContext+0xb4>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac70:	4b26      	ldr	r3, [pc, #152]	; (800ad0c <vTaskSwitchContext+0xb8>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	60fb      	str	r3, [r7, #12]
 800ac76:	e010      	b.n	800ac9a <vTaskSwitchContext+0x46>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10a      	bne.n	800ac94 <vTaskSwitchContext+0x40>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	607b      	str	r3, [r7, #4]
}
 800ac90:	bf00      	nop
 800ac92:	e7fe      	b.n	800ac92 <vTaskSwitchContext+0x3e>
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	3b01      	subs	r3, #1
 800ac98:	60fb      	str	r3, [r7, #12]
 800ac9a:	491d      	ldr	r1, [pc, #116]	; (800ad10 <vTaskSwitchContext+0xbc>)
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	4413      	add	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	440b      	add	r3, r1
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d0e4      	beq.n	800ac78 <vTaskSwitchContext+0x24>
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	4613      	mov	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4413      	add	r3, r2
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	4a15      	ldr	r2, [pc, #84]	; (800ad10 <vTaskSwitchContext+0xbc>)
 800acba:	4413      	add	r3, r2
 800acbc:	60bb      	str	r3, [r7, #8]
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	685a      	ldr	r2, [r3, #4]
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	605a      	str	r2, [r3, #4]
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	685a      	ldr	r2, [r3, #4]
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	3308      	adds	r3, #8
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d104      	bne.n	800acde <vTaskSwitchContext+0x8a>
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	685a      	ldr	r2, [r3, #4]
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	605a      	str	r2, [r3, #4]
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	4a0b      	ldr	r2, [pc, #44]	; (800ad14 <vTaskSwitchContext+0xc0>)
 800ace6:	6013      	str	r3, [r2, #0]
 800ace8:	4a08      	ldr	r2, [pc, #32]	; (800ad0c <vTaskSwitchContext+0xb8>)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800acee:	4b09      	ldr	r3, [pc, #36]	; (800ad14 <vTaskSwitchContext+0xc0>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3354      	adds	r3, #84	; 0x54
 800acf4:	4a08      	ldr	r2, [pc, #32]	; (800ad18 <vTaskSwitchContext+0xc4>)
 800acf6:	6013      	str	r3, [r2, #0]
}
 800acf8:	bf00      	nop
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr
 800ad04:	20009fa4 	.word	0x20009fa4
 800ad08:	20009f90 	.word	0x20009f90
 800ad0c:	20009f84 	.word	0x20009f84
 800ad10:	20009aac 	.word	0x20009aac
 800ad14:	20009aa8 	.word	0x20009aa8
 800ad18:	200002ac 	.word	0x200002ac

0800ad1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d10a      	bne.n	800ad42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ad2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad30:	f383 8811 	msr	BASEPRI, r3
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	60fb      	str	r3, [r7, #12]
}
 800ad3e:	bf00      	nop
 800ad40:	e7fe      	b.n	800ad40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad42:	4b07      	ldr	r3, [pc, #28]	; (800ad60 <vTaskPlaceOnEventList+0x44>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3318      	adds	r3, #24
 800ad48:	4619      	mov	r1, r3
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f7fe fe4f 	bl	80099ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad50:	2101      	movs	r1, #1
 800ad52:	6838      	ldr	r0, [r7, #0]
 800ad54:	f000 fa80 	bl	800b258 <prvAddCurrentTaskToDelayedList>
}
 800ad58:	bf00      	nop
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	20009aa8 	.word	0x20009aa8

0800ad64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d10a      	bne.n	800ad8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ad76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	617b      	str	r3, [r7, #20]
}
 800ad88:	bf00      	nop
 800ad8a:	e7fe      	b.n	800ad8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad8c:	4b0a      	ldr	r3, [pc, #40]	; (800adb8 <vTaskPlaceOnEventListRestricted+0x54>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	3318      	adds	r3, #24
 800ad92:	4619      	mov	r1, r3
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f7fe fe06 	bl	80099a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d002      	beq.n	800ada6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ada0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ada4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ada6:	6879      	ldr	r1, [r7, #4]
 800ada8:	68b8      	ldr	r0, [r7, #8]
 800adaa:	f000 fa55 	bl	800b258 <prvAddCurrentTaskToDelayedList>
	}
 800adae:	bf00      	nop
 800adb0:	3718      	adds	r7, #24
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	20009aa8 	.word	0x20009aa8

0800adbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10a      	bne.n	800ade8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800add2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add6:	f383 8811 	msr	BASEPRI, r3
 800adda:	f3bf 8f6f 	isb	sy
 800adde:	f3bf 8f4f 	dsb	sy
 800ade2:	60fb      	str	r3, [r7, #12]
}
 800ade4:	bf00      	nop
 800ade6:	e7fe      	b.n	800ade6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	3318      	adds	r3, #24
 800adec:	4618      	mov	r0, r3
 800adee:	f7fe fe37 	bl	8009a60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adf2:	4b1e      	ldr	r3, [pc, #120]	; (800ae6c <xTaskRemoveFromEventList+0xb0>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d11d      	bne.n	800ae36 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	3304      	adds	r3, #4
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7fe fe2e 	bl	8009a60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae08:	4b19      	ldr	r3, [pc, #100]	; (800ae70 <xTaskRemoveFromEventList+0xb4>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d903      	bls.n	800ae18 <xTaskRemoveFromEventList+0x5c>
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae14:	4a16      	ldr	r2, [pc, #88]	; (800ae70 <xTaskRemoveFromEventList+0xb4>)
 800ae16:	6013      	str	r3, [r2, #0]
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4a13      	ldr	r2, [pc, #76]	; (800ae74 <xTaskRemoveFromEventList+0xb8>)
 800ae26:	441a      	add	r2, r3
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	4610      	mov	r0, r2
 800ae30:	f7fe fdb9 	bl	80099a6 <vListInsertEnd>
 800ae34:	e005      	b.n	800ae42 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	3318      	adds	r3, #24
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	480e      	ldr	r0, [pc, #56]	; (800ae78 <xTaskRemoveFromEventList+0xbc>)
 800ae3e:	f7fe fdb2 	bl	80099a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae46:	4b0d      	ldr	r3, [pc, #52]	; (800ae7c <xTaskRemoveFromEventList+0xc0>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d905      	bls.n	800ae5c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae50:	2301      	movs	r3, #1
 800ae52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae54:	4b0a      	ldr	r3, [pc, #40]	; (800ae80 <xTaskRemoveFromEventList+0xc4>)
 800ae56:	2201      	movs	r2, #1
 800ae58:	601a      	str	r2, [r3, #0]
 800ae5a:	e001      	b.n	800ae60 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae60:	697b      	ldr	r3, [r7, #20]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3718      	adds	r7, #24
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20009fa4 	.word	0x20009fa4
 800ae70:	20009f84 	.word	0x20009f84
 800ae74:	20009aac 	.word	0x20009aac
 800ae78:	20009f3c 	.word	0x20009f3c
 800ae7c:	20009aa8 	.word	0x20009aa8
 800ae80:	20009f90 	.word	0x20009f90

0800ae84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae8c:	4b06      	ldr	r3, [pc, #24]	; (800aea8 <vTaskInternalSetTimeOutState+0x24>)
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae94:	4b05      	ldr	r3, [pc, #20]	; (800aeac <vTaskInternalSetTimeOutState+0x28>)
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	605a      	str	r2, [r3, #4]
}
 800ae9c:	bf00      	nop
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	20009f94 	.word	0x20009f94
 800aeac:	20009f80 	.word	0x20009f80

0800aeb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b088      	sub	sp, #32
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10a      	bne.n	800aed6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec4:	f383 8811 	msr	BASEPRI, r3
 800aec8:	f3bf 8f6f 	isb	sy
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	613b      	str	r3, [r7, #16]
}
 800aed2:	bf00      	nop
 800aed4:	e7fe      	b.n	800aed4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10a      	bne.n	800aef2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee0:	f383 8811 	msr	BASEPRI, r3
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	60fb      	str	r3, [r7, #12]
}
 800aeee:	bf00      	nop
 800aef0:	e7fe      	b.n	800aef0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aef2:	f000 fe7f 	bl	800bbf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aef6:	4b1d      	ldr	r3, [pc, #116]	; (800af6c <xTaskCheckForTimeOut+0xbc>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	69ba      	ldr	r2, [r7, #24]
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af0e:	d102      	bne.n	800af16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800af10:	2300      	movs	r3, #0
 800af12:	61fb      	str	r3, [r7, #28]
 800af14:	e023      	b.n	800af5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	4b15      	ldr	r3, [pc, #84]	; (800af70 <xTaskCheckForTimeOut+0xc0>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d007      	beq.n	800af32 <xTaskCheckForTimeOut+0x82>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	69ba      	ldr	r2, [r7, #24]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d302      	bcc.n	800af32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af2c:	2301      	movs	r3, #1
 800af2e:	61fb      	str	r3, [r7, #28]
 800af30:	e015      	b.n	800af5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d20b      	bcs.n	800af54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	1ad2      	subs	r2, r2, r3
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7ff ff9b 	bl	800ae84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af4e:	2300      	movs	r3, #0
 800af50:	61fb      	str	r3, [r7, #28]
 800af52:	e004      	b.n	800af5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	2200      	movs	r2, #0
 800af58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af5a:	2301      	movs	r3, #1
 800af5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af5e:	f000 fe79 	bl	800bc54 <vPortExitCritical>

	return xReturn;
 800af62:	69fb      	ldr	r3, [r7, #28]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3720      	adds	r7, #32
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	20009f80 	.word	0x20009f80
 800af70:	20009f94 	.word	0x20009f94

0800af74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af74:	b480      	push	{r7}
 800af76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af78:	4b03      	ldr	r3, [pc, #12]	; (800af88 <vTaskMissedYield+0x14>)
 800af7a:	2201      	movs	r2, #1
 800af7c:	601a      	str	r2, [r3, #0]
}
 800af7e:	bf00      	nop
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	20009f90 	.word	0x20009f90

0800af8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af94:	f000 f852 	bl	800b03c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af98:	4b06      	ldr	r3, [pc, #24]	; (800afb4 <prvIdleTask+0x28>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d9f9      	bls.n	800af94 <prvIdleTask+0x8>
			{
				taskYIELD();
 800afa0:	4b05      	ldr	r3, [pc, #20]	; (800afb8 <prvIdleTask+0x2c>)
 800afa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afa6:	601a      	str	r2, [r3, #0]
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800afb0:	e7f0      	b.n	800af94 <prvIdleTask+0x8>
 800afb2:	bf00      	nop
 800afb4:	20009aac 	.word	0x20009aac
 800afb8:	e000ed04 	.word	0xe000ed04

0800afbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afc2:	2300      	movs	r3, #0
 800afc4:	607b      	str	r3, [r7, #4]
 800afc6:	e00c      	b.n	800afe2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	4613      	mov	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4413      	add	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	4a12      	ldr	r2, [pc, #72]	; (800b01c <prvInitialiseTaskLists+0x60>)
 800afd4:	4413      	add	r3, r2
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fe fcb8 	bl	800994c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3301      	adds	r3, #1
 800afe0:	607b      	str	r3, [r7, #4]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2b37      	cmp	r3, #55	; 0x37
 800afe6:	d9ef      	bls.n	800afc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afe8:	480d      	ldr	r0, [pc, #52]	; (800b020 <prvInitialiseTaskLists+0x64>)
 800afea:	f7fe fcaf 	bl	800994c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afee:	480d      	ldr	r0, [pc, #52]	; (800b024 <prvInitialiseTaskLists+0x68>)
 800aff0:	f7fe fcac 	bl	800994c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aff4:	480c      	ldr	r0, [pc, #48]	; (800b028 <prvInitialiseTaskLists+0x6c>)
 800aff6:	f7fe fca9 	bl	800994c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800affa:	480c      	ldr	r0, [pc, #48]	; (800b02c <prvInitialiseTaskLists+0x70>)
 800affc:	f7fe fca6 	bl	800994c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b000:	480b      	ldr	r0, [pc, #44]	; (800b030 <prvInitialiseTaskLists+0x74>)
 800b002:	f7fe fca3 	bl	800994c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b006:	4b0b      	ldr	r3, [pc, #44]	; (800b034 <prvInitialiseTaskLists+0x78>)
 800b008:	4a05      	ldr	r2, [pc, #20]	; (800b020 <prvInitialiseTaskLists+0x64>)
 800b00a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b00c:	4b0a      	ldr	r3, [pc, #40]	; (800b038 <prvInitialiseTaskLists+0x7c>)
 800b00e:	4a05      	ldr	r2, [pc, #20]	; (800b024 <prvInitialiseTaskLists+0x68>)
 800b010:	601a      	str	r2, [r3, #0]
}
 800b012:	bf00      	nop
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	20009aac 	.word	0x20009aac
 800b020:	20009f0c 	.word	0x20009f0c
 800b024:	20009f20 	.word	0x20009f20
 800b028:	20009f3c 	.word	0x20009f3c
 800b02c:	20009f50 	.word	0x20009f50
 800b030:	20009f68 	.word	0x20009f68
 800b034:	20009f34 	.word	0x20009f34
 800b038:	20009f38 	.word	0x20009f38

0800b03c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b042:	e019      	b.n	800b078 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b044:	f000 fdd6 	bl	800bbf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b048:	4b10      	ldr	r3, [pc, #64]	; (800b08c <prvCheckTasksWaitingTermination+0x50>)
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	3304      	adds	r3, #4
 800b054:	4618      	mov	r0, r3
 800b056:	f7fe fd03 	bl	8009a60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b05a:	4b0d      	ldr	r3, [pc, #52]	; (800b090 <prvCheckTasksWaitingTermination+0x54>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	3b01      	subs	r3, #1
 800b060:	4a0b      	ldr	r2, [pc, #44]	; (800b090 <prvCheckTasksWaitingTermination+0x54>)
 800b062:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b064:	4b0b      	ldr	r3, [pc, #44]	; (800b094 <prvCheckTasksWaitingTermination+0x58>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	3b01      	subs	r3, #1
 800b06a:	4a0a      	ldr	r2, [pc, #40]	; (800b094 <prvCheckTasksWaitingTermination+0x58>)
 800b06c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b06e:	f000 fdf1 	bl	800bc54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f810 	bl	800b098 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b078:	4b06      	ldr	r3, [pc, #24]	; (800b094 <prvCheckTasksWaitingTermination+0x58>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1e1      	bne.n	800b044 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b080:	bf00      	nop
 800b082:	bf00      	nop
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	20009f50 	.word	0x20009f50
 800b090:	20009f7c 	.word	0x20009f7c
 800b094:	20009f64 	.word	0x20009f64

0800b098 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	3354      	adds	r3, #84	; 0x54
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f001 fabb 	bl	800c620 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d108      	bne.n	800b0c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f000 ff89 	bl	800bfd0 <vPortFree>
				vPortFree( pxTCB );
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 ff86 	bl	800bfd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b0c4:	e018      	b.n	800b0f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d103      	bne.n	800b0d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 ff7d 	bl	800bfd0 <vPortFree>
	}
 800b0d6:	e00f      	b.n	800b0f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d00a      	beq.n	800b0f8 <prvDeleteTCB+0x60>
	__asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	60fb      	str	r3, [r7, #12]
}
 800b0f4:	bf00      	nop
 800b0f6:	e7fe      	b.n	800b0f6 <prvDeleteTCB+0x5e>
	}
 800b0f8:	bf00      	nop
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b106:	4b0c      	ldr	r3, [pc, #48]	; (800b138 <prvResetNextTaskUnblockTime+0x38>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d104      	bne.n	800b11a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b110:	4b0a      	ldr	r3, [pc, #40]	; (800b13c <prvResetNextTaskUnblockTime+0x3c>)
 800b112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b116:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b118:	e008      	b.n	800b12c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b11a:	4b07      	ldr	r3, [pc, #28]	; (800b138 <prvResetNextTaskUnblockTime+0x38>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	4a04      	ldr	r2, [pc, #16]	; (800b13c <prvResetNextTaskUnblockTime+0x3c>)
 800b12a:	6013      	str	r3, [r2, #0]
}
 800b12c:	bf00      	nop
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr
 800b138:	20009f34 	.word	0x20009f34
 800b13c:	20009f9c 	.word	0x20009f9c

0800b140 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b146:	4b0b      	ldr	r3, [pc, #44]	; (800b174 <xTaskGetSchedulerState+0x34>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d102      	bne.n	800b154 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b14e:	2301      	movs	r3, #1
 800b150:	607b      	str	r3, [r7, #4]
 800b152:	e008      	b.n	800b166 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b154:	4b08      	ldr	r3, [pc, #32]	; (800b178 <xTaskGetSchedulerState+0x38>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d102      	bne.n	800b162 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b15c:	2302      	movs	r3, #2
 800b15e:	607b      	str	r3, [r7, #4]
 800b160:	e001      	b.n	800b166 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b162:	2300      	movs	r3, #0
 800b164:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b166:	687b      	ldr	r3, [r7, #4]
	}
 800b168:	4618      	mov	r0, r3
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr
 800b174:	20009f88 	.word	0x20009f88
 800b178:	20009fa4 	.word	0x20009fa4

0800b17c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b188:	2300      	movs	r3, #0
 800b18a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d056      	beq.n	800b240 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b192:	4b2e      	ldr	r3, [pc, #184]	; (800b24c <xTaskPriorityDisinherit+0xd0>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	693a      	ldr	r2, [r7, #16]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d00a      	beq.n	800b1b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a0:	f383 8811 	msr	BASEPRI, r3
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	60fb      	str	r3, [r7, #12]
}
 800b1ae:	bf00      	nop
 800b1b0:	e7fe      	b.n	800b1b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10a      	bne.n	800b1d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1be:	f383 8811 	msr	BASEPRI, r3
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	60bb      	str	r3, [r7, #8]
}
 800b1cc:	bf00      	nop
 800b1ce:	e7fe      	b.n	800b1ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1d4:	1e5a      	subs	r2, r3, #1
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d02c      	beq.n	800b240 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d128      	bne.n	800b240 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fe fc34 	bl	8009a60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b204:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b210:	4b0f      	ldr	r3, [pc, #60]	; (800b250 <xTaskPriorityDisinherit+0xd4>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	429a      	cmp	r2, r3
 800b216:	d903      	bls.n	800b220 <xTaskPriorityDisinherit+0xa4>
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21c:	4a0c      	ldr	r2, [pc, #48]	; (800b250 <xTaskPriorityDisinherit+0xd4>)
 800b21e:	6013      	str	r3, [r2, #0]
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b224:	4613      	mov	r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	4a09      	ldr	r2, [pc, #36]	; (800b254 <xTaskPriorityDisinherit+0xd8>)
 800b22e:	441a      	add	r2, r3
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	3304      	adds	r3, #4
 800b234:	4619      	mov	r1, r3
 800b236:	4610      	mov	r0, r2
 800b238:	f7fe fbb5 	bl	80099a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b23c:	2301      	movs	r3, #1
 800b23e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b240:	697b      	ldr	r3, [r7, #20]
	}
 800b242:	4618      	mov	r0, r3
 800b244:	3718      	adds	r7, #24
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	20009aa8 	.word	0x20009aa8
 800b250:	20009f84 	.word	0x20009f84
 800b254:	20009aac 	.word	0x20009aac

0800b258 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b262:	4b21      	ldr	r3, [pc, #132]	; (800b2e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b268:	4b20      	ldr	r3, [pc, #128]	; (800b2ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3304      	adds	r3, #4
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fe fbf6 	bl	8009a60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b27a:	d10a      	bne.n	800b292 <prvAddCurrentTaskToDelayedList+0x3a>
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d007      	beq.n	800b292 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b282:	4b1a      	ldr	r3, [pc, #104]	; (800b2ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3304      	adds	r3, #4
 800b288:	4619      	mov	r1, r3
 800b28a:	4819      	ldr	r0, [pc, #100]	; (800b2f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b28c:	f7fe fb8b 	bl	80099a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b290:	e026      	b.n	800b2e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4413      	add	r3, r2
 800b298:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b29a:	4b14      	ldr	r3, [pc, #80]	; (800b2ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d209      	bcs.n	800b2be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2aa:	4b12      	ldr	r3, [pc, #72]	; (800b2f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	4b0f      	ldr	r3, [pc, #60]	; (800b2ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	4610      	mov	r0, r2
 800b2b8:	f7fe fb99 	bl	80099ee <vListInsert>
}
 800b2bc:	e010      	b.n	800b2e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2be:	4b0e      	ldr	r3, [pc, #56]	; (800b2f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	4b0a      	ldr	r3, [pc, #40]	; (800b2ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	f7fe fb8f 	bl	80099ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2d0:	4b0a      	ldr	r3, [pc, #40]	; (800b2fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d202      	bcs.n	800b2e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b2da:	4a08      	ldr	r2, [pc, #32]	; (800b2fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	6013      	str	r3, [r2, #0]
}
 800b2e0:	bf00      	nop
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	20009f80 	.word	0x20009f80
 800b2ec:	20009aa8 	.word	0x20009aa8
 800b2f0:	20009f68 	.word	0x20009f68
 800b2f4:	20009f38 	.word	0x20009f38
 800b2f8:	20009f34 	.word	0x20009f34
 800b2fc:	20009f9c 	.word	0x20009f9c

0800b300 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08a      	sub	sp, #40	; 0x28
 800b304:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b306:	2300      	movs	r3, #0
 800b308:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b30a:	f000 fb07 	bl	800b91c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b30e:	4b1c      	ldr	r3, [pc, #112]	; (800b380 <xTimerCreateTimerTask+0x80>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d021      	beq.n	800b35a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b316:	2300      	movs	r3, #0
 800b318:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b31a:	2300      	movs	r3, #0
 800b31c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b31e:	1d3a      	adds	r2, r7, #4
 800b320:	f107 0108 	add.w	r1, r7, #8
 800b324:	f107 030c 	add.w	r3, r7, #12
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fe faf5 	bl	8009918 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b32e:	6879      	ldr	r1, [r7, #4]
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	9202      	str	r2, [sp, #8]
 800b336:	9301      	str	r3, [sp, #4]
 800b338:	2302      	movs	r3, #2
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	2300      	movs	r3, #0
 800b33e:	460a      	mov	r2, r1
 800b340:	4910      	ldr	r1, [pc, #64]	; (800b384 <xTimerCreateTimerTask+0x84>)
 800b342:	4811      	ldr	r0, [pc, #68]	; (800b388 <xTimerCreateTimerTask+0x88>)
 800b344:	f7ff f8a2 	bl	800a48c <xTaskCreateStatic>
 800b348:	4603      	mov	r3, r0
 800b34a:	4a10      	ldr	r2, [pc, #64]	; (800b38c <xTimerCreateTimerTask+0x8c>)
 800b34c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b34e:	4b0f      	ldr	r3, [pc, #60]	; (800b38c <xTimerCreateTimerTask+0x8c>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b356:	2301      	movs	r3, #1
 800b358:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10a      	bne.n	800b376 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	613b      	str	r3, [r7, #16]
}
 800b372:	bf00      	nop
 800b374:	e7fe      	b.n	800b374 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b376:	697b      	ldr	r3, [r7, #20]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3718      	adds	r7, #24
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	20009fd8 	.word	0x20009fd8
 800b384:	0800d7b8 	.word	0x0800d7b8
 800b388:	0800b4c5 	.word	0x0800b4c5
 800b38c:	20009fdc 	.word	0x20009fdc

0800b390 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b08a      	sub	sp, #40	; 0x28
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
 800b39c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10a      	bne.n	800b3be <xTimerGenericCommand+0x2e>
	__asm volatile
 800b3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ac:	f383 8811 	msr	BASEPRI, r3
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	623b      	str	r3, [r7, #32]
}
 800b3ba:	bf00      	nop
 800b3bc:	e7fe      	b.n	800b3bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b3be:	4b1a      	ldr	r3, [pc, #104]	; (800b428 <xTimerGenericCommand+0x98>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d02a      	beq.n	800b41c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	2b05      	cmp	r3, #5
 800b3d6:	dc18      	bgt.n	800b40a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b3d8:	f7ff feb2 	bl	800b140 <xTaskGetSchedulerState>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b02      	cmp	r3, #2
 800b3e0:	d109      	bne.n	800b3f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b3e2:	4b11      	ldr	r3, [pc, #68]	; (800b428 <xTimerGenericCommand+0x98>)
 800b3e4:	6818      	ldr	r0, [r3, #0]
 800b3e6:	f107 0110 	add.w	r1, r7, #16
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ee:	f7fe fc65 	bl	8009cbc <xQueueGenericSend>
 800b3f2:	6278      	str	r0, [r7, #36]	; 0x24
 800b3f4:	e012      	b.n	800b41c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b3f6:	4b0c      	ldr	r3, [pc, #48]	; (800b428 <xTimerGenericCommand+0x98>)
 800b3f8:	6818      	ldr	r0, [r3, #0]
 800b3fa:	f107 0110 	add.w	r1, r7, #16
 800b3fe:	2300      	movs	r3, #0
 800b400:	2200      	movs	r2, #0
 800b402:	f7fe fc5b 	bl	8009cbc <xQueueGenericSend>
 800b406:	6278      	str	r0, [r7, #36]	; 0x24
 800b408:	e008      	b.n	800b41c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b40a:	4b07      	ldr	r3, [pc, #28]	; (800b428 <xTimerGenericCommand+0x98>)
 800b40c:	6818      	ldr	r0, [r3, #0]
 800b40e:	f107 0110 	add.w	r1, r7, #16
 800b412:	2300      	movs	r3, #0
 800b414:	683a      	ldr	r2, [r7, #0]
 800b416:	f7fe fd4f 	bl	8009eb8 <xQueueGenericSendFromISR>
 800b41a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3728      	adds	r7, #40	; 0x28
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	20009fd8 	.word	0x20009fd8

0800b42c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b088      	sub	sp, #32
 800b430:	af02      	add	r7, sp, #8
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b436:	4b22      	ldr	r3, [pc, #136]	; (800b4c0 <prvProcessExpiredTimer+0x94>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	3304      	adds	r3, #4
 800b444:	4618      	mov	r0, r3
 800b446:	f7fe fb0b 	bl	8009a60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b450:	f003 0304 	and.w	r3, r3, #4
 800b454:	2b00      	cmp	r3, #0
 800b456:	d022      	beq.n	800b49e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	699a      	ldr	r2, [r3, #24]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	18d1      	adds	r1, r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	6978      	ldr	r0, [r7, #20]
 800b466:	f000 f8d1 	bl	800b60c <prvInsertTimerInActiveList>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d01f      	beq.n	800b4b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b470:	2300      	movs	r3, #0
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	2300      	movs	r3, #0
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	2100      	movs	r1, #0
 800b47a:	6978      	ldr	r0, [r7, #20]
 800b47c:	f7ff ff88 	bl	800b390 <xTimerGenericCommand>
 800b480:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d113      	bne.n	800b4b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48c:	f383 8811 	msr	BASEPRI, r3
 800b490:	f3bf 8f6f 	isb	sy
 800b494:	f3bf 8f4f 	dsb	sy
 800b498:	60fb      	str	r3, [r7, #12]
}
 800b49a:	bf00      	nop
 800b49c:	e7fe      	b.n	800b49c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4a4:	f023 0301 	bic.w	r3, r3, #1
 800b4a8:	b2da      	uxtb	r2, r3
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	6a1b      	ldr	r3, [r3, #32]
 800b4b4:	6978      	ldr	r0, [r7, #20]
 800b4b6:	4798      	blx	r3
}
 800b4b8:	bf00      	nop
 800b4ba:	3718      	adds	r7, #24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	20009fd0 	.word	0x20009fd0

0800b4c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4cc:	f107 0308 	add.w	r3, r7, #8
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f000 f857 	bl	800b584 <prvGetNextExpireTime>
 800b4d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	4619      	mov	r1, r3
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f000 f803 	bl	800b4e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b4e2:	f000 f8d5 	bl	800b690 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4e6:	e7f1      	b.n	800b4cc <prvTimerTask+0x8>

0800b4e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b4f2:	f7ff fa27 	bl	800a944 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4f6:	f107 0308 	add.w	r3, r7, #8
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f000 f866 	bl	800b5cc <prvSampleTimeNow>
 800b500:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d130      	bne.n	800b56a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10a      	bne.n	800b524 <prvProcessTimerOrBlockTask+0x3c>
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	429a      	cmp	r2, r3
 800b514:	d806      	bhi.n	800b524 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b516:	f7ff fa23 	bl	800a960 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b51a:	68f9      	ldr	r1, [r7, #12]
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7ff ff85 	bl	800b42c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b522:	e024      	b.n	800b56e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d008      	beq.n	800b53c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b52a:	4b13      	ldr	r3, [pc, #76]	; (800b578 <prvProcessTimerOrBlockTask+0x90>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d101      	bne.n	800b538 <prvProcessTimerOrBlockTask+0x50>
 800b534:	2301      	movs	r3, #1
 800b536:	e000      	b.n	800b53a <prvProcessTimerOrBlockTask+0x52>
 800b538:	2300      	movs	r3, #0
 800b53a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b53c:	4b0f      	ldr	r3, [pc, #60]	; (800b57c <prvProcessTimerOrBlockTask+0x94>)
 800b53e:	6818      	ldr	r0, [r3, #0]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	4619      	mov	r1, r3
 800b54a:	f7fe ff6b 	bl	800a424 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b54e:	f7ff fa07 	bl	800a960 <xTaskResumeAll>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d10a      	bne.n	800b56e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b558:	4b09      	ldr	r3, [pc, #36]	; (800b580 <prvProcessTimerOrBlockTask+0x98>)
 800b55a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b55e:	601a      	str	r2, [r3, #0]
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	f3bf 8f6f 	isb	sy
}
 800b568:	e001      	b.n	800b56e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b56a:	f7ff f9f9 	bl	800a960 <xTaskResumeAll>
}
 800b56e:	bf00      	nop
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	20009fd4 	.word	0x20009fd4
 800b57c:	20009fd8 	.word	0x20009fd8
 800b580:	e000ed04 	.word	0xe000ed04

0800b584 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b58c:	4b0e      	ldr	r3, [pc, #56]	; (800b5c8 <prvGetNextExpireTime+0x44>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d101      	bne.n	800b59a <prvGetNextExpireTime+0x16>
 800b596:	2201      	movs	r2, #1
 800b598:	e000      	b.n	800b59c <prvGetNextExpireTime+0x18>
 800b59a:	2200      	movs	r2, #0
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d105      	bne.n	800b5b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5a8:	4b07      	ldr	r3, [pc, #28]	; (800b5c8 <prvGetNextExpireTime+0x44>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	60fb      	str	r3, [r7, #12]
 800b5b2:	e001      	b.n	800b5b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3714      	adds	r7, #20
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	20009fd0 	.word	0x20009fd0

0800b5cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b5d4:	f7ff fa62 	bl	800aa9c <xTaskGetTickCount>
 800b5d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b5da:	4b0b      	ldr	r3, [pc, #44]	; (800b608 <prvSampleTimeNow+0x3c>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d205      	bcs.n	800b5f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b5e4:	f000 f936 	bl	800b854 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	601a      	str	r2, [r3, #0]
 800b5ee:	e002      	b.n	800b5f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b5f6:	4a04      	ldr	r2, [pc, #16]	; (800b608 <prvSampleTimeNow+0x3c>)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	20009fe0 	.word	0x20009fe0

0800b60c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b086      	sub	sp, #24
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
 800b618:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b61a:	2300      	movs	r3, #0
 800b61c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b62a:	68ba      	ldr	r2, [r7, #8]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d812      	bhi.n	800b658 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	1ad2      	subs	r2, r2, r3
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	699b      	ldr	r3, [r3, #24]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d302      	bcc.n	800b646 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b640:	2301      	movs	r3, #1
 800b642:	617b      	str	r3, [r7, #20]
 800b644:	e01b      	b.n	800b67e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b646:	4b10      	ldr	r3, [pc, #64]	; (800b688 <prvInsertTimerInActiveList+0x7c>)
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	3304      	adds	r3, #4
 800b64e:	4619      	mov	r1, r3
 800b650:	4610      	mov	r0, r2
 800b652:	f7fe f9cc 	bl	80099ee <vListInsert>
 800b656:	e012      	b.n	800b67e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d206      	bcs.n	800b66e <prvInsertTimerInActiveList+0x62>
 800b660:	68ba      	ldr	r2, [r7, #8]
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	429a      	cmp	r2, r3
 800b666:	d302      	bcc.n	800b66e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b668:	2301      	movs	r3, #1
 800b66a:	617b      	str	r3, [r7, #20]
 800b66c:	e007      	b.n	800b67e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b66e:	4b07      	ldr	r3, [pc, #28]	; (800b68c <prvInsertTimerInActiveList+0x80>)
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	3304      	adds	r3, #4
 800b676:	4619      	mov	r1, r3
 800b678:	4610      	mov	r0, r2
 800b67a:	f7fe f9b8 	bl	80099ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b67e:	697b      	ldr	r3, [r7, #20]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3718      	adds	r7, #24
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	20009fd4 	.word	0x20009fd4
 800b68c:	20009fd0 	.word	0x20009fd0

0800b690 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b08e      	sub	sp, #56	; 0x38
 800b694:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b696:	e0ca      	b.n	800b82e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	da18      	bge.n	800b6d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b69e:	1d3b      	adds	r3, r7, #4
 800b6a0:	3304      	adds	r3, #4
 800b6a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10a      	bne.n	800b6c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ae:	f383 8811 	msr	BASEPRI, r3
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	f3bf 8f4f 	dsb	sy
 800b6ba:	61fb      	str	r3, [r7, #28]
}
 800b6bc:	bf00      	nop
 800b6be:	e7fe      	b.n	800b6be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6c6:	6850      	ldr	r0, [r2, #4]
 800b6c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6ca:	6892      	ldr	r2, [r2, #8]
 800b6cc:	4611      	mov	r1, r2
 800b6ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f2c0 80aa 	blt.w	800b82c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6de:	695b      	ldr	r3, [r3, #20]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d004      	beq.n	800b6ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e6:	3304      	adds	r3, #4
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7fe f9b9 	bl	8009a60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6ee:	463b      	mov	r3, r7
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7ff ff6b 	bl	800b5cc <prvSampleTimeNow>
 800b6f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2b09      	cmp	r3, #9
 800b6fc:	f200 8097 	bhi.w	800b82e <prvProcessReceivedCommands+0x19e>
 800b700:	a201      	add	r2, pc, #4	; (adr r2, 800b708 <prvProcessReceivedCommands+0x78>)
 800b702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b706:	bf00      	nop
 800b708:	0800b731 	.word	0x0800b731
 800b70c:	0800b731 	.word	0x0800b731
 800b710:	0800b731 	.word	0x0800b731
 800b714:	0800b7a5 	.word	0x0800b7a5
 800b718:	0800b7b9 	.word	0x0800b7b9
 800b71c:	0800b803 	.word	0x0800b803
 800b720:	0800b731 	.word	0x0800b731
 800b724:	0800b731 	.word	0x0800b731
 800b728:	0800b7a5 	.word	0x0800b7a5
 800b72c:	0800b7b9 	.word	0x0800b7b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b736:	f043 0301 	orr.w	r3, r3, #1
 800b73a:	b2da      	uxtb	r2, r3
 800b73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	18d1      	adds	r1, r2, r3
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b74e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b750:	f7ff ff5c 	bl	800b60c <prvInsertTimerInActiveList>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d069      	beq.n	800b82e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75c:	6a1b      	ldr	r3, [r3, #32]
 800b75e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b760:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b768:	f003 0304 	and.w	r3, r3, #4
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d05e      	beq.n	800b82e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b770:	68ba      	ldr	r2, [r7, #8]
 800b772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b774:	699b      	ldr	r3, [r3, #24]
 800b776:	441a      	add	r2, r3
 800b778:	2300      	movs	r3, #0
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	2300      	movs	r3, #0
 800b77e:	2100      	movs	r1, #0
 800b780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b782:	f7ff fe05 	bl	800b390 <xTimerGenericCommand>
 800b786:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b788:	6a3b      	ldr	r3, [r7, #32]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d14f      	bne.n	800b82e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	61bb      	str	r3, [r7, #24]
}
 800b7a0:	bf00      	nop
 800b7a2:	e7fe      	b.n	800b7a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7aa:	f023 0301 	bic.w	r3, r3, #1
 800b7ae:	b2da      	uxtb	r2, r3
 800b7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b7b6:	e03a      	b.n	800b82e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7be:	f043 0301 	orr.w	r3, r3, #1
 800b7c2:	b2da      	uxtb	r2, r3
 800b7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b7ca:	68ba      	ldr	r2, [r7, #8]
 800b7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d2:	699b      	ldr	r3, [r3, #24]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10a      	bne.n	800b7ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7dc:	f383 8811 	msr	BASEPRI, r3
 800b7e0:	f3bf 8f6f 	isb	sy
 800b7e4:	f3bf 8f4f 	dsb	sy
 800b7e8:	617b      	str	r3, [r7, #20]
}
 800b7ea:	bf00      	nop
 800b7ec:	e7fe      	b.n	800b7ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f0:	699a      	ldr	r2, [r3, #24]
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f4:	18d1      	adds	r1, r2, r3
 800b7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7fc:	f7ff ff06 	bl	800b60c <prvInsertTimerInActiveList>
					break;
 800b800:	e015      	b.n	800b82e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b808:	f003 0302 	and.w	r3, r3, #2
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d103      	bne.n	800b818 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b812:	f000 fbdd 	bl	800bfd0 <vPortFree>
 800b816:	e00a      	b.n	800b82e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b81e:	f023 0301 	bic.w	r3, r3, #1
 800b822:	b2da      	uxtb	r2, r3
 800b824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b826:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b82a:	e000      	b.n	800b82e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b82c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b82e:	4b08      	ldr	r3, [pc, #32]	; (800b850 <prvProcessReceivedCommands+0x1c0>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	1d39      	adds	r1, r7, #4
 800b834:	2200      	movs	r2, #0
 800b836:	4618      	mov	r0, r3
 800b838:	f7fe fbda 	bl	8009ff0 <xQueueReceive>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f47f af2a 	bne.w	800b698 <prvProcessReceivedCommands+0x8>
	}
}
 800b844:	bf00      	nop
 800b846:	bf00      	nop
 800b848:	3730      	adds	r7, #48	; 0x30
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	20009fd8 	.word	0x20009fd8

0800b854 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b088      	sub	sp, #32
 800b858:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b85a:	e048      	b.n	800b8ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b85c:	4b2d      	ldr	r3, [pc, #180]	; (800b914 <prvSwitchTimerLists+0xc0>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b866:	4b2b      	ldr	r3, [pc, #172]	; (800b914 <prvSwitchTimerLists+0xc0>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	3304      	adds	r3, #4
 800b874:	4618      	mov	r0, r3
 800b876:	f7fe f8f3 	bl	8009a60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6a1b      	ldr	r3, [r3, #32]
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b888:	f003 0304 	and.w	r3, r3, #4
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d02e      	beq.n	800b8ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	699b      	ldr	r3, [r3, #24]
 800b894:	693a      	ldr	r2, [r7, #16]
 800b896:	4413      	add	r3, r2
 800b898:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d90e      	bls.n	800b8c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	68fa      	ldr	r2, [r7, #12]
 800b8ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8ae:	4b19      	ldr	r3, [pc, #100]	; (800b914 <prvSwitchTimerLists+0xc0>)
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	4610      	mov	r0, r2
 800b8ba:	f7fe f898 	bl	80099ee <vListInsert>
 800b8be:	e016      	b.n	800b8ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	9300      	str	r3, [sp, #0]
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	693a      	ldr	r2, [r7, #16]
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f7ff fd60 	bl	800b390 <xTimerGenericCommand>
 800b8d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d10a      	bne.n	800b8ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8dc:	f383 8811 	msr	BASEPRI, r3
 800b8e0:	f3bf 8f6f 	isb	sy
 800b8e4:	f3bf 8f4f 	dsb	sy
 800b8e8:	603b      	str	r3, [r7, #0]
}
 800b8ea:	bf00      	nop
 800b8ec:	e7fe      	b.n	800b8ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8ee:	4b09      	ldr	r3, [pc, #36]	; (800b914 <prvSwitchTimerLists+0xc0>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1b1      	bne.n	800b85c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b8f8:	4b06      	ldr	r3, [pc, #24]	; (800b914 <prvSwitchTimerLists+0xc0>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b8fe:	4b06      	ldr	r3, [pc, #24]	; (800b918 <prvSwitchTimerLists+0xc4>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a04      	ldr	r2, [pc, #16]	; (800b914 <prvSwitchTimerLists+0xc0>)
 800b904:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b906:	4a04      	ldr	r2, [pc, #16]	; (800b918 <prvSwitchTimerLists+0xc4>)
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	6013      	str	r3, [r2, #0]
}
 800b90c:	bf00      	nop
 800b90e:	3718      	adds	r7, #24
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	20009fd0 	.word	0x20009fd0
 800b918:	20009fd4 	.word	0x20009fd4

0800b91c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b922:	f000 f967 	bl	800bbf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b926:	4b15      	ldr	r3, [pc, #84]	; (800b97c <prvCheckForValidListAndQueue+0x60>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d120      	bne.n	800b970 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b92e:	4814      	ldr	r0, [pc, #80]	; (800b980 <prvCheckForValidListAndQueue+0x64>)
 800b930:	f7fe f80c 	bl	800994c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b934:	4813      	ldr	r0, [pc, #76]	; (800b984 <prvCheckForValidListAndQueue+0x68>)
 800b936:	f7fe f809 	bl	800994c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b93a:	4b13      	ldr	r3, [pc, #76]	; (800b988 <prvCheckForValidListAndQueue+0x6c>)
 800b93c:	4a10      	ldr	r2, [pc, #64]	; (800b980 <prvCheckForValidListAndQueue+0x64>)
 800b93e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b940:	4b12      	ldr	r3, [pc, #72]	; (800b98c <prvCheckForValidListAndQueue+0x70>)
 800b942:	4a10      	ldr	r2, [pc, #64]	; (800b984 <prvCheckForValidListAndQueue+0x68>)
 800b944:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b946:	2300      	movs	r3, #0
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	4b11      	ldr	r3, [pc, #68]	; (800b990 <prvCheckForValidListAndQueue+0x74>)
 800b94c:	4a11      	ldr	r2, [pc, #68]	; (800b994 <prvCheckForValidListAndQueue+0x78>)
 800b94e:	2110      	movs	r1, #16
 800b950:	200a      	movs	r0, #10
 800b952:	f7fe f917 	bl	8009b84 <xQueueGenericCreateStatic>
 800b956:	4603      	mov	r3, r0
 800b958:	4a08      	ldr	r2, [pc, #32]	; (800b97c <prvCheckForValidListAndQueue+0x60>)
 800b95a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b95c:	4b07      	ldr	r3, [pc, #28]	; (800b97c <prvCheckForValidListAndQueue+0x60>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d005      	beq.n	800b970 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b964:	4b05      	ldr	r3, [pc, #20]	; (800b97c <prvCheckForValidListAndQueue+0x60>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	490b      	ldr	r1, [pc, #44]	; (800b998 <prvCheckForValidListAndQueue+0x7c>)
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fe fd30 	bl	800a3d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b970:	f000 f970 	bl	800bc54 <vPortExitCritical>
}
 800b974:	bf00      	nop
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	20009fd8 	.word	0x20009fd8
 800b980:	20009fa8 	.word	0x20009fa8
 800b984:	20009fbc 	.word	0x20009fbc
 800b988:	20009fd0 	.word	0x20009fd0
 800b98c:	20009fd4 	.word	0x20009fd4
 800b990:	2000a084 	.word	0x2000a084
 800b994:	20009fe4 	.word	0x20009fe4
 800b998:	0800d7c0 	.word	0x0800d7c0

0800b99c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b99c:	b480      	push	{r7}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	3b04      	subs	r3, #4
 800b9ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b9b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	3b04      	subs	r3, #4
 800b9ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f023 0201 	bic.w	r2, r3, #1
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	3b04      	subs	r3, #4
 800b9ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9cc:	4a0c      	ldr	r2, [pc, #48]	; (800ba00 <pxPortInitialiseStack+0x64>)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	3b14      	subs	r3, #20
 800b9d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	3b04      	subs	r3, #4
 800b9e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f06f 0202 	mvn.w	r2, #2
 800b9ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	3b20      	subs	r3, #32
 800b9f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3714      	adds	r7, #20
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr
 800ba00:	0800ba05 	.word	0x0800ba05

0800ba04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba0e:	4b12      	ldr	r3, [pc, #72]	; (800ba58 <prvTaskExitError+0x54>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba16:	d00a      	beq.n	800ba2e <prvTaskExitError+0x2a>
	__asm volatile
 800ba18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1c:	f383 8811 	msr	BASEPRI, r3
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	60fb      	str	r3, [r7, #12]
}
 800ba2a:	bf00      	nop
 800ba2c:	e7fe      	b.n	800ba2c <prvTaskExitError+0x28>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	60bb      	str	r3, [r7, #8]
}
 800ba40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba42:	bf00      	nop
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d0fc      	beq.n	800ba44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba4a:	bf00      	nop
 800ba4c:	bf00      	nop
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr
 800ba58:	200002a8 	.word	0x200002a8
 800ba5c:	00000000 	.word	0x00000000

0800ba60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba60:	4b07      	ldr	r3, [pc, #28]	; (800ba80 <pxCurrentTCBConst2>)
 800ba62:	6819      	ldr	r1, [r3, #0]
 800ba64:	6808      	ldr	r0, [r1, #0]
 800ba66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6a:	f380 8809 	msr	PSP, r0
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f04f 0000 	mov.w	r0, #0
 800ba76:	f380 8811 	msr	BASEPRI, r0
 800ba7a:	4770      	bx	lr
 800ba7c:	f3af 8000 	nop.w

0800ba80 <pxCurrentTCBConst2>:
 800ba80:	20009aa8 	.word	0x20009aa8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba84:	bf00      	nop
 800ba86:	bf00      	nop

0800ba88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba88:	4808      	ldr	r0, [pc, #32]	; (800baac <prvPortStartFirstTask+0x24>)
 800ba8a:	6800      	ldr	r0, [r0, #0]
 800ba8c:	6800      	ldr	r0, [r0, #0]
 800ba8e:	f380 8808 	msr	MSP, r0
 800ba92:	f04f 0000 	mov.w	r0, #0
 800ba96:	f380 8814 	msr	CONTROL, r0
 800ba9a:	b662      	cpsie	i
 800ba9c:	b661      	cpsie	f
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	df00      	svc	0
 800baa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800baaa:	bf00      	nop
 800baac:	e000ed08 	.word	0xe000ed08

0800bab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bab6:	4b46      	ldr	r3, [pc, #280]	; (800bbd0 <xPortStartScheduler+0x120>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a46      	ldr	r2, [pc, #280]	; (800bbd4 <xPortStartScheduler+0x124>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d10a      	bne.n	800bad6 <xPortStartScheduler+0x26>
	__asm volatile
 800bac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac4:	f383 8811 	msr	BASEPRI, r3
 800bac8:	f3bf 8f6f 	isb	sy
 800bacc:	f3bf 8f4f 	dsb	sy
 800bad0:	613b      	str	r3, [r7, #16]
}
 800bad2:	bf00      	nop
 800bad4:	e7fe      	b.n	800bad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bad6:	4b3e      	ldr	r3, [pc, #248]	; (800bbd0 <xPortStartScheduler+0x120>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a3f      	ldr	r2, [pc, #252]	; (800bbd8 <xPortStartScheduler+0x128>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d10a      	bne.n	800baf6 <xPortStartScheduler+0x46>
	__asm volatile
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	60fb      	str	r3, [r7, #12]
}
 800baf2:	bf00      	nop
 800baf4:	e7fe      	b.n	800baf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800baf6:	4b39      	ldr	r3, [pc, #228]	; (800bbdc <xPortStartScheduler+0x12c>)
 800baf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	22ff      	movs	r2, #255	; 0xff
 800bb06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb10:	78fb      	ldrb	r3, [r7, #3]
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	4b31      	ldr	r3, [pc, #196]	; (800bbe0 <xPortStartScheduler+0x130>)
 800bb1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb1e:	4b31      	ldr	r3, [pc, #196]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb20:	2207      	movs	r2, #7
 800bb22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb24:	e009      	b.n	800bb3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bb26:	4b2f      	ldr	r3, [pc, #188]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	4a2d      	ldr	r2, [pc, #180]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb30:	78fb      	ldrb	r3, [r7, #3]
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	005b      	lsls	r3, r3, #1
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb3a:	78fb      	ldrb	r3, [r7, #3]
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb42:	2b80      	cmp	r3, #128	; 0x80
 800bb44:	d0ef      	beq.n	800bb26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb46:	4b27      	ldr	r3, [pc, #156]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f1c3 0307 	rsb	r3, r3, #7
 800bb4e:	2b04      	cmp	r3, #4
 800bb50:	d00a      	beq.n	800bb68 <xPortStartScheduler+0xb8>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	60bb      	str	r3, [r7, #8]
}
 800bb64:	bf00      	nop
 800bb66:	e7fe      	b.n	800bb66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb68:	4b1e      	ldr	r3, [pc, #120]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	021b      	lsls	r3, r3, #8
 800bb6e:	4a1d      	ldr	r2, [pc, #116]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb72:	4b1c      	ldr	r3, [pc, #112]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb7a:	4a1a      	ldr	r2, [pc, #104]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb86:	4b18      	ldr	r3, [pc, #96]	; (800bbe8 <xPortStartScheduler+0x138>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a17      	ldr	r2, [pc, #92]	; (800bbe8 <xPortStartScheduler+0x138>)
 800bb8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb92:	4b15      	ldr	r3, [pc, #84]	; (800bbe8 <xPortStartScheduler+0x138>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a14      	ldr	r2, [pc, #80]	; (800bbe8 <xPortStartScheduler+0x138>)
 800bb98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb9e:	f000 f8dd 	bl	800bd5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bba2:	4b12      	ldr	r3, [pc, #72]	; (800bbec <xPortStartScheduler+0x13c>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bba8:	f000 f8fc 	bl	800bda4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bbac:	4b10      	ldr	r3, [pc, #64]	; (800bbf0 <xPortStartScheduler+0x140>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a0f      	ldr	r2, [pc, #60]	; (800bbf0 <xPortStartScheduler+0x140>)
 800bbb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bbb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bbb8:	f7ff ff66 	bl	800ba88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bbbc:	f7ff f84a 	bl	800ac54 <vTaskSwitchContext>
	prvTaskExitError();
 800bbc0:	f7ff ff20 	bl	800ba04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3718      	adds	r7, #24
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	e000ed00 	.word	0xe000ed00
 800bbd4:	410fc271 	.word	0x410fc271
 800bbd8:	410fc270 	.word	0x410fc270
 800bbdc:	e000e400 	.word	0xe000e400
 800bbe0:	2000a0d4 	.word	0x2000a0d4
 800bbe4:	2000a0d8 	.word	0x2000a0d8
 800bbe8:	e000ed20 	.word	0xe000ed20
 800bbec:	200002a8 	.word	0x200002a8
 800bbf0:	e000ef34 	.word	0xe000ef34

0800bbf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
	__asm volatile
 800bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfe:	f383 8811 	msr	BASEPRI, r3
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	607b      	str	r3, [r7, #4]
}
 800bc0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc0e:	4b0f      	ldr	r3, [pc, #60]	; (800bc4c <vPortEnterCritical+0x58>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3301      	adds	r3, #1
 800bc14:	4a0d      	ldr	r2, [pc, #52]	; (800bc4c <vPortEnterCritical+0x58>)
 800bc16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc18:	4b0c      	ldr	r3, [pc, #48]	; (800bc4c <vPortEnterCritical+0x58>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d10f      	bne.n	800bc40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc20:	4b0b      	ldr	r3, [pc, #44]	; (800bc50 <vPortEnterCritical+0x5c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00a      	beq.n	800bc40 <vPortEnterCritical+0x4c>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	603b      	str	r3, [r7, #0]
}
 800bc3c:	bf00      	nop
 800bc3e:	e7fe      	b.n	800bc3e <vPortEnterCritical+0x4a>
	}
}
 800bc40:	bf00      	nop
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	200002a8 	.word	0x200002a8
 800bc50:	e000ed04 	.word	0xe000ed04

0800bc54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc5a:	4b12      	ldr	r3, [pc, #72]	; (800bca4 <vPortExitCritical+0x50>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10a      	bne.n	800bc78 <vPortExitCritical+0x24>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	607b      	str	r3, [r7, #4]
}
 800bc74:	bf00      	nop
 800bc76:	e7fe      	b.n	800bc76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bc78:	4b0a      	ldr	r3, [pc, #40]	; (800bca4 <vPortExitCritical+0x50>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	4a09      	ldr	r2, [pc, #36]	; (800bca4 <vPortExitCritical+0x50>)
 800bc80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc82:	4b08      	ldr	r3, [pc, #32]	; (800bca4 <vPortExitCritical+0x50>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d105      	bne.n	800bc96 <vPortExitCritical+0x42>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	f383 8811 	msr	BASEPRI, r3
}
 800bc94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc96:	bf00      	nop
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	200002a8 	.word	0x200002a8
	...

0800bcb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bcb0:	f3ef 8009 	mrs	r0, PSP
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	4b15      	ldr	r3, [pc, #84]	; (800bd10 <pxCurrentTCBConst>)
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	f01e 0f10 	tst.w	lr, #16
 800bcc0:	bf08      	it	eq
 800bcc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bcc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcca:	6010      	str	r0, [r2, #0]
 800bccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bcd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bcd4:	f380 8811 	msr	BASEPRI, r0
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f7fe ffb8 	bl	800ac54 <vTaskSwitchContext>
 800bce4:	f04f 0000 	mov.w	r0, #0
 800bce8:	f380 8811 	msr	BASEPRI, r0
 800bcec:	bc09      	pop	{r0, r3}
 800bcee:	6819      	ldr	r1, [r3, #0]
 800bcf0:	6808      	ldr	r0, [r1, #0]
 800bcf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf6:	f01e 0f10 	tst.w	lr, #16
 800bcfa:	bf08      	it	eq
 800bcfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd00:	f380 8809 	msr	PSP, r0
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	f3af 8000 	nop.w

0800bd10 <pxCurrentTCBConst>:
 800bd10:	20009aa8 	.word	0x20009aa8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd14:	bf00      	nop
 800bd16:	bf00      	nop

0800bd18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	607b      	str	r3, [r7, #4]
}
 800bd30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd32:	f7fe fed5 	bl	800aae0 <xTaskIncrementTick>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d003      	beq.n	800bd44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd3c:	4b06      	ldr	r3, [pc, #24]	; (800bd58 <xPortSysTickHandler+0x40>)
 800bd3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	2300      	movs	r3, #0
 800bd46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	f383 8811 	msr	BASEPRI, r3
}
 800bd4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd50:	bf00      	nop
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	e000ed04 	.word	0xe000ed04

0800bd5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd60:	4b0b      	ldr	r3, [pc, #44]	; (800bd90 <vPortSetupTimerInterrupt+0x34>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd66:	4b0b      	ldr	r3, [pc, #44]	; (800bd94 <vPortSetupTimerInterrupt+0x38>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd6c:	4b0a      	ldr	r3, [pc, #40]	; (800bd98 <vPortSetupTimerInterrupt+0x3c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a0a      	ldr	r2, [pc, #40]	; (800bd9c <vPortSetupTimerInterrupt+0x40>)
 800bd72:	fba2 2303 	umull	r2, r3, r2, r3
 800bd76:	099b      	lsrs	r3, r3, #6
 800bd78:	4a09      	ldr	r2, [pc, #36]	; (800bda0 <vPortSetupTimerInterrupt+0x44>)
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd7e:	4b04      	ldr	r3, [pc, #16]	; (800bd90 <vPortSetupTimerInterrupt+0x34>)
 800bd80:	2207      	movs	r2, #7
 800bd82:	601a      	str	r2, [r3, #0]
}
 800bd84:	bf00      	nop
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	e000e010 	.word	0xe000e010
 800bd94:	e000e018 	.word	0xe000e018
 800bd98:	20000000 	.word	0x20000000
 800bd9c:	10624dd3 	.word	0x10624dd3
 800bda0:	e000e014 	.word	0xe000e014

0800bda4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bda4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bdb4 <vPortEnableVFP+0x10>
 800bda8:	6801      	ldr	r1, [r0, #0]
 800bdaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bdae:	6001      	str	r1, [r0, #0]
 800bdb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bdb2:	bf00      	nop
 800bdb4:	e000ed88 	.word	0xe000ed88

0800bdb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdbe:	f3ef 8305 	mrs	r3, IPSR
 800bdc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2b0f      	cmp	r3, #15
 800bdc8:	d914      	bls.n	800bdf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdca:	4a17      	ldr	r2, [pc, #92]	; (800be28 <vPortValidateInterruptPriority+0x70>)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	4413      	add	r3, r2
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bdd4:	4b15      	ldr	r3, [pc, #84]	; (800be2c <vPortValidateInterruptPriority+0x74>)
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	7afa      	ldrb	r2, [r7, #11]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d20a      	bcs.n	800bdf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde2:	f383 8811 	msr	BASEPRI, r3
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	f3bf 8f4f 	dsb	sy
 800bdee:	607b      	str	r3, [r7, #4]
}
 800bdf0:	bf00      	nop
 800bdf2:	e7fe      	b.n	800bdf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bdf4:	4b0e      	ldr	r3, [pc, #56]	; (800be30 <vPortValidateInterruptPriority+0x78>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bdfc:	4b0d      	ldr	r3, [pc, #52]	; (800be34 <vPortValidateInterruptPriority+0x7c>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	429a      	cmp	r2, r3
 800be02:	d90a      	bls.n	800be1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	603b      	str	r3, [r7, #0]
}
 800be16:	bf00      	nop
 800be18:	e7fe      	b.n	800be18 <vPortValidateInterruptPriority+0x60>
	}
 800be1a:	bf00      	nop
 800be1c:	3714      	adds	r7, #20
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	e000e3f0 	.word	0xe000e3f0
 800be2c:	2000a0d4 	.word	0x2000a0d4
 800be30:	e000ed0c 	.word	0xe000ed0c
 800be34:	2000a0d8 	.word	0x2000a0d8

0800be38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b08a      	sub	sp, #40	; 0x28
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be40:	2300      	movs	r3, #0
 800be42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be44:	f7fe fd7e 	bl	800a944 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be48:	4b5b      	ldr	r3, [pc, #364]	; (800bfb8 <pvPortMalloc+0x180>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d101      	bne.n	800be54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be50:	f000 f920 	bl	800c094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be54:	4b59      	ldr	r3, [pc, #356]	; (800bfbc <pvPortMalloc+0x184>)
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4013      	ands	r3, r2
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f040 8093 	bne.w	800bf88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d01d      	beq.n	800bea4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800be68:	2208      	movs	r2, #8
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4413      	add	r3, r2
 800be6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f003 0307 	and.w	r3, r3, #7
 800be76:	2b00      	cmp	r3, #0
 800be78:	d014      	beq.n	800bea4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f023 0307 	bic.w	r3, r3, #7
 800be80:	3308      	adds	r3, #8
 800be82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f003 0307 	and.w	r3, r3, #7
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00a      	beq.n	800bea4 <pvPortMalloc+0x6c>
	__asm volatile
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	617b      	str	r3, [r7, #20]
}
 800bea0:	bf00      	nop
 800bea2:	e7fe      	b.n	800bea2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d06e      	beq.n	800bf88 <pvPortMalloc+0x150>
 800beaa:	4b45      	ldr	r3, [pc, #276]	; (800bfc0 <pvPortMalloc+0x188>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d869      	bhi.n	800bf88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800beb4:	4b43      	ldr	r3, [pc, #268]	; (800bfc4 <pvPortMalloc+0x18c>)
 800beb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800beb8:	4b42      	ldr	r3, [pc, #264]	; (800bfc4 <pvPortMalloc+0x18c>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bebe:	e004      	b.n	800beca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d903      	bls.n	800bedc <pvPortMalloc+0xa4>
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1f1      	bne.n	800bec0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bedc:	4b36      	ldr	r3, [pc, #216]	; (800bfb8 <pvPortMalloc+0x180>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d050      	beq.n	800bf88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bee6:	6a3b      	ldr	r3, [r7, #32]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2208      	movs	r2, #8
 800beec:	4413      	add	r3, r2
 800beee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	6a3b      	ldr	r3, [r7, #32]
 800bef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befa:	685a      	ldr	r2, [r3, #4]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	1ad2      	subs	r2, r2, r3
 800bf00:	2308      	movs	r3, #8
 800bf02:	005b      	lsls	r3, r3, #1
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d91f      	bls.n	800bf48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	f003 0307 	and.w	r3, r3, #7
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00a      	beq.n	800bf30 <pvPortMalloc+0xf8>
	__asm volatile
 800bf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1e:	f383 8811 	msr	BASEPRI, r3
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	613b      	str	r3, [r7, #16]
}
 800bf2c:	bf00      	nop
 800bf2e:	e7fe      	b.n	800bf2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf32:	685a      	ldr	r2, [r3, #4]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	1ad2      	subs	r2, r2, r3
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf42:	69b8      	ldr	r0, [r7, #24]
 800bf44:	f000 f908 	bl	800c158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf48:	4b1d      	ldr	r3, [pc, #116]	; (800bfc0 <pvPortMalloc+0x188>)
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	4a1b      	ldr	r2, [pc, #108]	; (800bfc0 <pvPortMalloc+0x188>)
 800bf54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf56:	4b1a      	ldr	r3, [pc, #104]	; (800bfc0 <pvPortMalloc+0x188>)
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	4b1b      	ldr	r3, [pc, #108]	; (800bfc8 <pvPortMalloc+0x190>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d203      	bcs.n	800bf6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf62:	4b17      	ldr	r3, [pc, #92]	; (800bfc0 <pvPortMalloc+0x188>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a18      	ldr	r2, [pc, #96]	; (800bfc8 <pvPortMalloc+0x190>)
 800bf68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6c:	685a      	ldr	r2, [r3, #4]
 800bf6e:	4b13      	ldr	r3, [pc, #76]	; (800bfbc <pvPortMalloc+0x184>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	431a      	orrs	r2, r3
 800bf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bf7e:	4b13      	ldr	r3, [pc, #76]	; (800bfcc <pvPortMalloc+0x194>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	3301      	adds	r3, #1
 800bf84:	4a11      	ldr	r2, [pc, #68]	; (800bfcc <pvPortMalloc+0x194>)
 800bf86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf88:	f7fe fcea 	bl	800a960 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	f003 0307 	and.w	r3, r3, #7
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00a      	beq.n	800bfac <pvPortMalloc+0x174>
	__asm volatile
 800bf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9a:	f383 8811 	msr	BASEPRI, r3
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	60fb      	str	r3, [r7, #12]
}
 800bfa8:	bf00      	nop
 800bfaa:	e7fe      	b.n	800bfaa <pvPortMalloc+0x172>
	return pvReturn;
 800bfac:	69fb      	ldr	r3, [r7, #28]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3728      	adds	r7, #40	; 0x28
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	2000dce4 	.word	0x2000dce4
 800bfbc:	2000dcf8 	.word	0x2000dcf8
 800bfc0:	2000dce8 	.word	0x2000dce8
 800bfc4:	2000dcdc 	.word	0x2000dcdc
 800bfc8:	2000dcec 	.word	0x2000dcec
 800bfcc:	2000dcf0 	.word	0x2000dcf0

0800bfd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d04d      	beq.n	800c07e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bfe2:	2308      	movs	r3, #8
 800bfe4:	425b      	negs	r3, r3
 800bfe6:	697a      	ldr	r2, [r7, #20]
 800bfe8:	4413      	add	r3, r2
 800bfea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	685a      	ldr	r2, [r3, #4]
 800bff4:	4b24      	ldr	r3, [pc, #144]	; (800c088 <vPortFree+0xb8>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4013      	ands	r3, r2
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d10a      	bne.n	800c014 <vPortFree+0x44>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	60fb      	str	r3, [r7, #12]
}
 800c010:	bf00      	nop
 800c012:	e7fe      	b.n	800c012 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00a      	beq.n	800c032 <vPortFree+0x62>
	__asm volatile
 800c01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	60bb      	str	r3, [r7, #8]
}
 800c02e:	bf00      	nop
 800c030:	e7fe      	b.n	800c030 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	685a      	ldr	r2, [r3, #4]
 800c036:	4b14      	ldr	r3, [pc, #80]	; (800c088 <vPortFree+0xb8>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4013      	ands	r3, r2
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d01e      	beq.n	800c07e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d11a      	bne.n	800c07e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	685a      	ldr	r2, [r3, #4]
 800c04c:	4b0e      	ldr	r3, [pc, #56]	; (800c088 <vPortFree+0xb8>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	43db      	mvns	r3, r3
 800c052:	401a      	ands	r2, r3
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c058:	f7fe fc74 	bl	800a944 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	685a      	ldr	r2, [r3, #4]
 800c060:	4b0a      	ldr	r3, [pc, #40]	; (800c08c <vPortFree+0xbc>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4413      	add	r3, r2
 800c066:	4a09      	ldr	r2, [pc, #36]	; (800c08c <vPortFree+0xbc>)
 800c068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c06a:	6938      	ldr	r0, [r7, #16]
 800c06c:	f000 f874 	bl	800c158 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c070:	4b07      	ldr	r3, [pc, #28]	; (800c090 <vPortFree+0xc0>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	3301      	adds	r3, #1
 800c076:	4a06      	ldr	r2, [pc, #24]	; (800c090 <vPortFree+0xc0>)
 800c078:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c07a:	f7fe fc71 	bl	800a960 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c07e:	bf00      	nop
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	2000dcf8 	.word	0x2000dcf8
 800c08c:	2000dce8 	.word	0x2000dce8
 800c090:	2000dcf4 	.word	0x2000dcf4

0800c094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c09a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c09e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c0a0:	4b27      	ldr	r3, [pc, #156]	; (800c140 <prvHeapInit+0xac>)
 800c0a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f003 0307 	and.w	r3, r3, #7
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00c      	beq.n	800c0c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	3307      	adds	r3, #7
 800c0b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f023 0307 	bic.w	r3, r3, #7
 800c0ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	4a1f      	ldr	r2, [pc, #124]	; (800c140 <prvHeapInit+0xac>)
 800c0c4:	4413      	add	r3, r2
 800c0c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0cc:	4a1d      	ldr	r2, [pc, #116]	; (800c144 <prvHeapInit+0xb0>)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c0d2:	4b1c      	ldr	r3, [pc, #112]	; (800c144 <prvHeapInit+0xb0>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	68ba      	ldr	r2, [r7, #8]
 800c0dc:	4413      	add	r3, r2
 800c0de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c0e0:	2208      	movs	r2, #8
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	1a9b      	subs	r3, r3, r2
 800c0e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f023 0307 	bic.w	r3, r3, #7
 800c0ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	4a15      	ldr	r2, [pc, #84]	; (800c148 <prvHeapInit+0xb4>)
 800c0f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c0f6:	4b14      	ldr	r3, [pc, #80]	; (800c148 <prvHeapInit+0xb4>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c0fe:	4b12      	ldr	r3, [pc, #72]	; (800c148 <prvHeapInit+0xb4>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2200      	movs	r2, #0
 800c104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	1ad2      	subs	r2, r2, r3
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c114:	4b0c      	ldr	r3, [pc, #48]	; (800c148 <prvHeapInit+0xb4>)
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	4a0a      	ldr	r2, [pc, #40]	; (800c14c <prvHeapInit+0xb8>)
 800c122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	4a09      	ldr	r2, [pc, #36]	; (800c150 <prvHeapInit+0xbc>)
 800c12a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c12c:	4b09      	ldr	r3, [pc, #36]	; (800c154 <prvHeapInit+0xc0>)
 800c12e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c132:	601a      	str	r2, [r3, #0]
}
 800c134:	bf00      	nop
 800c136:	3714      	adds	r7, #20
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	2000a0dc 	.word	0x2000a0dc
 800c144:	2000dcdc 	.word	0x2000dcdc
 800c148:	2000dce4 	.word	0x2000dce4
 800c14c:	2000dcec 	.word	0x2000dcec
 800c150:	2000dce8 	.word	0x2000dce8
 800c154:	2000dcf8 	.word	0x2000dcf8

0800c158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c160:	4b28      	ldr	r3, [pc, #160]	; (800c204 <prvInsertBlockIntoFreeList+0xac>)
 800c162:	60fb      	str	r3, [r7, #12]
 800c164:	e002      	b.n	800c16c <prvInsertBlockIntoFreeList+0x14>
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	60fb      	str	r3, [r7, #12]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	429a      	cmp	r2, r3
 800c174:	d8f7      	bhi.n	800c166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	68ba      	ldr	r2, [r7, #8]
 800c180:	4413      	add	r3, r2
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	429a      	cmp	r2, r3
 800c186:	d108      	bne.n	800c19a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	441a      	add	r2, r3
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	441a      	add	r2, r3
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d118      	bne.n	800c1e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	4b15      	ldr	r3, [pc, #84]	; (800c208 <prvInsertBlockIntoFreeList+0xb0>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d00d      	beq.n	800c1d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	685a      	ldr	r2, [r3, #4]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	441a      	add	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	e008      	b.n	800c1e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c1d6:	4b0c      	ldr	r3, [pc, #48]	; (800c208 <prvInsertBlockIntoFreeList+0xb0>)
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	601a      	str	r2, [r3, #0]
 800c1de:	e003      	b.n	800c1e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d002      	beq.n	800c1f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1f6:	bf00      	nop
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	2000dcdc 	.word	0x2000dcdc
 800c208:	2000dce4 	.word	0x2000dce4

0800c20c <__errno>:
 800c20c:	4b01      	ldr	r3, [pc, #4]	; (800c214 <__errno+0x8>)
 800c20e:	6818      	ldr	r0, [r3, #0]
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	200002ac 	.word	0x200002ac

0800c218 <std>:
 800c218:	2300      	movs	r3, #0
 800c21a:	b510      	push	{r4, lr}
 800c21c:	4604      	mov	r4, r0
 800c21e:	e9c0 3300 	strd	r3, r3, [r0]
 800c222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c226:	6083      	str	r3, [r0, #8]
 800c228:	8181      	strh	r1, [r0, #12]
 800c22a:	6643      	str	r3, [r0, #100]	; 0x64
 800c22c:	81c2      	strh	r2, [r0, #14]
 800c22e:	6183      	str	r3, [r0, #24]
 800c230:	4619      	mov	r1, r3
 800c232:	2208      	movs	r2, #8
 800c234:	305c      	adds	r0, #92	; 0x5c
 800c236:	f000 f91a 	bl	800c46e <memset>
 800c23a:	4b05      	ldr	r3, [pc, #20]	; (800c250 <std+0x38>)
 800c23c:	6263      	str	r3, [r4, #36]	; 0x24
 800c23e:	4b05      	ldr	r3, [pc, #20]	; (800c254 <std+0x3c>)
 800c240:	62a3      	str	r3, [r4, #40]	; 0x28
 800c242:	4b05      	ldr	r3, [pc, #20]	; (800c258 <std+0x40>)
 800c244:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c246:	4b05      	ldr	r3, [pc, #20]	; (800c25c <std+0x44>)
 800c248:	6224      	str	r4, [r4, #32]
 800c24a:	6323      	str	r3, [r4, #48]	; 0x30
 800c24c:	bd10      	pop	{r4, pc}
 800c24e:	bf00      	nop
 800c250:	0800c761 	.word	0x0800c761
 800c254:	0800c783 	.word	0x0800c783
 800c258:	0800c7bb 	.word	0x0800c7bb
 800c25c:	0800c7df 	.word	0x0800c7df

0800c260 <_cleanup_r>:
 800c260:	4901      	ldr	r1, [pc, #4]	; (800c268 <_cleanup_r+0x8>)
 800c262:	f000 b8af 	b.w	800c3c4 <_fwalk_reent>
 800c266:	bf00      	nop
 800c268:	0800c939 	.word	0x0800c939

0800c26c <__sfmoreglue>:
 800c26c:	b570      	push	{r4, r5, r6, lr}
 800c26e:	2268      	movs	r2, #104	; 0x68
 800c270:	1e4d      	subs	r5, r1, #1
 800c272:	4355      	muls	r5, r2
 800c274:	460e      	mov	r6, r1
 800c276:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c27a:	f000 f921 	bl	800c4c0 <_malloc_r>
 800c27e:	4604      	mov	r4, r0
 800c280:	b140      	cbz	r0, 800c294 <__sfmoreglue+0x28>
 800c282:	2100      	movs	r1, #0
 800c284:	e9c0 1600 	strd	r1, r6, [r0]
 800c288:	300c      	adds	r0, #12
 800c28a:	60a0      	str	r0, [r4, #8]
 800c28c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c290:	f000 f8ed 	bl	800c46e <memset>
 800c294:	4620      	mov	r0, r4
 800c296:	bd70      	pop	{r4, r5, r6, pc}

0800c298 <__sfp_lock_acquire>:
 800c298:	4801      	ldr	r0, [pc, #4]	; (800c2a0 <__sfp_lock_acquire+0x8>)
 800c29a:	f000 b8d8 	b.w	800c44e <__retarget_lock_acquire_recursive>
 800c29e:	bf00      	nop
 800c2a0:	2000dcfd 	.word	0x2000dcfd

0800c2a4 <__sfp_lock_release>:
 800c2a4:	4801      	ldr	r0, [pc, #4]	; (800c2ac <__sfp_lock_release+0x8>)
 800c2a6:	f000 b8d3 	b.w	800c450 <__retarget_lock_release_recursive>
 800c2aa:	bf00      	nop
 800c2ac:	2000dcfd 	.word	0x2000dcfd

0800c2b0 <__sinit_lock_acquire>:
 800c2b0:	4801      	ldr	r0, [pc, #4]	; (800c2b8 <__sinit_lock_acquire+0x8>)
 800c2b2:	f000 b8cc 	b.w	800c44e <__retarget_lock_acquire_recursive>
 800c2b6:	bf00      	nop
 800c2b8:	2000dcfe 	.word	0x2000dcfe

0800c2bc <__sinit_lock_release>:
 800c2bc:	4801      	ldr	r0, [pc, #4]	; (800c2c4 <__sinit_lock_release+0x8>)
 800c2be:	f000 b8c7 	b.w	800c450 <__retarget_lock_release_recursive>
 800c2c2:	bf00      	nop
 800c2c4:	2000dcfe 	.word	0x2000dcfe

0800c2c8 <__sinit>:
 800c2c8:	b510      	push	{r4, lr}
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	f7ff fff0 	bl	800c2b0 <__sinit_lock_acquire>
 800c2d0:	69a3      	ldr	r3, [r4, #24]
 800c2d2:	b11b      	cbz	r3, 800c2dc <__sinit+0x14>
 800c2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2d8:	f7ff bff0 	b.w	800c2bc <__sinit_lock_release>
 800c2dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c2e0:	6523      	str	r3, [r4, #80]	; 0x50
 800c2e2:	4b13      	ldr	r3, [pc, #76]	; (800c330 <__sinit+0x68>)
 800c2e4:	4a13      	ldr	r2, [pc, #76]	; (800c334 <__sinit+0x6c>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c2ea:	42a3      	cmp	r3, r4
 800c2ec:	bf04      	itt	eq
 800c2ee:	2301      	moveq	r3, #1
 800c2f0:	61a3      	streq	r3, [r4, #24]
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	f000 f820 	bl	800c338 <__sfp>
 800c2f8:	6060      	str	r0, [r4, #4]
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f000 f81c 	bl	800c338 <__sfp>
 800c300:	60a0      	str	r0, [r4, #8]
 800c302:	4620      	mov	r0, r4
 800c304:	f000 f818 	bl	800c338 <__sfp>
 800c308:	2200      	movs	r2, #0
 800c30a:	60e0      	str	r0, [r4, #12]
 800c30c:	2104      	movs	r1, #4
 800c30e:	6860      	ldr	r0, [r4, #4]
 800c310:	f7ff ff82 	bl	800c218 <std>
 800c314:	68a0      	ldr	r0, [r4, #8]
 800c316:	2201      	movs	r2, #1
 800c318:	2109      	movs	r1, #9
 800c31a:	f7ff ff7d 	bl	800c218 <std>
 800c31e:	68e0      	ldr	r0, [r4, #12]
 800c320:	2202      	movs	r2, #2
 800c322:	2112      	movs	r1, #18
 800c324:	f7ff ff78 	bl	800c218 <std>
 800c328:	2301      	movs	r3, #1
 800c32a:	61a3      	str	r3, [r4, #24]
 800c32c:	e7d2      	b.n	800c2d4 <__sinit+0xc>
 800c32e:	bf00      	nop
 800c330:	0800d8ac 	.word	0x0800d8ac
 800c334:	0800c261 	.word	0x0800c261

0800c338 <__sfp>:
 800c338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33a:	4607      	mov	r7, r0
 800c33c:	f7ff ffac 	bl	800c298 <__sfp_lock_acquire>
 800c340:	4b1e      	ldr	r3, [pc, #120]	; (800c3bc <__sfp+0x84>)
 800c342:	681e      	ldr	r6, [r3, #0]
 800c344:	69b3      	ldr	r3, [r6, #24]
 800c346:	b913      	cbnz	r3, 800c34e <__sfp+0x16>
 800c348:	4630      	mov	r0, r6
 800c34a:	f7ff ffbd 	bl	800c2c8 <__sinit>
 800c34e:	3648      	adds	r6, #72	; 0x48
 800c350:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c354:	3b01      	subs	r3, #1
 800c356:	d503      	bpl.n	800c360 <__sfp+0x28>
 800c358:	6833      	ldr	r3, [r6, #0]
 800c35a:	b30b      	cbz	r3, 800c3a0 <__sfp+0x68>
 800c35c:	6836      	ldr	r6, [r6, #0]
 800c35e:	e7f7      	b.n	800c350 <__sfp+0x18>
 800c360:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c364:	b9d5      	cbnz	r5, 800c39c <__sfp+0x64>
 800c366:	4b16      	ldr	r3, [pc, #88]	; (800c3c0 <__sfp+0x88>)
 800c368:	60e3      	str	r3, [r4, #12]
 800c36a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c36e:	6665      	str	r5, [r4, #100]	; 0x64
 800c370:	f000 f86c 	bl	800c44c <__retarget_lock_init_recursive>
 800c374:	f7ff ff96 	bl	800c2a4 <__sfp_lock_release>
 800c378:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c37c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c380:	6025      	str	r5, [r4, #0]
 800c382:	61a5      	str	r5, [r4, #24]
 800c384:	2208      	movs	r2, #8
 800c386:	4629      	mov	r1, r5
 800c388:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c38c:	f000 f86f 	bl	800c46e <memset>
 800c390:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c394:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c398:	4620      	mov	r0, r4
 800c39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c39c:	3468      	adds	r4, #104	; 0x68
 800c39e:	e7d9      	b.n	800c354 <__sfp+0x1c>
 800c3a0:	2104      	movs	r1, #4
 800c3a2:	4638      	mov	r0, r7
 800c3a4:	f7ff ff62 	bl	800c26c <__sfmoreglue>
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	6030      	str	r0, [r6, #0]
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	d1d5      	bne.n	800c35c <__sfp+0x24>
 800c3b0:	f7ff ff78 	bl	800c2a4 <__sfp_lock_release>
 800c3b4:	230c      	movs	r3, #12
 800c3b6:	603b      	str	r3, [r7, #0]
 800c3b8:	e7ee      	b.n	800c398 <__sfp+0x60>
 800c3ba:	bf00      	nop
 800c3bc:	0800d8ac 	.word	0x0800d8ac
 800c3c0:	ffff0001 	.word	0xffff0001

0800c3c4 <_fwalk_reent>:
 800c3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3c8:	4606      	mov	r6, r0
 800c3ca:	4688      	mov	r8, r1
 800c3cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c3d0:	2700      	movs	r7, #0
 800c3d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3d6:	f1b9 0901 	subs.w	r9, r9, #1
 800c3da:	d505      	bpl.n	800c3e8 <_fwalk_reent+0x24>
 800c3dc:	6824      	ldr	r4, [r4, #0]
 800c3de:	2c00      	cmp	r4, #0
 800c3e0:	d1f7      	bne.n	800c3d2 <_fwalk_reent+0xe>
 800c3e2:	4638      	mov	r0, r7
 800c3e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3e8:	89ab      	ldrh	r3, [r5, #12]
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d907      	bls.n	800c3fe <_fwalk_reent+0x3a>
 800c3ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	d003      	beq.n	800c3fe <_fwalk_reent+0x3a>
 800c3f6:	4629      	mov	r1, r5
 800c3f8:	4630      	mov	r0, r6
 800c3fa:	47c0      	blx	r8
 800c3fc:	4307      	orrs	r7, r0
 800c3fe:	3568      	adds	r5, #104	; 0x68
 800c400:	e7e9      	b.n	800c3d6 <_fwalk_reent+0x12>
	...

0800c404 <__libc_init_array>:
 800c404:	b570      	push	{r4, r5, r6, lr}
 800c406:	4d0d      	ldr	r5, [pc, #52]	; (800c43c <__libc_init_array+0x38>)
 800c408:	4c0d      	ldr	r4, [pc, #52]	; (800c440 <__libc_init_array+0x3c>)
 800c40a:	1b64      	subs	r4, r4, r5
 800c40c:	10a4      	asrs	r4, r4, #2
 800c40e:	2600      	movs	r6, #0
 800c410:	42a6      	cmp	r6, r4
 800c412:	d109      	bne.n	800c428 <__libc_init_array+0x24>
 800c414:	4d0b      	ldr	r5, [pc, #44]	; (800c444 <__libc_init_array+0x40>)
 800c416:	4c0c      	ldr	r4, [pc, #48]	; (800c448 <__libc_init_array+0x44>)
 800c418:	f001 f972 	bl	800d700 <_init>
 800c41c:	1b64      	subs	r4, r4, r5
 800c41e:	10a4      	asrs	r4, r4, #2
 800c420:	2600      	movs	r6, #0
 800c422:	42a6      	cmp	r6, r4
 800c424:	d105      	bne.n	800c432 <__libc_init_array+0x2e>
 800c426:	bd70      	pop	{r4, r5, r6, pc}
 800c428:	f855 3b04 	ldr.w	r3, [r5], #4
 800c42c:	4798      	blx	r3
 800c42e:	3601      	adds	r6, #1
 800c430:	e7ee      	b.n	800c410 <__libc_init_array+0xc>
 800c432:	f855 3b04 	ldr.w	r3, [r5], #4
 800c436:	4798      	blx	r3
 800c438:	3601      	adds	r6, #1
 800c43a:	e7f2      	b.n	800c422 <__libc_init_array+0x1e>
 800c43c:	0800d8ec 	.word	0x0800d8ec
 800c440:	0800d8ec 	.word	0x0800d8ec
 800c444:	0800d8ec 	.word	0x0800d8ec
 800c448:	0800d8f0 	.word	0x0800d8f0

0800c44c <__retarget_lock_init_recursive>:
 800c44c:	4770      	bx	lr

0800c44e <__retarget_lock_acquire_recursive>:
 800c44e:	4770      	bx	lr

0800c450 <__retarget_lock_release_recursive>:
 800c450:	4770      	bx	lr

0800c452 <memcpy>:
 800c452:	440a      	add	r2, r1
 800c454:	4291      	cmp	r1, r2
 800c456:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c45a:	d100      	bne.n	800c45e <memcpy+0xc>
 800c45c:	4770      	bx	lr
 800c45e:	b510      	push	{r4, lr}
 800c460:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c464:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c468:	4291      	cmp	r1, r2
 800c46a:	d1f9      	bne.n	800c460 <memcpy+0xe>
 800c46c:	bd10      	pop	{r4, pc}

0800c46e <memset>:
 800c46e:	4402      	add	r2, r0
 800c470:	4603      	mov	r3, r0
 800c472:	4293      	cmp	r3, r2
 800c474:	d100      	bne.n	800c478 <memset+0xa>
 800c476:	4770      	bx	lr
 800c478:	f803 1b01 	strb.w	r1, [r3], #1
 800c47c:	e7f9      	b.n	800c472 <memset+0x4>
	...

0800c480 <sbrk_aligned>:
 800c480:	b570      	push	{r4, r5, r6, lr}
 800c482:	4e0e      	ldr	r6, [pc, #56]	; (800c4bc <sbrk_aligned+0x3c>)
 800c484:	460c      	mov	r4, r1
 800c486:	6831      	ldr	r1, [r6, #0]
 800c488:	4605      	mov	r5, r0
 800c48a:	b911      	cbnz	r1, 800c492 <sbrk_aligned+0x12>
 800c48c:	f000 f924 	bl	800c6d8 <_sbrk_r>
 800c490:	6030      	str	r0, [r6, #0]
 800c492:	4621      	mov	r1, r4
 800c494:	4628      	mov	r0, r5
 800c496:	f000 f91f 	bl	800c6d8 <_sbrk_r>
 800c49a:	1c43      	adds	r3, r0, #1
 800c49c:	d00a      	beq.n	800c4b4 <sbrk_aligned+0x34>
 800c49e:	1cc4      	adds	r4, r0, #3
 800c4a0:	f024 0403 	bic.w	r4, r4, #3
 800c4a4:	42a0      	cmp	r0, r4
 800c4a6:	d007      	beq.n	800c4b8 <sbrk_aligned+0x38>
 800c4a8:	1a21      	subs	r1, r4, r0
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	f000 f914 	bl	800c6d8 <_sbrk_r>
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	d101      	bne.n	800c4b8 <sbrk_aligned+0x38>
 800c4b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	bd70      	pop	{r4, r5, r6, pc}
 800c4bc:	2000dd04 	.word	0x2000dd04

0800c4c0 <_malloc_r>:
 800c4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c4:	1ccd      	adds	r5, r1, #3
 800c4c6:	f025 0503 	bic.w	r5, r5, #3
 800c4ca:	3508      	adds	r5, #8
 800c4cc:	2d0c      	cmp	r5, #12
 800c4ce:	bf38      	it	cc
 800c4d0:	250c      	movcc	r5, #12
 800c4d2:	2d00      	cmp	r5, #0
 800c4d4:	4607      	mov	r7, r0
 800c4d6:	db01      	blt.n	800c4dc <_malloc_r+0x1c>
 800c4d8:	42a9      	cmp	r1, r5
 800c4da:	d905      	bls.n	800c4e8 <_malloc_r+0x28>
 800c4dc:	230c      	movs	r3, #12
 800c4de:	603b      	str	r3, [r7, #0]
 800c4e0:	2600      	movs	r6, #0
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4e8:	4e2e      	ldr	r6, [pc, #184]	; (800c5a4 <_malloc_r+0xe4>)
 800c4ea:	f000 fa73 	bl	800c9d4 <__malloc_lock>
 800c4ee:	6833      	ldr	r3, [r6, #0]
 800c4f0:	461c      	mov	r4, r3
 800c4f2:	bb34      	cbnz	r4, 800c542 <_malloc_r+0x82>
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	4638      	mov	r0, r7
 800c4f8:	f7ff ffc2 	bl	800c480 <sbrk_aligned>
 800c4fc:	1c43      	adds	r3, r0, #1
 800c4fe:	4604      	mov	r4, r0
 800c500:	d14d      	bne.n	800c59e <_malloc_r+0xde>
 800c502:	6834      	ldr	r4, [r6, #0]
 800c504:	4626      	mov	r6, r4
 800c506:	2e00      	cmp	r6, #0
 800c508:	d140      	bne.n	800c58c <_malloc_r+0xcc>
 800c50a:	6823      	ldr	r3, [r4, #0]
 800c50c:	4631      	mov	r1, r6
 800c50e:	4638      	mov	r0, r7
 800c510:	eb04 0803 	add.w	r8, r4, r3
 800c514:	f000 f8e0 	bl	800c6d8 <_sbrk_r>
 800c518:	4580      	cmp	r8, r0
 800c51a:	d13a      	bne.n	800c592 <_malloc_r+0xd2>
 800c51c:	6821      	ldr	r1, [r4, #0]
 800c51e:	3503      	adds	r5, #3
 800c520:	1a6d      	subs	r5, r5, r1
 800c522:	f025 0503 	bic.w	r5, r5, #3
 800c526:	3508      	adds	r5, #8
 800c528:	2d0c      	cmp	r5, #12
 800c52a:	bf38      	it	cc
 800c52c:	250c      	movcc	r5, #12
 800c52e:	4629      	mov	r1, r5
 800c530:	4638      	mov	r0, r7
 800c532:	f7ff ffa5 	bl	800c480 <sbrk_aligned>
 800c536:	3001      	adds	r0, #1
 800c538:	d02b      	beq.n	800c592 <_malloc_r+0xd2>
 800c53a:	6823      	ldr	r3, [r4, #0]
 800c53c:	442b      	add	r3, r5
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	e00e      	b.n	800c560 <_malloc_r+0xa0>
 800c542:	6822      	ldr	r2, [r4, #0]
 800c544:	1b52      	subs	r2, r2, r5
 800c546:	d41e      	bmi.n	800c586 <_malloc_r+0xc6>
 800c548:	2a0b      	cmp	r2, #11
 800c54a:	d916      	bls.n	800c57a <_malloc_r+0xba>
 800c54c:	1961      	adds	r1, r4, r5
 800c54e:	42a3      	cmp	r3, r4
 800c550:	6025      	str	r5, [r4, #0]
 800c552:	bf18      	it	ne
 800c554:	6059      	strne	r1, [r3, #4]
 800c556:	6863      	ldr	r3, [r4, #4]
 800c558:	bf08      	it	eq
 800c55a:	6031      	streq	r1, [r6, #0]
 800c55c:	5162      	str	r2, [r4, r5]
 800c55e:	604b      	str	r3, [r1, #4]
 800c560:	4638      	mov	r0, r7
 800c562:	f104 060b 	add.w	r6, r4, #11
 800c566:	f000 fa3b 	bl	800c9e0 <__malloc_unlock>
 800c56a:	f026 0607 	bic.w	r6, r6, #7
 800c56e:	1d23      	adds	r3, r4, #4
 800c570:	1af2      	subs	r2, r6, r3
 800c572:	d0b6      	beq.n	800c4e2 <_malloc_r+0x22>
 800c574:	1b9b      	subs	r3, r3, r6
 800c576:	50a3      	str	r3, [r4, r2]
 800c578:	e7b3      	b.n	800c4e2 <_malloc_r+0x22>
 800c57a:	6862      	ldr	r2, [r4, #4]
 800c57c:	42a3      	cmp	r3, r4
 800c57e:	bf0c      	ite	eq
 800c580:	6032      	streq	r2, [r6, #0]
 800c582:	605a      	strne	r2, [r3, #4]
 800c584:	e7ec      	b.n	800c560 <_malloc_r+0xa0>
 800c586:	4623      	mov	r3, r4
 800c588:	6864      	ldr	r4, [r4, #4]
 800c58a:	e7b2      	b.n	800c4f2 <_malloc_r+0x32>
 800c58c:	4634      	mov	r4, r6
 800c58e:	6876      	ldr	r6, [r6, #4]
 800c590:	e7b9      	b.n	800c506 <_malloc_r+0x46>
 800c592:	230c      	movs	r3, #12
 800c594:	603b      	str	r3, [r7, #0]
 800c596:	4638      	mov	r0, r7
 800c598:	f000 fa22 	bl	800c9e0 <__malloc_unlock>
 800c59c:	e7a1      	b.n	800c4e2 <_malloc_r+0x22>
 800c59e:	6025      	str	r5, [r4, #0]
 800c5a0:	e7de      	b.n	800c560 <_malloc_r+0xa0>
 800c5a2:	bf00      	nop
 800c5a4:	2000dd00 	.word	0x2000dd00

0800c5a8 <iprintf>:
 800c5a8:	b40f      	push	{r0, r1, r2, r3}
 800c5aa:	4b0a      	ldr	r3, [pc, #40]	; (800c5d4 <iprintf+0x2c>)
 800c5ac:	b513      	push	{r0, r1, r4, lr}
 800c5ae:	681c      	ldr	r4, [r3, #0]
 800c5b0:	b124      	cbz	r4, 800c5bc <iprintf+0x14>
 800c5b2:	69a3      	ldr	r3, [r4, #24]
 800c5b4:	b913      	cbnz	r3, 800c5bc <iprintf+0x14>
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f7ff fe86 	bl	800c2c8 <__sinit>
 800c5bc:	ab05      	add	r3, sp, #20
 800c5be:	9a04      	ldr	r2, [sp, #16]
 800c5c0:	68a1      	ldr	r1, [r4, #8]
 800c5c2:	9301      	str	r3, [sp, #4]
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	f000 fbe3 	bl	800cd90 <_vfiprintf_r>
 800c5ca:	b002      	add	sp, #8
 800c5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5d0:	b004      	add	sp, #16
 800c5d2:	4770      	bx	lr
 800c5d4:	200002ac 	.word	0x200002ac

0800c5d8 <putchar>:
 800c5d8:	4b09      	ldr	r3, [pc, #36]	; (800c600 <putchar+0x28>)
 800c5da:	b513      	push	{r0, r1, r4, lr}
 800c5dc:	681c      	ldr	r4, [r3, #0]
 800c5de:	4601      	mov	r1, r0
 800c5e0:	b134      	cbz	r4, 800c5f0 <putchar+0x18>
 800c5e2:	69a3      	ldr	r3, [r4, #24]
 800c5e4:	b923      	cbnz	r3, 800c5f0 <putchar+0x18>
 800c5e6:	9001      	str	r0, [sp, #4]
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f7ff fe6d 	bl	800c2c8 <__sinit>
 800c5ee:	9901      	ldr	r1, [sp, #4]
 800c5f0:	68a2      	ldr	r2, [r4, #8]
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	b002      	add	sp, #8
 800c5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5fa:	f000 be8d 	b.w	800d318 <_putc_r>
 800c5fe:	bf00      	nop
 800c600:	200002ac 	.word	0x200002ac

0800c604 <cleanup_glue>:
 800c604:	b538      	push	{r3, r4, r5, lr}
 800c606:	460c      	mov	r4, r1
 800c608:	6809      	ldr	r1, [r1, #0]
 800c60a:	4605      	mov	r5, r0
 800c60c:	b109      	cbz	r1, 800c612 <cleanup_glue+0xe>
 800c60e:	f7ff fff9 	bl	800c604 <cleanup_glue>
 800c612:	4621      	mov	r1, r4
 800c614:	4628      	mov	r0, r5
 800c616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c61a:	f000 b9e7 	b.w	800c9ec <_free_r>
	...

0800c620 <_reclaim_reent>:
 800c620:	4b2c      	ldr	r3, [pc, #176]	; (800c6d4 <_reclaim_reent+0xb4>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4283      	cmp	r3, r0
 800c626:	b570      	push	{r4, r5, r6, lr}
 800c628:	4604      	mov	r4, r0
 800c62a:	d051      	beq.n	800c6d0 <_reclaim_reent+0xb0>
 800c62c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c62e:	b143      	cbz	r3, 800c642 <_reclaim_reent+0x22>
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d14a      	bne.n	800c6cc <_reclaim_reent+0xac>
 800c636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c638:	6819      	ldr	r1, [r3, #0]
 800c63a:	b111      	cbz	r1, 800c642 <_reclaim_reent+0x22>
 800c63c:	4620      	mov	r0, r4
 800c63e:	f000 f9d5 	bl	800c9ec <_free_r>
 800c642:	6961      	ldr	r1, [r4, #20]
 800c644:	b111      	cbz	r1, 800c64c <_reclaim_reent+0x2c>
 800c646:	4620      	mov	r0, r4
 800c648:	f000 f9d0 	bl	800c9ec <_free_r>
 800c64c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c64e:	b111      	cbz	r1, 800c656 <_reclaim_reent+0x36>
 800c650:	4620      	mov	r0, r4
 800c652:	f000 f9cb 	bl	800c9ec <_free_r>
 800c656:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c658:	b111      	cbz	r1, 800c660 <_reclaim_reent+0x40>
 800c65a:	4620      	mov	r0, r4
 800c65c:	f000 f9c6 	bl	800c9ec <_free_r>
 800c660:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c662:	b111      	cbz	r1, 800c66a <_reclaim_reent+0x4a>
 800c664:	4620      	mov	r0, r4
 800c666:	f000 f9c1 	bl	800c9ec <_free_r>
 800c66a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c66c:	b111      	cbz	r1, 800c674 <_reclaim_reent+0x54>
 800c66e:	4620      	mov	r0, r4
 800c670:	f000 f9bc 	bl	800c9ec <_free_r>
 800c674:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c676:	b111      	cbz	r1, 800c67e <_reclaim_reent+0x5e>
 800c678:	4620      	mov	r0, r4
 800c67a:	f000 f9b7 	bl	800c9ec <_free_r>
 800c67e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c680:	b111      	cbz	r1, 800c688 <_reclaim_reent+0x68>
 800c682:	4620      	mov	r0, r4
 800c684:	f000 f9b2 	bl	800c9ec <_free_r>
 800c688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c68a:	b111      	cbz	r1, 800c692 <_reclaim_reent+0x72>
 800c68c:	4620      	mov	r0, r4
 800c68e:	f000 f9ad 	bl	800c9ec <_free_r>
 800c692:	69a3      	ldr	r3, [r4, #24]
 800c694:	b1e3      	cbz	r3, 800c6d0 <_reclaim_reent+0xb0>
 800c696:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c698:	4620      	mov	r0, r4
 800c69a:	4798      	blx	r3
 800c69c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c69e:	b1b9      	cbz	r1, 800c6d0 <_reclaim_reent+0xb0>
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6a6:	f7ff bfad 	b.w	800c604 <cleanup_glue>
 800c6aa:	5949      	ldr	r1, [r1, r5]
 800c6ac:	b941      	cbnz	r1, 800c6c0 <_reclaim_reent+0xa0>
 800c6ae:	3504      	adds	r5, #4
 800c6b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6b2:	2d80      	cmp	r5, #128	; 0x80
 800c6b4:	68d9      	ldr	r1, [r3, #12]
 800c6b6:	d1f8      	bne.n	800c6aa <_reclaim_reent+0x8a>
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f000 f997 	bl	800c9ec <_free_r>
 800c6be:	e7ba      	b.n	800c636 <_reclaim_reent+0x16>
 800c6c0:	680e      	ldr	r6, [r1, #0]
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f000 f992 	bl	800c9ec <_free_r>
 800c6c8:	4631      	mov	r1, r6
 800c6ca:	e7ef      	b.n	800c6ac <_reclaim_reent+0x8c>
 800c6cc:	2500      	movs	r5, #0
 800c6ce:	e7ef      	b.n	800c6b0 <_reclaim_reent+0x90>
 800c6d0:	bd70      	pop	{r4, r5, r6, pc}
 800c6d2:	bf00      	nop
 800c6d4:	200002ac 	.word	0x200002ac

0800c6d8 <_sbrk_r>:
 800c6d8:	b538      	push	{r3, r4, r5, lr}
 800c6da:	4d06      	ldr	r5, [pc, #24]	; (800c6f4 <_sbrk_r+0x1c>)
 800c6dc:	2300      	movs	r3, #0
 800c6de:	4604      	mov	r4, r0
 800c6e0:	4608      	mov	r0, r1
 800c6e2:	602b      	str	r3, [r5, #0]
 800c6e4:	f7f4 f9a0 	bl	8000a28 <_sbrk>
 800c6e8:	1c43      	adds	r3, r0, #1
 800c6ea:	d102      	bne.n	800c6f2 <_sbrk_r+0x1a>
 800c6ec:	682b      	ldr	r3, [r5, #0]
 800c6ee:	b103      	cbz	r3, 800c6f2 <_sbrk_r+0x1a>
 800c6f0:	6023      	str	r3, [r4, #0]
 800c6f2:	bd38      	pop	{r3, r4, r5, pc}
 800c6f4:	2000dd08 	.word	0x2000dd08

0800c6f8 <sniprintf>:
 800c6f8:	b40c      	push	{r2, r3}
 800c6fa:	b530      	push	{r4, r5, lr}
 800c6fc:	4b17      	ldr	r3, [pc, #92]	; (800c75c <sniprintf+0x64>)
 800c6fe:	1e0c      	subs	r4, r1, #0
 800c700:	681d      	ldr	r5, [r3, #0]
 800c702:	b09d      	sub	sp, #116	; 0x74
 800c704:	da08      	bge.n	800c718 <sniprintf+0x20>
 800c706:	238b      	movs	r3, #139	; 0x8b
 800c708:	602b      	str	r3, [r5, #0]
 800c70a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c70e:	b01d      	add	sp, #116	; 0x74
 800c710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c714:	b002      	add	sp, #8
 800c716:	4770      	bx	lr
 800c718:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c71c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c720:	bf14      	ite	ne
 800c722:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c726:	4623      	moveq	r3, r4
 800c728:	9304      	str	r3, [sp, #16]
 800c72a:	9307      	str	r3, [sp, #28]
 800c72c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c730:	9002      	str	r0, [sp, #8]
 800c732:	9006      	str	r0, [sp, #24]
 800c734:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c738:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c73a:	ab21      	add	r3, sp, #132	; 0x84
 800c73c:	a902      	add	r1, sp, #8
 800c73e:	4628      	mov	r0, r5
 800c740:	9301      	str	r3, [sp, #4]
 800c742:	f000 f9fb 	bl	800cb3c <_svfiprintf_r>
 800c746:	1c43      	adds	r3, r0, #1
 800c748:	bfbc      	itt	lt
 800c74a:	238b      	movlt	r3, #139	; 0x8b
 800c74c:	602b      	strlt	r3, [r5, #0]
 800c74e:	2c00      	cmp	r4, #0
 800c750:	d0dd      	beq.n	800c70e <sniprintf+0x16>
 800c752:	9b02      	ldr	r3, [sp, #8]
 800c754:	2200      	movs	r2, #0
 800c756:	701a      	strb	r2, [r3, #0]
 800c758:	e7d9      	b.n	800c70e <sniprintf+0x16>
 800c75a:	bf00      	nop
 800c75c:	200002ac 	.word	0x200002ac

0800c760 <__sread>:
 800c760:	b510      	push	{r4, lr}
 800c762:	460c      	mov	r4, r1
 800c764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c768:	f000 fe1e 	bl	800d3a8 <_read_r>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	bfab      	itete	ge
 800c770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c772:	89a3      	ldrhlt	r3, [r4, #12]
 800c774:	181b      	addge	r3, r3, r0
 800c776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c77a:	bfac      	ite	ge
 800c77c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c77e:	81a3      	strhlt	r3, [r4, #12]
 800c780:	bd10      	pop	{r4, pc}

0800c782 <__swrite>:
 800c782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c786:	461f      	mov	r7, r3
 800c788:	898b      	ldrh	r3, [r1, #12]
 800c78a:	05db      	lsls	r3, r3, #23
 800c78c:	4605      	mov	r5, r0
 800c78e:	460c      	mov	r4, r1
 800c790:	4616      	mov	r6, r2
 800c792:	d505      	bpl.n	800c7a0 <__swrite+0x1e>
 800c794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c798:	2302      	movs	r3, #2
 800c79a:	2200      	movs	r2, #0
 800c79c:	f000 f908 	bl	800c9b0 <_lseek_r>
 800c7a0:	89a3      	ldrh	r3, [r4, #12]
 800c7a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7aa:	81a3      	strh	r3, [r4, #12]
 800c7ac:	4632      	mov	r2, r6
 800c7ae:	463b      	mov	r3, r7
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b6:	f000 b817 	b.w	800c7e8 <_write_r>

0800c7ba <__sseek>:
 800c7ba:	b510      	push	{r4, lr}
 800c7bc:	460c      	mov	r4, r1
 800c7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c2:	f000 f8f5 	bl	800c9b0 <_lseek_r>
 800c7c6:	1c43      	adds	r3, r0, #1
 800c7c8:	89a3      	ldrh	r3, [r4, #12]
 800c7ca:	bf15      	itete	ne
 800c7cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7d6:	81a3      	strheq	r3, [r4, #12]
 800c7d8:	bf18      	it	ne
 800c7da:	81a3      	strhne	r3, [r4, #12]
 800c7dc:	bd10      	pop	{r4, pc}

0800c7de <__sclose>:
 800c7de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7e2:	f000 b813 	b.w	800c80c <_close_r>
	...

0800c7e8 <_write_r>:
 800c7e8:	b538      	push	{r3, r4, r5, lr}
 800c7ea:	4d07      	ldr	r5, [pc, #28]	; (800c808 <_write_r+0x20>)
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	4608      	mov	r0, r1
 800c7f0:	4611      	mov	r1, r2
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	602a      	str	r2, [r5, #0]
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	f7f3 ff5a 	bl	80006b0 <_write>
 800c7fc:	1c43      	adds	r3, r0, #1
 800c7fe:	d102      	bne.n	800c806 <_write_r+0x1e>
 800c800:	682b      	ldr	r3, [r5, #0]
 800c802:	b103      	cbz	r3, 800c806 <_write_r+0x1e>
 800c804:	6023      	str	r3, [r4, #0]
 800c806:	bd38      	pop	{r3, r4, r5, pc}
 800c808:	2000dd08 	.word	0x2000dd08

0800c80c <_close_r>:
 800c80c:	b538      	push	{r3, r4, r5, lr}
 800c80e:	4d06      	ldr	r5, [pc, #24]	; (800c828 <_close_r+0x1c>)
 800c810:	2300      	movs	r3, #0
 800c812:	4604      	mov	r4, r0
 800c814:	4608      	mov	r0, r1
 800c816:	602b      	str	r3, [r5, #0]
 800c818:	f7f4 f8d1 	bl	80009be <_close>
 800c81c:	1c43      	adds	r3, r0, #1
 800c81e:	d102      	bne.n	800c826 <_close_r+0x1a>
 800c820:	682b      	ldr	r3, [r5, #0]
 800c822:	b103      	cbz	r3, 800c826 <_close_r+0x1a>
 800c824:	6023      	str	r3, [r4, #0]
 800c826:	bd38      	pop	{r3, r4, r5, pc}
 800c828:	2000dd08 	.word	0x2000dd08

0800c82c <__sflush_r>:
 800c82c:	898a      	ldrh	r2, [r1, #12]
 800c82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c832:	4605      	mov	r5, r0
 800c834:	0710      	lsls	r0, r2, #28
 800c836:	460c      	mov	r4, r1
 800c838:	d458      	bmi.n	800c8ec <__sflush_r+0xc0>
 800c83a:	684b      	ldr	r3, [r1, #4]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	dc05      	bgt.n	800c84c <__sflush_r+0x20>
 800c840:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c842:	2b00      	cmp	r3, #0
 800c844:	dc02      	bgt.n	800c84c <__sflush_r+0x20>
 800c846:	2000      	movs	r0, #0
 800c848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c84c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c84e:	2e00      	cmp	r6, #0
 800c850:	d0f9      	beq.n	800c846 <__sflush_r+0x1a>
 800c852:	2300      	movs	r3, #0
 800c854:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c858:	682f      	ldr	r7, [r5, #0]
 800c85a:	602b      	str	r3, [r5, #0]
 800c85c:	d032      	beq.n	800c8c4 <__sflush_r+0x98>
 800c85e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c860:	89a3      	ldrh	r3, [r4, #12]
 800c862:	075a      	lsls	r2, r3, #29
 800c864:	d505      	bpl.n	800c872 <__sflush_r+0x46>
 800c866:	6863      	ldr	r3, [r4, #4]
 800c868:	1ac0      	subs	r0, r0, r3
 800c86a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c86c:	b10b      	cbz	r3, 800c872 <__sflush_r+0x46>
 800c86e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c870:	1ac0      	subs	r0, r0, r3
 800c872:	2300      	movs	r3, #0
 800c874:	4602      	mov	r2, r0
 800c876:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c878:	6a21      	ldr	r1, [r4, #32]
 800c87a:	4628      	mov	r0, r5
 800c87c:	47b0      	blx	r6
 800c87e:	1c43      	adds	r3, r0, #1
 800c880:	89a3      	ldrh	r3, [r4, #12]
 800c882:	d106      	bne.n	800c892 <__sflush_r+0x66>
 800c884:	6829      	ldr	r1, [r5, #0]
 800c886:	291d      	cmp	r1, #29
 800c888:	d82c      	bhi.n	800c8e4 <__sflush_r+0xb8>
 800c88a:	4a2a      	ldr	r2, [pc, #168]	; (800c934 <__sflush_r+0x108>)
 800c88c:	40ca      	lsrs	r2, r1
 800c88e:	07d6      	lsls	r6, r2, #31
 800c890:	d528      	bpl.n	800c8e4 <__sflush_r+0xb8>
 800c892:	2200      	movs	r2, #0
 800c894:	6062      	str	r2, [r4, #4]
 800c896:	04d9      	lsls	r1, r3, #19
 800c898:	6922      	ldr	r2, [r4, #16]
 800c89a:	6022      	str	r2, [r4, #0]
 800c89c:	d504      	bpl.n	800c8a8 <__sflush_r+0x7c>
 800c89e:	1c42      	adds	r2, r0, #1
 800c8a0:	d101      	bne.n	800c8a6 <__sflush_r+0x7a>
 800c8a2:	682b      	ldr	r3, [r5, #0]
 800c8a4:	b903      	cbnz	r3, 800c8a8 <__sflush_r+0x7c>
 800c8a6:	6560      	str	r0, [r4, #84]	; 0x54
 800c8a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8aa:	602f      	str	r7, [r5, #0]
 800c8ac:	2900      	cmp	r1, #0
 800c8ae:	d0ca      	beq.n	800c846 <__sflush_r+0x1a>
 800c8b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8b4:	4299      	cmp	r1, r3
 800c8b6:	d002      	beq.n	800c8be <__sflush_r+0x92>
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	f000 f897 	bl	800c9ec <_free_r>
 800c8be:	2000      	movs	r0, #0
 800c8c0:	6360      	str	r0, [r4, #52]	; 0x34
 800c8c2:	e7c1      	b.n	800c848 <__sflush_r+0x1c>
 800c8c4:	6a21      	ldr	r1, [r4, #32]
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	47b0      	blx	r6
 800c8cc:	1c41      	adds	r1, r0, #1
 800c8ce:	d1c7      	bne.n	800c860 <__sflush_r+0x34>
 800c8d0:	682b      	ldr	r3, [r5, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d0c4      	beq.n	800c860 <__sflush_r+0x34>
 800c8d6:	2b1d      	cmp	r3, #29
 800c8d8:	d001      	beq.n	800c8de <__sflush_r+0xb2>
 800c8da:	2b16      	cmp	r3, #22
 800c8dc:	d101      	bne.n	800c8e2 <__sflush_r+0xb6>
 800c8de:	602f      	str	r7, [r5, #0]
 800c8e0:	e7b1      	b.n	800c846 <__sflush_r+0x1a>
 800c8e2:	89a3      	ldrh	r3, [r4, #12]
 800c8e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8e8:	81a3      	strh	r3, [r4, #12]
 800c8ea:	e7ad      	b.n	800c848 <__sflush_r+0x1c>
 800c8ec:	690f      	ldr	r7, [r1, #16]
 800c8ee:	2f00      	cmp	r7, #0
 800c8f0:	d0a9      	beq.n	800c846 <__sflush_r+0x1a>
 800c8f2:	0793      	lsls	r3, r2, #30
 800c8f4:	680e      	ldr	r6, [r1, #0]
 800c8f6:	bf08      	it	eq
 800c8f8:	694b      	ldreq	r3, [r1, #20]
 800c8fa:	600f      	str	r7, [r1, #0]
 800c8fc:	bf18      	it	ne
 800c8fe:	2300      	movne	r3, #0
 800c900:	eba6 0807 	sub.w	r8, r6, r7
 800c904:	608b      	str	r3, [r1, #8]
 800c906:	f1b8 0f00 	cmp.w	r8, #0
 800c90a:	dd9c      	ble.n	800c846 <__sflush_r+0x1a>
 800c90c:	6a21      	ldr	r1, [r4, #32]
 800c90e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c910:	4643      	mov	r3, r8
 800c912:	463a      	mov	r2, r7
 800c914:	4628      	mov	r0, r5
 800c916:	47b0      	blx	r6
 800c918:	2800      	cmp	r0, #0
 800c91a:	dc06      	bgt.n	800c92a <__sflush_r+0xfe>
 800c91c:	89a3      	ldrh	r3, [r4, #12]
 800c91e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c922:	81a3      	strh	r3, [r4, #12]
 800c924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c928:	e78e      	b.n	800c848 <__sflush_r+0x1c>
 800c92a:	4407      	add	r7, r0
 800c92c:	eba8 0800 	sub.w	r8, r8, r0
 800c930:	e7e9      	b.n	800c906 <__sflush_r+0xda>
 800c932:	bf00      	nop
 800c934:	20400001 	.word	0x20400001

0800c938 <_fflush_r>:
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	690b      	ldr	r3, [r1, #16]
 800c93c:	4605      	mov	r5, r0
 800c93e:	460c      	mov	r4, r1
 800c940:	b913      	cbnz	r3, 800c948 <_fflush_r+0x10>
 800c942:	2500      	movs	r5, #0
 800c944:	4628      	mov	r0, r5
 800c946:	bd38      	pop	{r3, r4, r5, pc}
 800c948:	b118      	cbz	r0, 800c952 <_fflush_r+0x1a>
 800c94a:	6983      	ldr	r3, [r0, #24]
 800c94c:	b90b      	cbnz	r3, 800c952 <_fflush_r+0x1a>
 800c94e:	f7ff fcbb 	bl	800c2c8 <__sinit>
 800c952:	4b14      	ldr	r3, [pc, #80]	; (800c9a4 <_fflush_r+0x6c>)
 800c954:	429c      	cmp	r4, r3
 800c956:	d11b      	bne.n	800c990 <_fflush_r+0x58>
 800c958:	686c      	ldr	r4, [r5, #4]
 800c95a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d0ef      	beq.n	800c942 <_fflush_r+0xa>
 800c962:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c964:	07d0      	lsls	r0, r2, #31
 800c966:	d404      	bmi.n	800c972 <_fflush_r+0x3a>
 800c968:	0599      	lsls	r1, r3, #22
 800c96a:	d402      	bmi.n	800c972 <_fflush_r+0x3a>
 800c96c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c96e:	f7ff fd6e 	bl	800c44e <__retarget_lock_acquire_recursive>
 800c972:	4628      	mov	r0, r5
 800c974:	4621      	mov	r1, r4
 800c976:	f7ff ff59 	bl	800c82c <__sflush_r>
 800c97a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c97c:	07da      	lsls	r2, r3, #31
 800c97e:	4605      	mov	r5, r0
 800c980:	d4e0      	bmi.n	800c944 <_fflush_r+0xc>
 800c982:	89a3      	ldrh	r3, [r4, #12]
 800c984:	059b      	lsls	r3, r3, #22
 800c986:	d4dd      	bmi.n	800c944 <_fflush_r+0xc>
 800c988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c98a:	f7ff fd61 	bl	800c450 <__retarget_lock_release_recursive>
 800c98e:	e7d9      	b.n	800c944 <_fflush_r+0xc>
 800c990:	4b05      	ldr	r3, [pc, #20]	; (800c9a8 <_fflush_r+0x70>)
 800c992:	429c      	cmp	r4, r3
 800c994:	d101      	bne.n	800c99a <_fflush_r+0x62>
 800c996:	68ac      	ldr	r4, [r5, #8]
 800c998:	e7df      	b.n	800c95a <_fflush_r+0x22>
 800c99a:	4b04      	ldr	r3, [pc, #16]	; (800c9ac <_fflush_r+0x74>)
 800c99c:	429c      	cmp	r4, r3
 800c99e:	bf08      	it	eq
 800c9a0:	68ec      	ldreq	r4, [r5, #12]
 800c9a2:	e7da      	b.n	800c95a <_fflush_r+0x22>
 800c9a4:	0800d86c 	.word	0x0800d86c
 800c9a8:	0800d88c 	.word	0x0800d88c
 800c9ac:	0800d84c 	.word	0x0800d84c

0800c9b0 <_lseek_r>:
 800c9b0:	b538      	push	{r3, r4, r5, lr}
 800c9b2:	4d07      	ldr	r5, [pc, #28]	; (800c9d0 <_lseek_r+0x20>)
 800c9b4:	4604      	mov	r4, r0
 800c9b6:	4608      	mov	r0, r1
 800c9b8:	4611      	mov	r1, r2
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	602a      	str	r2, [r5, #0]
 800c9be:	461a      	mov	r2, r3
 800c9c0:	f7f4 f824 	bl	8000a0c <_lseek>
 800c9c4:	1c43      	adds	r3, r0, #1
 800c9c6:	d102      	bne.n	800c9ce <_lseek_r+0x1e>
 800c9c8:	682b      	ldr	r3, [r5, #0]
 800c9ca:	b103      	cbz	r3, 800c9ce <_lseek_r+0x1e>
 800c9cc:	6023      	str	r3, [r4, #0]
 800c9ce:	bd38      	pop	{r3, r4, r5, pc}
 800c9d0:	2000dd08 	.word	0x2000dd08

0800c9d4 <__malloc_lock>:
 800c9d4:	4801      	ldr	r0, [pc, #4]	; (800c9dc <__malloc_lock+0x8>)
 800c9d6:	f7ff bd3a 	b.w	800c44e <__retarget_lock_acquire_recursive>
 800c9da:	bf00      	nop
 800c9dc:	2000dcfc 	.word	0x2000dcfc

0800c9e0 <__malloc_unlock>:
 800c9e0:	4801      	ldr	r0, [pc, #4]	; (800c9e8 <__malloc_unlock+0x8>)
 800c9e2:	f7ff bd35 	b.w	800c450 <__retarget_lock_release_recursive>
 800c9e6:	bf00      	nop
 800c9e8:	2000dcfc 	.word	0x2000dcfc

0800c9ec <_free_r>:
 800c9ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9ee:	2900      	cmp	r1, #0
 800c9f0:	d044      	beq.n	800ca7c <_free_r+0x90>
 800c9f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9f6:	9001      	str	r0, [sp, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f1a1 0404 	sub.w	r4, r1, #4
 800c9fe:	bfb8      	it	lt
 800ca00:	18e4      	addlt	r4, r4, r3
 800ca02:	f7ff ffe7 	bl	800c9d4 <__malloc_lock>
 800ca06:	4a1e      	ldr	r2, [pc, #120]	; (800ca80 <_free_r+0x94>)
 800ca08:	9801      	ldr	r0, [sp, #4]
 800ca0a:	6813      	ldr	r3, [r2, #0]
 800ca0c:	b933      	cbnz	r3, 800ca1c <_free_r+0x30>
 800ca0e:	6063      	str	r3, [r4, #4]
 800ca10:	6014      	str	r4, [r2, #0]
 800ca12:	b003      	add	sp, #12
 800ca14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca18:	f7ff bfe2 	b.w	800c9e0 <__malloc_unlock>
 800ca1c:	42a3      	cmp	r3, r4
 800ca1e:	d908      	bls.n	800ca32 <_free_r+0x46>
 800ca20:	6825      	ldr	r5, [r4, #0]
 800ca22:	1961      	adds	r1, r4, r5
 800ca24:	428b      	cmp	r3, r1
 800ca26:	bf01      	itttt	eq
 800ca28:	6819      	ldreq	r1, [r3, #0]
 800ca2a:	685b      	ldreq	r3, [r3, #4]
 800ca2c:	1949      	addeq	r1, r1, r5
 800ca2e:	6021      	streq	r1, [r4, #0]
 800ca30:	e7ed      	b.n	800ca0e <_free_r+0x22>
 800ca32:	461a      	mov	r2, r3
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	b10b      	cbz	r3, 800ca3c <_free_r+0x50>
 800ca38:	42a3      	cmp	r3, r4
 800ca3a:	d9fa      	bls.n	800ca32 <_free_r+0x46>
 800ca3c:	6811      	ldr	r1, [r2, #0]
 800ca3e:	1855      	adds	r5, r2, r1
 800ca40:	42a5      	cmp	r5, r4
 800ca42:	d10b      	bne.n	800ca5c <_free_r+0x70>
 800ca44:	6824      	ldr	r4, [r4, #0]
 800ca46:	4421      	add	r1, r4
 800ca48:	1854      	adds	r4, r2, r1
 800ca4a:	42a3      	cmp	r3, r4
 800ca4c:	6011      	str	r1, [r2, #0]
 800ca4e:	d1e0      	bne.n	800ca12 <_free_r+0x26>
 800ca50:	681c      	ldr	r4, [r3, #0]
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	6053      	str	r3, [r2, #4]
 800ca56:	4421      	add	r1, r4
 800ca58:	6011      	str	r1, [r2, #0]
 800ca5a:	e7da      	b.n	800ca12 <_free_r+0x26>
 800ca5c:	d902      	bls.n	800ca64 <_free_r+0x78>
 800ca5e:	230c      	movs	r3, #12
 800ca60:	6003      	str	r3, [r0, #0]
 800ca62:	e7d6      	b.n	800ca12 <_free_r+0x26>
 800ca64:	6825      	ldr	r5, [r4, #0]
 800ca66:	1961      	adds	r1, r4, r5
 800ca68:	428b      	cmp	r3, r1
 800ca6a:	bf04      	itt	eq
 800ca6c:	6819      	ldreq	r1, [r3, #0]
 800ca6e:	685b      	ldreq	r3, [r3, #4]
 800ca70:	6063      	str	r3, [r4, #4]
 800ca72:	bf04      	itt	eq
 800ca74:	1949      	addeq	r1, r1, r5
 800ca76:	6021      	streq	r1, [r4, #0]
 800ca78:	6054      	str	r4, [r2, #4]
 800ca7a:	e7ca      	b.n	800ca12 <_free_r+0x26>
 800ca7c:	b003      	add	sp, #12
 800ca7e:	bd30      	pop	{r4, r5, pc}
 800ca80:	2000dd00 	.word	0x2000dd00

0800ca84 <__ssputs_r>:
 800ca84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca88:	688e      	ldr	r6, [r1, #8]
 800ca8a:	429e      	cmp	r6, r3
 800ca8c:	4682      	mov	sl, r0
 800ca8e:	460c      	mov	r4, r1
 800ca90:	4690      	mov	r8, r2
 800ca92:	461f      	mov	r7, r3
 800ca94:	d838      	bhi.n	800cb08 <__ssputs_r+0x84>
 800ca96:	898a      	ldrh	r2, [r1, #12]
 800ca98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca9c:	d032      	beq.n	800cb04 <__ssputs_r+0x80>
 800ca9e:	6825      	ldr	r5, [r4, #0]
 800caa0:	6909      	ldr	r1, [r1, #16]
 800caa2:	eba5 0901 	sub.w	r9, r5, r1
 800caa6:	6965      	ldr	r5, [r4, #20]
 800caa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800caac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cab0:	3301      	adds	r3, #1
 800cab2:	444b      	add	r3, r9
 800cab4:	106d      	asrs	r5, r5, #1
 800cab6:	429d      	cmp	r5, r3
 800cab8:	bf38      	it	cc
 800caba:	461d      	movcc	r5, r3
 800cabc:	0553      	lsls	r3, r2, #21
 800cabe:	d531      	bpl.n	800cb24 <__ssputs_r+0xa0>
 800cac0:	4629      	mov	r1, r5
 800cac2:	f7ff fcfd 	bl	800c4c0 <_malloc_r>
 800cac6:	4606      	mov	r6, r0
 800cac8:	b950      	cbnz	r0, 800cae0 <__ssputs_r+0x5c>
 800caca:	230c      	movs	r3, #12
 800cacc:	f8ca 3000 	str.w	r3, [sl]
 800cad0:	89a3      	ldrh	r3, [r4, #12]
 800cad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cad6:	81a3      	strh	r3, [r4, #12]
 800cad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cadc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cae0:	6921      	ldr	r1, [r4, #16]
 800cae2:	464a      	mov	r2, r9
 800cae4:	f7ff fcb5 	bl	800c452 <memcpy>
 800cae8:	89a3      	ldrh	r3, [r4, #12]
 800caea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800caee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caf2:	81a3      	strh	r3, [r4, #12]
 800caf4:	6126      	str	r6, [r4, #16]
 800caf6:	6165      	str	r5, [r4, #20]
 800caf8:	444e      	add	r6, r9
 800cafa:	eba5 0509 	sub.w	r5, r5, r9
 800cafe:	6026      	str	r6, [r4, #0]
 800cb00:	60a5      	str	r5, [r4, #8]
 800cb02:	463e      	mov	r6, r7
 800cb04:	42be      	cmp	r6, r7
 800cb06:	d900      	bls.n	800cb0a <__ssputs_r+0x86>
 800cb08:	463e      	mov	r6, r7
 800cb0a:	6820      	ldr	r0, [r4, #0]
 800cb0c:	4632      	mov	r2, r6
 800cb0e:	4641      	mov	r1, r8
 800cb10:	f000 fd82 	bl	800d618 <memmove>
 800cb14:	68a3      	ldr	r3, [r4, #8]
 800cb16:	1b9b      	subs	r3, r3, r6
 800cb18:	60a3      	str	r3, [r4, #8]
 800cb1a:	6823      	ldr	r3, [r4, #0]
 800cb1c:	4433      	add	r3, r6
 800cb1e:	6023      	str	r3, [r4, #0]
 800cb20:	2000      	movs	r0, #0
 800cb22:	e7db      	b.n	800cadc <__ssputs_r+0x58>
 800cb24:	462a      	mov	r2, r5
 800cb26:	f000 fd91 	bl	800d64c <_realloc_r>
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d1e1      	bne.n	800caf4 <__ssputs_r+0x70>
 800cb30:	6921      	ldr	r1, [r4, #16]
 800cb32:	4650      	mov	r0, sl
 800cb34:	f7ff ff5a 	bl	800c9ec <_free_r>
 800cb38:	e7c7      	b.n	800caca <__ssputs_r+0x46>
	...

0800cb3c <_svfiprintf_r>:
 800cb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb40:	4698      	mov	r8, r3
 800cb42:	898b      	ldrh	r3, [r1, #12]
 800cb44:	061b      	lsls	r3, r3, #24
 800cb46:	b09d      	sub	sp, #116	; 0x74
 800cb48:	4607      	mov	r7, r0
 800cb4a:	460d      	mov	r5, r1
 800cb4c:	4614      	mov	r4, r2
 800cb4e:	d50e      	bpl.n	800cb6e <_svfiprintf_r+0x32>
 800cb50:	690b      	ldr	r3, [r1, #16]
 800cb52:	b963      	cbnz	r3, 800cb6e <_svfiprintf_r+0x32>
 800cb54:	2140      	movs	r1, #64	; 0x40
 800cb56:	f7ff fcb3 	bl	800c4c0 <_malloc_r>
 800cb5a:	6028      	str	r0, [r5, #0]
 800cb5c:	6128      	str	r0, [r5, #16]
 800cb5e:	b920      	cbnz	r0, 800cb6a <_svfiprintf_r+0x2e>
 800cb60:	230c      	movs	r3, #12
 800cb62:	603b      	str	r3, [r7, #0]
 800cb64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb68:	e0d1      	b.n	800cd0e <_svfiprintf_r+0x1d2>
 800cb6a:	2340      	movs	r3, #64	; 0x40
 800cb6c:	616b      	str	r3, [r5, #20]
 800cb6e:	2300      	movs	r3, #0
 800cb70:	9309      	str	r3, [sp, #36]	; 0x24
 800cb72:	2320      	movs	r3, #32
 800cb74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb78:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb7c:	2330      	movs	r3, #48	; 0x30
 800cb7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cd28 <_svfiprintf_r+0x1ec>
 800cb82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb86:	f04f 0901 	mov.w	r9, #1
 800cb8a:	4623      	mov	r3, r4
 800cb8c:	469a      	mov	sl, r3
 800cb8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb92:	b10a      	cbz	r2, 800cb98 <_svfiprintf_r+0x5c>
 800cb94:	2a25      	cmp	r2, #37	; 0x25
 800cb96:	d1f9      	bne.n	800cb8c <_svfiprintf_r+0x50>
 800cb98:	ebba 0b04 	subs.w	fp, sl, r4
 800cb9c:	d00b      	beq.n	800cbb6 <_svfiprintf_r+0x7a>
 800cb9e:	465b      	mov	r3, fp
 800cba0:	4622      	mov	r2, r4
 800cba2:	4629      	mov	r1, r5
 800cba4:	4638      	mov	r0, r7
 800cba6:	f7ff ff6d 	bl	800ca84 <__ssputs_r>
 800cbaa:	3001      	adds	r0, #1
 800cbac:	f000 80aa 	beq.w	800cd04 <_svfiprintf_r+0x1c8>
 800cbb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbb2:	445a      	add	r2, fp
 800cbb4:	9209      	str	r2, [sp, #36]	; 0x24
 800cbb6:	f89a 3000 	ldrb.w	r3, [sl]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f000 80a2 	beq.w	800cd04 <_svfiprintf_r+0x1c8>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbca:	f10a 0a01 	add.w	sl, sl, #1
 800cbce:	9304      	str	r3, [sp, #16]
 800cbd0:	9307      	str	r3, [sp, #28]
 800cbd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbd6:	931a      	str	r3, [sp, #104]	; 0x68
 800cbd8:	4654      	mov	r4, sl
 800cbda:	2205      	movs	r2, #5
 800cbdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbe0:	4851      	ldr	r0, [pc, #324]	; (800cd28 <_svfiprintf_r+0x1ec>)
 800cbe2:	f7f3 fafd 	bl	80001e0 <memchr>
 800cbe6:	9a04      	ldr	r2, [sp, #16]
 800cbe8:	b9d8      	cbnz	r0, 800cc22 <_svfiprintf_r+0xe6>
 800cbea:	06d0      	lsls	r0, r2, #27
 800cbec:	bf44      	itt	mi
 800cbee:	2320      	movmi	r3, #32
 800cbf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbf4:	0711      	lsls	r1, r2, #28
 800cbf6:	bf44      	itt	mi
 800cbf8:	232b      	movmi	r3, #43	; 0x2b
 800cbfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbfe:	f89a 3000 	ldrb.w	r3, [sl]
 800cc02:	2b2a      	cmp	r3, #42	; 0x2a
 800cc04:	d015      	beq.n	800cc32 <_svfiprintf_r+0xf6>
 800cc06:	9a07      	ldr	r2, [sp, #28]
 800cc08:	4654      	mov	r4, sl
 800cc0a:	2000      	movs	r0, #0
 800cc0c:	f04f 0c0a 	mov.w	ip, #10
 800cc10:	4621      	mov	r1, r4
 800cc12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc16:	3b30      	subs	r3, #48	; 0x30
 800cc18:	2b09      	cmp	r3, #9
 800cc1a:	d94e      	bls.n	800ccba <_svfiprintf_r+0x17e>
 800cc1c:	b1b0      	cbz	r0, 800cc4c <_svfiprintf_r+0x110>
 800cc1e:	9207      	str	r2, [sp, #28]
 800cc20:	e014      	b.n	800cc4c <_svfiprintf_r+0x110>
 800cc22:	eba0 0308 	sub.w	r3, r0, r8
 800cc26:	fa09 f303 	lsl.w	r3, r9, r3
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	9304      	str	r3, [sp, #16]
 800cc2e:	46a2      	mov	sl, r4
 800cc30:	e7d2      	b.n	800cbd8 <_svfiprintf_r+0x9c>
 800cc32:	9b03      	ldr	r3, [sp, #12]
 800cc34:	1d19      	adds	r1, r3, #4
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	9103      	str	r1, [sp, #12]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	bfbb      	ittet	lt
 800cc3e:	425b      	neglt	r3, r3
 800cc40:	f042 0202 	orrlt.w	r2, r2, #2
 800cc44:	9307      	strge	r3, [sp, #28]
 800cc46:	9307      	strlt	r3, [sp, #28]
 800cc48:	bfb8      	it	lt
 800cc4a:	9204      	strlt	r2, [sp, #16]
 800cc4c:	7823      	ldrb	r3, [r4, #0]
 800cc4e:	2b2e      	cmp	r3, #46	; 0x2e
 800cc50:	d10c      	bne.n	800cc6c <_svfiprintf_r+0x130>
 800cc52:	7863      	ldrb	r3, [r4, #1]
 800cc54:	2b2a      	cmp	r3, #42	; 0x2a
 800cc56:	d135      	bne.n	800ccc4 <_svfiprintf_r+0x188>
 800cc58:	9b03      	ldr	r3, [sp, #12]
 800cc5a:	1d1a      	adds	r2, r3, #4
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	9203      	str	r2, [sp, #12]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	bfb8      	it	lt
 800cc64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cc68:	3402      	adds	r4, #2
 800cc6a:	9305      	str	r3, [sp, #20]
 800cc6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cd38 <_svfiprintf_r+0x1fc>
 800cc70:	7821      	ldrb	r1, [r4, #0]
 800cc72:	2203      	movs	r2, #3
 800cc74:	4650      	mov	r0, sl
 800cc76:	f7f3 fab3 	bl	80001e0 <memchr>
 800cc7a:	b140      	cbz	r0, 800cc8e <_svfiprintf_r+0x152>
 800cc7c:	2340      	movs	r3, #64	; 0x40
 800cc7e:	eba0 000a 	sub.w	r0, r0, sl
 800cc82:	fa03 f000 	lsl.w	r0, r3, r0
 800cc86:	9b04      	ldr	r3, [sp, #16]
 800cc88:	4303      	orrs	r3, r0
 800cc8a:	3401      	adds	r4, #1
 800cc8c:	9304      	str	r3, [sp, #16]
 800cc8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc92:	4826      	ldr	r0, [pc, #152]	; (800cd2c <_svfiprintf_r+0x1f0>)
 800cc94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc98:	2206      	movs	r2, #6
 800cc9a:	f7f3 faa1 	bl	80001e0 <memchr>
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	d038      	beq.n	800cd14 <_svfiprintf_r+0x1d8>
 800cca2:	4b23      	ldr	r3, [pc, #140]	; (800cd30 <_svfiprintf_r+0x1f4>)
 800cca4:	bb1b      	cbnz	r3, 800ccee <_svfiprintf_r+0x1b2>
 800cca6:	9b03      	ldr	r3, [sp, #12]
 800cca8:	3307      	adds	r3, #7
 800ccaa:	f023 0307 	bic.w	r3, r3, #7
 800ccae:	3308      	adds	r3, #8
 800ccb0:	9303      	str	r3, [sp, #12]
 800ccb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccb4:	4433      	add	r3, r6
 800ccb6:	9309      	str	r3, [sp, #36]	; 0x24
 800ccb8:	e767      	b.n	800cb8a <_svfiprintf_r+0x4e>
 800ccba:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccbe:	460c      	mov	r4, r1
 800ccc0:	2001      	movs	r0, #1
 800ccc2:	e7a5      	b.n	800cc10 <_svfiprintf_r+0xd4>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	3401      	adds	r4, #1
 800ccc8:	9305      	str	r3, [sp, #20]
 800ccca:	4619      	mov	r1, r3
 800cccc:	f04f 0c0a 	mov.w	ip, #10
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccd6:	3a30      	subs	r2, #48	; 0x30
 800ccd8:	2a09      	cmp	r2, #9
 800ccda:	d903      	bls.n	800cce4 <_svfiprintf_r+0x1a8>
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d0c5      	beq.n	800cc6c <_svfiprintf_r+0x130>
 800cce0:	9105      	str	r1, [sp, #20]
 800cce2:	e7c3      	b.n	800cc6c <_svfiprintf_r+0x130>
 800cce4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cce8:	4604      	mov	r4, r0
 800ccea:	2301      	movs	r3, #1
 800ccec:	e7f0      	b.n	800ccd0 <_svfiprintf_r+0x194>
 800ccee:	ab03      	add	r3, sp, #12
 800ccf0:	9300      	str	r3, [sp, #0]
 800ccf2:	462a      	mov	r2, r5
 800ccf4:	4b0f      	ldr	r3, [pc, #60]	; (800cd34 <_svfiprintf_r+0x1f8>)
 800ccf6:	a904      	add	r1, sp, #16
 800ccf8:	4638      	mov	r0, r7
 800ccfa:	f3af 8000 	nop.w
 800ccfe:	1c42      	adds	r2, r0, #1
 800cd00:	4606      	mov	r6, r0
 800cd02:	d1d6      	bne.n	800ccb2 <_svfiprintf_r+0x176>
 800cd04:	89ab      	ldrh	r3, [r5, #12]
 800cd06:	065b      	lsls	r3, r3, #25
 800cd08:	f53f af2c 	bmi.w	800cb64 <_svfiprintf_r+0x28>
 800cd0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd0e:	b01d      	add	sp, #116	; 0x74
 800cd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd14:	ab03      	add	r3, sp, #12
 800cd16:	9300      	str	r3, [sp, #0]
 800cd18:	462a      	mov	r2, r5
 800cd1a:	4b06      	ldr	r3, [pc, #24]	; (800cd34 <_svfiprintf_r+0x1f8>)
 800cd1c:	a904      	add	r1, sp, #16
 800cd1e:	4638      	mov	r0, r7
 800cd20:	f000 f9d4 	bl	800d0cc <_printf_i>
 800cd24:	e7eb      	b.n	800ccfe <_svfiprintf_r+0x1c2>
 800cd26:	bf00      	nop
 800cd28:	0800d8b0 	.word	0x0800d8b0
 800cd2c:	0800d8ba 	.word	0x0800d8ba
 800cd30:	00000000 	.word	0x00000000
 800cd34:	0800ca85 	.word	0x0800ca85
 800cd38:	0800d8b6 	.word	0x0800d8b6

0800cd3c <__sfputc_r>:
 800cd3c:	6893      	ldr	r3, [r2, #8]
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	b410      	push	{r4}
 800cd44:	6093      	str	r3, [r2, #8]
 800cd46:	da08      	bge.n	800cd5a <__sfputc_r+0x1e>
 800cd48:	6994      	ldr	r4, [r2, #24]
 800cd4a:	42a3      	cmp	r3, r4
 800cd4c:	db01      	blt.n	800cd52 <__sfputc_r+0x16>
 800cd4e:	290a      	cmp	r1, #10
 800cd50:	d103      	bne.n	800cd5a <__sfputc_r+0x1e>
 800cd52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd56:	f000 bb39 	b.w	800d3cc <__swbuf_r>
 800cd5a:	6813      	ldr	r3, [r2, #0]
 800cd5c:	1c58      	adds	r0, r3, #1
 800cd5e:	6010      	str	r0, [r2, #0]
 800cd60:	7019      	strb	r1, [r3, #0]
 800cd62:	4608      	mov	r0, r1
 800cd64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <__sfputs_r>:
 800cd6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6c:	4606      	mov	r6, r0
 800cd6e:	460f      	mov	r7, r1
 800cd70:	4614      	mov	r4, r2
 800cd72:	18d5      	adds	r5, r2, r3
 800cd74:	42ac      	cmp	r4, r5
 800cd76:	d101      	bne.n	800cd7c <__sfputs_r+0x12>
 800cd78:	2000      	movs	r0, #0
 800cd7a:	e007      	b.n	800cd8c <__sfputs_r+0x22>
 800cd7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd80:	463a      	mov	r2, r7
 800cd82:	4630      	mov	r0, r6
 800cd84:	f7ff ffda 	bl	800cd3c <__sfputc_r>
 800cd88:	1c43      	adds	r3, r0, #1
 800cd8a:	d1f3      	bne.n	800cd74 <__sfputs_r+0xa>
 800cd8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd90 <_vfiprintf_r>:
 800cd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd94:	460d      	mov	r5, r1
 800cd96:	b09d      	sub	sp, #116	; 0x74
 800cd98:	4614      	mov	r4, r2
 800cd9a:	4698      	mov	r8, r3
 800cd9c:	4606      	mov	r6, r0
 800cd9e:	b118      	cbz	r0, 800cda8 <_vfiprintf_r+0x18>
 800cda0:	6983      	ldr	r3, [r0, #24]
 800cda2:	b90b      	cbnz	r3, 800cda8 <_vfiprintf_r+0x18>
 800cda4:	f7ff fa90 	bl	800c2c8 <__sinit>
 800cda8:	4b89      	ldr	r3, [pc, #548]	; (800cfd0 <_vfiprintf_r+0x240>)
 800cdaa:	429d      	cmp	r5, r3
 800cdac:	d11b      	bne.n	800cde6 <_vfiprintf_r+0x56>
 800cdae:	6875      	ldr	r5, [r6, #4]
 800cdb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdb2:	07d9      	lsls	r1, r3, #31
 800cdb4:	d405      	bmi.n	800cdc2 <_vfiprintf_r+0x32>
 800cdb6:	89ab      	ldrh	r3, [r5, #12]
 800cdb8:	059a      	lsls	r2, r3, #22
 800cdba:	d402      	bmi.n	800cdc2 <_vfiprintf_r+0x32>
 800cdbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdbe:	f7ff fb46 	bl	800c44e <__retarget_lock_acquire_recursive>
 800cdc2:	89ab      	ldrh	r3, [r5, #12]
 800cdc4:	071b      	lsls	r3, r3, #28
 800cdc6:	d501      	bpl.n	800cdcc <_vfiprintf_r+0x3c>
 800cdc8:	692b      	ldr	r3, [r5, #16]
 800cdca:	b9eb      	cbnz	r3, 800ce08 <_vfiprintf_r+0x78>
 800cdcc:	4629      	mov	r1, r5
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f000 fb4e 	bl	800d470 <__swsetup_r>
 800cdd4:	b1c0      	cbz	r0, 800ce08 <_vfiprintf_r+0x78>
 800cdd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdd8:	07dc      	lsls	r4, r3, #31
 800cdda:	d50e      	bpl.n	800cdfa <_vfiprintf_r+0x6a>
 800cddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cde0:	b01d      	add	sp, #116	; 0x74
 800cde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde6:	4b7b      	ldr	r3, [pc, #492]	; (800cfd4 <_vfiprintf_r+0x244>)
 800cde8:	429d      	cmp	r5, r3
 800cdea:	d101      	bne.n	800cdf0 <_vfiprintf_r+0x60>
 800cdec:	68b5      	ldr	r5, [r6, #8]
 800cdee:	e7df      	b.n	800cdb0 <_vfiprintf_r+0x20>
 800cdf0:	4b79      	ldr	r3, [pc, #484]	; (800cfd8 <_vfiprintf_r+0x248>)
 800cdf2:	429d      	cmp	r5, r3
 800cdf4:	bf08      	it	eq
 800cdf6:	68f5      	ldreq	r5, [r6, #12]
 800cdf8:	e7da      	b.n	800cdb0 <_vfiprintf_r+0x20>
 800cdfa:	89ab      	ldrh	r3, [r5, #12]
 800cdfc:	0598      	lsls	r0, r3, #22
 800cdfe:	d4ed      	bmi.n	800cddc <_vfiprintf_r+0x4c>
 800ce00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce02:	f7ff fb25 	bl	800c450 <__retarget_lock_release_recursive>
 800ce06:	e7e9      	b.n	800cddc <_vfiprintf_r+0x4c>
 800ce08:	2300      	movs	r3, #0
 800ce0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce0c:	2320      	movs	r3, #32
 800ce0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce12:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce16:	2330      	movs	r3, #48	; 0x30
 800ce18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cfdc <_vfiprintf_r+0x24c>
 800ce1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce20:	f04f 0901 	mov.w	r9, #1
 800ce24:	4623      	mov	r3, r4
 800ce26:	469a      	mov	sl, r3
 800ce28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce2c:	b10a      	cbz	r2, 800ce32 <_vfiprintf_r+0xa2>
 800ce2e:	2a25      	cmp	r2, #37	; 0x25
 800ce30:	d1f9      	bne.n	800ce26 <_vfiprintf_r+0x96>
 800ce32:	ebba 0b04 	subs.w	fp, sl, r4
 800ce36:	d00b      	beq.n	800ce50 <_vfiprintf_r+0xc0>
 800ce38:	465b      	mov	r3, fp
 800ce3a:	4622      	mov	r2, r4
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	4630      	mov	r0, r6
 800ce40:	f7ff ff93 	bl	800cd6a <__sfputs_r>
 800ce44:	3001      	adds	r0, #1
 800ce46:	f000 80aa 	beq.w	800cf9e <_vfiprintf_r+0x20e>
 800ce4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce4c:	445a      	add	r2, fp
 800ce4e:	9209      	str	r2, [sp, #36]	; 0x24
 800ce50:	f89a 3000 	ldrb.w	r3, [sl]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f000 80a2 	beq.w	800cf9e <_vfiprintf_r+0x20e>
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce64:	f10a 0a01 	add.w	sl, sl, #1
 800ce68:	9304      	str	r3, [sp, #16]
 800ce6a:	9307      	str	r3, [sp, #28]
 800ce6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce70:	931a      	str	r3, [sp, #104]	; 0x68
 800ce72:	4654      	mov	r4, sl
 800ce74:	2205      	movs	r2, #5
 800ce76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce7a:	4858      	ldr	r0, [pc, #352]	; (800cfdc <_vfiprintf_r+0x24c>)
 800ce7c:	f7f3 f9b0 	bl	80001e0 <memchr>
 800ce80:	9a04      	ldr	r2, [sp, #16]
 800ce82:	b9d8      	cbnz	r0, 800cebc <_vfiprintf_r+0x12c>
 800ce84:	06d1      	lsls	r1, r2, #27
 800ce86:	bf44      	itt	mi
 800ce88:	2320      	movmi	r3, #32
 800ce8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce8e:	0713      	lsls	r3, r2, #28
 800ce90:	bf44      	itt	mi
 800ce92:	232b      	movmi	r3, #43	; 0x2b
 800ce94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce98:	f89a 3000 	ldrb.w	r3, [sl]
 800ce9c:	2b2a      	cmp	r3, #42	; 0x2a
 800ce9e:	d015      	beq.n	800cecc <_vfiprintf_r+0x13c>
 800cea0:	9a07      	ldr	r2, [sp, #28]
 800cea2:	4654      	mov	r4, sl
 800cea4:	2000      	movs	r0, #0
 800cea6:	f04f 0c0a 	mov.w	ip, #10
 800ceaa:	4621      	mov	r1, r4
 800ceac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceb0:	3b30      	subs	r3, #48	; 0x30
 800ceb2:	2b09      	cmp	r3, #9
 800ceb4:	d94e      	bls.n	800cf54 <_vfiprintf_r+0x1c4>
 800ceb6:	b1b0      	cbz	r0, 800cee6 <_vfiprintf_r+0x156>
 800ceb8:	9207      	str	r2, [sp, #28]
 800ceba:	e014      	b.n	800cee6 <_vfiprintf_r+0x156>
 800cebc:	eba0 0308 	sub.w	r3, r0, r8
 800cec0:	fa09 f303 	lsl.w	r3, r9, r3
 800cec4:	4313      	orrs	r3, r2
 800cec6:	9304      	str	r3, [sp, #16]
 800cec8:	46a2      	mov	sl, r4
 800ceca:	e7d2      	b.n	800ce72 <_vfiprintf_r+0xe2>
 800cecc:	9b03      	ldr	r3, [sp, #12]
 800cece:	1d19      	adds	r1, r3, #4
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	9103      	str	r1, [sp, #12]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	bfbb      	ittet	lt
 800ced8:	425b      	neglt	r3, r3
 800ceda:	f042 0202 	orrlt.w	r2, r2, #2
 800cede:	9307      	strge	r3, [sp, #28]
 800cee0:	9307      	strlt	r3, [sp, #28]
 800cee2:	bfb8      	it	lt
 800cee4:	9204      	strlt	r2, [sp, #16]
 800cee6:	7823      	ldrb	r3, [r4, #0]
 800cee8:	2b2e      	cmp	r3, #46	; 0x2e
 800ceea:	d10c      	bne.n	800cf06 <_vfiprintf_r+0x176>
 800ceec:	7863      	ldrb	r3, [r4, #1]
 800ceee:	2b2a      	cmp	r3, #42	; 0x2a
 800cef0:	d135      	bne.n	800cf5e <_vfiprintf_r+0x1ce>
 800cef2:	9b03      	ldr	r3, [sp, #12]
 800cef4:	1d1a      	adds	r2, r3, #4
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	9203      	str	r2, [sp, #12]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	bfb8      	it	lt
 800cefe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cf02:	3402      	adds	r4, #2
 800cf04:	9305      	str	r3, [sp, #20]
 800cf06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cfec <_vfiprintf_r+0x25c>
 800cf0a:	7821      	ldrb	r1, [r4, #0]
 800cf0c:	2203      	movs	r2, #3
 800cf0e:	4650      	mov	r0, sl
 800cf10:	f7f3 f966 	bl	80001e0 <memchr>
 800cf14:	b140      	cbz	r0, 800cf28 <_vfiprintf_r+0x198>
 800cf16:	2340      	movs	r3, #64	; 0x40
 800cf18:	eba0 000a 	sub.w	r0, r0, sl
 800cf1c:	fa03 f000 	lsl.w	r0, r3, r0
 800cf20:	9b04      	ldr	r3, [sp, #16]
 800cf22:	4303      	orrs	r3, r0
 800cf24:	3401      	adds	r4, #1
 800cf26:	9304      	str	r3, [sp, #16]
 800cf28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf2c:	482c      	ldr	r0, [pc, #176]	; (800cfe0 <_vfiprintf_r+0x250>)
 800cf2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf32:	2206      	movs	r2, #6
 800cf34:	f7f3 f954 	bl	80001e0 <memchr>
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	d03f      	beq.n	800cfbc <_vfiprintf_r+0x22c>
 800cf3c:	4b29      	ldr	r3, [pc, #164]	; (800cfe4 <_vfiprintf_r+0x254>)
 800cf3e:	bb1b      	cbnz	r3, 800cf88 <_vfiprintf_r+0x1f8>
 800cf40:	9b03      	ldr	r3, [sp, #12]
 800cf42:	3307      	adds	r3, #7
 800cf44:	f023 0307 	bic.w	r3, r3, #7
 800cf48:	3308      	adds	r3, #8
 800cf4a:	9303      	str	r3, [sp, #12]
 800cf4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf4e:	443b      	add	r3, r7
 800cf50:	9309      	str	r3, [sp, #36]	; 0x24
 800cf52:	e767      	b.n	800ce24 <_vfiprintf_r+0x94>
 800cf54:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf58:	460c      	mov	r4, r1
 800cf5a:	2001      	movs	r0, #1
 800cf5c:	e7a5      	b.n	800ceaa <_vfiprintf_r+0x11a>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	3401      	adds	r4, #1
 800cf62:	9305      	str	r3, [sp, #20]
 800cf64:	4619      	mov	r1, r3
 800cf66:	f04f 0c0a 	mov.w	ip, #10
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf70:	3a30      	subs	r2, #48	; 0x30
 800cf72:	2a09      	cmp	r2, #9
 800cf74:	d903      	bls.n	800cf7e <_vfiprintf_r+0x1ee>
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d0c5      	beq.n	800cf06 <_vfiprintf_r+0x176>
 800cf7a:	9105      	str	r1, [sp, #20]
 800cf7c:	e7c3      	b.n	800cf06 <_vfiprintf_r+0x176>
 800cf7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf82:	4604      	mov	r4, r0
 800cf84:	2301      	movs	r3, #1
 800cf86:	e7f0      	b.n	800cf6a <_vfiprintf_r+0x1da>
 800cf88:	ab03      	add	r3, sp, #12
 800cf8a:	9300      	str	r3, [sp, #0]
 800cf8c:	462a      	mov	r2, r5
 800cf8e:	4b16      	ldr	r3, [pc, #88]	; (800cfe8 <_vfiprintf_r+0x258>)
 800cf90:	a904      	add	r1, sp, #16
 800cf92:	4630      	mov	r0, r6
 800cf94:	f3af 8000 	nop.w
 800cf98:	4607      	mov	r7, r0
 800cf9a:	1c78      	adds	r0, r7, #1
 800cf9c:	d1d6      	bne.n	800cf4c <_vfiprintf_r+0x1bc>
 800cf9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfa0:	07d9      	lsls	r1, r3, #31
 800cfa2:	d405      	bmi.n	800cfb0 <_vfiprintf_r+0x220>
 800cfa4:	89ab      	ldrh	r3, [r5, #12]
 800cfa6:	059a      	lsls	r2, r3, #22
 800cfa8:	d402      	bmi.n	800cfb0 <_vfiprintf_r+0x220>
 800cfaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfac:	f7ff fa50 	bl	800c450 <__retarget_lock_release_recursive>
 800cfb0:	89ab      	ldrh	r3, [r5, #12]
 800cfb2:	065b      	lsls	r3, r3, #25
 800cfb4:	f53f af12 	bmi.w	800cddc <_vfiprintf_r+0x4c>
 800cfb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfba:	e711      	b.n	800cde0 <_vfiprintf_r+0x50>
 800cfbc:	ab03      	add	r3, sp, #12
 800cfbe:	9300      	str	r3, [sp, #0]
 800cfc0:	462a      	mov	r2, r5
 800cfc2:	4b09      	ldr	r3, [pc, #36]	; (800cfe8 <_vfiprintf_r+0x258>)
 800cfc4:	a904      	add	r1, sp, #16
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	f000 f880 	bl	800d0cc <_printf_i>
 800cfcc:	e7e4      	b.n	800cf98 <_vfiprintf_r+0x208>
 800cfce:	bf00      	nop
 800cfd0:	0800d86c 	.word	0x0800d86c
 800cfd4:	0800d88c 	.word	0x0800d88c
 800cfd8:	0800d84c 	.word	0x0800d84c
 800cfdc:	0800d8b0 	.word	0x0800d8b0
 800cfe0:	0800d8ba 	.word	0x0800d8ba
 800cfe4:	00000000 	.word	0x00000000
 800cfe8:	0800cd6b 	.word	0x0800cd6b
 800cfec:	0800d8b6 	.word	0x0800d8b6

0800cff0 <_printf_common>:
 800cff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cff4:	4616      	mov	r6, r2
 800cff6:	4699      	mov	r9, r3
 800cff8:	688a      	ldr	r2, [r1, #8]
 800cffa:	690b      	ldr	r3, [r1, #16]
 800cffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d000:	4293      	cmp	r3, r2
 800d002:	bfb8      	it	lt
 800d004:	4613      	movlt	r3, r2
 800d006:	6033      	str	r3, [r6, #0]
 800d008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d00c:	4607      	mov	r7, r0
 800d00e:	460c      	mov	r4, r1
 800d010:	b10a      	cbz	r2, 800d016 <_printf_common+0x26>
 800d012:	3301      	adds	r3, #1
 800d014:	6033      	str	r3, [r6, #0]
 800d016:	6823      	ldr	r3, [r4, #0]
 800d018:	0699      	lsls	r1, r3, #26
 800d01a:	bf42      	ittt	mi
 800d01c:	6833      	ldrmi	r3, [r6, #0]
 800d01e:	3302      	addmi	r3, #2
 800d020:	6033      	strmi	r3, [r6, #0]
 800d022:	6825      	ldr	r5, [r4, #0]
 800d024:	f015 0506 	ands.w	r5, r5, #6
 800d028:	d106      	bne.n	800d038 <_printf_common+0x48>
 800d02a:	f104 0a19 	add.w	sl, r4, #25
 800d02e:	68e3      	ldr	r3, [r4, #12]
 800d030:	6832      	ldr	r2, [r6, #0]
 800d032:	1a9b      	subs	r3, r3, r2
 800d034:	42ab      	cmp	r3, r5
 800d036:	dc26      	bgt.n	800d086 <_printf_common+0x96>
 800d038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d03c:	1e13      	subs	r3, r2, #0
 800d03e:	6822      	ldr	r2, [r4, #0]
 800d040:	bf18      	it	ne
 800d042:	2301      	movne	r3, #1
 800d044:	0692      	lsls	r2, r2, #26
 800d046:	d42b      	bmi.n	800d0a0 <_printf_common+0xb0>
 800d048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d04c:	4649      	mov	r1, r9
 800d04e:	4638      	mov	r0, r7
 800d050:	47c0      	blx	r8
 800d052:	3001      	adds	r0, #1
 800d054:	d01e      	beq.n	800d094 <_printf_common+0xa4>
 800d056:	6823      	ldr	r3, [r4, #0]
 800d058:	68e5      	ldr	r5, [r4, #12]
 800d05a:	6832      	ldr	r2, [r6, #0]
 800d05c:	f003 0306 	and.w	r3, r3, #6
 800d060:	2b04      	cmp	r3, #4
 800d062:	bf08      	it	eq
 800d064:	1aad      	subeq	r5, r5, r2
 800d066:	68a3      	ldr	r3, [r4, #8]
 800d068:	6922      	ldr	r2, [r4, #16]
 800d06a:	bf0c      	ite	eq
 800d06c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d070:	2500      	movne	r5, #0
 800d072:	4293      	cmp	r3, r2
 800d074:	bfc4      	itt	gt
 800d076:	1a9b      	subgt	r3, r3, r2
 800d078:	18ed      	addgt	r5, r5, r3
 800d07a:	2600      	movs	r6, #0
 800d07c:	341a      	adds	r4, #26
 800d07e:	42b5      	cmp	r5, r6
 800d080:	d11a      	bne.n	800d0b8 <_printf_common+0xc8>
 800d082:	2000      	movs	r0, #0
 800d084:	e008      	b.n	800d098 <_printf_common+0xa8>
 800d086:	2301      	movs	r3, #1
 800d088:	4652      	mov	r2, sl
 800d08a:	4649      	mov	r1, r9
 800d08c:	4638      	mov	r0, r7
 800d08e:	47c0      	blx	r8
 800d090:	3001      	adds	r0, #1
 800d092:	d103      	bne.n	800d09c <_printf_common+0xac>
 800d094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d09c:	3501      	adds	r5, #1
 800d09e:	e7c6      	b.n	800d02e <_printf_common+0x3e>
 800d0a0:	18e1      	adds	r1, r4, r3
 800d0a2:	1c5a      	adds	r2, r3, #1
 800d0a4:	2030      	movs	r0, #48	; 0x30
 800d0a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0aa:	4422      	add	r2, r4
 800d0ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0b4:	3302      	adds	r3, #2
 800d0b6:	e7c7      	b.n	800d048 <_printf_common+0x58>
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	4622      	mov	r2, r4
 800d0bc:	4649      	mov	r1, r9
 800d0be:	4638      	mov	r0, r7
 800d0c0:	47c0      	blx	r8
 800d0c2:	3001      	adds	r0, #1
 800d0c4:	d0e6      	beq.n	800d094 <_printf_common+0xa4>
 800d0c6:	3601      	adds	r6, #1
 800d0c8:	e7d9      	b.n	800d07e <_printf_common+0x8e>
	...

0800d0cc <_printf_i>:
 800d0cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0d0:	7e0f      	ldrb	r7, [r1, #24]
 800d0d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0d4:	2f78      	cmp	r7, #120	; 0x78
 800d0d6:	4691      	mov	r9, r2
 800d0d8:	4680      	mov	r8, r0
 800d0da:	460c      	mov	r4, r1
 800d0dc:	469a      	mov	sl, r3
 800d0de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d0e2:	d807      	bhi.n	800d0f4 <_printf_i+0x28>
 800d0e4:	2f62      	cmp	r7, #98	; 0x62
 800d0e6:	d80a      	bhi.n	800d0fe <_printf_i+0x32>
 800d0e8:	2f00      	cmp	r7, #0
 800d0ea:	f000 80d8 	beq.w	800d29e <_printf_i+0x1d2>
 800d0ee:	2f58      	cmp	r7, #88	; 0x58
 800d0f0:	f000 80a3 	beq.w	800d23a <_printf_i+0x16e>
 800d0f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d0fc:	e03a      	b.n	800d174 <_printf_i+0xa8>
 800d0fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d102:	2b15      	cmp	r3, #21
 800d104:	d8f6      	bhi.n	800d0f4 <_printf_i+0x28>
 800d106:	a101      	add	r1, pc, #4	; (adr r1, 800d10c <_printf_i+0x40>)
 800d108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d10c:	0800d165 	.word	0x0800d165
 800d110:	0800d179 	.word	0x0800d179
 800d114:	0800d0f5 	.word	0x0800d0f5
 800d118:	0800d0f5 	.word	0x0800d0f5
 800d11c:	0800d0f5 	.word	0x0800d0f5
 800d120:	0800d0f5 	.word	0x0800d0f5
 800d124:	0800d179 	.word	0x0800d179
 800d128:	0800d0f5 	.word	0x0800d0f5
 800d12c:	0800d0f5 	.word	0x0800d0f5
 800d130:	0800d0f5 	.word	0x0800d0f5
 800d134:	0800d0f5 	.word	0x0800d0f5
 800d138:	0800d285 	.word	0x0800d285
 800d13c:	0800d1a9 	.word	0x0800d1a9
 800d140:	0800d267 	.word	0x0800d267
 800d144:	0800d0f5 	.word	0x0800d0f5
 800d148:	0800d0f5 	.word	0x0800d0f5
 800d14c:	0800d2a7 	.word	0x0800d2a7
 800d150:	0800d0f5 	.word	0x0800d0f5
 800d154:	0800d1a9 	.word	0x0800d1a9
 800d158:	0800d0f5 	.word	0x0800d0f5
 800d15c:	0800d0f5 	.word	0x0800d0f5
 800d160:	0800d26f 	.word	0x0800d26f
 800d164:	682b      	ldr	r3, [r5, #0]
 800d166:	1d1a      	adds	r2, r3, #4
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	602a      	str	r2, [r5, #0]
 800d16c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d174:	2301      	movs	r3, #1
 800d176:	e0a3      	b.n	800d2c0 <_printf_i+0x1f4>
 800d178:	6820      	ldr	r0, [r4, #0]
 800d17a:	6829      	ldr	r1, [r5, #0]
 800d17c:	0606      	lsls	r6, r0, #24
 800d17e:	f101 0304 	add.w	r3, r1, #4
 800d182:	d50a      	bpl.n	800d19a <_printf_i+0xce>
 800d184:	680e      	ldr	r6, [r1, #0]
 800d186:	602b      	str	r3, [r5, #0]
 800d188:	2e00      	cmp	r6, #0
 800d18a:	da03      	bge.n	800d194 <_printf_i+0xc8>
 800d18c:	232d      	movs	r3, #45	; 0x2d
 800d18e:	4276      	negs	r6, r6
 800d190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d194:	485e      	ldr	r0, [pc, #376]	; (800d310 <_printf_i+0x244>)
 800d196:	230a      	movs	r3, #10
 800d198:	e019      	b.n	800d1ce <_printf_i+0x102>
 800d19a:	680e      	ldr	r6, [r1, #0]
 800d19c:	602b      	str	r3, [r5, #0]
 800d19e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d1a2:	bf18      	it	ne
 800d1a4:	b236      	sxthne	r6, r6
 800d1a6:	e7ef      	b.n	800d188 <_printf_i+0xbc>
 800d1a8:	682b      	ldr	r3, [r5, #0]
 800d1aa:	6820      	ldr	r0, [r4, #0]
 800d1ac:	1d19      	adds	r1, r3, #4
 800d1ae:	6029      	str	r1, [r5, #0]
 800d1b0:	0601      	lsls	r1, r0, #24
 800d1b2:	d501      	bpl.n	800d1b8 <_printf_i+0xec>
 800d1b4:	681e      	ldr	r6, [r3, #0]
 800d1b6:	e002      	b.n	800d1be <_printf_i+0xf2>
 800d1b8:	0646      	lsls	r6, r0, #25
 800d1ba:	d5fb      	bpl.n	800d1b4 <_printf_i+0xe8>
 800d1bc:	881e      	ldrh	r6, [r3, #0]
 800d1be:	4854      	ldr	r0, [pc, #336]	; (800d310 <_printf_i+0x244>)
 800d1c0:	2f6f      	cmp	r7, #111	; 0x6f
 800d1c2:	bf0c      	ite	eq
 800d1c4:	2308      	moveq	r3, #8
 800d1c6:	230a      	movne	r3, #10
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1ce:	6865      	ldr	r5, [r4, #4]
 800d1d0:	60a5      	str	r5, [r4, #8]
 800d1d2:	2d00      	cmp	r5, #0
 800d1d4:	bfa2      	ittt	ge
 800d1d6:	6821      	ldrge	r1, [r4, #0]
 800d1d8:	f021 0104 	bicge.w	r1, r1, #4
 800d1dc:	6021      	strge	r1, [r4, #0]
 800d1de:	b90e      	cbnz	r6, 800d1e4 <_printf_i+0x118>
 800d1e0:	2d00      	cmp	r5, #0
 800d1e2:	d04d      	beq.n	800d280 <_printf_i+0x1b4>
 800d1e4:	4615      	mov	r5, r2
 800d1e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d1ea:	fb03 6711 	mls	r7, r3, r1, r6
 800d1ee:	5dc7      	ldrb	r7, [r0, r7]
 800d1f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d1f4:	4637      	mov	r7, r6
 800d1f6:	42bb      	cmp	r3, r7
 800d1f8:	460e      	mov	r6, r1
 800d1fa:	d9f4      	bls.n	800d1e6 <_printf_i+0x11a>
 800d1fc:	2b08      	cmp	r3, #8
 800d1fe:	d10b      	bne.n	800d218 <_printf_i+0x14c>
 800d200:	6823      	ldr	r3, [r4, #0]
 800d202:	07de      	lsls	r6, r3, #31
 800d204:	d508      	bpl.n	800d218 <_printf_i+0x14c>
 800d206:	6923      	ldr	r3, [r4, #16]
 800d208:	6861      	ldr	r1, [r4, #4]
 800d20a:	4299      	cmp	r1, r3
 800d20c:	bfde      	ittt	le
 800d20e:	2330      	movle	r3, #48	; 0x30
 800d210:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d214:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d218:	1b52      	subs	r2, r2, r5
 800d21a:	6122      	str	r2, [r4, #16]
 800d21c:	f8cd a000 	str.w	sl, [sp]
 800d220:	464b      	mov	r3, r9
 800d222:	aa03      	add	r2, sp, #12
 800d224:	4621      	mov	r1, r4
 800d226:	4640      	mov	r0, r8
 800d228:	f7ff fee2 	bl	800cff0 <_printf_common>
 800d22c:	3001      	adds	r0, #1
 800d22e:	d14c      	bne.n	800d2ca <_printf_i+0x1fe>
 800d230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d234:	b004      	add	sp, #16
 800d236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d23a:	4835      	ldr	r0, [pc, #212]	; (800d310 <_printf_i+0x244>)
 800d23c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d240:	6829      	ldr	r1, [r5, #0]
 800d242:	6823      	ldr	r3, [r4, #0]
 800d244:	f851 6b04 	ldr.w	r6, [r1], #4
 800d248:	6029      	str	r1, [r5, #0]
 800d24a:	061d      	lsls	r5, r3, #24
 800d24c:	d514      	bpl.n	800d278 <_printf_i+0x1ac>
 800d24e:	07df      	lsls	r7, r3, #31
 800d250:	bf44      	itt	mi
 800d252:	f043 0320 	orrmi.w	r3, r3, #32
 800d256:	6023      	strmi	r3, [r4, #0]
 800d258:	b91e      	cbnz	r6, 800d262 <_printf_i+0x196>
 800d25a:	6823      	ldr	r3, [r4, #0]
 800d25c:	f023 0320 	bic.w	r3, r3, #32
 800d260:	6023      	str	r3, [r4, #0]
 800d262:	2310      	movs	r3, #16
 800d264:	e7b0      	b.n	800d1c8 <_printf_i+0xfc>
 800d266:	6823      	ldr	r3, [r4, #0]
 800d268:	f043 0320 	orr.w	r3, r3, #32
 800d26c:	6023      	str	r3, [r4, #0]
 800d26e:	2378      	movs	r3, #120	; 0x78
 800d270:	4828      	ldr	r0, [pc, #160]	; (800d314 <_printf_i+0x248>)
 800d272:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d276:	e7e3      	b.n	800d240 <_printf_i+0x174>
 800d278:	0659      	lsls	r1, r3, #25
 800d27a:	bf48      	it	mi
 800d27c:	b2b6      	uxthmi	r6, r6
 800d27e:	e7e6      	b.n	800d24e <_printf_i+0x182>
 800d280:	4615      	mov	r5, r2
 800d282:	e7bb      	b.n	800d1fc <_printf_i+0x130>
 800d284:	682b      	ldr	r3, [r5, #0]
 800d286:	6826      	ldr	r6, [r4, #0]
 800d288:	6961      	ldr	r1, [r4, #20]
 800d28a:	1d18      	adds	r0, r3, #4
 800d28c:	6028      	str	r0, [r5, #0]
 800d28e:	0635      	lsls	r5, r6, #24
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	d501      	bpl.n	800d298 <_printf_i+0x1cc>
 800d294:	6019      	str	r1, [r3, #0]
 800d296:	e002      	b.n	800d29e <_printf_i+0x1d2>
 800d298:	0670      	lsls	r0, r6, #25
 800d29a:	d5fb      	bpl.n	800d294 <_printf_i+0x1c8>
 800d29c:	8019      	strh	r1, [r3, #0]
 800d29e:	2300      	movs	r3, #0
 800d2a0:	6123      	str	r3, [r4, #16]
 800d2a2:	4615      	mov	r5, r2
 800d2a4:	e7ba      	b.n	800d21c <_printf_i+0x150>
 800d2a6:	682b      	ldr	r3, [r5, #0]
 800d2a8:	1d1a      	adds	r2, r3, #4
 800d2aa:	602a      	str	r2, [r5, #0]
 800d2ac:	681d      	ldr	r5, [r3, #0]
 800d2ae:	6862      	ldr	r2, [r4, #4]
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	f7f2 ff94 	bl	80001e0 <memchr>
 800d2b8:	b108      	cbz	r0, 800d2be <_printf_i+0x1f2>
 800d2ba:	1b40      	subs	r0, r0, r5
 800d2bc:	6060      	str	r0, [r4, #4]
 800d2be:	6863      	ldr	r3, [r4, #4]
 800d2c0:	6123      	str	r3, [r4, #16]
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2c8:	e7a8      	b.n	800d21c <_printf_i+0x150>
 800d2ca:	6923      	ldr	r3, [r4, #16]
 800d2cc:	462a      	mov	r2, r5
 800d2ce:	4649      	mov	r1, r9
 800d2d0:	4640      	mov	r0, r8
 800d2d2:	47d0      	blx	sl
 800d2d4:	3001      	adds	r0, #1
 800d2d6:	d0ab      	beq.n	800d230 <_printf_i+0x164>
 800d2d8:	6823      	ldr	r3, [r4, #0]
 800d2da:	079b      	lsls	r3, r3, #30
 800d2dc:	d413      	bmi.n	800d306 <_printf_i+0x23a>
 800d2de:	68e0      	ldr	r0, [r4, #12]
 800d2e0:	9b03      	ldr	r3, [sp, #12]
 800d2e2:	4298      	cmp	r0, r3
 800d2e4:	bfb8      	it	lt
 800d2e6:	4618      	movlt	r0, r3
 800d2e8:	e7a4      	b.n	800d234 <_printf_i+0x168>
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	4632      	mov	r2, r6
 800d2ee:	4649      	mov	r1, r9
 800d2f0:	4640      	mov	r0, r8
 800d2f2:	47d0      	blx	sl
 800d2f4:	3001      	adds	r0, #1
 800d2f6:	d09b      	beq.n	800d230 <_printf_i+0x164>
 800d2f8:	3501      	adds	r5, #1
 800d2fa:	68e3      	ldr	r3, [r4, #12]
 800d2fc:	9903      	ldr	r1, [sp, #12]
 800d2fe:	1a5b      	subs	r3, r3, r1
 800d300:	42ab      	cmp	r3, r5
 800d302:	dcf2      	bgt.n	800d2ea <_printf_i+0x21e>
 800d304:	e7eb      	b.n	800d2de <_printf_i+0x212>
 800d306:	2500      	movs	r5, #0
 800d308:	f104 0619 	add.w	r6, r4, #25
 800d30c:	e7f5      	b.n	800d2fa <_printf_i+0x22e>
 800d30e:	bf00      	nop
 800d310:	0800d8c1 	.word	0x0800d8c1
 800d314:	0800d8d2 	.word	0x0800d8d2

0800d318 <_putc_r>:
 800d318:	b570      	push	{r4, r5, r6, lr}
 800d31a:	460d      	mov	r5, r1
 800d31c:	4614      	mov	r4, r2
 800d31e:	4606      	mov	r6, r0
 800d320:	b118      	cbz	r0, 800d32a <_putc_r+0x12>
 800d322:	6983      	ldr	r3, [r0, #24]
 800d324:	b90b      	cbnz	r3, 800d32a <_putc_r+0x12>
 800d326:	f7fe ffcf 	bl	800c2c8 <__sinit>
 800d32a:	4b1c      	ldr	r3, [pc, #112]	; (800d39c <_putc_r+0x84>)
 800d32c:	429c      	cmp	r4, r3
 800d32e:	d124      	bne.n	800d37a <_putc_r+0x62>
 800d330:	6874      	ldr	r4, [r6, #4]
 800d332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d334:	07d8      	lsls	r0, r3, #31
 800d336:	d405      	bmi.n	800d344 <_putc_r+0x2c>
 800d338:	89a3      	ldrh	r3, [r4, #12]
 800d33a:	0599      	lsls	r1, r3, #22
 800d33c:	d402      	bmi.n	800d344 <_putc_r+0x2c>
 800d33e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d340:	f7ff f885 	bl	800c44e <__retarget_lock_acquire_recursive>
 800d344:	68a3      	ldr	r3, [r4, #8]
 800d346:	3b01      	subs	r3, #1
 800d348:	2b00      	cmp	r3, #0
 800d34a:	60a3      	str	r3, [r4, #8]
 800d34c:	da05      	bge.n	800d35a <_putc_r+0x42>
 800d34e:	69a2      	ldr	r2, [r4, #24]
 800d350:	4293      	cmp	r3, r2
 800d352:	db1c      	blt.n	800d38e <_putc_r+0x76>
 800d354:	b2eb      	uxtb	r3, r5
 800d356:	2b0a      	cmp	r3, #10
 800d358:	d019      	beq.n	800d38e <_putc_r+0x76>
 800d35a:	6823      	ldr	r3, [r4, #0]
 800d35c:	1c5a      	adds	r2, r3, #1
 800d35e:	6022      	str	r2, [r4, #0]
 800d360:	701d      	strb	r5, [r3, #0]
 800d362:	b2ed      	uxtb	r5, r5
 800d364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d366:	07da      	lsls	r2, r3, #31
 800d368:	d405      	bmi.n	800d376 <_putc_r+0x5e>
 800d36a:	89a3      	ldrh	r3, [r4, #12]
 800d36c:	059b      	lsls	r3, r3, #22
 800d36e:	d402      	bmi.n	800d376 <_putc_r+0x5e>
 800d370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d372:	f7ff f86d 	bl	800c450 <__retarget_lock_release_recursive>
 800d376:	4628      	mov	r0, r5
 800d378:	bd70      	pop	{r4, r5, r6, pc}
 800d37a:	4b09      	ldr	r3, [pc, #36]	; (800d3a0 <_putc_r+0x88>)
 800d37c:	429c      	cmp	r4, r3
 800d37e:	d101      	bne.n	800d384 <_putc_r+0x6c>
 800d380:	68b4      	ldr	r4, [r6, #8]
 800d382:	e7d6      	b.n	800d332 <_putc_r+0x1a>
 800d384:	4b07      	ldr	r3, [pc, #28]	; (800d3a4 <_putc_r+0x8c>)
 800d386:	429c      	cmp	r4, r3
 800d388:	bf08      	it	eq
 800d38a:	68f4      	ldreq	r4, [r6, #12]
 800d38c:	e7d1      	b.n	800d332 <_putc_r+0x1a>
 800d38e:	4629      	mov	r1, r5
 800d390:	4622      	mov	r2, r4
 800d392:	4630      	mov	r0, r6
 800d394:	f000 f81a 	bl	800d3cc <__swbuf_r>
 800d398:	4605      	mov	r5, r0
 800d39a:	e7e3      	b.n	800d364 <_putc_r+0x4c>
 800d39c:	0800d86c 	.word	0x0800d86c
 800d3a0:	0800d88c 	.word	0x0800d88c
 800d3a4:	0800d84c 	.word	0x0800d84c

0800d3a8 <_read_r>:
 800d3a8:	b538      	push	{r3, r4, r5, lr}
 800d3aa:	4d07      	ldr	r5, [pc, #28]	; (800d3c8 <_read_r+0x20>)
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	4608      	mov	r0, r1
 800d3b0:	4611      	mov	r1, r2
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	602a      	str	r2, [r5, #0]
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	f7f3 fae4 	bl	8000984 <_read>
 800d3bc:	1c43      	adds	r3, r0, #1
 800d3be:	d102      	bne.n	800d3c6 <_read_r+0x1e>
 800d3c0:	682b      	ldr	r3, [r5, #0]
 800d3c2:	b103      	cbz	r3, 800d3c6 <_read_r+0x1e>
 800d3c4:	6023      	str	r3, [r4, #0]
 800d3c6:	bd38      	pop	{r3, r4, r5, pc}
 800d3c8:	2000dd08 	.word	0x2000dd08

0800d3cc <__swbuf_r>:
 800d3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ce:	460e      	mov	r6, r1
 800d3d0:	4614      	mov	r4, r2
 800d3d2:	4605      	mov	r5, r0
 800d3d4:	b118      	cbz	r0, 800d3de <__swbuf_r+0x12>
 800d3d6:	6983      	ldr	r3, [r0, #24]
 800d3d8:	b90b      	cbnz	r3, 800d3de <__swbuf_r+0x12>
 800d3da:	f7fe ff75 	bl	800c2c8 <__sinit>
 800d3de:	4b21      	ldr	r3, [pc, #132]	; (800d464 <__swbuf_r+0x98>)
 800d3e0:	429c      	cmp	r4, r3
 800d3e2:	d12b      	bne.n	800d43c <__swbuf_r+0x70>
 800d3e4:	686c      	ldr	r4, [r5, #4]
 800d3e6:	69a3      	ldr	r3, [r4, #24]
 800d3e8:	60a3      	str	r3, [r4, #8]
 800d3ea:	89a3      	ldrh	r3, [r4, #12]
 800d3ec:	071a      	lsls	r2, r3, #28
 800d3ee:	d52f      	bpl.n	800d450 <__swbuf_r+0x84>
 800d3f0:	6923      	ldr	r3, [r4, #16]
 800d3f2:	b36b      	cbz	r3, 800d450 <__swbuf_r+0x84>
 800d3f4:	6923      	ldr	r3, [r4, #16]
 800d3f6:	6820      	ldr	r0, [r4, #0]
 800d3f8:	1ac0      	subs	r0, r0, r3
 800d3fa:	6963      	ldr	r3, [r4, #20]
 800d3fc:	b2f6      	uxtb	r6, r6
 800d3fe:	4283      	cmp	r3, r0
 800d400:	4637      	mov	r7, r6
 800d402:	dc04      	bgt.n	800d40e <__swbuf_r+0x42>
 800d404:	4621      	mov	r1, r4
 800d406:	4628      	mov	r0, r5
 800d408:	f7ff fa96 	bl	800c938 <_fflush_r>
 800d40c:	bb30      	cbnz	r0, 800d45c <__swbuf_r+0x90>
 800d40e:	68a3      	ldr	r3, [r4, #8]
 800d410:	3b01      	subs	r3, #1
 800d412:	60a3      	str	r3, [r4, #8]
 800d414:	6823      	ldr	r3, [r4, #0]
 800d416:	1c5a      	adds	r2, r3, #1
 800d418:	6022      	str	r2, [r4, #0]
 800d41a:	701e      	strb	r6, [r3, #0]
 800d41c:	6963      	ldr	r3, [r4, #20]
 800d41e:	3001      	adds	r0, #1
 800d420:	4283      	cmp	r3, r0
 800d422:	d004      	beq.n	800d42e <__swbuf_r+0x62>
 800d424:	89a3      	ldrh	r3, [r4, #12]
 800d426:	07db      	lsls	r3, r3, #31
 800d428:	d506      	bpl.n	800d438 <__swbuf_r+0x6c>
 800d42a:	2e0a      	cmp	r6, #10
 800d42c:	d104      	bne.n	800d438 <__swbuf_r+0x6c>
 800d42e:	4621      	mov	r1, r4
 800d430:	4628      	mov	r0, r5
 800d432:	f7ff fa81 	bl	800c938 <_fflush_r>
 800d436:	b988      	cbnz	r0, 800d45c <__swbuf_r+0x90>
 800d438:	4638      	mov	r0, r7
 800d43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d43c:	4b0a      	ldr	r3, [pc, #40]	; (800d468 <__swbuf_r+0x9c>)
 800d43e:	429c      	cmp	r4, r3
 800d440:	d101      	bne.n	800d446 <__swbuf_r+0x7a>
 800d442:	68ac      	ldr	r4, [r5, #8]
 800d444:	e7cf      	b.n	800d3e6 <__swbuf_r+0x1a>
 800d446:	4b09      	ldr	r3, [pc, #36]	; (800d46c <__swbuf_r+0xa0>)
 800d448:	429c      	cmp	r4, r3
 800d44a:	bf08      	it	eq
 800d44c:	68ec      	ldreq	r4, [r5, #12]
 800d44e:	e7ca      	b.n	800d3e6 <__swbuf_r+0x1a>
 800d450:	4621      	mov	r1, r4
 800d452:	4628      	mov	r0, r5
 800d454:	f000 f80c 	bl	800d470 <__swsetup_r>
 800d458:	2800      	cmp	r0, #0
 800d45a:	d0cb      	beq.n	800d3f4 <__swbuf_r+0x28>
 800d45c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d460:	e7ea      	b.n	800d438 <__swbuf_r+0x6c>
 800d462:	bf00      	nop
 800d464:	0800d86c 	.word	0x0800d86c
 800d468:	0800d88c 	.word	0x0800d88c
 800d46c:	0800d84c 	.word	0x0800d84c

0800d470 <__swsetup_r>:
 800d470:	4b32      	ldr	r3, [pc, #200]	; (800d53c <__swsetup_r+0xcc>)
 800d472:	b570      	push	{r4, r5, r6, lr}
 800d474:	681d      	ldr	r5, [r3, #0]
 800d476:	4606      	mov	r6, r0
 800d478:	460c      	mov	r4, r1
 800d47a:	b125      	cbz	r5, 800d486 <__swsetup_r+0x16>
 800d47c:	69ab      	ldr	r3, [r5, #24]
 800d47e:	b913      	cbnz	r3, 800d486 <__swsetup_r+0x16>
 800d480:	4628      	mov	r0, r5
 800d482:	f7fe ff21 	bl	800c2c8 <__sinit>
 800d486:	4b2e      	ldr	r3, [pc, #184]	; (800d540 <__swsetup_r+0xd0>)
 800d488:	429c      	cmp	r4, r3
 800d48a:	d10f      	bne.n	800d4ac <__swsetup_r+0x3c>
 800d48c:	686c      	ldr	r4, [r5, #4]
 800d48e:	89a3      	ldrh	r3, [r4, #12]
 800d490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d494:	0719      	lsls	r1, r3, #28
 800d496:	d42c      	bmi.n	800d4f2 <__swsetup_r+0x82>
 800d498:	06dd      	lsls	r5, r3, #27
 800d49a:	d411      	bmi.n	800d4c0 <__swsetup_r+0x50>
 800d49c:	2309      	movs	r3, #9
 800d49e:	6033      	str	r3, [r6, #0]
 800d4a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d4a4:	81a3      	strh	r3, [r4, #12]
 800d4a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4aa:	e03e      	b.n	800d52a <__swsetup_r+0xba>
 800d4ac:	4b25      	ldr	r3, [pc, #148]	; (800d544 <__swsetup_r+0xd4>)
 800d4ae:	429c      	cmp	r4, r3
 800d4b0:	d101      	bne.n	800d4b6 <__swsetup_r+0x46>
 800d4b2:	68ac      	ldr	r4, [r5, #8]
 800d4b4:	e7eb      	b.n	800d48e <__swsetup_r+0x1e>
 800d4b6:	4b24      	ldr	r3, [pc, #144]	; (800d548 <__swsetup_r+0xd8>)
 800d4b8:	429c      	cmp	r4, r3
 800d4ba:	bf08      	it	eq
 800d4bc:	68ec      	ldreq	r4, [r5, #12]
 800d4be:	e7e6      	b.n	800d48e <__swsetup_r+0x1e>
 800d4c0:	0758      	lsls	r0, r3, #29
 800d4c2:	d512      	bpl.n	800d4ea <__swsetup_r+0x7a>
 800d4c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4c6:	b141      	cbz	r1, 800d4da <__swsetup_r+0x6a>
 800d4c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4cc:	4299      	cmp	r1, r3
 800d4ce:	d002      	beq.n	800d4d6 <__swsetup_r+0x66>
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	f7ff fa8b 	bl	800c9ec <_free_r>
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	6363      	str	r3, [r4, #52]	; 0x34
 800d4da:	89a3      	ldrh	r3, [r4, #12]
 800d4dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d4e0:	81a3      	strh	r3, [r4, #12]
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	6063      	str	r3, [r4, #4]
 800d4e6:	6923      	ldr	r3, [r4, #16]
 800d4e8:	6023      	str	r3, [r4, #0]
 800d4ea:	89a3      	ldrh	r3, [r4, #12]
 800d4ec:	f043 0308 	orr.w	r3, r3, #8
 800d4f0:	81a3      	strh	r3, [r4, #12]
 800d4f2:	6923      	ldr	r3, [r4, #16]
 800d4f4:	b94b      	cbnz	r3, 800d50a <__swsetup_r+0x9a>
 800d4f6:	89a3      	ldrh	r3, [r4, #12]
 800d4f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d4fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d500:	d003      	beq.n	800d50a <__swsetup_r+0x9a>
 800d502:	4621      	mov	r1, r4
 800d504:	4630      	mov	r0, r6
 800d506:	f000 f847 	bl	800d598 <__smakebuf_r>
 800d50a:	89a0      	ldrh	r0, [r4, #12]
 800d50c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d510:	f010 0301 	ands.w	r3, r0, #1
 800d514:	d00a      	beq.n	800d52c <__swsetup_r+0xbc>
 800d516:	2300      	movs	r3, #0
 800d518:	60a3      	str	r3, [r4, #8]
 800d51a:	6963      	ldr	r3, [r4, #20]
 800d51c:	425b      	negs	r3, r3
 800d51e:	61a3      	str	r3, [r4, #24]
 800d520:	6923      	ldr	r3, [r4, #16]
 800d522:	b943      	cbnz	r3, 800d536 <__swsetup_r+0xc6>
 800d524:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d528:	d1ba      	bne.n	800d4a0 <__swsetup_r+0x30>
 800d52a:	bd70      	pop	{r4, r5, r6, pc}
 800d52c:	0781      	lsls	r1, r0, #30
 800d52e:	bf58      	it	pl
 800d530:	6963      	ldrpl	r3, [r4, #20]
 800d532:	60a3      	str	r3, [r4, #8]
 800d534:	e7f4      	b.n	800d520 <__swsetup_r+0xb0>
 800d536:	2000      	movs	r0, #0
 800d538:	e7f7      	b.n	800d52a <__swsetup_r+0xba>
 800d53a:	bf00      	nop
 800d53c:	200002ac 	.word	0x200002ac
 800d540:	0800d86c 	.word	0x0800d86c
 800d544:	0800d88c 	.word	0x0800d88c
 800d548:	0800d84c 	.word	0x0800d84c

0800d54c <__swhatbuf_r>:
 800d54c:	b570      	push	{r4, r5, r6, lr}
 800d54e:	460e      	mov	r6, r1
 800d550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d554:	2900      	cmp	r1, #0
 800d556:	b096      	sub	sp, #88	; 0x58
 800d558:	4614      	mov	r4, r2
 800d55a:	461d      	mov	r5, r3
 800d55c:	da08      	bge.n	800d570 <__swhatbuf_r+0x24>
 800d55e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d562:	2200      	movs	r2, #0
 800d564:	602a      	str	r2, [r5, #0]
 800d566:	061a      	lsls	r2, r3, #24
 800d568:	d410      	bmi.n	800d58c <__swhatbuf_r+0x40>
 800d56a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d56e:	e00e      	b.n	800d58e <__swhatbuf_r+0x42>
 800d570:	466a      	mov	r2, sp
 800d572:	f000 f89b 	bl	800d6ac <_fstat_r>
 800d576:	2800      	cmp	r0, #0
 800d578:	dbf1      	blt.n	800d55e <__swhatbuf_r+0x12>
 800d57a:	9a01      	ldr	r2, [sp, #4]
 800d57c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d580:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d584:	425a      	negs	r2, r3
 800d586:	415a      	adcs	r2, r3
 800d588:	602a      	str	r2, [r5, #0]
 800d58a:	e7ee      	b.n	800d56a <__swhatbuf_r+0x1e>
 800d58c:	2340      	movs	r3, #64	; 0x40
 800d58e:	2000      	movs	r0, #0
 800d590:	6023      	str	r3, [r4, #0]
 800d592:	b016      	add	sp, #88	; 0x58
 800d594:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d598 <__smakebuf_r>:
 800d598:	898b      	ldrh	r3, [r1, #12]
 800d59a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d59c:	079d      	lsls	r5, r3, #30
 800d59e:	4606      	mov	r6, r0
 800d5a0:	460c      	mov	r4, r1
 800d5a2:	d507      	bpl.n	800d5b4 <__smakebuf_r+0x1c>
 800d5a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5a8:	6023      	str	r3, [r4, #0]
 800d5aa:	6123      	str	r3, [r4, #16]
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	6163      	str	r3, [r4, #20]
 800d5b0:	b002      	add	sp, #8
 800d5b2:	bd70      	pop	{r4, r5, r6, pc}
 800d5b4:	ab01      	add	r3, sp, #4
 800d5b6:	466a      	mov	r2, sp
 800d5b8:	f7ff ffc8 	bl	800d54c <__swhatbuf_r>
 800d5bc:	9900      	ldr	r1, [sp, #0]
 800d5be:	4605      	mov	r5, r0
 800d5c0:	4630      	mov	r0, r6
 800d5c2:	f7fe ff7d 	bl	800c4c0 <_malloc_r>
 800d5c6:	b948      	cbnz	r0, 800d5dc <__smakebuf_r+0x44>
 800d5c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5cc:	059a      	lsls	r2, r3, #22
 800d5ce:	d4ef      	bmi.n	800d5b0 <__smakebuf_r+0x18>
 800d5d0:	f023 0303 	bic.w	r3, r3, #3
 800d5d4:	f043 0302 	orr.w	r3, r3, #2
 800d5d8:	81a3      	strh	r3, [r4, #12]
 800d5da:	e7e3      	b.n	800d5a4 <__smakebuf_r+0xc>
 800d5dc:	4b0d      	ldr	r3, [pc, #52]	; (800d614 <__smakebuf_r+0x7c>)
 800d5de:	62b3      	str	r3, [r6, #40]	; 0x28
 800d5e0:	89a3      	ldrh	r3, [r4, #12]
 800d5e2:	6020      	str	r0, [r4, #0]
 800d5e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5e8:	81a3      	strh	r3, [r4, #12]
 800d5ea:	9b00      	ldr	r3, [sp, #0]
 800d5ec:	6163      	str	r3, [r4, #20]
 800d5ee:	9b01      	ldr	r3, [sp, #4]
 800d5f0:	6120      	str	r0, [r4, #16]
 800d5f2:	b15b      	cbz	r3, 800d60c <__smakebuf_r+0x74>
 800d5f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	f000 f869 	bl	800d6d0 <_isatty_r>
 800d5fe:	b128      	cbz	r0, 800d60c <__smakebuf_r+0x74>
 800d600:	89a3      	ldrh	r3, [r4, #12]
 800d602:	f023 0303 	bic.w	r3, r3, #3
 800d606:	f043 0301 	orr.w	r3, r3, #1
 800d60a:	81a3      	strh	r3, [r4, #12]
 800d60c:	89a0      	ldrh	r0, [r4, #12]
 800d60e:	4305      	orrs	r5, r0
 800d610:	81a5      	strh	r5, [r4, #12]
 800d612:	e7cd      	b.n	800d5b0 <__smakebuf_r+0x18>
 800d614:	0800c261 	.word	0x0800c261

0800d618 <memmove>:
 800d618:	4288      	cmp	r0, r1
 800d61a:	b510      	push	{r4, lr}
 800d61c:	eb01 0402 	add.w	r4, r1, r2
 800d620:	d902      	bls.n	800d628 <memmove+0x10>
 800d622:	4284      	cmp	r4, r0
 800d624:	4623      	mov	r3, r4
 800d626:	d807      	bhi.n	800d638 <memmove+0x20>
 800d628:	1e43      	subs	r3, r0, #1
 800d62a:	42a1      	cmp	r1, r4
 800d62c:	d008      	beq.n	800d640 <memmove+0x28>
 800d62e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d632:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d636:	e7f8      	b.n	800d62a <memmove+0x12>
 800d638:	4402      	add	r2, r0
 800d63a:	4601      	mov	r1, r0
 800d63c:	428a      	cmp	r2, r1
 800d63e:	d100      	bne.n	800d642 <memmove+0x2a>
 800d640:	bd10      	pop	{r4, pc}
 800d642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d64a:	e7f7      	b.n	800d63c <memmove+0x24>

0800d64c <_realloc_r>:
 800d64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d650:	4680      	mov	r8, r0
 800d652:	4614      	mov	r4, r2
 800d654:	460e      	mov	r6, r1
 800d656:	b921      	cbnz	r1, 800d662 <_realloc_r+0x16>
 800d658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d65c:	4611      	mov	r1, r2
 800d65e:	f7fe bf2f 	b.w	800c4c0 <_malloc_r>
 800d662:	b92a      	cbnz	r2, 800d670 <_realloc_r+0x24>
 800d664:	f7ff f9c2 	bl	800c9ec <_free_r>
 800d668:	4625      	mov	r5, r4
 800d66a:	4628      	mov	r0, r5
 800d66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d670:	f000 f83e 	bl	800d6f0 <_malloc_usable_size_r>
 800d674:	4284      	cmp	r4, r0
 800d676:	4607      	mov	r7, r0
 800d678:	d802      	bhi.n	800d680 <_realloc_r+0x34>
 800d67a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d67e:	d812      	bhi.n	800d6a6 <_realloc_r+0x5a>
 800d680:	4621      	mov	r1, r4
 800d682:	4640      	mov	r0, r8
 800d684:	f7fe ff1c 	bl	800c4c0 <_malloc_r>
 800d688:	4605      	mov	r5, r0
 800d68a:	2800      	cmp	r0, #0
 800d68c:	d0ed      	beq.n	800d66a <_realloc_r+0x1e>
 800d68e:	42bc      	cmp	r4, r7
 800d690:	4622      	mov	r2, r4
 800d692:	4631      	mov	r1, r6
 800d694:	bf28      	it	cs
 800d696:	463a      	movcs	r2, r7
 800d698:	f7fe fedb 	bl	800c452 <memcpy>
 800d69c:	4631      	mov	r1, r6
 800d69e:	4640      	mov	r0, r8
 800d6a0:	f7ff f9a4 	bl	800c9ec <_free_r>
 800d6a4:	e7e1      	b.n	800d66a <_realloc_r+0x1e>
 800d6a6:	4635      	mov	r5, r6
 800d6a8:	e7df      	b.n	800d66a <_realloc_r+0x1e>
	...

0800d6ac <_fstat_r>:
 800d6ac:	b538      	push	{r3, r4, r5, lr}
 800d6ae:	4d07      	ldr	r5, [pc, #28]	; (800d6cc <_fstat_r+0x20>)
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	4608      	mov	r0, r1
 800d6b6:	4611      	mov	r1, r2
 800d6b8:	602b      	str	r3, [r5, #0]
 800d6ba:	f7f3 f98c 	bl	80009d6 <_fstat>
 800d6be:	1c43      	adds	r3, r0, #1
 800d6c0:	d102      	bne.n	800d6c8 <_fstat_r+0x1c>
 800d6c2:	682b      	ldr	r3, [r5, #0]
 800d6c4:	b103      	cbz	r3, 800d6c8 <_fstat_r+0x1c>
 800d6c6:	6023      	str	r3, [r4, #0]
 800d6c8:	bd38      	pop	{r3, r4, r5, pc}
 800d6ca:	bf00      	nop
 800d6cc:	2000dd08 	.word	0x2000dd08

0800d6d0 <_isatty_r>:
 800d6d0:	b538      	push	{r3, r4, r5, lr}
 800d6d2:	4d06      	ldr	r5, [pc, #24]	; (800d6ec <_isatty_r+0x1c>)
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	4608      	mov	r0, r1
 800d6da:	602b      	str	r3, [r5, #0]
 800d6dc:	f7f3 f98b 	bl	80009f6 <_isatty>
 800d6e0:	1c43      	adds	r3, r0, #1
 800d6e2:	d102      	bne.n	800d6ea <_isatty_r+0x1a>
 800d6e4:	682b      	ldr	r3, [r5, #0]
 800d6e6:	b103      	cbz	r3, 800d6ea <_isatty_r+0x1a>
 800d6e8:	6023      	str	r3, [r4, #0]
 800d6ea:	bd38      	pop	{r3, r4, r5, pc}
 800d6ec:	2000dd08 	.word	0x2000dd08

0800d6f0 <_malloc_usable_size_r>:
 800d6f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6f4:	1f18      	subs	r0, r3, #4
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	bfbc      	itt	lt
 800d6fa:	580b      	ldrlt	r3, [r1, r0]
 800d6fc:	18c0      	addlt	r0, r0, r3
 800d6fe:	4770      	bx	lr

0800d700 <_init>:
 800d700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d702:	bf00      	nop
 800d704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d706:	bc08      	pop	{r3}
 800d708:	469e      	mov	lr, r3
 800d70a:	4770      	bx	lr

0800d70c <_fini>:
 800d70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d70e:	bf00      	nop
 800d710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d712:	bc08      	pop	{r3}
 800d714:	469e      	mov	lr, r3
 800d716:	4770      	bx	lr
